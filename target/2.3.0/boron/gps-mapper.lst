
/Users/jhpowell/Documents/Particle/gps-mapper/target/2.3.0/boron/gps-mapper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a300  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000de320  000de320  0000e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000de328  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003dcd8  000de32c  0001dcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000930  2003dec0  2003dec0  0002dec0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000de514  000de514  0001e514  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000de53c  000de53c  0001e53c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00282438  00000000  00000000  0001e540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00026347  00000000  00000000  002a0978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00041782  00000000  00000000  002c6cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000033f0  00000000  00000000  00308441  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009f98  00000000  00000000  0030b831  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004cced  00000000  00000000  003157c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00064b6f  00000000  00000000  003624b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001179ea  00000000  00000000  003c7025  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009e90  00000000  00000000  004dea10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 ffea 	bl	db00a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fff2 	bl	db026 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcd8 	.word	0x2003dcd8
   d404c:	000de32c 	.word	0x000de32c
   d4050:	2003dec0 	.word	0x2003dec0
   d4054:	2003dec0 	.word	0x2003dec0
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 f801 	bl	da068 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de2f4 	.word	0x000de2f4
   d4080:	000de318 	.word	0x000de318

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bdd8 	b.w	d4c38 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa05 	bl	d4498 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 bfa1 	b.w	d9fd8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b959 	b.w	d834c <malloc>

000d409a <_Znaj>:
   d409a:	f004 b957 	b.w	d834c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b95d 	b.w	d835c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 f860 	bl	d8170 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7e31 	.word	0x000d7e31

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ca:	7c03      	ldrb	r3, [r0, #16]
   d40cc:	f013 0308 	ands.w	r3, r3, #8
   d40d0:	bf1e      	ittt	ne
   d40d2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40d4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40d6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40d8:	2b00      	cmp	r3, #0
  }
   d40da:	bfac      	ite	ge
   d40dc:	4618      	movge	r0, r3
   d40de:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40e2:	4770      	bx	lr

000d40e4 <_Z23displayvoltage_button_Av>:
bool buttonB = false;
bool buttonC = false;


void displayvoltage_button_A (void) {
  buttonA = true;
   d40e4:	4b04      	ldr	r3, [pc, #16]	; (d40f8 <_Z23displayvoltage_button_Av+0x14>)
   d40e6:	2201      	movs	r2, #1
   d40e8:	701a      	strb	r2, [r3, #0]
  buttonB = false;
   d40ea:	4a04      	ldr	r2, [pc, #16]	; (d40fc <_Z23displayvoltage_button_Av+0x18>)
   d40ec:	2300      	movs	r3, #0
   d40ee:	7013      	strb	r3, [r2, #0]
  buttonC = false;
   d40f0:	4a03      	ldr	r2, [pc, #12]	; (d4100 <_Z23displayvoltage_button_Av+0x1c>)
   d40f2:	7013      	strb	r3, [r2, #0]
};
   d40f4:	4770      	bx	lr
   d40f6:	bf00      	nop
   d40f8:	2003dcd8 	.word	0x2003dcd8
   d40fc:	2003dfe8 	.word	0x2003dfe8
   d4100:	2003dfe9 	.word	0x2003dfe9

000d4104 <_Z23displayvoltage_button_Bv>:

void displayvoltage_button_B (void) {
  buttonA = false;
   d4104:	4a04      	ldr	r2, [pc, #16]	; (d4118 <_Z23displayvoltage_button_Bv+0x14>)
   d4106:	2300      	movs	r3, #0
   d4108:	7013      	strb	r3, [r2, #0]
  buttonB = true;
   d410a:	4a04      	ldr	r2, [pc, #16]	; (d411c <_Z23displayvoltage_button_Bv+0x18>)
   d410c:	2101      	movs	r1, #1
   d410e:	7011      	strb	r1, [r2, #0]
  buttonC = false;
   d4110:	4a03      	ldr	r2, [pc, #12]	; (d4120 <_Z23displayvoltage_button_Bv+0x1c>)
   d4112:	7013      	strb	r3, [r2, #0]
};
   d4114:	4770      	bx	lr
   d4116:	bf00      	nop
   d4118:	2003dcd8 	.word	0x2003dcd8
   d411c:	2003dfe8 	.word	0x2003dfe8
   d4120:	2003dfe9 	.word	0x2003dfe9

000d4124 <_Z23displayvoltage_button_Cv>:

void displayvoltage_button_C (void) {
  buttonA = false;
   d4124:	4a04      	ldr	r2, [pc, #16]	; (d4138 <_Z23displayvoltage_button_Cv+0x14>)
   d4126:	2300      	movs	r3, #0
   d4128:	7013      	strb	r3, [r2, #0]
  buttonB = false;
   d412a:	4a04      	ldr	r2, [pc, #16]	; (d413c <_Z23displayvoltage_button_Cv+0x18>)
   d412c:	7013      	strb	r3, [r2, #0]
  buttonC = true;
   d412e:	4b04      	ldr	r3, [pc, #16]	; (d4140 <_Z23displayvoltage_button_Cv+0x1c>)
   d4130:	2201      	movs	r2, #1
   d4132:	701a      	strb	r2, [r3, #0]
};
   d4134:	4770      	bx	lr
   d4136:	bf00      	nop
   d4138:	2003dcd8 	.word	0x2003dcd8
   d413c:	2003dfe8 	.word	0x2003dfe8
   d4140:	2003dfe9 	.word	0x2003dfe9

000d4144 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4144:	6803      	ldr	r3, [r0, #0]
   d4146:	4718      	bx	r3

000d4148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d4148:	2a01      	cmp	r2, #1
   d414a:	d003      	beq.n	d4154 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d414c:	2a02      	cmp	r2, #2
   d414e:	d003      	beq.n	d4158 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d4150:	2000      	movs	r0, #0
   d4152:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4154:	6001      	str	r1, [r0, #0]
	      break;
   d4156:	e7fb      	b.n	d4150 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4158:	680b      	ldr	r3, [r1, #0]
   d415a:	6003      	str	r3, [r0, #0]
	}
   d415c:	e7f8      	b.n	d4150 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d415e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d415e:	4770      	bx	lr

000d4160 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4160:	b510      	push	{r4, lr}
  }
   d4162:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4164:	4604      	mov	r4, r0
  }
   d4166:	f006 f869 	bl	da23c <_ZdlPvj>
   d416a:	4620      	mov	r0, r4
   d416c:	bd10      	pop	{r4, pc}

000d416e <_ZN4FileD0Ev>:
   d416e:	b510      	push	{r4, lr}
   d4170:	2134      	movs	r1, #52	; 0x34
   d4172:	4604      	mov	r4, r0
   d4174:	f006 f862 	bl	da23c <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_Z12onSerialDatav>:

}

void onSerialData()
{
  _gps.onSerialData();
   d417c:	4801      	ldr	r0, [pc, #4]	; (d4184 <_Z12onSerialDatav+0x8>)
   d417e:	f001 bf61 	b.w	d6044 <_ZN3Gps12onSerialDataEv>
   d4182:	bf00      	nop
   d4184:	2003ded0 	.word	0x2003ded0

000d4188 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4188:	3010      	adds	r0, #16
   d418a:	f002 bd29 	b.w	d6be0 <_ZN7FatFile5writeEPKvj>

000d418e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d418e:	6943      	ldr	r3, [r0, #20]
   d4190:	b113      	cbz	r3, d4198 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4192:	6983      	ldr	r3, [r0, #24]
   d4194:	300c      	adds	r0, #12
   d4196:	4718      	bx	r3
            callback();
        }
    }
   d4198:	4770      	bx	lr

000d419a <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d419a:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d419c:	2100      	movs	r1, #0
   d419e:	4604      	mov	r4, r0
   d41a0:	4608      	mov	r0, r1
   d41a2:	f003 fdf5 	bl	d7d90 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41a6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41a8:	4620      	mov	r0, r4
   d41aa:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41ac:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41ae:	f003 fe07 	bl	d7dc0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41b2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41b4:	b10c      	cbz	r4, d41ba <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41b6:	2301      	movs	r3, #1
   d41b8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41ba:	2100      	movs	r1, #0
   d41bc:	2001      	movs	r0, #1
   d41be:	f003 fde7 	bl	d7d90 <os_thread_scheduling>
            }
        }
        if (t) {
   d41c2:	b12c      	cbz	r4, d41d0 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41c4:	6823      	ldr	r3, [r4, #0]
   d41c6:	4620      	mov	r0, r4
   d41c8:	689b      	ldr	r3, [r3, #8]
   d41ca:	4798      	blx	r3
            t->running = false;
   d41cc:	2300      	movs	r3, #0
   d41ce:	7123      	strb	r3, [r4, #4]
        }
    }
   d41d0:	b002      	add	sp, #8
   d41d2:	bd10      	pop	{r4, pc}

000d41d4 <_ZN4File5flushEv>:
    FatFile::sync();
   d41d4:	3010      	adds	r0, #16
   d41d6:	f002 bc79 	b.w	d6acc <_ZN7FatFile4syncEv>

000d41da <_ZN4File4peekEv>:
    return FatFile::peek();
   d41da:	3010      	adds	r0, #16
   d41dc:	f002 bb94 	b.w	d6908 <_ZN7FatFile4peekEv>

000d41e0 <_ZN4File4readEv>:
  int read() {
   d41e0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d41e2:	2201      	movs	r2, #1
   d41e4:	f10d 0107 	add.w	r1, sp, #7
   d41e8:	3010      	adds	r0, #16
   d41ea:	f002 fadf 	bl	d67ac <_ZN7FatFile4readEPvj>
   d41ee:	2801      	cmp	r0, #1
   d41f0:	bf0c      	ite	eq
   d41f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d41f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   d41fa:	b003      	add	sp, #12
   d41fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d4200:	b513      	push	{r0, r1, r4, lr}
   d4202:	4b05      	ldr	r3, [pc, #20]	; (d4218 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d4204:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4206:	f88d 3000 	strb.w	r3, [sp]
   d420a:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d420c:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d420e:	f004 fb8b 	bl	d8928 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d4212:	4620      	mov	r0, r4
   d4214:	b002      	add	sp, #8
   d4216:	bd10      	pop	{r4, pc}
   d4218:	2003decc 	.word	0x2003decc

000d421c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d421c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d421e:	2201      	movs	r2, #1
   d4220:	f88d 1007 	strb.w	r1, [sp, #7]
   d4224:	3010      	adds	r0, #16
   d4226:	f10d 0107 	add.w	r1, sp, #7
   d422a:	f002 fcd9 	bl	d6be0 <_ZN7FatFile5writeEPKvj>
  }
   d422e:	b003      	add	sp, #12
   d4230:	f85d fb04 	ldr.w	pc, [sp], #4

000d4234 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4234:	b40e      	push	{r1, r2, r3}
   d4236:	b503      	push	{r0, r1, lr}
   d4238:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d423a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d423c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4240:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4242:	f005 f814 	bl	d926e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4246:	b002      	add	sp, #8
   d4248:	f85d eb04 	ldr.w	lr, [sp], #4
   d424c:	b003      	add	sp, #12
   d424e:	4770      	bx	lr

000d4250 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4250:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4256:	7922      	ldrb	r2, [r4, #4]
   d4258:	68a3      	ldr	r3, [r4, #8]
   d425a:	b132      	cbz	r2, d426a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d425c:	b9a3      	cbnz	r3, d4288 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d425e:	490b      	ldr	r1, [pc, #44]	; (d428c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4260:	b002      	add	sp, #8
   d4262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4266:	f004 bed5 	b.w	d9014 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d426a:	4a09      	ldr	r2, [pc, #36]	; (d4290 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d426c:	7b26      	ldrb	r6, [r4, #12]
   d426e:	4d09      	ldr	r5, [pc, #36]	; (d4294 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4270:	4909      	ldr	r1, [pc, #36]	; (d4298 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4272:	7b64      	ldrb	r4, [r4, #13]
   d4274:	2e01      	cmp	r6, #1
   d4276:	bf18      	it	ne
   d4278:	4629      	movne	r1, r5
   d427a:	e9cd 1400 	strd	r1, r4, [sp]
   d427e:	4907      	ldr	r1, [pc, #28]	; (d429c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4280:	f7ff ffd8 	bl	d4234 <_ZN5Print6printfEPKcz>
  }
   d4284:	b002      	add	sp, #8
   d4286:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4288:	4a05      	ldr	r2, [pc, #20]	; (d42a0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d428a:	e7ef      	b.n	d426c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d428c:	000dcfa1 	.word	0x000dcfa1
   d4290:	000de050 	.word	0x000de050
   d4294:	000dcf9d 	.word	0x000dcf9d
   d4298:	000dcf99 	.word	0x000dcf99
   d429c:	000dcfb7 	.word	0x000dcfb7
   d42a0:	000dcf90 	.word	0x000dcf90

000d42a4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42a4:	b510      	push	{r4, lr}
      if (_M_manager)
   d42a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42a8:	4604      	mov	r4, r0
      if (_M_manager)
   d42aa:	b113      	cbz	r3, d42b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42ac:	2203      	movs	r2, #3
   d42ae:	4601      	mov	r1, r0
   d42b0:	4798      	blx	r3
    }
   d42b2:	4620      	mov	r0, r4
   d42b4:	bd10      	pop	{r4, pc}

000d42b6 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d42b6:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42b8:	6880      	ldr	r0, [r0, #8]
   d42ba:	2300      	movs	r3, #0
   d42bc:	b138      	cbz	r0, d42ce <_ZN5Timer5_stopEjb+0x18>
   d42be:	e9cd 1300 	strd	r1, r3, [sp]
   d42c2:	2102      	movs	r1, #2
   d42c4:	f003 fd84 	bl	d7dd0 <os_timer_change>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
    }
   d42ce:	b003      	add	sp, #12
   d42d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42d4:	b538      	push	{r3, r4, r5, lr}
   d42d6:	4b10      	ldr	r3, [pc, #64]	; (d4318 <_ZN5TimerD1Ev+0x44>)
   d42d8:	6003      	str	r3, [r0, #0]
        if (handle) {
   d42da:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d42dc:	4604      	mov	r4, r0
        if (handle) {
   d42de:	b1a3      	cbz	r3, d430a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d42e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d42e4:	2200      	movs	r2, #0
   d42e6:	f7ff ffe6 	bl	d42b6 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d42ea:	68a0      	ldr	r0, [r4, #8]
   d42ec:	2100      	movs	r1, #0
   d42ee:	f003 fd8f 	bl	d7e10 <os_timer_set_id>
            while (running) {
   d42f2:	7923      	ldrb	r3, [r4, #4]
   d42f4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42f8:	b113      	cbz	r3, d4300 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d42fa:	f003 fd41 	bl	d7d80 <os_thread_yield>
            while (running) {
   d42fe:	e7f8      	b.n	d42f2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4300:	68a0      	ldr	r0, [r4, #8]
   d4302:	4629      	mov	r1, r5
   d4304:	f003 fd54 	bl	d7db0 <os_timer_destroy>
            handle = nullptr;
   d4308:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d430a:	f104 000c 	add.w	r0, r4, #12
   d430e:	f7ff ffc9 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
    }
   d4312:	4620      	mov	r0, r4
   d4314:	bd38      	pop	{r3, r4, r5, pc}
   d4316:	bf00      	nop
   d4318:	000dd240 	.word	0x000dd240

000d431c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d431c:	b510      	push	{r4, lr}
   d431e:	4604      	mov	r4, r0
    }
   d4320:	f7ff ffd8 	bl	d42d4 <_ZN5TimerD1Ev>
   d4324:	4620      	mov	r0, r4
   d4326:	211c      	movs	r1, #28
   d4328:	f005 ff88 	bl	da23c <_ZdlPvj>
   d432c:	4620      	mov	r0, r4
   d432e:	bd10      	pop	{r4, pc}

000d4330 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4330:	b530      	push	{r4, r5, lr}
   d4332:	b085      	sub	sp, #20
class SPISettings : public Printable {
   d4334:	4b1b      	ldr	r3, [pc, #108]	; (d43a4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   d4336:	9300      	str	r3, [sp, #0]
   d4338:	7913      	ldrb	r3, [r2, #4]
   d433a:	f88d 3004 	strb.w	r3, [sp, #4]
   d433e:	6893      	ldr	r3, [r2, #8]
   d4340:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4342:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4346:	8993      	ldrh	r3, [r2, #12]
   d4348:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d434c:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d434e:	460a      	mov	r2, r1
   d4350:	466b      	mov	r3, sp
   d4352:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4356:	4628      	mov	r0, r5
   d4358:	f003 fa86 	bl	d7868 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d435c:	b910      	cbnz	r0, d4364 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   d435e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4360:	b005      	add	sp, #20
   d4362:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4364:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4366:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   d436a:	4628      	mov	r0, r5
   d436c:	f002 fbe4 	bl	d6b38 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4370:	2101      	movs	r1, #1
   d4372:	4620      	mov	r0, r4
   d4374:	f003 f926 	bl	d75c4 <_ZN9FatVolume4initEh>
   d4378:	4601      	mov	r1, r0
   d437a:	b168      	cbz	r0, d4398 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d437c:	4621      	mov	r1, r4
   d437e:	4628      	mov	r0, r5
   d4380:	f002 f9fb 	bl	d677a <_ZN7FatFile8openRootEP9FatVolume>
   d4384:	2800      	cmp	r0, #0
   d4386:	d0ea      	beq.n	d435e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   d4388:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d438c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4390:	d0e5      	beq.n	d435e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   d4392:	4b05      	ldr	r3, [pc, #20]	; (d43a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   d4394:	601d      	str	r5, [r3, #0]
    return true;
   d4396:	e7e3      	b.n	d4360 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   d4398:	4620      	mov	r0, r4
   d439a:	f003 f913 	bl	d75c4 <_ZN9FatVolume4initEh>
   d439e:	2800      	cmp	r0, #0
   d43a0:	d1ec      	bne.n	d437c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   d43a2:	e7dc      	b.n	d435e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   d43a4:	000dd22c 	.word	0x000dd22c
   d43a8:	2003e540 	.word	0x2003e540

000d43ac <_ZN9NmeaCacheD1Ev>:
#define NMEA_MSGID_PGT      "$PGTOP"

#define NMEA_MSGID_LENGTH   6
#define NMEA_MAX_SENTENCE   6

class NmeaCache
   d43ac:	b538      	push	{r3, r4, r5, lr}
   d43ae:	4605      	mov	r5, r0
   d43b0:	f100 0470 	add.w	r4, r0, #112	; 0x70
   d43b4:	42ac      	cmp	r4, r5
   d43b6:	d004      	beq.n	d43c2 <_ZN9NmeaCacheD1Ev+0x16>
   d43b8:	3c10      	subs	r4, #16
   d43ba:	4620      	mov	r0, r4
   d43bc:	f005 f8c2 	bl	d9544 <_ZN6StringD1Ev>
   d43c0:	e7f8      	b.n	d43b4 <_ZN9NmeaCacheD1Ev+0x8>
   d43c2:	4620      	mov	r0, r4
   d43c4:	bd38      	pop	{r3, r4, r5, pc}

000d43c6 <_ZN9NmeaCacheC1ERKS_>:
   d43c6:	b570      	push	{r4, r5, r6, lr}
   d43c8:	4605      	mov	r5, r0
   d43ca:	460e      	mov	r6, r1
   d43cc:	2400      	movs	r4, #0
   d43ce:	1931      	adds	r1, r6, r4
   d43d0:	1928      	adds	r0, r5, r4
   d43d2:	3410      	adds	r4, #16
   d43d4:	f005 f941 	bl	d965a <_ZN6StringC1ERKS_>
   d43d8:	2c70      	cmp	r4, #112	; 0x70
   d43da:	d1f8      	bne.n	d43ce <_ZN9NmeaCacheC1ERKS_+0x8>
   d43dc:	4628      	mov	r0, r5
   d43de:	bd70      	pop	{r4, r5, r6, pc}

000d43e0 <_Z11conv_coordsf>:
 {
 //Initialize the location.
 float f = in_coords;
 // Get the first two digits by turning f into an integer, then doing an integer divide by 100;
 // firsttowdigits should be 77 at this point.
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d43e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 {
   d43e4:	b5d0      	push	{r4, r6, r7, lr}
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d43e6:	ee17 4a90 	vmov	r4, s15
   d43ea:	2364      	movs	r3, #100	; 0x64
   d43ec:	fb94 f4f3 	sdiv	r4, r4, r3
 float nexttwodigits = f - (float)(firsttwodigits*100);
   d43f0:	4363      	muls	r3, r4
   d43f2:	ee07 3a90 	vmov	s15, r3
   d43f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 float theFinalAnswer = (float)(firsttwodigits + nexttwodigits/60.0);
   d43fa:	ee70 7a67 	vsub.f32	s15, s0, s15
   d43fe:	ee17 0a90 	vmov	r0, s15
   d4402:	f006 f887 	bl	da514 <__aeabi_f2d>
   d4406:	4b0a      	ldr	r3, [pc, #40]	; (d4430 <_Z11conv_coordsf+0x50>)
   d4408:	2200      	movs	r2, #0
   d440a:	f006 fa05 	bl	da818 <__aeabi_ddiv>
   d440e:	4606      	mov	r6, r0
   d4410:	4620      	mov	r0, r4
   d4412:	460f      	mov	r7, r1
   d4414:	f006 f86c 	bl	da4f0 <__aeabi_i2d>
   d4418:	4602      	mov	r2, r0
   d441a:	460b      	mov	r3, r1
   d441c:	4630      	mov	r0, r6
   d441e:	4639      	mov	r1, r7
   d4420:	f005 ff1a 	bl	da258 <__adddf3>
   d4424:	f006 fbc6 	bl	dabb4 <__aeabi_d2f>
 return theFinalAnswer;
 }
   d4428:	ee00 0a10 	vmov	s0, r0
   d442c:	bdd0      	pop	{r4, r6, r7, pc}
   d442e:	bf00      	nop
   d4430:	404e0000 	.word	0x404e0000

000d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4434:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4436:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4438:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d443a:	b17c      	cbz	r4, d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d443c:	6863      	ldr	r3, [r4, #4]
   d443e:	3b01      	subs	r3, #1
   d4440:	6063      	str	r3, [r4, #4]
   d4442:	b95b      	cbnz	r3, d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4444:	6823      	ldr	r3, [r4, #0]
   d4446:	4620      	mov	r0, r4
   d4448:	689b      	ldr	r3, [r3, #8]
   d444a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d444c:	68a3      	ldr	r3, [r4, #8]
   d444e:	3b01      	subs	r3, #1
   d4450:	60a3      	str	r3, [r4, #8]
   d4452:	b91b      	cbnz	r3, d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4454:	6823      	ldr	r3, [r4, #0]
   d4456:	4620      	mov	r0, r4
   d4458:	68db      	ldr	r3, [r3, #12]
   d445a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d445c:	4628      	mov	r0, r5
   d445e:	bd38      	pop	{r3, r4, r5, pc}

000d4460 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4460:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4462:	4c0b      	ldr	r4, [pc, #44]	; (d4490 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4464:	7821      	ldrb	r1, [r4, #0]
   d4466:	f3bf 8f5b 	dmb	ish
   d446a:	f011 0101 	ands.w	r1, r1, #1
   d446e:	d10b      	bne.n	d4488 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4470:	4620      	mov	r0, r4
   d4472:	9101      	str	r1, [sp, #4]
   d4474:	f7ff fe20 	bl	d40b8 <__cxa_guard_acquire>
   d4478:	9901      	ldr	r1, [sp, #4]
   d447a:	b128      	cbz	r0, d4488 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d447c:	4805      	ldr	r0, [pc, #20]	; (d4494 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d447e:	f004 ff33 	bl	d92e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4482:	4620      	mov	r0, r4
   d4484:	f7ff fe1d 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4488:	4802      	ldr	r0, [pc, #8]	; (d4494 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d448a:	b002      	add	sp, #8
   d448c:	bd10      	pop	{r4, pc}
   d448e:	bf00      	nop
   d4490:	2003dec0 	.word	0x2003dec0
   d4494:	2003dec4 	.word	0x2003dec4

000d4498 <loop>:
{
   d4498:	b570      	push	{r4, r5, r6, lr}
   d449a:	b0e8      	sub	sp, #416	; 0x1a0
  Pgtop pgtop = Pgtop(_gps);
   d449c:	49cc      	ldr	r1, [pc, #816]	; (d47d0 <loop+0x338>)
   d449e:	a83a      	add	r0, sp, #232	; 0xe8
   d44a0:	f7ff ff91 	bl	d43c6 <_ZN9NmeaCacheC1ERKS_>
   d44a4:	a93a      	add	r1, sp, #232	; 0xe8
   d44a6:	a812      	add	r0, sp, #72	; 0x48
   d44a8:	f002 f894 	bl	d65d4 <_ZN5PgtopC1E9NmeaCache>
   d44ac:	a83a      	add	r0, sp, #232	; 0xe8
   d44ae:	f7ff ff7d 	bl	d43ac <_ZN9NmeaCacheD1Ev>
  if (pgtop.parse())
   d44b2:	a812      	add	r0, sp, #72	; 0x48
   d44b4:	f002 f816 	bl	d64e4 <_ZN5Pgtop5parseEv>
   d44b8:	b360      	cbz	r0, d4514 <loop+0x7c>
    Serial.println("1) Antenna Status ($PGTOP)");
   d44ba:	f005 fced 	bl	d9e98 <_Z16_fetch_usbserialv>
   d44be:	49c5      	ldr	r1, [pc, #788]	; (d47d4 <loop+0x33c>)
   d44c0:	f004 fdbb 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d44c4:	f005 fce8 	bl	d9e98 <_Z16_fetch_usbserialv>
   d44c8:	49c3      	ldr	r1, [pc, #780]	; (d47d8 <loop+0x340>)
   d44ca:	f004 fdb6 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("Command ID: "); Serial.println(pgtop.commandId);
   d44ce:	f005 fce3 	bl	d9e98 <_Z16_fetch_usbserialv>
   d44d2:	49c2      	ldr	r1, [pc, #776]	; (d47dc <loop+0x344>)
   d44d4:	f004 fd9e 	bl	d9014 <_ZN5Print5printEPKc>
   d44d8:	f005 fcde 	bl	d9e98 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d44dc:	220a      	movs	r2, #10
   d44de:	991c      	ldr	r1, [sp, #112]	; 0x70
   d44e0:	4604      	mov	r4, r0
   d44e2:	f004 fdb4 	bl	d904e <_ZN5Print11printNumberEmh>
        n += println();
   d44e6:	4620      	mov	r0, r4
   d44e8:	f004 fd9b 	bl	d9022 <_ZN5Print7printlnEv>
    Serial.print("Antenna Status: "); Serial.println(pgtop.reference);
   d44ec:	f005 fcd4 	bl	d9e98 <_Z16_fetch_usbserialv>
   d44f0:	49bb      	ldr	r1, [pc, #748]	; (d47e0 <loop+0x348>)
   d44f2:	f004 fd8f 	bl	d9014 <_ZN5Print5printEPKc>
   d44f6:	f005 fccf 	bl	d9e98 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d44fa:	991d      	ldr	r1, [sp, #116]	; 0x74
   d44fc:	220a      	movs	r2, #10
   d44fe:	4604      	mov	r4, r0
   d4500:	f004 fda5 	bl	d904e <_ZN5Print11printNumberEmh>
        n += println();
   d4504:	4620      	mov	r0, r4
   d4506:	f004 fd8c 	bl	d9022 <_ZN5Print7printlnEv>
    Serial.println("");
   d450a:	f005 fcc5 	bl	d9e98 <_Z16_fetch_usbserialv>
   d450e:	49b5      	ldr	r1, [pc, #724]	; (d47e4 <loop+0x34c>)
   d4510:	f004 fd93 	bl	d903a <_ZN5Print7printlnEPKc>
  Gga gga = Gga(_gps);
   d4514:	49ae      	ldr	r1, [pc, #696]	; (d47d0 <loop+0x338>)
   d4516:	a81e      	add	r0, sp, #120	; 0x78
   d4518:	f7ff ff55 	bl	d43c6 <_ZN9NmeaCacheC1ERKS_>
   d451c:	a91e      	add	r1, sp, #120	; 0x78
   d451e:	a83a      	add	r0, sp, #232	; 0xe8
   d4520:	f002 f87a 	bl	d6618 <_ZN3GgaC1E9NmeaCache>
   d4524:	a81e      	add	r0, sp, #120	; 0x78
   d4526:	f7ff ff41 	bl	d43ac <_ZN9NmeaCacheD1Ev>
  if (gga.parse())
   d452a:	a83a      	add	r0, sp, #232	; 0xe8
   d452c:	f001 fff0 	bl	d6510 <_ZN3Gga5parseEv>
   d4530:	2800      	cmp	r0, #0
   d4532:	f000 81b3 	beq.w	d489c <loop+0x404>
    Serial.println("2) Global Positioning System Fixed Data ($GPGGA)");
   d4536:	f005 fcaf 	bl	d9e98 <_Z16_fetch_usbserialv>
   d453a:	49ab      	ldr	r1, [pc, #684]	; (d47e8 <loop+0x350>)
   d453c:	f004 fd7d 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d4540:	f005 fcaa 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4544:	49a4      	ldr	r1, [pc, #656]	; (d47d8 <loop+0x340>)
   d4546:	f004 fd78 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("UTC Time: "); Serial.println(gga.utcTime);
   d454a:	f005 fca5 	bl	d9e98 <_Z16_fetch_usbserialv>
   d454e:	49a7      	ldr	r1, [pc, #668]	; (d47ec <loop+0x354>)
   d4550:	f004 fd60 	bl	d9014 <_ZN5Print5printEPKc>
   d4554:	f005 fca0 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4558:	9944      	ldr	r1, [sp, #272]	; 0x110
   d455a:	f004 fd6e 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("Latitude: "); Serial.println(gga.latitude);
   d455e:	f005 fc9b 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4562:	49a3      	ldr	r1, [pc, #652]	; (d47f0 <loop+0x358>)
   d4564:	f004 fd56 	bl	d9014 <_ZN5Print5printEPKc>
   d4568:	f005 fc96 	bl	d9e98 <_Z16_fetch_usbserialv>
   d456c:	9948      	ldr	r1, [sp, #288]	; 0x120
   d456e:	f004 fd64 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("North/SouthIndicator: "); Serial.println(gga.northSouthIndicator);
   d4572:	f005 fc91 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4576:	499f      	ldr	r1, [pc, #636]	; (d47f4 <loop+0x35c>)
   d4578:	f004 fd4c 	bl	d9014 <_ZN5Print5printEPKc>
   d457c:	f005 fc8c 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4580:	994c      	ldr	r1, [sp, #304]	; 0x130
   d4582:	f004 fd5a 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("Longitude: "); Serial.println(gga.longitude);
   d4586:	f005 fc87 	bl	d9e98 <_Z16_fetch_usbserialv>
   d458a:	499b      	ldr	r1, [pc, #620]	; (d47f8 <loop+0x360>)
   d458c:	f004 fd42 	bl	d9014 <_ZN5Print5printEPKc>
   d4590:	f005 fc82 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4594:	9950      	ldr	r1, [sp, #320]	; 0x140
   d4596:	f004 fd50 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("East/WestIndicator: "); Serial.println(gga.eastWestIndicator);
   d459a:	f005 fc7d 	bl	d9e98 <_Z16_fetch_usbserialv>
   d459e:	4997      	ldr	r1, [pc, #604]	; (d47fc <loop+0x364>)
   d45a0:	f004 fd38 	bl	d9014 <_ZN5Print5printEPKc>
   d45a4:	f005 fc78 	bl	d9e98 <_Z16_fetch_usbserialv>
   d45a8:	9954      	ldr	r1, [sp, #336]	; 0x150
   d45aa:	f004 fd46 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("Position Fix Indicator: "); Serial.println(gga.positionFixIndicator);
   d45ae:	f005 fc73 	bl	d9e98 <_Z16_fetch_usbserialv>
   d45b2:	4993      	ldr	r1, [pc, #588]	; (d4800 <loop+0x368>)
   d45b4:	f004 fd2e 	bl	d9014 <_ZN5Print5printEPKc>
   d45b8:	f005 fc6e 	bl	d9e98 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d45bc:	220a      	movs	r2, #10
   d45be:	f89d 1160 	ldrb.w	r1, [sp, #352]	; 0x160
   d45c2:	4604      	mov	r4, r0
   d45c4:	f004 fd43 	bl	d904e <_ZN5Print11printNumberEmh>
        n += println();
   d45c8:	4620      	mov	r0, r4
   d45ca:	f004 fd2a 	bl	d9022 <_ZN5Print7printlnEv>
    Serial.print("Satellites Used: "); Serial.println(gga.satellitesUsed);
   d45ce:	f005 fc63 	bl	d9e98 <_Z16_fetch_usbserialv>
   d45d2:	498c      	ldr	r1, [pc, #560]	; (d4804 <loop+0x36c>)
   d45d4:	f004 fd1e 	bl	d9014 <_ZN5Print5printEPKc>
   d45d8:	f005 fc5e 	bl	d9e98 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d45dc:	220a      	movs	r2, #10
   d45de:	f89d 1161 	ldrb.w	r1, [sp, #353]	; 0x161
   d45e2:	4604      	mov	r4, r0
   d45e4:	f004 fd33 	bl	d904e <_ZN5Print11printNumberEmh>
        n += println();
   d45e8:	4620      	mov	r0, r4
   d45ea:	f004 fd1a 	bl	d9022 <_ZN5Print7printlnEv>
    Serial.print("Horizontal Dilution of Precision: "); Serial.println(gga.hdop);
   d45ee:	f005 fc53 	bl	d9e98 <_Z16_fetch_usbserialv>
   d45f2:	4985      	ldr	r1, [pc, #532]	; (d4808 <loop+0x370>)
   d45f4:	f004 fd0e 	bl	d9014 <_ZN5Print5printEPKc>
   d45f8:	f005 fc4e 	bl	d9e98 <_Z16_fetch_usbserialv>
   d45fc:	ed9d 0a59 	vldr	s0, [sp, #356]	; 0x164
   d4600:	2102      	movs	r1, #2
   d4602:	f004 fe25 	bl	d9250 <_ZN5Print7printlnEfi>
    Serial.print("Altitude: "); Serial.print(gga.altitude); Serial.print(" "); Serial.println(gga.altitudeUnit);
   d4606:	f005 fc47 	bl	d9e98 <_Z16_fetch_usbserialv>
   d460a:	4980      	ldr	r1, [pc, #512]	; (d480c <loop+0x374>)
   d460c:	f004 fd02 	bl	d9014 <_ZN5Print5printEPKc>
   d4610:	f005 fc42 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4614:	ed9d 0a5a 	vldr	s0, [sp, #360]	; 0x168
   d4618:	2102      	movs	r1, #2
   d461a:	f004 fdff 	bl	d921c <_ZN5Print5printEfi>
   d461e:	f005 fc3b 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4622:	497b      	ldr	r1, [pc, #492]	; (d4810 <loop+0x378>)
   d4624:	f004 fcf6 	bl	d9014 <_ZN5Print5printEPKc>
   d4628:	f005 fc36 	bl	d9e98 <_Z16_fetch_usbserialv>
   d462c:	995b      	ldr	r1, [sp, #364]	; 0x16c
   d462e:	f004 fd04 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("Geoidal Separation: "); Serial.print(gga.geoidalSeparation); Serial.print(" "); Serial.println(gga.geoidalSeparationUnit);
   d4632:	f005 fc31 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4636:	4977      	ldr	r1, [pc, #476]	; (d4814 <loop+0x37c>)
   d4638:	f004 fcec 	bl	d9014 <_ZN5Print5printEPKc>
   d463c:	f005 fc2c 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4640:	ed9d 0a5f 	vldr	s0, [sp, #380]	; 0x17c
   d4644:	2102      	movs	r1, #2
   d4646:	f004 fde9 	bl	d921c <_ZN5Print5printEfi>
   d464a:	f005 fc25 	bl	d9e98 <_Z16_fetch_usbserialv>
   d464e:	4970      	ldr	r1, [pc, #448]	; (d4810 <loop+0x378>)
   d4650:	f004 fce0 	bl	d9014 <_ZN5Print5printEPKc>
   d4654:	f005 fc20 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4658:	9960      	ldr	r1, [sp, #384]	; 0x180
   d465a:	f004 fcee 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.print("Age of Diff. Corr.: "); Serial.println(gga.ageOfDiffCorr);
   d465e:	f005 fc1b 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4662:	496d      	ldr	r1, [pc, #436]	; (d4818 <loop+0x380>)
   d4664:	f004 fcd6 	bl	d9014 <_ZN5Print5printEPKc>
   d4668:	f005 fc16 	bl	d9e98 <_Z16_fetch_usbserialv>
   d466c:	9964      	ldr	r1, [sp, #400]	; 0x190
   d466e:	f004 fce4 	bl	d903a <_ZN5Print7printlnEPKc>
    Serial.println("");
   d4672:	f005 fc11 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4676:	495b      	ldr	r1, [pc, #364]	; (d47e4 <loop+0x34c>)
   d4678:	f004 fcdf 	bl	d903a <_ZN5Print7printlnEPKc>
    CellularSignal sig = Cellular.RSSI();
   d467c:	4967      	ldr	r1, [pc, #412]	; (d481c <loop+0x384>)
   d467e:	a81e      	add	r0, sp, #120	; 0x78
   d4680:	f003 ff16 	bl	d84b0 <_ZN5spark13CellularClass4RSSIEv>
    String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d4684:	f005 fad5 	bl	d9c32 <_ZN9TimeClass3nowEv>
   d4688:	4b65      	ldr	r3, [pc, #404]	; (d4820 <loop+0x388>)
   d468a:	4966      	ldr	r1, [pc, #408]	; (d4824 <loop+0x38c>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	9300      	str	r3, [sp, #0]
   d4690:	4602      	mov	r2, r0
   d4692:	17c3      	asrs	r3, r0, #31
   d4694:	a802      	add	r0, sp, #8
   d4696:	f005 fa6d 	bl	d9b74 <_ZN9TimeClass6formatExPKc>
    if (buttonA) { 
   d469a:	4b63      	ldr	r3, [pc, #396]	; (d4828 <loop+0x390>)
   d469c:	781e      	ldrb	r6, [r3, #0]
   d469e:	2e00      	cmp	r6, #0
   d46a0:	f000 812a 	beq.w	d48f8 <loop+0x460>
      display.clearDisplay();
   d46a4:	4c61      	ldr	r4, [pc, #388]	; (d482c <loop+0x394>)
   d46a6:	4620      	mov	r0, r4
   d46a8:	f001 f954 	bl	d5954 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d46ac:	2101      	movs	r1, #1
   d46ae:	4620      	mov	r0, r4
   d46b0:	f000 ffd1 	bl	d5656 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d46b4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d46b8:	2200      	movs	r2, #0
   d46ba:	e9c4 2304 	strd	r2, r3, [r4, #16]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d46be:	495c      	ldr	r1, [pc, #368]	; (d4830 <loop+0x398>)
   d46c0:	a80e      	add	r0, sp, #56	; 0x38
   d46c2:	f004 ff8a 	bl	d95da <_ZN6StringC1EPKc>
      display.println("Fix:" + String(gga.positionFixIndicator)+"  " + "Cell-Sig:" + int(sig.getStrength()) +"%");
   d46c6:	220a      	movs	r2, #10
   d46c8:	f89d 1160 	ldrb.w	r1, [sp, #352]	; 0x160
   d46cc:	a80a      	add	r0, sp, #40	; 0x28
   d46ce:	f004 fffa 	bl	d96c6 <_ZN6StringC1Ehh>
   d46d2:	a90a      	add	r1, sp, #40	; 0x28
   d46d4:	a80e      	add	r0, sp, #56	; 0x38
   d46d6:	f005 f861 	bl	d979c <_ZplRK15StringSumHelperRK6String>
   d46da:	4956      	ldr	r1, [pc, #344]	; (d4834 <loop+0x39c>)
   d46dc:	f005 f86a 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d46e0:	4955      	ldr	r1, [pc, #340]	; (d4838 <loop+0x3a0>)
   d46e2:	f005 f867 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d46e6:	4605      	mov	r5, r0
   d46e8:	a81e      	add	r0, sp, #120	; 0x78
   d46ea:	f003 ff4f 	bl	d858c <_ZNK14CellularSignal11getStrengthEv>
   d46ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d46f2:	4628      	mov	r0, r5
   d46f4:	ee17 1a90 	vmov	r1, s15
   d46f8:	f005 f871 	bl	d97de <_ZplRK15StringSumHelperi>
   d46fc:	494f      	ldr	r1, [pc, #316]	; (d483c <loop+0x3a4>)
   d46fe:	f005 f859 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4702:	6801      	ldr	r1, [r0, #0]
   d4704:	4620      	mov	r0, r4
   d4706:	f004 fc98 	bl	d903a <_ZN5Print7printlnEPKc>
   d470a:	a80a      	add	r0, sp, #40	; 0x28
   d470c:	f004 ff1a 	bl	d9544 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4710:	a80e      	add	r0, sp, #56	; 0x38
   d4712:	f004 ff17 	bl	d9544 <_ZN6StringD1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4716:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   d471a:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d471c:	4948      	ldr	r1, [pc, #288]	; (d4840 <loop+0x3a8>)
   d471e:	a80a      	add	r0, sp, #40	; 0x28
   d4720:	f004 ff5b 	bl	d95da <_ZN6StringC1EPKc>
      display.println("Lat:" + String(gga.northSouthIndicator)+" "+String(conv_coords(gga.latitude.toFloat())));
   d4724:	a94c      	add	r1, sp, #304	; 0x130
   d4726:	a806      	add	r0, sp, #24
   d4728:	f004 ff97 	bl	d965a <_ZN6StringC1ERKS_>
   d472c:	a906      	add	r1, sp, #24
   d472e:	a80a      	add	r0, sp, #40	; 0x28
   d4730:	f005 f834 	bl	d979c <_ZplRK15StringSumHelperRK6String>
   d4734:	4936      	ldr	r1, [pc, #216]	; (d4810 <loop+0x378>)
   d4736:	f005 f83d 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d473a:	4605      	mov	r5, r0
   d473c:	a848      	add	r0, sp, #288	; 0x120
   d473e:	f005 f903 	bl	d9948 <_ZNK6String7toFloatEv>
   d4742:	f7ff fe4d 	bl	d43e0 <_Z11conv_coordsf>
   d4746:	2106      	movs	r1, #6
   d4748:	a80e      	add	r0, sp, #56	; 0x38
   d474a:	f004 ffce 	bl	d96ea <_ZN6StringC1Efi>
   d474e:	a90e      	add	r1, sp, #56	; 0x38
   d4750:	4628      	mov	r0, r5
   d4752:	f005 f823 	bl	d979c <_ZplRK15StringSumHelperRK6String>
   d4756:	6801      	ldr	r1, [r0, #0]
   d4758:	4620      	mov	r0, r4
   d475a:	f004 fc6e 	bl	d903a <_ZN5Print7printlnEPKc>
   d475e:	a80e      	add	r0, sp, #56	; 0x38
   d4760:	f004 fef0 	bl	d9544 <_ZN6StringD1Ev>
   d4764:	a806      	add	r0, sp, #24
   d4766:	f004 feed 	bl	d9544 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d476a:	a80a      	add	r0, sp, #40	; 0x28
   d476c:	f004 feea 	bl	d9544 <_ZN6StringD1Ev>
   d4770:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   d4774:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d4776:	4933      	ldr	r1, [pc, #204]	; (d4844 <loop+0x3ac>)
   d4778:	a80a      	add	r0, sp, #40	; 0x28
   d477a:	f004 ff2e 	bl	d95da <_ZN6StringC1EPKc>
      display.println("Long:" + String(gga.eastWestIndicator) +" "+String(conv_coords(gga.longitude.toFloat())));
   d477e:	a954      	add	r1, sp, #336	; 0x150
   d4780:	a806      	add	r0, sp, #24
   d4782:	f004 ff6a 	bl	d965a <_ZN6StringC1ERKS_>
   d4786:	a906      	add	r1, sp, #24
   d4788:	a80a      	add	r0, sp, #40	; 0x28
   d478a:	f005 f807 	bl	d979c <_ZplRK15StringSumHelperRK6String>
   d478e:	4920      	ldr	r1, [pc, #128]	; (d4810 <loop+0x378>)
   d4790:	f005 f810 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4794:	4605      	mov	r5, r0
   d4796:	a850      	add	r0, sp, #320	; 0x140
   d4798:	f005 f8d6 	bl	d9948 <_ZNK6String7toFloatEv>
   d479c:	f7ff fe20 	bl	d43e0 <_Z11conv_coordsf>
   d47a0:	2106      	movs	r1, #6
   d47a2:	a80e      	add	r0, sp, #56	; 0x38
   d47a4:	f004 ffa1 	bl	d96ea <_ZN6StringC1Efi>
   d47a8:	a90e      	add	r1, sp, #56	; 0x38
   d47aa:	4628      	mov	r0, r5
   d47ac:	f004 fff6 	bl	d979c <_ZplRK15StringSumHelperRK6String>
   d47b0:	6801      	ldr	r1, [r0, #0]
   d47b2:	4620      	mov	r0, r4
   d47b4:	f004 fc41 	bl	d903a <_ZN5Print7printlnEPKc>
   d47b8:	a80e      	add	r0, sp, #56	; 0x38
   d47ba:	f004 fec3 	bl	d9544 <_ZN6StringD1Ev>
   d47be:	a806      	add	r0, sp, #24
   d47c0:	f004 fec0 	bl	d9544 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d47c4:	a80a      	add	r0, sp, #40	; 0x28
   d47c6:	f004 febd 	bl	d9544 <_ZN6StringD1Ev>
      display.display();
   d47ca:	4620      	mov	r0, r4
   d47cc:	e03c      	b.n	d4848 <loop+0x3b0>
   d47ce:	bf00      	nop
   d47d0:	2003ded0 	.word	0x2003ded0
   d47d4:	000dcfd4 	.word	0x000dcfd4
   d47d8:	000dcfef 	.word	0x000dcfef
   d47dc:	000dd026 	.word	0x000dd026
   d47e0:	000dd033 	.word	0x000dd033
   d47e4:	000de050 	.word	0x000de050
   d47e8:	000dd044 	.word	0x000dd044
   d47ec:	000dd075 	.word	0x000dd075
   d47f0:	000dd080 	.word	0x000dd080
   d47f4:	000dd08b 	.word	0x000dd08b
   d47f8:	000dd0a2 	.word	0x000dd0a2
   d47fc:	000dd0ae 	.word	0x000dd0ae
   d4800:	000dd0c3 	.word	0x000dd0c3
   d4804:	000dd0dc 	.word	0x000dd0dc
   d4808:	000dd0ee 	.word	0x000dd0ee
   d480c:	000dd111 	.word	0x000dd111
   d4810:	000dd14c 	.word	0x000dd14c
   d4814:	000dd11c 	.word	0x000dd11c
   d4818:	000dd131 	.word	0x000dd131
   d481c:	2003e550 	.word	0x2003e550
   d4820:	2003dce4 	.word	0x2003dce4
   d4824:	2003e5b4 	.word	0x2003e5b4
   d4828:	2003dcd8 	.word	0x2003dcd8
   d482c:	2003dffc 	.word	0x2003dffc
   d4830:	000dd146 	.word	0x000dd146
   d4834:	000dd14b 	.word	0x000dd14b
   d4838:	000dd14e 	.word	0x000dd14e
   d483c:	000dd17c 	.word	0x000dd17c
   d4840:	000dd158 	.word	0x000dd158
   d4844:	000dd15d 	.word	0x000dd15d
      display.display();
   d4848:	f001 faf0 	bl	d5e2c <_ZN16Adafruit_SSD13067displayEv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d484c:	f7ff fe08 	bl	d4460 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4850:	2100      	movs	r1, #0
   d4852:	f004 fd64 	bl	d931e <_ZN8SPIClass11setDataModeEh>
	if (gga.positionFixIndicator != 0){
   d4856:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
   d485a:	b1e3      	cbz	r3, d4896 <loop+0x3fe>
	   if (millis() - lastmillis_pub >= pub_time_milli) {
   d485c:	4d85      	ldr	r5, [pc, #532]	; (d4a74 <loop+0x5dc>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d485e:	f003 faf7 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
   d4862:	682a      	ldr	r2, [r5, #0]
   d4864:	1a80      	subs	r0, r0, r2
   d4866:	4a84      	ldr	r2, [pc, #528]	; (d4a78 <loop+0x5e0>)
   d4868:	6812      	ldr	r2, [r2, #0]
   d486a:	4290      	cmp	r0, r2
   d486c:	d313      	bcc.n	d4896 <loop+0x3fe>
    return open(m_cwd, path, oflag);
   d486e:	4a83      	ldr	r2, [pc, #524]	; (d4a7c <loop+0x5e4>)
   d4870:	4983      	ldr	r1, [pc, #524]	; (d4a80 <loop+0x5e8>)
   d4872:	6812      	ldr	r2, [r2, #0]
   d4874:	6809      	ldr	r1, [r1, #0]
   d4876:	4883      	ldr	r0, [pc, #524]	; (d4a84 <loop+0x5ec>)
   d4878:	f244 2302 	movw	r3, #16898	; 0x4202
   d487c:	f002 f963 	bl	d6b46 <_ZN7FatFile4openEPS_PKci>
	     if (!myFile.open(datafile_name, O_RDWR | O_CREAT | O_AT_END)) {
   d4880:	2800      	cmp	r0, #0
   d4882:	f040 80b1 	bne.w	d49e8 <loop+0x550>
            Serial.println("SD Card file deviceID-xxx open failed");
   d4886:	f005 fb07 	bl	d9e98 <_Z16_fetch_usbserialv>
   d488a:	497f      	ldr	r1, [pc, #508]	; (d4a88 <loop+0x5f0>)
   d488c:	f004 fbd5 	bl	d903a <_ZN5Print7printlnEPKc>
   d4890:	f003 fade 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
	    lastmillis_pub = millis();
   d4894:	6028      	str	r0, [r5, #0]
    String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d4896:	a802      	add	r0, sp, #8
   d4898:	f004 fe54 	bl	d9544 <_ZN6StringD1Ev>
  delay(1000);
   d489c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d48a0:	f003 fdac 	bl	d83fc <delay>
Checksum
<CR> <LF>                                       End of message termination

*/

class Gga : public Nmea
   d48a4:	4b79      	ldr	r3, [pc, #484]	; (d4a8c <loop+0x5f4>)
   d48a6:	933a      	str	r3, [sp, #232]	; 0xe8
   d48a8:	a864      	add	r0, sp, #400	; 0x190
   d48aa:	f004 fe4b 	bl	d9544 <_ZN6StringD1Ev>
   d48ae:	a860      	add	r0, sp, #384	; 0x180
   d48b0:	f004 fe48 	bl	d9544 <_ZN6StringD1Ev>
   d48b4:	a85b      	add	r0, sp, #364	; 0x16c
   d48b6:	f004 fe45 	bl	d9544 <_ZN6StringD1Ev>
   d48ba:	a854      	add	r0, sp, #336	; 0x150
   d48bc:	f004 fe42 	bl	d9544 <_ZN6StringD1Ev>
   d48c0:	a850      	add	r0, sp, #320	; 0x140
   d48c2:	f004 fe3f 	bl	d9544 <_ZN6StringD1Ev>
   d48c6:	a84c      	add	r0, sp, #304	; 0x130
   d48c8:	f004 fe3c 	bl	d9544 <_ZN6StringD1Ev>
   d48cc:	a848      	add	r0, sp, #288	; 0x120
   d48ce:	f004 fe39 	bl	d9544 <_ZN6StringD1Ev>
   d48d2:	a844      	add	r0, sp, #272	; 0x110
   d48d4:	f004 fe36 	bl	d9544 <_ZN6StringD1Ev>
#define _NMEA_H

#include "application.h"
#include "NmeaCache.h"

class Nmea
   d48d8:	a840      	add	r0, sp, #256	; 0x100
   d48da:	f004 fe33 	bl	d9544 <_ZN6StringD1Ev>
   d48de:	a83b      	add	r0, sp, #236	; 0xec
   d48e0:	f004 fe30 	bl	d9544 <_ZN6StringD1Ev>
class Pgtop : public Nmea
   d48e4:	4b6a      	ldr	r3, [pc, #424]	; (d4a90 <loop+0x5f8>)
   d48e6:	9312      	str	r3, [sp, #72]	; 0x48
   d48e8:	a818      	add	r0, sp, #96	; 0x60
   d48ea:	f004 fe2b 	bl	d9544 <_ZN6StringD1Ev>
   d48ee:	a813      	add	r0, sp, #76	; 0x4c
   d48f0:	f004 fe28 	bl	d9544 <_ZN6StringD1Ev>
}
   d48f4:	b068      	add	sp, #416	; 0x1a0
   d48f6:	bd70      	pop	{r4, r5, r6, pc}
    else if (buttonB){
   d48f8:	4b66      	ldr	r3, [pc, #408]	; (d4a94 <loop+0x5fc>)
   d48fa:	781d      	ldrb	r5, [r3, #0]
   d48fc:	b1c5      	cbz	r5, d4930 <loop+0x498>
      display.clearDisplay();
   d48fe:	4c66      	ldr	r4, [pc, #408]	; (d4a98 <loop+0x600>)
   d4900:	4620      	mov	r0, r4
   d4902:	f001 f827 	bl	d5954 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d4906:	4620      	mov	r0, r4
   d4908:	6126      	str	r6, [r4, #16]
   d490a:	2101      	movs	r1, #1
   d490c:	f000 fea3 	bl	d5656 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4910:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4914:	6163      	str	r3, [r4, #20]
      display.println("Current File:");
   d4916:	4961      	ldr	r1, [pc, #388]	; (d4a9c <loop+0x604>)
   d4918:	4620      	mov	r0, r4
   d491a:	f004 fb8e 	bl	d903a <_ZN5Print7printlnEPKc>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d491e:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
   d4922:	6123      	str	r3, [r4, #16]
        operator const char*() const { return c_str(); }
   d4924:	4b55      	ldr	r3, [pc, #340]	; (d4a7c <loop+0x5e4>)
      display.println(datafile_name);
   d4926:	4620      	mov	r0, r4
   d4928:	6819      	ldr	r1, [r3, #0]
   d492a:	f004 fb86 	bl	d903a <_ZN5Print7printlnEPKc>
   d492e:	e74c      	b.n	d47ca <loop+0x332>
    else if (buttonC){
   d4930:	4b5b      	ldr	r3, [pc, #364]	; (d4aa0 <loop+0x608>)
   d4932:	781b      	ldrb	r3, [r3, #0]
   d4934:	2b00      	cmp	r3, #0
   d4936:	d089      	beq.n	d484c <loop+0x3b4>
      display.clearDisplay();
   d4938:	4c57      	ldr	r4, [pc, #348]	; (d4a98 <loop+0x600>)
   d493a:	4620      	mov	r0, r4
   d493c:	f001 f80a 	bl	d5954 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d4940:	2101      	movs	r1, #1
   d4942:	4620      	mov	r0, r4
   d4944:	f000 fe87 	bl	d5656 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4948:	f04f 1301 	mov.w	r3, #65537	; 0x10001
      display.println(timeStamp);
   d494c:	9902      	ldr	r1, [sp, #8]
   d494e:	6163      	str	r3, [r4, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4950:	6125      	str	r5, [r4, #16]
   d4952:	4620      	mov	r0, r4
   d4954:	f004 fb71 	bl	d903a <_ZN5Print7printlnEPKc>
   d4958:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
      display.print("Battery: ");
   d495c:	4951      	ldr	r1, [pc, #324]	; (d4aa4 <loop+0x60c>)
   d495e:	6123      	str	r3, [r4, #16]
   d4960:	4620      	mov	r0, r4
   d4962:	f004 fb57 	bl	d9014 <_ZN5Print5printEPKc>
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d4966:	462a      	mov	r2, r5
   d4968:	a90a      	add	r1, sp, #40	; 0x28
   d496a:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d496c:	950a      	str	r5, [sp, #40]	; 0x28
    const int ret = diag_get_source(id, &src, nullptr);
   d496e:	f003 fc07 	bl	d8180 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4972:	2800      	cmp	r0, #0
   d4974:	d132      	bne.n	d49dc <loop+0x544>
        return ret;
    }
    return get(src, val);
   d4976:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    SPARK_ASSERT(src && src->callback);
   d4978:	b10c      	cbz	r4, d497e <loop+0x4e6>
   d497a:	6923      	ldr	r3, [r4, #16]
   d497c:	b923      	cbnz	r3, d4988 <loop+0x4f0>
   d497e:	4a4a      	ldr	r2, [pc, #296]	; (d4aa8 <loop+0x610>)
   d4980:	2100      	movs	r1, #0
   d4982:	200a      	movs	r0, #10
   d4984:	f003 fbf4 	bl	d8170 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4988:	2300      	movs	r3, #0
   d498a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   d498e:	230c      	movs	r3, #12
   d4990:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   d4994:	ad06      	add	r5, sp, #24
   d4996:	2304      	movs	r3, #4
   d4998:	950f      	str	r5, [sp, #60]	; 0x3c
   d499a:	9310      	str	r3, [sp, #64]	; 0x40
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d499c:	6923      	ldr	r3, [r4, #16]
   d499e:	aa0e      	add	r2, sp, #56	; 0x38
   d49a0:	2101      	movs	r1, #1
   d49a2:	4620      	mov	r0, r4
   d49a4:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d49a6:	b9c8      	cbnz	r0, d49dc <loop+0x544>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d49a8:	882b      	ldrh	r3, [r5, #0]
   d49aa:	ee07 3a90 	vmov	s15, r3
   d49ae:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
      display.print(int(System.batteryCharge()));
   d49b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d49b6:	ee17 4a90 	vmov	r4, s15
        if (n < 0 && base == 10) {
   d49ba:	2c00      	cmp	r4, #0
   d49bc:	da11      	bge.n	d49e2 <loop+0x54a>
            t = print('-');
   d49be:	212d      	movs	r1, #45	; 0x2d
   d49c0:	4835      	ldr	r0, [pc, #212]	; (d4a98 <loop+0x600>)
   d49c2:	f004 fb2b 	bl	d901c <_ZN5Print5printEc>
            val = -n;
   d49c6:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d49c8:	220a      	movs	r2, #10
   d49ca:	4833      	ldr	r0, [pc, #204]	; (d4a98 <loop+0x600>)
   d49cc:	f004 fb3f 	bl	d904e <_ZN5Print11printNumberEmh>
      display.println(" %");
   d49d0:	4936      	ldr	r1, [pc, #216]	; (d4aac <loop+0x614>)
   d49d2:	4831      	ldr	r0, [pc, #196]	; (d4a98 <loop+0x600>)
   d49d4:	f004 fb31 	bl	d903a <_ZN5Print7printlnEPKc>
      display.display();
   d49d8:	482f      	ldr	r0, [pc, #188]	; (d4a98 <loop+0x600>)
   d49da:	e735      	b.n	d4848 <loop+0x3b0>
            return -1.0f;
   d49dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d49e0:	e7e7      	b.n	d49b2 <loop+0x51a>
            val = n;
   d49e2:	ee17 1a90 	vmov	r1, s15
   d49e6:	e7ef      	b.n	d49c8 <loop+0x530>
	StringSumHelper(const String &s) : String(s) {}
   d49e8:	a902      	add	r1, sp, #8
   d49ea:	a80a      	add	r0, sp, #40	; 0x28
   d49ec:	f004 fe35 	bl	d965a <_ZN6StringC1ERKS_>
            myFile.println(String(timeStamp + ","+gga.northSouthIndicator+" "+conv_coords(gga.latitude.toFloat())+","+gga.eastWestIndicator+" "+conv_coords(gga.longitude.toFloat())+","+sig.getStrength()));
   d49f0:	492f      	ldr	r1, [pc, #188]	; (d4ab0 <loop+0x618>)
   d49f2:	a80a      	add	r0, sp, #40	; 0x28
   d49f4:	f004 fede 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d49f8:	a94c      	add	r1, sp, #304	; 0x130
   d49fa:	f004 fecf 	bl	d979c <_ZplRK15StringSumHelperRK6String>
   d49fe:	492d      	ldr	r1, [pc, #180]	; (d4ab4 <loop+0x61c>)
   d4a00:	f004 fed8 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4a04:	4604      	mov	r4, r0
   d4a06:	a848      	add	r0, sp, #288	; 0x120
   d4a08:	f004 ff9e 	bl	d9948 <_ZNK6String7toFloatEv>
   d4a0c:	f7ff fce8 	bl	d43e0 <_Z11conv_coordsf>
   d4a10:	4620      	mov	r0, r4
   d4a12:	f004 feee 	bl	d97f2 <_ZplRK15StringSumHelperf>
   d4a16:	4926      	ldr	r1, [pc, #152]	; (d4ab0 <loop+0x618>)
   d4a18:	f004 fecc 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4a1c:	a954      	add	r1, sp, #336	; 0x150
   d4a1e:	f004 febd 	bl	d979c <_ZplRK15StringSumHelperRK6String>
   d4a22:	4924      	ldr	r1, [pc, #144]	; (d4ab4 <loop+0x61c>)
   d4a24:	f004 fec6 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4a28:	4604      	mov	r4, r0
   d4a2a:	a850      	add	r0, sp, #320	; 0x140
   d4a2c:	f004 ff8c 	bl	d9948 <_ZNK6String7toFloatEv>
   d4a30:	f7ff fcd6 	bl	d43e0 <_Z11conv_coordsf>
   d4a34:	4620      	mov	r0, r4
   d4a36:	f004 fedc 	bl	d97f2 <_ZplRK15StringSumHelperf>
   d4a3a:	491d      	ldr	r1, [pc, #116]	; (d4ab0 <loop+0x618>)
   d4a3c:	f004 feba 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4a40:	4604      	mov	r4, r0
   d4a42:	a81e      	add	r0, sp, #120	; 0x78
   d4a44:	f003 fda2 	bl	d858c <_ZNK14CellularSignal11getStrengthEv>
   d4a48:	4620      	mov	r0, r4
   d4a4a:	f004 fed2 	bl	d97f2 <_ZplRK15StringSumHelperf>
   d4a4e:	4601      	mov	r1, r0
   d4a50:	a80e      	add	r0, sp, #56	; 0x38
   d4a52:	f004 fe02 	bl	d965a <_ZN6StringC1ERKS_>
   d4a56:	990e      	ldr	r1, [sp, #56]	; 0x38
   d4a58:	4817      	ldr	r0, [pc, #92]	; (d4ab8 <loop+0x620>)
   d4a5a:	f004 faee 	bl	d903a <_ZN5Print7printlnEPKc>
   d4a5e:	a80e      	add	r0, sp, #56	; 0x38
   d4a60:	f004 fd70 	bl	d9544 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4a64:	a80a      	add	r0, sp, #40	; 0x28
   d4a66:	f004 fd6d 	bl	d9544 <_ZN6StringD1Ev>
            myFile.close();
   d4a6a:	4806      	ldr	r0, [pc, #24]	; (d4a84 <loop+0x5ec>)
   d4a6c:	f002 f864 	bl	d6b38 <_ZN7FatFile5closeEv>
   d4a70:	e70e      	b.n	d4890 <loop+0x3f8>
   d4a72:	bf00      	nop
   d4a74:	2003e06c 	.word	0x2003e06c
   d4a78:	2003e0b4 	.word	0x2003e0b4
   d4a7c:	2003dfec 	.word	0x2003dfec
   d4a80:	2003e540 	.word	0x2003e540
   d4a84:	2003e080 	.word	0x2003e080
   d4a88:	000dd17e 	.word	0x000dd17e
   d4a8c:	000ddddc 	.word	0x000ddddc
   d4a90:	000ddde8 	.word	0x000ddde8
   d4a94:	2003dfe8 	.word	0x2003dfe8
   d4a98:	2003dffc 	.word	0x2003dffc
   d4a9c:	000dd163 	.word	0x000dd163
   d4aa0:	2003dfe9 	.word	0x2003dfe9
   d4aa4:	000dd171 	.word	0x000dd171
   d4aa8:	000d7e31 	.word	0x000d7e31
   d4aac:	000dd17b 	.word	0x000dd17b
   d4ab0:	000dd1a4 	.word	0x000dd1a4
   d4ab4:	000dd14c 	.word	0x000dd14c
   d4ab8:	2003e070 	.word	0x2003e070

000d4abc <_GLOBAL__sub_I__gps>:
 }
   d4abc:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4abe:	4b4b      	ldr	r3, [pc, #300]	; (d4bec <_GLOBAL__sub_I__gps+0x130>)
   d4ac0:	2400      	movs	r4, #0
   d4ac2:	b088      	sub	sp, #32
   d4ac4:	701c      	strb	r4, [r3, #0]
Gps _gps = Gps(&Serial1);
   d4ac6:	f005 f963 	bl	d9d90 <_Z22__fetch_global_Serial1v>
   d4aca:	4601      	mov	r1, r0
   d4acc:	4848      	ldr	r0, [pc, #288]	; (d4bf0 <_GLOBAL__sub_I__gps+0x134>)
   d4ace:	f001 fa68 	bl	d5fa2 <_ZN3GpsC1EP11USARTSerial>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4ad2:	4b48      	ldr	r3, [pc, #288]	; (d4bf4 <_GLOBAL__sub_I__gps+0x138>)
   d4ad4:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ad6:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4ad8:	4b47      	ldr	r3, [pc, #284]	; (d4bf8 <_GLOBAL__sub_I__gps+0x13c>)
   d4ada:	4a48      	ldr	r2, [pc, #288]	; (d4bfc <_GLOBAL__sub_I__gps+0x140>)
   d4adc:	601a      	str	r2, [r3, #0]
   d4ade:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ae2:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ae6:	ae02      	add	r6, sp, #8
   d4ae8:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4aec:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4af0:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4af4:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4af8:	e882 0003 	stmia.w	r2, {r0, r1}
   d4afc:	4a40      	ldr	r2, [pc, #256]	; (d4c00 <_GLOBAL__sub_I__gps+0x144>)
   d4afe:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4b00:	699a      	ldr	r2, [r3, #24]
   d4b02:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b04:	4a3f      	ldr	r2, [pc, #252]	; (d4c04 <_GLOBAL__sub_I__gps+0x148>)
   d4b06:	711c      	strb	r4, [r3, #4]
   d4b08:	609c      	str	r4, [r3, #8]
   d4b0a:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4b0c:	f103 0008 	add.w	r0, r3, #8
   d4b10:	4a3d      	ldr	r2, [pc, #244]	; (d4c08 <_GLOBAL__sub_I__gps+0x14c>)
      __a = _GLIBCXX_MOVE(__b);
   d4b12:	9406      	str	r4, [sp, #24]
   d4b14:	2101      	movs	r1, #1
   d4b16:	e9cd 4400 	strd	r4, r4, [sp]
   d4b1a:	f003 f941 	bl	d7da0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d4b1e:	4628      	mov	r0, r5
   d4b20:	f7ff fbc0 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
OledWingAdafruit display;
   d4b24:	2107      	movs	r1, #7
   d4b26:	4839      	ldr	r0, [pc, #228]	; (d4c0c <_GLOBAL__sub_I__gps+0x150>)
   d4b28:	f003 f8ca 	bl	d7cc0 <_ZN16OledWingAdafruitC1Ei>
    static String deviceID(void) { return spark_deviceID(); }
   d4b2c:	4938      	ldr	r1, [pc, #224]	; (d4c10 <_GLOBAL__sub_I__gps+0x154>)
   d4b2e:	4608      	mov	r0, r1
   d4b30:	f003 fb84 	bl	d823c <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
   d4b34:	4936      	ldr	r1, [pc, #216]	; (d4c10 <_GLOBAL__sub_I__gps+0x154>)
   d4b36:	4628      	mov	r0, r5
   d4b38:	f004 fd8f 	bl	d965a <_ZN6StringC1ERKS_>
String datafile_name = String(myID+"-"+Time.year()+Time.month()+Time.day()+Time.hour()+Time.minute()+".csv");
   d4b3c:	4935      	ldr	r1, [pc, #212]	; (d4c14 <_GLOBAL__sub_I__gps+0x158>)
   d4b3e:	4628      	mov	r0, r5
   d4b40:	f004 fe38 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4b44:	4606      	mov	r6, r0
   d4b46:	f005 f8b1 	bl	d9cac <_ZN9TimeClass4yearEv>
   d4b4a:	4601      	mov	r1, r0
   d4b4c:	4630      	mov	r0, r6
   d4b4e:	f004 fe46 	bl	d97de <_ZplRK15StringSumHelperi>
   d4b52:	4606      	mov	r6, r0
   d4b54:	f005 f8a2 	bl	d9c9c <_ZN9TimeClass5monthEv>
   d4b58:	4601      	mov	r1, r0
   d4b5a:	4630      	mov	r0, r6
   d4b5c:	f004 fe3f 	bl	d97de <_ZplRK15StringSumHelperi>
   d4b60:	4606      	mov	r6, r0
   d4b62:	f005 f88f 	bl	d9c84 <_ZN9TimeClass3dayEv>
   d4b66:	4601      	mov	r1, r0
   d4b68:	4630      	mov	r0, r6
   d4b6a:	f004 fe38 	bl	d97de <_ZplRK15StringSumHelperi>
   d4b6e:	4606      	mov	r6, r0
   d4b70:	f005 f870 	bl	d9c54 <_ZN9TimeClass4hourEv>
   d4b74:	4601      	mov	r1, r0
   d4b76:	4630      	mov	r0, r6
   d4b78:	f004 fe31 	bl	d97de <_ZplRK15StringSumHelperi>
   d4b7c:	4606      	mov	r6, r0
   d4b7e:	f005 f875 	bl	d9c6c <_ZN9TimeClass6minuteEv>
   d4b82:	4601      	mov	r1, r0
   d4b84:	4630      	mov	r0, r6
   d4b86:	f004 fe2a 	bl	d97de <_ZplRK15StringSumHelperi>
   d4b8a:	4923      	ldr	r1, [pc, #140]	; (d4c18 <_GLOBAL__sub_I__gps+0x15c>)
   d4b8c:	f004 fe12 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4b90:	4601      	mov	r1, r0
   d4b92:	4822      	ldr	r0, [pc, #136]	; (d4c1c <_GLOBAL__sub_I__gps+0x160>)
   d4b94:	f004 fd61 	bl	d965a <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d4b98:	4628      	mov	r0, r5
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4b9a:	4d21      	ldr	r5, [pc, #132]	; (d4c20 <_GLOBAL__sub_I__gps+0x164>)
   d4b9c:	f004 fcd2 	bl	d9544 <_ZN6StringD1Ev>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4ba0:	2364      	movs	r3, #100	; 0x64
   d4ba2:	f885 3460 	strb.w	r3, [r5, #1120]	; 0x460
  {
   d4ba6:	4b1f      	ldr	r3, [pc, #124]	; (d4c24 <_GLOBAL__sub_I__gps+0x168>)
   d4ba8:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   d4bac:	2301      	movs	r3, #1
   d4bae:	f885 3474 	strb.w	r3, [r5, #1140]	; 0x474
   d4bb2:	71ec      	strb	r4, [r5, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4bb4:	f8a5 443c 	strh.w	r4, [r5, #1084]	; 0x43c
   d4bb8:	f885 446a 	strb.w	r4, [r5, #1130]	; 0x46a
   d4bbc:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   d4bc0:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   d4bc4:	f7ff fc4c 	bl	d4460 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4bc8:	4a17      	ldr	r2, [pc, #92]	; (d4c28 <_GLOBAL__sub_I__gps+0x16c>)
  File() {}
   d4bca:	4918      	ldr	r1, [pc, #96]	; (d4c2c <_GLOBAL__sub_I__gps+0x170>)
   d4bcc:	6011      	str	r1, [r2, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bd2:	6093      	str	r3, [r2, #8]
   d4bd4:	8214      	strh	r4, [r2, #16]
    Print() : write_error(0) {}
   d4bd6:	6054      	str	r4, [r2, #4]
int pub_time_milli = pub_time * 1000;
   d4bd8:	4a15      	ldr	r2, [pc, #84]	; (d4c30 <_GLOBAL__sub_I__gps+0x174>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4bda:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
   d4bde:	6812      	ldr	r2, [r2, #0]
   d4be0:	4353      	muls	r3, r2
   d4be2:	4a14      	ldr	r2, [pc, #80]	; (d4c34 <_GLOBAL__sub_I__gps+0x178>)
   d4be4:	6013      	str	r3, [r2, #0]
 }
   d4be6:	b008      	add	sp, #32
   d4be8:	bd70      	pop	{r4, r5, r6, pc}
   d4bea:	bf00      	nop
   d4bec:	2003decc 	.word	0x2003decc
   d4bf0:	2003ded0 	.word	0x2003ded0
   d4bf4:	000d417d 	.word	0x000d417d
   d4bf8:	2003dfcc 	.word	0x2003dfcc
   d4bfc:	000dd240 	.word	0x000dd240
   d4c00:	000d4149 	.word	0x000d4149
   d4c04:	000d4145 	.word	0x000d4145
   d4c08:	000d419b 	.word	0x000d419b
   d4c0c:	2003dffc 	.word	0x2003dffc
   d4c10:	2003e0a4 	.word	0x2003e0a4
   d4c14:	000dd1a6 	.word	0x000dd1a6
   d4c18:	000dd1a8 	.word	0x000dd1a8
   d4c1c:	2003dfec 	.word	0x2003dfec
   d4c20:	2003e0b8 	.word	0x2003e0b8
   d4c24:	000dd22c 	.word	0x000dd22c
   d4c28:	2003e070 	.word	0x2003e070
   d4c2c:	000dd254 	.word	0x000dd254
   d4c30:	2003dcdc 	.word	0x2003dcdc
   d4c34:	2003e0b4 	.word	0x2003e0b4

000d4c38 <setup>:
{
   d4c38:	b570      	push	{r4, r5, r6, lr}
  delay(2000);
   d4c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
   d4c3e:	b08a      	sub	sp, #40	; 0x28
  display.setup();
   d4c40:	4c80      	ldr	r4, [pc, #512]	; (d4e44 <setup+0x20c>)
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4c42:	4e81      	ldr	r6, [pc, #516]	; (d4e48 <setup+0x210>)
  delay(2000);
   d4c44:	f003 fbda 	bl	d83fc <delay>
  Serial.begin();
   d4c48:	f005 f926 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4c4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c50:	f005 f916 	bl	d9e80 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   d4c54:	f005 f920 	bl	d9e98 <_Z16_fetch_usbserialv>
   d4c58:	497c      	ldr	r1, [pc, #496]	; (d4e4c <setup+0x214>)
   d4c5a:	f004 f9ee 	bl	d903a <_ZN5Print7printlnEPKc>
  display.setup();
   d4c5e:	4620      	mov	r0, r4
   d4c60:	f003 f85c 	bl	d7d1c <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4c64:	4620      	mov	r0, r4
   d4c66:	f000 fe75 	bl	d5954 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	f001 f8de 	bl	d5e2c <_ZN16Adafruit_SSD13067displayEv>
  display.setRotation(2);
   d4c70:	2102      	movs	r1, #2
   d4c72:	4620      	mov	r0, r4
   d4c74:	f000 fa88 	bl	d5188 <_ZN12Adafruit_GFX11setRotationEh>
  display.setTextSize(1);
   d4c78:	2101      	movs	r1, #1
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f000 fceb 	bl	d5656 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4c80:	2500      	movs	r5, #0
   d4c82:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4c86:	e9c4 5304 	strd	r5, r3, [r4, #16]
  display.println("Initializing...");
   d4c8a:	4970      	ldr	r1, [pc, #448]	; (d4e4c <setup+0x214>)
   d4c8c:	4620      	mov	r0, r4
   d4c8e:	f004 f9d4 	bl	d903a <_ZN5Print7printlnEPKc>
  display.display();
   d4c92:	4620      	mov	r0, r4
   d4c94:	f001 f8ca 	bl	d5e2c <_ZN16Adafruit_SSD13067displayEv>
  _gps.begin(9600);
   d4c98:	486d      	ldr	r0, [pc, #436]	; (d4e50 <setup+0x218>)
   d4c9a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c9e:	f001 f997 	bl	d5fd0 <_ZN3Gps5beginEm>
   d4ca2:	462a      	mov	r2, r5
   d4ca4:	4629      	mov	r1, r5
   d4ca6:	4630      	mov	r0, r6
   d4ca8:	f7ff fb05 	bl	d42b6 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4cac:	68b0      	ldr	r0, [r6, #8]
   d4cae:	b140      	cbz	r0, d4cc2 <setup+0x8a>
   d4cb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4cb4:	9300      	str	r3, [sp, #0]
   d4cb6:	9501      	str	r5, [sp, #4]
   d4cb8:	462b      	mov	r3, r5
   d4cba:	462a      	mov	r2, r5
   d4cbc:	4629      	mov	r1, r5
   d4cbe:	f003 f887 	bl	d7dd0 <os_timer_change>
        instance().setDataMode(mode);
   d4cc2:	f7ff fbcd 	bl	d4460 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4cc6:	2100      	movs	r1, #0
   d4cc8:	f004 fb29 	bl	d931e <_ZN8SPIClass11setDataModeEh>
 Particle.publish("SDCard_Setup", "Initializing");
   d4ccc:	4a61      	ldr	r2, [pc, #388]	; (d4e54 <setup+0x21c>)
   d4cce:	4962      	ldr	r1, [pc, #392]	; (d4e58 <setup+0x220>)
   d4cd0:	a806      	add	r0, sp, #24
   d4cd2:	f7ff fa95 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4cd6:	a807      	add	r0, sp, #28
   d4cd8:	f7ff fbac 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      dataMode_{dataMode}
   d4cdc:	4b5f      	ldr	r3, [pc, #380]	; (d4e5c <setup+0x224>)
   d4cde:	9306      	str	r3, [sp, #24]
   d4ce0:	2300      	movs	r3, #0
   d4ce2:	f88d 301c 	strb.w	r3, [sp, #28]
   d4ce6:	4b5e      	ldr	r3, [pc, #376]	; (d4e60 <setup+0x228>)
   d4ce8:	9308      	str	r3, [sp, #32]
  if (!sd.begin(chipSelect)){
   d4cea:	485e      	ldr	r0, [pc, #376]	; (d4e64 <setup+0x22c>)
   d4cec:	2301      	movs	r3, #1
   d4cee:	aa06      	add	r2, sp, #24
   d4cf0:	2105      	movs	r1, #5
   d4cf2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   d4cf6:	f7ff fb1b 	bl	d4330 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   d4cfa:	2800      	cmp	r0, #0
   d4cfc:	f040 808b 	bne.w	d4e16 <setup+0x1de>
         Particle.publish("SDCard Logger", "Failed");
   d4d00:	4a59      	ldr	r2, [pc, #356]	; (d4e68 <setup+0x230>)
   d4d02:	495a      	ldr	r1, [pc, #360]	; (d4e6c <setup+0x234>)
   d4d04:	a806      	add	r0, sp, #24
   d4d06:	f7ff fa7b 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4d0a:	a807      	add	r0, sp, #28
   d4d0c:	f7ff fb92 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
         delay(1000);
   d4d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4d14:	f003 fb72 	bl	d83fc <delay>
         Particle.publish("ALERT", "SDCard_Failure!");
   d4d18:	4a55      	ldr	r2, [pc, #340]	; (d4e70 <setup+0x238>)
   d4d1a:	4956      	ldr	r1, [pc, #344]	; (d4e74 <setup+0x23c>)
   d4d1c:	a806      	add	r0, sp, #24
   d4d1e:	f7ff fa6f 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4d22:	a807      	add	r0, sp, #28
   d4d24:	f7ff fb86 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4d28:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init Failed");
   d4d2c:	4952      	ldr	r1, [pc, #328]	; (d4e78 <setup+0x240>)
   d4d2e:	4845      	ldr	r0, [pc, #276]	; (d4e44 <setup+0x20c>)
   d4d30:	6123      	str	r3, [r4, #16]
   d4d32:	f004 f982 	bl	d903a <_ZN5Print7printlnEPKc>
          display.display();
   d4d36:	4843      	ldr	r0, [pc, #268]	; (d4e44 <setup+0x20c>)
   d4d38:	f001 f878 	bl	d5e2c <_ZN16Adafruit_SSD13067displayEv>
    attachInterrupt(D4, displayvoltage_button_A, CHANGE);
   d4d3c:	2400      	movs	r4, #0
    pinMode(D4, INPUT_PULLUP);
   d4d3e:	2102      	movs	r1, #2
   d4d40:	2004      	movs	r0, #4
   d4d42:	f005 fa01 	bl	da148 <pinMode>
    attachInterrupt(D4, displayvoltage_button_A, CHANGE);
   d4d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4d4a:	4622      	mov	r2, r4
   d4d4c:	494b      	ldr	r1, [pc, #300]	; (d4e7c <setup+0x244>)
   d4d4e:	9400      	str	r4, [sp, #0]
   d4d50:	2004      	movs	r0, #4
   d4d52:	f003 fff5 	bl	d8d40 <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(D3, INPUT_PULLUP);
   d4d56:	2102      	movs	r1, #2
   d4d58:	2003      	movs	r0, #3
   d4d5a:	f005 f9f5 	bl	da148 <pinMode>
    attachInterrupt(D3, displayvoltage_button_B, CHANGE);
   d4d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4d62:	4622      	mov	r2, r4
   d4d64:	4946      	ldr	r1, [pc, #280]	; (d4e80 <setup+0x248>)
   d4d66:	9400      	str	r4, [sp, #0]
   d4d68:	2003      	movs	r0, #3
   d4d6a:	f003 ffe9 	bl	d8d40 <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(D2, INPUT_PULLUP);
   d4d6e:	2102      	movs	r1, #2
   d4d70:	4608      	mov	r0, r1
   d4d72:	f005 f9e9 	bl	da148 <pinMode>
    attachInterrupt(D2, displayvoltage_button_C, CHANGE);
   d4d76:	4943      	ldr	r1, [pc, #268]	; (d4e84 <setup+0x24c>)
   d4d78:	9400      	str	r4, [sp, #0]
   d4d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4d7e:	4622      	mov	r2, r4
   d4d80:	2002      	movs	r0, #2
   d4d82:	f003 ffdd 	bl	d8d40 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d86:	f003 fa51 	bl	d822c <spark_cloud_flag_connected>
        if (!connected()) {
   d4d8a:	b110      	cbz	r0, d4d92 <setup+0x15a>
        return spark_sync_time(NULL);
   d4d8c:	4620      	mov	r0, r4
   d4d8e:	f003 fa65 	bl	d825c <spark_sync_time>
delay(2000);
   d4d92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d96:	f003 fb31 	bl	d83fc <delay>
	StringSumHelper(const String &s) : String(s) {}
   d4d9a:	493b      	ldr	r1, [pc, #236]	; (d4e88 <setup+0x250>)
   d4d9c:	a802      	add	r0, sp, #8
   d4d9e:	f004 fc5c 	bl	d965a <_ZN6StringC1ERKS_>
datafile_name = String(myID+"-"+Time.year()+Time.month()+Time.day()+Time.hour()+Time.minute()+".csv");
   d4da2:	493a      	ldr	r1, [pc, #232]	; (d4e8c <setup+0x254>)
   d4da4:	a802      	add	r0, sp, #8
   d4da6:	f004 fd05 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4daa:	4604      	mov	r4, r0
   d4dac:	f004 ff7e 	bl	d9cac <_ZN9TimeClass4yearEv>
   d4db0:	4601      	mov	r1, r0
   d4db2:	4620      	mov	r0, r4
   d4db4:	f004 fd13 	bl	d97de <_ZplRK15StringSumHelperi>
   d4db8:	4604      	mov	r4, r0
   d4dba:	f004 ff6f 	bl	d9c9c <_ZN9TimeClass5monthEv>
   d4dbe:	4601      	mov	r1, r0
   d4dc0:	4620      	mov	r0, r4
   d4dc2:	f004 fd0c 	bl	d97de <_ZplRK15StringSumHelperi>
   d4dc6:	4604      	mov	r4, r0
   d4dc8:	f004 ff5c 	bl	d9c84 <_ZN9TimeClass3dayEv>
   d4dcc:	4601      	mov	r1, r0
   d4dce:	4620      	mov	r0, r4
   d4dd0:	f004 fd05 	bl	d97de <_ZplRK15StringSumHelperi>
   d4dd4:	4604      	mov	r4, r0
   d4dd6:	f004 ff3d 	bl	d9c54 <_ZN9TimeClass4hourEv>
   d4dda:	4601      	mov	r1, r0
   d4ddc:	4620      	mov	r0, r4
   d4dde:	f004 fcfe 	bl	d97de <_ZplRK15StringSumHelperi>
   d4de2:	4604      	mov	r4, r0
   d4de4:	f004 ff42 	bl	d9c6c <_ZN9TimeClass6minuteEv>
   d4de8:	4601      	mov	r1, r0
   d4dea:	4620      	mov	r0, r4
   d4dec:	f004 fcf7 	bl	d97de <_ZplRK15StringSumHelperi>
   d4df0:	4927      	ldr	r1, [pc, #156]	; (d4e90 <setup+0x258>)
   d4df2:	f004 fcdf 	bl	d97b4 <_ZplRK15StringSumHelperPKc>
   d4df6:	4601      	mov	r1, r0
   d4df8:	a806      	add	r0, sp, #24
   d4dfa:	f004 fc2e 	bl	d965a <_ZN6StringC1ERKS_>
   d4dfe:	a906      	add	r1, sp, #24
   d4e00:	4824      	ldr	r0, [pc, #144]	; (d4e94 <setup+0x25c>)
   d4e02:	f004 fc35 	bl	d9670 <_ZN6StringaSEOS_>
   d4e06:	a806      	add	r0, sp, #24
   d4e08:	f004 fb9c 	bl	d9544 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4e0c:	a802      	add	r0, sp, #8
   d4e0e:	f004 fb99 	bl	d9544 <_ZN6StringD1Ev>
}
   d4e12:	b00a      	add	sp, #40	; 0x28
   d4e14:	bd70      	pop	{r4, r5, r6, pc}
            Particle.publish("SDCard Logger", "OK");
   d4e16:	4a20      	ldr	r2, [pc, #128]	; (d4e98 <setup+0x260>)
   d4e18:	4914      	ldr	r1, [pc, #80]	; (d4e6c <setup+0x234>)
   d4e1a:	a806      	add	r0, sp, #24
   d4e1c:	f7ff f9f0 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4e20:	a807      	add	r0, sp, #28
   d4e22:	f7ff fb07 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e26:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init - OK");
   d4e2a:	491c      	ldr	r1, [pc, #112]	; (d4e9c <setup+0x264>)
   d4e2c:	6123      	str	r3, [r4, #16]
   d4e2e:	4805      	ldr	r0, [pc, #20]	; (d4e44 <setup+0x20c>)
   d4e30:	f004 f903 	bl	d903a <_ZN5Print7printlnEPKc>
          display.display();
   d4e34:	4803      	ldr	r0, [pc, #12]	; (d4e44 <setup+0x20c>)
   d4e36:	f000 fff9 	bl	d5e2c <_ZN16Adafruit_SSD13067displayEv>
            delay(1000);
   d4e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4e3e:	f003 fadd 	bl	d83fc <delay>
   d4e42:	e77b      	b.n	d4d3c <setup+0x104>
   d4e44:	2003dffc 	.word	0x2003dffc
   d4e48:	2003dfcc 	.word	0x2003dfcc
   d4e4c:	000dd1ad 	.word	0x000dd1ad
   d4e50:	2003ded0 	.word	0x2003ded0
   d4e54:	000dd1bd 	.word	0x000dd1bd
   d4e58:	000dd1ca 	.word	0x000dd1ca
   d4e5c:	000dd22c 	.word	0x000dd22c
   d4e60:	02faf080 	.word	0x02faf080
   d4e64:	2003e0b8 	.word	0x2003e0b8
   d4e68:	000dd208 	.word	0x000dd208
   d4e6c:	000dd1d7 	.word	0x000dd1d7
   d4e70:	000dd1e5 	.word	0x000dd1e5
   d4e74:	000dd1f5 	.word	0x000dd1f5
   d4e78:	000dd1fb 	.word	0x000dd1fb
   d4e7c:	000d40e5 	.word	0x000d40e5
   d4e80:	000d4105 	.word	0x000d4105
   d4e84:	000d4125 	.word	0x000d4125
   d4e88:	2003e0a4 	.word	0x2003e0a4
   d4e8c:	000dd1a6 	.word	0x000dd1a6
   d4e90:	000dd1a8 	.word	0x000dd1a8
   d4e94:	2003dfec 	.word	0x2003dfec
   d4e98:	000dd21e 	.word	0x000dd21e
   d4e9c:	000dd20f 	.word	0x000dd20f

000d4ea0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ea4:	b085      	sub	sp, #20
   d4ea6:	461f      	mov	r7, r3
   d4ea8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4eac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4eb0:	eba8 0902 	sub.w	r9, r8, r2
   d4eb4:	eba7 0a01 	sub.w	sl, r7, r1
   d4eb8:	f1b9 0f00 	cmp.w	r9, #0
   d4ebc:	bfb8      	it	lt
   d4ebe:	f1c9 0900 	rsblt	r9, r9, #0
   d4ec2:	f1ba 0f00 	cmp.w	sl, #0
   d4ec6:	bfb8      	it	lt
   d4ec8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4ecc:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4ece:	4683      	mov	fp, r0
   d4ed0:	460c      	mov	r4, r1
   d4ed2:	4615      	mov	r5, r2
    if (steep) {
   d4ed4:	dd04      	ble.n	d4ee0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4ed6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4ed8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4eda:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4edc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4ede:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4ee0:	42bc      	cmp	r4, r7
   d4ee2:	dd05      	ble.n	d4ef0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4ee4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4ee6:	4645      	mov	r5, r8
   d4ee8:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4eea:	4622      	mov	r2, r4
   d4eec:	463c      	mov	r4, r7
   d4eee:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4ef0:	1b3e      	subs	r6, r7, r4
   d4ef2:	b2b2      	uxth	r2, r6
   d4ef4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4ef6:	eba8 0205 	sub.w	r2, r8, r5
   d4efa:	2a00      	cmp	r2, #0
   d4efc:	bfb8      	it	lt
   d4efe:	4252      	neglt	r2, r2
   d4f00:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4f02:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4f06:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4f0a:	4545      	cmp	r5, r8
   d4f0c:	bfb4      	ite	lt
   d4f0e:	2201      	movlt	r2, #1
   d4f10:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    int16_t err = dx / 2;
   d4f14:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4f16:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4f18:	42bc      	cmp	r4, r7
   d4f1a:	dc1c      	bgt.n	d4f56 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4f1c:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4f20:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4f22:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4f24:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4f28:	bfc7      	ittee	gt
   d4f2a:	4629      	movgt	r1, r5
   d4f2c:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4f2e:	462a      	movle	r2, r5
   d4f30:	4621      	movle	r1, r4
   d4f32:	4658      	mov	r0, fp
   d4f34:	47c0      	blx	r8
        }
        err -= dy;
   d4f36:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4f38:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4f3a:	1ab6      	subs	r6, r6, r2
   d4f3c:	b2b1      	uxth	r1, r6
   d4f3e:	b236      	sxth	r6, r6
        if (err < 0) {
   d4f40:	2e00      	cmp	r6, #0
   d4f42:	da05      	bge.n	d4f50 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4f44:	9a02      	ldr	r2, [sp, #8]
   d4f46:	4415      	add	r5, r2
            err += dx;
   d4f48:	9a00      	ldr	r2, [sp, #0]
   d4f4a:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4f4c:	b22d      	sxth	r5, r5
            err += dx;
   d4f4e:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4f50:	3401      	adds	r4, #1
   d4f52:	b224      	sxth	r4, r4
   d4f54:	e7e0      	b.n	d4f18 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4f56:	b005      	add	sp, #20
   d4f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4f5c <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4f5c:	4770      	bx	lr

000d4f5e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4f5e:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4f60:	6804      	ldr	r4, [r0, #0]
   d4f62:	6924      	ldr	r4, [r4, #16]
   d4f64:	46a4      	mov	ip, r4
}
   d4f66:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4f6a:	4760      	bx	ip

000d4f6c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f6c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4f6e:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4f70:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4f74:	9502      	str	r5, [sp, #8]
   d4f76:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4f78:	46a4      	mov	ip, r4
}
   d4f7a:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4f7c:	4760      	bx	ip

000d4f7e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f7e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4f80:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4f82:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4f86:	9502      	str	r5, [sp, #8]
   d4f88:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4f8a:	46a4      	mov	ip, r4
}
   d4f8c:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4f8e:	4760      	bx	ip

000d4f90 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f90:	b470      	push	{r4, r5, r6}
   d4f92:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4f96:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4f9a:	6804      	ldr	r4, [r0, #0]
   d4f9c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4fa0:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4fa2:	46a4      	mov	ip, r4
}
   d4fa4:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4fa6:	4760      	bx	ip

000d4fa8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4fa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4fac:	461c      	mov	r4, r3
    startWrite();
   d4fae:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4fb0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4fb4:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4fb6:	4605      	mov	r5, r0
   d4fb8:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4fba:	3c01      	subs	r4, #1
   d4fbc:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4fbe:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4fc0:	b224      	sxth	r4, r4
    startWrite();
   d4fc2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4fc4:	682b      	ldr	r3, [r5, #0]
   d4fc6:	f8cd 8004 	str.w	r8, [sp, #4]
   d4fca:	9400      	str	r4, [sp, #0]
   d4fcc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4fce:	4628      	mov	r0, r5
   d4fd0:	463b      	mov	r3, r7
   d4fd2:	4632      	mov	r2, r6
   d4fd4:	4639      	mov	r1, r7
   d4fd6:	47a0      	blx	r4
    endWrite();
   d4fd8:	682b      	ldr	r3, [r5, #0]
   d4fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fdc:	4628      	mov	r0, r5
}
   d4fde:	b002      	add	sp, #8
   d4fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4fe4:	4718      	bx	r3

000d4fe6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4fe6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4fea:	461d      	mov	r5, r3
    startWrite();
   d4fec:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4fee:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4ff2:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4ff4:	4604      	mov	r4, r0
   d4ff6:	4617      	mov	r7, r2
   d4ff8:	460e      	mov	r6, r1
    startWrite();
   d4ffa:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4ffc:	e9cd 7800 	strd	r7, r8, [sp]
   d5000:	6822      	ldr	r2, [r4, #0]
   d5002:	1e6b      	subs	r3, r5, #1
   d5004:	4433      	add	r3, r6
   d5006:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d5008:	4620      	mov	r0, r4
   d500a:	b21b      	sxth	r3, r3
   d500c:	463a      	mov	r2, r7
   d500e:	4631      	mov	r1, r6
   d5010:	47a8      	blx	r5
    endWrite();
   d5012:	6823      	ldr	r3, [r4, #0]
   d5014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5016:	4620      	mov	r0, r4
}
   d5018:	b002      	add	sp, #8
   d501a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d501e:	4718      	bx	r3

000d5020 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5020:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5024:	461e      	mov	r6, r3
    startWrite();
   d5026:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d5028:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d502c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d502e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5032:	460c      	mov	r4, r1
   d5034:	4605      	mov	r5, r0
   d5036:	4617      	mov	r7, r2
    startWrite();
   d5038:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d503a:	4426      	add	r6, r4
   d503c:	42b4      	cmp	r4, r6
   d503e:	682b      	ldr	r3, [r5, #0]
   d5040:	da0b      	bge.n	d505a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d5042:	f8cd 8000 	str.w	r8, [sp]
   d5046:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d504a:	4621      	mov	r1, r4
   d504c:	464b      	mov	r3, r9
   d504e:	463a      	mov	r2, r7
   d5050:	4628      	mov	r0, r5
   d5052:	3401      	adds	r4, #1
   d5054:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d5056:	b224      	sxth	r4, r4
   d5058:	e7f0      	b.n	d503c <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d505c:	4628      	mov	r0, r5
}
   d505e:	b002      	add	sp, #8
   d5060:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5064:	4718      	bx	r3

000d5066 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d5066:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5068:	6802      	ldr	r2, [r0, #0]
   d506a:	9101      	str	r1, [sp, #4]
   d506c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5070:	9100      	str	r1, [sp, #0]
   d5072:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d5074:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5078:	2200      	movs	r2, #0
   d507a:	4611      	mov	r1, r2
   d507c:	47a0      	blx	r4
}
   d507e:	b002      	add	sp, #8
   d5080:	bd10      	pop	{r4, pc}

000d5082 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5082:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5086:	461d      	mov	r5, r3
    startWrite();
   d5088:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d508a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d508e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5090:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5094:	4604      	mov	r4, r0
   d5096:	460f      	mov	r7, r1
   d5098:	4616      	mov	r6, r2
    startWrite();
   d509a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d509c:	6823      	ldr	r3, [r4, #0]
   d509e:	f8cd 8000 	str.w	r8, [sp]
   d50a2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d50a6:	4632      	mov	r2, r6
   d50a8:	462b      	mov	r3, r5
   d50aa:	4639      	mov	r1, r7
   d50ac:	4620      	mov	r0, r4
   d50ae:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d50b0:	6823      	ldr	r3, [r4, #0]
   d50b2:	f8cd 8000 	str.w	r8, [sp]
   d50b6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d50ba:	4432      	add	r2, r6
   d50bc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d50c0:	4639      	mov	r1, r7
   d50c2:	462b      	mov	r3, r5
   d50c4:	4620      	mov	r0, r4
   d50c6:	b212      	sxth	r2, r2
   d50c8:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d50ca:	6823      	ldr	r3, [r4, #0]
   d50cc:	f8cd 8000 	str.w	r8, [sp]
   d50d0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d50d4:	4632      	mov	r2, r6
   d50d6:	464b      	mov	r3, r9
   d50d8:	4639      	mov	r1, r7
   d50da:	4620      	mov	r0, r4
   d50dc:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d50de:	1e6b      	subs	r3, r5, #1
   d50e0:	19d9      	adds	r1, r3, r7
   d50e2:	6823      	ldr	r3, [r4, #0]
   d50e4:	f8cd 8000 	str.w	r8, [sp]
   d50e8:	6a1d      	ldr	r5, [r3, #32]
   d50ea:	4620      	mov	r0, r4
   d50ec:	464b      	mov	r3, r9
   d50ee:	4632      	mov	r2, r6
   d50f0:	b209      	sxth	r1, r1
   d50f2:	47a8      	blx	r5
    endWrite();
   d50f4:	6823      	ldr	r3, [r4, #0]
   d50f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50f8:	4620      	mov	r0, r4
}
   d50fa:	b002      	add	sp, #8
   d50fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5100:	4718      	bx	r3

000d5102 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d5102:	4770      	bx	lr

000d5104 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d5104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5108:	4299      	cmp	r1, r3
        uint16_t color) {
   d510a:	4616      	mov	r6, r2
   d510c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d5110:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5114:	6802      	ldr	r2, [r0, #0]
   d5116:	4680      	mov	r8, r0
   d5118:	460d      	mov	r5, r1
   d511a:	461c      	mov	r4, r3
    if(x0 == x1){
   d511c:	d113      	bne.n	d5146 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d511e:	42be      	cmp	r6, r7
   d5120:	bfc8      	it	gt
   d5122:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5124:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5128:	bfc4      	itt	gt
   d512a:	463e      	movgt	r6, r7
   d512c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d512e:	1c7b      	adds	r3, r7, #1
   d5130:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d5132:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5134:	b21b      	sxth	r3, r3
   d5136:	4632      	mov	r2, r6
   d5138:	4629      	mov	r1, r5
   d513a:	4640      	mov	r0, r8
   d513c:	46a4      	mov	ip, r4
}
   d513e:	b003      	add	sp, #12
   d5140:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5144:	4760      	bx	ip
    } else if(y0 == y1){
   d5146:	42be      	cmp	r6, r7
   d5148:	d10a      	bne.n	d5160 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d514a:	4299      	cmp	r1, r3
   d514c:	bfc2      	ittt	gt
   d514e:	460b      	movgt	r3, r1
   d5150:	4625      	movgt	r5, r4
   d5152:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5154:	1c63      	adds	r3, r4, #1
   d5156:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d515a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d515c:	1b5b      	subs	r3, r3, r5
   d515e:	e7e9      	b.n	d5134 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5160:	6953      	ldr	r3, [r2, #20]
   d5162:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5164:	e9cd 7900 	strd	r7, r9, [sp]
   d5168:	f8d8 3000 	ldr.w	r3, [r8]
   d516c:	4640      	mov	r0, r8
   d516e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5170:	4632      	mov	r2, r6
   d5172:	4623      	mov	r3, r4
   d5174:	4629      	mov	r1, r5
   d5176:	47b8      	blx	r7
        endWrite();
   d5178:	f8d8 3000 	ldr.w	r3, [r8]
   d517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d517e:	4640      	mov	r0, r8
}
   d5180:	b003      	add	sp, #12
   d5182:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d5186:	4718      	bx	r3

000d5188 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d5188:	f001 0303 	and.w	r3, r1, #3
   d518c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5190:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d5192:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d5194:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5198:	bf59      	ittee	pl
   d519a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d519c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d519e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d51a0:	81c3      	strhmi	r3, [r0, #14]
}
   d51a2:	4770      	bx	lr

000d51a4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d51a4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d51a6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d51a8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d51aa:	4a07      	ldr	r2, [pc, #28]	; (d51c8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d51ac:	4d07      	ldr	r5, [pc, #28]	; (d51cc <_ZN12Adafruit_GFXC1Ess+0x28>)
   d51ae:	8101      	strh	r1, [r0, #8]
   d51b0:	2400      	movs	r4, #0
    _width    = WIDTH;
   d51b2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d51b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d51b8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d51bc:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d51be:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d51c0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d51c2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d51c4:	6204      	str	r4, [r0, #32]
}
   d51c6:	bd30      	pop	{r4, r5, pc}
   d51c8:	01000101 	.word	0x01000101
   d51cc:	000dd77c 	.word	0x000dd77c

000d51d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d51d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51d4:	b089      	sub	sp, #36	; 0x24
   d51d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d51da:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d51dc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d51e0:	9304      	str	r3, [sp, #16]
   d51e2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d51e6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d51e8:	9305      	str	r3, [sp, #20]
   d51ea:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d51ee:	4604      	mov	r4, r0
    startWrite();
   d51f0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d51f2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d51f6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d51fa:	bf48      	it	mi
   d51fc:	f108 020e 	addmi.w	r2, r8, #14
   d5200:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d5204:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d5206:	4635      	mov	r5, r6
   d5208:	9b03      	ldr	r3, [sp, #12]
   d520a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d520c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d5210:	189a      	adds	r2, r3, r2
   d5212:	9b05      	ldr	r3, [sp, #20]
   d5214:	428b      	cmp	r3, r1
   d5216:	b212      	sxth	r2, r2
   d5218:	dd27      	ble.n	d526a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d521a:	9b04      	ldr	r3, [sp, #16]
   d521c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d521e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5222:	9306      	str	r3, [sp, #24]
   d5224:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d5228:	4580      	cmp	r8, r0
   d522a:	fa1f f189 	uxth.w	r1, r9
   d522e:	dd17      	ble.n	d5260 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5230:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5232:	bf05      	ittet	eq
   d5234:	9b06      	ldreq	r3, [sp, #24]
   d5236:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5238:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d523a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d523c:	bf18      	it	ne
   d523e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5240:	062b      	lsls	r3, r5, #24
   d5242:	d50a      	bpl.n	d525a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d5244:	9b02      	ldr	r3, [sp, #8]
   d5246:	6820      	ldr	r0, [r4, #0]
   d5248:	9207      	str	r2, [sp, #28]
   d524a:	4419      	add	r1, r3
   d524c:	6983      	ldr	r3, [r0, #24]
   d524e:	b209      	sxth	r1, r1
   d5250:	461f      	mov	r7, r3
   d5252:	4620      	mov	r0, r4
   d5254:	4653      	mov	r3, sl
   d5256:	47b8      	blx	r7
   d5258:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d525a:	f109 0901 	add.w	r9, r9, #1
   d525e:	e7e1      	b.n	d5224 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5260:	9b01      	ldr	r3, [sp, #4]
   d5262:	3301      	adds	r3, #1
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	445e      	add	r6, fp
   d5268:	e7ce      	b.n	d5208 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d526a:	6823      	ldr	r3, [r4, #0]
   d526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d526e:	4620      	mov	r0, r4
}
   d5270:	b009      	add	sp, #36	; 0x24
   d5272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d5276:	4718      	bx	r3

000d5278 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d527c:	ed2d 8b02 	vpush	{d8}
   d5280:	b091      	sub	sp, #68	; 0x44
   d5282:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d5284:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5286:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d528a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d528e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d5292:	9103      	str	r1, [sp, #12]
   d5294:	461f      	mov	r7, r3
   d5296:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d529a:	9304      	str	r3, [sp, #16]
   d529c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d529e:	2a00      	cmp	r2, #0
   d52a0:	f040 80c5 	bne.w	d542e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d52a4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d52a8:	428b      	cmp	r3, r1
   d52aa:	f340 814c 	ble.w	d5546 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d52ae:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d52b2:	42b3      	cmp	r3, r6
   d52b4:	f340 8147 	ble.w	d5546 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d52b8:	2306      	movs	r3, #6
   d52ba:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d52be:	2b00      	cmp	r3, #0
   d52c0:	f340 8141 	ble.w	d5546 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d52c4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d52c8:	2b00      	cmp	r3, #0
   d52ca:	f340 813c 	ble.w	d5546 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d52ce:	7f03      	ldrb	r3, [r0, #28]
   d52d0:	b91b      	cbnz	r3, d52da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d52d2:	2faf      	cmp	r7, #175	; 0xaf
   d52d4:	bf84      	itt	hi
   d52d6:	3701      	addhi	r7, #1
   d52d8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d52da:	f8db 3000 	ldr.w	r3, [fp]
   d52de:	4658      	mov	r0, fp
   d52e0:	695b      	ldr	r3, [r3, #20]
   d52e2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d52e4:	2205      	movs	r2, #5
   d52e6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d52e8:	2200      	movs	r2, #0
   d52ea:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d52ec:	4a98      	ldr	r2, [pc, #608]	; (d5550 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d52ee:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d52f2:	18d3      	adds	r3, r2, r3
   d52f4:	930c      	str	r3, [sp, #48]	; 0x30
   d52f6:	b2b3      	uxth	r3, r6
   d52f8:	9306      	str	r3, [sp, #24]
   d52fa:	9a05      	ldr	r2, [sp, #20]
   d52fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d52fe:	5c9b      	ldrb	r3, [r3, r2]
   d5300:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5302:	b2ab      	uxth	r3, r5
   d5304:	930b      	str	r3, [sp, #44]	; 0x2c
   d5306:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d530a:	9308      	str	r3, [sp, #32]
   d530c:	9b03      	ldr	r3, [sp, #12]
   d530e:	fb02 f905 	mul.w	r9, r2, r5
   d5312:	fa19 f983 	uxtah	r9, r9, r3
   d5316:	fa0f f389 	sxth.w	r3, r9
   d531a:	ee08 3a10 	vmov	s16, r3
   d531e:	2308      	movs	r3, #8
   d5320:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d5322:	9b03      	ldr	r3, [sp, #12]
   d5324:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5328:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d532c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d5330:	9a07      	ldr	r2, [sp, #28]
   d5332:	f8db 3000 	ldr.w	r3, [fp]
   d5336:	07d2      	lsls	r2, r2, #31
   d5338:	d552      	bpl.n	d53e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d533a:	2d01      	cmp	r5, #1
   d533c:	fa1f f289 	uxth.w	r2, r9
   d5340:	d13e      	bne.n	d53c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d5342:	2c01      	cmp	r4, #1
   d5344:	d13c      	bne.n	d53c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d5346:	699b      	ldr	r3, [r3, #24]
   d5348:	9906      	ldr	r1, [sp, #24]
   d534a:	461f      	mov	r7, r3
   d534c:	9b04      	ldr	r3, [sp, #16]
   d534e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d5350:	b212      	sxth	r2, r2
   d5352:	4651      	mov	r1, sl
   d5354:	4658      	mov	r0, fp
   d5356:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5358:	f109 0301 	add.w	r3, r9, #1
   d535c:	fa4f f983 	sxtb.w	r9, r3
   d5360:	9b07      	ldr	r3, [sp, #28]
   d5362:	085b      	lsrs	r3, r3, #1
   d5364:	9307      	str	r3, [sp, #28]
   d5366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5368:	3b01      	subs	r3, #1
   d536a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d536e:	930a      	str	r3, [sp, #40]	; 0x28
   d5370:	d1de      	bne.n	d5330 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5372:	9f05      	ldr	r7, [sp, #20]
   d5374:	3701      	adds	r7, #1
   d5376:	b27b      	sxtb	r3, r7
   d5378:	9305      	str	r3, [sp, #20]
   d537a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d537c:	3b01      	subs	r3, #1
   d537e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5382:	9309      	str	r3, [sp, #36]	; 0x24
   d5384:	d1b9      	bne.n	d52fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d5386:	9b04      	ldr	r3, [sp, #16]
   d5388:	4543      	cmp	r3, r8
   d538a:	d00f      	beq.n	d53ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d538c:	2d01      	cmp	r5, #1
   d538e:	f8db 3000 	ldr.w	r3, [fp]
   d5392:	d13b      	bne.n	d540c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5394:	2c01      	cmp	r4, #1
   d5396:	d139      	bne.n	d540c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5398:	9908      	ldr	r1, [sp, #32]
   d539a:	f8cd 8000 	str.w	r8, [sp]
   d539e:	3105      	adds	r1, #5
   d53a0:	6a1c      	ldr	r4, [r3, #32]
   d53a2:	4632      	mov	r2, r6
   d53a4:	2308      	movs	r3, #8
   d53a6:	b209      	sxth	r1, r1
   d53a8:	4658      	mov	r0, fp
   d53aa:	47a0      	blx	r4
        endWrite();
   d53ac:	f8db 3000 	ldr.w	r3, [fp]
   d53b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53b2:	4658      	mov	r0, fp
}
   d53b4:	b011      	add	sp, #68	; 0x44
   d53b6:	ecbd 8b02 	vpop	{d8}
   d53ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d53be:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d53c0:	9906      	ldr	r1, [sp, #24]
   d53c2:	fb14 f202 	smulbb	r2, r4, r2
   d53c6:	440a      	add	r2, r1
   d53c8:	9904      	ldr	r1, [sp, #16]
   d53ca:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d53cc:	9400      	str	r4, [sp, #0]
   d53ce:	69db      	ldr	r3, [r3, #28]
   d53d0:	ee18 1a10 	vmov	r1, s16
   d53d4:	461f      	mov	r7, r3
   d53d6:	b212      	sxth	r2, r2
   d53d8:	462b      	mov	r3, r5
   d53da:	4658      	mov	r0, fp
   d53dc:	47b8      	blx	r7
   d53de:	e7bb      	b.n	d5358 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d53e0:	9a04      	ldr	r2, [sp, #16]
   d53e2:	4542      	cmp	r2, r8
   d53e4:	d0b8      	beq.n	d5358 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d53e6:	2d01      	cmp	r5, #1
   d53e8:	fa1f f289 	uxth.w	r2, r9
   d53ec:	d107      	bne.n	d53fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d53ee:	2c01      	cmp	r4, #1
   d53f0:	d105      	bne.n	d53fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d53f2:	699b      	ldr	r3, [r3, #24]
   d53f4:	9906      	ldr	r1, [sp, #24]
   d53f6:	461f      	mov	r7, r3
   d53f8:	440a      	add	r2, r1
   d53fa:	4643      	mov	r3, r8
   d53fc:	e7a8      	b.n	d5350 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d53fe:	9906      	ldr	r1, [sp, #24]
   d5400:	f8cd 8004 	str.w	r8, [sp, #4]
   d5404:	fb14 f202 	smulbb	r2, r4, r2
   d5408:	440a      	add	r2, r1
   d540a:	e7df      	b.n	d53cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d540c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d540e:	f8cd 8004 	str.w	r8, [sp, #4]
   d5412:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d5416:	9a08      	ldr	r2, [sp, #32]
   d5418:	00e4      	lsls	r4, r4, #3
   d541a:	440a      	add	r2, r1
   d541c:	4611      	mov	r1, r2
   d541e:	9400      	str	r4, [sp, #0]
   d5420:	69dc      	ldr	r4, [r3, #28]
   d5422:	4632      	mov	r2, r6
   d5424:	462b      	mov	r3, r5
   d5426:	b209      	sxth	r1, r1
   d5428:	4658      	mov	r0, fp
   d542a:	47a0      	blx	r4
        endWrite();
   d542c:	e7be      	b.n	d53ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d542e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d5430:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d5432:	6812      	ldr	r2, [r2, #0]
   d5434:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5436:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d5438:	b2ff      	uxtb	r7, r7
   d543a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d543e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d5442:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5444:	789a      	ldrb	r2, [r3, #2]
   d5446:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d5448:	78da      	ldrb	r2, [r3, #3]
   d544a:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d544c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d544e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d5452:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5456:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d5458:	d801      	bhi.n	d545e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d545a:	2c01      	cmp	r4, #1
   d545c:	d957      	bls.n	d550e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d545e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d5462:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d5464:	fa0f f38a 	sxth.w	r3, sl
   d5468:	9307      	str	r3, [sp, #28]
        startWrite();
   d546a:	f8db 3000 	ldr.w	r3, [fp]
   d546e:	4658      	mov	r0, fp
   d5470:	695b      	ldr	r3, [r3, #20]
   d5472:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5474:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5476:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d547a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d547c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5480:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d5482:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5484:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d5486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5488:	429f      	cmp	r7, r3
   d548a:	d28f      	bcs.n	d53ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d548c:	9b07      	ldr	r3, [sp, #28]
   d548e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d5490:	443b      	add	r3, r7
   d5492:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d5496:	2200      	movs	r2, #0
   d5498:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d549a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d549c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d549e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d54a2:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d54a6:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d54aa:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d54ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d54ae:	9905      	ldr	r1, [sp, #20]
   d54b0:	4291      	cmp	r1, r2
   d54b2:	d241      	bcs.n	d5538 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d54b4:	1c5a      	adds	r2, r3, #1
   d54b6:	b2d2      	uxtb	r2, r2
   d54b8:	075b      	lsls	r3, r3, #29
   d54ba:	920c      	str	r2, [sp, #48]	; 0x30
   d54bc:	d107      	bne.n	d54ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d54be:	9b06      	ldr	r3, [sp, #24]
   d54c0:	9906      	ldr	r1, [sp, #24]
   d54c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d54c4:	3301      	adds	r3, #1
   d54c6:	b29b      	uxth	r3, r3
   d54c8:	f812 9001 	ldrb.w	r9, [r2, r1]
   d54cc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d54ce:	f019 0f80 	tst.w	r9, #128	; 0x80
   d54d2:	d012      	beq.n	d54fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d54d4:	2d01      	cmp	r5, #1
   d54d6:	f8db 3000 	ldr.w	r3, [fp]
   d54da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d54de:	d11a      	bne.n	d5516 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d54e0:	2c01      	cmp	r4, #1
   d54e2:	d118      	bne.n	d5516 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d54e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d54e6:	699b      	ldr	r3, [r3, #24]
   d54e8:	4411      	add	r1, r2
   d54ea:	9a05      	ldr	r2, [sp, #20]
   d54ec:	4411      	add	r1, r2
   d54ee:	461e      	mov	r6, r3
   d54f0:	4652      	mov	r2, sl
   d54f2:	9b04      	ldr	r3, [sp, #16]
   d54f4:	b209      	sxth	r1, r1
   d54f6:	4658      	mov	r0, fp
   d54f8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d54fa:	9e05      	ldr	r6, [sp, #20]
   d54fc:	3601      	adds	r6, #1
   d54fe:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d5500:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d5504:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d5506:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d550a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d550c:	e7ce      	b.n	d54ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d550e:	2300      	movs	r3, #0
   d5510:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d5514:	e7a9      	b.n	d546a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5516:	9805      	ldr	r0, [sp, #20]
   d5518:	9a08      	ldr	r2, [sp, #32]
   d551a:	4402      	add	r2, r0
   d551c:	fb02 1105 	mla	r1, r2, r5, r1
   d5520:	9a04      	ldr	r2, [sp, #16]
   d5522:	e9cd 4200 	strd	r4, r2, [sp]
   d5526:	69db      	ldr	r3, [r3, #28]
   d5528:	ee18 2a10 	vmov	r2, s16
   d552c:	461e      	mov	r6, r3
   d552e:	b209      	sxth	r1, r1
   d5530:	462b      	mov	r3, r5
   d5532:	4658      	mov	r0, fp
   d5534:	47b0      	blx	r6
   d5536:	e7e0      	b.n	d54fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d5538:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d553a:	3701      	adds	r7, #1
   d553c:	4498      	add	r8, r3
   d553e:	fa5f f888 	uxtb.w	r8, r8
   d5542:	b2ff      	uxtb	r7, r7
   d5544:	e79f      	b.n	d5486 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d5546:	b011      	add	sp, #68	; 0x44
   d5548:	ecbd 8b02 	vpop	{d8}
   d554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5550:	000dd274 	.word	0x000dd274

000d5554 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5554:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5556:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d5558:	b085      	sub	sp, #20
   d555a:	4604      	mov	r4, r0
   d555c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d555e:	2a00      	cmp	r2, #0
   d5560:	d134      	bne.n	d55cc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d5562:	290a      	cmp	r1, #10
   d5564:	d108      	bne.n	d5578 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d5566:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5568:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d556a:	7e42      	ldrb	r2, [r0, #25]
   d556c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d5570:	8263      	strh	r3, [r4, #18]
}
   d5572:	2001      	movs	r0, #1
   d5574:	b005      	add	sp, #20
   d5576:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5578:	290d      	cmp	r1, #13
   d557a:	d0fa      	beq.n	d5572 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d557c:	7ee1      	ldrb	r1, [r4, #27]
   d557e:	7e00      	ldrb	r0, [r0, #24]
   d5580:	7e65      	ldrb	r5, [r4, #25]
   d5582:	b171      	cbz	r1, d55a2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d5584:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5588:	2106      	movs	r1, #6
   d558a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d558e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d5592:	42b1      	cmp	r1, r6
   d5594:	bfc1      	itttt	gt
   d5596:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d559a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d559c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d55a0:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d55a2:	8ae2      	ldrh	r2, [r4, #22]
   d55a4:	9201      	str	r2, [sp, #4]
   d55a6:	8aa2      	ldrh	r2, [r4, #20]
   d55a8:	9200      	str	r2, [sp, #0]
   d55aa:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d55ae:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d55b2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d55b6:	4620      	mov	r0, r4
   d55b8:	f7ff fe5e 	bl	d5278 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d55bc:	7e23      	ldrb	r3, [r4, #24]
   d55be:	8a22      	ldrh	r2, [r4, #16]
   d55c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d55c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d55c8:	8223      	strh	r3, [r4, #16]
   d55ca:	e7d2      	b.n	d5572 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d55cc:	290a      	cmp	r1, #10
   d55ce:	d107      	bne.n	d55e0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d55d0:	2300      	movs	r3, #0
   d55d2:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d55d4:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d55d6:	7e41      	ldrb	r1, [r0, #25]
   d55d8:	8a42      	ldrh	r2, [r0, #18]
   d55da:	fb01 2303 	mla	r3, r1, r3, r2
   d55de:	e7c7      	b.n	d5570 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d55e0:	290d      	cmp	r1, #13
   d55e2:	d0c6      	beq.n	d5572 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d55e4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d55e6:	42a9      	cmp	r1, r5
   d55e8:	d3c3      	bcc.n	d5572 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d55ea:	7a51      	ldrb	r1, [r2, #9]
   d55ec:	4299      	cmp	r1, r3
   d55ee:	d3c0      	bcc.n	d5572 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d55f0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d55f2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d55f4:	b2ed      	uxtb	r5, r5
   d55f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d55fa:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d55fc:	b32f      	cbz	r7, d564a <_ZN12Adafruit_GFX5writeEh+0xf6>
   d55fe:	78e9      	ldrb	r1, [r5, #3]
   d5600:	b319      	cbz	r1, d564a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d5602:	7ee1      	ldrb	r1, [r4, #27]
   d5604:	7e00      	ldrb	r0, [r0, #24]
   d5606:	7e66      	ldrb	r6, [r4, #25]
   d5608:	b191      	cbz	r1, d5630 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d560a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d560e:	4439      	add	r1, r7
   d5610:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d5614:	fb00 7101 	mla	r1, r0, r1, r7
   d5618:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d561c:	42b9      	cmp	r1, r7
   d561e:	dd07      	ble.n	d5630 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d5620:	2700      	movs	r7, #0
   d5622:	8227      	strh	r7, [r4, #16]
   d5624:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5628:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d562a:	fb02 1206 	mla	r2, r2, r6, r1
   d562e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5630:	8ae2      	ldrh	r2, [r4, #22]
   d5632:	9201      	str	r2, [sp, #4]
   d5634:	8aa2      	ldrh	r2, [r4, #20]
   d5636:	9200      	str	r2, [sp, #0]
   d5638:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d563c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5640:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5644:	4620      	mov	r0, r4
   d5646:	f7ff fe17 	bl	d5278 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d564a:	7929      	ldrb	r1, [r5, #4]
   d564c:	7e23      	ldrb	r3, [r4, #24]
   d564e:	8a22      	ldrh	r2, [r4, #16]
   d5650:	fb01 2303 	mla	r3, r1, r3, r2
   d5654:	e7b8      	b.n	d55c8 <_ZN12Adafruit_GFX5writeEh+0x74>

000d5656 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d5656:	2901      	cmp	r1, #1
   d5658:	bf38      	it	cc
   d565a:	2101      	movcc	r1, #1
   d565c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d565e:	7641      	strb	r1, [r0, #25]
}
   d5660:	4770      	bx	lr
	...

000d5664 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5664:	b510      	push	{r4, lr}
   d5666:	4b04      	ldr	r3, [pc, #16]	; (d5678 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d5668:	6003      	str	r3, [r0, #0]
   d566a:	4604      	mov	r4, r0
  if(buffer) {
   d566c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d566e:	b108      	cbz	r0, d5674 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d5670:	f002 fe74 	bl	d835c <free>
    buffer = NULL;
  }
}
   d5674:	4620      	mov	r0, r4
   d5676:	bd10      	pop	{r4, pc}
   d5678:	000ddc74 	.word	0x000ddc74

000d567c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d567c:	b510      	push	{r4, lr}
   d567e:	4604      	mov	r4, r0
}
   d5680:	f7ff fff0 	bl	d5664 <_ZN16Adafruit_SSD1306D1Ev>
   d5684:	4620      	mov	r0, r4
   d5686:	2150      	movs	r1, #80	; 0x50
   d5688:	f004 fdd8 	bl	da23c <_ZdlPvj>
   d568c:	4620      	mov	r0, r4
   d568e:	bd10      	pop	{r4, pc}

000d5690 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5690:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5692:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5694:	db4b      	blt.n	d572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5696:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d569a:	428c      	cmp	r4, r1
   d569c:	dd47      	ble.n	d572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d569e:	2a00      	cmp	r2, #0
   d56a0:	db45      	blt.n	d572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d56a2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d56a6:	4294      	cmp	r4, r2
   d56a8:	dd41      	ble.n	d572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d56aa:	7e84      	ldrb	r4, [r0, #26]
   d56ac:	2c02      	cmp	r4, #2
   d56ae:	d01f      	beq.n	d56f0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d56b0:	2c03      	cmp	r4, #3
   d56b2:	d026      	beq.n	d5702 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d56b4:	2c01      	cmp	r4, #1
   d56b6:	d104      	bne.n	d56c2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d56b8:	8904      	ldrh	r4, [r0, #8]
   d56ba:	43d2      	mvns	r2, r2
   d56bc:	4414      	add	r4, r2
      break;
   d56be:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d56c0:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d56c2:	2b01      	cmp	r3, #1
   d56c4:	d023      	beq.n	d570e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d56c6:	2b02      	cmp	r3, #2
   d56c8:	d032      	beq.n	d5730 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d56ca:	bb83      	cbnz	r3, d572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d56cc:	2a00      	cmp	r2, #0
   d56ce:	4613      	mov	r3, r2
   d56d0:	8904      	ldrh	r4, [r0, #8]
   d56d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d56d4:	bfb8      	it	lt
   d56d6:	1dd3      	addlt	r3, r2, #7
   d56d8:	10db      	asrs	r3, r3, #3
   d56da:	fb13 1104 	smlabb	r1, r3, r4, r1
   d56de:	f002 0207 	and.w	r2, r2, #7
   d56e2:	2301      	movs	r3, #1
   d56e4:	4093      	lsls	r3, r2
   d56e6:	5c42      	ldrb	r2, [r0, r1]
   d56e8:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d56ec:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d56ee:	e01e      	b.n	d572e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d56f0:	8904      	ldrh	r4, [r0, #8]
   d56f2:	43c9      	mvns	r1, r1
   d56f4:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d56f6:	8944      	ldrh	r4, [r0, #10]
   d56f8:	43d2      	mvns	r2, r2
   d56fa:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d56fc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d56fe:	b212      	sxth	r2, r2
      break;
   d5700:	e7df      	b.n	d56c2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d5702:	8944      	ldrh	r4, [r0, #10]
   d5704:	43c9      	mvns	r1, r1
   d5706:	440c      	add	r4, r1
      break;
   d5708:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d570a:	b222      	sxth	r2, r4
      break;
   d570c:	e7d9      	b.n	d56c2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d570e:	2a00      	cmp	r2, #0
   d5710:	8904      	ldrh	r4, [r0, #8]
   d5712:	4613      	mov	r3, r2
   d5714:	bfb8      	it	lt
   d5716:	1dd3      	addlt	r3, r2, #7
   d5718:	10db      	asrs	r3, r3, #3
   d571a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d571e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5720:	f002 0007 	and.w	r0, r2, #7
   d5724:	2201      	movs	r2, #1
   d5726:	4082      	lsls	r2, r0
   d5728:	5c58      	ldrb	r0, [r3, r1]
   d572a:	4302      	orrs	r2, r0
   d572c:	545a      	strb	r2, [r3, r1]
}
   d572e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5730:	2a00      	cmp	r2, #0
   d5732:	4613      	mov	r3, r2
   d5734:	8904      	ldrh	r4, [r0, #8]
   d5736:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5738:	bfb8      	it	lt
   d573a:	1dd3      	addlt	r3, r2, #7
   d573c:	10db      	asrs	r3, r3, #3
   d573e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5742:	f002 0207 	and.w	r2, r2, #7
   d5746:	2301      	movs	r3, #1
   d5748:	fa03 f202 	lsl.w	r2, r3, r2
   d574c:	5c43      	ldrb	r3, [r0, r1]
   d574e:	405a      	eors	r2, r3
   d5750:	e7cc      	b.n	d56ec <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d5752 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5752:	b510      	push	{r4, lr}
   d5754:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d5756:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d575a:	2101      	movs	r1, #1
   d575c:	b280      	uxth	r0, r0
   d575e:	f004 fd04 	bl	da16a <digitalWrite>
   d5762:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5764:	b118      	cbz	r0, d576e <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d5766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d576a:	f003 bdeb 	b.w	d9344 <_ZN8SPIClass14endTransactionEv>
}
   d576e:	bd10      	pop	{r4, pc}

000d5770 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d5770:	b570      	push	{r4, r5, r6, lr}
   d5772:	4604      	mov	r4, r0
   d5774:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d5776:	2600      	movs	r6, #0
   d5778:	f7ff fd14 	bl	d51a4 <_ZN12Adafruit_GFXC1Ess>
   d577c:	4b11      	ldr	r3, [pc, #68]	; (d57c4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d577e:	6023      	str	r3, [r4, #0]
   d5780:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d5782:	b915      	cbnz	r5, d578a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d5784:	f004 fd36 	bl	da1f4 <_Z19__fetch_global_Wirev>
   d5788:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d578a:	23ff      	movs	r3, #255	; 0xff
   d578c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d5790:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d5794:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d5798:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d579c:	4b0a      	ldr	r3, [pc, #40]	; (d57c8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d579e:	63a3      	str	r3, [r4, #56]	; 0x38
   d57a0:	2301      	movs	r3, #1
   d57a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d57a6:	9b05      	ldr	r3, [sp, #20]
   d57a8:	64a3      	str	r3, [r4, #72]	; 0x48
   d57aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d57ae:	9b06      	ldr	r3, [sp, #24]
   d57b0:	86a2      	strh	r2, [r4, #52]	; 0x34
   d57b2:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d57b6:	6426      	str	r6, [r4, #64]	; 0x40
   d57b8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d57bc:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d57be:	4620      	mov	r0, r4
   d57c0:	bd70      	pop	{r4, r5, r6, pc}
   d57c2:	bf00      	nop
   d57c4:	000ddc74 	.word	0x000ddc74
   d57c8:	000dd22c 	.word	0x000dd22c

000d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d57cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57ce:	4604      	mov	r4, r0
  if(wire) { // I2C
   d57d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d57d2:	460d      	mov	r5, r1
  if(wire) { // I2C
   d57d4:	b190      	cbz	r0, d57fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d57d6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d57da:	f003 faa5 	bl	d8d28 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d57de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57e0:	6803      	ldr	r3, [r0, #0]
   d57e2:	2100      	movs	r1, #0
   d57e4:	689b      	ldr	r3, [r3, #8]
   d57e6:	4798      	blx	r3
    WIRE_WRITE(c);
   d57e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57ea:	6803      	ldr	r3, [r0, #0]
   d57ec:	4629      	mov	r1, r5
   d57ee:	689b      	ldr	r3, [r3, #8]
   d57f0:	4798      	blx	r3
    wire->endTransmission();
   d57f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d57f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d57f8:	f003 ba9d 	b.w	d8d36 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d57fc:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5800:	4601      	mov	r1, r0
   d5802:	b298      	uxth	r0, r3
   d5804:	f004 fcb1 	bl	da16a <digitalWrite>
  if(spi) {
   d5808:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d580a:	b120      	cbz	r0, d5816 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d580c:	4629      	mov	r1, r5
}
   d580e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d5812:	f003 be1f 	b.w	d9454 <_ZN8SPIClass8transferEh>
   d5816:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5818:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d581a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d581e:	ea05 0107 	and.w	r1, r5, r7
   d5822:	b280      	uxth	r0, r0
   d5824:	f004 fca1 	bl	da16a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5828:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d582c:	2101      	movs	r1, #1
   d582e:	b280      	uxth	r0, r0
   d5830:	f004 fc9b 	bl	da16a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5834:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5838:	2100      	movs	r1, #0
   d583a:	b280      	uxth	r0, r0
   d583c:	f004 fc95 	bl	da16a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5840:	3e01      	subs	r6, #1
   d5842:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d5846:	d1e8      	bne.n	d581a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d5848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d584a <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d584a:	b538      	push	{r3, r4, r5, lr}
   d584c:	4604      	mov	r4, r0
  TRANSACTION_START
   d584e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5850:	460d      	mov	r5, r1
  TRANSACTION_START
   d5852:	b180      	cbz	r0, d5876 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d5854:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5856:	f003 fa59 	bl	d8d0c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d585a:	2d00      	cmp	r5, #0
   d585c:	4620      	mov	r0, r4
   d585e:	bf14      	ite	ne
   d5860:	21a7      	movne	r1, #167	; 0xa7
   d5862:	21a6      	moveq	r1, #166	; 0xa6
   d5864:	f7ff ffb2 	bl	d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d5868:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d586a:	b188      	cbz	r0, d5890 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d586c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d586e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5872:	f003 ba4b 	b.w	d8d0c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d5876:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5878:	b118      	cbz	r0, d5882 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d587a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d587e:	f003 fd7b 	bl	d9378 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5882:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5886:	2100      	movs	r1, #0
   d5888:	b280      	uxth	r0, r0
   d588a:	f004 fc6e 	bl	da16a <digitalWrite>
   d588e:	e7e4      	b.n	d585a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d5890:	4620      	mov	r0, r4
}
   d5892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5896:	f7ff bf5c 	b.w	d5752 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d589a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d589e:	4604      	mov	r4, r0
  if(wire) { // I2C
   d58a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d58a2:	460d      	mov	r5, r1
  if(wire) { // I2C
   d58a4:	188f      	adds	r7, r1, r2
   d58a6:	b340      	cbz	r0, d58fa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d58a8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d58ac:	f003 fa3c 	bl	d8d28 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d58b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58b2:	6803      	ldr	r3, [r0, #0]
   d58b4:	2100      	movs	r1, #0
   d58b6:	689b      	ldr	r3, [r3, #8]
   d58b8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d58ba:	2601      	movs	r6, #1
    while(n--) {
   d58bc:	42bd      	cmp	r5, r7
   d58be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58c0:	d017      	beq.n	d58f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d58c2:	2e1f      	cmp	r6, #31
   d58c4:	d90c      	bls.n	d58e0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d58c6:	f003 fa36 	bl	d8d36 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d58ca:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d58ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58d0:	f003 fa2a 	bl	d8d28 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d58d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58d6:	6803      	ldr	r3, [r0, #0]
   d58d8:	2100      	movs	r1, #0
   d58da:	689b      	ldr	r3, [r3, #8]
   d58dc:	4798      	blx	r3
        bytesOut = 1;
   d58de:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d58e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58e2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d58e6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d58e8:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d58ea:	689b      	ldr	r3, [r3, #8]
   d58ec:	4798      	blx	r3
      bytesOut++;
   d58ee:	b2f6      	uxtb	r6, r6
    while(n--) {
   d58f0:	e7e4      	b.n	d58bc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d58f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d58f6:	f003 ba1e 	b.w	d8d36 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d58fa:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d58fe:	4601      	mov	r1, r0
   d5900:	b298      	uxth	r0, r3
   d5902:	f004 fc32 	bl	da16a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5906:	42af      	cmp	r7, r5
   d5908:	d022      	beq.n	d5950 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d590a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d590c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5910:	b118      	cbz	r0, d591a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d5912:	4649      	mov	r1, r9
   d5914:	f003 fd9e 	bl	d9454 <_ZN8SPIClass8transferEh>
   d5918:	e7f5      	b.n	d5906 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d591a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d591c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5920:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5924:	ea09 0108 	and.w	r1, r9, r8
   d5928:	b280      	uxth	r0, r0
   d592a:	f004 fc1e 	bl	da16a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d592e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5932:	2101      	movs	r1, #1
   d5934:	b280      	uxth	r0, r0
   d5936:	f004 fc18 	bl	da16a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d593a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d593e:	2100      	movs	r1, #0
   d5940:	b280      	uxth	r0, r0
   d5942:	f004 fc12 	bl	da16a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5946:	3e01      	subs	r6, #1
   d5948:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d594c:	d1e8      	bne.n	d5920 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d594e:	e7da      	b.n	d5906 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d5950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5954 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d5954:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5958:	1dda      	adds	r2, r3, #7
   d595a:	bf48      	it	mi
   d595c:	f103 020e 	addmi.w	r2, r3, #14
   d5960:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5964:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5966:	10d2      	asrs	r2, r2, #3
   d5968:	435a      	muls	r2, r3
   d596a:	2100      	movs	r1, #0
   d596c:	f005 bb5b 	b.w	db026 <memset>

000d5970 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d5970:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5974:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5976:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d5978:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d597c:	4604      	mov	r4, r0
   d597e:	460f      	mov	r7, r1
   d5980:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5982:	b1b3      	cbz	r3, d59b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d5984:	4620      	mov	r0, r4
   d5986:	f7ff ffe5 	bl	d5954 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d598a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d598e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d5992:	2820      	cmp	r0, #32
   d5994:	dc1f      	bgt.n	d59d6 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5996:	2320      	movs	r3, #32
   d5998:	2201      	movs	r2, #1
   d599a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d599e:	3820      	subs	r0, #32
   d59a0:	2373      	movs	r3, #115	; 0x73
   d59a2:	3973      	subs	r1, #115	; 0x73
   d59a4:	9300      	str	r3, [sp, #0]
   d59a6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d59aa:	4b89      	ldr	r3, [pc, #548]	; (d5bd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d59ac:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d59b0:	e01f      	b.n	d59f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d59b2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d59b6:	1dd8      	adds	r0, r3, #7
   d59b8:	bf48      	it	mi
   d59ba:	f103 000e 	addmi.w	r0, r3, #14
   d59be:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d59c2:	10c0      	asrs	r0, r0, #3
   d59c4:	4358      	muls	r0, r3
   d59c6:	f002 fcc1 	bl	d834c <malloc>
   d59ca:	62e0      	str	r0, [r4, #44]	; 0x2c
   d59cc:	2800      	cmp	r0, #0
   d59ce:	d1d9      	bne.n	d5984 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d59d0:	b004      	add	sp, #16
   d59d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d59d6:	2340      	movs	r3, #64	; 0x40
   d59d8:	f04f 0c01 	mov.w	ip, #1
   d59dc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d59e0:	2352      	movs	r3, #82	; 0x52
   d59e2:	3840      	subs	r0, #64	; 0x40
   d59e4:	3952      	subs	r1, #82	; 0x52
   d59e6:	9300      	str	r3, [sp, #0]
   d59e8:	4b7a      	ldr	r3, [pc, #488]	; (d5bd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d59ea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d59ee:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d59f2:	f340 024f 	sbfx	r2, r0, #1, #16
   d59f6:	f341 014f 	sbfx	r1, r1, #1, #16
   d59fa:	4620      	mov	r0, r4
   d59fc:	f7ff fbe8 	bl	d51d0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5a00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d5a02:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5a06:	2800      	cmp	r0, #0
   d5a08:	d078      	beq.n	d5afc <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5a0a:	2d00      	cmp	r5, #0
   d5a0c:	d174      	bne.n	d5af8 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d5a0e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5a12:	2b20      	cmp	r3, #32
   d5a14:	bf0c      	ite	eq
   d5a16:	253c      	moveq	r5, #60	; 0x3c
   d5a18:	253d      	movne	r5, #61	; 0x3d
   d5a1a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5a1e:	f1b8 0f00 	cmp.w	r8, #0
   d5a22:	d001      	beq.n	d5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5a24:	f003 f976 	bl	d8d14 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5a28:	b1fe      	cbz	r6, d5a6a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5a2a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5a2e:	2800      	cmp	r0, #0
   d5a30:	db1b      	blt.n	d5a6a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5a32:	2101      	movs	r1, #1
   d5a34:	b280      	uxth	r0, r0
   d5a36:	f004 fb87 	bl	da148 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5a3a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5a3e:	2101      	movs	r1, #1
   d5a40:	b280      	uxth	r0, r0
   d5a42:	f004 fb92 	bl	da16a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5a46:	2001      	movs	r0, #1
   d5a48:	f002 fcd8 	bl	d83fc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5a4c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5a50:	2100      	movs	r1, #0
   d5a52:	b280      	uxth	r0, r0
   d5a54:	f004 fb89 	bl	da16a <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5a58:	200a      	movs	r0, #10
   d5a5a:	f002 fccf 	bl	d83fc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5a5e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5a62:	2101      	movs	r1, #1
   d5a64:	b280      	uxth	r0, r0
   d5a66:	f004 fb80 	bl	da16a <digitalWrite>
  TRANSACTION_START
   d5a6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5a6c:	2800      	cmp	r0, #0
   d5a6e:	d074      	beq.n	d5b5a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5a70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5a72:	f003 f94b 	bl	d8d0c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d5a76:	2204      	movs	r2, #4
   d5a78:	4957      	ldr	r1, [pc, #348]	; (d5bd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	f7ff ff0d 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5a80:	7aa1      	ldrb	r1, [r4, #10]
   d5a82:	3901      	subs	r1, #1
   d5a84:	b2c9      	uxtb	r1, r1
   d5a86:	4620      	mov	r0, r4
   d5a88:	f7ff fea0 	bl	d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5a8c:	4953      	ldr	r1, [pc, #332]	; (d5bdc <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d5a8e:	2204      	movs	r2, #4
   d5a90:	4620      	mov	r0, r4
   d5a92:	f7ff ff02 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d5a96:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5a9a:	2b01      	cmp	r3, #1
   d5a9c:	bf0c      	ite	eq
   d5a9e:	2110      	moveq	r1, #16
   d5aa0:	2114      	movne	r1, #20
   d5aa2:	4620      	mov	r0, r4
   d5aa4:	f7ff fe92 	bl	d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5aa8:	2204      	movs	r2, #4
   d5aaa:	494d      	ldr	r1, [pc, #308]	; (d5be0 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5aac:	4620      	mov	r0, r4
   d5aae:	f7ff fef4 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d5ab2:	68a3      	ldr	r3, [r4, #8]
   d5ab4:	4a4b      	ldr	r2, [pc, #300]	; (d5be4 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d5ab6:	4293      	cmp	r3, r2
   d5ab8:	d15c      	bne.n	d5b74 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5aba:	494b      	ldr	r1, [pc, #300]	; (d5be8 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5abc:	2204      	movs	r2, #4
   d5abe:	4620      	mov	r0, r4
   d5ac0:	f7ff feeb 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5ac4:	21d9      	movs	r1, #217	; 0xd9
   d5ac6:	4620      	mov	r0, r4
   d5ac8:	f7ff fe80 	bl	d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5acc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5ad0:	2b01      	cmp	r3, #1
   d5ad2:	bf0c      	ite	eq
   d5ad4:	2122      	moveq	r1, #34	; 0x22
   d5ad6:	21f1      	movne	r1, #241	; 0xf1
   d5ad8:	4620      	mov	r0, r4
   d5ada:	f7ff fe77 	bl	d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5ade:	4620      	mov	r0, r4
   d5ae0:	4942      	ldr	r1, [pc, #264]	; (d5bec <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5ae2:	2206      	movs	r2, #6
   d5ae4:	f7ff fed9 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5aea:	2800      	cmp	r0, #0
   d5aec:	d063      	beq.n	d5bb6 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5aee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5af0:	f003 f90c 	bl	d8d0c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5af4:	2001      	movs	r0, #1
   d5af6:	e76b      	b.n	d59d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5af8:	b26d      	sxtb	r5, r5
   d5afa:	e78e      	b.n	d5a1a <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5afc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5b00:	2101      	movs	r1, #1
   d5b02:	b280      	uxth	r0, r0
   d5b04:	f004 fb20 	bl	da148 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5b08:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5b0c:	2101      	movs	r1, #1
   d5b0e:	b280      	uxth	r0, r0
   d5b10:	f004 fb1a 	bl	da148 <pinMode>
    SSD1306_DESELECT
   d5b14:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5b18:	2101      	movs	r1, #1
   d5b1a:	b280      	uxth	r0, r0
   d5b1c:	f004 fb25 	bl	da16a <digitalWrite>
    if(spi) { // Hardware SPI
   d5b20:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5b22:	b13d      	cbz	r5, d5b34 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5b24:	f1b8 0f00 	cmp.w	r8, #0
   d5b28:	f43f af7e 	beq.w	d5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5b2c:	4628      	mov	r0, r5
   d5b2e:	f003 fbe5 	bl	d92fc <_ZN8SPIClass5beginEv>
   d5b32:	e779      	b.n	d5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5b34:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5b38:	2101      	movs	r1, #1
   d5b3a:	b280      	uxth	r0, r0
   d5b3c:	f004 fb04 	bl	da148 <pinMode>
      pinMode(clkPin , OUTPUT);
   d5b40:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5b44:	2101      	movs	r1, #1
   d5b46:	b280      	uxth	r0, r0
   d5b48:	f004 fafe 	bl	da148 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5b4c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5b50:	4629      	mov	r1, r5
   d5b52:	b280      	uxth	r0, r0
   d5b54:	f004 fb09 	bl	da16a <digitalWrite>
   d5b58:	e766      	b.n	d5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5b5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5b5c:	b118      	cbz	r0, d5b66 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5b5e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5b62:	f003 fc09 	bl	d9378 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5b66:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5b6a:	2100      	movs	r1, #0
   d5b6c:	b280      	uxth	r0, r0
   d5b6e:	f004 fafc 	bl	da16a <digitalWrite>
   d5b72:	e780      	b.n	d5a76 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5b74:	4a1e      	ldr	r2, [pc, #120]	; (d5bf0 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5b76:	4293      	cmp	r3, r2
   d5b78:	d10e      	bne.n	d5b98 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5b7a:	491e      	ldr	r1, [pc, #120]	; (d5bf4 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5b7c:	2203      	movs	r2, #3
   d5b7e:	4620      	mov	r0, r4
   d5b80:	f7ff fe8b 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5b84:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5b88:	2b01      	cmp	r3, #1
   d5b8a:	bf0c      	ite	eq
   d5b8c:	219f      	moveq	r1, #159	; 0x9f
   d5b8e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5b90:	4620      	mov	r0, r4
   d5b92:	f7ff fe1b 	bl	d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d5b96:	e795      	b.n	d5ac4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5b98:	4a17      	ldr	r2, [pc, #92]	; (d5bf8 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5b9a:	4293      	cmp	r3, r2
   d5b9c:	d192      	bne.n	d5ac4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5b9e:	4917      	ldr	r1, [pc, #92]	; (d5bfc <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5ba0:	2203      	movs	r2, #3
   d5ba2:	4620      	mov	r0, r4
   d5ba4:	f7ff fe79 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5ba8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5bac:	2b01      	cmp	r3, #1
   d5bae:	bf0c      	ite	eq
   d5bb0:	2110      	moveq	r1, #16
   d5bb2:	21af      	movne	r1, #175	; 0xaf
   d5bb4:	e7ec      	b.n	d5b90 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5bb6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5bba:	2101      	movs	r1, #1
   d5bbc:	b280      	uxth	r0, r0
   d5bbe:	f004 fad4 	bl	da16a <digitalWrite>
   d5bc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5bc4:	2800      	cmp	r0, #0
   d5bc6:	d095      	beq.n	d5af4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5bc8:	f003 fbbc 	bl	d9344 <_ZN8SPIClass14endTransactionEv>
   d5bcc:	e792      	b.n	d5af4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5bce:	bf00      	nop
   d5bd0:	000dda8c 	.word	0x000dda8c
   d5bd4:	000dd7cc 	.word	0x000dd7cc
   d5bd8:	000ddcd4 	.word	0x000ddcd4
   d5bdc:	000ddcd8 	.word	0x000ddcd8
   d5be0:	000ddcdc 	.word	0x000ddcdc
   d5be4:	00200080 	.word	0x00200080
   d5be8:	000ddce6 	.word	0x000ddce6
   d5bec:	000ddce0 	.word	0x000ddce0
   d5bf0:	00400080 	.word	0x00400080
   d5bf4:	000ddcea 	.word	0x000ddcea
   d5bf8:	00100060 	.word	0x00100060
   d5bfc:	000ddced 	.word	0x000ddced

000d5c00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5c00:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5c02:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5c04:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5c08:	db3d      	blt.n	d5c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5c0a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5c0e:	4294      	cmp	r4, r2
   d5c10:	dd39      	ble.n	d5c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5c12:	2900      	cmp	r1, #0
      w += x;
   d5c14:	bfbe      	ittt	lt
   d5c16:	185b      	addlt	r3, r3, r1
   d5c18:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5c1a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5c1c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5c20:	18ce      	adds	r6, r1, r3
   d5c22:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5c24:	bfc4      	itt	gt
   d5c26:	1a63      	subgt	r3, r4, r1
   d5c28:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5c2a:	2b00      	cmp	r3, #0
   d5c2c:	dd2b      	ble.n	d5c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5c2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5c30:	10d6      	asrs	r6, r2, #3
   d5c32:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5c36:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5c38:	f002 0007 	and.w	r0, r2, #7
   d5c3c:	2201      	movs	r2, #1
   d5c3e:	4082      	lsls	r2, r0
      switch(color) {
   d5c40:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5c42:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5c44:	d016      	beq.n	d5c74 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5c46:	2d02      	cmp	r5, #2
   d5c48:	d00b      	beq.n	d5c62 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5c4a:	b9e5      	cbnz	r5, d5c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5c4c:	43d2      	mvns	r2, r2
   d5c4e:	b2d2      	uxtb	r2, r2
   d5c50:	440b      	add	r3, r1
   d5c52:	4299      	cmp	r1, r3
   d5c54:	d017      	beq.n	d5c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5c56:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5c5a:	4010      	ands	r0, r2
   d5c5c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5c60:	e7f7      	b.n	d5c52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5c62:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5c64:	4299      	cmp	r1, r3
   d5c66:	d00e      	beq.n	d5c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5c68:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5c6c:	4050      	eors	r0, r2
   d5c6e:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5c72:	e7f7      	b.n	d5c64 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5c74:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5c76:	4299      	cmp	r1, r3
   d5c78:	d005      	beq.n	d5c86 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5c7a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5c7e:	4310      	orrs	r0, r2
   d5c80:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5c84:	e7f7      	b.n	d5c76 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5c86:	bd70      	pop	{r4, r5, r6, pc}

000d5c88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5c88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5c8a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5c8c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5c90:	db76      	blt.n	d5d80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5c92:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5c96:	42a9      	cmp	r1, r5
   d5c98:	da72      	bge.n	d5d80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5c9a:	2a00      	cmp	r2, #0
      __h += __y;
   d5c9c:	bfbc      	itt	lt
   d5c9e:	18d2      	addlt	r2, r2, r3
   d5ca0:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5ca2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5ca6:	bfb8      	it	lt
   d5ca8:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5caa:	18d7      	adds	r7, r2, r3
   d5cac:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5cae:	bfc4      	itt	gt
   d5cb0:	1aa3      	subgt	r3, r4, r2
   d5cb2:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5cb4:	2b00      	cmp	r3, #0
   d5cb6:	dd63      	ble.n	d5d80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5cb8:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5cbc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5cbe:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5cc2:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5cc6:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5cc8:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5ccc:	d023      	beq.n	d5d16 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5cce:	f1c2 0208 	rsb	r2, r2, #8
   d5cd2:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5cd4:	4d2c      	ldr	r5, [pc, #176]	; (d5d88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5cd6:	4293      	cmp	r3, r2
   d5cd8:	bf3c      	itt	cc
   d5cda:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5cde:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5ce2:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5ce4:	bf3c      	itt	cc
   d5ce6:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5cea:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5cee:	2e01      	cmp	r6, #1
   d5cf0:	d007      	beq.n	d5d02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5cf2:	2e02      	cmp	r6, #2
   d5cf4:	d02e      	beq.n	d5d54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5cf6:	b94e      	cbnz	r6, d5d0c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5cf8:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5cfc:	ea2c 0505 	bic.w	r5, ip, r5
   d5d00:	e003      	b.n	d5d0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5d02:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5d06:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5d0a:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5d0c:	4293      	cmp	r3, r2
   d5d0e:	d337      	bcc.n	d5d80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5d10:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5d14:	440c      	add	r4, r1
        h -= mod;
   d5d16:	1a9a      	subs	r2, r3, r2
   d5d18:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5d1a:	2a07      	cmp	r2, #7
   d5d1c:	d90e      	bls.n	d5d3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5d1e:	2e02      	cmp	r6, #2
   d5d20:	d11d      	bne.n	d5d5e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5d22:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5d24:	7821      	ldrb	r1, [r4, #0]
   d5d26:	43c9      	mvns	r1, r1
   d5d28:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5d2a:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5d2c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5d30:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5d32:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5d34:	440c      	add	r4, r1
            } while(h >= 8);
   d5d36:	d8f5      	bhi.n	d5d24 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5d38:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5d3c:	b302      	cbz	r2, d5d80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5d3e:	4b13      	ldr	r3, [pc, #76]	; (d5d8c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5d40:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5d42:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5d44:	d019      	beq.n	d5d7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5d46:	2e02      	cmp	r6, #2
   d5d48:	d01b      	beq.n	d5d82 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5d4a:	b9ce      	cbnz	r6, d5d80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5d4c:	7822      	ldrb	r2, [r4, #0]
   d5d4e:	ea22 0303 	bic.w	r3, r2, r3
   d5d52:	e014      	b.n	d5d7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5d54:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5d58:	ea85 050c 	eor.w	r5, r5, ip
   d5d5c:	e7d5      	b.n	d5d0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5d5e:	2e00      	cmp	r6, #0
   d5d60:	bf14      	ite	ne
   d5d62:	25ff      	movne	r5, #255	; 0xff
   d5d64:	2500      	moveq	r5, #0
   d5d66:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5d68:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5d6a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5d6c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5d70:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5d72:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5d74:	440c      	add	r4, r1
            } while(h >= 8);
   d5d76:	d8f7      	bhi.n	d5d68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5d78:	e7de      	b.n	d5d38 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5d7a:	7822      	ldrb	r2, [r4, #0]
   d5d7c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5d7e:	7023      	strb	r3, [r4, #0]
}
   d5d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5d82:	7822      	ldrb	r2, [r4, #0]
   d5d84:	4053      	eors	r3, r2
   d5d86:	e7fa      	b.n	d5d7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5d88:	000ddcc4 	.word	0x000ddcc4
   d5d8c:	000ddccc 	.word	0x000ddccc

000d5d90 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5d90:	b470      	push	{r4, r5, r6}
   d5d92:	4614      	mov	r4, r2
  switch(rotation) {
   d5d94:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5d96:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5d9a:	2a02      	cmp	r2, #2
   d5d9c:	d00d      	beq.n	d5dba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5d9e:	2a03      	cmp	r2, #3
   d5da0:	d018      	beq.n	d5dd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5da2:	2a01      	cmp	r2, #1
   d5da4:	d111      	bne.n	d5dca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5da6:	8902      	ldrh	r2, [r0, #8]
   d5da8:	43e4      	mvns	r4, r4
   d5daa:	4414      	add	r4, r2
   d5dac:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5dae:	9603      	str	r6, [sp, #12]
   d5db0:	460a      	mov	r2, r1
   d5db2:	4621      	mov	r1, r4
}
   d5db4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5db6:	f7ff bf67 	b.w	d5c88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5dba:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5dbc:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5dbe:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5dc0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5dc2:	4414      	add	r4, r2
    x -= (w-1);
   d5dc4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5dc6:	b224      	sxth	r4, r4
    x -= (w-1);
   d5dc8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5dca:	9603      	str	r6, [sp, #12]
   d5dcc:	4622      	mov	r2, r4
}
   d5dce:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5dd0:	f7ff bf16 	b.w	d5c00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5dd4:	8945      	ldrh	r5, [r0, #10]
   d5dd6:	4419      	add	r1, r3
   d5dd8:	1a69      	subs	r1, r5, r1
   d5dda:	b209      	sxth	r1, r1
    break;
   d5ddc:	e7e7      	b.n	d5dae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5dde <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5dde:	b430      	push	{r4, r5}
   d5de0:	4614      	mov	r4, r2
  switch(rotation) {
   d5de2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5de4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5de8:	2a02      	cmp	r2, #2
   d5dea:	d00d      	beq.n	d5e08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5dec:	2a03      	cmp	r2, #3
   d5dee:	d018      	beq.n	d5e22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5df0:	2a01      	cmp	r2, #1
   d5df2:	d111      	bne.n	d5e18 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5df4:	18e2      	adds	r2, r4, r3
   d5df6:	8904      	ldrh	r4, [r0, #8]
   d5df8:	1aa4      	subs	r4, r4, r2
   d5dfa:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5dfc:	9502      	str	r5, [sp, #8]
   d5dfe:	460a      	mov	r2, r1
   d5e00:	4621      	mov	r1, r4
}
   d5e02:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5e04:	f7ff befc 	b.w	d5c00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5e08:	8902      	ldrh	r2, [r0, #8]
   d5e0a:	43c9      	mvns	r1, r1
   d5e0c:	4411      	add	r1, r2
    y -= (h-1);
   d5e0e:	18e2      	adds	r2, r4, r3
   d5e10:	8944      	ldrh	r4, [r0, #10]
   d5e12:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5e14:	b209      	sxth	r1, r1
    y -= (h-1);
   d5e16:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5e18:	9502      	str	r5, [sp, #8]
   d5e1a:	4622      	mov	r2, r4
}
   d5e1c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5e1e:	f7ff bf33 	b.w	d5c88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5e22:	8942      	ldrh	r2, [r0, #10]
   d5e24:	43c9      	mvns	r1, r1
   d5e26:	4411      	add	r1, r2
   d5e28:	b209      	sxth	r1, r1
    break;
   d5e2a:	e7e7      	b.n	d5dfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5e2c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e30:	4604      	mov	r4, r0
  TRANSACTION_START
   d5e32:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5e34:	2800      	cmp	r0, #0
   d5e36:	d042      	beq.n	d5ebe <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5e38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5e3a:	f002 ff67 	bl	d8d0c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5e3e:	4947      	ldr	r1, [pc, #284]	; (d5f5c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5e40:	2205      	movs	r2, #5
   d5e42:	4620      	mov	r0, r4
   d5e44:	f7ff fd29 	bl	d589a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5e48:	7a21      	ldrb	r1, [r4, #8]
   d5e4a:	3901      	subs	r1, #1
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	b2c9      	uxtb	r1, r1
   d5e50:	f7ff fcbc 	bl	d57cc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5e54:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5e58:	1dde      	adds	r6, r3, #7
   d5e5a:	bf48      	it	mi
   d5e5c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5e60:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5e64:	8923      	ldrh	r3, [r4, #8]
   d5e66:	10f6      	asrs	r6, r6, #3
   d5e68:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5e6c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5e70:	2800      	cmp	r0, #0
   d5e72:	d03a      	beq.n	d5eea <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5e74:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5e78:	f002 ff56 	bl	d8d28 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5e7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e7e:	6803      	ldr	r3, [r0, #0]
   d5e80:	2140      	movs	r1, #64	; 0x40
   d5e82:	689b      	ldr	r3, [r3, #8]
   d5e84:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5e86:	2701      	movs	r7, #1
    while(count--) {
   d5e88:	42b5      	cmp	r5, r6
   d5e8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e8c:	d024      	beq.n	d5ed8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5e8e:	2f1f      	cmp	r7, #31
   d5e90:	d90c      	bls.n	d5eac <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5e92:	f002 ff50 	bl	d8d36 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5e96:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5e9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e9c:	f002 ff44 	bl	d8d28 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5ea0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5ea2:	6803      	ldr	r3, [r0, #0]
   d5ea4:	2140      	movs	r1, #64	; 0x40
   d5ea6:	689b      	ldr	r3, [r3, #8]
   d5ea8:	4798      	blx	r3
        bytesOut = 1;
   d5eaa:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5eac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5eae:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5eb2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5eb4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5eb6:	689b      	ldr	r3, [r3, #8]
   d5eb8:	4798      	blx	r3
      bytesOut++;
   d5eba:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5ebc:	e7e4      	b.n	d5e88 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5ec0:	b118      	cbz	r0, d5eca <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5ec2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5ec6:	f003 fa57 	bl	d9378 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5eca:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5ece:	2100      	movs	r1, #0
   d5ed0:	b280      	uxth	r0, r0
   d5ed2:	f004 f94a 	bl	da16a <digitalWrite>
   d5ed6:	e7b2      	b.n	d5e3e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5ed8:	f002 ff2d 	bl	d8d36 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5edc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5ede:	b378      	cbz	r0, d5f40 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5ee0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5ee2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5ee6:	f002 bf11 	b.w	d8d0c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5eea:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5eee:	2101      	movs	r1, #1
   d5ef0:	b280      	uxth	r0, r0
   d5ef2:	f004 f93a 	bl	da16a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5ef6:	42b5      	cmp	r5, r6
   d5ef8:	d0f0      	beq.n	d5edc <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5efa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5efc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5f00:	b118      	cbz	r0, d5f0a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5f02:	4649      	mov	r1, r9
   d5f04:	f003 faa6 	bl	d9454 <_ZN8SPIClass8transferEh>
   d5f08:	e7f5      	b.n	d5ef6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5f0a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5f0c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5f10:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5f14:	ea09 0108 	and.w	r1, r9, r8
   d5f18:	b280      	uxth	r0, r0
   d5f1a:	f004 f926 	bl	da16a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5f1e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5f22:	2101      	movs	r1, #1
   d5f24:	b280      	uxth	r0, r0
   d5f26:	f004 f920 	bl	da16a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5f2a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5f2e:	2100      	movs	r1, #0
   d5f30:	b280      	uxth	r0, r0
   d5f32:	f004 f91a 	bl	da16a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5f36:	3f01      	subs	r7, #1
   d5f38:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5f3c:	d1e8      	bne.n	d5f10 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5f3e:	e7da      	b.n	d5ef6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5f40:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5f44:	2101      	movs	r1, #1
   d5f46:	b280      	uxth	r0, r0
   d5f48:	f004 f90f 	bl	da16a <digitalWrite>
   d5f4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5f4e:	b118      	cbz	r0, d5f58 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5f50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5f54:	f003 b9f6 	b.w	d9344 <_ZN8SPIClass14endTransactionEv>
}
   d5f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5f5c:	000ddcf0 	.word	0x000ddcf0

000d5f60 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5f60:	2100      	movs	r1, #0
   d5f62:	220a      	movs	r2, #10
   d5f64:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5f68:	4770      	bx	lr

000d5f6a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5f6a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5f6c:	b510      	push	{r4, lr}
   d5f6e:	4604      	mov	r4, r0
    this->pin = pin;
   d5f70:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5f72:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5f74:	b288      	uxth	r0, r1
   d5f76:	f004 f911 	bl	da19c <digitalRead>
   d5f7a:	b108      	cbz	r0, d5f80 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5f7c:	2303      	movs	r3, #3
   d5f7e:	71a3      	strb	r3, [r4, #6]
   d5f80:	f001 ff66 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5f84:	6020      	str	r0, [r4, #0]
#endif
}
   d5f86:	bd10      	pop	{r4, pc}

000d5f88 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5f88:	b538      	push	{r3, r4, r5, lr}
   d5f8a:	460c      	mov	r4, r1
   d5f8c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5f8e:	4611      	mov	r1, r2
   d5f90:	b2a0      	uxth	r0, r4
   d5f92:	f004 f8d9 	bl	da148 <pinMode>
  
  this->attach(pin);
   d5f96:	4621      	mov	r1, r4
   d5f98:	4628      	mov	r0, r5
}
   d5f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5f9e:	f7ff bfe4 	b.w	d5f6a <_ZN8Debounce6attachEi>

000d5fa2 <_ZN3GpsC1EP11USARTSerial>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
   d5fa2:	b538      	push	{r3, r4, r5, lr}
   d5fa4:	4604      	mov	r4, r0
   d5fa6:	460d      	mov	r5, r1
   d5fa8:	f000 fa1c 	bl	d63e4 <_ZN9NmeaCacheC1Ev>
   d5fac:	2300      	movs	r3, #0
   d5fae:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
{
    this->_serial = serial;
   d5fb2:	6725      	str	r5, [r4, #112]	; 0x70
Gps::Gps(USARTSerial* serial)
   d5fb4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
};
   d5fb8:	4620      	mov	r0, r4
   d5fba:	bd38      	pop	{r3, r4, r5, pc}

000d5fbc <_ZN3Gps11sendCommandEPKc>:
{
    this->_serial->end();
}

void Gps::sendCommand(const char* data)
{
   d5fbc:	b508      	push	{r3, lr}
    this->_serial->println(data);
   d5fbe:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5fc0:	f003 f83b 	bl	d903a <_ZN5Print7printlnEPKc>
    delay(250);
}
   d5fc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(250);
   d5fc8:	20fa      	movs	r0, #250	; 0xfa
   d5fca:	f002 ba17 	b.w	d83fc <delay>
	...

000d5fd0 <_ZN3Gps5beginEm>:
{
   d5fd0:	b510      	push	{r4, lr}
   d5fd2:	4604      	mov	r4, r0
    this->_serial->begin(baud);
   d5fd4:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5fd6:	f003 fed7 	bl	d9d88 <_ZN11USARTSerial5beginEm>
    this->_serial->blockOnOverrun(true);
   d5fda:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d5fdc:	6803      	ldr	r3, [r0, #0]
   d5fde:	2101      	movs	r1, #1
   d5fe0:	6a1b      	ldr	r3, [r3, #32]
   d5fe2:	4798      	blx	r3
    this->sendCommand(PMTK_SET_BAUD_9600);
   d5fe4:	4620      	mov	r0, r4
   d5fe6:	490c      	ldr	r1, [pc, #48]	; (d6018 <_ZN3Gps5beginEm+0x48>)
   d5fe8:	f7ff ffe8 	bl	d5fbc <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
   d5fec:	4620      	mov	r0, r4
   d5fee:	490b      	ldr	r1, [pc, #44]	; (d601c <_ZN3Gps5beginEm+0x4c>)
   d5ff0:	f7ff ffe4 	bl	d5fbc <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	490a      	ldr	r1, [pc, #40]	; (d6020 <_ZN3Gps5beginEm+0x50>)
   d5ff8:	f7ff ffe0 	bl	d5fbc <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	4909      	ldr	r1, [pc, #36]	; (d6024 <_ZN3Gps5beginEm+0x54>)
   d6000:	f7ff ffdc 	bl	d5fbc <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_ENABLE_WAAS);
   d6004:	4620      	mov	r0, r4
   d6006:	4908      	ldr	r1, [pc, #32]	; (d6028 <_ZN3Gps5beginEm+0x58>)
   d6008:	f7ff ffd8 	bl	d5fbc <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PGCMD_ANTENNA);
   d600c:	4620      	mov	r0, r4
   d600e:	4907      	ldr	r1, [pc, #28]	; (d602c <_ZN3Gps5beginEm+0x5c>)
};
   d6010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->sendCommand(PGCMD_ANTENNA);
   d6014:	f7ff bfd2 	b.w	d5fbc <_ZN3Gps11sendCommandEPKc>
   d6018:	000ddcf5 	.word	0x000ddcf5
   d601c:	000ddd06 	.word	0x000ddd06
   d6020:	000ddd17 	.word	0x000ddd17
   d6024:	000ddd30 	.word	0x000ddd30
   d6028:	000ddd62 	.word	0x000ddd62
   d602c:	000ddd70 	.word	0x000ddd70

000d6030 <_ZN3Gps11clearBufferEv>:
    }
}

void Gps::clearBuffer()
{
    for(int i = 0; i < BUFFER_SIZE; i++)
   d6030:	2300      	movs	r3, #0
    {
        this->_buffer[i] = 0;
   d6032:	4619      	mov	r1, r3
   d6034:	18c2      	adds	r2, r0, r3
    for(int i = 0; i < BUFFER_SIZE; i++)
   d6036:	3301      	adds	r3, #1
   d6038:	2b80      	cmp	r3, #128	; 0x80
        this->_buffer[i] = 0;
   d603a:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    for(int i = 0; i < BUFFER_SIZE; i++)
   d603e:	d1f9      	bne.n	d6034 <_ZN3Gps11clearBufferEv+0x4>
    }
}
   d6040:	4770      	bx	lr
	...

000d6044 <_ZN3Gps12onSerialDataEv>:
{
   d6044:	b570      	push	{r4, r5, r6, lr}
   d6046:	4604      	mov	r4, r0
    if (this->_serial->available())
   d6048:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d604a:	6803      	ldr	r3, [r0, #0]
{
   d604c:	b088      	sub	sp, #32
    if (this->_serial->available())
   d604e:	691b      	ldr	r3, [r3, #16]
   d6050:	4798      	blx	r3
   d6052:	b1e8      	cbz	r0, d6090 <_ZN3Gps12onSerialDataEv+0x4c>
        char c = this->_serial->read();
   d6054:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d6056:	6803      	ldr	r3, [r0, #0]
   d6058:	695b      	ldr	r3, [r3, #20]
   d605a:	4798      	blx	r3
        if (!this->_synced && c == '$') this->_synced = true;
   d605c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
        char c = this->_serial->read();
   d6060:	b2c0      	uxtb	r0, r0
        if (!this->_synced && c == '$') this->_synced = true;
   d6062:	b923      	cbnz	r3, d606e <_ZN3Gps12onSerialDataEv+0x2a>
   d6064:	2824      	cmp	r0, #36	; 0x24
   d6066:	bf04      	itt	eq
   d6068:	2301      	moveq	r3, #1
   d606a:	f884 30f8 	strbeq.w	r3, [r4, #248]	; 0xf8
        if (this->_synced)
   d606e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   d6072:	b16b      	cbz	r3, d6090 <_ZN3Gps12onSerialDataEv+0x4c>
            if (this->_bufferIndex > BUFFER_SIZE)
   d6074:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d6078:	2b80      	cmp	r3, #128	; 0x80
   d607a:	dd0b      	ble.n	d6094 <_ZN3Gps12onSerialDataEv+0x50>
                Serial.println("Buffer Overun: '");
   d607c:	f003 ff0c 	bl	d9e98 <_Z16_fetch_usbserialv>
   d6080:	4920      	ldr	r1, [pc, #128]	; (d6104 <_ZN3Gps12onSerialDataEv+0xc0>)
   d6082:	f002 ffda 	bl	d903a <_ZN5Print7printlnEPKc>
                this->_bufferIndex = 0;
   d6086:	2300      	movs	r3, #0
   d6088:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
                this->_synced = false;
   d608c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   d6090:	b008      	add	sp, #32
   d6092:	bd70      	pop	{r4, r5, r6, pc}
                this->_buffer[this->_bufferIndex] =  0;
   d6094:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            else if (c == '\r')
   d6098:	280d      	cmp	r0, #13
                this->_buffer[this->_bufferIndex] =  0;
   d609a:	4423      	add	r3, r4
            else if (c == '\r')
   d609c:	d108      	bne.n	d60b0 <_ZN3Gps12onSerialDataEv+0x6c>
                this->_buffer[this->_bufferIndex] =  0;
   d609e:	2200      	movs	r2, #0
   d60a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                this->_bufferIndex++;
   d60a4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d60a8:	3301      	adds	r3, #1
   d60aa:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
   d60ae:	e7ef      	b.n	d6090 <_ZN3Gps12onSerialDataEv+0x4c>
            else if (c == '\n')
   d60b0:	280a      	cmp	r0, #10
   d60b2:	d124      	bne.n	d60fe <_ZN3Gps12onSerialDataEv+0xba>
                this->_buffer[this->_bufferIndex] =  0;
   d60b4:	2600      	movs	r6, #0
   d60b6:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
                String tempBuffer = String((char*)this->_buffer);
   d60ba:	f104 0174 	add.w	r1, r4, #116	; 0x74
   d60be:	4668      	mov	r0, sp
   d60c0:	f003 fa8b 	bl	d95da <_ZN6StringC1EPKc>
                uint8_t index = this->msgIdToIndex(tempBuffer);
   d60c4:	4669      	mov	r1, sp
   d60c6:	a804      	add	r0, sp, #16
   d60c8:	f003 fac7 	bl	d965a <_ZN6StringC1ERKS_>
   d60cc:	a904      	add	r1, sp, #16
   d60ce:	4620      	mov	r0, r4
   d60d0:	f000 f99a 	bl	d6408 <_ZN9NmeaCache12msgIdToIndexE6String>
   d60d4:	4605      	mov	r5, r0
   d60d6:	a804      	add	r0, sp, #16
   d60d8:	f003 fa34 	bl	d9544 <_ZN6StringD1Ev>
                this->data[index] = tempBuffer;
   d60dc:	b228      	sxth	r0, r5
   d60de:	4669      	mov	r1, sp
   d60e0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   d60e4:	f003 faaa 	bl	d963c <_ZN6StringaSERKS_>
                this->_bufferIndex = 0;
   d60e8:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
                this->clearBuffer();
   d60ec:	4620      	mov	r0, r4
                this->_synced = false;
   d60ee:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
                this->clearBuffer();
   d60f2:	f7ff ff9d 	bl	d6030 <_ZN3Gps11clearBufferEv>
                String tempBuffer = String((char*)this->_buffer);
   d60f6:	4668      	mov	r0, sp
   d60f8:	f003 fa24 	bl	d9544 <_ZN6StringD1Ev>
   d60fc:	e7c8      	b.n	d6090 <_ZN3Gps12onSerialDataEv+0x4c>
                this->_buffer[this->_bufferIndex] = c;
   d60fe:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
   d6102:	e7cf      	b.n	d60a4 <_ZN3Gps12onSerialDataEv+0x60>
   d6104:	000ddd7f 	.word	0x000ddd7f

000d6108 <_ZN4NmeaC1E6Stringh9NmeaCache>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Nmea.h"

Nmea::Nmea(String messageId, uint8_t dataIndex, NmeaCache nmeaCache)
   d6108:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d610c:	4604      	mov	r4, r0
   d610e:	460f      	mov	r7, r1
   d6110:	f104 0814 	add.w	r8, r4, #20
   d6114:	490e      	ldr	r1, [pc, #56]	; (d6150 <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d6116:	4615      	mov	r5, r2
   d6118:	461e      	mov	r6, r3
   d611a:	f003 fa5e 	bl	d95da <_ZN6StringC1EPKc>
   d611e:	490c      	ldr	r1, [pc, #48]	; (d6150 <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d6120:	4640      	mov	r0, r8
   d6122:	f003 fa5a 	bl	d95da <_ZN6StringC1EPKc>
{
    // ***
    // *** Save the Message ID
    // ***
    this->_messageId = messageId;
   d6126:	4639      	mov	r1, r7
   d6128:	4620      	mov	r0, r4
   d612a:	f003 fa87 	bl	d963c <_ZN6StringaSERKS_>
    this->_dataIndex = dataIndex;
    
    // ***
    // *** Make a copy of the data.
    // ***
    this->_data = String(nmeaCache.data[dataIndex]);
   d612e:	eb06 1105 	add.w	r1, r6, r5, lsl #4
    this->_dataIndex = dataIndex;
   d6132:	7425      	strb	r5, [r4, #16]
    this->_data = String(nmeaCache.data[dataIndex]);
   d6134:	4668      	mov	r0, sp
   d6136:	f003 fa90 	bl	d965a <_ZN6StringC1ERKS_>
   d613a:	4669      	mov	r1, sp
   d613c:	4640      	mov	r0, r8
   d613e:	f003 fa97 	bl	d9670 <_ZN6StringaSEOS_>
   d6142:	4668      	mov	r0, sp
   d6144:	f003 f9fe 	bl	d9544 <_ZN6StringD1Ev>
}
   d6148:	4620      	mov	r0, r4
   d614a:	b004      	add	sp, #16
   d614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6150:	000de050 	.word	0x000de050

000d6154 <_ZN4Nmea15extractChecksumEv>:

    return returnValue;
}

uint16_t Nmea::extractChecksum()
{
   d6154:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6156:	b085      	sub	sp, #20
    uint16_t returnValue = 0;
    
    // ***
    // *** Get the position of the last * character.
    // ***
    uint8_t index = this->_data.lastIndexOf("*");
   d6158:	4919      	ldr	r1, [pc, #100]	; (d61c0 <_ZN4Nmea15extractChecksumEv+0x6c>)
{
   d615a:	4605      	mov	r5, r0
    uint8_t index = this->_data.lastIndexOf("*");
   d615c:	f100 0614 	add.w	r6, r0, #20
   d6160:	4668      	mov	r0, sp
   d6162:	f003 fa3a 	bl	d95da <_ZN6StringC1EPKc>
   d6166:	4669      	mov	r1, sp
   d6168:	4630      	mov	r0, r6
   d616a:	f003 fbbc 	bl	d98e6 <_ZNK6String11lastIndexOfERKS_>
   d616e:	4604      	mov	r4, r0
   d6170:	4668      	mov	r0, sp
   d6172:	f003 f9e7 	bl	d9544 <_ZN6StringD1Ev>
    
    // ***
    // *** Check that we have the character and that the string
    // *** is at least two characters longer than the position.
    // ***
    if (index != -1 && this->_data.length() >= (uint16_t)(index + 2))
   d6176:	69eb      	ldr	r3, [r5, #28]
   d6178:	b2e1      	uxtb	r1, r4
   d617a:	1c8f      	adds	r7, r1, #2
   d617c:	429f      	cmp	r7, r3
   d617e:	d81d      	bhi.n	d61bc <_ZN4Nmea15extractChecksumEv+0x68>
    {
        char c1 = this->_data.charAt(index + 1);
   d6180:	3101      	adds	r1, #1
   d6182:	4630      	mov	r0, r6
   d6184:	f003 fb79 	bl	d987a <_ZNK6String6charAtEj>
        char c2 = this->_data.charAt(index + 2);
   d6188:	4639      	mov	r1, r7
        char c1 = this->_data.charAt(index + 1);
   d618a:	4604      	mov	r4, r0
        char c2 = this->_data.charAt(index + 2);
   d618c:	4630      	mov	r0, r6
   d618e:	f003 fb74 	bl	d987a <_ZNK6String6charAtEj>
// ***
uint8_t Nmea::parseHex(char c) 
{
    uint8_t returnValue = 0;

    switch(c)
   d6192:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   d6196:	b2db      	uxtb	r3, r3
   d6198:	2b15      	cmp	r3, #21
   d619a:	bf9c      	itt	ls
   d619c:	4a09      	ldrls	r2, [pc, #36]	; (d61c4 <_ZN4Nmea15extractChecksumEv+0x70>)
   d619e:	5cd3      	ldrbls	r3, [r2, r3]
   d61a0:	f1a0 0031 	sub.w	r0, r0, #49	; 0x31
        char c2 = this->_data.charAt(index + 2);
   d61a4:	bf88      	it	hi
   d61a6:	2300      	movhi	r3, #0
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d61a8:	011a      	lsls	r2, r3, #4
    switch(c)
   d61aa:	b2c3      	uxtb	r3, r0
   d61ac:	2b15      	cmp	r3, #21
   d61ae:	bf9a      	itte	ls
   d61b0:	4904      	ldrls	r1, [pc, #16]	; (d61c4 <_ZN4Nmea15extractChecksumEv+0x70>)
   d61b2:	5cc8      	ldrbls	r0, [r1, r3]
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d61b4:	2000      	movhi	r0, #0
   d61b6:	4410      	add	r0, r2
}
   d61b8:	b005      	add	sp, #20
   d61ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t returnValue = 0;
   d61bc:	2000      	movs	r0, #0
   d61be:	e7fb      	b.n	d61b8 <_ZN4Nmea15extractChecksumEv+0x64>
   d61c0:	000ddd90 	.word	0x000ddd90
   d61c4:	000ddd94 	.word	0x000ddd94

000d61c8 <_ZN4Nmea17calculateChecksumEv>:
{
   d61c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61ca:	b085      	sub	sp, #20
    if (this->_data.startsWith("$"))
   d61cc:	4910      	ldr	r1, [pc, #64]	; (d6210 <_ZN4Nmea17calculateChecksumEv+0x48>)
   d61ce:	f100 0714 	add.w	r7, r0, #20
{
   d61d2:	4606      	mov	r6, r0
    if (this->_data.startsWith("$"))
   d61d4:	4668      	mov	r0, sp
   d61d6:	f003 fa00 	bl	d95da <_ZN6StringC1EPKc>
   d61da:	4669      	mov	r1, sp
   d61dc:	4638      	mov	r0, r7
   d61de:	f003 fb3a 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d61e2:	4604      	mov	r4, r0
   d61e4:	4668      	mov	r0, sp
   d61e6:	f003 f9ad 	bl	d9544 <_ZN6StringD1Ev>
   d61ea:	b174      	cbz	r4, d620a <_ZN4Nmea17calculateChecksumEv+0x42>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d61ec:	2501      	movs	r5, #1
    uint16_t returnValue = 0;
   d61ee:	2400      	movs	r4, #0
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d61f0:	69f3      	ldr	r3, [r6, #28]
   d61f2:	3b03      	subs	r3, #3
   d61f4:	429d      	cmp	r5, r3
   d61f6:	d208      	bcs.n	d620a <_ZN4Nmea17calculateChecksumEv+0x42>
            returnValue ^= this->_data.charAt(i);
   d61f8:	4629      	mov	r1, r5
   d61fa:	4638      	mov	r0, r7
   d61fc:	f003 fb3d 	bl	d987a <_ZNK6String6charAtEj>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6200:	3501      	adds	r5, #1
            returnValue ^= this->_data.charAt(i);
   d6202:	4044      	eors	r4, r0
   d6204:	b2a4      	uxth	r4, r4
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6206:	b2ed      	uxtb	r5, r5
   d6208:	e7f2      	b.n	d61f0 <_ZN4Nmea17calculateChecksumEv+0x28>
}
   d620a:	4620      	mov	r0, r4
   d620c:	b005      	add	sp, #20
   d620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6210:	000ddd92 	.word	0x000ddd92

000d6214 <_ZN4Nmea7isValidEv>:
{
   d6214:	b538      	push	{r3, r4, r5, lr}
    if (this->_data.startsWith(this->_messageId))
   d6216:	4601      	mov	r1, r0
{
   d6218:	4605      	mov	r5, r0
    if (this->_data.startsWith(this->_messageId))
   d621a:	3014      	adds	r0, #20
   d621c:	f003 fb1b 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d6220:	b148      	cbz	r0, d6236 <_ZN4Nmea7isValidEv+0x22>
        uint16_t providedChecksum = this->extractChecksum();
   d6222:	4628      	mov	r0, r5
   d6224:	f7ff ff96 	bl	d6154 <_ZN4Nmea15extractChecksumEv>
   d6228:	4604      	mov	r4, r0
        uint16_t calculatedChecksum = this->calculateChecksum();
   d622a:	4628      	mov	r0, r5
   d622c:	f7ff ffcc 	bl	d61c8 <_ZN4Nmea17calculateChecksumEv>
        returnValue = (providedChecksum == calculatedChecksum);
   d6230:	1a23      	subs	r3, r4, r0
   d6232:	4258      	negs	r0, r3
   d6234:	4158      	adcs	r0, r3
}
   d6236:	bd38      	pop	{r3, r4, r5, pc}

000d6238 <_ZN4Nmea15getNextPositionEm>:

    return returnValue;
}

int32_t Nmea::getNextPosition(uint32_t from)
{
   d6238:	b510      	push	{r4, lr}
   d623a:	b086      	sub	sp, #24
   d623c:	4604      	mov	r4, r0
   d623e:	9101      	str	r1, [sp, #4]
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        returnValue = this->_data.indexOf(",", from);
   d6240:	a802      	add	r0, sp, #8
   d6242:	4908      	ldr	r1, [pc, #32]	; (d6264 <_ZN4Nmea15getNextPositionEm+0x2c>)
   d6244:	f003 f9c9 	bl	d95da <_ZN6StringC1EPKc>
   d6248:	9a01      	ldr	r2, [sp, #4]
   d624a:	a902      	add	r1, sp, #8
   d624c:	f104 0014 	add.w	r0, r4, #20
   d6250:	f003 fb15 	bl	d987e <_ZNK6String7indexOfERKS_j>
   d6254:	4604      	mov	r4, r0
   d6256:	a802      	add	r0, sp, #8
   d6258:	f003 f974 	bl	d9544 <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d625c:	4620      	mov	r0, r4
   d625e:	b006      	add	sp, #24
   d6260:	bd10      	pop	{r4, pc}
   d6262:	bf00      	nop
   d6264:	000dd1a4 	.word	0x000dd1a4

000d6268 <_ZN4Nmea13getNextIsNullEm>:

bool Nmea::getNextIsNull(uint32_t from)
{
   d6268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        String nextChar = String(this->_data.charAt(from + 1));
   d626a:	3101      	adds	r1, #1
   d626c:	3014      	adds	r0, #20
   d626e:	f003 fb04 	bl	d987a <_ZNK6String6charAtEj>
   d6272:	4601      	mov	r1, r0
   d6274:	4668      	mov	r0, sp
   d6276:	f003 fa15 	bl	d96a4 <_ZN6StringC1Ec>
        returnValue = nextChar.equals(",");
   d627a:	4906      	ldr	r1, [pc, #24]	; (d6294 <_ZN4Nmea13getNextIsNullEm+0x2c>)
   d627c:	4668      	mov	r0, sp
   d627e:	f003 fac2 	bl	d9806 <_ZNK6String6equalsEPKc>
   d6282:	4604      	mov	r4, r0
        String nextChar = String(this->_data.charAt(from + 1));
   d6284:	4668      	mov	r0, sp
   d6286:	f003 f95d 	bl	d9544 <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d628a:	1e20      	subs	r0, r4, #0
   d628c:	bf18      	it	ne
   d628e:	2001      	movne	r0, #1
   d6290:	b004      	add	sp, #16
   d6292:	bd10      	pop	{r4, pc}
   d6294:	000dd1a4 	.word	0x000dd1a4

000d6298 <_ZN4Nmea13getNextUint32EmPm>:

int32_t Nmea::getNextUint32(uint32_t from, uint32_t* value)
{
   d6298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d629a:	2300      	movs	r3, #0
   d629c:	6013      	str	r3, [r2, #0]
{
   d629e:	4606      	mov	r6, r0
   d62a0:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d62a2:	f7ff ffc9 	bl	d6238 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d62a6:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d62a8:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d62aa:	d104      	bne.n	d62b6 <_ZN4Nmea13getNextUint32EmPm+0x1e>
    int32_t returnValue = -1;
   d62ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d62b0:	4620      	mov	r0, r4
   d62b2:	b004      	add	sp, #16
   d62b4:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d62b6:	4601      	mov	r1, r0
   d62b8:	4630      	mov	r0, r6
   d62ba:	f7ff ffd5 	bl	d6268 <_ZN4Nmea13getNextIsNullEm>
   d62be:	2800      	cmp	r0, #0
   d62c0:	d1f4      	bne.n	d62ac <_ZN4Nmea13getNextUint32EmPm+0x14>
        returnValue = index + 1;
   d62c2:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toInt();
   d62c4:	4622      	mov	r2, r4
   d62c6:	f106 0114 	add.w	r1, r6, #20
   d62ca:	4668      	mov	r0, sp
   d62cc:	f003 fb30 	bl	d9930 <_ZNK6String9substringEj>
   d62d0:	4668      	mov	r0, sp
   d62d2:	f003 fb34 	bl	d993e <_ZNK6String5toIntEv>
   d62d6:	6028      	str	r0, [r5, #0]
   d62d8:	4668      	mov	r0, sp
   d62da:	f003 f933 	bl	d9544 <_ZN6StringD1Ev>
    return returnValue;
   d62de:	e7e7      	b.n	d62b0 <_ZN4Nmea13getNextUint32EmPm+0x18>

000d62e0 <_ZN4Nmea12getNextUint8EmPh>:

int32_t Nmea::getNextUint8(uint32_t from, uint8_t* value)
{
   d62e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d62e2:	2300      	movs	r3, #0
   d62e4:	7013      	strb	r3, [r2, #0]
{
   d62e6:	4606      	mov	r6, r0
   d62e8:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d62ea:	f7ff ffa5 	bl	d6238 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d62ee:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d62f0:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d62f2:	d104      	bne.n	d62fe <_ZN4Nmea12getNextUint8EmPh+0x1e>
    int32_t returnValue = -1;
   d62f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d62f8:	4620      	mov	r0, r4
   d62fa:	b004      	add	sp, #16
   d62fc:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d62fe:	4601      	mov	r1, r0
   d6300:	4630      	mov	r0, r6
   d6302:	f7ff ffb1 	bl	d6268 <_ZN4Nmea13getNextIsNullEm>
   d6306:	2800      	cmp	r0, #0
   d6308:	d1f4      	bne.n	d62f4 <_ZN4Nmea12getNextUint8EmPh+0x14>
        returnValue = index + 1;
   d630a:	3401      	adds	r4, #1
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
   d630c:	4622      	mov	r2, r4
   d630e:	f106 0114 	add.w	r1, r6, #20
   d6312:	4668      	mov	r0, sp
   d6314:	f003 fb0c 	bl	d9930 <_ZNK6String9substringEj>
   d6318:	4668      	mov	r0, sp
   d631a:	f003 fb10 	bl	d993e <_ZNK6String5toIntEv>
   d631e:	7028      	strb	r0, [r5, #0]
   d6320:	4668      	mov	r0, sp
   d6322:	f003 f90f 	bl	d9544 <_ZN6StringD1Ev>
    return returnValue;
   d6326:	e7e7      	b.n	d62f8 <_ZN4Nmea12getNextUint8EmPh+0x18>

000d6328 <_ZN4Nmea12getNextFloatEmPf>:

int32_t Nmea::getNextFloat(uint32_t from, float* value)
{
   d6328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d632a:	2300      	movs	r3, #0
   d632c:	6013      	str	r3, [r2, #0]
{
   d632e:	4606      	mov	r6, r0
   d6330:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d6332:	f7ff ff81 	bl	d6238 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d6336:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d6338:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d633a:	d104      	bne.n	d6346 <_ZN4Nmea12getNextFloatEmPf+0x1e>
    int32_t returnValue = -1;
   d633c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toFloat();
    }
    
    return returnValue;
}
   d6340:	4620      	mov	r0, r4
   d6342:	b004      	add	sp, #16
   d6344:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d6346:	4601      	mov	r1, r0
   d6348:	4630      	mov	r0, r6
   d634a:	f7ff ff8d 	bl	d6268 <_ZN4Nmea13getNextIsNullEm>
   d634e:	2800      	cmp	r0, #0
   d6350:	d1f4      	bne.n	d633c <_ZN4Nmea12getNextFloatEmPf+0x14>
        returnValue = index + 1;
   d6352:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toFloat();
   d6354:	4622      	mov	r2, r4
   d6356:	f106 0114 	add.w	r1, r6, #20
   d635a:	4668      	mov	r0, sp
   d635c:	f003 fae8 	bl	d9930 <_ZNK6String9substringEj>
   d6360:	4668      	mov	r0, sp
   d6362:	f003 faf1 	bl	d9948 <_ZNK6String7toFloatEv>
   d6366:	4668      	mov	r0, sp
   d6368:	ed85 0a00 	vstr	s0, [r5]
   d636c:	f003 f8ea 	bl	d9544 <_ZN6StringD1Ev>
    return returnValue;
   d6370:	e7e6      	b.n	d6340 <_ZN4Nmea12getNextFloatEmPf+0x18>
	...

000d6374 <_ZN4Nmea13getNextStringEmmP6String>:

int32_t Nmea::getNextString(uint32_t from, uint32_t length, String* value)
{
   d6374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6378:	4698      	mov	r8, r3
   d637a:	460c      	mov	r4, r1
   d637c:	4605      	mov	r5, r0
    int32_t returnValue = -1;
    *value = String("");
   d637e:	4918      	ldr	r1, [pc, #96]	; (d63e0 <_ZN4Nmea13getNextStringEmmP6String+0x6c>)
   d6380:	4668      	mov	r0, sp
{
   d6382:	4616      	mov	r6, r2
    *value = String("");
   d6384:	f003 f929 	bl	d95da <_ZN6StringC1EPKc>
   d6388:	4669      	mov	r1, sp
   d638a:	4640      	mov	r0, r8
   d638c:	f003 f970 	bl	d9670 <_ZN6StringaSEOS_>
   d6390:	4668      	mov	r0, sp
   d6392:	f003 f8d7 	bl	d9544 <_ZN6StringD1Ev>

     // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d6396:	4621      	mov	r1, r4
   d6398:	4628      	mov	r0, r5
   d639a:	f7ff ff4d 	bl	d6238 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d639e:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d63a0:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d63a2:	d105      	bne.n	d63b0 <_ZN4Nmea13getNextStringEmmP6String+0x3c>
    int32_t returnValue = -1;
   d63a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = String(this->_data.substring(index + 1, index + 1 + length));
    }
    
    return returnValue;
   d63a8:	4638      	mov	r0, r7
   d63aa:	b004      	add	sp, #16
   d63ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d63b0:	4601      	mov	r1, r0
   d63b2:	4628      	mov	r0, r5
   d63b4:	f7ff ff58 	bl	d6268 <_ZN4Nmea13getNextIsNullEm>
   d63b8:	2800      	cmp	r0, #0
   d63ba:	d1f3      	bne.n	d63a4 <_ZN4Nmea13getNextStringEmmP6String+0x30>
        returnValue = index + 1;
   d63bc:	1c67      	adds	r7, r4, #1
        *value = String(this->_data.substring(index + 1, index + 1 + length));
   d63be:	3601      	adds	r6, #1
   d63c0:	1933      	adds	r3, r6, r4
   d63c2:	463a      	mov	r2, r7
   d63c4:	f105 0114 	add.w	r1, r5, #20
   d63c8:	4668      	mov	r0, sp
   d63ca:	f003 fa91 	bl	d98f0 <_ZNK6String9substringEjj>
   d63ce:	4669      	mov	r1, sp
   d63d0:	4640      	mov	r0, r8
   d63d2:	f003 f94d 	bl	d9670 <_ZN6StringaSEOS_>
   d63d6:	4668      	mov	r0, sp
   d63d8:	f003 f8b4 	bl	d9544 <_ZN6StringD1Ev>
    return returnValue;
   d63dc:	e7e4      	b.n	d63a8 <_ZN4Nmea13getNextStringEmmP6String+0x34>
   d63de:	bf00      	nop
   d63e0:	000de050 	.word	0x000de050

000d63e4 <_ZN9NmeaCacheC1Ev>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "NmeaCache.h"

NmeaCache::NmeaCache()
   d63e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63e6:	4f07      	ldr	r7, [pc, #28]	; (d6404 <_ZN9NmeaCacheC1Ev+0x20>)
   d63e8:	4604      	mov	r4, r0
   d63ea:	4605      	mov	r5, r0
   d63ec:	f100 0670 	add.w	r6, r0, #112	; 0x70
   d63f0:	4628      	mov	r0, r5
   d63f2:	4639      	mov	r1, r7
   d63f4:	3510      	adds	r5, #16
   d63f6:	f003 f8f0 	bl	d95da <_ZN6StringC1EPKc>
   d63fa:	42ae      	cmp	r6, r5
   d63fc:	d1f8      	bne.n	d63f0 <_ZN9NmeaCacheC1Ev+0xc>
{
}
   d63fe:	4620      	mov	r0, r4
   d6400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6402:	bf00      	nop
   d6404:	000de050 	.word	0x000de050

000d6408 <_ZN9NmeaCache12msgIdToIndexE6String>:

uint8_t NmeaCache::msgIdToIndex(String messageId)
{
   d6408:	b530      	push	{r4, r5, lr}
   d640a:	b085      	sub	sp, #20
   d640c:	460c      	mov	r4, r1
    uint8_t returnValue = 0;
    
    if (messageId.startsWith(NMEA_MSGID_GGA))
   d640e:	4668      	mov	r0, sp
   d6410:	492e      	ldr	r1, [pc, #184]	; (d64cc <_ZN9NmeaCache12msgIdToIndexE6String+0xc4>)
   d6412:	f003 f8e2 	bl	d95da <_ZN6StringC1EPKc>
   d6416:	4669      	mov	r1, sp
   d6418:	4620      	mov	r0, r4
   d641a:	f003 fa1c 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d641e:	4605      	mov	r5, r0
   d6420:	4668      	mov	r0, sp
   d6422:	f003 f88f 	bl	d9544 <_ZN6StringD1Ev>
   d6426:	2d00      	cmp	r5, #0
   d6428:	d146      	bne.n	d64b8 <_ZN9NmeaCache12msgIdToIndexE6String+0xb0>
    {
        returnValue = NMEA_INDEX_GGA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSA))
   d642a:	4929      	ldr	r1, [pc, #164]	; (d64d0 <_ZN9NmeaCache12msgIdToIndexE6String+0xc8>)
   d642c:	4668      	mov	r0, sp
   d642e:	f003 f8d4 	bl	d95da <_ZN6StringC1EPKc>
   d6432:	4669      	mov	r1, sp
   d6434:	4620      	mov	r0, r4
   d6436:	f003 fa0e 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d643a:	4605      	mov	r5, r0
   d643c:	4668      	mov	r0, sp
   d643e:	f003 f881 	bl	d9544 <_ZN6StringD1Ev>
   d6442:	2d00      	cmp	r5, #0
   d6444:	d13a      	bne.n	d64bc <_ZN9NmeaCache12msgIdToIndexE6String+0xb4>
    {
        returnValue = NMEA_INDEX_GSA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSV))
   d6446:	4923      	ldr	r1, [pc, #140]	; (d64d4 <_ZN9NmeaCache12msgIdToIndexE6String+0xcc>)
   d6448:	4668      	mov	r0, sp
   d644a:	f003 f8c6 	bl	d95da <_ZN6StringC1EPKc>
   d644e:	4669      	mov	r1, sp
   d6450:	4620      	mov	r0, r4
   d6452:	f003 fa00 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d6456:	4605      	mov	r5, r0
   d6458:	4668      	mov	r0, sp
   d645a:	f003 f873 	bl	d9544 <_ZN6StringD1Ev>
   d645e:	bb7d      	cbnz	r5, d64c0 <_ZN9NmeaCache12msgIdToIndexE6String+0xb8>
    {
        returnValue = NMEA_INDEX_GSV;
    }
    else if (messageId.startsWith(NMEA_MSGID_RMC))
   d6460:	491d      	ldr	r1, [pc, #116]	; (d64d8 <_ZN9NmeaCache12msgIdToIndexE6String+0xd0>)
   d6462:	4668      	mov	r0, sp
   d6464:	f003 f8b9 	bl	d95da <_ZN6StringC1EPKc>
   d6468:	4669      	mov	r1, sp
   d646a:	4620      	mov	r0, r4
   d646c:	f003 f9f3 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d6470:	4605      	mov	r5, r0
   d6472:	4668      	mov	r0, sp
   d6474:	f003 f866 	bl	d9544 <_ZN6StringD1Ev>
   d6478:	bb25      	cbnz	r5, d64c4 <_ZN9NmeaCache12msgIdToIndexE6String+0xbc>
    {
        returnValue = NMEA_INDEX_RMC;
    }
    else if (messageId.startsWith(NMEA_MSGID_VTG))
   d647a:	4918      	ldr	r1, [pc, #96]	; (d64dc <_ZN9NmeaCache12msgIdToIndexE6String+0xd4>)
   d647c:	4668      	mov	r0, sp
   d647e:	f003 f8ac 	bl	d95da <_ZN6StringC1EPKc>
   d6482:	4669      	mov	r1, sp
   d6484:	4620      	mov	r0, r4
   d6486:	f003 f9e6 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d648a:	4605      	mov	r5, r0
   d648c:	4668      	mov	r0, sp
   d648e:	f003 f859 	bl	d9544 <_ZN6StringD1Ev>
   d6492:	b9cd      	cbnz	r5, d64c8 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    {
        returnValue = NMEA_INDEX_VTG;
    }
    else if (messageId.startsWith(NMEA_MSGID_PGT))
   d6494:	4912      	ldr	r1, [pc, #72]	; (d64e0 <_ZN9NmeaCache12msgIdToIndexE6String+0xd8>)
   d6496:	4668      	mov	r0, sp
   d6498:	f003 f89f 	bl	d95da <_ZN6StringC1EPKc>
   d649c:	4669      	mov	r1, sp
   d649e:	4620      	mov	r0, r4
   d64a0:	f003 f9d9 	bl	d9856 <_ZNK6String10startsWithERKS_>
   d64a4:	4604      	mov	r4, r0
   d64a6:	4668      	mov	r0, sp
   d64a8:	f003 f84c 	bl	d9544 <_ZN6StringD1Ev>
   d64ac:	2c00      	cmp	r4, #0
    {
        returnValue = NMEA_INDEX_PGT;
   d64ae:	bf18      	it	ne
   d64b0:	2406      	movne	r4, #6
    }
    
    return returnValue;
   d64b2:	4620      	mov	r0, r4
   d64b4:	b005      	add	sp, #20
   d64b6:	bd30      	pop	{r4, r5, pc}
        returnValue = NMEA_INDEX_GGA;
   d64b8:	2401      	movs	r4, #1
   d64ba:	e7fa      	b.n	d64b2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSA;
   d64bc:	2402      	movs	r4, #2
   d64be:	e7f8      	b.n	d64b2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSV;
   d64c0:	2403      	movs	r4, #3
   d64c2:	e7f6      	b.n	d64b2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_RMC;
   d64c4:	2404      	movs	r4, #4
   d64c6:	e7f4      	b.n	d64b2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_VTG;
   d64c8:	2405      	movs	r4, #5
   d64ca:	e7f2      	b.n	d64b2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
   d64cc:	000dddaa 	.word	0x000dddaa
   d64d0:	000dddb1 	.word	0x000dddb1
   d64d4:	000dddb8 	.word	0x000dddb8
   d64d8:	000dddbf 	.word	0x000dddbf
   d64dc:	000dddc6 	.word	0x000dddc6
   d64e0:	000dddcd 	.word	0x000dddcd

000d64e4 <_ZN5Pgtop5parseEv>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
{
}

bool Pgtop::parse()
{
   d64e4:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d64e6:	1d06      	adds	r6, r0, #4
{
   d64e8:	4604      	mov	r4, r0
    if (this->isValid())
   d64ea:	4630      	mov	r0, r6
   d64ec:	f7ff fe92 	bl	d6214 <_ZN4Nmea7isValidEv>
   d64f0:	4605      	mov	r5, r0
   d64f2:	b158      	cbz	r0, d650c <_ZN5Pgtop5parseEv+0x28>
    {
        // ***
        // *** Get the first field value (Command ID).
        // ***
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d64f4:	f104 0228 	add.w	r2, r4, #40	; 0x28
   d64f8:	2100      	movs	r1, #0
   d64fa:	4630      	mov	r0, r6
   d64fc:	f7ff fecc 	bl	d6298 <_ZN4Nmea13getNextUint32EmPm>
        
        // ***
        // *** Get the next field value (Reference).
        // ***
        index = getNextUint32(index, &this->reference);
   d6500:	f104 022c 	add.w	r2, r4, #44	; 0x2c
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d6504:	4601      	mov	r1, r0
        index = getNextUint32(index, &this->reference);
   d6506:	4630      	mov	r0, r6
   d6508:	f7ff fec6 	bl	d6298 <_ZN4Nmea13getNextUint32EmPm>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d650c:	4628      	mov	r0, r5
   d650e:	bd70      	pop	{r4, r5, r6, pc}

000d6510 <_ZN3Gga5parseEv>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
{
}

bool Gga::parse()
{
   d6510:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d6512:	1d05      	adds	r5, r0, #4
{
   d6514:	4604      	mov	r4, r0
    if (this->isValid())
   d6516:	4628      	mov	r0, r5
   d6518:	f7ff fe7c 	bl	d6214 <_ZN4Nmea7isValidEv>
   d651c:	4606      	mov	r6, r0
   d651e:	2800      	cmp	r0, #0
   d6520:	d055      	beq.n	d65ce <_ZN3Gga5parseEv+0xbe>
    {
        // ***
        // *** Get the first field value (UTC Time).
        // ***
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d6522:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d6526:	220a      	movs	r2, #10
   d6528:	2100      	movs	r1, #0
   d652a:	4628      	mov	r0, r5
   d652c:	f7ff ff22 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Latitude).
        // ***
        index = this->getNextString(index, 9,  &this->latitude);
   d6530:	f104 0338 	add.w	r3, r4, #56	; 0x38
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d6534:	4601      	mov	r1, r0
        index = this->getNextString(index, 9,  &this->latitude);
   d6536:	2209      	movs	r2, #9
   d6538:	4628      	mov	r0, r5
   d653a:	f7ff ff1b 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (North/South Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d653e:	f104 0348 	add.w	r3, r4, #72	; 0x48
        index = this->getNextString(index, 9,  &this->latitude);
   d6542:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d6544:	2201      	movs	r2, #1
   d6546:	4628      	mov	r0, r5
   d6548:	f7ff ff14 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Longitude).
        // ***
        index = this->getNextString(index, 10,  &this->longitude);
   d654c:	f104 0358 	add.w	r3, r4, #88	; 0x58
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d6550:	4601      	mov	r1, r0
        index = this->getNextString(index, 10,  &this->longitude);
   d6552:	220a      	movs	r2, #10
   d6554:	4628      	mov	r0, r5
   d6556:	f7ff ff0d 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d655a:	f104 0368 	add.w	r3, r4, #104	; 0x68
        index = this->getNextString(index, 10,  &this->longitude);
   d655e:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d6560:	2201      	movs	r2, #1
   d6562:	4628      	mov	r0, r5
   d6564:	f7ff ff06 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Position Fix Indicator).
        // ***
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d6568:	f104 0278 	add.w	r2, r4, #120	; 0x78
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d656c:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d656e:	4628      	mov	r0, r5
   d6570:	f7ff feb6 	bl	d62e0 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextUint8(index, &this->satellitesUsed);
   d6574:	f104 0279 	add.w	r2, r4, #121	; 0x79
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d6578:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->satellitesUsed);
   d657a:	4628      	mov	r0, r5
   d657c:	f7ff feb0 	bl	d62e0 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->hdop);
   d6580:	f104 027c 	add.w	r2, r4, #124	; 0x7c
        index = this->getNextUint8(index, &this->satellitesUsed);
   d6584:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->hdop);
   d6586:	4628      	mov	r0, r5
   d6588:	f7ff fece 	bl	d6328 <_ZN4Nmea12getNextFloatEmPf>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->altitude);
   d658c:	f104 0280 	add.w	r2, r4, #128	; 0x80
        index = this->getNextFloat(index, &this->hdop);
   d6590:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->altitude);
   d6592:	4628      	mov	r0, r5
   d6594:	f7ff fec8 	bl	d6328 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d6598:	f104 0384 	add.w	r3, r4, #132	; 0x84
        index = this->getNextFloat(index, &this->altitude);
   d659c:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d659e:	2201      	movs	r2, #1
   d65a0:	4628      	mov	r0, r5
   d65a2:	f7ff fee7 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d65a6:	f104 0294 	add.w	r2, r4, #148	; 0x94
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d65aa:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d65ac:	4628      	mov	r0, r5
   d65ae:	f7ff febb 	bl	d6328 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d65b2:	f104 0398 	add.w	r3, r4, #152	; 0x98
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d65b6:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d65b8:	2201      	movs	r2, #1
   d65ba:	4628      	mov	r0, r5
   d65bc:	f7ff feda 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d65c0:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d65c4:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d65c6:	2201      	movs	r2, #1
   d65c8:	4628      	mov	r0, r5
   d65ca:	f7ff fed3 	bl	d6374 <_ZN4Nmea13getNextStringEmmP6String>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d65ce:	4630      	mov	r0, r6
   d65d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d65d4 <_ZN5PgtopC1E9NmeaCache>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
   d65d4:	b530      	push	{r4, r5, lr}
   d65d6:	b0a1      	sub	sp, #132	; 0x84
   d65d8:	4604      	mov	r4, r0
   d65da:	460d      	mov	r5, r1
   d65dc:	4668      	mov	r0, sp
   d65de:	490c      	ldr	r1, [pc, #48]	; (d6610 <_ZN5PgtopC1E9NmeaCache+0x3c>)
   d65e0:	f002 fffb 	bl	d95da <_ZN6StringC1EPKc>
   d65e4:	4629      	mov	r1, r5
   d65e6:	a804      	add	r0, sp, #16
   d65e8:	f7fd feed 	bl	d43c6 <_ZN9NmeaCacheC1ERKS_>
   d65ec:	ab04      	add	r3, sp, #16
   d65ee:	2206      	movs	r2, #6
   d65f0:	4669      	mov	r1, sp
   d65f2:	1d20      	adds	r0, r4, #4
   d65f4:	f7ff fd88 	bl	d6108 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d65f8:	a804      	add	r0, sp, #16
   d65fa:	f7fd fed7 	bl	d43ac <_ZN9NmeaCacheD1Ev>
   d65fe:	4668      	mov	r0, sp
   d6600:	f002 ffa0 	bl	d9544 <_ZN6StringD1Ev>
   d6604:	4b03      	ldr	r3, [pc, #12]	; (d6614 <_ZN5PgtopC1E9NmeaCache+0x40>)
   d6606:	6023      	str	r3, [r4, #0]
}
   d6608:	4620      	mov	r0, r4
   d660a:	b021      	add	sp, #132	; 0x84
   d660c:	bd30      	pop	{r4, r5, pc}
   d660e:	bf00      	nop
   d6610:	000dddcd 	.word	0x000dddcd
   d6614:	000ddde8 	.word	0x000ddde8

000d6618 <_ZN3GgaC1E9NmeaCache>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
   d6618:	b530      	push	{r4, r5, lr}
   d661a:	b0a1      	sub	sp, #132	; 0x84
   d661c:	4604      	mov	r4, r0
   d661e:	460d      	mov	r5, r1
   d6620:	4668      	mov	r0, sp
   d6622:	4920      	ldr	r1, [pc, #128]	; (d66a4 <_ZN3GgaC1E9NmeaCache+0x8c>)
   d6624:	f002 ffd9 	bl	d95da <_ZN6StringC1EPKc>
   d6628:	4629      	mov	r1, r5
   d662a:	a804      	add	r0, sp, #16
   d662c:	f7fd fecb 	bl	d43c6 <_ZN9NmeaCacheC1ERKS_>
   d6630:	2201      	movs	r2, #1
   d6632:	ab04      	add	r3, sp, #16
   d6634:	4669      	mov	r1, sp
   d6636:	1d20      	adds	r0, r4, #4
   d6638:	f7ff fd66 	bl	d6108 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d663c:	a804      	add	r0, sp, #16
   d663e:	f7fd feb5 	bl	d43ac <_ZN9NmeaCacheD1Ev>
   d6642:	4668      	mov	r0, sp
   d6644:	4d18      	ldr	r5, [pc, #96]	; (d66a8 <_ZN3GgaC1E9NmeaCache+0x90>)
   d6646:	f002 ff7d 	bl	d9544 <_ZN6StringD1Ev>
   d664a:	4620      	mov	r0, r4
   d664c:	4b17      	ldr	r3, [pc, #92]	; (d66ac <_ZN3GgaC1E9NmeaCache+0x94>)
   d664e:	f840 3b28 	str.w	r3, [r0], #40
   d6652:	4629      	mov	r1, r5
   d6654:	f002 ffc1 	bl	d95da <_ZN6StringC1EPKc>
   d6658:	4629      	mov	r1, r5
   d665a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d665e:	f002 ffbc 	bl	d95da <_ZN6StringC1EPKc>
   d6662:	4629      	mov	r1, r5
   d6664:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6668:	f002 ffb7 	bl	d95da <_ZN6StringC1EPKc>
   d666c:	4629      	mov	r1, r5
   d666e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d6672:	f002 ffb2 	bl	d95da <_ZN6StringC1EPKc>
   d6676:	4629      	mov	r1, r5
   d6678:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d667c:	f002 ffad 	bl	d95da <_ZN6StringC1EPKc>
   d6680:	4629      	mov	r1, r5
   d6682:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d6686:	f002 ffa8 	bl	d95da <_ZN6StringC1EPKc>
   d668a:	4629      	mov	r1, r5
   d668c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d6690:	f002 ffa3 	bl	d95da <_ZN6StringC1EPKc>
   d6694:	4629      	mov	r1, r5
   d6696:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d669a:	f002 ff9e 	bl	d95da <_ZN6StringC1EPKc>
}
   d669e:	4620      	mov	r0, r4
   d66a0:	b021      	add	sp, #132	; 0x84
   d66a2:	bd30      	pop	{r4, r5, pc}
   d66a4:	000dddaa 	.word	0x000dddaa
   d66a8:	000de050 	.word	0x000de050
   d66ac:	000ddddc 	.word	0x000ddddc

000d66b0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d66b0:	b510      	push	{r4, lr}
   d66b2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d66b4:	3024      	adds	r0, #36	; 0x24
   d66b6:	f000 fe77 	bl	d73a8 <_ZN8FatCache4syncEv>
   d66ba:	b128      	cbz	r0, d66c8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d66bc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d66c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d66c4:	f000 be70 	b.w	d73a8 <_ZN8FatCache4syncEv>
  }
   d66c8:	bd10      	pop	{r4, pc}

000d66ca <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d66ca:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d66cc:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d66ce:	f043 0304 	orr.w	r3, r3, #4
   d66d2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d66d4:	f100 0210 	add.w	r2, r0, #16
   d66d8:	6880      	ldr	r0, [r0, #8]
   d66da:	f000 bf1b 	b.w	d7514 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d66e0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d66e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d66e4:	7801      	ldrb	r1, [r0, #0]
   d66e6:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d66ea:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d66ec:	d003      	beq.n	d66f6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d66ee:	2600      	movs	r6, #0
}
   d66f0:	4630      	mov	r0, r6
   d66f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d66f6:	6942      	ldr	r2, [r0, #20]
   d66f8:	4b17      	ldr	r3, [pc, #92]	; (d6758 <_ZN7FatFile13addDirClusterEv+0x78>)
   d66fa:	429a      	cmp	r2, r3
   d66fc:	d2f7      	bcs.n	d66ee <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d66fe:	f7ff ffe4 	bl	d66ca <_ZN7FatFile10addClusterEv>
   d6702:	4606      	mov	r6, r0
   d6704:	2800      	cmp	r0, #0
   d6706:	d0f2      	beq.n	d66ee <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6708:	6921      	ldr	r1, [r4, #16]
   d670a:	68a0      	ldr	r0, [r4, #8]
   d670c:	f000 fe97 	bl	d743e <_ZNK9FatVolume17clusterFirstBlockEm>
   d6710:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6712:	68a0      	ldr	r0, [r4, #8]
   d6714:	2205      	movs	r2, #5
   d6716:	4639      	mov	r1, r7
   d6718:	3024      	adds	r0, #36	; 0x24
   d671a:	f000 fe6d 	bl	d73f8 <_ZN8FatCache4readEmh>
  if (!pc) {
   d671e:	4680      	mov	r8, r0
   d6720:	2800      	cmp	r0, #0
   d6722:	d0e4      	beq.n	d66ee <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d6724:	4629      	mov	r1, r5
   d6726:	f44f 7200 	mov.w	r2, #512	; 0x200
   d672a:	f004 fc7c 	bl	db026 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d672e:	2501      	movs	r5, #1
   d6730:	68a3      	ldr	r3, [r4, #8]
   d6732:	791a      	ldrb	r2, [r3, #4]
   d6734:	42aa      	cmp	r2, r5
   d6736:	d909      	bls.n	d674c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d6738:	6818      	ldr	r0, [r3, #0]
   d673a:	4642      	mov	r2, r8
   d673c:	19e9      	adds	r1, r5, r7
   d673e:	f001 f9c4 	bl	d7aca <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6742:	2800      	cmp	r0, #0
   d6744:	d0d3      	beq.n	d66ee <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6746:	3501      	adds	r5, #1
   d6748:	b2ed      	uxtb	r5, r5
   d674a:	e7f1      	b.n	d6730 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d674c:	6963      	ldr	r3, [r4, #20]
   d674e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6752:	6163      	str	r3, [r4, #20]
  return true;
   d6754:	e7cc      	b.n	d66f0 <_ZN7FatFile13addDirClusterEv+0x10>
   d6756:	bf00      	nop
   d6758:	001ffe00 	.word	0x001ffe00

000d675c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d675c:	b510      	push	{r4, lr}
   d675e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d6760:	6880      	ldr	r0, [r0, #8]
   d6762:	460a      	mov	r2, r1
   d6764:	3024      	adds	r0, #36	; 0x24
   d6766:	69a1      	ldr	r1, [r4, #24]
   d6768:	f000 fe46 	bl	d73f8 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d676c:	b120      	cbz	r0, d6778 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d676e:	88a3      	ldrh	r3, [r4, #4]
   d6770:	f003 030f 	and.w	r3, r3, #15
   d6774:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d6778:	bd10      	pop	{r4, pc}

000d677a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d677a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d677c:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d677e:	4605      	mov	r5, r0
   d6780:	460e      	mov	r6, r1
  if (isOpen()) {
   d6782:	b94c      	cbnz	r4, d6798 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d6784:	2224      	movs	r2, #36	; 0x24
   d6786:	4621      	mov	r1, r4
   d6788:	f004 fc4d 	bl	db026 <memset>

  m_vol = vol;
   d678c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d678e:	79f3      	ldrb	r3, [r6, #7]
   d6790:	2b10      	cmp	r3, #16
   d6792:	d003      	beq.n	d679c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d6794:	2b20      	cmp	r3, #32
   d6796:	d007      	beq.n	d67a8 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d6798:	2000      	movs	r0, #0
   d679a:	e004      	b.n	d67a6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d679c:	2320      	movs	r3, #32
  m_flags = F_READ;
   d679e:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d67a0:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d67a2:	70ac      	strb	r4, [r5, #2]
  return true;
   d67a4:	4620      	mov	r0, r4
}
   d67a6:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d67a8:	2340      	movs	r3, #64	; 0x40
   d67aa:	e7f8      	b.n	d679e <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d67ac <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d67ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d67b0:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d67b2:	4604      	mov	r4, r0
   d67b4:	4688      	mov	r8, r1
   d67b6:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d67b8:	2b00      	cmp	r3, #0
   d67ba:	d05d      	beq.n	d6878 <_ZN7FatFile4readEPvj+0xcc>
   d67bc:	7882      	ldrb	r2, [r0, #2]
   d67be:	07d1      	lsls	r1, r2, #31
   d67c0:	d55a      	bpl.n	d6878 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d67c2:	071a      	lsls	r2, r3, #28
   d67c4:	d52d      	bpl.n	d6822 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d67c6:	69c3      	ldr	r3, [r0, #28]
   d67c8:	6942      	ldr	r2, [r0, #20]
   d67ca:	1a9b      	subs	r3, r3, r2
   d67cc:	429d      	cmp	r5, r3
   d67ce:	bf28      	it	cs
   d67d0:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d67d2:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d67d4:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d67d8:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d67dc:	2e00      	cmp	r6, #0
   d67de:	f000 808f 	beq.w	d6900 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d67e2:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d67e4:	6963      	ldr	r3, [r4, #20]
   d67e6:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d67e8:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d67ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d67ee:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d67f2:	d51f      	bpl.n	d6834 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d67f4:	6a00      	ldr	r0, [r0, #32]
   d67f6:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d67f8:	68a0      	ldr	r0, [r4, #8]
   d67fa:	f1ba 0f00 	cmp.w	sl, #0
   d67fe:	d142      	bne.n	d6886 <_ZN7FatFile4readEPvj+0xda>
   d6800:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6804:	d33f      	bcc.n	d6886 <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d6806:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6808:	4299      	cmp	r1, r3
   d680a:	d03c      	beq.n	d6886 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d680c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6810:	d252      	bcs.n	d68b8 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d6812:	6800      	ldr	r0, [r0, #0]
   d6814:	4642      	mov	r2, r8
   d6816:	f001 f8cf 	bl	d79b8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d681a:	b368      	cbz	r0, d6878 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d681c:	f44f 7700 	mov.w	r7, #512	; 0x200
   d6820:	e044      	b.n	d68ac <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d6822:	069b      	lsls	r3, r3, #26
   d6824:	d5d5      	bpl.n	d67d2 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6826:	6883      	ldr	r3, [r0, #8]
   d6828:	891a      	ldrh	r2, [r3, #8]
   d682a:	6943      	ldr	r3, [r0, #20]
   d682c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d6830:	b29b      	uxth	r3, r3
   d6832:	e7cb      	b.n	d67cc <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6834:	f890 9005 	ldrb.w	r9, [r0, #5]
   d6838:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d683c:	f1ba 0f00 	cmp.w	sl, #0
   d6840:	d108      	bne.n	d6854 <_ZN7FatFile4readEPvj+0xa8>
   d6842:	f1b9 0f00 	cmp.w	r9, #0
   d6846:	d105      	bne.n	d6854 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d6848:	b95b      	cbnz	r3, d6862 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d684a:	0651      	lsls	r1, r2, #25
   d684c:	bf4c      	ite	mi
   d684e:	6a03      	ldrmi	r3, [r0, #32]
   d6850:	6a23      	ldrpl	r3, [r4, #32]
   d6852:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6854:	6921      	ldr	r1, [r4, #16]
   d6856:	68a0      	ldr	r0, [r4, #8]
   d6858:	f000 fdf1 	bl	d743e <_ZNK9FatVolume17clusterFirstBlockEm>
   d685c:	eb09 0100 	add.w	r1, r9, r0
   d6860:	e7ca      	b.n	d67f8 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6862:	6921      	ldr	r1, [r4, #16]
   d6864:	465a      	mov	r2, fp
   d6866:	f000 fdf0 	bl	d744a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d686a:	2800      	cmp	r0, #0
   d686c:	db04      	blt.n	d6878 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d686e:	d1f1      	bne.n	d6854 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d6870:	7823      	ldrb	r3, [r4, #0]
   d6872:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6876:	d143      	bne.n	d6900 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d6878:	7863      	ldrb	r3, [r4, #1]
   d687a:	f043 0302 	orr.w	r3, r3, #2
   d687e:	7063      	strb	r3, [r4, #1]
  return -1;
   d6880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6884:	e03d      	b.n	d6902 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d6886:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d688a:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d688c:	f04f 0200 	mov.w	r2, #0
   d6890:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d6894:	bf28      	it	cs
   d6896:	4637      	movcs	r7, r6
   d6898:	f000 fdae 	bl	d73f8 <_ZN8FatCache4readEmh>
      if (!pc) {
   d689c:	2800      	cmp	r0, #0
   d689e:	d0eb      	beq.n	d6878 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d68a0:	eb00 010a 	add.w	r1, r0, sl
   d68a4:	463a      	mov	r2, r7
   d68a6:	4640      	mov	r0, r8
   d68a8:	f004 fbaf 	bl	db00a <memcpy>
    m_curPosition += n;
   d68ac:	6963      	ldr	r3, [r4, #20]
   d68ae:	443b      	add	r3, r7
    dst += n;
   d68b0:	44b8      	add	r8, r7
    m_curPosition += n;
   d68b2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d68b4:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d68b6:	e791      	b.n	d67dc <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d68b8:	7822      	ldrb	r2, [r4, #0]
   d68ba:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d68bc:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d68c0:	d406      	bmi.n	d68d0 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d68c2:	7902      	ldrb	r2, [r0, #4]
   d68c4:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d68c8:	b2d2      	uxtb	r2, r2
   d68ca:	4592      	cmp	sl, r2
   d68cc:	bf28      	it	cs
   d68ce:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d68d0:	4299      	cmp	r1, r3
      n = 512*nb;
   d68d2:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d68d6:	d208      	bcs.n	d68ea <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d68d8:	68a0      	ldr	r0, [r4, #8]
   d68da:	4653      	mov	r3, sl
   d68dc:	6800      	ldr	r0, [r0, #0]
   d68de:	4642      	mov	r2, r8
   d68e0:	f001 f8b2 	bl	d7a48 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d68e4:	2800      	cmp	r0, #0
   d68e6:	d1e1      	bne.n	d68ac <_ZN7FatFile4readEPvj+0x100>
   d68e8:	e7c6      	b.n	d6878 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d68ea:	4453      	add	r3, sl
   d68ec:	428b      	cmp	r3, r1
   d68ee:	d9f3      	bls.n	d68d8 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d68f0:	3024      	adds	r0, #36	; 0x24
   d68f2:	9101      	str	r1, [sp, #4]
   d68f4:	f000 fd58 	bl	d73a8 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d68f8:	9901      	ldr	r1, [sp, #4]
   d68fa:	2800      	cmp	r0, #0
   d68fc:	d1ec      	bne.n	d68d8 <_ZN7FatFile4readEPvj+0x12c>
   d68fe:	e7bb      	b.n	d6878 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d6900:	1ba8      	subs	r0, r5, r6
}
   d6902:	b003      	add	sp, #12
   d6904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6908 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d6908:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d690a:	2201      	movs	r2, #1
   d690c:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d6910:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d6914:	4604      	mov	r4, r0
   d6916:	f7ff ff49 	bl	d67ac <_ZN7FatFile4readEPvj>
   d691a:	2801      	cmp	r0, #1
   d691c:	bf0a      	itet	eq
   d691e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d6922:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d6926:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d692a:	b002      	add	sp, #8
   d692c:	bd70      	pop	{r4, r5, r6, pc}

000d692e <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d692e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6930:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d6932:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6936:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6938:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d693c:	d000      	beq.n	d6940 <_ZN7FatFile12readDirCacheEb+0x12>
   d693e:	b999      	cbnz	r1, d6968 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d6940:	2201      	movs	r2, #1
   d6942:	f10d 0107 	add.w	r1, sp, #7
   d6946:	4620      	mov	r0, r4
   d6948:	f7ff ff30 	bl	d67ac <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d694c:	b240      	sxtb	r0, r0
   d694e:	2801      	cmp	r0, #1
   d6950:	d002      	beq.n	d6958 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d6952:	2000      	movs	r0, #0
}
   d6954:	b003      	add	sp, #12
   d6956:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d6958:	6963      	ldr	r3, [r4, #20]
   d695a:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d695c:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d695e:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d6960:	3030      	adds	r0, #48	; 0x30
   d6962:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d6966:	e7f5      	b.n	d6954 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d6968:	3320      	adds	r3, #32
   d696a:	e7f7      	b.n	d695c <_ZN7FatFile12readDirCacheEb+0x2e>

000d696c <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d6970:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d6972:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d6974:	4604      	mov	r4, r0
   d6976:	460d      	mov	r5, r1
  if (!isOpen()) {
   d6978:	b162      	cbz	r2, d6994 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d697a:	6940      	ldr	r0, [r0, #20]
   d697c:	4288      	cmp	r0, r1
   d697e:	d002      	beq.n	d6986 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d6980:	b919      	cbnz	r1, d698a <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d6982:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d6984:	6165      	str	r5, [r4, #20]
    return true;
   d6986:	2001      	movs	r0, #1
   d6988:	e006      	b.n	d6998 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d698a:	0716      	lsls	r6, r2, #28
   d698c:	d506      	bpl.n	d699c <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d698e:	69e3      	ldr	r3, [r4, #28]
   d6990:	428b      	cmp	r3, r1
   d6992:	d20b      	bcs.n	d69ac <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d6994:	6127      	str	r7, [r4, #16]
  return false;
   d6996:	2000      	movs	r0, #0
}
   d6998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d699c:	0691      	lsls	r1, r2, #26
   d699e:	d505      	bpl.n	d69ac <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d69a0:	68a3      	ldr	r3, [r4, #8]
   d69a2:	891b      	ldrh	r3, [r3, #8]
   d69a4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d69a8:	d9ec      	bls.n	d6984 <_ZN7FatFile7seekSetEm+0x18>
   d69aa:	e7f3      	b.n	d6994 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d69ac:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d69b0:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d69b4:	1e43      	subs	r3, r0, #1
   d69b6:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d69ba:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d69bc:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d69be:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d69c0:	42b3      	cmp	r3, r6
   d69c2:	d800      	bhi.n	d69c6 <_ZN7FatFile7seekSetEm+0x5a>
   d69c4:	b998      	cbnz	r0, d69ee <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d69c6:	0653      	lsls	r3, r2, #25
   d69c8:	bf4c      	ite	mi
   d69ca:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d69ce:	6a23      	ldrpl	r3, [r4, #32]
   d69d0:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d69d2:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d69d6:	2e00      	cmp	r6, #0
   d69d8:	d0d4      	beq.n	d6984 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d69da:	6921      	ldr	r1, [r4, #16]
   d69dc:	68a0      	ldr	r0, [r4, #8]
   d69de:	4642      	mov	r2, r8
   d69e0:	f000 fd33 	bl	d744a <_ZN9FatVolume6fatGetEmPm>
   d69e4:	2800      	cmp	r0, #0
   d69e6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d69ea:	dcf4      	bgt.n	d69d6 <_ZN7FatFile7seekSetEm+0x6a>
   d69ec:	e7d2      	b.n	d6994 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d69ee:	1af6      	subs	r6, r6, r3
   d69f0:	e7ef      	b.n	d69d2 <_ZN7FatFile7seekSetEm+0x66>

000d69f2 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d69f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69f4:	460f      	mov	r7, r1
   d69f6:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d69f8:	2100      	movs	r1, #0
   d69fa:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d69fc:	4604      	mov	r4, r0
   d69fe:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d6a00:	f004 fb11 	bl	db026 <memset>
  m_vol = dirFile->m_vol;
   d6a04:	68b8      	ldr	r0, [r7, #8]
   d6a06:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d6a08:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6a0a:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d6a0e:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d6a12:	6a3b      	ldr	r3, [r7, #32]
   d6a14:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6a16:	0171      	lsls	r1, r6, #5
   d6a18:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6a1c:	7af3      	ldrb	r3, [r6, #11]
   d6a1e:	071f      	lsls	r7, r3, #28
   d6a20:	d446      	bmi.n	d6ab0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6a22:	1843      	adds	r3, r0, r1
   d6a24:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6a28:	f003 0317 	and.w	r3, r3, #23
   d6a2c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6a2e:	7af2      	ldrb	r2, [r6, #11]
   d6a30:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d6a34:	bf04      	itt	eq
   d6a36:	f043 0308 	orreq.w	r3, r3, #8
   d6a3a:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d6a3c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6a40:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d6a42:	f005 0303 	and.w	r3, r5, #3
   d6a46:	2b01      	cmp	r3, #1
   d6a48:	d02c      	beq.n	d6aa4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d6a4a:	2b02      	cmp	r3, #2
   d6a4c:	d028      	beq.n	d6aa0 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d6a4e:	bb7b      	cbnz	r3, d6ab0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d6a50:	056a      	lsls	r2, r5, #21
   d6a52:	d42d      	bmi.n	d6ab0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d6a54:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d6a56:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d6a58:	78a2      	ldrb	r2, [r4, #2]
   d6a5a:	0793      	lsls	r3, r2, #30
   d6a5c:	d504      	bpl.n	d6a68 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d6a5e:	7823      	ldrb	r3, [r4, #0]
   d6a60:	06df      	lsls	r7, r3, #27
   d6a62:	d425      	bmi.n	d6ab0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d6a64:	07de      	lsls	r6, r3, #31
   d6a66:	d423      	bmi.n	d6ab0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6a68:	11ab      	asrs	r3, r5, #6
   d6a6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6a6e:	f005 0608 	and.w	r6, r5, #8
   d6a72:	4333      	orrs	r3, r6
   d6a74:	4313      	orrs	r3, r2
   d6a76:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d6a78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d6a7a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6a7c:	1843      	adds	r3, r0, r1
   d6a7e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d6a82:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d6a86:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d6a8a:	056a      	lsls	r2, r5, #21
   d6a8c:	d513      	bpl.n	d6ab6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6a8e:	b959      	cbnz	r1, d6aa8 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d6a90:	78a3      	ldrb	r3, [r4, #2]
   d6a92:	f043 0304 	orr.w	r3, r3, #4
   d6a96:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6a98:	046b      	lsls	r3, r5, #17
   d6a9a:	d410      	bmi.n	d6abe <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d6a9c:	2001      	movs	r0, #1
}
   d6a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d6aa0:	2303      	movs	r3, #3
   d6aa2:	e7d8      	b.n	d6a56 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d6aa4:	2302      	movs	r3, #2
   d6aa6:	e7d6      	b.n	d6a56 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6aa8:	f000 fd6f 	bl	d758a <_ZN9FatVolume9freeChainEm>
   d6aac:	2800      	cmp	r0, #0
   d6aae:	d1ef      	bne.n	d6a90 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d6ab0:	2000      	movs	r0, #0
   d6ab2:	7020      	strb	r0, [r4, #0]
  return false;
   d6ab4:	e7f3      	b.n	d6a9e <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d6ab6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6aba:	61e3      	str	r3, [r4, #28]
   d6abc:	e7ec      	b.n	d6a98 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d6abe:	69e1      	ldr	r1, [r4, #28]
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	f7ff ff53 	bl	d696c <_ZN7FatFile7seekSetEm>
   d6ac6:	2800      	cmp	r0, #0
   d6ac8:	d1e8      	bne.n	d6a9c <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d6aca:	e7f1      	b.n	d6ab0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d6acc <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6acc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d6ace:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d6ad0:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6ad2:	b90b      	cbnz	r3, d6ad8 <_ZN7FatFile4syncEv+0xc>
    return true;
   d6ad4:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d6ad6:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6ad8:	7883      	ldrb	r3, [r0, #2]
   d6ada:	075a      	lsls	r2, r3, #29
   d6adc:	d523      	bpl.n	d6b26 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6ade:	2101      	movs	r1, #1
   d6ae0:	f7ff fe3c 	bl	d675c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6ae4:	4605      	mov	r5, r0
   d6ae6:	b928      	cbnz	r0, d6af4 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d6ae8:	7863      	ldrb	r3, [r4, #1]
   d6aea:	f043 0301 	orr.w	r3, r3, #1
   d6aee:	7063      	strb	r3, [r4, #1]
  return false;
   d6af0:	2000      	movs	r0, #0
   d6af2:	e7f0      	b.n	d6ad6 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6af4:	7803      	ldrb	r3, [r0, #0]
   d6af6:	2be5      	cmp	r3, #229	; 0xe5
   d6af8:	d0f6      	beq.n	d6ae8 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d6afa:	7823      	ldrb	r3, [r4, #0]
   d6afc:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6afe:	bf44      	itt	mi
   d6b00:	69e3      	ldrmi	r3, [r4, #28]
   d6b02:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6b04:	8c23      	ldrh	r3, [r4, #32]
   d6b06:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6b08:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6b0a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d6b0c:	4b09      	ldr	r3, [pc, #36]	; (d6b34 <_ZN7FatFile4syncEv+0x68>)
   d6b0e:	681b      	ldr	r3, [r3, #0]
   d6b10:	b12b      	cbz	r3, d6b1e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6b12:	f100 0116 	add.w	r1, r0, #22
   d6b16:	3018      	adds	r0, #24
   d6b18:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6b1a:	8b2b      	ldrh	r3, [r5, #24]
   d6b1c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6b1e:	78a3      	ldrb	r3, [r4, #2]
   d6b20:	f023 0304 	bic.w	r3, r3, #4
   d6b24:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d6b26:	68a0      	ldr	r0, [r4, #8]
   d6b28:	f7ff fdc2 	bl	d66b0 <_ZN9FatVolume9cacheSyncEv>
   d6b2c:	2800      	cmp	r0, #0
   d6b2e:	d0db      	beq.n	d6ae8 <_ZN7FatFile4syncEv+0x1c>
   d6b30:	e7d0      	b.n	d6ad4 <_ZN7FatFile4syncEv+0x8>
   d6b32:	bf00      	nop
   d6b34:	2003e53c 	.word	0x2003e53c

000d6b38 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d6b38:	b510      	push	{r4, lr}
   d6b3a:	4604      	mov	r4, r0
  bool rtn = sync();
   d6b3c:	f7ff ffc6 	bl	d6acc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6b40:	2300      	movs	r3, #0
   d6b42:	7023      	strb	r3, [r4, #0]
}
   d6b44:	bd10      	pop	{r4, pc}

000d6b46 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6b46:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b48:	b093      	sub	sp, #76	; 0x4c
   d6b4a:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6b4c:	2300      	movs	r3, #0
   d6b4e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d6b52:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6b54:	9201      	str	r2, [sp, #4]
   d6b56:	4606      	mov	r6, r0
   d6b58:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d6b5a:	b113      	cbz	r3, d6b62 <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d6b5c:	2000      	movs	r0, #0
}
   d6b5e:	b013      	add	sp, #76	; 0x4c
   d6b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d6b62:	780b      	ldrb	r3, [r1, #0]
   d6b64:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6b68:	d0f8      	beq.n	d6b5c <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d6b6a:	7813      	ldrb	r3, [r2, #0]
   d6b6c:	2b2f      	cmp	r3, #47	; 0x2f
   d6b6e:	d112      	bne.n	d6b96 <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d6b70:	9a01      	ldr	r2, [sp, #4]
   d6b72:	7813      	ldrb	r3, [r2, #0]
   d6b74:	2b2f      	cmp	r3, #47	; 0x2f
   d6b76:	d102      	bne.n	d6b7e <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d6b78:	3201      	adds	r2, #1
   d6b7a:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d6b7c:	e7f8      	b.n	d6b70 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d6b7e:	68a1      	ldr	r1, [r4, #8]
   d6b80:	b91b      	cbnz	r3, d6b8a <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d6b82:	4630      	mov	r0, r6
   d6b84:	f7ff fdf9 	bl	d677a <_ZN7FatFile8openRootEP9FatVolume>
   d6b88:	e7e9      	b.n	d6b5e <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6b8a:	a809      	add	r0, sp, #36	; 0x24
   d6b8c:	f7ff fdf5 	bl	d677a <_ZN7FatFile8openRootEP9FatVolume>
   d6b90:	2800      	cmp	r0, #0
   d6b92:	d0e3      	beq.n	d6b5c <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d6b94:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d6b96:	9801      	ldr	r0, [sp, #4]
   d6b98:	aa01      	add	r2, sp, #4
   d6b9a:	a903      	add	r1, sp, #12
   d6b9c:	f000 f8f6 	bl	d6d8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6ba0:	2800      	cmp	r0, #0
   d6ba2:	d0db      	beq.n	d6b5c <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d6ba4:	9b01      	ldr	r3, [sp, #4]
   d6ba6:	781b      	ldrb	r3, [r3, #0]
   d6ba8:	b19b      	cbz	r3, d6bd2 <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6baa:	2300      	movs	r3, #0
   d6bac:	aa03      	add	r2, sp, #12
   d6bae:	4621      	mov	r1, r4
   d6bb0:	4630      	mov	r0, r6
   d6bb2:	f000 fa1f 	bl	d6ff4 <_ZN7FatFile4openEPS_P7fname_ti>
   d6bb6:	2800      	cmp	r0, #0
   d6bb8:	d0d0      	beq.n	d6b5c <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d6bba:	4635      	mov	r5, r6
   d6bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6bbe:	ac09      	add	r4, sp, #36	; 0x24
   d6bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6bc6:	682b      	ldr	r3, [r5, #0]
   d6bc8:	6023      	str	r3, [r4, #0]
    close();
   d6bca:	4630      	mov	r0, r6
   d6bcc:	f7ff ffb4 	bl	d6b38 <_ZN7FatFile5closeEv>
  while (1) {
   d6bd0:	e7e0      	b.n	d6b94 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d6bd2:	463b      	mov	r3, r7
   d6bd4:	aa03      	add	r2, sp, #12
   d6bd6:	4621      	mov	r1, r4
   d6bd8:	4630      	mov	r0, r6
   d6bda:	f000 fa0b 	bl	d6ff4 <_ZN7FatFile4openEPS_P7fname_ti>
   d6bde:	e7be      	b.n	d6b5e <_ZN7FatFile4openEPS_PKci+0x18>

000d6be0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6be4:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d6be6:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6be8:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d6bea:	4604      	mov	r4, r0
   d6bec:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6bee:	d55b      	bpl.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
   d6bf0:	7883      	ldrb	r3, [r0, #2]
   d6bf2:	079a      	lsls	r2, r3, #30
   d6bf4:	d558      	bpl.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6bf6:	071b      	lsls	r3, r3, #28
   d6bf8:	d451      	bmi.n	d6c9e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6bfa:	6963      	ldr	r3, [r4, #20]
   d6bfc:	43db      	mvns	r3, r3
   d6bfe:	42bb      	cmp	r3, r7
   d6c00:	d352      	bcc.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
   d6c02:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c04:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d6c08:	6966      	ldr	r6, [r4, #20]
   d6c0a:	f1b8 0f00 	cmp.w	r8, #0
   d6c0e:	f000 8091 	beq.w	d6d34 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6c12:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d6c14:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6c16:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6c1a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d6c1e:	d10e      	bne.n	d6c3e <_ZN7FatFile5writeEPKvj+0x5e>
   d6c20:	b96d      	cbnz	r5, d6c3e <_ZN7FatFile5writeEPKvj+0x5e>
   d6c22:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d6c24:	2900      	cmp	r1, #0
   d6c26:	d046      	beq.n	d6cb6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6c28:	4652      	mov	r2, sl
   d6c2a:	f000 fc0e 	bl	d744a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6c2e:	2800      	cmp	r0, #0
   d6c30:	db3a      	blt.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6c32:	d104      	bne.n	d6c3e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6c34:	4620      	mov	r0, r4
   d6c36:	f7ff fd48 	bl	d66ca <_ZN7FatFile10addClusterEv>
   d6c3a:	2800      	cmp	r0, #0
   d6c3c:	d034      	beq.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6c3e:	6921      	ldr	r1, [r4, #16]
   d6c40:	68a0      	ldr	r0, [r4, #8]
   d6c42:	f000 fbfc 	bl	d743e <_ZNK9FatVolume17clusterFirstBlockEm>
   d6c46:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6c48:	68a0      	ldr	r0, [r4, #8]
   d6c4a:	b915      	cbnz	r5, d6c52 <_ZN7FatFile5writeEPKvj+0x72>
   d6c4c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d6c50:	d23f      	bcs.n	d6cd2 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6c52:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d6c56:	4546      	cmp	r6, r8
   d6c58:	bf28      	it	cs
   d6c5a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6c5c:	2d00      	cmp	r5, #0
   d6c5e:	d136      	bne.n	d6cce <_ZN7FatFile5writeEPKvj+0xee>
   d6c60:	6962      	ldr	r2, [r4, #20]
   d6c62:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6c64:	429a      	cmp	r2, r3
   d6c66:	bf34      	ite	cc
   d6c68:	2201      	movcc	r2, #1
   d6c6a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d6c6c:	3024      	adds	r0, #36	; 0x24
   d6c6e:	f000 fbc3 	bl	d73f8 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6c72:	b1c8      	cbz	r0, d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6c74:	4428      	add	r0, r5
   d6c76:	4632      	mov	r2, r6
   d6c78:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6c7a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d6c7c:	f004 f9c5 	bl	db00a <memcpy>
      if (512 == (n + blockOffset)) {
   d6c80:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d6c84:	d104      	bne.n	d6c90 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d6c86:	68a0      	ldr	r0, [r4, #8]
   d6c88:	3024      	adds	r0, #36	; 0x24
   d6c8a:	f000 fb8d 	bl	d73a8 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6c8e:	b158      	cbz	r0, d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6c90:	6963      	ldr	r3, [r4, #20]
   d6c92:	4433      	add	r3, r6
   d6c94:	6163      	str	r3, [r4, #20]
    src += n;
   d6c96:	44b1      	add	r9, r6
    nToWrite -= n;
   d6c98:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d6c9c:	e7b4      	b.n	d6c08 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d6c9e:	69c1      	ldr	r1, [r0, #28]
   d6ca0:	f7ff fe64 	bl	d696c <_ZN7FatFile7seekSetEm>
   d6ca4:	2800      	cmp	r0, #0
   d6ca6:	d1a8      	bne.n	d6bfa <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6ca8:	7863      	ldrb	r3, [r4, #1]
   d6caa:	f043 0301 	orr.w	r3, r3, #1
   d6cae:	7063      	strb	r3, [r4, #1]
  return -1;
   d6cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6cb4:	e050      	b.n	d6d58 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d6cb6:	6a23      	ldr	r3, [r4, #32]
   d6cb8:	b93b      	cbnz	r3, d6cca <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d6cba:	4620      	mov	r0, r4
   d6cbc:	f7ff fd05 	bl	d66ca <_ZN7FatFile10addClusterEv>
   d6cc0:	2800      	cmp	r0, #0
   d6cc2:	d0f1      	beq.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d6cc4:	6923      	ldr	r3, [r4, #16]
   d6cc6:	6223      	str	r3, [r4, #32]
   d6cc8:	e7b9      	b.n	d6c3e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d6cca:	6123      	str	r3, [r4, #16]
   d6ccc:	e7b7      	b.n	d6c3e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6cce:	2201      	movs	r2, #1
   d6cd0:	e7cc      	b.n	d6c6c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d6cd2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6cd6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d6cd8:	d31b      	bcc.n	d6d12 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d6cda:	f890 c004 	ldrb.w	ip, [r0, #4]
   d6cde:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d6ce2:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d6ce4:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d6ce8:	4573      	cmp	r3, lr
   d6cea:	bf28      	it	cs
   d6cec:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6cee:	4291      	cmp	r1, r2
      n = 512*nb;
   d6cf0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6cf4:	d307      	bcc.n	d6d06 <_ZN7FatFile5writeEPKvj+0x126>
   d6cf6:	441a      	add	r2, r3
   d6cf8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d6cfa:	bf82      	ittt	hi
   d6cfc:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d6d00:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6d04:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6d06:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d6d08:	464a      	mov	r2, r9
   d6d0a:	6828      	ldr	r0, [r5, #0]
   d6d0c:	f000 ff53 	bl	d7bb6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d6d10:	e7bd      	b.n	d6c8e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d6d12:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d6d14:	bf02      	ittt	eq
   d6d16:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d6d1a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6d1e:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d6d20:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d6d22:	464a      	mov	r2, r9
   d6d24:	6818      	ldr	r0, [r3, #0]
   d6d26:	f000 fed0 	bl	d7aca <_ZN9SdSpiCard10writeBlockEmPKh>
   d6d2a:	2800      	cmp	r0, #0
   d6d2c:	d0bc      	beq.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d6d2e:	f44f 7600 	mov.w	r6, #512	; 0x200
   d6d32:	e7ad      	b.n	d6c90 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d6d34:	69e2      	ldr	r2, [r4, #28]
   d6d36:	78a3      	ldrb	r3, [r4, #2]
   d6d38:	42b2      	cmp	r2, r6
   d6d3a:	d204      	bcs.n	d6d46 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d6d3c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d6d3e:	f043 0304 	orr.w	r3, r3, #4
   d6d42:	70a3      	strb	r3, [r4, #2]
   d6d44:	e003      	b.n	d6d4e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d6d46:	4a08      	ldr	r2, [pc, #32]	; (d6d68 <_ZN7FatFile5writeEPKvj+0x188>)
   d6d48:	6812      	ldr	r2, [r2, #0]
   d6d4a:	2a00      	cmp	r2, #0
   d6d4c:	d1f7      	bne.n	d6d3e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d6d4e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6d52:	2b00      	cmp	r3, #0
   d6d54:	db02      	blt.n	d6d5c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d6d56:	4638      	mov	r0, r7
}
   d6d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d6d5c:	4620      	mov	r0, r4
   d6d5e:	f7ff feb5 	bl	d6acc <_ZN7FatFile4syncEv>
   d6d62:	2800      	cmp	r0, #0
   d6d64:	d1f7      	bne.n	d6d56 <_ZN7FatFile5writeEPKvj+0x176>
   d6d66:	e79f      	b.n	d6ca8 <_ZN7FatFile5writeEPKvj+0xc8>
   d6d68:	2003e53c 	.word	0x2003e53c

000d6d6c <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6d6c:	1e41      	subs	r1, r0, #1
   d6d6e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d6d72:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6d74:	0842      	lsrs	r2, r0, #1
   d6d76:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d6d7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6d7e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6d82:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6d84:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6d86:	d1f5      	bne.n	d6d74 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d6d88:	4770      	bx	lr
	...

000d6d8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6d90:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6d92:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6d96:	2b20      	cmp	r3, #32
   d6d98:	d0fa      	beq.n	d6d90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6d9a:	4d6b      	ldr	r5, [pc, #428]	; (d6f48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d6d9c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d6d9e:	2400      	movs	r4, #0
    c = path[len];
   d6da0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d6da2:	b1c3      	cbz	r3, d6dd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d6da4:	2b2f      	cmp	r3, #47	; 0x2f
   d6da6:	d016      	beq.n	d6dd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6da8:	2b5c      	cmp	r3, #92	; 0x5c
   d6daa:	d102      	bne.n	d6db2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6dac:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d6dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6db2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d6db6:	b2c0      	uxtb	r0, r0
   d6db8:	281d      	cmp	r0, #29
   d6dba:	d803      	bhi.n	d6dc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d6dbc:	fa25 f000 	lsr.w	r0, r5, r0
   d6dc0:	07c0      	lsls	r0, r0, #31
   d6dc2:	d4f3      	bmi.n	d6dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6dc4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d6dc8:	283c      	cmp	r0, #60	; 0x3c
   d6dca:	d0ef      	beq.n	d6dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6dcc:	3b20      	subs	r3, #32
   d6dce:	2b5e      	cmp	r3, #94	; 0x5e
   d6dd0:	d8ec      	bhi.n	d6dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d6dd2:	3401      	adds	r4, #1
    c = path[len];
   d6dd4:	e7e4      	b.n	d6da0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d6dd6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d6dd8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6dda:	4607      	mov	r7, r0
   d6ddc:	f810 5b01 	ldrb.w	r5, [r0], #1
   d6de0:	2d20      	cmp	r5, #32
   d6de2:	d0fa      	beq.n	d6dda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d6de4:	2d2f      	cmp	r5, #47	; 0x2f
   d6de6:	d0f8      	beq.n	d6dda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6de8:	6017      	str	r7, [r2, #0]
  while (len) {
   d6dea:	b14c      	cbz	r4, d6e00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6dec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6df0:	2a2e      	cmp	r2, #46	; 0x2e
   d6df2:	d001      	beq.n	d6df8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d6df4:	2a20      	cmp	r2, #32
   d6df6:	d101      	bne.n	d6dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d6df8:	3c01      	subs	r4, #1
  while (len) {
   d6dfa:	e7f6      	b.n	d6dea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6dfc:	2cff      	cmp	r4, #255	; 0xff
   d6dfe:	dcd5      	bgt.n	d6dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d6e00:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d6e02:	f101 030d 	add.w	r3, r1, #13
   d6e06:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d6e0a:	2020      	movs	r0, #32
   d6e0c:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6e10:	4293      	cmp	r3, r2
   d6e12:	d1fb      	bne.n	d6e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6e14:	f04f 0800 	mov.w	r8, #0
   d6e18:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6e1c:	2b2e      	cmp	r3, #46	; 0x2e
   d6e1e:	d001      	beq.n	d6e24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6e20:	2b20      	cmp	r3, #32
   d6e22:	d102      	bne.n	d6e2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6e24:	f108 0801 	add.w	r8, r8, #1
   d6e28:	e7f6      	b.n	d6e18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d6e2a:	fab8 f088 	clz	r0, r8
   d6e2e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6e30:	1e65      	subs	r5, r4, #1
   d6e32:	1c6b      	adds	r3, r5, #1
   d6e34:	d002      	beq.n	d6e3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d6e36:	5d73      	ldrb	r3, [r6, r5]
   d6e38:	2b2e      	cmp	r3, #46	; 0x2e
   d6e3a:	d114      	bne.n	d6e66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6e3c:	f04f 0900 	mov.w	r9, #0
   d6e40:	2707      	movs	r7, #7
   d6e42:	464a      	mov	r2, r9
   d6e44:	46ca      	mov	sl, r9
   d6e46:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d6e4a:	45a0      	cmp	r8, r4
   d6e4c:	da69      	bge.n	d6f22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d6e4e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6e52:	2b20      	cmp	r3, #32
   d6e54:	d003      	beq.n	d6e5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d6e56:	2b2e      	cmp	r3, #46	; 0x2e
   d6e58:	d107      	bne.n	d6e6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6e5a:	45a8      	cmp	r8, r5
   d6e5c:	d012      	beq.n	d6e84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6e5e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6e60:	f108 0801 	add.w	r8, r8, #1
   d6e64:	e7f1      	b.n	d6e4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6e66:	3d01      	subs	r5, #1
   d6e68:	e7e3      	b.n	d6e32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d6e6a:	2b22      	cmp	r3, #34	; 0x22
   d6e6c:	d008      	beq.n	d6e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d6e6e:	2b7c      	cmp	r3, #124	; 0x7c
   d6e70:	d006      	beq.n	d6e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6e72:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6e76:	f1bc 0f05 	cmp.w	ip, #5
   d6e7a:	d80b      	bhi.n	d6e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6e7c:	2b2d      	cmp	r3, #45	; 0x2d
   d6e7e:	d013      	beq.n	d6ea8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6e80:	45a8      	cmp	r8, r5
   d6e82:	d15c      	bne.n	d6f3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d6e84:	2f0a      	cmp	r7, #10
   d6e86:	d04b      	beq.n	d6f20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6e88:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6e8a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6e8c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6e8e:	f04f 0e10 	mov.w	lr, #16
   d6e92:	e7e5      	b.n	d6e60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d6e94:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6e98:	f1bc 0f05 	cmp.w	ip, #5
   d6e9c:	d9f0      	bls.n	d6e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d6e9e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6ea2:	f1bc 0f02 	cmp.w	ip, #2
   d6ea6:	d9eb      	bls.n	d6e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d6ea8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6eac:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6eb0:	d8e6      	bhi.n	d6e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d6eb2:	45a8      	cmp	r8, r5
   d6eb4:	d0e6      	beq.n	d6e84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d6eb6:	42ba      	cmp	r2, r7
   d6eb8:	d830      	bhi.n	d6f1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d6eba:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6ebe:	f1bc 0f19 	cmp.w	ip, #25
   d6ec2:	d81a      	bhi.n	d6efa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d6ec4:	3b20      	subs	r3, #32
        lc |= bit;
   d6ec6:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d6eca:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6ecc:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d6ed0:	f102 0c01 	add.w	ip, r2, #1
   d6ed4:	fa5f fc8c 	uxtb.w	ip, ip
   d6ed8:	440a      	add	r2, r1
      if (i < 7) {
   d6eda:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d6ede:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d6ee0:	d801      	bhi.n	d6ee6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d6ee2:	f881 c00c 	strb.w	ip, [r1, #12]
   d6ee6:	4662      	mov	r2, ip
   d6ee8:	e7ba      	b.n	d6e60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6eea:	45a8      	cmp	r8, r5
   d6eec:	dc18      	bgt.n	d6f20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6eee:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6ef0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6ef2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6ef4:	f04f 0e10 	mov.w	lr, #16
   d6ef8:	e7b1      	b.n	d6e5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d6efa:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6efe:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6f02:	bf98      	it	ls
   d6f04:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d6f08:	e7e2      	b.n	d6ed0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d6f0a:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6f0c:	2001      	movs	r0, #1
   d6f0e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6f10:	4419      	add	r1, r3
   d6f12:	237e      	movs	r3, #126	; 0x7e
   d6f14:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6f16:	2331      	movs	r3, #49	; 0x31
   d6f18:	738b      	strb	r3, [r1, #14]
   d6f1a:	e748      	b.n	d6dae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6f1c:	2f0a      	cmp	r7, #10
   d6f1e:	d1e4      	bne.n	d6eea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6f20:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d6f22:	7b4b      	ldrb	r3, [r1, #13]
   d6f24:	2b20      	cmp	r3, #32
   d6f26:	f43f af41 	beq.w	d6dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d6f2a:	2800      	cmp	r0, #0
   d6f2c:	d0ed      	beq.n	d6f0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6f2e:	ea1a 0f09 	tst.w	sl, r9
   d6f32:	bf18      	it	ne
   d6f34:	f04f 0902 	movne.w	r9, #2
   d6f38:	f881 9000 	strb.w	r9, [r1]
   d6f3c:	e737      	b.n	d6dae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d6f3e:	42ba      	cmp	r2, r7
   d6f40:	d8ec      	bhi.n	d6f1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d6f42:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6f44:	2000      	movs	r0, #0
   d6f46:	e7c3      	b.n	d6ed0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6f48:	31000101 	.word	0x31000101

000d6f4c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6f50:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6f54:	4606      	mov	r6, r0
   d6f56:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6f58:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6f5a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6f5c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6f60:	6861      	ldr	r1, [r4, #4]
   d6f62:	68a2      	ldr	r2, [r4, #8]
   d6f64:	186b      	adds	r3, r5, r1
   d6f66:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6f68:	4411      	add	r1, r2
   d6f6a:	4291      	cmp	r1, r2
   d6f6c:	d006      	beq.n	d6f7c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6f6e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6f72:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6f76:	4043      	eors	r3, r0
   d6f78:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6f7a:	e7f6      	b.n	d6f6a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6f7c:	f1b9 0f03 	cmp.w	r9, #3
   d6f80:	bf28      	it	cs
   d6f82:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6f86:	f109 0204 	add.w	r2, r9, #4
   d6f8a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6f8c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6f90:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6f92:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6f94:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6f96:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6f98:	bf94      	ite	ls
   d6f9a:	3130      	addls	r1, #48	; 0x30
   d6f9c:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6f9e:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6fa0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6fa2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6fa6:	d1f1      	bne.n	d6f8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d6fa8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d6fac:	2100      	movs	r1, #0
   d6fae:	735f      	strb	r7, [r3, #13]
   d6fb0:	4630      	mov	r0, r6
   d6fb2:	f7ff fcdb 	bl	d696c <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d6fb6:	2101      	movs	r1, #1
   d6fb8:	4630      	mov	r0, r6
   d6fba:	f7ff fcb8 	bl	d692e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6fbe:	4601      	mov	r1, r0
   d6fc0:	b928      	cbnz	r0, d6fce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6fc2:	7870      	ldrb	r0, [r6, #1]
   d6fc4:	fab0 f080 	clz	r0, r0
   d6fc8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d6fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d6fce:	7803      	ldrb	r3, [r0, #0]
   d6fd0:	b16b      	cbz	r3, d6fee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6fd2:	7ac3      	ldrb	r3, [r0, #11]
   d6fd4:	071b      	lsls	r3, r3, #28
   d6fd6:	d4ee      	bmi.n	d6fb6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6fd8:	220b      	movs	r2, #11
   d6fda:	4640      	mov	r0, r8
   d6fdc:	f004 f807 	bl	dafee <memcmp>
   d6fe0:	2800      	cmp	r0, #0
   d6fe2:	d1e8      	bne.n	d6fb6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d6fe4:	3501      	adds	r5, #1
   d6fe6:	b2ad      	uxth	r5, r5
   d6fe8:	2d64      	cmp	r5, #100	; 0x64
   d6fea:	d1b9      	bne.n	d6f60 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6fec:	e7ed      	b.n	d6fca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d6fee:	2001      	movs	r0, #1
   d6ff0:	e7eb      	b.n	d6fca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d6ff4 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ff8:	ed2d 8b02 	vpush	{d8}
   d6ffc:	b089      	sub	sp, #36	; 0x24
   d6ffe:	460d      	mov	r5, r1
   d7000:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d7002:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d7004:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d7006:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d700a:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d700c:	d105      	bne.n	d701a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d700e:	2000      	movs	r0, #0
}
   d7010:	b009      	add	sp, #36	; 0x24
   d7012:	ecbd 8b02 	vpop	{d8}
   d7016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d701a:	9b06      	ldr	r3, [sp, #24]
   d701c:	781b      	ldrb	r3, [r3, #0]
   d701e:	2b00      	cmp	r3, #0
   d7020:	d1f5      	bne.n	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d7022:	6853      	ldr	r3, [r2, #4]
   d7024:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d7026:	7813      	ldrb	r3, [r2, #0]
   d7028:	0799      	lsls	r1, r3, #30
   d702a:	bf1c      	itt	ne
   d702c:	9b04      	ldrne	r3, [sp, #16]
   d702e:	f103 070c 	addne.w	r7, r3, #12
   d7032:	f04f 0100 	mov.w	r1, #0
   d7036:	bf18      	it	ne
   d7038:	230d      	movne	r3, #13
   d703a:	4628      	mov	r0, r5
   d703c:	bf1d      	ittte	ne
   d703e:	fbb7 f7f3 	udivne	r7, r7, r3
   d7042:	3701      	addne	r7, #1
   d7044:	b2ff      	uxtbne	r7, r7
   d7046:	2701      	moveq	r7, #1
   d7048:	f7ff fc90 	bl	d696c <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d704c:	f108 020d 	add.w	r2, r8, #13
  }
   d7050:	2300      	movs	r3, #0
   d7052:	ee08 2a10 	vmov	s16, r2
   d7056:	469b      	mov	fp, r3
   d7058:	461c      	mov	r4, r3
   d705a:	461e      	mov	r6, r3
   d705c:	9303      	str	r3, [sp, #12]
   d705e:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d7060:	696a      	ldr	r2, [r5, #20]
   d7062:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d7064:	2101      	movs	r1, #1
   d7066:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d7068:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d706c:	f7ff fc5f 	bl	d692e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d7070:	9b07      	ldr	r3, [sp, #28]
   d7072:	2800      	cmp	r0, #0
   d7074:	d16e      	bne.n	d7154 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d7076:	786b      	ldrb	r3, [r5, #1]
   d7078:	2b00      	cmp	r3, #0
   d707a:	d1c8      	bne.n	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d707c:	9b05      	ldr	r3, [sp, #20]
   d707e:	059a      	lsls	r2, r3, #22
   d7080:	d5c5      	bpl.n	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d7082:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d7086:	3b01      	subs	r3, #1
   d7088:	2b01      	cmp	r3, #1
   d708a:	d8c0      	bhi.n	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d708c:	9b03      	ldr	r3, [sp, #12]
   d708e:	2c00      	cmp	r4, #0
   d7090:	bf08      	it	eq
   d7092:	464b      	moveq	r3, r9
   d7094:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d7096:	42bc      	cmp	r4, r7
   d7098:	f0c0 8103 	bcc.w	d72a2 <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d709c:	f1ba 0f00 	cmp.w	sl, #0
   d70a0:	f040 811b 	bne.w	d72da <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d70a4:	9b03      	ldr	r3, [sp, #12]
   d70a6:	4628      	mov	r0, r5
   d70a8:	0159      	lsls	r1, r3, #5
   d70aa:	f7ff fc5f 	bl	d696c <_ZN7FatFile7seekSetEm>
   d70ae:	2800      	cmp	r0, #0
   d70b0:	d0ad      	beq.n	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d70b2:	3f01      	subs	r7, #1
   d70b4:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d70b8:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d70ba:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d70be:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d70c0:	2e00      	cmp	r6, #0
   d70c2:	f000 8121 	beq.w	d7308 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d70c6:	2100      	movs	r1, #0
   d70c8:	4628      	mov	r0, r5
   d70ca:	f7ff fc30 	bl	d692e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d70ce:	4604      	mov	r4, r0
   d70d0:	2800      	cmp	r0, #0
   d70d2:	d09c      	beq.n	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d70d4:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d70d6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d70da:	4556      	cmp	r6, sl
   d70dc:	f043 0301 	orr.w	r3, r3, #1
   d70e0:	bf0c      	ite	eq
   d70e2:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d70e6:	46b3      	movne	fp, r6
   d70e8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d70ec:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d70f0:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d70f2:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d70f6:	f108 000d 	add.w	r0, r8, #13
   d70fa:	f7ff fe37 	bl	d6d6c <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d70fe:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d7102:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d7104:	f884 901a 	strb.w	r9, [r4, #26]
   d7108:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d710c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d7110:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d7112:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d7116:	fb02 f20b 	mul.w	r2, r2, fp
   d711a:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d711c:	9904      	ldr	r1, [sp, #16]
   d711e:	4291      	cmp	r1, r2
   d7120:	f240 80e3 	bls.w	d72ea <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d7124:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d7128:	2b04      	cmp	r3, #4
   d712a:	fa5f fe83 	uxtb.w	lr, r3
   d712e:	f103 0001 	add.w	r0, r3, #1
   d7132:	f200 80e0 	bhi.w	d72f6 <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d7136:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d713a:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d713e:	280d      	cmp	r0, #13
   d7140:	f102 0201 	add.w	r2, r2, #1
   d7144:	4603      	mov	r3, r0
   d7146:	d1e9      	bne.n	d711c <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d7148:	3e01      	subs	r6, #1
   d714a:	b2f6      	uxtb	r6, r6
   d714c:	e7b8      	b.n	d70c0 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d714e:	f04f 0a01 	mov.w	sl, #1
   d7152:	e785      	b.n	d7060 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d7154:	7802      	ldrb	r2, [r0, #0]
   d7156:	2ae5      	cmp	r2, #229	; 0xe5
   d7158:	d000      	beq.n	d715c <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d715a:	b97a      	cbnz	r2, d717c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d715c:	9903      	ldr	r1, [sp, #12]
   d715e:	2c00      	cmp	r4, #0
   d7160:	bf08      	it	eq
   d7162:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d7164:	42bc      	cmp	r4, r7
        freeFound++;
   d7166:	bf38      	it	cc
   d7168:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d716a:	9103      	str	r1, [sp, #12]
        freeFound++;
   d716c:	bf38      	it	cc
   d716e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d7170:	2a00      	cmp	r2, #0
   d7172:	d083      	beq.n	d707c <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d7174:	2ae5      	cmp	r2, #229	; 0xe5
   d7176:	d104      	bne.n	d7182 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d7178:	2600      	movs	r6, #0
   d717a:	e771      	b.n	d7060 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d717c:	42bc      	cmp	r4, r7
   d717e:	bf38      	it	cc
   d7180:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d7182:	2a2e      	cmp	r2, #46	; 0x2e
   d7184:	d0f8      	beq.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d7186:	7ac1      	ldrb	r1, [r0, #11]
   d7188:	290f      	cmp	r1, #15
   d718a:	d15d      	bne.n	d7248 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d718c:	bb3e      	cbnz	r6, d71de <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d718e:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d7192:	f43f af65 	beq.w	d7060 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d7196:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d719a:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d719c:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d719e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d71a2:	f04f 0e0d 	mov.w	lr, #13
   d71a6:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d71aa:	9a04      	ldr	r2, [sp, #16]
   d71ac:	4572      	cmp	r2, lr
   d71ae:	d9e3      	bls.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d71b0:	eba2 020e 	sub.w	r2, r2, lr
   d71b4:	9207      	str	r2, [sp, #28]
   d71b6:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d71ba:	f1bc 0f04 	cmp.w	ip, #4
   d71be:	eb0c 090e 	add.w	r9, ip, lr
   d71c2:	fa5f f28c 	uxtb.w	r2, ip
   d71c6:	d814      	bhi.n	d71f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d71c8:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d71cc:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d71d0:	9907      	ldr	r1, [sp, #28]
   d71d2:	458c      	cmp	ip, r1
   d71d4:	d11b      	bne.n	d720e <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d71d6:	2a00      	cmp	r2, #0
   d71d8:	bf18      	it	ne
   d71da:	2600      	movne	r6, #0
   d71dc:	e740      	b.n	d7060 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d71de:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d71e2:	fa5f fb8b 	uxtb.w	fp, fp
   d71e6:	455a      	cmp	r2, fp
   d71e8:	d1c6      	bne.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d71ea:	7b42      	ldrb	r2, [r0, #13]
   d71ec:	429a      	cmp	r2, r3
   d71ee:	d0d6      	beq.n	d719e <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d71f0:	e7c2      	b.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d71f2:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d71f4:	bf95      	itete	ls
   d71f6:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d71fa:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d71fe:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d7202:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7206:	bf94      	ite	ls
   d7208:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d720a:	8892      	ldrhhi	r2, [r2, #4]
   d720c:	e7e0      	b.n	d71d0 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d720e:	2aff      	cmp	r2, #255	; 0xff
   d7210:	d8b2      	bhi.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d7212:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d7214:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d7218:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d721a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d721e:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d7222:	bf98      	it	ls
   d7224:	3220      	addls	r2, #32
   d7226:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d722a:	bf98      	it	ls
   d722c:	b2d2      	uxtbls	r2, r2
   d722e:	f1b9 0f19 	cmp.w	r9, #25
   d7232:	bf9c      	itt	ls
   d7234:	3120      	addls	r1, #32
   d7236:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d7238:	4291      	cmp	r1, r2
   d723a:	d19d      	bne.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d723c:	f10c 0c01 	add.w	ip, ip, #1
   d7240:	f1bc 0f0d 	cmp.w	ip, #13
   d7244:	d1b9      	bne.n	d71ba <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d7246:	e70b      	b.n	d7060 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d7248:	070a      	lsls	r2, r1, #28
   d724a:	d495      	bmi.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d724c:	b166      	cbz	r6, d7268 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d724e:	f1bb 0f01 	cmp.w	fp, #1
   d7252:	9303      	str	r3, [sp, #12]
   d7254:	f47f aedb 	bne.w	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d7258:	f7ff fd88 	bl	d6d6c <_ZN7FatFile11lfnChecksumEPh>
   d725c:	9b03      	ldr	r3, [sp, #12]
   d725e:	4298      	cmp	r0, r3
   d7260:	f47f aed5 	bne.w	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d7264:	46b2      	mov	sl, r6
   d7266:	e00f      	b.n	d7288 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d7268:	ee18 1a10 	vmov	r1, s16
   d726c:	220b      	movs	r2, #11
   d726e:	9307      	str	r3, [sp, #28]
   d7270:	f003 febd 	bl	dafee <memcmp>
   d7274:	9b07      	ldr	r3, [sp, #28]
   d7276:	2800      	cmp	r0, #0
   d7278:	f47f aef2 	bne.w	d7060 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d727c:	f898 a000 	ldrb.w	sl, [r8]
   d7280:	f01a 0a01 	ands.w	sl, sl, #1
   d7284:	f47f af63 	bne.w	d714e <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d7288:	9b05      	ldr	r3, [sp, #20]
   d728a:	0519      	lsls	r1, r3, #20
   d728c:	f53f aebf 	bmi.w	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d7290:	9b05      	ldr	r3, [sp, #20]
   d7292:	9806      	ldr	r0, [sp, #24]
   d7294:	f8cd a000 	str.w	sl, [sp]
   d7298:	464a      	mov	r2, r9
   d729a:	4629      	mov	r1, r5
   d729c:	f7ff fba9 	bl	d69f2 <_ZN7FatFile15openCachedEntryEPS_tih>
   d72a0:	e6b6      	b.n	d7010 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d72a2:	2100      	movs	r1, #0
   d72a4:	4628      	mov	r0, r5
   d72a6:	f7ff fb42 	bl	d692e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d72aa:	b998      	cbnz	r0, d72d4 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d72ac:	786b      	ldrb	r3, [r5, #1]
   d72ae:	2b00      	cmp	r3, #0
   d72b0:	f47f aead 	bne.w	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d72b4:	4628      	mov	r0, r5
   d72b6:	f7ff fa13 	bl	d66e0 <_ZN7FatFile13addDirClusterEv>
   d72ba:	2800      	cmp	r0, #0
   d72bc:	f43f aea7 	beq.w	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d72c0:	68ab      	ldr	r3, [r5, #8]
   d72c2:	791b      	ldrb	r3, [r3, #4]
   d72c4:	2b01      	cmp	r3, #1
   d72c6:	f63f aee9 	bhi.w	d709c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d72ca:	3410      	adds	r4, #16
   d72cc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d72ce:	42a7      	cmp	r7, r4
   d72d0:	d8f0      	bhi.n	d72b4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d72d2:	e6e3      	b.n	d709c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d72d4:	3401      	adds	r4, #1
   d72d6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d72d8:	e6dd      	b.n	d7096 <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d72da:	4641      	mov	r1, r8
   d72dc:	4628      	mov	r0, r5
   d72de:	f7ff fe35 	bl	d6f4c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d72e2:	2800      	cmp	r0, #0
   d72e4:	f47f aede 	bne.w	d70a4 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d72e8:	e691      	b.n	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d72ea:	bf14      	ite	ne
   d72ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d72f0:	2100      	moveq	r1, #0
   d72f2:	b289      	uxth	r1, r1
   d72f4:	e718      	b.n	d7128 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d72f6:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d72fa:	bf94      	ite	ls
   d72fc:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d7300:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d7304:	8099      	strh	r1, [r3, #4]
   d7306:	e71a      	b.n	d713e <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d7308:	4631      	mov	r1, r6
   d730a:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d730c:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d730e:	f7ff fb0e 	bl	d692e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d7312:	4604      	mov	r4, r0
   d7314:	2800      	cmp	r0, #0
   d7316:	f43f ae7a 	beq.w	d700e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d731a:	2220      	movs	r2, #32
   d731c:	4631      	mov	r1, r6
   d731e:	f003 fe82 	bl	db026 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d7322:	4643      	mov	r3, r8
   d7324:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d7328:	6022      	str	r2, [r4, #0]
   d732a:	685a      	ldr	r2, [r3, #4]
   d732c:	6062      	str	r2, [r4, #4]
   d732e:	891a      	ldrh	r2, [r3, #8]
   d7330:	8122      	strh	r2, [r4, #8]
   d7332:	7a9b      	ldrb	r3, [r3, #10]
   d7334:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d7336:	f898 3000 	ldrb.w	r3, [r8]
   d733a:	f003 0318 	and.w	r3, r3, #24
   d733e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d7340:	4b0f      	ldr	r3, [pc, #60]	; (d7380 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d7342:	681b      	ldr	r3, [r3, #0]
   d7344:	b19b      	cbz	r3, d736e <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d7346:	f104 010e 	add.w	r1, r4, #14
   d734a:	f104 0010 	add.w	r0, r4, #16
   d734e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d7350:	8a23      	ldrh	r3, [r4, #16]
   d7352:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d7354:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d7356:	89e3      	ldrh	r3, [r4, #14]
   d7358:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d735a:	68aa      	ldr	r2, [r5, #8]
   d735c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d7360:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d7364:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d7368:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d736c:	e790      	b.n	d7290 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d736e:	2321      	movs	r3, #33	; 0x21
   d7370:	7423      	strb	r3, [r4, #16]
   d7372:	2328      	movs	r3, #40	; 0x28
   d7374:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d7376:	2308      	movs	r3, #8
   d7378:	73a6      	strb	r6, [r4, #14]
   d737a:	73e3      	strb	r3, [r4, #15]
   d737c:	e7e8      	b.n	d7350 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d737e:	bf00      	nop
   d7380:	2003e53c 	.word	0x2003e53c

000d7384 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7384:	b513      	push	{r0, r1, r4, lr}
   d7386:	4604      	mov	r4, r0
    }
   d7388:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d738a:	b159      	cbz	r1, d73a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d738c:	9101      	str	r1, [sp, #4]
   d738e:	f003 fea6 	bl	db0de <strlen>
   d7392:	6823      	ldr	r3, [r4, #0]
   d7394:	9901      	ldr	r1, [sp, #4]
   d7396:	68db      	ldr	r3, [r3, #12]
   d7398:	4602      	mov	r2, r0
   d739a:	4620      	mov	r0, r4
    }
   d739c:	b002      	add	sp, #8
   d739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d73a2:	4718      	bx	r3
    }
   d73a4:	b002      	add	sp, #8
   d73a6:	bd10      	pop	{r4, pc}

000d73a8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d73a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d73aa:	7803      	ldrb	r3, [r0, #0]
   d73ac:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d73ae:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d73b0:	d520      	bpl.n	d73f4 <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d73b2:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d73b4:	6881      	ldr	r1, [r0, #8]
   d73b6:	f100 020c 	add.w	r2, r0, #12
   d73ba:	6818      	ldr	r0, [r3, #0]
   d73bc:	9201      	str	r2, [sp, #4]
   d73be:	f000 fb84 	bl	d7aca <_ZN9SdSpiCard10writeBlockEmPKh>
   d73c2:	9a01      	ldr	r2, [sp, #4]
   d73c4:	4605      	mov	r5, r0
   d73c6:	b918      	cbnz	r0, d73d0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d73c8:	2500      	movs	r5, #0
}
   d73ca:	4628      	mov	r0, r5
   d73cc:	b003      	add	sp, #12
   d73ce:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d73d0:	7823      	ldrb	r3, [r4, #0]
   d73d2:	079b      	lsls	r3, r3, #30
   d73d4:	d404      	bmi.n	d73e0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d73d6:	7823      	ldrb	r3, [r4, #0]
   d73d8:	f023 0301 	bic.w	r3, r3, #1
   d73dc:	7023      	strb	r3, [r4, #0]
   d73de:	e7f4      	b.n	d73ca <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d73e0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d73e4:	6919      	ldr	r1, [r3, #16]
   d73e6:	4401      	add	r1, r0
   d73e8:	6818      	ldr	r0, [r3, #0]
   d73ea:	f000 fb6e 	bl	d7aca <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d73ee:	2800      	cmp	r0, #0
   d73f0:	d1f1      	bne.n	d73d6 <_ZN8FatCache4syncEv+0x2e>
   d73f2:	e7e9      	b.n	d73c8 <_ZN8FatCache4syncEv+0x20>
  return true;
   d73f4:	2501      	movs	r5, #1
   d73f6:	e7e8      	b.n	d73ca <_ZN8FatCache4syncEv+0x22>

000d73f8 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d73f8:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d73fa:	6883      	ldr	r3, [r0, #8]
   d73fc:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d73fe:	4604      	mov	r4, r0
   d7400:	460e      	mov	r6, r1
   d7402:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7404:	d009      	beq.n	d741a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d7406:	f7ff ffcf 	bl	d73a8 <_ZN8FatCache4syncEv>
   d740a:	b908      	cbnz	r0, d7410 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d740c:	2000      	movs	r0, #0
}
   d740e:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7410:	076b      	lsls	r3, r5, #29
   d7412:	d50a      	bpl.n	d742a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d7414:	2300      	movs	r3, #0
   d7416:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7418:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d741a:	7822      	ldrb	r2, [r4, #0]
   d741c:	f005 0503 	and.w	r5, r5, #3
   d7420:	4620      	mov	r0, r4
   d7422:	4315      	orrs	r5, r2
   d7424:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d7428:	e7f1      	b.n	d740e <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d742a:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d742c:	f104 020c 	add.w	r2, r4, #12
   d7430:	6818      	ldr	r0, [r3, #0]
   d7432:	4631      	mov	r1, r6
   d7434:	f000 fac0 	bl	d79b8 <_ZN9SdSpiCard9readBlockEmPh>
   d7438:	2800      	cmp	r0, #0
   d743a:	d1eb      	bne.n	d7414 <_ZN8FatCache4readEmh+0x1c>
   d743c:	e7e6      	b.n	d740c <_ZN8FatCache4readEmh+0x14>

000d743e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d743e:	7983      	ldrb	r3, [r0, #6]
   d7440:	6940      	ldr	r0, [r0, #20]
   d7442:	3902      	subs	r1, #2
   d7444:	4099      	lsls	r1, r3
}
   d7446:	4408      	add	r0, r1
   d7448:	4770      	bx	lr

000d744a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d744a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d744c:	b570      	push	{r4, r5, r6, lr}
   d744e:	4605      	mov	r5, r0
   d7450:	460c      	mov	r4, r1
   d7452:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d7454:	d802      	bhi.n	d745c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d745a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d745c:	69c3      	ldr	r3, [r0, #28]
   d745e:	428b      	cmp	r3, r1
   d7460:	d3f9      	bcc.n	d7456 <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d7462:	79c3      	ldrb	r3, [r0, #7]
   d7464:	2b20      	cmp	r3, #32
   d7466:	d116      	bne.n	d7496 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d7468:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d746a:	2202      	movs	r2, #2
   d746c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7470:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7474:	f7ff ffc0 	bl	d73f8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7478:	2800      	cmp	r0, #0
   d747a:	d0ec      	beq.n	d7456 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d747c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7480:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d7484:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d7488:	69ea      	ldr	r2, [r5, #28]
   d748a:	429a      	cmp	r2, r3
  *value = next;
   d748c:	bf26      	itte	cs
   d748e:	6033      	strcs	r3, [r6, #0]
  return 1;
   d7490:	2001      	movcs	r0, #1
    return 0;
   d7492:	2000      	movcc	r0, #0
   d7494:	e7e1      	b.n	d745a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d7496:	2b10      	cmp	r3, #16
   d7498:	d1dd      	bne.n	d7456 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d749a:	6983      	ldr	r3, [r0, #24]
   d749c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d74a0:	2202      	movs	r2, #2
   d74a2:	4419      	add	r1, r3
   d74a4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d74a8:	f7ff ffa6 	bl	d73f8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d74ac:	2800      	cmp	r0, #0
   d74ae:	d0d2      	beq.n	d7456 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d74b0:	b2e4      	uxtb	r4, r4
   d74b2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d74b6:	e7e7      	b.n	d7488 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d74b8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d74b8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d74ba:	b538      	push	{r3, r4, r5, lr}
   d74bc:	460c      	mov	r4, r1
   d74be:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d74c0:	d801      	bhi.n	d74c6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d74c2:	2000      	movs	r0, #0
}
   d74c4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d74c6:	69c3      	ldr	r3, [r0, #28]
   d74c8:	428b      	cmp	r3, r1
   d74ca:	d3fa      	bcc.n	d74c2 <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d74cc:	79c3      	ldrb	r3, [r0, #7]
   d74ce:	2b20      	cmp	r3, #32
   d74d0:	d10f      	bne.n	d74f2 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d74d2:	6981      	ldr	r1, [r0, #24]
   d74d4:	2203      	movs	r2, #3
   d74d6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d74da:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d74de:	f7ff ff8b 	bl	d73f8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d74e2:	2800      	cmp	r0, #0
   d74e4:	d0ed      	beq.n	d74c2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d74e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d74ea:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d74ee:	2001      	movs	r0, #1
   d74f0:	e7e8      	b.n	d74c4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d74f2:	2b10      	cmp	r3, #16
   d74f4:	d1e5      	bne.n	d74c2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d74f6:	6983      	ldr	r3, [r0, #24]
   d74f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d74fc:	2203      	movs	r2, #3
   d74fe:	4419      	add	r1, r3
   d7500:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7504:	f7ff ff78 	bl	d73f8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7508:	2800      	cmp	r0, #0
   d750a:	d0da      	beq.n	d74c2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d750c:	b2e4      	uxtb	r4, r4
   d750e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d7512:	e7ec      	b.n	d74ee <_ZN9FatVolume6fatPutEmm+0x36>

000d7514 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d7518:	68c4      	ldr	r4, [r0, #12]
   d751a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d751c:	4605      	mov	r5, r0
   d751e:	460e      	mov	r6, r1
   d7520:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d7522:	d301      	bcc.n	d7528 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d7524:	2701      	movs	r7, #1
   d7526:	e001      	b.n	d752c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7528:	460c      	mov	r4, r1
    setStart = false;
   d752a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d752c:	69eb      	ldr	r3, [r5, #28]
    find++;
   d752e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7530:	42a3      	cmp	r3, r4
   d7532:	d202      	bcs.n	d753a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d7534:	b9c7      	cbnz	r7, d7568 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d7536:	68ec      	ldr	r4, [r5, #12]
   d7538:	e7f4      	b.n	d7524 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d753a:	42a6      	cmp	r6, r4
   d753c:	d014      	beq.n	d7568 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d753e:	aa01      	add	r2, sp, #4
   d7540:	4621      	mov	r1, r4
   d7542:	4628      	mov	r0, r5
   d7544:	f7ff ff81 	bl	d744a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7548:	2800      	cmp	r0, #0
   d754a:	db0d      	blt.n	d7568 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d754c:	d0ee      	beq.n	d752c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d754e:	9b01      	ldr	r3, [sp, #4]
   d7550:	2b00      	cmp	r3, #0
   d7552:	d1eb      	bne.n	d752c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d7554:	b107      	cbz	r7, d7558 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d7556:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7558:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d755c:	4621      	mov	r1, r4
   d755e:	4628      	mov	r0, r5
   d7560:	f7ff ffaa 	bl	d74b8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d7564:	4607      	mov	r7, r0
   d7566:	b920      	cbnz	r0, d7572 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d7568:	2700      	movs	r7, #0
}
   d756a:	4638      	mov	r0, r7
   d756c:	b002      	add	sp, #8
   d756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d7572:	b916      	cbnz	r6, d757a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d7574:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d7578:	e7f7      	b.n	d756a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d757a:	4622      	mov	r2, r4
   d757c:	4631      	mov	r1, r6
   d757e:	4628      	mov	r0, r5
   d7580:	f7ff ff9a 	bl	d74b8 <_ZN9FatVolume6fatPutEmm>
   d7584:	2800      	cmp	r0, #0
   d7586:	d1f5      	bne.n	d7574 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d7588:	e7ee      	b.n	d7568 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d758a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d758a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d758c:	4605      	mov	r5, r0
   d758e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d7590:	aa01      	add	r2, sp, #4
   d7592:	4621      	mov	r1, r4
   d7594:	4628      	mov	r0, r5
   d7596:	f7ff ff58 	bl	d744a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d759a:	1e06      	subs	r6, r0, #0
   d759c:	db10      	blt.n	d75c0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d759e:	2200      	movs	r2, #0
   d75a0:	4621      	mov	r1, r4
   d75a2:	4628      	mov	r0, r5
   d75a4:	f7ff ff88 	bl	d74b8 <_ZN9FatVolume6fatPutEmm>
   d75a8:	b150      	cbz	r0, d75c0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d75aa:	68eb      	ldr	r3, [r5, #12]
   d75ac:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d75ae:	bf24      	itt	cs
   d75b0:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d75b4:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d75b6:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d75b8:	2e00      	cmp	r6, #0
   d75ba:	d1e9      	bne.n	d7590 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d75bc:	b002      	add	sp, #8
   d75be:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d75c0:	2000      	movs	r0, #0
   d75c2:	e7fb      	b.n	d75bc <_ZN9FatVolume9freeChainEm+0x32>

000d75c4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d75c4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d75c6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d75c8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d75ca:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d75cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d75d0:	4604      	mov	r4, r0
  m_fatType = 0;
   d75d2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d75d4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d75d8:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d75da:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d75de:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d75e0:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d75e4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d75e8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d75ec:	460d      	mov	r5, r1
   d75ee:	b1b9      	cbz	r1, d7620 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d75f0:	2904      	cmp	r1, #4
   d75f2:	d901      	bls.n	d75f8 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d75f4:	2000      	movs	r0, #0
}
   d75f6:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d75f8:	4611      	mov	r1, r2
   d75fa:	4630      	mov	r0, r6
   d75fc:	f7ff fefc 	bl	d73f8 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7600:	2800      	cmp	r0, #0
   d7602:	d0f7      	beq.n	d75f4 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7604:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7608:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d760c:	065b      	lsls	r3, r3, #25
   d760e:	d1f1      	bne.n	d75f4 <_ZN9FatVolume4initEh+0x30>
   d7610:	f105 011b 	add.w	r1, r5, #27
   d7614:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d7618:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d761c:	2d00      	cmp	r5, #0
   d761e:	d0e9      	beq.n	d75f4 <_ZN9FatVolume4initEh+0x30>
   d7620:	2200      	movs	r2, #0
   d7622:	4629      	mov	r1, r5
   d7624:	4630      	mov	r0, r6
   d7626:	f7ff fee7 	bl	d73f8 <_ZN8FatCache4readEmh>
  if (!pc) {
   d762a:	2800      	cmp	r0, #0
   d762c:	d0e2      	beq.n	d75f4 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d762e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7636:	d1dd      	bne.n	d75f4 <_ZN9FatVolume4initEh+0x30>
   d7638:	7c03      	ldrb	r3, [r0, #16]
   d763a:	2b02      	cmp	r3, #2
   d763c:	d1da      	bne.n	d75f4 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d763e:	89c3      	ldrh	r3, [r0, #14]
   d7640:	2b00      	cmp	r3, #0
   d7642:	d0d7      	beq.n	d75f4 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d7644:	7b41      	ldrb	r1, [r0, #13]
   d7646:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d7648:	1e4b      	subs	r3, r1, #1
   d764a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d764c:	2300      	movs	r3, #0
   d764e:	71a3      	strb	r3, [r4, #6]
   d7650:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7652:	2301      	movs	r3, #1
   d7654:	4299      	cmp	r1, r3
   d7656:	d007      	beq.n	d7668 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d7658:	3e01      	subs	r6, #1
   d765a:	d0cb      	beq.n	d75f4 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d765c:	79a2      	ldrb	r2, [r4, #6]
   d765e:	005b      	lsls	r3, r3, #1
   d7660:	3201      	adds	r2, #1
   d7662:	b2db      	uxtb	r3, r3
   d7664:	71a2      	strb	r2, [r4, #6]
   d7666:	e7f5      	b.n	d7654 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d7668:	8ac1      	ldrh	r1, [r0, #22]
   d766a:	b901      	cbnz	r1, d766e <_ZN9FatVolume4initEh+0xaa>
   d766c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d766e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7670:	89c3      	ldrh	r3, [r0, #14]
   d7672:	442b      	add	r3, r5
   d7674:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d7676:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d767a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d767c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d7680:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d7682:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d7686:	0149      	lsls	r1, r1, #5
   d7688:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d768c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d7690:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d7692:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d7696:	b902      	cbnz	r2, d769a <_ZN9FatVolume4initEh+0xd6>
   d7698:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d769a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d769c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d769e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d76a0:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d76a2:	1c4b      	adds	r3, r1, #1
   d76a4:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d76a6:	f640 73f4 	movw	r3, #4084	; 0xff4
   d76aa:	4299      	cmp	r1, r3
   d76ac:	d802      	bhi.n	d76b4 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d76ae:	230c      	movs	r3, #12
   d76b0:	71e3      	strb	r3, [r4, #7]
   d76b2:	e79f      	b.n	d75f4 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d76b4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d76b8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d76ba:	bf85      	ittet	hi
   d76bc:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d76be:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d76c0:	2310      	movls	r3, #16
    m_fatType = 32;
   d76c2:	2320      	movhi	r3, #32
   d76c4:	71e3      	strb	r3, [r4, #7]
  return true;
   d76c6:	2001      	movs	r0, #1
   d76c8:	e795      	b.n	d75f6 <_ZN9FatVolume4initEh+0x32>
	...

000d76cc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d76cc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d76ce:	4e0e      	ldr	r6, [pc, #56]	; (d7708 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d76d0:	460d      	mov	r5, r1
   d76d2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d76d4:	f000 fbb4 	bl	d7e40 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d76d8:	6833      	ldr	r3, [r6, #0]
   d76da:	1ac0      	subs	r0, r0, r3
   d76dc:	4b0b      	ldr	r3, [pc, #44]	; (d770c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d76de:	4298      	cmp	r0, r3
   d76e0:	d908      	bls.n	d76f4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d76e2:	f000 fbb5 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d76e6:	4b0a      	ldr	r3, [pc, #40]	; (d7710 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d76e8:	6018      	str	r0, [r3, #0]
    		spark_process();
   d76ea:	f000 fd97 	bl	d821c <spark_process>
   d76ee:	f000 fba7 	bl	d7e40 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d76f2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d76f4:	f000 fbac 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d76f8:	b280      	uxth	r0, r0
   d76fa:	1b40      	subs	r0, r0, r5
}
   d76fc:	42a0      	cmp	r0, r4
   d76fe:	bfd4      	ite	le
   d7700:	2000      	movle	r0, #0
   d7702:	2001      	movgt	r0, #1
   d7704:	bd70      	pop	{r4, r5, r6, pc}
   d7706:	bf00      	nop
   d7708:	2003e544 	.word	0x2003e544
   d770c:	000186a0 	.word	0x000186a0
   d7710:	2003e738 	.word	0x2003e738

000d7714 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7714:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7716:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d7718:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d771a:	b94d      	cbnz	r5, d7730 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d771c:	6840      	ldr	r0, [r0, #4]
   d771e:	f000 fa6b 	bl	d7bf8 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d7722:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7724:	4629      	mov	r1, r5
   d7726:	7d18      	ldrb	r0, [r3, #20]
   d7728:	f002 fd1f 	bl	da16a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d772c:	2301      	movs	r3, #1
   d772e:	7223      	strb	r3, [r4, #8]
  }
}
   d7730:	bd38      	pop	{r3, r4, r5, pc}

000d7732 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7732:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7734:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d7736:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7738:	b16b      	cbz	r3, d7756 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d773a:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d773c:	2101      	movs	r1, #1
   d773e:	7d18      	ldrb	r0, [r3, #20]
   d7740:	f002 fd13 	bl	da16a <digitalWrite>
     m_spiDriver->send(data);
   d7744:	6860      	ldr	r0, [r4, #4]
   d7746:	21ff      	movs	r1, #255	; 0xff
   d7748:	f000 fa88 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d774c:	6860      	ldr	r0, [r4, #4]
   d774e:	f000 fa67 	bl	d7c20 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7752:	2300      	movs	r3, #0
   d7754:	7223      	strb	r3, [r4, #8]
  }
}
   d7756:	bd10      	pop	{r4, pc}

000d7758 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d775a:	4604      	mov	r4, r0
   d775c:	460d      	mov	r5, r1
   d775e:	4616      	mov	r6, r2
   d7760:	f000 fb76 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7764:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d7766:	6860      	ldr	r0, [r4, #4]
   d7768:	f000 fa5d 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d776c:	28ff      	cmp	r0, #255	; 0xff
   d776e:	7260      	strb	r0, [r4, #9]
   d7770:	d10e      	bne.n	d7790 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d7772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7776:	4639      	mov	r1, r7
   d7778:	4620      	mov	r0, r4
   d777a:	f7ff ffa7 	bl	d76cc <_ZN9SdSpiCard10isTimedOutEtt>
   d777e:	2800      	cmp	r0, #0
   d7780:	d0f1      	beq.n	d7766 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d7782:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d7784:	4620      	mov	r0, r4
   d7786:	7023      	strb	r3, [r4, #0]
   d7788:	f7ff ffd3 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d778c:	2000      	movs	r0, #0
}
   d778e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d7790:	28fe      	cmp	r0, #254	; 0xfe
   d7792:	d001      	beq.n	d7798 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d7794:	2350      	movs	r3, #80	; 0x50
   d7796:	e7f5      	b.n	d7784 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d7798:	6860      	ldr	r0, [r4, #4]
   d779a:	4632      	mov	r2, r6
   d779c:	4629      	mov	r1, r5
   d779e:	f000 fa47 	bl	d7c30 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d77a2:	7260      	strb	r0, [r4, #9]
   d77a4:	b108      	cbz	r0, d77aa <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d77a6:	2360      	movs	r3, #96	; 0x60
   d77a8:	e7ec      	b.n	d7784 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d77aa:	6860      	ldr	r0, [r4, #4]
   d77ac:	f000 fa3b 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
   d77b0:	6860      	ldr	r0, [r4, #4]
   d77b2:	f000 fa38 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
   d77b6:	2001      	movs	r0, #1
   d77b8:	e7e9      	b.n	d778e <_ZN9SdSpiCard8readDataEPhj+0x36>

000d77ba <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d77ba:	b570      	push	{r4, r5, r6, lr}
   d77bc:	4604      	mov	r4, r0
   d77be:	460e      	mov	r6, r1
   d77c0:	f000 fb46 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
   d77c4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d77c6:	4632      	mov	r2, r6
   d77c8:	4629      	mov	r1, r5
   d77ca:	4620      	mov	r0, r4
   d77cc:	f7ff ff7e 	bl	d76cc <_ZN9SdSpiCard10isTimedOutEtt>
   d77d0:	b930      	cbnz	r0, d77e0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d77d2:	6860      	ldr	r0, [r4, #4]
   d77d4:	f000 fa27 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d77d8:	28ff      	cmp	r0, #255	; 0xff
   d77da:	d1f4      	bne.n	d77c6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d77dc:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d77de:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d77e0:	2000      	movs	r0, #0
   d77e2:	e7fc      	b.n	d77de <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d77e4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d77e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d77e6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d77e8:	9201      	str	r2, [sp, #4]
   d77ea:	4604      	mov	r4, r0
   d77ec:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d77ee:	b90b      	cbnz	r3, d77f4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d77f0:	f7ff ff90 	bl	d7714 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d77f4:	b125      	cbz	r5, d7800 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d77f6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d77fa:	4620      	mov	r0, r4
   d77fc:	f7ff ffdd 	bl	d77ba <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d7800:	6860      	ldr	r0, [r4, #4]
   d7802:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7806:	f000 fa29 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
   d780a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d780c:	af01      	add	r7, sp, #4
   d780e:	5db9      	ldrb	r1, [r7, r6]
   d7810:	6860      	ldr	r0, [r4, #4]
   d7812:	f000 fa23 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d7816:	3e01      	subs	r6, #1
   d7818:	d2f9      	bcs.n	d780e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d781a:	2d00      	cmp	r5, #0
   d781c:	6860      	ldr	r0, [r4, #4]
   d781e:	bf0c      	ite	eq
   d7820:	2195      	moveq	r1, #149	; 0x95
   d7822:	2187      	movne	r1, #135	; 0x87
   d7824:	f000 fa1a 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7828:	6860      	ldr	r0, [r4, #4]
   d782a:	f000 f9fc 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
   d782e:	250b      	movs	r5, #11
   d7830:	6860      	ldr	r0, [r4, #4]
   d7832:	f000 f9f8 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7836:	0603      	lsls	r3, r0, #24
   d7838:	7260      	strb	r0, [r4, #9]
   d783a:	d503      	bpl.n	d7844 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d783c:	3d01      	subs	r5, #1
   d783e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7842:	d1f5      	bne.n	d7830 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d7844:	b003      	add	sp, #12
   d7846:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7848 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7848:	b570      	push	{r4, r5, r6, lr}
   d784a:	4604      	mov	r4, r0
   d784c:	460d      	mov	r5, r1
   d784e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7850:	2137      	movs	r1, #55	; 0x37
   d7852:	2200      	movs	r2, #0
   d7854:	f7ff ffc6 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7858:	4632      	mov	r2, r6
   d785a:	4629      	mov	r1, r5
   d785c:	4620      	mov	r0, r4
  }
   d785e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d7862:	f7ff bfbf 	b.w	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d7868 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d786c:	2500      	movs	r5, #0
   d786e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7870:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d7872:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d7874:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7876:	4604      	mov	r4, r0
   d7878:	4690      	mov	r8, r2
   d787a:	461e      	mov	r6, r3
   d787c:	f000 fae8 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d7880:	4641      	mov	r1, r8
   d7882:	4607      	mov	r7, r0
   d7884:	6860      	ldr	r0, [r4, #4]
   d7886:	f000 f9bb 	bl	d7c00 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d788a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d788c:	4a49      	ldr	r2, [pc, #292]	; (d79b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d788e:	721d      	strb	r5, [r3, #8]
   d7890:	2501      	movs	r5, #1
   d7892:	60da      	str	r2, [r3, #12]
   d7894:	821d      	strh	r5, [r3, #16]
  spiStart();
   d7896:	4620      	mov	r0, r4
   d7898:	f7ff ff3c 	bl	d7714 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d789c:	6863      	ldr	r3, [r4, #4]
   d789e:	4629      	mov	r1, r5
   d78a0:	7d18      	ldrb	r0, [r3, #20]
   d78a2:	f002 fc62 	bl	da16a <digitalWrite>
   d78a6:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d78a8:	6860      	ldr	r0, [r4, #4]
   d78aa:	21ff      	movs	r1, #255	; 0xff
   d78ac:	3d01      	subs	r5, #1
   d78ae:	f000 f9d5 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d78b2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d78b6:	d1f7      	bne.n	d78a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d78b8:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d78ba:	4629      	mov	r1, r5
   d78bc:	7d18      	ldrb	r0, [r3, #20]
   d78be:	f002 fc54 	bl	da16a <digitalWrite>
  }
   d78c2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d78c4:	2200      	movs	r2, #0
   d78c6:	4611      	mov	r1, r2
   d78c8:	4620      	mov	r0, r4
   d78ca:	f7ff ff8b 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d78ce:	2801      	cmp	r0, #1
   d78d0:	4680      	mov	r8, r0
   d78d2:	d018      	beq.n	d7906 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d78d4:	3d01      	subs	r5, #1
   d78d6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d78da:	d107      	bne.n	d78ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d78dc:	2320      	movs	r3, #32
  spiStop();
   d78de:	4620      	mov	r0, r4
   d78e0:	7023      	strb	r3, [r4, #0]
   d78e2:	f7ff ff26 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d78e6:	2000      	movs	r0, #0
}
   d78e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d78ec:	6860      	ldr	r0, [r4, #4]
   d78ee:	21fd      	movs	r1, #253	; 0xfd
   d78f0:	f000 f9b4 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
   d78f4:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d78f8:	6860      	ldr	r0, [r4, #4]
   d78fa:	f000 f994 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d78fe:	f1b8 0801 	subs.w	r8, r8, #1
   d7902:	d1f9      	bne.n	d78f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d7904:	e7de      	b.n	d78c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7906:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d790a:	2108      	movs	r1, #8
   d790c:	4620      	mov	r0, r4
   d790e:	f7ff ff69 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d7912:	2805      	cmp	r0, #5
   d7914:	d114      	bne.n	d7940 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d7916:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d791a:	2500      	movs	r5, #0
   d791c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d791e:	462a      	mov	r2, r5
   d7920:	2129      	movs	r1, #41	; 0x29
   d7922:	4620      	mov	r0, r4
   d7924:	f7ff ff90 	bl	d7848 <_ZN9SdSpiCard8cardAcmdEhm>
   d7928:	4602      	mov	r2, r0
   d792a:	b1d8      	cbz	r0, d7964 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d792c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7930:	4639      	mov	r1, r7
   d7932:	4620      	mov	r0, r4
   d7934:	f7ff feca 	bl	d76cc <_ZN9SdSpiCard10isTimedOutEtt>
   d7938:	2800      	cmp	r0, #0
   d793a:	d0f0      	beq.n	d791e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d793c:	2343      	movs	r3, #67	; 0x43
   d793e:	e7ce      	b.n	d78de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d7940:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d7942:	6860      	ldr	r0, [r4, #4]
   d7944:	f000 f96f 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
   d7948:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d794a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d794e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d7950:	d1f7      	bne.n	d7942 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d7952:	28aa      	cmp	r0, #170	; 0xaa
   d7954:	d104      	bne.n	d7960 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d7956:	2302      	movs	r3, #2
   d7958:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d795a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d795e:	e7dd      	b.n	d791c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d7960:	2325      	movs	r3, #37	; 0x25
   d7962:	e7bc      	b.n	d78de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d7964:	7aa3      	ldrb	r3, [r4, #10]
   d7966:	2b02      	cmp	r3, #2
   d7968:	d118      	bne.n	d799c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d796a:	213a      	movs	r1, #58	; 0x3a
   d796c:	4620      	mov	r0, r4
   d796e:	f7ff ff39 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d7972:	b108      	cbz	r0, d7978 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d7974:	2337      	movs	r3, #55	; 0x37
   d7976:	e7b2      	b.n	d78de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d7978:	6860      	ldr	r0, [r4, #4]
   d797a:	f000 f954 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d797e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d7982:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d7984:	bf04      	itt	eq
   d7986:	2303      	moveq	r3, #3
   d7988:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d798a:	6860      	ldr	r0, [r4, #4]
   d798c:	f000 f94b 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
   d7990:	6860      	ldr	r0, [r4, #4]
   d7992:	f000 f948 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
   d7996:	6860      	ldr	r0, [r4, #4]
   d7998:	f000 f945 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d799c:	4620      	mov	r0, r4
   d799e:	f7ff fec8 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d79a2:	6863      	ldr	r3, [r4, #4]
   d79a4:	7930      	ldrb	r0, [r6, #4]
   d79a6:	68b1      	ldr	r1, [r6, #8]
   d79a8:	89b2      	ldrh	r2, [r6, #12]
   d79aa:	821a      	strh	r2, [r3, #16]
   d79ac:	7218      	strb	r0, [r3, #8]
   d79ae:	60d9      	str	r1, [r3, #12]
  return true;
   d79b0:	2001      	movs	r0, #1
   d79b2:	e799      	b.n	d78e8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d79b4:	0003d090 	.word	0x0003d090

000d79b8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d79b8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d79ba:	7a83      	ldrb	r3, [r0, #10]
   d79bc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d79be:	bf18      	it	ne
   d79c0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d79c2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d79c4:	460a      	mov	r2, r1
   d79c6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d79c8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d79ca:	f7ff ff0b 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d79ce:	b130      	cbz	r0, d79de <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d79d0:	2330      	movs	r3, #48	; 0x30
   d79d2:	7023      	strb	r3, [r4, #0]
  spiStop();
   d79d4:	4620      	mov	r0, r4
   d79d6:	f7ff feac 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d79da:	2500      	movs	r5, #0
   d79dc:	e00b      	b.n	d79f6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d79de:	4629      	mov	r1, r5
   d79e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   d79e4:	4620      	mov	r0, r4
   d79e6:	f7ff feb7 	bl	d7758 <_ZN9SdSpiCard8readDataEPhj>
   d79ea:	4605      	mov	r5, r0
   d79ec:	2800      	cmp	r0, #0
   d79ee:	d0f1      	beq.n	d79d4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d79f0:	4620      	mov	r0, r4
   d79f2:	f7ff fe9e 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
}
   d79f6:	4628      	mov	r0, r5
   d79f8:	bd38      	pop	{r3, r4, r5, pc}

000d79fa <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d79fa:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d79fc:	7a83      	ldrb	r3, [r0, #10]
   d79fe:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7a00:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7a02:	bf18      	it	ne
   d7a04:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d7a06:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7a08:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d7a0a:	f7ff feeb 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d7a0e:	b130      	cbz	r0, d7a1e <_ZN9SdSpiCard9readStartEm+0x24>
   d7a10:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d7a12:	4620      	mov	r0, r4
   d7a14:	7023      	strb	r3, [r4, #0]
   d7a16:	f7ff fe8c 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a1a:	2000      	movs	r0, #0
}
   d7a1c:	bd10      	pop	{r4, pc}
  return true;
   d7a1e:	2001      	movs	r0, #1
   d7a20:	e7fc      	b.n	d7a1c <_ZN9SdSpiCard9readStartEm+0x22>

000d7a22 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d7a22:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7a24:	2200      	movs	r2, #0
   d7a26:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d7a28:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7a2a:	f7ff fedb 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d7a2e:	b130      	cbz	r0, d7a3e <_ZN9SdSpiCard8readStopEv+0x1c>
   d7a30:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d7a32:	4620      	mov	r0, r4
   d7a34:	7023      	strb	r3, [r4, #0]
   d7a36:	f7ff fe7c 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a3a:	2000      	movs	r0, #0
}
   d7a3c:	bd10      	pop	{r4, pc}
  spiStop();
   d7a3e:	4620      	mov	r0, r4
   d7a40:	f7ff fe77 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7a44:	2001      	movs	r0, #1
   d7a46:	e7f9      	b.n	d7a3c <_ZN9SdSpiCard8readStopEv+0x1a>

000d7a48 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a4a:	4604      	mov	r4, r0
   d7a4c:	4616      	mov	r6, r2
   d7a4e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7a50:	f7ff ffd3 	bl	d79fa <_ZN9SdSpiCard9readStartEm>
   d7a54:	b168      	cbz	r0, d7a72 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d7a56:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7a58:	b2ab      	uxth	r3, r5
   d7a5a:	429f      	cmp	r7, r3
   d7a5c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d7a60:	d909      	bls.n	d7a76 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d7a62:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7a66:	4620      	mov	r0, r4
   d7a68:	f7ff fe76 	bl	d7758 <_ZN9SdSpiCard8readDataEPhj>
   d7a6c:	3501      	adds	r5, #1
   d7a6e:	2800      	cmp	r0, #0
   d7a70:	d1f2      	bne.n	d7a58 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d7a72:	2000      	movs	r0, #0
   d7a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d7a76:	4620      	mov	r0, r4
}
   d7a78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d7a7c:	f7ff bfd1 	b.w	d7a22 <_ZN9SdSpiCard8readStopEv>

000d7a80 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d7a80:	b538      	push	{r3, r4, r5, lr}
   d7a82:	4604      	mov	r4, r0
   d7a84:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d7a86:	6840      	ldr	r0, [r0, #4]
   d7a88:	f000 f8e8 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d7a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7a90:	6860      	ldr	r0, [r4, #4]
   d7a92:	4629      	mov	r1, r5
   d7a94:	f000 f8e6 	bl	d7c64 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d7a98:	6860      	ldr	r0, [r4, #4]
   d7a9a:	21ff      	movs	r1, #255	; 0xff
   d7a9c:	f000 f8de 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
   d7aa0:	6860      	ldr	r0, [r4, #4]
   d7aa2:	21ff      	movs	r1, #255	; 0xff
   d7aa4:	f000 f8da 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7aa8:	6860      	ldr	r0, [r4, #4]
   d7aaa:	f000 f8bc 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d7aae:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d7ab0:	f000 001f 	and.w	r0, r0, #31
   d7ab4:	2805      	cmp	r0, #5
   d7ab6:	d006      	beq.n	d7ac6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d7ab8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7aba:	4620      	mov	r0, r4
   d7abc:	7023      	strb	r3, [r4, #0]
   d7abe:	f7ff fe38 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ac2:	2000      	movs	r0, #0
}
   d7ac4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d7ac6:	2001      	movs	r0, #1
   d7ac8:	e7fc      	b.n	d7ac4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d7aca <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7aca:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7acc:	7a83      	ldrb	r3, [r0, #10]
   d7ace:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7ad0:	bf18      	it	ne
   d7ad2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7ad4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d7ad6:	460a      	mov	r2, r1
   d7ad8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7ada:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d7adc:	f7ff fe82 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d7ae0:	4606      	mov	r6, r0
   d7ae2:	b130      	cbz	r0, d7af2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d7ae4:	2332      	movs	r3, #50	; 0x32
   d7ae6:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7ae8:	4620      	mov	r0, r4
   d7aea:	f7ff fe22 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7aee:	2500      	movs	r5, #0
   d7af0:	e01f      	b.n	d7b32 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d7af2:	462a      	mov	r2, r5
   d7af4:	21fe      	movs	r1, #254	; 0xfe
   d7af6:	4620      	mov	r0, r4
   d7af8:	f7ff ffc2 	bl	d7a80 <_ZN9SdSpiCard9writeDataEhPKh>
   d7afc:	2800      	cmp	r0, #0
   d7afe:	d0f3      	beq.n	d7ae8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b00:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7b04:	4620      	mov	r0, r4
   d7b06:	f7ff fe58 	bl	d77ba <_ZN9SdSpiCard11waitNotBusyEt>
   d7b0a:	4605      	mov	r5, r0
   d7b0c:	b908      	cbnz	r0, d7b12 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d7b0e:	235a      	movs	r3, #90	; 0x5a
   d7b10:	e7e9      	b.n	d7ae6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7b12:	4632      	mov	r2, r6
   d7b14:	210d      	movs	r1, #13
   d7b16:	4620      	mov	r0, r4
   d7b18:	f7ff fe64 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d7b1c:	b108      	cbz	r0, d7b22 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d7b1e:	2329      	movs	r3, #41	; 0x29
   d7b20:	e7e1      	b.n	d7ae6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d7b22:	6860      	ldr	r0, [r4, #4]
   d7b24:	f000 f87f 	bl	d7c26 <_ZN14SdSpiAltDriver7receiveEv>
   d7b28:	2800      	cmp	r0, #0
   d7b2a:	d1f8      	bne.n	d7b1e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d7b2c:	4620      	mov	r0, r4
   d7b2e:	f7ff fe00 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
}
   d7b32:	4628      	mov	r0, r5
   d7b34:	bd70      	pop	{r4, r5, r6, pc}

000d7b36 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d7b36:	b513      	push	{r0, r1, r4, lr}
   d7b38:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d7b3e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b40:	f7ff fe3b 	bl	d77ba <_ZN9SdSpiCard11waitNotBusyEt>
   d7b44:	9a01      	ldr	r2, [sp, #4]
   d7b46:	b930      	cbnz	r0, d7b56 <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d7b48:	235b      	movs	r3, #91	; 0x5b
   d7b4a:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7b4c:	4620      	mov	r0, r4
   d7b4e:	f7ff fdf0 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b52:	2000      	movs	r0, #0
   d7b54:	e005      	b.n	d7b62 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7b56:	21fc      	movs	r1, #252	; 0xfc
   d7b58:	4620      	mov	r0, r4
   d7b5a:	f7ff ff91 	bl	d7a80 <_ZN9SdSpiCard9writeDataEhPKh>
   d7b5e:	2800      	cmp	r0, #0
   d7b60:	d0f4      	beq.n	d7b4c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d7b62:	b002      	add	sp, #8
   d7b64:	bd10      	pop	{r4, pc}

000d7b66 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7b66:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7b68:	7a83      	ldrb	r3, [r0, #10]
   d7b6a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7b6c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7b6e:	bf18      	it	ne
   d7b70:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7b72:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7b74:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d7b76:	f7ff fe35 	bl	d77e4 <_ZN9SdSpiCard11cardCommandEhm>
   d7b7a:	b130      	cbz	r0, d7b8a <_ZN9SdSpiCard10writeStartEm+0x24>
   d7b7c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7b7e:	4620      	mov	r0, r4
   d7b80:	7023      	strb	r3, [r4, #0]
   d7b82:	f7ff fdd6 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7b86:	2000      	movs	r0, #0
}
   d7b88:	bd10      	pop	{r4, pc}
  return true;
   d7b8a:	2001      	movs	r0, #1
   d7b8c:	e7fc      	b.n	d7b88 <_ZN9SdSpiCard10writeStartEm+0x22>

000d7b8e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7b8e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d7b94:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7b96:	f7ff fe10 	bl	d77ba <_ZN9SdSpiCard11waitNotBusyEt>
   d7b9a:	4605      	mov	r5, r0
   d7b9c:	b930      	cbnz	r0, d7bac <_ZN9SdSpiCard9writeStopEv+0x1e>
   d7b9e:	2356      	movs	r3, #86	; 0x56
   d7ba0:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d7ba2:	4620      	mov	r0, r4
   d7ba4:	f7ff fdc5 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7ba8:	4628      	mov	r0, r5
   d7baa:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d7bac:	6860      	ldr	r0, [r4, #4]
   d7bae:	21fd      	movs	r1, #253	; 0xfd
   d7bb0:	f000 f854 	bl	d7c5c <_ZN14SdSpiAltDriver4sendEh>
   d7bb4:	e7f5      	b.n	d7ba2 <_ZN9SdSpiCard9writeStopEv+0x14>

000d7bb6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bb8:	4604      	mov	r4, r0
   d7bba:	4616      	mov	r6, r2
   d7bbc:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7bbe:	f7ff ffd2 	bl	d7b66 <_ZN9SdSpiCard10writeStartEm>
   d7bc2:	b170      	cbz	r0, d7be2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7bc4:	2500      	movs	r5, #0
   d7bc6:	42bd      	cmp	r5, r7
   d7bc8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d7bcc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d7bce:	d004      	beq.n	d7bda <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7bd0:	f7ff ffb1 	bl	d7b36 <_ZN9SdSpiCard9writeDataEPKh>
   d7bd4:	b128      	cbz	r0, d7be2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7bd6:	3501      	adds	r5, #1
   d7bd8:	e7f5      	b.n	d7bc6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d7bda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d7bde:	f7ff bfd6 	b.w	d7b8e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d7be2:	4620      	mov	r0, r4
   d7be4:	f7ff fda5 	bl	d7732 <_ZN9SdSpiCard7spiStopEv>
}
   d7be8:	2000      	movs	r0, #0
   d7bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7bec:	4b01      	ldr	r3, [pc, #4]	; (d7bf4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7bee:	2201      	movs	r2, #1
   d7bf0:	701a      	strb	r2, [r3, #0]
}
   d7bf2:	4770      	bx	lr
   d7bf4:	2003e548 	.word	0x2003e548

000d7bf8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7bf8:	1d01      	adds	r1, r0, #4
   d7bfa:	6800      	ldr	r0, [r0, #0]
   d7bfc:	f001 bbbc 	b.w	d9378 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7c00 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7c00:	b510      	push	{r4, lr}
   d7c02:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7c04:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7c06:	6800      	ldr	r0, [r0, #0]
   d7c08:	f001 fb78 	bl	d92fc <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7c0c:	7d20      	ldrb	r0, [r4, #20]
   d7c0e:	2101      	movs	r1, #1
   d7c10:	f002 fa9a 	bl	da148 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7c14:	7d20      	ldrb	r0, [r4, #20]
   d7c16:	2101      	movs	r1, #1
}
   d7c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d7c1c:	f002 baa5 	b.w	da16a <digitalWrite>

000d7c20 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7c20:	6800      	ldr	r0, [r0, #0]
   d7c22:	f001 bb8f 	b.w	d9344 <_ZN8SPIClass14endTransactionEv>

000d7c26 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7c26:	6800      	ldr	r0, [r0, #0]
   d7c28:	21ff      	movs	r1, #255	; 0xff
   d7c2a:	f001 bc13 	b.w	d9454 <_ZN8SPIClass8transferEh>
	...

000d7c30 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7c32:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7c34:	4a07      	ldr	r2, [pc, #28]	; (d7c54 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7c36:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7c38:	2500      	movs	r5, #0
   d7c3a:	4c07      	ldr	r4, [pc, #28]	; (d7c58 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7c3c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7c3e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7c40:	460a      	mov	r2, r1
   d7c42:	4629      	mov	r1, r5
   d7c44:	f001 fc0c 	bl	d9460 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7c48:	7823      	ldrb	r3, [r4, #0]
   d7c4a:	2b00      	cmp	r3, #0
   d7c4c:	d0fc      	beq.n	d7c48 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7c4e:	2000      	movs	r0, #0
   d7c50:	b003      	add	sp, #12
   d7c52:	bd30      	pop	{r4, r5, pc}
   d7c54:	000d7bed 	.word	0x000d7bed
   d7c58:	2003e548 	.word	0x2003e548

000d7c5c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7c5c:	6800      	ldr	r0, [r0, #0]
   d7c5e:	f001 bbf9 	b.w	d9454 <_ZN8SPIClass8transferEh>
	...

000d7c64 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7c66:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7c68:	4a06      	ldr	r2, [pc, #24]	; (d7c84 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7c6a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7c6c:	2500      	movs	r5, #0
   d7c6e:	4c06      	ldr	r4, [pc, #24]	; (d7c88 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7c70:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7c72:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7c74:	462a      	mov	r2, r5
   d7c76:	f001 fbf3 	bl	d9460 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d7c7a:	7823      	ldrb	r3, [r4, #0]
   d7c7c:	2b00      	cmp	r3, #0
   d7c7e:	d0fc      	beq.n	d7c7a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7c80:	b003      	add	sp, #12
   d7c82:	bd30      	pop	{r4, r5, pc}
   d7c84:	000d7bed 	.word	0x000d7bed
   d7c88:	2003e548 	.word	0x2003e548

000d7c8c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d7c8c:	b510      	push	{r4, lr}
   d7c8e:	4b06      	ldr	r3, [pc, #24]	; (d7ca8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d7c90:	6003      	str	r3, [r0, #0]
   d7c92:	4604      	mov	r4, r0
	if (mutex) {
   d7c94:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d7c96:	b108      	cbz	r0, d7c9c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d7c98:	f000 f8aa 	bl	d7df0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d7c9c:	4620      	mov	r0, r4
   d7c9e:	f7fd fce1 	bl	d5664 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d7ca2:	4620      	mov	r0, r4
   d7ca4:	bd10      	pop	{r4, pc}
   d7ca6:	bf00      	nop
   d7ca8:	000dddf4 	.word	0x000dddf4

000d7cac <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d7cac:	b510      	push	{r4, lr}
   d7cae:	4604      	mov	r4, r0
}
   d7cb0:	f7ff ffec 	bl	d7c8c <_ZN16OledWingAdafruitD1Ev>
   d7cb4:	4620      	mov	r0, r4
   d7cb6:	2170      	movs	r1, #112	; 0x70
   d7cb8:	f002 fac0 	bl	da23c <_ZdlPvj>
   d7cbc:	4620      	mov	r0, r4
   d7cbe:	bd10      	pop	{r4, pc}

000d7cc0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d7cc0:	b530      	push	{r4, r5, lr}
   d7cc2:	b085      	sub	sp, #20
   d7cc4:	4604      	mov	r4, r0
   d7cc6:	460d      	mov	r5, r1
   d7cc8:	f002 fa94 	bl	da1f4 <_Z19__fetch_global_Wirev>
   d7ccc:	4a10      	ldr	r2, [pc, #64]	; (d7d10 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d7cce:	4911      	ldr	r1, [pc, #68]	; (d7d14 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d7cd0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d7cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7cd8:	2180      	movs	r1, #128	; 0x80
   d7cda:	4603      	mov	r3, r0
   d7cdc:	9200      	str	r2, [sp, #0]
   d7cde:	4620      	mov	r0, r4
   d7ce0:	2220      	movs	r2, #32
   d7ce2:	f7fd fd45 	bl	d5770 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d7ce6:	4b0c      	ldr	r3, [pc, #48]	; (d7d18 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d7ce8:	6023      	str	r3, [r4, #0]
   d7cea:	2300      	movs	r3, #0
   d7cec:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d7cf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7cf4:	f7fe f934 	bl	d5f60 <_ZN8DebounceC1Ev>
   d7cf8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7cfc:	f7fe f930 	bl	d5f60 <_ZN8DebounceC1Ev>
   d7d00:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7d04:	f7fe f92c 	bl	d5f60 <_ZN8DebounceC1Ev>
}
   d7d08:	4620      	mov	r0, r4
   d7d0a:	b005      	add	sp, #20
   d7d0c:	bd30      	pop	{r4, r5, pc}
   d7d0e:	bf00      	nop
   d7d10:	00061a80 	.word	0x00061a80
   d7d14:	000186a0 	.word	0x000186a0
   d7d18:	000dddf4 	.word	0x000dddf4

000d7d1c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d7d1c:	b513      	push	{r0, r1, r4, lr}
   d7d1e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d7d20:	3050      	adds	r0, #80	; 0x50
   d7d22:	f000 f85d 	bl	d7de0 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d7d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7d28:	07d9      	lsls	r1, r3, #31
   d7d2a:	d505      	bpl.n	d7d38 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d7d2c:	2202      	movs	r2, #2
   d7d2e:	2104      	movs	r1, #4
   d7d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7d34:	f7fe f928 	bl	d5f88 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d7d38:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7d3a:	079a      	lsls	r2, r3, #30
   d7d3c:	d505      	bpl.n	d7d4a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d7d3e:	2200      	movs	r2, #0
   d7d40:	2103      	movs	r1, #3
   d7d42:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7d46:	f7fe f91f 	bl	d5f88 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d7d4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7d4c:	075b      	lsls	r3, r3, #29
   d7d4e:	d505      	bpl.n	d7d5c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d7d50:	2202      	movs	r2, #2
   d7d52:	4611      	mov	r1, r2
   d7d54:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7d58:	f7fe f916 	bl	d5f88 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d7d5c:	2301      	movs	r3, #1
   d7d5e:	9300      	str	r3, [sp, #0]
   d7d60:	223c      	movs	r2, #60	; 0x3c
   d7d62:	2102      	movs	r1, #2
   d7d64:	4620      	mov	r0, r4
   d7d66:	f7fd fe03 	bl	d5970 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d7d6a:	b002      	add	sp, #8
   d7d6c:	bd10      	pop	{r4, pc}
	...

000d7d70 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7d70:	b508      	push	{r3, lr}
   d7d72:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <cellular_signal+0xc>)
   d7d74:	681b      	ldr	r3, [r3, #0]
   d7d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d78:	9301      	str	r3, [sp, #4]
   d7d7a:	bd08      	pop	{r3, pc}
   d7d7c:	00030274 	.word	0x00030274

000d7d80 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7d80:	b508      	push	{r3, lr}
   d7d82:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <os_thread_yield+0xc>)
   d7d84:	681b      	ldr	r3, [r3, #0]
   d7d86:	68db      	ldr	r3, [r3, #12]
   d7d88:	9301      	str	r3, [sp, #4]
   d7d8a:	bd08      	pop	{r3, pc}
   d7d8c:	00030248 	.word	0x00030248

000d7d90 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7d90:	b508      	push	{r3, lr}
   d7d92:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <os_thread_scheduling+0xc>)
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	69db      	ldr	r3, [r3, #28]
   d7d98:	9301      	str	r3, [sp, #4]
   d7d9a:	bd08      	pop	{r3, pc}
   d7d9c:	00030248 	.word	0x00030248

000d7da0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7da0:	b508      	push	{r3, lr}
   d7da2:	4b02      	ldr	r3, [pc, #8]	; (d7dac <os_timer_create+0xc>)
   d7da4:	681b      	ldr	r3, [r3, #0]
   d7da6:	6a1b      	ldr	r3, [r3, #32]
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	bd08      	pop	{r3, pc}
   d7dac:	00030248 	.word	0x00030248

000d7db0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7db0:	b508      	push	{r3, lr}
   d7db2:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <os_timer_destroy+0xc>)
   d7db4:	681b      	ldr	r3, [r3, #0]
   d7db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7db8:	9301      	str	r3, [sp, #4]
   d7dba:	bd08      	pop	{r3, pc}
   d7dbc:	00030248 	.word	0x00030248

000d7dc0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b02      	ldr	r3, [pc, #8]	; (d7dcc <os_timer_get_id+0xc>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	bd08      	pop	{r3, pc}
   d7dcc:	00030248 	.word	0x00030248

000d7dd0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7dd0:	b508      	push	{r3, lr}
   d7dd2:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <os_timer_change+0xc>)
   d7dd4:	681b      	ldr	r3, [r3, #0]
   d7dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7dd8:	9301      	str	r3, [sp, #4]
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	00030248 	.word	0x00030248

000d7de0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7de0:	b508      	push	{r3, lr}
   d7de2:	4b02      	ldr	r3, [pc, #8]	; (d7dec <os_mutex_create+0xc>)
   d7de4:	681b      	ldr	r3, [r3, #0]
   d7de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7de8:	9301      	str	r3, [sp, #4]
   d7dea:	bd08      	pop	{r3, pc}
   d7dec:	00030248 	.word	0x00030248

000d7df0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d7df0:	b508      	push	{r3, lr}
   d7df2:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <os_mutex_destroy+0xc>)
   d7df4:	681b      	ldr	r3, [r3, #0]
   d7df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7df8:	9301      	str	r3, [sp, #4]
   d7dfa:	bd08      	pop	{r3, pc}
   d7dfc:	00030248 	.word	0x00030248

000d7e00 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7e00:	b508      	push	{r3, lr}
   d7e02:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <os_mutex_recursive_create+0xc>)
   d7e04:	681b      	ldr	r3, [r3, #0]
   d7e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7e08:	9301      	str	r3, [sp, #4]
   d7e0a:	bd08      	pop	{r3, pc}
   d7e0c:	00030248 	.word	0x00030248

000d7e10 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7e10:	b508      	push	{r3, lr}
   d7e12:	4b02      	ldr	r3, [pc, #8]	; (d7e1c <os_timer_set_id+0xc>)
   d7e14:	681b      	ldr	r3, [r3, #0]
   d7e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7e18:	9301      	str	r3, [sp, #4]
   d7e1a:	bd08      	pop	{r3, pc}
   d7e1c:	00030248 	.word	0x00030248

000d7e20 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7e20:	b508      	push	{r3, lr}
   d7e22:	4b02      	ldr	r3, [pc, #8]	; (d7e2c <HAL_RNG_GetRandomNumber+0xc>)
   d7e24:	681b      	ldr	r3, [r3, #0]
   d7e26:	685b      	ldr	r3, [r3, #4]
   d7e28:	9301      	str	r3, [sp, #4]
   d7e2a:	bd08      	pop	{r3, pc}
   d7e2c:	00030218 	.word	0x00030218

000d7e30 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7e30:	b508      	push	{r3, lr}
   d7e32:	4b02      	ldr	r3, [pc, #8]	; (d7e3c <HAL_Delay_Microseconds+0xc>)
   d7e34:	681b      	ldr	r3, [r3, #0]
   d7e36:	68db      	ldr	r3, [r3, #12]
   d7e38:	9301      	str	r3, [sp, #4]
   d7e3a:	bd08      	pop	{r3, pc}
   d7e3c:	00030218 	.word	0x00030218

000d7e40 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7e40:	b508      	push	{r3, lr}
   d7e42:	4b02      	ldr	r3, [pc, #8]	; (d7e4c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7e44:	681b      	ldr	r3, [r3, #0]
   d7e46:	691b      	ldr	r3, [r3, #16]
   d7e48:	9301      	str	r3, [sp, #4]
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	00030218 	.word	0x00030218

000d7e50 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	695b      	ldr	r3, [r3, #20]
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	00030218 	.word	0x00030218

000d7e60 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <hal_rtc_time_is_valid+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	00030218 	.word	0x00030218

000d7e70 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <hal_rtc_get_time+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	00030218 	.word	0x00030218

000d7e80 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <HAL_Pin_Mode+0xc>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	689b      	ldr	r3, [r3, #8]
   d7e88:	9301      	str	r3, [sp, #4]
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	0003022c 	.word	0x0003022c

000d7e90 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7e90:	b508      	push	{r3, lr}
   d7e92:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <HAL_Get_Pin_Mode+0xc>)
   d7e94:	681b      	ldr	r3, [r3, #0]
   d7e96:	68db      	ldr	r3, [r3, #12]
   d7e98:	9301      	str	r3, [sp, #4]
   d7e9a:	bd08      	pop	{r3, pc}
   d7e9c:	0003022c 	.word	0x0003022c

000d7ea0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7ea0:	b508      	push	{r3, lr}
   d7ea2:	4b02      	ldr	r3, [pc, #8]	; (d7eac <HAL_GPIO_Write+0xc>)
   d7ea4:	681b      	ldr	r3, [r3, #0]
   d7ea6:	691b      	ldr	r3, [r3, #16]
   d7ea8:	9301      	str	r3, [sp, #4]
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	0003022c 	.word	0x0003022c

000d7eb0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7eb0:	b508      	push	{r3, lr}
   d7eb2:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <HAL_GPIO_Read+0xc>)
   d7eb4:	681b      	ldr	r3, [r3, #0]
   d7eb6:	695b      	ldr	r3, [r3, #20]
   d7eb8:	9301      	str	r3, [sp, #4]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	0003022c 	.word	0x0003022c

000d7ec0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7ec0:	b508      	push	{r3, lr}
   d7ec2:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <HAL_Interrupts_Attach+0xc>)
   d7ec4:	681b      	ldr	r3, [r3, #0]
   d7ec6:	699b      	ldr	r3, [r3, #24]
   d7ec8:	9301      	str	r3, [sp, #4]
   d7eca:	bd08      	pop	{r3, pc}
   d7ecc:	0003022c 	.word	0x0003022c

000d7ed0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7ed0:	b508      	push	{r3, lr}
   d7ed2:	4b02      	ldr	r3, [pc, #8]	; (d7edc <HAL_Interrupts_Detach+0xc>)
   d7ed4:	681b      	ldr	r3, [r3, #0]
   d7ed6:	69db      	ldr	r3, [r3, #28]
   d7ed8:	9301      	str	r3, [sp, #4]
   d7eda:	bd08      	pop	{r3, pc}
   d7edc:	0003022c 	.word	0x0003022c

000d7ee0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7ee0:	b508      	push	{r3, lr}
   d7ee2:	4b02      	ldr	r3, [pc, #8]	; (d7eec <hal_i2c_set_speed+0xc>)
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	681b      	ldr	r3, [r3, #0]
   d7ee8:	9301      	str	r3, [sp, #4]
   d7eea:	bd08      	pop	{r3, pc}
   d7eec:	00030228 	.word	0x00030228

000d7ef0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7ef0:	b508      	push	{r3, lr}
   d7ef2:	4b02      	ldr	r3, [pc, #8]	; (d7efc <hal_i2c_begin+0xc>)
   d7ef4:	681b      	ldr	r3, [r3, #0]
   d7ef6:	68db      	ldr	r3, [r3, #12]
   d7ef8:	9301      	str	r3, [sp, #4]
   d7efa:	bd08      	pop	{r3, pc}
   d7efc:	00030228 	.word	0x00030228

000d7f00 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7f00:	b508      	push	{r3, lr}
   d7f02:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <hal_i2c_begin_transmission+0xc>)
   d7f04:	681b      	ldr	r3, [r3, #0]
   d7f06:	699b      	ldr	r3, [r3, #24]
   d7f08:	9301      	str	r3, [sp, #4]
   d7f0a:	bd08      	pop	{r3, pc}
   d7f0c:	00030228 	.word	0x00030228

000d7f10 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7f10:	b508      	push	{r3, lr}
   d7f12:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <hal_i2c_end_transmission+0xc>)
   d7f14:	681b      	ldr	r3, [r3, #0]
   d7f16:	69db      	ldr	r3, [r3, #28]
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	bd08      	pop	{r3, pc}
   d7f1c:	00030228 	.word	0x00030228

000d7f20 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <hal_i2c_write+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	6a1b      	ldr	r3, [r3, #32]
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030228 	.word	0x00030228

000d7f30 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <hal_i2c_available+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	00030228 	.word	0x00030228

000d7f40 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <hal_i2c_read+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	00030228 	.word	0x00030228

000d7f50 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <hal_i2c_peek+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	00030228 	.word	0x00030228

000d7f60 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <hal_i2c_flush+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	00030228 	.word	0x00030228

000d7f70 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <hal_i2c_is_enabled+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	00030228 	.word	0x00030228

000d7f80 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <hal_i2c_init+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	00030228 	.word	0x00030228

000d7f90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <inet_inet_ntop+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	695b      	ldr	r3, [r3, #20]
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	00030264 	.word	0x00030264

000d7fa0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <netdb_freeaddrinfo+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	689b      	ldr	r3, [r3, #8]
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	00030268 	.word	0x00030268

000d7fb0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <netdb_getaddrinfo+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	68db      	ldr	r3, [r3, #12]
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	00030268 	.word	0x00030268

000d7fc0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <hal_spi_begin+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	681b      	ldr	r3, [r3, #0]
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	00030230 	.word	0x00030230

000d7fd0 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <hal_spi_set_data_mode+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	68db      	ldr	r3, [r3, #12]
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	00030230 	.word	0x00030230

000d7fe0 <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <hal_spi_transfer+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	695b      	ldr	r3, [r3, #20]
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	00030230 	.word	0x00030230

000d7ff0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <hal_spi_init+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	69db      	ldr	r3, [r3, #28]
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	00030230 	.word	0x00030230

000d8000 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <hal_spi_is_enabled+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	6a1b      	ldr	r3, [r3, #32]
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	00030230 	.word	0x00030230

000d8010 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <hal_spi_info+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	00030230 	.word	0x00030230

000d8020 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <hal_spi_transfer_dma+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	00030230 	.word	0x00030230

000d8030 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <hal_spi_transfer_dma_status+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	00030230 	.word	0x00030230

000d8040 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b02      	ldr	r3, [pc, #8]	; (d804c <hal_spi_set_settings+0xc>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8048:	9301      	str	r3, [sp, #4]
   d804a:	bd08      	pop	{r3, pc}
   d804c:	00030230 	.word	0x00030230

000d8050 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8050:	b508      	push	{r3, lr}
   d8052:	4b02      	ldr	r3, [pc, #8]	; (d805c <hal_spi_acquire+0xc>)
   d8054:	681b      	ldr	r3, [r3, #0]
   d8056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	bd08      	pop	{r3, pc}
   d805c:	00030230 	.word	0x00030230

000d8060 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8060:	b508      	push	{r3, lr}
   d8062:	4b02      	ldr	r3, [pc, #8]	; (d806c <hal_spi_release+0xc>)
   d8064:	681b      	ldr	r3, [r3, #0]
   d8066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8068:	9301      	str	r3, [sp, #4]
   d806a:	bd08      	pop	{r3, pc}
   d806c:	00030230 	.word	0x00030230

000d8070 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8070:	b508      	push	{r3, lr}
   d8072:	4b02      	ldr	r3, [pc, #8]	; (d807c <hal_usart_init+0xc>)
   d8074:	681b      	ldr	r3, [r3, #0]
   d8076:	681b      	ldr	r3, [r3, #0]
   d8078:	9301      	str	r3, [sp, #4]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	0003023c 	.word	0x0003023c

000d8080 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8080:	b508      	push	{r3, lr}
   d8082:	4b02      	ldr	r3, [pc, #8]	; (d808c <hal_usart_write+0xc>)
   d8084:	681b      	ldr	r3, [r3, #0]
   d8086:	68db      	ldr	r3, [r3, #12]
   d8088:	9301      	str	r3, [sp, #4]
   d808a:	bd08      	pop	{r3, pc}
   d808c:	0003023c 	.word	0x0003023c

000d8090 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8090:	b508      	push	{r3, lr}
   d8092:	4b02      	ldr	r3, [pc, #8]	; (d809c <hal_usart_available+0xc>)
   d8094:	681b      	ldr	r3, [r3, #0]
   d8096:	691b      	ldr	r3, [r3, #16]
   d8098:	9301      	str	r3, [sp, #4]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	0003023c 	.word	0x0003023c

000d80a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d80a0:	b508      	push	{r3, lr}
   d80a2:	4b02      	ldr	r3, [pc, #8]	; (d80ac <hal_usart_read+0xc>)
   d80a4:	681b      	ldr	r3, [r3, #0]
   d80a6:	695b      	ldr	r3, [r3, #20]
   d80a8:	9301      	str	r3, [sp, #4]
   d80aa:	bd08      	pop	{r3, pc}
   d80ac:	0003023c 	.word	0x0003023c

000d80b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d80b0:	b508      	push	{r3, lr}
   d80b2:	4b02      	ldr	r3, [pc, #8]	; (d80bc <hal_usart_peek+0xc>)
   d80b4:	681b      	ldr	r3, [r3, #0]
   d80b6:	699b      	ldr	r3, [r3, #24]
   d80b8:	9301      	str	r3, [sp, #4]
   d80ba:	bd08      	pop	{r3, pc}
   d80bc:	0003023c 	.word	0x0003023c

000d80c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d80c0:	b508      	push	{r3, lr}
   d80c2:	4b02      	ldr	r3, [pc, #8]	; (d80cc <hal_usart_flush+0xc>)
   d80c4:	681b      	ldr	r3, [r3, #0]
   d80c6:	69db      	ldr	r3, [r3, #28]
   d80c8:	9301      	str	r3, [sp, #4]
   d80ca:	bd08      	pop	{r3, pc}
   d80cc:	0003023c 	.word	0x0003023c

000d80d0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d80d0:	b508      	push	{r3, lr}
   d80d2:	4b02      	ldr	r3, [pc, #8]	; (d80dc <hal_usart_is_enabled+0xc>)
   d80d4:	681b      	ldr	r3, [r3, #0]
   d80d6:	6a1b      	ldr	r3, [r3, #32]
   d80d8:	9301      	str	r3, [sp, #4]
   d80da:	bd08      	pop	{r3, pc}
   d80dc:	0003023c 	.word	0x0003023c

000d80e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d80e0:	b508      	push	{r3, lr}
   d80e2:	4b02      	ldr	r3, [pc, #8]	; (d80ec <hal_usart_available_data_for_write+0xc>)
   d80e4:	681b      	ldr	r3, [r3, #0]
   d80e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d80e8:	9301      	str	r3, [sp, #4]
   d80ea:	bd08      	pop	{r3, pc}
   d80ec:	0003023c 	.word	0x0003023c

000d80f0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d80f0:	b508      	push	{r3, lr}
   d80f2:	4b02      	ldr	r3, [pc, #8]	; (d80fc <hal_usart_begin_config+0xc>)
   d80f4:	681b      	ldr	r3, [r3, #0]
   d80f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d80f8:	9301      	str	r3, [sp, #4]
   d80fa:	bd08      	pop	{r3, pc}
   d80fc:	0003023c 	.word	0x0003023c

000d8100 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8100:	b508      	push	{r3, lr}
   d8102:	4b02      	ldr	r3, [pc, #8]	; (d810c <HAL_USB_USART_Init+0xc>)
   d8104:	681b      	ldr	r3, [r3, #0]
   d8106:	681b      	ldr	r3, [r3, #0]
   d8108:	9301      	str	r3, [sp, #4]
   d810a:	bd08      	pop	{r3, pc}
   d810c:	0003024c 	.word	0x0003024c

000d8110 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8110:	b508      	push	{r3, lr}
   d8112:	4b02      	ldr	r3, [pc, #8]	; (d811c <HAL_USB_USART_Begin+0xc>)
   d8114:	681b      	ldr	r3, [r3, #0]
   d8116:	685b      	ldr	r3, [r3, #4]
   d8118:	9301      	str	r3, [sp, #4]
   d811a:	bd08      	pop	{r3, pc}
   d811c:	0003024c 	.word	0x0003024c

000d8120 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8120:	b508      	push	{r3, lr}
   d8122:	4b02      	ldr	r3, [pc, #8]	; (d812c <HAL_USB_USART_Available_Data+0xc>)
   d8124:	681b      	ldr	r3, [r3, #0]
   d8126:	691b      	ldr	r3, [r3, #16]
   d8128:	9301      	str	r3, [sp, #4]
   d812a:	bd08      	pop	{r3, pc}
   d812c:	0003024c 	.word	0x0003024c

000d8130 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8130:	b508      	push	{r3, lr}
   d8132:	4b02      	ldr	r3, [pc, #8]	; (d813c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8134:	681b      	ldr	r3, [r3, #0]
   d8136:	695b      	ldr	r3, [r3, #20]
   d8138:	9301      	str	r3, [sp, #4]
   d813a:	bd08      	pop	{r3, pc}
   d813c:	0003024c 	.word	0x0003024c

000d8140 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8140:	b508      	push	{r3, lr}
   d8142:	4b02      	ldr	r3, [pc, #8]	; (d814c <HAL_USB_USART_Receive_Data+0xc>)
   d8144:	681b      	ldr	r3, [r3, #0]
   d8146:	699b      	ldr	r3, [r3, #24]
   d8148:	9301      	str	r3, [sp, #4]
   d814a:	bd08      	pop	{r3, pc}
   d814c:	0003024c 	.word	0x0003024c

000d8150 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8150:	b508      	push	{r3, lr}
   d8152:	4b02      	ldr	r3, [pc, #8]	; (d815c <HAL_USB_USART_Send_Data+0xc>)
   d8154:	681b      	ldr	r3, [r3, #0]
   d8156:	69db      	ldr	r3, [r3, #28]
   d8158:	9301      	str	r3, [sp, #4]
   d815a:	bd08      	pop	{r3, pc}
   d815c:	0003024c 	.word	0x0003024c

000d8160 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8160:	b508      	push	{r3, lr}
   d8162:	4b02      	ldr	r3, [pc, #8]	; (d816c <HAL_USB_USART_Flush_Data+0xc>)
   d8164:	681b      	ldr	r3, [r3, #0]
   d8166:	6a1b      	ldr	r3, [r3, #32]
   d8168:	9301      	str	r3, [sp, #4]
   d816a:	bd08      	pop	{r3, pc}
   d816c:	0003024c 	.word	0x0003024c

000d8170 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8170:	b508      	push	{r3, lr}
   d8172:	4b02      	ldr	r3, [pc, #8]	; (d817c <panic_+0xc>)
   d8174:	681b      	ldr	r3, [r3, #0]
   d8176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8178:	9301      	str	r3, [sp, #4]
   d817a:	bd08      	pop	{r3, pc}
   d817c:	00030260 	.word	0x00030260

000d8180 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8180:	b508      	push	{r3, lr}
   d8182:	4b03      	ldr	r3, [pc, #12]	; (d8190 <diag_get_source+0x10>)
   d8184:	681b      	ldr	r3, [r3, #0]
   d8186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d818a:	9301      	str	r3, [sp, #4]
   d818c:	bd08      	pop	{r3, pc}
   d818e:	0000      	.short	0x0000
   d8190:	00030260 	.word	0x00030260

000d8194 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8194:	b508      	push	{r3, lr}
   d8196:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <system_mode+0xc>)
   d8198:	681b      	ldr	r3, [r3, #0]
   d819a:	681b      	ldr	r3, [r3, #0]
   d819c:	9301      	str	r3, [sp, #4]
   d819e:	bd08      	pop	{r3, pc}
   d81a0:	00030220 	.word	0x00030220

000d81a4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d81a4:	b508      	push	{r3, lr}
   d81a6:	4b02      	ldr	r3, [pc, #8]	; (d81b0 <set_system_mode+0xc>)
   d81a8:	681b      	ldr	r3, [r3, #0]
   d81aa:	685b      	ldr	r3, [r3, #4]
   d81ac:	9301      	str	r3, [sp, #4]
   d81ae:	bd08      	pop	{r3, pc}
   d81b0:	00030220 	.word	0x00030220

000d81b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d81b4:	b508      	push	{r3, lr}
   d81b6:	4b02      	ldr	r3, [pc, #8]	; (d81c0 <system_delay_ms+0xc>)
   d81b8:	681b      	ldr	r3, [r3, #0]
   d81ba:	695b      	ldr	r3, [r3, #20]
   d81bc:	9301      	str	r3, [sp, #4]
   d81be:	bd08      	pop	{r3, pc}
   d81c0:	00030220 	.word	0x00030220

000d81c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d81c4:	b508      	push	{r3, lr}
   d81c6:	4b02      	ldr	r3, [pc, #8]	; (d81d0 <application_thread_current+0xc>)
   d81c8:	681b      	ldr	r3, [r3, #0]
   d81ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d81cc:	9301      	str	r3, [sp, #4]
   d81ce:	bd08      	pop	{r3, pc}
   d81d0:	00030220 	.word	0x00030220

000d81d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d81d4:	b508      	push	{r3, lr}
   d81d6:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <application_thread_invoke+0xc>)
   d81d8:	681b      	ldr	r3, [r3, #0]
   d81da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	bd08      	pop	{r3, pc}
   d81e0:	00030220 	.word	0x00030220

000d81e4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d81e4:	b508      	push	{r3, lr}
   d81e6:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <system_thread_get_state+0xc>)
   d81e8:	681b      	ldr	r3, [r3, #0]
   d81ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81ec:	9301      	str	r3, [sp, #4]
   d81ee:	bd08      	pop	{r3, pc}
   d81f0:	00030220 	.word	0x00030220

000d81f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d81f4:	b508      	push	{r3, lr}
   d81f6:	4b03      	ldr	r3, [pc, #12]	; (d8204 <system_ctrl_set_app_request_handler+0x10>)
   d81f8:	681b      	ldr	r3, [r3, #0]
   d81fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d81fe:	9301      	str	r3, [sp, #4]
   d8200:	bd08      	pop	{r3, pc}
   d8202:	0000      	.short	0x0000
   d8204:	00030220 	.word	0x00030220

000d8208 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8208:	b508      	push	{r3, lr}
   d820a:	4b03      	ldr	r3, [pc, #12]	; (d8218 <system_ctrl_set_result+0x10>)
   d820c:	681b      	ldr	r3, [r3, #0]
   d820e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8212:	9301      	str	r3, [sp, #4]
   d8214:	bd08      	pop	{r3, pc}
   d8216:	0000      	.short	0x0000
   d8218:	00030220 	.word	0x00030220

000d821c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <spark_process+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	689b      	ldr	r3, [r3, #8]
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030244 	.word	0x00030244

000d822c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <spark_cloud_flag_connected+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	695b      	ldr	r3, [r3, #20]
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	00030244 	.word	0x00030244

000d823c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <spark_deviceID+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	69db      	ldr	r3, [r3, #28]
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030244 	.word	0x00030244

000d824c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <spark_send_event+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	6a1b      	ldr	r3, [r3, #32]
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030244 	.word	0x00030244

000d825c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <spark_sync_time+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030244 	.word	0x00030244

000d826c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <spark_sync_time_pending+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	00030244 	.word	0x00030244

000d827c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	00030244 	.word	0x00030244

000d828c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <network_connect+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	685b      	ldr	r3, [r3, #4]
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030240 	.word	0x00030240

000d829c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <network_connecting+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	689b      	ldr	r3, [r3, #8]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030240 	.word	0x00030240

000d82ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <network_disconnect+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	68db      	ldr	r3, [r3, #12]
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030240 	.word	0x00030240

000d82bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <network_ready+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	691b      	ldr	r3, [r3, #16]
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030240 	.word	0x00030240

000d82cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <network_on+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	695b      	ldr	r3, [r3, #20]
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030240 	.word	0x00030240

000d82dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <network_off+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	699b      	ldr	r3, [r3, #24]
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030240 	.word	0x00030240

000d82ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <network_listen+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	69db      	ldr	r3, [r3, #28]
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	00030240 	.word	0x00030240

000d82fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <network_listening+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	6a1b      	ldr	r3, [r3, #32]
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	00030240 	.word	0x00030240

000d830c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <network_set_listen_timeout+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	00030240 	.word	0x00030240

000d831c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <network_get_listen_timeout+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	00030240 	.word	0x00030240

000d832c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <network_is_on+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	00030240 	.word	0x00030240

000d833c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <network_is_off+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	00030240 	.word	0x00030240

000d834c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <malloc+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	681b      	ldr	r3, [r3, #0]
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	0003021c 	.word	0x0003021c

000d835c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <free+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	685b      	ldr	r3, [r3, #4]
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	0003021c 	.word	0x0003021c

000d836c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d836c:	b508      	push	{r3, lr}
   d836e:	4b02      	ldr	r3, [pc, #8]	; (d8378 <realloc+0xc>)
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	689b      	ldr	r3, [r3, #8]
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	bd08      	pop	{r3, pc}
   d8378:	0003021c 	.word	0x0003021c

000d837c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d837c:	b508      	push	{r3, lr}
   d837e:	4b02      	ldr	r3, [pc, #8]	; (d8388 <siprintf+0xc>)
   d8380:	681b      	ldr	r3, [r3, #0]
   d8382:	691b      	ldr	r3, [r3, #16]
   d8384:	9301      	str	r3, [sp, #4]
   d8386:	bd08      	pop	{r3, pc}
   d8388:	0003021c 	.word	0x0003021c

000d838c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d838c:	b508      	push	{r3, lr}
   d838e:	4b02      	ldr	r3, [pc, #8]	; (d8398 <snprintf+0xc>)
   d8390:	681b      	ldr	r3, [r3, #0]
   d8392:	69db      	ldr	r3, [r3, #28]
   d8394:	9301      	str	r3, [sp, #4]
   d8396:	bd08      	pop	{r3, pc}
   d8398:	0003021c 	.word	0x0003021c

000d839c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d839c:	b508      	push	{r3, lr}
   d839e:	4b02      	ldr	r3, [pc, #8]	; (d83a8 <vsnprintf+0xc>)
   d83a0:	681b      	ldr	r3, [r3, #0]
   d83a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83a4:	9301      	str	r3, [sp, #4]
   d83a6:	bd08      	pop	{r3, pc}
   d83a8:	0003021c 	.word	0x0003021c

000d83ac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d83ac:	b508      	push	{r3, lr}
   d83ae:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <abort+0xc>)
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83b4:	9301      	str	r3, [sp, #4]
   d83b6:	bd08      	pop	{r3, pc}
   d83b8:	0003021c 	.word	0x0003021c

000d83bc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d83bc:	b508      	push	{r3, lr}
   d83be:	4b02      	ldr	r3, [pc, #8]	; (d83c8 <_malloc_r+0xc>)
   d83c0:	681b      	ldr	r3, [r3, #0]
   d83c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83c4:	9301      	str	r3, [sp, #4]
   d83c6:	bd08      	pop	{r3, pc}
   d83c8:	0003021c 	.word	0x0003021c

000d83cc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d83cc:	b508      	push	{r3, lr}
   d83ce:	4b02      	ldr	r3, [pc, #8]	; (d83d8 <newlib_impure_ptr_callback+0xc>)
   d83d0:	681b      	ldr	r3, [r3, #0]
   d83d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d83d4:	9301      	str	r3, [sp, #4]
   d83d6:	bd08      	pop	{r3, pc}
   d83d8:	0003021c 	.word	0x0003021c

000d83dc <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d83dc:	b508      	push	{r3, lr}
   d83de:	4b02      	ldr	r3, [pc, #8]	; (d83e8 <strftime+0xc>)
   d83e0:	681b      	ldr	r3, [r3, #0]
   d83e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d83e4:	9301      	str	r3, [sp, #4]
   d83e6:	bd08      	pop	{r3, pc}
   d83e8:	0003021c 	.word	0x0003021c

000d83ec <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d83ec:	b508      	push	{r3, lr}
   d83ee:	4b02      	ldr	r3, [pc, #8]	; (d83f8 <localtime_r+0xc>)
   d83f0:	681b      	ldr	r3, [r3, #0]
   d83f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d83f4:	9301      	str	r3, [sp, #4]
   d83f6:	bd08      	pop	{r3, pc}
   d83f8:	0003021c 	.word	0x0003021c

000d83fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d83fc:	2100      	movs	r1, #0
   d83fe:	f7ff bed9 	b.w	d81b4 <system_delay_ms>

000d8402 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8402:	b510      	push	{r4, lr}
      if (_M_empty())
   d8404:	6883      	ldr	r3, [r0, #8]
   d8406:	4604      	mov	r4, r0
   d8408:	b90b      	cbnz	r3, d840e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d840a:	f001 ff1b 	bl	da244 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d840e:	68c3      	ldr	r3, [r0, #12]
   d8410:	4798      	blx	r3
      if (_M_manager)
   d8412:	68a3      	ldr	r3, [r4, #8]
   d8414:	b11b      	cbz	r3, d841e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8416:	2203      	movs	r2, #3
   d8418:	4621      	mov	r1, r4
   d841a:	4620      	mov	r0, r4
   d841c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d841e:	4620      	mov	r0, r4
   d8420:	2110      	movs	r1, #16
}
   d8422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8426:	f001 bf09 	b.w	da23c <_ZdlPvj>

000d842a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d842a:	680b      	ldr	r3, [r1, #0]
   d842c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d842e:	b113      	cbz	r3, d8436 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8430:	685a      	ldr	r2, [r3, #4]
   d8432:	3201      	adds	r2, #1
   d8434:	605a      	str	r2, [r3, #4]
      }
   d8436:	4770      	bx	lr

000d8438 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8438:	4802      	ldr	r0, [pc, #8]	; (d8444 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d843a:	2300      	movs	r3, #0
   d843c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d843e:	f7ff bcdf 	b.w	d7e00 <os_mutex_recursive_create>
   d8442:	bf00      	nop
   d8444:	2003e54c 	.word	0x2003e54c

000d8448 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8448:	2200      	movs	r2, #0
   d844a:	6840      	ldr	r0, [r0, #4]
   d844c:	4611      	mov	r1, r2
   d844e:	f7ff bf35 	b.w	d82bc <network_ready>

000d8452 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8452:	2200      	movs	r2, #0
   d8454:	6840      	ldr	r0, [r0, #4]
   d8456:	4611      	mov	r1, r2
   d8458:	f7ff bf50 	b.w	d82fc <network_listening>

000d845c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d845c:	2200      	movs	r2, #0
   d845e:	6840      	ldr	r0, [r0, #4]
   d8460:	4611      	mov	r1, r2
   d8462:	f7ff bf5b 	b.w	d831c <network_get_listen_timeout>

000d8466 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8466:	6840      	ldr	r0, [r0, #4]
   d8468:	2200      	movs	r2, #0
   d846a:	f7ff bf4f 	b.w	d830c <network_set_listen_timeout>

000d846e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d846e:	6840      	ldr	r0, [r0, #4]
   d8470:	2200      	movs	r2, #0
   d8472:	f081 0101 	eor.w	r1, r1, #1
   d8476:	f7ff bf39 	b.w	d82ec <network_listen>

000d847a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d847a:	2300      	movs	r3, #0
   d847c:	6840      	ldr	r0, [r0, #4]
   d847e:	461a      	mov	r2, r3
   d8480:	4619      	mov	r1, r3
   d8482:	f7ff bf2b 	b.w	d82dc <network_off>

000d8486 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8486:	2300      	movs	r3, #0
   d8488:	6840      	ldr	r0, [r0, #4]
   d848a:	461a      	mov	r2, r3
   d848c:	4619      	mov	r1, r3
   d848e:	f7ff bf1d 	b.w	d82cc <network_on>

000d8492 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8492:	2200      	movs	r2, #0
   d8494:	6840      	ldr	r0, [r0, #4]
   d8496:	4611      	mov	r1, r2
   d8498:	f7ff bf00 	b.w	d829c <network_connecting>

000d849c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d849c:	6840      	ldr	r0, [r0, #4]
   d849e:	2200      	movs	r2, #0
   d84a0:	2102      	movs	r1, #2
   d84a2:	f7ff bf03 	b.w	d82ac <network_disconnect>

000d84a6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d84a6:	2300      	movs	r3, #0
   d84a8:	6840      	ldr	r0, [r0, #4]
   d84aa:	461a      	mov	r2, r3
   d84ac:	f7ff beee 	b.w	d828c <network_connect>

000d84b0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d84b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d84b2:	4b1b      	ldr	r3, [pc, #108]	; (d8520 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d84b4:	6003      	str	r3, [r0, #0]
   d84b6:	2500      	movs	r5, #0
   d84b8:	460f      	mov	r7, r1
   d84ba:	3330      	adds	r3, #48	; 0x30
   d84bc:	2618      	movs	r6, #24
   d84be:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d84c2:	b089      	sub	sp, #36	; 0x24
   d84c4:	6043      	str	r3, [r0, #4]
   d84c6:	4632      	mov	r2, r6
   d84c8:	4629      	mov	r1, r5
   d84ca:	4604      	mov	r4, r0
   d84cc:	3010      	adds	r0, #16
   d84ce:	f002 fdaa 	bl	db026 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d84d2:	6878      	ldr	r0, [r7, #4]
   d84d4:	462a      	mov	r2, r5
   d84d6:	4629      	mov	r1, r5
   d84d8:	f7ff fef0 	bl	d82bc <network_ready>
   d84dc:	b918      	cbnz	r0, d84e6 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d84de:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d84e0:	4620      	mov	r0, r4
   d84e2:	b009      	add	sp, #36	; 0x24
   d84e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d84e6:	4629      	mov	r1, r5
   d84e8:	4632      	mov	r2, r6
   d84ea:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d84ec:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d84f0:	f002 fd99 	bl	db026 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d84f4:	a902      	add	r1, sp, #8
   d84f6:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d84f8:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d84fc:	f7ff fc38 	bl	d7d70 <cellular_signal>
   d8500:	b110      	cbz	r0, d8508 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d8502:	2301      	movs	r3, #1
   d8504:	60a3      	str	r3, [r4, #8]
            return sig;
   d8506:	e7eb      	b.n	d84e0 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8508:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d850a:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d850c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d850e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8510:	b90b      	cbnz	r3, d8516 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d8512:	2302      	movs	r3, #2
   d8514:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d8516:	a902      	add	r1, sp, #8
   d8518:	4620      	mov	r0, r4
   d851a:	f000 f8c0 	bl	d869e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d851e:	e7df      	b.n	d84e0 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d8520:	000dde88 	.word	0x000dde88

000d8524 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8524:	4b08      	ldr	r3, [pc, #32]	; (d8548 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8526:	b510      	push	{r4, lr}
   d8528:	2428      	movs	r4, #40	; 0x28
   d852a:	4622      	mov	r2, r4
   d852c:	4618      	mov	r0, r3
   d852e:	2100      	movs	r1, #0
   d8530:	f002 fd79 	bl	db026 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8534:	4b05      	ldr	r3, [pc, #20]	; (d854c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8536:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d853c:	6042      	str	r2, [r0, #4]
   d853e:	2204      	movs	r2, #4
   d8540:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8542:	4a03      	ldr	r2, [pc, #12]	; (d8550 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8544:	601a      	str	r2, [r3, #0]
   d8546:	bd10      	pop	{r4, pc}
   d8548:	2003e558 	.word	0x2003e558
   d854c:	2003e550 	.word	0x2003e550
   d8550:	000dde4c 	.word	0x000dde4c

000d8554 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8554:	4770      	bx	lr

000d8556 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8556:	7d00      	ldrb	r0, [r0, #20]
   d8558:	4770      	bx	lr

000d855a <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d855a:	7d03      	ldrb	r3, [r0, #20]
   d855c:	b14b      	cbz	r3, d8572 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d855e:	6983      	ldr	r3, [r0, #24]
   d8560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8564:	d005      	beq.n	d8572 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d8566:	6a00      	ldr	r0, [r0, #32]
   d8568:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d856c:	bf18      	it	ne
   d856e:	2001      	movne	r0, #1
   d8570:	4770      	bx	lr
   d8572:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d8574:	4770      	bx	lr

000d8576 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d8576:	6803      	ldr	r3, [r0, #0]
   d8578:	6a1b      	ldr	r3, [r3, #32]
   d857a:	4718      	bx	r3

000d857c <_ZN14CellularSignalD0Ev>:
   d857c:	b510      	push	{r4, lr}
   d857e:	2128      	movs	r1, #40	; 0x28
   d8580:	4604      	mov	r4, r0
   d8582:	f001 fe5b 	bl	da23c <_ZdlPvj>
   d8586:	4620      	mov	r0, r4
   d8588:	bd10      	pop	{r4, pc}
	...

000d858c <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d858c:	7d03      	ldrb	r3, [r0, #20]
   d858e:	b17b      	cbz	r3, d85b0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8590:	69c3      	ldr	r3, [r0, #28]
   d8592:	2b00      	cmp	r3, #0
   d8594:	db0c      	blt.n	d85b0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8596:	ee07 3a90 	vmov	s15, r3
   d859a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d85b8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d859e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85a2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85a6:	eddf 7a05 	vldr	s15, [pc, #20]	; d85bc <_ZNK14CellularSignal11getStrengthEv+0x30>
   d85aa:	ee20 0a27 	vmul.f32	s0, s0, s15
   d85ae:	4770      	bx	lr
    return -1.0f;
   d85b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d85b4:	4770      	bx	lr
   d85b6:	bf00      	nop
   d85b8:	477fff00 	.word	0x477fff00
   d85bc:	42c80000 	.word	0x42c80000

000d85c0 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d85c0:	7d03      	ldrb	r3, [r0, #20]
   d85c2:	b163      	cbz	r3, d85de <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d85c4:	6983      	ldr	r3, [r0, #24]
   d85c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d85ca:	d008      	beq.n	d85de <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d85cc:	ee07 3a90 	vmov	s15, r3
   d85d0:	ed9f 7a04 	vldr	s14, [pc, #16]	; d85e4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d85d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85d8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85dc:	4770      	bx	lr
    return 0.0f;
   d85de:	ed9f 0a02 	vldr	s0, [pc, #8]	; d85e8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d85e2:	4770      	bx	lr
   d85e4:	42c80000 	.word	0x42c80000
   d85e8:	00000000 	.word	0x00000000

000d85ec <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d85ec:	7d03      	ldrb	r3, [r0, #20]
   d85ee:	b17b      	cbz	r3, d8610 <_ZNK14CellularSignal10getQualityEv+0x24>
   d85f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d85f2:	2b00      	cmp	r3, #0
   d85f4:	db0c      	blt.n	d8610 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d85f6:	ee07 3a90 	vmov	s15, r3
   d85fa:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8618 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d85fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8602:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8606:	eddf 7a05 	vldr	s15, [pc, #20]	; d861c <_ZNK14CellularSignal10getQualityEv+0x30>
   d860a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d860e:	4770      	bx	lr
    return -1.0f;
   d8610:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8614:	4770      	bx	lr
   d8616:	bf00      	nop
   d8618:	477fff00 	.word	0x477fff00
   d861c:	42c80000 	.word	0x42c80000

000d8620 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8620:	7d03      	ldrb	r3, [r0, #20]
   d8622:	b163      	cbz	r3, d863e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8624:	6a03      	ldr	r3, [r0, #32]
   d8626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d862a:	d008      	beq.n	d863e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d862c:	ee07 3a90 	vmov	s15, r3
   d8630:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8644 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8638:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d863c:	4770      	bx	lr
    return 0.0f;
   d863e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8648 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8642:	4770      	bx	lr
   d8644:	42c80000 	.word	0x42c80000
   d8648:	00000000 	.word	0x00000000

000d864c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d864c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d864e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8650:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d8652:	da0a      	bge.n	d866a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8654:	212d      	movs	r1, #45	; 0x2d
   d8656:	f000 fce1 	bl	d901c <_ZN5Print5printEc>
            val = -n;
   d865a:	4261      	negs	r1, r4
            t = print('-');
   d865c:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d865e:	220a      	movs	r2, #10
   d8660:	4630      	mov	r0, r6
   d8662:	f000 fcf4 	bl	d904e <_ZN5Print11printNumberEmh>
    }
}
   d8666:	4428      	add	r0, r5
   d8668:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d866a:	4621      	mov	r1, r4
        size_t t = 0;
   d866c:	2500      	movs	r5, #0
   d866e:	e7f6      	b.n	d865e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8670 <_ZNK14CellularSignal7printToER5Print>:
{
   d8670:	b570      	push	{r4, r5, r6, lr}
   d8672:	460c      	mov	r4, r1
   d8674:	4605      	mov	r5, r0
   d8676:	6881      	ldr	r1, [r0, #8]
   d8678:	4620      	mov	r0, r4
   d867a:	f7ff ffe7 	bl	d864c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d867e:	212c      	movs	r1, #44	; 0x2c
   d8680:	4606      	mov	r6, r0
   d8682:	4620      	mov	r0, r4
   d8684:	f000 fcca 	bl	d901c <_ZN5Print5printEc>
   d8688:	68e9      	ldr	r1, [r5, #12]
   d868a:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d868c:	4620      	mov	r0, r4
   d868e:	f7ff ffdd 	bl	d864c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d8692:	4430      	add	r0, r6
   d8694:	bd70      	pop	{r4, r5, r6, pc}

000d8696 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8696:	f1a0 0004 	sub.w	r0, r0, #4
   d869a:	f7ff bfe9 	b.w	d8670 <_ZNK14CellularSignal7printToER5Print>

000d869e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d869e:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d86a0:	460d      	mov	r5, r1
   d86a2:	f100 0410 	add.w	r4, r0, #16
   d86a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d86a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d86aa:	e895 0003 	ldmia.w	r5, {r0, r1}
   d86ae:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d86b2:	2001      	movs	r0, #1
   d86b4:	bd30      	pop	{r4, r5, pc}

000d86b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d86b6:	4770      	bx	lr

000d86b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d86b8:	2000      	movs	r0, #0
   d86ba:	4770      	bx	lr

000d86bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d86bc:	b510      	push	{r4, lr}
   d86be:	2110      	movs	r1, #16
   d86c0:	4604      	mov	r4, r0
   d86c2:	f001 fdbb 	bl	da23c <_ZdlPvj>
   d86c6:	4620      	mov	r0, r4
   d86c8:	bd10      	pop	{r4, pc}

000d86ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d86ca:	b508      	push	{r3, lr}
      { delete this; }
   d86cc:	f7ff fff6 	bl	d86bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d86d0:	bd08      	pop	{r3, pc}

000d86d2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d86d2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d86d4:	2200      	movs	r2, #0
   d86d6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d86da:	6002      	str	r2, [r0, #0]
   d86dc:	8084      	strh	r4, [r0, #4]
   d86de:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d86e0:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d86e2:	680c      	ldr	r4, [r1, #0]
   d86e4:	8085      	strh	r5, [r0, #4]
   d86e6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d86e8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d86ea:	bd30      	pop	{r4, r5, pc}

000d86ec <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d86ec:	b510      	push	{r4, lr}
   d86ee:	4604      	mov	r4, r0
    free((void*)msg_);
   d86f0:	6800      	ldr	r0, [r0, #0]
   d86f2:	f7ff fe33 	bl	d835c <free>
}
   d86f6:	4620      	mov	r0, r4
   d86f8:	bd10      	pop	{r4, pc}

000d86fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d86fa:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d86fc:	68c4      	ldr	r4, [r0, #12]
   d86fe:	b1f4      	cbz	r4, d873e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8700:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8702:	2b02      	cmp	r3, #2
   d8704:	d103      	bne.n	d870e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8706:	f104 000c 	add.w	r0, r4, #12
   d870a:	f7ff ffef 	bl	d86ec <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d870e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8710:	b135      	cbz	r5, d8720 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8712:	4628      	mov	r0, r5
   d8714:	f7fb fdc6 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
   d8718:	2110      	movs	r1, #16
   d871a:	4628      	mov	r0, r5
   d871c:	f001 fd8e 	bl	da23c <_ZdlPvj>
   d8720:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8722:	b135      	cbz	r5, d8732 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8724:	4628      	mov	r0, r5
   d8726:	f7fb fdbd 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
   d872a:	2110      	movs	r1, #16
   d872c:	4628      	mov	r0, r5
   d872e:	f001 fd85 	bl	da23c <_ZdlPvj>
   d8732:	4620      	mov	r0, r4
   d8734:	2114      	movs	r1, #20
   d8736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d873a:	f001 bd7f 	b.w	da23c <_ZdlPvj>
   d873e:	bd38      	pop	{r3, r4, r5, pc}

000d8740 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8740:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8742:	460e      	mov	r6, r1
   d8744:	4604      	mov	r4, r0
   d8746:	f856 3b04 	ldr.w	r3, [r6], #4
   d874a:	9300      	str	r3, [sp, #0]
   d874c:	460d      	mov	r5, r1
   d874e:	a801      	add	r0, sp, #4
   d8750:	4631      	mov	r1, r6
   d8752:	f7ff fe6a 	bl	d842a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8756:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8758:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d875a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d875c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d875e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8760:	2300      	movs	r3, #0
   d8762:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8764:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8766:	f7fb fe65 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d876a:	4630      	mov	r0, r6
   d876c:	f7fb fe62 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8770:	4628      	mov	r0, r5
   d8772:	2108      	movs	r1, #8
   d8774:	f001 fd62 	bl	da23c <_ZdlPvj>
        return p;
    }
   d8778:	4620      	mov	r0, r4
   d877a:	b002      	add	sp, #8
   d877c:	bd70      	pop	{r4, r5, r6, pc}

000d877e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d877e:	b513      	push	{r0, r1, r4, lr}
   d8780:	460b      	mov	r3, r1
   d8782:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8784:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8788:	466c      	mov	r4, sp
   d878a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d878e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8792:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8796:	e894 0003 	ldmia.w	r4, {r0, r1}
   d879a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d879e:	b002      	add	sp, #8
   d87a0:	bd10      	pop	{r4, pc}

000d87a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d87a2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d87a4:	b510      	push	{r4, lr}
      if (_M_empty())
   d87a6:	b90a      	cbnz	r2, d87ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d87a8:	f001 fd4c 	bl	da244 <_ZSt25__throw_bad_function_callv>
    }
   d87ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87b0:	68c3      	ldr	r3, [r0, #12]
   d87b2:	4718      	bx	r3

000d87b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d87b4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d87b6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d87b8:	f100 0110 	add.w	r1, r0, #16
   d87bc:	f7ff fff1 	bl	d87a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d87c0:	bd08      	pop	{r3, pc}

000d87c2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d87c2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d87c4:	b510      	push	{r4, lr}
      if (_M_empty())
   d87c6:	b90a      	cbnz	r2, d87cc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d87c8:	f001 fd3c 	bl	da244 <_ZSt25__throw_bad_function_callv>
    }
   d87cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d87d0:	68c3      	ldr	r3, [r0, #12]
   d87d2:	4718      	bx	r3

000d87d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d87d4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d87d6:	6800      	ldr	r0, [r0, #0]
   d87d8:	f100 0110 	add.w	r1, r0, #16
   d87dc:	f7ff fff1 	bl	d87c2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d87e0:	bd08      	pop	{r3, pc}
	...

000d87e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d87e4:	b538      	push	{r3, r4, r5, lr}
   d87e6:	2300      	movs	r3, #0
   d87e8:	4604      	mov	r4, r0
   d87ea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d87ec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d87ee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d87f0:	f7fb fc51 	bl	d4096 <_Znwj>
   d87f4:	b128      	cbz	r0, d8802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d87f6:	2301      	movs	r3, #1
   d87f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d87fc:	4b02      	ldr	r3, [pc, #8]	; (d8808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d87fe:	6003      	str	r3, [r0, #0]
   d8800:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8802:	6020      	str	r0, [r4, #0]
	}
   d8804:	4620      	mov	r0, r4
   d8806:	bd38      	pop	{r3, r4, r5, pc}
   d8808:	000ddec4 	.word	0x000ddec4

000d880c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d880c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d880e:	2300      	movs	r3, #0
   d8810:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8812:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8814:	4604      	mov	r4, r0
   d8816:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8818:	b12b      	cbz	r3, d8826 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d881a:	2202      	movs	r2, #2
   d881c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d881e:	68eb      	ldr	r3, [r5, #12]
   d8820:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8822:	68ab      	ldr	r3, [r5, #8]
   d8824:	60a3      	str	r3, [r4, #8]
    }
   d8826:	4620      	mov	r0, r4
   d8828:	bd38      	pop	{r3, r4, r5, pc}
	...

000d882c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d882c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d882e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8830:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8832:	4668      	mov	r0, sp
   d8834:	f7ff ff4d 	bl	d86d2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8838:	f04f 0302 	mov.w	r3, #2
   d883c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8840:	2a00      	cmp	r2, #0
   d8842:	d103      	bne.n	d884c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8844:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8848:	2900      	cmp	r1, #0
   d884a:	d1f7      	bne.n	d883c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d884c:	d125      	bne.n	d889a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d884e:	f104 050c 	add.w	r5, r4, #12
   d8852:	4669      	mov	r1, sp
   d8854:	4628      	mov	r0, r5
   d8856:	f7ff ff3c 	bl	d86d2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d885a:	f3bf 8f5b 	dmb	ish
   d885e:	2301      	movs	r3, #1
   d8860:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8862:	2000      	movs	r0, #0
   d8864:	f104 0308 	add.w	r3, r4, #8
   d8868:	f3bf 8f5b 	dmb	ish
   d886c:	e853 6f00 	ldrex	r6, [r3]
   d8870:	e843 0200 	strex	r2, r0, [r3]
   d8874:	2a00      	cmp	r2, #0
   d8876:	d1f9      	bne.n	d886c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8878:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d887c:	b16e      	cbz	r6, d889a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d887e:	f7ff fca1 	bl	d81c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8882:	b178      	cbz	r0, d88a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8884:	4629      	mov	r1, r5
   d8886:	4630      	mov	r0, r6
   d8888:	f7ff ff8b 	bl	d87a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d888c:	4630      	mov	r0, r6
   d888e:	f7fb fd09 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8892:	2110      	movs	r1, #16
   d8894:	4630      	mov	r0, r6
   d8896:	f001 fcd1 	bl	da23c <_ZdlPvj>
        p_->setError(std::move(error));
   d889a:	4668      	mov	r0, sp
   d889c:	f7ff ff26 	bl	d86ec <_ZN8particle5ErrorD1Ev>
    }
   d88a0:	b009      	add	sp, #36	; 0x24
   d88a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d88a4:	4631      	mov	r1, r6
   d88a6:	a802      	add	r0, sp, #8
   d88a8:	f7ff ffb0 	bl	d880c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d88ac:	68e0      	ldr	r0, [r4, #12]
   d88ae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d88b2:	b108      	cbz	r0, d88b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d88b4:	f002 fbf6 	bl	db0a4 <strdup>
        type_(type) {
   d88b8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d88ba:	2010      	movs	r0, #16
   d88bc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d88c0:	f7fb fbe9 	bl	d4096 <_Znwj>
   d88c4:	4605      	mov	r5, r0
   d88c6:	b1e8      	cbz	r0, d8904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d88c8:	2700      	movs	r7, #0
   d88ca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d88cc:	2018      	movs	r0, #24
   d88ce:	f7fb fbe2 	bl	d4096 <_Znwj>
   d88d2:	4604      	mov	r4, r0
   d88d4:	b188      	cbz	r0, d88fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d88d6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d88d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d88da:	a802      	add	r0, sp, #8
   d88dc:	f7ff ff4f 	bl	d877e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d88e2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d88e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d88e8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d88ea:	a906      	add	r1, sp, #24
   d88ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d88ee:	60e3      	str	r3, [r4, #12]
   d88f0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d88f4:	9205      	str	r2, [sp, #20]
   d88f6:	f7ff feec 	bl	d86d2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d88fa:	4b08      	ldr	r3, [pc, #32]	; (d891c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d88fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d88fe:	4b08      	ldr	r3, [pc, #32]	; (d8920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8900:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8902:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8904:	a806      	add	r0, sp, #24
   d8906:	f7ff fef1 	bl	d86ec <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d890a:	a802      	add	r0, sp, #8
   d890c:	f7fb fcca 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8910:	2200      	movs	r2, #0
   d8912:	4629      	mov	r1, r5
   d8914:	4803      	ldr	r0, [pc, #12]	; (d8924 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8916:	f7ff fc5d 	bl	d81d4 <application_thread_invoke>
   d891a:	e7b7      	b.n	d888c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d891c:	000d87b5 	.word	0x000d87b5
   d8920:	000d8a4d 	.word	0x000d8a4d
   d8924:	000d8403 	.word	0x000d8403

000d8928 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d892c:	b08a      	sub	sp, #40	; 0x28
   d892e:	4605      	mov	r5, r0
   d8930:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8934:	460c      	mov	r4, r1
   d8936:	4617      	mov	r7, r2
   d8938:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d893a:	f7ff fc77 	bl	d822c <spark_cloud_flag_connected>
   d893e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8940:	4682      	mov	sl, r0
   d8942:	bb38      	cbnz	r0, d8994 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8944:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8948:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d894a:	a905      	add	r1, sp, #20
   d894c:	4630      	mov	r0, r6
   d894e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8952:	f7ff febe 	bl	d86d2 <_ZN8particle5ErrorC1EOS0_>
   d8956:	2014      	movs	r0, #20
   d8958:	f7fb fb9d 	bl	d4096 <_Znwj>
   d895c:	4604      	mov	r4, r0
   d895e:	b148      	cbz	r0, d8974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8960:	2302      	movs	r3, #2
   d8962:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8964:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8966:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d896a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d896c:	4631      	mov	r1, r6
   d896e:	300c      	adds	r0, #12
   d8970:	f7ff feaf 	bl	d86d2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8974:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8976:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8978:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d897c:	f7ff ff32 	bl	d87e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8980:	4630      	mov	r0, r6
   d8982:	f7ff feb3 	bl	d86ec <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8986:	a805      	add	r0, sp, #20
   d8988:	f7ff feb0 	bl	d86ec <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d898c:	4628      	mov	r0, r5
   d898e:	b00a      	add	sp, #40	; 0x28
   d8990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8994:	230c      	movs	r3, #12
   d8996:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d899a:	2014      	movs	r0, #20
   d899c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d89a0:	9307      	str	r3, [sp, #28]
   d89a2:	f7fb fb78 	bl	d4096 <_Znwj>
   d89a6:	4601      	mov	r1, r0
   d89a8:	b128      	cbz	r0, d89b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d89aa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d89ae:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d89b2:	f880 a001 	strb.w	sl, [r0, #1]
   d89b6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d89b8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d89ba:	f7ff ff13 	bl	d87e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d89be:	4b22      	ldr	r3, [pc, #136]	; (d8a48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d89c0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d89c2:	2008      	movs	r0, #8
   d89c4:	f7fb fb67 	bl	d4096 <_Znwj>
   d89c8:	4682      	mov	sl, r0
   d89ca:	b128      	cbz	r0, d89d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d89cc:	9b03      	ldr	r3, [sp, #12]
   d89ce:	f840 3b04 	str.w	r3, [r0], #4
   d89d2:	a904      	add	r1, sp, #16
   d89d4:	f7ff fd29 	bl	d842a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d89d8:	9600      	str	r6, [sp, #0]
   d89da:	fa5f f389 	uxtb.w	r3, r9
   d89de:	4642      	mov	r2, r8
   d89e0:	4639      	mov	r1, r7
   d89e2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d89e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d89e8:	f7ff fc30 	bl	d824c <spark_send_event>
   d89ec:	b9b8      	cbnz	r0, d8a1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d89ee:	9b03      	ldr	r3, [sp, #12]
   d89f0:	785b      	ldrb	r3, [r3, #1]
   d89f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d89f6:	b993      	cbnz	r3, d8a1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d89f8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d89fc:	a905      	add	r1, sp, #20
   d89fe:	a803      	add	r0, sp, #12
   d8a00:	9205      	str	r2, [sp, #20]
   d8a02:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a06:	f7ff ff11 	bl	d882c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8a0a:	a805      	add	r0, sp, #20
   d8a0c:	f7ff fe6e 	bl	d86ec <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8a10:	a805      	add	r0, sp, #20
   d8a12:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8a14:	f7ff fe94 	bl	d8740 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8a18:	a806      	add	r0, sp, #24
   d8a1a:	f7fb fd0b 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a1e:	9b03      	ldr	r3, [sp, #12]
   d8a20:	9305      	str	r3, [sp, #20]
   d8a22:	a904      	add	r1, sp, #16
   d8a24:	a806      	add	r0, sp, #24
   d8a26:	f7ff fd00 	bl	d842a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a2a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8a2c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a2e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8a30:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8a32:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8a34:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8a36:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8a38:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8a3a:	f7fb fcfb 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a3e:	a804      	add	r0, sp, #16
   d8a40:	f7fb fcf8 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8a44:	e7a2      	b.n	d898c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8a46:	bf00      	nop
   d8a48:	000d8b11 	.word	0x000d8b11

000d8a4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8a4c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8a50:	4605      	mov	r5, r0
	  switch (__op)
   d8a52:	d007      	beq.n	d8a64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8a54:	2a03      	cmp	r2, #3
   d8a56:	d018      	beq.n	d8a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8a58:	2a01      	cmp	r2, #1
   d8a5a:	d101      	bne.n	d8a60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8a5c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8a5e:	6003      	str	r3, [r0, #0]
	}
   d8a60:	2000      	movs	r0, #0
   d8a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a64:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8a66:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a68:	f7fb fb15 	bl	d4096 <_Znwj>
   d8a6c:	4604      	mov	r4, r0
   d8a6e:	b150      	cbz	r0, d8a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8a70:	4631      	mov	r1, r6
   d8a72:	f7ff fecb 	bl	d880c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8a76:	6930      	ldr	r0, [r6, #16]
   d8a78:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a7c:	b108      	cbz	r0, d8a82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8a7e:	f002 fb11 	bl	db0a4 <strdup>
        type_(type) {
   d8a82:	6120      	str	r0, [r4, #16]
   d8a84:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8a86:	602c      	str	r4, [r5, #0]
	}
   d8a88:	e7ea      	b.n	d8a60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a8a:	6804      	ldr	r4, [r0, #0]
   d8a8c:	2c00      	cmp	r4, #0
   d8a8e:	d0e7      	beq.n	d8a60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8a90:	f104 0010 	add.w	r0, r4, #16
   d8a94:	f7ff fe2a 	bl	d86ec <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8a98:	4620      	mov	r0, r4
   d8a9a:	f7fb fc03 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a9e:	2118      	movs	r1, #24
   d8aa0:	4620      	mov	r0, r4
   d8aa2:	f001 fbcb 	bl	da23c <_ZdlPvj>
   d8aa6:	e7db      	b.n	d8a60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8aa8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8aa8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8aaa:	2300      	movs	r3, #0
   d8aac:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8aae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8ab0:	4604      	mov	r4, r0
   d8ab2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8ab4:	b12b      	cbz	r3, d8ac2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8ab6:	2202      	movs	r2, #2
   d8ab8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8aba:	68eb      	ldr	r3, [r5, #12]
   d8abc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8abe:	68ab      	ldr	r3, [r5, #8]
   d8ac0:	60a3      	str	r3, [r4, #8]
    }
   d8ac2:	4620      	mov	r0, r4
   d8ac4:	bd38      	pop	{r3, r4, r5, pc}

000d8ac6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8ac6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8ac8:	b570      	push	{r4, r5, r6, lr}
   d8aca:	4604      	mov	r4, r0
	  switch (__op)
   d8acc:	d007      	beq.n	d8ade <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8ace:	2a03      	cmp	r2, #3
   d8ad0:	d012      	beq.n	d8af8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8ad2:	2a01      	cmp	r2, #1
   d8ad4:	d101      	bne.n	d8ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8ad6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8ad8:	6003      	str	r3, [r0, #0]
	}
   d8ada:	2000      	movs	r0, #0
   d8adc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ade:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8ae0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ae2:	f7fb fad8 	bl	d4096 <_Znwj>
   d8ae6:	4605      	mov	r5, r0
   d8ae8:	b120      	cbz	r0, d8af4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8aea:	4631      	mov	r1, r6
   d8aec:	f7ff ffdc 	bl	d8aa8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8af0:	7c33      	ldrb	r3, [r6, #16]
   d8af2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8af4:	6025      	str	r5, [r4, #0]
	}
   d8af6:	e7f0      	b.n	d8ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8af8:	6804      	ldr	r4, [r0, #0]
   d8afa:	2c00      	cmp	r4, #0
   d8afc:	d0ed      	beq.n	d8ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8afe:	4620      	mov	r0, r4
   d8b00:	f7fb fbd0 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8b04:	2114      	movs	r1, #20
   d8b06:	4620      	mov	r0, r4
   d8b08:	f001 fb98 	bl	da23c <_ZdlPvj>
   d8b0c:	e7e5      	b.n	d8ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8b10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8b12:	b089      	sub	sp, #36	; 0x24
   d8b14:	4604      	mov	r4, r0
   d8b16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8b18:	a801      	add	r0, sp, #4
   d8b1a:	4611      	mov	r1, r2
   d8b1c:	f7ff fe10 	bl	d8740 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8b20:	b1a4      	cbz	r4, d8b4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8b22:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8b24:	b11d      	cbz	r5, d8b2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8b26:	4628      	mov	r0, r5
   d8b28:	f002 fabc 	bl	db0a4 <strdup>
   d8b2c:	4605      	mov	r5, r0
   d8b2e:	a801      	add	r0, sp, #4
   d8b30:	a903      	add	r1, sp, #12
        type_(type) {
   d8b32:	9503      	str	r5, [sp, #12]
   d8b34:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8b38:	f7ff fe78 	bl	d882c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b3c:	a803      	add	r0, sp, #12
   d8b3e:	f7ff fdd5 	bl	d86ec <_ZN8particle5ErrorD1Ev>
   d8b42:	a802      	add	r0, sp, #8
   d8b44:	f7fb fc76 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8b48:	b009      	add	sp, #36	; 0x24
   d8b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8b4c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8b4e:	2301      	movs	r3, #1
   d8b50:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8b54:	2a00      	cmp	r2, #0
   d8b56:	d103      	bne.n	d8b60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8b58:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8b5c:	2900      	cmp	r1, #0
   d8b5e:	d1f7      	bne.n	d8b50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8b60:	d1ef      	bne.n	d8b42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8b62:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8b64:	f3bf 8f5b 	dmb	ish
   d8b68:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8b6a:	1d2b      	adds	r3, r5, #4
   d8b6c:	f3bf 8f5b 	dmb	ish
   d8b70:	e853 6f00 	ldrex	r6, [r3]
   d8b74:	e843 4200 	strex	r2, r4, [r3]
   d8b78:	2a00      	cmp	r2, #0
   d8b7a:	d1f9      	bne.n	d8b70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8b7c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8b80:	2e00      	cmp	r6, #0
   d8b82:	d0de      	beq.n	d8b42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8b84:	4620      	mov	r0, r4
   d8b86:	f7ff fb1d 	bl	d81c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8b8a:	4607      	mov	r7, r0
   d8b8c:	b160      	cbz	r0, d8ba8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8b8e:	f105 010c 	add.w	r1, r5, #12
   d8b92:	4630      	mov	r0, r6
   d8b94:	f7ff fe15 	bl	d87c2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8b98:	4630      	mov	r0, r6
   d8b9a:	f7fb fb83 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8b9e:	2110      	movs	r1, #16
   d8ba0:	4630      	mov	r0, r6
   d8ba2:	f001 fb4b 	bl	da23c <_ZdlPvj>
   d8ba6:	e7cc      	b.n	d8b42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8ba8:	4631      	mov	r1, r6
   d8baa:	a803      	add	r0, sp, #12
   d8bac:	f7ff ff7c 	bl	d8aa8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8bb0:	7b2b      	ldrb	r3, [r5, #12]
   d8bb2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8bb6:	2010      	movs	r0, #16
   d8bb8:	f7fb fa6d 	bl	d4096 <_Znwj>
   d8bbc:	4605      	mov	r5, r0
   d8bbe:	b1d0      	cbz	r0, d8bf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8bc0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8bc2:	2014      	movs	r0, #20
   d8bc4:	f7fb fa67 	bl	d4096 <_Znwj>
   d8bc8:	4604      	mov	r4, r0
   d8bca:	b178      	cbz	r0, d8bec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8bcc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8bce:	4601      	mov	r1, r0
   d8bd0:	a803      	add	r0, sp, #12
   d8bd2:	f7ff fdd4 	bl	d877e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8bd8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8bda:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bdc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8bde:	9205      	str	r2, [sp, #20]
   d8be0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8be2:	60e3      	str	r3, [r4, #12]
   d8be4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8be8:	9206      	str	r2, [sp, #24]
   d8bea:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8bec:	4b06      	ldr	r3, [pc, #24]	; (d8c08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8bee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8bf0:	4b06      	ldr	r3, [pc, #24]	; (d8c0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8bf2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8bf4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8bf6:	a803      	add	r0, sp, #12
   d8bf8:	f7fb fb54 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8bfc:	2200      	movs	r2, #0
   d8bfe:	4629      	mov	r1, r5
   d8c00:	4803      	ldr	r0, [pc, #12]	; (d8c10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8c02:	f7ff fae7 	bl	d81d4 <application_thread_invoke>
   d8c06:	e7c7      	b.n	d8b98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8c08:	000d87d5 	.word	0x000d87d5
   d8c0c:	000d8ac7 	.word	0x000d8ac7
   d8c10:	000d8403 	.word	0x000d8403

000d8c14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8c14:	2200      	movs	r2, #0
   d8c16:	6840      	ldr	r0, [r0, #4]
   d8c18:	4611      	mov	r1, r2
   d8c1a:	f7ff bb6f 	b.w	d82fc <network_listening>

000d8c1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8c1e:	2200      	movs	r2, #0
   d8c20:	6840      	ldr	r0, [r0, #4]
   d8c22:	4611      	mov	r1, r2
   d8c24:	f7ff bb7a 	b.w	d831c <network_get_listen_timeout>

000d8c28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8c28:	6840      	ldr	r0, [r0, #4]
   d8c2a:	2200      	movs	r2, #0
   d8c2c:	f7ff bb6e 	b.w	d830c <network_set_listen_timeout>

000d8c30 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8c30:	6840      	ldr	r0, [r0, #4]
   d8c32:	2200      	movs	r2, #0
   d8c34:	f081 0101 	eor.w	r1, r1, #1
   d8c38:	f7ff bb58 	b.w	d82ec <network_listen>

000d8c3c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8c3c:	2300      	movs	r3, #0
   d8c3e:	6840      	ldr	r0, [r0, #4]
   d8c40:	461a      	mov	r2, r3
   d8c42:	4619      	mov	r1, r3
   d8c44:	f7ff bb4a 	b.w	d82dc <network_off>

000d8c48 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8c48:	2300      	movs	r3, #0
   d8c4a:	6840      	ldr	r0, [r0, #4]
   d8c4c:	461a      	mov	r2, r3
   d8c4e:	4619      	mov	r1, r3
   d8c50:	f7ff bb3c 	b.w	d82cc <network_on>

000d8c54 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8c54:	2200      	movs	r2, #0
   d8c56:	6840      	ldr	r0, [r0, #4]
   d8c58:	4611      	mov	r1, r2
   d8c5a:	f7ff bb2f 	b.w	d82bc <network_ready>

000d8c5e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8c5e:	2200      	movs	r2, #0
   d8c60:	6840      	ldr	r0, [r0, #4]
   d8c62:	4611      	mov	r1, r2
   d8c64:	f7ff bb1a 	b.w	d829c <network_connecting>

000d8c68 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8c68:	6840      	ldr	r0, [r0, #4]
   d8c6a:	2200      	movs	r2, #0
   d8c6c:	2102      	movs	r1, #2
   d8c6e:	f7ff bb1d 	b.w	d82ac <network_disconnect>

000d8c72 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8c72:	2300      	movs	r3, #0
   d8c74:	6840      	ldr	r0, [r0, #4]
   d8c76:	461a      	mov	r2, r3
   d8c78:	f7ff bb08 	b.w	d828c <network_connect>

000d8c7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8c7c:	4b02      	ldr	r3, [pc, #8]	; (d8c88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8c7e:	2203      	movs	r2, #3
   d8c80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8c82:	4a02      	ldr	r2, [pc, #8]	; (d8c8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8c84:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8c86:	4770      	bx	lr
   d8c88:	2003e580 	.word	0x2003e580
   d8c8c:	000ddee0 	.word	0x000ddee0

000d8c90 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8c90:	4770      	bx	lr

000d8c92 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8c94:	4606      	mov	r6, r0
   d8c96:	4615      	mov	r5, r2
   d8c98:	460c      	mov	r4, r1
   d8c9a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c9c:	42bc      	cmp	r4, r7
   d8c9e:	d006      	beq.n	d8cae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8ca0:	6833      	ldr	r3, [r6, #0]
   d8ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8ca6:	689b      	ldr	r3, [r3, #8]
   d8ca8:	4630      	mov	r0, r6
   d8caa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8cac:	e7f6      	b.n	d8c9c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8cae:	4628      	mov	r0, r5
   d8cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8cb2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8cb2:	7c00      	ldrb	r0, [r0, #16]
   d8cb4:	2200      	movs	r2, #0
   d8cb6:	f7ff b933 	b.w	d7f20 <hal_i2c_write>

000d8cba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8cba:	7c00      	ldrb	r0, [r0, #16]
   d8cbc:	2100      	movs	r1, #0
   d8cbe:	f7ff b937 	b.w	d7f30 <hal_i2c_available>

000d8cc2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8cc2:	7c00      	ldrb	r0, [r0, #16]
   d8cc4:	2100      	movs	r1, #0
   d8cc6:	f7ff b93b 	b.w	d7f40 <hal_i2c_read>

000d8cca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8cca:	7c00      	ldrb	r0, [r0, #16]
   d8ccc:	2100      	movs	r1, #0
   d8cce:	f7ff b93f 	b.w	d7f50 <hal_i2c_peek>

000d8cd2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8cd2:	7c00      	ldrb	r0, [r0, #16]
   d8cd4:	2100      	movs	r1, #0
   d8cd6:	f7ff b943 	b.w	d7f60 <hal_i2c_flush>

000d8cda <_ZN7TwoWireD0Ev>:
   d8cda:	b510      	push	{r4, lr}
   d8cdc:	2114      	movs	r1, #20
   d8cde:	4604      	mov	r4, r0
   d8ce0:	f001 faac 	bl	da23c <_ZdlPvj>
   d8ce4:	4620      	mov	r0, r4
   d8ce6:	bd10      	pop	{r4, pc}

000d8ce8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8ce8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8cee:	4604      	mov	r4, r0
   d8cf0:	4608      	mov	r0, r1
   d8cf2:	2100      	movs	r1, #0
   d8cf4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8cf8:	4b03      	ldr	r3, [pc, #12]	; (d8d08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8cfa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8cfc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8cfe:	4611      	mov	r1, r2
   d8d00:	f7ff f93e 	bl	d7f80 <hal_i2c_init>
}
   d8d04:	4620      	mov	r0, r4
   d8d06:	bd10      	pop	{r4, pc}
   d8d08:	000ddf1c 	.word	0x000ddf1c

000d8d0c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d8d0c:	7c00      	ldrb	r0, [r0, #16]
   d8d0e:	2200      	movs	r2, #0
   d8d10:	f7ff b8e6 	b.w	d7ee0 <hal_i2c_set_speed>

000d8d14 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8d14:	2300      	movs	r3, #0
   d8d16:	7c00      	ldrb	r0, [r0, #16]
   d8d18:	461a      	mov	r2, r3
   d8d1a:	4619      	mov	r1, r3
   d8d1c:	f7ff b8e8 	b.w	d7ef0 <hal_i2c_begin>

000d8d20 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8d20:	7c00      	ldrb	r0, [r0, #16]
   d8d22:	2200      	movs	r2, #0
   d8d24:	f7ff b8ec 	b.w	d7f00 <hal_i2c_begin_transmission>

000d8d28 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8d28:	b2c9      	uxtb	r1, r1
   d8d2a:	f7ff bff9 	b.w	d8d20 <_ZN7TwoWire17beginTransmissionEh>

000d8d2e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8d2e:	7c00      	ldrb	r0, [r0, #16]
   d8d30:	2200      	movs	r2, #0
   d8d32:	f7ff b8ed 	b.w	d7f10 <hal_i2c_end_transmission>

000d8d36 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8d36:	2101      	movs	r1, #1
   d8d38:	f7ff bff9 	b.w	d8d2e <_ZN7TwoWire15endTransmissionEh>

000d8d3c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8d3c:	4700      	bx	r0
	...

000d8d40 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8d40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8d44:	2400      	movs	r4, #0
{
   d8d46:	461d      	mov	r5, r3
   d8d48:	460f      	mov	r7, r1
   d8d4a:	4690      	mov	r8, r2
   d8d4c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8d4e:	f7ff f8bf 	bl	d7ed0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8d52:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8d54:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8d58:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8d5c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8d60:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8d64:	bfa2      	ittt	ge
   d8d66:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8d6a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8d6e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8d70:	4907      	ldr	r1, [pc, #28]	; (d8d90 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8d72:	9400      	str	r4, [sp, #0]
   d8d74:	4643      	mov	r3, r8
   d8d76:	463a      	mov	r2, r7
   d8d78:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8d7a:	bfa8      	it	ge
   d8d7c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8d80:	f7ff f89e 	bl	d7ec0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8d84:	fab0 f080 	clz	r0, r0
   d8d88:	0940      	lsrs	r0, r0, #5
   d8d8a:	b004      	add	sp, #16
   d8d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d90:	000d8d3d 	.word	0x000d8d3d

000d8d94 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8d94:	4770      	bx	lr

000d8d96 <_ZN9IPAddressD0Ev>:
   d8d96:	b510      	push	{r4, lr}
   d8d98:	2118      	movs	r1, #24
   d8d9a:	4604      	mov	r4, r0
   d8d9c:	f001 fa4e 	bl	da23c <_ZdlPvj>
   d8da0:	4620      	mov	r0, r4
   d8da2:	bd10      	pop	{r4, pc}

000d8da4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8da4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8da6:	7d03      	ldrb	r3, [r0, #20]
   d8da8:	2b06      	cmp	r3, #6
{
   d8daa:	b08d      	sub	sp, #52	; 0x34
   d8dac:	460e      	mov	r6, r1
   d8dae:	f100 0704 	add.w	r7, r0, #4
   d8db2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8db6:	d012      	beq.n	d8dde <_ZNK9IPAddress7printToER5Print+0x3a>
   d8db8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8dbc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8dc0:	220a      	movs	r2, #10
   d8dc2:	4630      	mov	r0, r6
   d8dc4:	f000 f943 	bl	d904e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8dc8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8dca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8dcc:	d019      	beq.n	d8e02 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8dce:	2c00      	cmp	r4, #0
   d8dd0:	d0f4      	beq.n	d8dbc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8dd2:	212e      	movs	r1, #46	; 0x2e
   d8dd4:	4630      	mov	r0, r6
   d8dd6:	f000 f921 	bl	d901c <_ZN5Print5printEc>
   d8dda:	4404      	add	r4, r0
   d8ddc:	e7ee      	b.n	d8dbc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8dde:	232f      	movs	r3, #47	; 0x2f
   d8de0:	466a      	mov	r2, sp
   d8de2:	4639      	mov	r1, r7
   d8de4:	200a      	movs	r0, #10
		buf[0] = 0;
   d8de6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8dea:	f7ff f8d1 	bl	d7f90 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8dee:	4668      	mov	r0, sp
   d8df0:	f002 f975 	bl	db0de <strlen>
   d8df4:	6833      	ldr	r3, [r6, #0]
   d8df6:	4602      	mov	r2, r0
   d8df8:	68db      	ldr	r3, [r3, #12]
   d8dfa:	4669      	mov	r1, sp
   d8dfc:	4630      	mov	r0, r6
   d8dfe:	4798      	blx	r3
   d8e00:	4604      	mov	r4, r0
    }
    return n;
}
   d8e02:	4620      	mov	r0, r4
   d8e04:	b00d      	add	sp, #52	; 0x34
   d8e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8e08 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8e08:	b510      	push	{r4, lr}
   d8e0a:	4b05      	ldr	r3, [pc, #20]	; (d8e20 <_ZN9IPAddressC1Ev+0x18>)
   d8e0c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8e0e:	2211      	movs	r2, #17
   d8e10:	f840 3b04 	str.w	r3, [r0], #4
   d8e14:	2100      	movs	r1, #0
   d8e16:	f002 f906 	bl	db026 <memset>
}
   d8e1a:	4620      	mov	r0, r4
   d8e1c:	bd10      	pop	{r4, pc}
   d8e1e:	bf00      	nop
   d8e20:	000ddf44 	.word	0x000ddf44

000d8e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8e24:	4603      	mov	r3, r0
   d8e26:	4a07      	ldr	r2, [pc, #28]	; (d8e44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8e28:	b510      	push	{r4, lr}
   d8e2a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8e2e:	f101 0210 	add.w	r2, r1, #16
   d8e32:	f851 4b04 	ldr.w	r4, [r1], #4
   d8e36:	f843 4b04 	str.w	r4, [r3], #4
   d8e3a:	4291      	cmp	r1, r2
   d8e3c:	d1f9      	bne.n	d8e32 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8e3e:	780a      	ldrb	r2, [r1, #0]
   d8e40:	701a      	strb	r2, [r3, #0]
}
   d8e42:	bd10      	pop	{r4, pc}
   d8e44:	000ddf44 	.word	0x000ddf44

000d8e48 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8e48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8e4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8e4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8e52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8e56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8e5a:	2304      	movs	r3, #4
   d8e5c:	6041      	str	r1, [r0, #4]
   d8e5e:	7503      	strb	r3, [r0, #20]
}
   d8e60:	bd10      	pop	{r4, pc}

000d8e62 <_ZN9IPAddressaSEPKh>:
{
   d8e62:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8e64:	78cb      	ldrb	r3, [r1, #3]
   d8e66:	9300      	str	r3, [sp, #0]
   d8e68:	788b      	ldrb	r3, [r1, #2]
   d8e6a:	784a      	ldrb	r2, [r1, #1]
   d8e6c:	7809      	ldrb	r1, [r1, #0]
   d8e6e:	f7ff ffeb 	bl	d8e48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8e72:	b002      	add	sp, #8
   d8e74:	bd10      	pop	{r4, pc}
	...

000d8e78 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8e78:	4b01      	ldr	r3, [pc, #4]	; (d8e80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8e7a:	4a02      	ldr	r2, [pc, #8]	; (d8e84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8e7c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8e7e:	4770      	bx	lr
   d8e80:	2003e588 	.word	0x2003e588
   d8e84:	000ddf50 	.word	0x000ddf50

000d8e88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8e88:	2300      	movs	r3, #0
   d8e8a:	6840      	ldr	r0, [r0, #4]
   d8e8c:	461a      	mov	r2, r3
   d8e8e:	f7ff b9fd 	b.w	d828c <network_connect>

000d8e92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8e92:	6840      	ldr	r0, [r0, #4]
   d8e94:	2200      	movs	r2, #0
   d8e96:	2102      	movs	r1, #2
   d8e98:	f7ff ba08 	b.w	d82ac <network_disconnect>

000d8e9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8e9c:	2200      	movs	r2, #0
   d8e9e:	6840      	ldr	r0, [r0, #4]
   d8ea0:	4611      	mov	r1, r2
   d8ea2:	f7ff b9fb 	b.w	d829c <network_connecting>

000d8ea6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8ea6:	2200      	movs	r2, #0
   d8ea8:	6840      	ldr	r0, [r0, #4]
   d8eaa:	4611      	mov	r1, r2
   d8eac:	f7ff ba06 	b.w	d82bc <network_ready>

000d8eb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8eb0:	2300      	movs	r3, #0
   d8eb2:	6840      	ldr	r0, [r0, #4]
   d8eb4:	461a      	mov	r2, r3
   d8eb6:	4619      	mov	r1, r3
   d8eb8:	f7ff ba08 	b.w	d82cc <network_on>

000d8ebc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8ebc:	2300      	movs	r3, #0
   d8ebe:	6840      	ldr	r0, [r0, #4]
   d8ec0:	461a      	mov	r2, r3
   d8ec2:	4619      	mov	r1, r3
   d8ec4:	f7ff ba0a 	b.w	d82dc <network_off>

000d8ec8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8ec8:	6840      	ldr	r0, [r0, #4]
   d8eca:	2100      	movs	r1, #0
   d8ecc:	f7ff ba2e 	b.w	d832c <network_is_on>

000d8ed0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8ed0:	6840      	ldr	r0, [r0, #4]
   d8ed2:	2100      	movs	r1, #0
   d8ed4:	f7ff ba32 	b.w	d833c <network_is_off>

000d8ed8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8ed8:	6840      	ldr	r0, [r0, #4]
   d8eda:	2200      	movs	r2, #0
   d8edc:	f081 0101 	eor.w	r1, r1, #1
   d8ee0:	f7ff ba04 	b.w	d82ec <network_listen>

000d8ee4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8ee4:	6840      	ldr	r0, [r0, #4]
   d8ee6:	2200      	movs	r2, #0
   d8ee8:	f7ff ba10 	b.w	d830c <network_set_listen_timeout>

000d8eec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8eec:	2200      	movs	r2, #0
   d8eee:	6840      	ldr	r0, [r0, #4]
   d8ef0:	4611      	mov	r1, r2
   d8ef2:	f7ff ba13 	b.w	d831c <network_get_listen_timeout>

000d8ef6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8ef6:	2200      	movs	r2, #0
   d8ef8:	6840      	ldr	r0, [r0, #4]
   d8efa:	4611      	mov	r1, r2
   d8efc:	f7ff b9fe 	b.w	d82fc <network_listening>

000d8f00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8f04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8f06:	b095      	sub	sp, #84	; 0x54
   d8f08:	4616      	mov	r6, r2
   d8f0a:	460d      	mov	r5, r1
   d8f0c:	4607      	mov	r7, r0
    IPAddress addr;
   d8f0e:	f7ff ff7b 	bl	d8e08 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8f12:	4621      	mov	r1, r4
   d8f14:	2218      	movs	r2, #24
   d8f16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8f18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8f1a:	f002 f884 	bl	db026 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8f1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8f20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8f24:	4621      	mov	r1, r4
   d8f26:	466b      	mov	r3, sp
   d8f28:	aa0c      	add	r2, sp, #48	; 0x30
   d8f2a:	4630      	mov	r0, r6
   d8f2c:	f7ff f840 	bl	d7fb0 <netdb_getaddrinfo>
    if (!r) {
   d8f30:	4604      	mov	r4, r0
   d8f32:	2800      	cmp	r0, #0
   d8f34:	d146      	bne.n	d8fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f36:	4602      	mov	r2, r0
   d8f38:	2101      	movs	r1, #1
   d8f3a:	6868      	ldr	r0, [r5, #4]
   d8f3c:	f7ff f9be 	bl	d82bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8f42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f44:	4622      	mov	r2, r4
   d8f46:	6868      	ldr	r0, [r5, #4]
   d8f48:	f7ff f9b8 	bl	d82bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8f4e:	4681      	mov	r9, r0
        bool ok = false;
   d8f50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f52:	2e00      	cmp	r6, #0
   d8f54:	d036      	beq.n	d8fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8f56:	2900      	cmp	r1, #0
   d8f58:	d134      	bne.n	d8fc4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8f5a:	6873      	ldr	r3, [r6, #4]
   d8f5c:	2b02      	cmp	r3, #2
   d8f5e:	d003      	beq.n	d8f68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8f60:	2b0a      	cmp	r3, #10
   d8f62:	d00b      	beq.n	d8f7c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f64:	69f6      	ldr	r6, [r6, #28]
   d8f66:	e7f4      	b.n	d8f52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8f68:	f1b8 0f00 	cmp.w	r8, #0
   d8f6c:	d004      	beq.n	d8f78 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8f6e:	6971      	ldr	r1, [r6, #20]
   d8f70:	4638      	mov	r0, r7
   d8f72:	3104      	adds	r1, #4
   d8f74:	f7ff ff75 	bl	d8e62 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8f78:	4641      	mov	r1, r8
   d8f7a:	e7f3      	b.n	d8f64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8f7c:	f1b9 0f00 	cmp.w	r9, #0
   d8f80:	d101      	bne.n	d8f86 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8f82:	4649      	mov	r1, r9
   d8f84:	e7ee      	b.n	d8f64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8f86:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8f88:	2210      	movs	r2, #16
   d8f8a:	a801      	add	r0, sp, #4
   d8f8c:	f002 f84b 	bl	db026 <memset>
                    a.v = 6;
   d8f90:	2306      	movs	r3, #6
   d8f92:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8f96:	ad01      	add	r5, sp, #4
   d8f98:	f104 0308 	add.w	r3, r4, #8
   d8f9c:	3418      	adds	r4, #24
   d8f9e:	6818      	ldr	r0, [r3, #0]
   d8fa0:	6859      	ldr	r1, [r3, #4]
   d8fa2:	462a      	mov	r2, r5
   d8fa4:	c203      	stmia	r2!, {r0, r1}
   d8fa6:	3308      	adds	r3, #8
   d8fa8:	42a3      	cmp	r3, r4
   d8faa:	4615      	mov	r5, r2
   d8fac:	d1f7      	bne.n	d8f9e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8fae:	a901      	add	r1, sp, #4
   d8fb0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8fb2:	ad07      	add	r5, sp, #28
   d8fb4:	f7ff ff36 	bl	d8e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8fba:	1d3c      	adds	r4, r7, #4
   d8fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8fbe:	682b      	ldr	r3, [r5, #0]
   d8fc0:	7023      	strb	r3, [r4, #0]
   d8fc2:	e7de      	b.n	d8f82 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8fc4:	9800      	ldr	r0, [sp, #0]
   d8fc6:	f7fe ffeb 	bl	d7fa0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8fca:	4638      	mov	r0, r7
   d8fcc:	b015      	add	sp, #84	; 0x54
   d8fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8fd4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8fd4:	4b02      	ldr	r3, [pc, #8]	; (d8fe0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8fd6:	4a03      	ldr	r2, [pc, #12]	; (d8fe4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8fd8:	601a      	str	r2, [r3, #0]
   d8fda:	2200      	movs	r2, #0
   d8fdc:	605a      	str	r2, [r3, #4]

} // spark
   d8fde:	4770      	bx	lr
   d8fe0:	2003e58c 	.word	0x2003e58c
   d8fe4:	000ddf5c 	.word	0x000ddf5c

000d8fe8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8fea:	4606      	mov	r6, r0
   d8fec:	460d      	mov	r5, r1
  size_t n = 0;
   d8fee:	188f      	adds	r7, r1, r2
   d8ff0:	2400      	movs	r4, #0
  while (size--) {
   d8ff2:	42bd      	cmp	r5, r7
   d8ff4:	d00c      	beq.n	d9010 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8ff6:	6833      	ldr	r3, [r6, #0]
   d8ff8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8ffc:	689b      	ldr	r3, [r3, #8]
   d8ffe:	4630      	mov	r0, r6
   d9000:	4798      	blx	r3
     if (chunk>=0)
   d9002:	1e03      	subs	r3, r0, #0
   d9004:	db01      	blt.n	d900a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9006:	441c      	add	r4, r3
  while (size--) {
   d9008:	e7f3      	b.n	d8ff2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d900a:	2c00      	cmp	r4, #0
   d900c:	bf08      	it	eq
   d900e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9010:	4620      	mov	r0, r4
   d9012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9014 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9014:	b508      	push	{r3, lr}
  return write(str);
   d9016:	f7fe f9b5 	bl	d7384 <_ZN5Print5writeEPKc>
}
   d901a:	bd08      	pop	{r3, pc}

000d901c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d901c:	6803      	ldr	r3, [r0, #0]
   d901e:	689b      	ldr	r3, [r3, #8]
   d9020:	4718      	bx	r3

000d9022 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9022:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9024:	210d      	movs	r1, #13
{
   d9026:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9028:	f7ff fff8 	bl	d901c <_ZN5Print5printEc>
  n += print('\n');
   d902c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d902e:	4604      	mov	r4, r0
  n += print('\n');
   d9030:	4628      	mov	r0, r5
   d9032:	f7ff fff3 	bl	d901c <_ZN5Print5printEc>
  return n;
}
   d9036:	4420      	add	r0, r4
   d9038:	bd38      	pop	{r3, r4, r5, pc}

000d903a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d903a:	b538      	push	{r3, r4, r5, lr}
   d903c:	4605      	mov	r5, r0
  return write(str);
   d903e:	f7fe f9a1 	bl	d7384 <_ZN5Print5writeEPKc>
   d9042:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d9044:	4628      	mov	r0, r5
   d9046:	f7ff ffec 	bl	d9022 <_ZN5Print7printlnEv>
  return n;
}
   d904a:	4420      	add	r0, r4
   d904c:	bd38      	pop	{r3, r4, r5, pc}

000d904e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d904e:	b530      	push	{r4, r5, lr}
   d9050:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9052:	2300      	movs	r3, #0
   d9054:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9058:	2a01      	cmp	r2, #1
   d905a:	bf98      	it	ls
   d905c:	220a      	movls	r2, #10
   d905e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9060:	460d      	mov	r5, r1
   d9062:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9066:	fb01 5312 	mls	r3, r1, r2, r5
   d906a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d906e:	2b09      	cmp	r3, #9
   d9070:	bf94      	ite	ls
   d9072:	3330      	addls	r3, #48	; 0x30
   d9074:	3337      	addhi	r3, #55	; 0x37
   d9076:	b2db      	uxtb	r3, r3
  } while(n);
   d9078:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d907a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d907e:	d9ef      	bls.n	d9060 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9080:	4621      	mov	r1, r4
   d9082:	f7fe f97f 	bl	d7384 <_ZN5Print5writeEPKc>
}
   d9086:	b00b      	add	sp, #44	; 0x2c
   d9088:	bd30      	pop	{r4, r5, pc}
	...

000d908c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d908c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9090:	ec55 4b10 	vmov	r4, r5, d0
   d9094:	4606      	mov	r6, r0
   d9096:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d9098:	ee10 2a10 	vmov	r2, s0
   d909c:	ee10 0a10 	vmov	r0, s0
   d90a0:	462b      	mov	r3, r5
   d90a2:	4629      	mov	r1, r5
   d90a4:	f001 fd28 	bl	daaf8 <__aeabi_dcmpun>
   d90a8:	b140      	cbz	r0, d90bc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d90aa:	4953      	ldr	r1, [pc, #332]	; (d91f8 <_ZN5Print10printFloatEdh+0x16c>)
   d90ac:	4630      	mov	r0, r6
   d90ae:	f7fe f969 	bl	d7384 <_ZN5Print5writeEPKc>
   d90b2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d90b4:	4650      	mov	r0, sl
   d90b6:	b003      	add	sp, #12
   d90b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d90bc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d90c0:	4b4e      	ldr	r3, [pc, #312]	; (d91fc <_ZN5Print10printFloatEdh+0x170>)
   d90c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d90c6:	4620      	mov	r0, r4
   d90c8:	4649      	mov	r1, r9
   d90ca:	f001 fd15 	bl	daaf8 <__aeabi_dcmpun>
   d90ce:	b948      	cbnz	r0, d90e4 <_ZN5Print10printFloatEdh+0x58>
   d90d0:	4b4a      	ldr	r3, [pc, #296]	; (d91fc <_ZN5Print10printFloatEdh+0x170>)
   d90d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d90d6:	4620      	mov	r0, r4
   d90d8:	4649      	mov	r1, r9
   d90da:	f001 fcef 	bl	daabc <__aeabi_dcmple>
   d90de:	b908      	cbnz	r0, d90e4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d90e0:	4947      	ldr	r1, [pc, #284]	; (d9200 <_ZN5Print10printFloatEdh+0x174>)
   d90e2:	e7e3      	b.n	d90ac <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d90e4:	4b47      	ldr	r3, [pc, #284]	; (d9204 <_ZN5Print10printFloatEdh+0x178>)
   d90e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d90ea:	4620      	mov	r0, r4
   d90ec:	4629      	mov	r1, r5
   d90ee:	f001 fcf9 	bl	daae4 <__aeabi_dcmpgt>
   d90f2:	b108      	cbz	r0, d90f8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d90f4:	4944      	ldr	r1, [pc, #272]	; (d9208 <_ZN5Print10printFloatEdh+0x17c>)
   d90f6:	e7d9      	b.n	d90ac <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d90f8:	4b44      	ldr	r3, [pc, #272]	; (d920c <_ZN5Print10printFloatEdh+0x180>)
   d90fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d90fe:	4620      	mov	r0, r4
   d9100:	4629      	mov	r1, r5
   d9102:	f001 fcd1 	bl	daaa8 <__aeabi_dcmplt>
   d9106:	2800      	cmp	r0, #0
   d9108:	d1f4      	bne.n	d90f4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d910a:	2200      	movs	r2, #0
   d910c:	2300      	movs	r3, #0
   d910e:	4620      	mov	r0, r4
   d9110:	4629      	mov	r1, r5
   d9112:	f001 fcc9 	bl	daaa8 <__aeabi_dcmplt>
   d9116:	b1d0      	cbz	r0, d914e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d9118:	212d      	movs	r1, #45	; 0x2d
   d911a:	4630      	mov	r0, r6
   d911c:	f7ff ff7e 	bl	d901c <_ZN5Print5printEc>
     number = -number;
   d9120:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d9124:	4682      	mov	sl, r0
     number = -number;
   d9126:	461d      	mov	r5, r3
  double rounding = 0.5;
   d9128:	4939      	ldr	r1, [pc, #228]	; (d9210 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d912a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d9218 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d912e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d9132:	2000      	movs	r0, #0
    rounding /= 10.0;
   d9134:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d9138:	fa5f f38b 	uxtb.w	r3, fp
   d913c:	429f      	cmp	r7, r3
   d913e:	d908      	bls.n	d9152 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d9140:	4642      	mov	r2, r8
   d9142:	464b      	mov	r3, r9
   d9144:	f001 fb68 	bl	da818 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d9148:	f10b 0b01 	add.w	fp, fp, #1
   d914c:	e7f4      	b.n	d9138 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d914e:	4682      	mov	sl, r0
   d9150:	e7ea      	b.n	d9128 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d9152:	4622      	mov	r2, r4
   d9154:	462b      	mov	r3, r5
   d9156:	f001 f87f 	bl	da258 <__adddf3>
   d915a:	460d      	mov	r5, r1
   d915c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d915e:	f001 fd09 	bl	dab74 <__aeabi_d2uiz>
   d9162:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d9164:	f001 f9b4 	bl	da4d0 <__aeabi_ui2d>
   d9168:	4602      	mov	r2, r0
   d916a:	460b      	mov	r3, r1
   d916c:	4620      	mov	r0, r4
   d916e:	4629      	mov	r1, r5
   d9170:	f001 f870 	bl	da254 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d9174:	220a      	movs	r2, #10
   d9176:	4604      	mov	r4, r0
   d9178:	460d      	mov	r5, r1
   d917a:	4630      	mov	r0, r6
   d917c:	4641      	mov	r1, r8
   d917e:	f7ff ff66 	bl	d904e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d9182:	4482      	add	sl, r0
  if (digits > 0) {
   d9184:	b127      	cbz	r7, d9190 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d9186:	4923      	ldr	r1, [pc, #140]	; (d9214 <_ZN5Print10printFloatEdh+0x188>)
   d9188:	4630      	mov	r0, r6
   d918a:	f7fe f8fb 	bl	d7384 <_ZN5Print5writeEPKc>
    n += print(".");
   d918e:	4482      	add	sl, r0
    remainder *= 10.0;
   d9190:	f8df 9084 	ldr.w	r9, [pc, #132]	; d9218 <_ZN5Print10printFloatEdh+0x18c>
   d9194:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d9198:	3f01      	subs	r7, #1
   d919a:	b2ff      	uxtb	r7, r7
   d919c:	2fff      	cmp	r7, #255	; 0xff
   d919e:	d089      	beq.n	d90b4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d91a0:	4642      	mov	r2, r8
   d91a2:	464b      	mov	r3, r9
   d91a4:	4620      	mov	r0, r4
   d91a6:	4629      	mov	r1, r5
   d91a8:	f001 fa0c 	bl	da5c4 <__aeabi_dmul>
   d91ac:	4604      	mov	r4, r0
   d91ae:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d91b0:	f001 fcb8 	bl	dab24 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d91b4:	f1b0 0b00 	subs.w	fp, r0, #0
   d91b8:	da1a      	bge.n	d91f0 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d91ba:	212d      	movs	r1, #45	; 0x2d
   d91bc:	4630      	mov	r0, r6
   d91be:	f7ff ff2d 	bl	d901c <_ZN5Print5printEc>
            val = -n;
   d91c2:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d91c6:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d91c8:	220a      	movs	r2, #10
   d91ca:	4630      	mov	r0, r6
   d91cc:	9301      	str	r3, [sp, #4]
   d91ce:	f7ff ff3e 	bl	d904e <_ZN5Print11printNumberEmh>
   d91d2:	9b01      	ldr	r3, [sp, #4]
   d91d4:	4418      	add	r0, r3
    n += print(toPrint);
   d91d6:	4482      	add	sl, r0
    remainder -= toPrint;
   d91d8:	4658      	mov	r0, fp
   d91da:	f001 f989 	bl	da4f0 <__aeabi_i2d>
   d91de:	4602      	mov	r2, r0
   d91e0:	460b      	mov	r3, r1
   d91e2:	4620      	mov	r0, r4
   d91e4:	4629      	mov	r1, r5
   d91e6:	f001 f835 	bl	da254 <__aeabi_dsub>
   d91ea:	4604      	mov	r4, r0
   d91ec:	460d      	mov	r5, r1
  while (digits-- > 0)
   d91ee:	e7d3      	b.n	d9198 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d91f0:	4659      	mov	r1, fp
        size_t t = 0;
   d91f2:	2300      	movs	r3, #0
   d91f4:	e7e8      	b.n	d91c8 <_ZN5Print10printFloatEdh+0x13c>
   d91f6:	bf00      	nop
   d91f8:	000ddf90 	.word	0x000ddf90
   d91fc:	7fefffff 	.word	0x7fefffff
   d9200:	000ddf94 	.word	0x000ddf94
   d9204:	41efffff 	.word	0x41efffff
   d9208:	000ddf98 	.word	0x000ddf98
   d920c:	c1efffff 	.word	0xc1efffff
   d9210:	3fe00000 	.word	0x3fe00000
   d9214:	000dd1bb 	.word	0x000dd1bb
   d9218:	40240000 	.word	0x40240000

000d921c <_ZN5Print5printEfi>:
{
   d921c:	b538      	push	{r3, r4, r5, lr}
   d921e:	4604      	mov	r4, r0
   d9220:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d9224:	b2cd      	uxtb	r5, r1
   d9226:	f001 f975 	bl	da514 <__aeabi_f2d>
   d922a:	ec41 0b10 	vmov	d0, r0, r1
   d922e:	4629      	mov	r1, r5
   d9230:	4620      	mov	r0, r4
}
   d9232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d9236:	f7ff bf29 	b.w	d908c <_ZN5Print10printFloatEdh>

000d923a <_ZN5Print7printlnEdi>:
{
   d923a:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d923c:	b2c9      	uxtb	r1, r1
{
   d923e:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d9240:	f7ff ff24 	bl	d908c <_ZN5Print10printFloatEdh>
   d9244:	4604      	mov	r4, r0
  n += println();
   d9246:	4628      	mov	r0, r5
   d9248:	f7ff feeb 	bl	d9022 <_ZN5Print7printlnEv>
}
   d924c:	4420      	add	r0, r4
   d924e:	bd38      	pop	{r3, r4, r5, pc}

000d9250 <_ZN5Print7printlnEfi>:
{
   d9250:	b538      	push	{r3, r4, r5, lr}
   d9252:	4604      	mov	r4, r0
   d9254:	ee10 0a10 	vmov	r0, s0
   d9258:	460d      	mov	r5, r1
    return println((double)num, digits);
   d925a:	f001 f95b 	bl	da514 <__aeabi_f2d>
   d925e:	ec41 0b10 	vmov	d0, r0, r1
   d9262:	4629      	mov	r1, r5
   d9264:	4620      	mov	r0, r4
}
   d9266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d926a:	f7ff bfe6 	b.w	d923a <_ZN5Print7printlnEdi>

000d926e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d926e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9272:	b086      	sub	sp, #24
   d9274:	af00      	add	r7, sp, #0
   d9276:	4605      	mov	r5, r0
   d9278:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d927a:	1d38      	adds	r0, r7, #4
   d927c:	2114      	movs	r1, #20
{
   d927e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9280:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9282:	f7ff f88b 	bl	d839c <vsnprintf>

    if (n<bufsize)
   d9286:	2813      	cmp	r0, #19
   d9288:	d80e      	bhi.n	d92a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d928a:	1d39      	adds	r1, r7, #4
   d928c:	4628      	mov	r0, r5
   d928e:	f7fe f879 	bl	d7384 <_ZN5Print5writeEPKc>
   d9292:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9294:	b11e      	cbz	r6, d929e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d9296:	4628      	mov	r0, r5
   d9298:	f7ff fec3 	bl	d9022 <_ZN5Print7printlnEv>
   d929c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d929e:	4620      	mov	r0, r4
   d92a0:	3718      	adds	r7, #24
   d92a2:	46bd      	mov	sp, r7
   d92a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d92a8:	f100 0308 	add.w	r3, r0, #8
   d92ac:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d92b0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d92b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d92b6:	4622      	mov	r2, r4
   d92b8:	1c41      	adds	r1, r0, #1
   d92ba:	683b      	ldr	r3, [r7, #0]
   d92bc:	4668      	mov	r0, sp
   d92be:	f7ff f86d 	bl	d839c <vsnprintf>
  return write(str);
   d92c2:	4669      	mov	r1, sp
   d92c4:	4628      	mov	r0, r5
   d92c6:	f7fe f85d 	bl	d7384 <_ZN5Print5writeEPKc>
   d92ca:	4604      	mov	r4, r0
   d92cc:	46c5      	mov	sp, r8
   d92ce:	e7e1      	b.n	d9294 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d92d0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d92d0:	4b01      	ldr	r3, [pc, #4]	; (d92d8 <_GLOBAL__sub_I_RGB+0x8>)
   d92d2:	2200      	movs	r2, #0
   d92d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d92d6:	4770      	bx	lr
   d92d8:	2003e594 	.word	0x2003e594

000d92dc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d92dc:	2100      	movs	r1, #0
   d92de:	f7fe beb7 	b.w	d8050 <hal_spi_acquire>

000d92e2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d92e2:	2100      	movs	r1, #0
   d92e4:	f7fe bebc 	b.w	d8060 <hal_spi_release>

000d92e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d92e8:	b510      	push	{r4, lr}
   d92ea:	4604      	mov	r4, r0
   d92ec:	4608      	mov	r0, r1
{
    _spi = spi;
   d92ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d92f0:	f7fe fe7e 	bl	d7ff0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d92f4:	2300      	movs	r3, #0
   d92f6:	6063      	str	r3, [r4, #4]
}
   d92f8:	4620      	mov	r0, r4
   d92fa:	bd10      	pop	{r4, pc}

000d92fc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d92fc:	b510      	push	{r4, lr}
   d92fe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9300:	7800      	ldrb	r0, [r0, #0]
   d9302:	f7ff ffeb 	bl	d92dc <_ZN8SPIClass4lockEv.isra.0>
   d9306:	b948      	cbnz	r0, d931c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9308:	7820      	ldrb	r0, [r4, #0]
   d930a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d930e:	f7fe fe57 	bl	d7fc0 <hal_spi_begin>
        unlock();
   d9312:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9318:	f7ff bfe3 	b.w	d92e2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d931c:	bd10      	pop	{r4, pc}

000d931e <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d931e:	b513      	push	{r0, r1, r4, lr}
   d9320:	4604      	mov	r4, r0
    if (!lock())
   d9322:	7800      	ldrb	r0, [r0, #0]
{
   d9324:	9101      	str	r1, [sp, #4]
    if (!lock())
   d9326:	f7ff ffd9 	bl	d92dc <_ZN8SPIClass4lockEv.isra.0>
   d932a:	9901      	ldr	r1, [sp, #4]
   d932c:	b940      	cbnz	r0, d9340 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d932e:	7820      	ldrb	r0, [r4, #0]
   d9330:	f7fe fe4e 	bl	d7fd0 <hal_spi_set_data_mode>
        unlock();
   d9334:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9336:	b002      	add	sp, #8
   d9338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d933c:	f7ff bfd1 	b.w	d92e2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9340:	b002      	add	sp, #8
   d9342:	bd10      	pop	{r4, pc}

000d9344 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9344:	7800      	ldrb	r0, [r0, #0]
   d9346:	f7ff bfcc 	b.w	d92e2 <_ZN8SPIClass6unlockEv.isra.0>
	...

000d934c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d934c:	0840      	lsrs	r0, r0, #1
{
   d934e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9350:	6018      	str	r0, [r3, #0]
   d9352:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9354:	6818      	ldr	r0, [r3, #0]
   d9356:	4288      	cmp	r0, r1
   d9358:	b2e5      	uxtb	r5, r4
   d935a:	d906      	bls.n	d936a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d935c:	3401      	adds	r4, #1
   d935e:	2c08      	cmp	r4, #8
   d9360:	d002      	beq.n	d9368 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9362:	0840      	lsrs	r0, r0, #1
   d9364:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9366:	e7f5      	b.n	d9354 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9368:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d936a:	4b02      	ldr	r3, [pc, #8]	; (d9374 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d936c:	5d5b      	ldrb	r3, [r3, r5]
   d936e:	7013      	strb	r3, [r2, #0]
}
   d9370:	bd30      	pop	{r4, r5, pc}
   d9372:	bf00      	nop
   d9374:	000ddf9c 	.word	0x000ddf9c

000d9378 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d937c:	4606      	mov	r6, r0
   d937e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d9380:	7800      	ldrb	r0, [r0, #0]
{
   d9382:	460c      	mov	r4, r1
    CHECK(lock());
   d9384:	f7ff ffaa 	bl	d92dc <_ZN8SPIClass4lockEv.isra.0>
   d9388:	2800      	cmp	r0, #0
   d938a:	db1b      	blt.n	d93c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d938c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d938e:	2214      	movs	r2, #20
   d9390:	2100      	movs	r1, #0
   d9392:	a809      	add	r0, sp, #36	; 0x24
   d9394:	f001 fe47 	bl	db026 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9398:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d939a:	2200      	movs	r2, #0
   d939c:	a909      	add	r1, sp, #36	; 0x24
   d939e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d93a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d93a4:	f7fe fe34 	bl	d8010 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d93a8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d93ac:	b113      	cbz	r3, d93b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d93ae:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d93b2:	b155      	cbz	r5, d93ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d93b4:	2700      	movs	r7, #0
   d93b6:	46b9      	mov	r9, r7
   d93b8:	46b8      	mov	r8, r7
   d93ba:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d93bc:	7923      	ldrb	r3, [r4, #4]
   d93be:	b15d      	cbz	r5, d93d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d93c0:	b1c3      	cbz	r3, d93f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d93c2:	2000      	movs	r0, #0
}
   d93c4:	b00f      	add	sp, #60	; 0x3c
   d93c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d93ca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d93ce:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d93d2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d93d6:	e7f1      	b.n	d93bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d93d8:	2b00      	cmp	r3, #0
   d93da:	d135      	bne.n	d9448 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d93dc:	68a3      	ldr	r3, [r4, #8]
   d93de:	4543      	cmp	r3, r8
   d93e0:	d108      	bne.n	d93f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d93e2:	f88d 9020 	strb.w	r9, [sp, #32]
   d93e6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d93ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d93ee:	89a3      	ldrh	r3, [r4, #12]
   d93f0:	429a      	cmp	r2, r3
   d93f2:	d0e6      	beq.n	d93c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d93f4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d93f6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d93f8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d93fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   d93fe:	ab04      	add	r3, sp, #16
   d9400:	f10d 020f 	add.w	r2, sp, #15
   d9404:	f7ff ffa2 	bl	d934c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9408:	7921      	ldrb	r1, [r4, #4]
   d940a:	b985      	cbnz	r5, d942e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d940c:	b989      	cbnz	r1, d9432 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d940e:	68a3      	ldr	r3, [r4, #8]
   d9410:	4543      	cmp	r3, r8
   d9412:	d30e      	bcc.n	d9432 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9414:	f88d 9020 	strb.w	r9, [sp, #32]
   d9418:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d941c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9420:	89a3      	ldrh	r3, [r4, #12]
   d9422:	429a      	cmp	r2, r3
   d9424:	d105      	bne.n	d9432 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9426:	9b04      	ldr	r3, [sp, #16]
   d9428:	4543      	cmp	r3, r8
   d942a:	d102      	bne.n	d9432 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d942c:	e7c9      	b.n	d93c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d942e:	2900      	cmp	r1, #0
   d9430:	d1f9      	bne.n	d9426 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9432:	2300      	movs	r3, #0
   d9434:	9301      	str	r3, [sp, #4]
   d9436:	7b63      	ldrb	r3, [r4, #13]
   d9438:	9300      	str	r3, [sp, #0]
   d943a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d943e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9440:	7830      	ldrb	r0, [r6, #0]
   d9442:	f7fe fdfd 	bl	d8040 <hal_spi_set_settings>
   d9446:	e7bc      	b.n	d93c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9448:	e9cd 5500 	strd	r5, r5, [sp]
   d944c:	462b      	mov	r3, r5
   d944e:	462a      	mov	r2, r5
   d9450:	2101      	movs	r1, #1
   d9452:	e7f5      	b.n	d9440 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9454 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9454:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9456:	7800      	ldrb	r0, [r0, #0]
   d9458:	f7fe fdc2 	bl	d7fe0 <hal_spi_transfer>
}
   d945c:	b2c0      	uxtb	r0, r0
   d945e:	bd08      	pop	{r3, pc}

000d9460 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9460:	b530      	push	{r4, r5, lr}
   d9462:	b087      	sub	sp, #28
   d9464:	4604      	mov	r4, r0
   d9466:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9468:	9500      	str	r5, [sp, #0]
   d946a:	7800      	ldrb	r0, [r0, #0]
   d946c:	f7fe fdd8 	bl	d8020 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d9470:	b93d      	cbnz	r5, d9482 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d9472:	7820      	ldrb	r0, [r4, #0]
   d9474:	a902      	add	r1, sp, #8
   d9476:	f7fe fddb 	bl	d8030 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d947a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d947e:	07db      	lsls	r3, r3, #31
   d9480:	d4f7      	bmi.n	d9472 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d9482:	b007      	add	sp, #28
   d9484:	bd30      	pop	{r4, r5, pc}
	...

000d9488 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d9488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d948c:	ec57 6b10 	vmov	r6, r7, d0
   d9490:	4680      	mov	r8, r0
   d9492:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d9494:	ee10 0a10 	vmov	r0, s0
   d9498:	2200      	movs	r2, #0
   d949a:	2300      	movs	r3, #0
   d949c:	4639      	mov	r1, r7
   d949e:	f001 fb03 	bl	daaa8 <__aeabi_dcmplt>
   d94a2:	b128      	cbz	r0, d94b0 <_Z4dtoadhPc+0x28>
        val = -val;
   d94a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d94a8:	461f      	mov	r7, r3
        *sout++ = '-';
   d94aa:	232d      	movs	r3, #45	; 0x2d
   d94ac:	f804 3b01 	strb.w	r3, [r4], #1
   d94b0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d94b2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d94b6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d94b8:	b2d9      	uxtb	r1, r3
   d94ba:	4588      	cmp	r8, r1
   d94bc:	d903      	bls.n	d94c6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d94be:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d94c2:	3301      	adds	r3, #1
   d94c4:	e7f8      	b.n	d94b8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d94c6:	4648      	mov	r0, r9
   d94c8:	f001 f812 	bl	da4f0 <__aeabi_i2d>
   d94cc:	4632      	mov	r2, r6
   d94ce:	463b      	mov	r3, r7
   d94d0:	f001 f878 	bl	da5c4 <__aeabi_dmul>
   d94d4:	4606      	mov	r6, r0
   d94d6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d94d8:	f001 fbd4 	bl	dac84 <__aeabi_d2ulz>
   d94dc:	4605      	mov	r5, r0
   d94de:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d94e0:	f001 f83a 	bl	da558 <__aeabi_ul2d>
   d94e4:	4602      	mov	r2, r0
   d94e6:	460b      	mov	r3, r1
   d94e8:	4630      	mov	r0, r6
   d94ea:	4639      	mov	r1, r7
   d94ec:	f000 feb2 	bl	da254 <__aeabi_dsub>
   d94f0:	4b13      	ldr	r3, [pc, #76]	; (d9540 <_Z4dtoadhPc+0xb8>)
   d94f2:	2200      	movs	r2, #0
   d94f4:	f001 faec 	bl	daad0 <__aeabi_dcmpge>
   d94f8:	b110      	cbz	r0, d9500 <_Z4dtoadhPc+0x78>
        fixed++;
   d94fa:	3501      	adds	r5, #1
   d94fc:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9500:	464a      	mov	r2, r9
   d9502:	4628      	mov	r0, r5
   d9504:	17d3      	asrs	r3, r2, #31
   d9506:	4651      	mov	r1, sl
   d9508:	f001 fba4 	bl	dac54 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d950c:	2301      	movs	r3, #1
   d950e:	4615      	mov	r5, r2
   d9510:	4621      	mov	r1, r4
   d9512:	220a      	movs	r2, #10
   d9514:	f000 fcf7 	bl	d9f06 <ultoa>
    if (prec) {
   d9518:	f1b8 0f00 	cmp.w	r8, #0
   d951c:	d00d      	beq.n	d953a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d951e:	4620      	mov	r0, r4
   d9520:	f001 fddd 	bl	db0de <strlen>
        *sout++ = '.';
   d9524:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d9526:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d9528:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d952a:	220a      	movs	r2, #10
   d952c:	4643      	mov	r3, r8
   d952e:	4628      	mov	r0, r5
   d9530:	3101      	adds	r1, #1
    }
}
   d9532:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d9536:	f000 bce6 	b.w	d9f06 <ultoa>
}
   d953a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d953e:	bf00      	nop
   d9540:	3fe00000 	.word	0x3fe00000

000d9544 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9544:	b510      	push	{r4, lr}
   d9546:	4604      	mov	r4, r0
{
	free(buffer);
   d9548:	6800      	ldr	r0, [r0, #0]
   d954a:	f7fe ff07 	bl	d835c <free>
}
   d954e:	4620      	mov	r0, r4
   d9550:	bd10      	pop	{r4, pc}

000d9552 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9552:	b510      	push	{r4, lr}
   d9554:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9556:	6800      	ldr	r0, [r0, #0]
   d9558:	b108      	cbz	r0, d955e <_ZN6String10invalidateEv+0xc>
   d955a:	f7fe feff 	bl	d835c <free>
	buffer = NULL;
   d955e:	2300      	movs	r3, #0
	capacity = len = 0;
   d9560:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9564:	6023      	str	r3, [r4, #0]
}
   d9566:	bd10      	pop	{r4, pc}

000d9568 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9568:	b538      	push	{r3, r4, r5, lr}
   d956a:	4604      	mov	r4, r0
   d956c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d956e:	6800      	ldr	r0, [r0, #0]
   d9570:	3101      	adds	r1, #1
   d9572:	f7fe fefb 	bl	d836c <realloc>
	if (newbuffer) {
   d9576:	b110      	cbz	r0, d957e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9578:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d957c:	2001      	movs	r0, #1
	}
	return 0;
}
   d957e:	bd38      	pop	{r3, r4, r5, pc}

000d9580 <_ZN6String7reserveEj>:
{
   d9580:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9582:	6803      	ldr	r3, [r0, #0]
{
   d9584:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9586:	b123      	cbz	r3, d9592 <_ZN6String7reserveEj+0x12>
   d9588:	6843      	ldr	r3, [r0, #4]
   d958a:	428b      	cmp	r3, r1
   d958c:	d301      	bcc.n	d9592 <_ZN6String7reserveEj+0x12>
   d958e:	2001      	movs	r0, #1
}
   d9590:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9592:	4620      	mov	r0, r4
   d9594:	f7ff ffe8 	bl	d9568 <_ZN6String12changeBufferEj>
   d9598:	2800      	cmp	r0, #0
   d959a:	d0f9      	beq.n	d9590 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d959c:	68a3      	ldr	r3, [r4, #8]
   d959e:	2b00      	cmp	r3, #0
   d95a0:	d1f5      	bne.n	d958e <_ZN6String7reserveEj+0xe>
   d95a2:	6822      	ldr	r2, [r4, #0]
   d95a4:	7013      	strb	r3, [r2, #0]
   d95a6:	e7f2      	b.n	d958e <_ZN6String7reserveEj+0xe>

000d95a8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d95a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d95aa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d95ac:	4611      	mov	r1, r2
   d95ae:	9201      	str	r2, [sp, #4]
{
   d95b0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d95b2:	f7ff ffe5 	bl	d9580 <_ZN6String7reserveEj>
   d95b6:	9a01      	ldr	r2, [sp, #4]
   d95b8:	b928      	cbnz	r0, d95c6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d95ba:	4620      	mov	r0, r4
   d95bc:	f7ff ffc9 	bl	d9552 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d95c0:	4620      	mov	r0, r4
   d95c2:	b003      	add	sp, #12
   d95c4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d95c6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d95c8:	4629      	mov	r1, r5
   d95ca:	6820      	ldr	r0, [r4, #0]
   d95cc:	f001 fd1d 	bl	db00a <memcpy>
	buffer[len] = 0;
   d95d0:	6822      	ldr	r2, [r4, #0]
   d95d2:	68a3      	ldr	r3, [r4, #8]
   d95d4:	2100      	movs	r1, #0
   d95d6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d95d8:	e7f2      	b.n	d95c0 <_ZN6String4copyEPKcj+0x18>

000d95da <_ZN6StringC1EPKc>:
	buffer = NULL;
   d95da:	2300      	movs	r3, #0
String::String(const char *cstr)
   d95dc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d95de:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d95e2:	4604      	mov	r4, r0
	len = 0;
   d95e4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d95e6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d95e8:	b141      	cbz	r1, d95fc <_ZN6StringC1EPKc+0x22>
   d95ea:	4608      	mov	r0, r1
   d95ec:	9101      	str	r1, [sp, #4]
   d95ee:	f001 fd76 	bl	db0de <strlen>
   d95f2:	9901      	ldr	r1, [sp, #4]
   d95f4:	4602      	mov	r2, r0
   d95f6:	4620      	mov	r0, r4
   d95f8:	f7ff ffd6 	bl	d95a8 <_ZN6String4copyEPKcj>
}
   d95fc:	4620      	mov	r0, r4
   d95fe:	b002      	add	sp, #8
   d9600:	bd10      	pop	{r4, pc}

000d9602 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9602:	b538      	push	{r3, r4, r5, lr}
   d9604:	4605      	mov	r5, r0
	if (buffer) {
   d9606:	6800      	ldr	r0, [r0, #0]
{
   d9608:	460c      	mov	r4, r1
	if (buffer) {
   d960a:	b168      	cbz	r0, d9628 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d960c:	686a      	ldr	r2, [r5, #4]
   d960e:	688b      	ldr	r3, [r1, #8]
   d9610:	429a      	cmp	r2, r3
   d9612:	d307      	bcc.n	d9624 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9614:	6809      	ldr	r1, [r1, #0]
   d9616:	f001 fd3d 	bl	db094 <strcpy>
			len = rhs.len;
   d961a:	68a3      	ldr	r3, [r4, #8]
   d961c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d961e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9620:	60a3      	str	r3, [r4, #8]
}
   d9622:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9624:	f7fe fe9a 	bl	d835c <free>
	buffer = rhs.buffer;
   d9628:	6823      	ldr	r3, [r4, #0]
   d962a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d962c:	6863      	ldr	r3, [r4, #4]
   d962e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9630:	68a3      	ldr	r3, [r4, #8]
   d9632:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9634:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9636:	e9c4 3300 	strd	r3, r3, [r4]
   d963a:	e7f1      	b.n	d9620 <_ZN6String4moveERS_+0x1e>

000d963c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d963c:	4288      	cmp	r0, r1
{
   d963e:	b510      	push	{r4, lr}
   d9640:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9642:	d005      	beq.n	d9650 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9644:	680b      	ldr	r3, [r1, #0]
   d9646:	b12b      	cbz	r3, d9654 <_ZN6StringaSERKS_+0x18>
   d9648:	688a      	ldr	r2, [r1, #8]
   d964a:	4619      	mov	r1, r3
   d964c:	f7ff ffac 	bl	d95a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9650:	4620      	mov	r0, r4
   d9652:	bd10      	pop	{r4, pc}
	else invalidate();
   d9654:	f7ff ff7d 	bl	d9552 <_ZN6String10invalidateEv>
   d9658:	e7fa      	b.n	d9650 <_ZN6StringaSERKS_+0x14>

000d965a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d965a:	b510      	push	{r4, lr}
	buffer = NULL;
   d965c:	2300      	movs	r3, #0
String::String(const String &value)
   d965e:	4604      	mov	r4, r0
	capacity = 0;
   d9660:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9664:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9666:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9668:	f7ff ffe8 	bl	d963c <_ZN6StringaSERKS_>
}
   d966c:	4620      	mov	r0, r4
   d966e:	bd10      	pop	{r4, pc}

000d9670 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9670:	4288      	cmp	r0, r1
{
   d9672:	b510      	push	{r4, lr}
   d9674:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9676:	d001      	beq.n	d967c <_ZN6StringaSEOS_+0xc>
   d9678:	f7ff ffc3 	bl	d9602 <_ZN6String4moveERS_>
	return *this;
}
   d967c:	4620      	mov	r0, r4
   d967e:	bd10      	pop	{r4, pc}

000d9680 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9680:	b513      	push	{r0, r1, r4, lr}
   d9682:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9684:	b159      	cbz	r1, d969e <_ZN6StringaSEPKc+0x1e>
   d9686:	4608      	mov	r0, r1
   d9688:	9101      	str	r1, [sp, #4]
   d968a:	f001 fd28 	bl	db0de <strlen>
   d968e:	9901      	ldr	r1, [sp, #4]
   d9690:	4602      	mov	r2, r0
   d9692:	4620      	mov	r0, r4
   d9694:	f7ff ff88 	bl	d95a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9698:	4620      	mov	r0, r4
   d969a:	b002      	add	sp, #8
   d969c:	bd10      	pop	{r4, pc}
	else invalidate();
   d969e:	f7ff ff58 	bl	d9552 <_ZN6String10invalidateEv>
   d96a2:	e7f9      	b.n	d9698 <_ZN6StringaSEPKc+0x18>

000d96a4 <_ZN6StringC1Ec>:
String::String(char c)
   d96a4:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d96a6:	2300      	movs	r3, #0
	buf[0] = c;
   d96a8:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d96ac:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d96b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d96b2:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d96b4:	a901      	add	r1, sp, #4
String::String(char c)
   d96b6:	4604      	mov	r4, r0
	buf[1] = 0;
   d96b8:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d96bc:	f7ff ffe0 	bl	d9680 <_ZN6StringaSEPKc>
}
   d96c0:	4620      	mov	r0, r4
   d96c2:	b002      	add	sp, #8
   d96c4:	bd10      	pop	{r4, pc}

000d96c6 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   d96c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d96c8:	4604      	mov	r4, r0
	buffer = NULL;
   d96ca:	2300      	movs	r3, #0
	capacity = 0;
   d96cc:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d96d0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d96d2:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   d96d4:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d96d6:	a901      	add	r1, sp, #4
   d96d8:	f000 fc56 	bl	d9f88 <utoa>
	*this = buf;
   d96dc:	a901      	add	r1, sp, #4
   d96de:	4620      	mov	r0, r4
   d96e0:	f7ff ffce 	bl	d9680 <_ZN6StringaSEPKc>
}
   d96e4:	4620      	mov	r0, r4
   d96e6:	b004      	add	sp, #16
   d96e8:	bd10      	pop	{r4, pc}

000d96ea <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d96ea:	b530      	push	{r4, r5, lr}
   d96ec:	4604      	mov	r4, r0
	buffer = NULL;
   d96ee:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d96f0:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d96f2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d96f6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d96f8:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d96fa:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d96fe:	b2cd      	uxtb	r5, r1
   d9700:	f000 ff08 	bl	da514 <__aeabi_f2d>
   d9704:	ec41 0b10 	vmov	d0, r0, r1
   d9708:	a901      	add	r1, sp, #4
   d970a:	4628      	mov	r0, r5
   d970c:	f7ff febc 	bl	d9488 <_Z4dtoadhPc>
        *this = buf;
   d9710:	a901      	add	r1, sp, #4
   d9712:	4620      	mov	r0, r4
   d9714:	f7ff ffb4 	bl	d9680 <_ZN6StringaSEPKc>
}
   d9718:	4620      	mov	r0, r4
   d971a:	b00b      	add	sp, #44	; 0x2c
   d971c:	bd30      	pop	{r4, r5, pc}

000d971e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d971e:	b570      	push	{r4, r5, r6, lr}
   d9720:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9722:	460e      	mov	r6, r1
   d9724:	b909      	cbnz	r1, d972a <_ZN6String6concatEPKcj+0xc>
   d9726:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9728:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d972a:	b16a      	cbz	r2, d9748 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d972c:	6884      	ldr	r4, [r0, #8]
   d972e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9730:	4621      	mov	r1, r4
   d9732:	f7ff ff25 	bl	d9580 <_ZN6String7reserveEj>
   d9736:	2800      	cmp	r0, #0
   d9738:	d0f5      	beq.n	d9726 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d973a:	6828      	ldr	r0, [r5, #0]
   d973c:	68ab      	ldr	r3, [r5, #8]
   d973e:	4631      	mov	r1, r6
   d9740:	4418      	add	r0, r3
   d9742:	f001 fca7 	bl	db094 <strcpy>
	len = newlen;
   d9746:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9748:	2001      	movs	r0, #1
   d974a:	e7ed      	b.n	d9728 <_ZN6String6concatEPKcj+0xa>

000d974c <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d974c:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   d974e:	220a      	movs	r2, #10
{
   d9750:	4604      	mov	r4, r0
   d9752:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   d9754:	4669      	mov	r1, sp
   d9756:	f000 fc01 	bl	d9f5c <itoa>
	return concat(buf, strlen(buf));
   d975a:	4668      	mov	r0, sp
   d975c:	f001 fcbf 	bl	db0de <strlen>
   d9760:	4669      	mov	r1, sp
   d9762:	4602      	mov	r2, r0
   d9764:	4620      	mov	r0, r4
   d9766:	f7ff ffda 	bl	d971e <_ZN6String6concatEPKcj>
}
   d976a:	b002      	add	sp, #8
   d976c:	bd10      	pop	{r4, pc}

000d976e <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
   d976e:	b510      	push	{r4, lr}
   d9770:	4604      	mov	r4, r0
   d9772:	b086      	sub	sp, #24
   d9774:	ee10 0a10 	vmov	r0, s0
	char buf[20];
	dtoa(num, 6, buf);
   d9778:	f000 fecc 	bl	da514 <__aeabi_f2d>
   d977c:	ec41 0b10 	vmov	d0, r0, r1
   d9780:	a901      	add	r1, sp, #4
   d9782:	2006      	movs	r0, #6
   d9784:	f7ff fe80 	bl	d9488 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
   d9788:	a801      	add	r0, sp, #4
   d978a:	f001 fca8 	bl	db0de <strlen>
   d978e:	a901      	add	r1, sp, #4
   d9790:	4602      	mov	r2, r0
   d9792:	4620      	mov	r0, r4
   d9794:	f7ff ffc3 	bl	d971e <_ZN6String6concatEPKcj>
}
   d9798:	b006      	add	sp, #24
   d979a:	bd10      	pop	{r4, pc}

000d979c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d979c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d979e:	688a      	ldr	r2, [r1, #8]
   d97a0:	6809      	ldr	r1, [r1, #0]
{
   d97a2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d97a4:	f7ff ffbb 	bl	d971e <_ZN6String6concatEPKcj>
   d97a8:	b910      	cbnz	r0, d97b0 <_ZplRK15StringSumHelperRK6String+0x14>
   d97aa:	4620      	mov	r0, r4
   d97ac:	f7ff fed1 	bl	d9552 <_ZN6String10invalidateEv>
	return a;
}
   d97b0:	4620      	mov	r0, r4
   d97b2:	bd10      	pop	{r4, pc}

000d97b4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d97b4:	b513      	push	{r0, r1, r4, lr}
   d97b6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d97b8:	b929      	cbnz	r1, d97c6 <_ZplRK15StringSumHelperPKc+0x12>
   d97ba:	4620      	mov	r0, r4
   d97bc:	f7ff fec9 	bl	d9552 <_ZN6String10invalidateEv>
	return a;
}
   d97c0:	4620      	mov	r0, r4
   d97c2:	b002      	add	sp, #8
   d97c4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d97c6:	4608      	mov	r0, r1
   d97c8:	9101      	str	r1, [sp, #4]
   d97ca:	f001 fc88 	bl	db0de <strlen>
   d97ce:	9901      	ldr	r1, [sp, #4]
   d97d0:	4602      	mov	r2, r0
   d97d2:	4620      	mov	r0, r4
   d97d4:	f7ff ffa3 	bl	d971e <_ZN6String6concatEPKcj>
   d97d8:	2800      	cmp	r0, #0
   d97da:	d0ee      	beq.n	d97ba <_ZplRK15StringSumHelperPKc+0x6>
   d97dc:	e7f0      	b.n	d97c0 <_ZplRK15StringSumHelperPKc+0xc>

000d97de <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   d97de:	b510      	push	{r4, lr}
   d97e0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d97e2:	f7ff ffb3 	bl	d974c <_ZN6String6concatEi>
   d97e6:	b910      	cbnz	r0, d97ee <_ZplRK15StringSumHelperi+0x10>
   d97e8:	4620      	mov	r0, r4
   d97ea:	f7ff feb2 	bl	d9552 <_ZN6String10invalidateEv>
	return a;
}
   d97ee:	4620      	mov	r0, r4
   d97f0:	bd10      	pop	{r4, pc}

000d97f2 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
   d97f2:	b510      	push	{r4, lr}
   d97f4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d97f6:	f7ff ffba 	bl	d976e <_ZN6String6concatEf>
   d97fa:	b910      	cbnz	r0, d9802 <_ZplRK15StringSumHelperf+0x10>
   d97fc:	4620      	mov	r0, r4
   d97fe:	f7ff fea8 	bl	d9552 <_ZN6String10invalidateEv>
	return a;
}
   d9802:	4620      	mov	r0, r4
   d9804:	bd10      	pop	{r4, pc}

000d9806 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9806:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9808:	6882      	ldr	r2, [r0, #8]
   d980a:	b93a      	cbnz	r2, d981c <_ZNK6String6equalsEPKc+0x16>
   d980c:	b121      	cbz	r1, d9818 <_ZNK6String6equalsEPKc+0x12>
   d980e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d9810:	fab0 f080 	clz	r0, r0
   d9814:	0940      	lsrs	r0, r0, #5
   d9816:	e000      	b.n	d981a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9818:	2001      	movs	r0, #1
}
   d981a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d981c:	6800      	ldr	r0, [r0, #0]
   d981e:	b909      	cbnz	r1, d9824 <_ZNK6String6equalsEPKc+0x1e>
   d9820:	7800      	ldrb	r0, [r0, #0]
   d9822:	e7f5      	b.n	d9810 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d9824:	f001 fc2c 	bl	db080 <strcmp>
   d9828:	e7f2      	b.n	d9810 <_ZNK6String6equalsEPKc+0xa>

000d982a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d982a:	b510      	push	{r4, lr}
   d982c:	4613      	mov	r3, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d982e:	6884      	ldr	r4, [r0, #8]
   d9830:	688a      	ldr	r2, [r1, #8]
   d9832:	1aa4      	subs	r4, r4, r2
   d9834:	429c      	cmp	r4, r3
   d9836:	d30a      	bcc.n	d984e <_ZNK6String10startsWithERKS_j+0x24>
   d9838:	6800      	ldr	r0, [r0, #0]
   d983a:	b138      	cbz	r0, d984c <_ZNK6String10startsWithERKS_j+0x22>
   d983c:	6809      	ldr	r1, [r1, #0]
   d983e:	b141      	cbz	r1, d9852 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d9840:	4418      	add	r0, r3
   d9842:	f001 fc54 	bl	db0ee <strncmp>
   d9846:	fab0 f080 	clz	r0, r0
   d984a:	0940      	lsrs	r0, r0, #5
}
   d984c:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d984e:	2000      	movs	r0, #0
   d9850:	e7fc      	b.n	d984c <_ZNK6String10startsWithERKS_j+0x22>
   d9852:	4608      	mov	r0, r1
   d9854:	e7fa      	b.n	d984c <_ZNK6String10startsWithERKS_j+0x22>

000d9856 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
   d9856:	6882      	ldr	r2, [r0, #8]
   d9858:	688b      	ldr	r3, [r1, #8]
   d985a:	429a      	cmp	r2, r3
   d985c:	d302      	bcc.n	d9864 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d985e:	2200      	movs	r2, #0
   d9860:	f7ff bfe3 	b.w	d982a <_ZNK6String10startsWithERKS_j>
}
   d9864:	2000      	movs	r0, #0
   d9866:	4770      	bx	lr

000d9868 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d9868:	6883      	ldr	r3, [r0, #8]
   d986a:	428b      	cmp	r3, r1
   d986c:	d903      	bls.n	d9876 <_ZNK6StringixEj+0xe>
   d986e:	6800      	ldr	r0, [r0, #0]
   d9870:	b110      	cbz	r0, d9878 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d9872:	5c40      	ldrb	r0, [r0, r1]
   d9874:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   d9876:	2000      	movs	r0, #0
}
   d9878:	4770      	bx	lr

000d987a <_ZNK6String6charAtEj>:
	return operator[](loc);
   d987a:	f7ff bff5 	b.w	d9868 <_ZNK6StringixEj>

000d987e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d987e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d9880:	6883      	ldr	r3, [r0, #8]
   d9882:	4293      	cmp	r3, r2
   d9884:	d907      	bls.n	d9896 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d9886:	6804      	ldr	r4, [r0, #0]
   d9888:	6809      	ldr	r1, [r1, #0]
   d988a:	18a0      	adds	r0, r4, r2
   d988c:	f001 fc54 	bl	db138 <strstr>
	if (found == NULL) return -1;
   d9890:	b108      	cbz	r0, d9896 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d9892:	1b00      	subs	r0, r0, r4
}
   d9894:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d9896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d989a:	e7fb      	b.n	d9894 <_ZNK6String7indexOfERKS_j+0x16>

000d989c <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d98a0:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d98a2:	688a      	ldr	r2, [r1, #8]
{
   d98a4:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d98a6:	b1ca      	cbz	r2, d98dc <_ZNK6String11lastIndexOfERKS_j+0x40>
   d98a8:	6883      	ldr	r3, [r0, #8]
   d98aa:	b1bb      	cbz	r3, d98dc <_ZNK6String11lastIndexOfERKS_j+0x40>
   d98ac:	429a      	cmp	r2, r3
   d98ae:	d815      	bhi.n	d98dc <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d98b0:	6807      	ldr	r7, [r0, #0]
	if (fromIndex >= len) fromIndex = len - 1;
   d98b2:	42ab      	cmp	r3, r5
   d98b4:	bf98      	it	ls
   d98b6:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d98ba:	4638      	mov	r0, r7
	int found = -1;
   d98bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d98c0:	eb07 0805 	add.w	r8, r7, r5
   d98c4:	4540      	cmp	r0, r8
   d98c6:	d80b      	bhi.n	d98e0 <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
   d98c8:	6831      	ldr	r1, [r6, #0]
   d98ca:	f001 fc35 	bl	db138 <strstr>
		if (!p) break;
   d98ce:	b138      	cbz	r0, d98e0 <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d98d0:	1bc3      	subs	r3, r0, r7
   d98d2:	42ab      	cmp	r3, r5
   d98d4:	bf98      	it	ls
   d98d6:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d98d8:	3001      	adds	r0, #1
   d98da:	e7f3      	b.n	d98c4 <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d98dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}
	return found;
}
   d98e0:	4620      	mov	r0, r4
   d98e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d98e6 <_ZNK6String11lastIndexOfERKS_>:
	return lastIndexOf(s2, len - s2.len);
   d98e6:	6882      	ldr	r2, [r0, #8]
   d98e8:	688b      	ldr	r3, [r1, #8]
   d98ea:	1ad2      	subs	r2, r2, r3
   d98ec:	f7ff bfd6 	b.w	d989c <_ZNK6String11lastIndexOfERKS_j>

000d98f0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d98f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d98f2:	429a      	cmp	r2, r3
{
   d98f4:	460f      	mov	r7, r1
   d98f6:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d98f8:	490c      	ldr	r1, [pc, #48]	; (d992c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d98fa:	bf88      	it	hi
   d98fc:	4613      	movhi	r3, r2
{
   d98fe:	4614      	mov	r4, r2
   d9900:	4606      	mov	r6, r0
	if (left > right) {
   d9902:	bf84      	itt	hi
   d9904:	462c      	movhi	r4, r5
   d9906:	461d      	movhi	r5, r3
	String out;
   d9908:	f7ff fe67 	bl	d95da <_ZN6StringC1EPKc>
	if (left > len) return out;
   d990c:	68ba      	ldr	r2, [r7, #8]
   d990e:	42a2      	cmp	r2, r4
   d9910:	d30a      	bcc.n	d9928 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d9912:	6839      	ldr	r1, [r7, #0]
   d9914:	42aa      	cmp	r2, r5
   d9916:	bf94      	ite	ls
   d9918:	ebc4 0202 	rsbls	r2, r4, r2
   d991c:	ebc4 0205 	rsbhi	r2, r4, r5
   d9920:	4421      	add	r1, r4
   d9922:	4630      	mov	r0, r6
   d9924:	f7ff fe40 	bl	d95a8 <_ZN6String4copyEPKcj>
	return out;
}
   d9928:	4630      	mov	r0, r6
   d992a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d992c:	000de050 	.word	0x000de050

000d9930 <_ZNK6String9substringEj>:
{
   d9930:	b510      	push	{r4, lr}
   d9932:	4604      	mov	r4, r0
	return substring(left, len);
   d9934:	688b      	ldr	r3, [r1, #8]
   d9936:	f7ff ffdb 	bl	d98f0 <_ZNK6String9substringEjj>
}
   d993a:	4620      	mov	r0, r4
   d993c:	bd10      	pop	{r4, pc}

000d993e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d993e:	6800      	ldr	r0, [r0, #0]
   d9940:	b108      	cbz	r0, d9946 <_ZNK6String5toIntEv+0x8>
   d9942:	f001 bb50 	b.w	dafe6 <atol>
	return 0;
}
   d9946:	4770      	bx	lr

000d9948 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   d9948:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d994a:	6800      	ldr	r0, [r0, #0]
   d994c:	b140      	cbz	r0, d9960 <_ZNK6String7toFloatEv+0x18>
   d994e:	f001 fb47 	bl	dafe0 <atof>
   d9952:	ec51 0b10 	vmov	r0, r1, d0
   d9956:	f001 f92d 	bl	dabb4 <__aeabi_d2f>
   d995a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d995e:	bd08      	pop	{r3, pc}
	return 0;
   d9960:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9968 <_ZNK6String7toFloatEv+0x20>
   d9964:	e7fb      	b.n	d995e <_ZNK6String7toFloatEv+0x16>
   d9966:	bf00      	nop
   d9968:	00000000 	.word	0x00000000

000d996c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d996c:	4b05      	ldr	r3, [pc, #20]	; (d9984 <_GLOBAL__sub_I_System+0x18>)
   d996e:	2202      	movs	r2, #2
   d9970:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9972:	4b05      	ldr	r3, [pc, #20]	; (d9988 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d9974:	4a05      	ldr	r2, [pc, #20]	; (d998c <_GLOBAL__sub_I_System+0x20>)
   d9976:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d9978:	2000      	movs	r0, #0
   d997a:	6018      	str	r0, [r3, #0]
   d997c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d997e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9980:	f7fe bc10 	b.w	d81a4 <set_system_mode>
   d9984:	2003e5b0 	.word	0x2003e5b0
   d9988:	2003e5a4 	.word	0x2003e5a4
   d998c:	ffff0000 	.word	0xffff0000

000d9990 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9994:	4a15      	ldr	r2, [pc, #84]	; (d99ec <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9996:	f8df 8060 	ldr.w	r8, [pc, #96]	; d99f8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d999a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d999e:	18c0      	adds	r0, r0, r3
   d99a0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d99a4:	4a12      	ldr	r2, [pc, #72]	; (d99f0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d99a6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d99aa:	18c6      	adds	r6, r0, r3
   d99ac:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d99b0:	e9d8 2300 	ldrd	r2, r3, [r8]
   d99b4:	42bb      	cmp	r3, r7
   d99b6:	bf08      	it	eq
   d99b8:	42b2      	cmpeq	r2, r6
{
   d99ba:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d99bc:	d013      	beq.n	d99e6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d99be:	a903      	add	r1, sp, #12
   d99c0:	4668      	mov	r0, sp
   d99c2:	e9cd 6700 	strd	r6, r7, [sp]
   d99c6:	f7fe fd11 	bl	d83ec <localtime_r>
	calendar_time.tm_year += 1900;
   d99ca:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d99cc:	4d09      	ldr	r5, [pc, #36]	; (d99f4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d99ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d99d2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d99d4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d99d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d99d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d99da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d99dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d99de:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d99e2:	6823      	ldr	r3, [r4, #0]
   d99e4:	602b      	str	r3, [r5, #0]
    }
}
   d99e6:	b00c      	add	sp, #48	; 0x30
   d99e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d99ec:	2003e5e8 	.word	0x2003e5e8
   d99f0:	2003e5e0 	.word	0x2003e5e0
   d99f4:	2003e5bc 	.word	0x2003e5bc
   d99f8:	2003e5f0 	.word	0x2003e5f0

000d99fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d99fc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d99fe:	2000      	movs	r0, #0
   d9a00:	f7fe fc34 	bl	d826c <spark_sync_time_pending>
   d9a04:	b128      	cbz	r0, d9a12 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9a06:	f7fe fc11 	bl	d822c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9a0a:	f080 0001 	eor.w	r0, r0, #1
   d9a0e:	b2c0      	uxtb	r0, r0
    }
   d9a10:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9a12:	2001      	movs	r0, #1
   d9a14:	e7fc      	b.n	d9a10 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d9a18 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9a18:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9a1a:	f7ff ffb9 	bl	d9990 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9a1e:	4b02      	ldr	r3, [pc, #8]	; (d9a28 <_ZN9TimeClass5monthEx+0x10>)
   d9a20:	6918      	ldr	r0, [r3, #16]
}
   d9a22:	3001      	adds	r0, #1
   d9a24:	bd08      	pop	{r3, pc}
   d9a26:	bf00      	nop
   d9a28:	2003e5bc 	.word	0x2003e5bc

000d9a2c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9a2c:	b530      	push	{r4, r5, lr}
   d9a2e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9a30:	4818      	ldr	r0, [pc, #96]	; (d9a94 <_ZN9TimeClass7timeStrEx+0x68>)
   d9a32:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9a36:	1852      	adds	r2, r2, r1
   d9a38:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d9a3c:	4816      	ldr	r0, [pc, #88]	; (d9a98 <_ZN9TimeClass7timeStrEx+0x6c>)
   d9a3e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9a42:	1852      	adds	r2, r2, r1
{
   d9a44:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9a46:	eb40 0303 	adc.w	r3, r0, r3
   d9a4a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d9a4e:	2224      	movs	r2, #36	; 0x24
   d9a50:	eb0d 0002 	add.w	r0, sp, r2
   d9a54:	2100      	movs	r1, #0
   d9a56:	f001 fae6 	bl	db026 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d9a5a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9a5c:	a909      	add	r1, sp, #36	; 0x24
   d9a5e:	4668      	mov	r0, sp
   d9a60:	f7fe fcc4 	bl	d83ec <localtime_r>
    char ascstr[26] = {};
   d9a64:	2216      	movs	r2, #22
   d9a66:	4629      	mov	r1, r5
   d9a68:	a803      	add	r0, sp, #12
   d9a6a:	9502      	str	r5, [sp, #8]
   d9a6c:	f001 fadb 	bl	db026 <memset>
    asctime_r(&calendar_time, ascstr);
   d9a70:	a902      	add	r1, sp, #8
   d9a72:	a809      	add	r0, sp, #36	; 0x24
   d9a74:	f001 fa88 	bl	daf88 <asctime_r>
    int len = strlen(ascstr);
   d9a78:	a802      	add	r0, sp, #8
   d9a7a:	f001 fb30 	bl	db0de <strlen>
    ascstr[len-1] = 0; // remove final newline
   d9a7e:	ab12      	add	r3, sp, #72	; 0x48
   d9a80:	4418      	add	r0, r3
    return String(ascstr);
   d9a82:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d9a84:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d9a88:	4620      	mov	r0, r4
   d9a8a:	f7ff fda6 	bl	d95da <_ZN6StringC1EPKc>
}
   d9a8e:	4620      	mov	r0, r4
   d9a90:	b013      	add	sp, #76	; 0x4c
   d9a92:	bd30      	pop	{r4, r5, pc}
   d9a94:	2003e5e8 	.word	0x2003e5e8
   d9a98:	2003e5e0 	.word	0x2003e5e0

000d9a9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d9a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9aa0:	b0a5      	sub	sp, #148	; 0x94
   d9aa2:	4607      	mov	r7, r0
   d9aa4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9aa6:	a814      	add	r0, sp, #80	; 0x50
{
   d9aa8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9aaa:	223f      	movs	r2, #63	; 0x3f
{
   d9aac:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9aae:	f001 fb30 	bl	db112 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9ab2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9ab4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9ab6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9aba:	f001 fb10 	bl	db0de <strlen>
   d9abe:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9ac0:	bb5d      	cbnz	r5, d9b1a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d9ac2:	492a      	ldr	r1, [pc, #168]	; (d9b6c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d9ac4:	a803      	add	r0, sp, #12
   d9ac6:	f001 fae5 	bl	db094 <strcpy>
   d9aca:	ae14      	add	r6, sp, #80	; 0x50
{
   d9acc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d9ace:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d9ad2:	45ab      	cmp	fp, r5
   d9ad4:	d936      	bls.n	d9b44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9ad6:	46b1      	mov	r9, r6
   d9ad8:	f105 0a01 	add.w	sl, r5, #1
   d9adc:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9ae0:	2b25      	cmp	r3, #37	; 0x25
   d9ae2:	d117      	bne.n	d9b14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d9ae4:	7873      	ldrb	r3, [r6, #1]
   d9ae6:	2b7a      	cmp	r3, #122	; 0x7a
   d9ae8:	d114      	bne.n	d9b14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9aea:	a803      	add	r0, sp, #12
   d9aec:	f001 faf7 	bl	db0de <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9af0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d9af2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9af4:	1828      	adds	r0, r5, r0
   d9af6:	4418      	add	r0, r3
   d9af8:	ebab 0205 	sub.w	r2, fp, r5
   d9afc:	1cb1      	adds	r1, r6, #2
   d9afe:	f001 fa84 	bl	db00a <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9b02:	4622      	mov	r2, r4
   d9b04:	a903      	add	r1, sp, #12
   d9b06:	4630      	mov	r0, r6
   d9b08:	f001 fa7f 	bl	db00a <memcpy>
            len = strlen(format_str);
   d9b0c:	a814      	add	r0, sp, #80	; 0x50
   d9b0e:	f001 fae6 	bl	db0de <strlen>
   d9b12:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d9b14:	464e      	mov	r6, r9
   d9b16:	4655      	mov	r5, sl
   d9b18:	e7d9      	b.n	d9ace <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9b1a:	213c      	movs	r1, #60	; 0x3c
   d9b1c:	fb95 f3f1 	sdiv	r3, r5, r1
   d9b20:	2b00      	cmp	r3, #0
   d9b22:	bfb8      	it	lt
   d9b24:	425b      	neglt	r3, r3
   d9b26:	fbb3 f2f1 	udiv	r2, r3, r1
   d9b2a:	fb01 3312 	mls	r3, r1, r2, r3
   d9b2e:	9300      	str	r3, [sp, #0]
   d9b30:	4a0f      	ldr	r2, [pc, #60]	; (d9b70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d9b32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9b36:	2110      	movs	r1, #16
   d9b38:	a803      	add	r0, sp, #12
   d9b3a:	fb95 f3f3 	sdiv	r3, r5, r3
   d9b3e:	f7fe fc25 	bl	d838c <snprintf>
   d9b42:	e7c2      	b.n	d9aca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9b44:	2100      	movs	r1, #0
   d9b46:	222e      	movs	r2, #46	; 0x2e
   d9b48:	a808      	add	r0, sp, #32
   d9b4a:	9107      	str	r1, [sp, #28]
   d9b4c:	f001 fa6b 	bl	db026 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9b50:	4643      	mov	r3, r8
   d9b52:	aa14      	add	r2, sp, #80	; 0x50
   d9b54:	2132      	movs	r1, #50	; 0x32
   d9b56:	a807      	add	r0, sp, #28
   d9b58:	f7fe fc40 	bl	d83dc <strftime>
    return String(buf);
   d9b5c:	a907      	add	r1, sp, #28
   d9b5e:	4638      	mov	r0, r7
   d9b60:	f7ff fd3b 	bl	d95da <_ZN6StringC1EPKc>
}
   d9b64:	4638      	mov	r0, r7
   d9b66:	b025      	add	sp, #148	; 0x94
   d9b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9b6c:	000ddfa4 	.word	0x000ddfa4
   d9b70:	000ddfa6 	.word	0x000ddfa6

000d9b74 <_ZN9TimeClass6formatExPKc>:
{
   d9b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9b76:	b08d      	sub	sp, #52	; 0x34
   d9b78:	e9cd 2300 	strd	r2, r3, [sp]
   d9b7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9b7e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9b80:	b915      	cbnz	r5, d9b88 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9b82:	4b19      	ldr	r3, [pc, #100]	; (d9be8 <_ZN9TimeClass6formatExPKc+0x74>)
   d9b84:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9b86:	b12d      	cbz	r5, d9b94 <_ZN9TimeClass6formatExPKc+0x20>
   d9b88:	4b18      	ldr	r3, [pc, #96]	; (d9bec <_ZN9TimeClass6formatExPKc+0x78>)
   d9b8a:	4628      	mov	r0, r5
   d9b8c:	6819      	ldr	r1, [r3, #0]
   d9b8e:	f001 fa77 	bl	db080 <strcmp>
   d9b92:	b938      	cbnz	r0, d9ba4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9b94:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9b98:	4620      	mov	r0, r4
   d9b9a:	f7ff ff47 	bl	d9a2c <_ZN9TimeClass7timeStrEx>
}
   d9b9e:	4620      	mov	r0, r4
   d9ba0:	b00d      	add	sp, #52	; 0x34
   d9ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9ba4:	4e12      	ldr	r6, [pc, #72]	; (d9bf0 <_ZN9TimeClass6formatExPKc+0x7c>)
   d9ba6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9ba8:	4f12      	ldr	r7, [pc, #72]	; (d9bf4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d9baa:	e9d6 3200 	ldrd	r3, r2, [r6]
   d9bae:	185b      	adds	r3, r3, r1
   d9bb0:	9901      	ldr	r1, [sp, #4]
   d9bb2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d9bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9bba:	181b      	adds	r3, r3, r0
   d9bbc:	eb41 0202 	adc.w	r2, r1, r2
   d9bc0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d9bc4:	2100      	movs	r1, #0
   d9bc6:	2224      	movs	r2, #36	; 0x24
   d9bc8:	a803      	add	r0, sp, #12
   d9bca:	f001 fa2c 	bl	db026 <memset>
    localtime_r(&t, &calendar_time);
   d9bce:	a903      	add	r1, sp, #12
   d9bd0:	4668      	mov	r0, sp
   d9bd2:	f7fe fc0b 	bl	d83ec <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9bd6:	6832      	ldr	r2, [r6, #0]
   d9bd8:	683b      	ldr	r3, [r7, #0]
   d9bda:	a903      	add	r1, sp, #12
   d9bdc:	4413      	add	r3, r2
   d9bde:	4620      	mov	r0, r4
   d9be0:	462a      	mov	r2, r5
   d9be2:	f7ff ff5b 	bl	d9a9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d9be6:	e7da      	b.n	d9b9e <_ZN9TimeClass6formatExPKc+0x2a>
   d9be8:	2003e5b8 	.word	0x2003e5b8
   d9bec:	2003dce0 	.word	0x2003dce0
   d9bf0:	2003e5e8 	.word	0x2003e5e8
   d9bf4:	2003e5e0 	.word	0x2003e5e0

000d9bf8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9bf8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9bfa:	2000      	movs	r0, #0
   d9bfc:	f7fe f930 	bl	d7e60 <hal_rtc_time_is_valid>
    if (rtcstate)
   d9c00:	4604      	mov	r4, r0
   d9c02:	b9a0      	cbnz	r0, d9c2e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9c04:	f7fe fac6 	bl	d8194 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9c08:	2801      	cmp	r0, #1
   d9c0a:	d110      	bne.n	d9c2e <_ZN9TimeClass7isValidEv+0x36>
   d9c0c:	4620      	mov	r0, r4
   d9c0e:	f7fe fae9 	bl	d81e4 <system_thread_get_state>
   d9c12:	b960      	cbnz	r0, d9c2e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d9c14:	f7ff fef2 	bl	d99fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9c18:	b910      	cbnz	r0, d9c20 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9c1a:	f7fe faff 	bl	d821c <spark_process>
        while (_while() && !_condition()) {
   d9c1e:	e7f9      	b.n	d9c14 <_ZN9TimeClass7isValidEv+0x1c>
   d9c20:	f7ff feec 	bl	d99fc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9c28:	2000      	movs	r0, #0
   d9c2a:	f7fe b919 	b.w	d7e60 <hal_rtc_time_is_valid>
}
   d9c2e:	4620      	mov	r0, r4
   d9c30:	bd10      	pop	{r4, pc}

000d9c32 <_ZN9TimeClass3nowEv>:
{
   d9c32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9c34:	f7ff ffe0 	bl	d9bf8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9c38:	2210      	movs	r2, #16
   d9c3a:	2100      	movs	r1, #0
   d9c3c:	4668      	mov	r0, sp
   d9c3e:	f001 f9f2 	bl	db026 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9c42:	2100      	movs	r1, #0
   d9c44:	4668      	mov	r0, sp
   d9c46:	f7fe f913 	bl	d7e70 <hal_rtc_get_time>
}
   d9c4a:	9800      	ldr	r0, [sp, #0]
   d9c4c:	b005      	add	sp, #20
   d9c4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9c54 <_ZN9TimeClass4hourEv>:
{
   d9c54:	b508      	push	{r3, lr}
	return hour(now());
   d9c56:	f7ff ffec 	bl	d9c32 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9c5a:	17c1      	asrs	r1, r0, #31
   d9c5c:	f7ff fe98 	bl	d9990 <_ZL22Refresh_UnixTime_Cachex>
}
   d9c60:	4b01      	ldr	r3, [pc, #4]	; (d9c68 <_ZN9TimeClass4hourEv+0x14>)
   d9c62:	6898      	ldr	r0, [r3, #8]
   d9c64:	bd08      	pop	{r3, pc}
   d9c66:	bf00      	nop
   d9c68:	2003e5bc 	.word	0x2003e5bc

000d9c6c <_ZN9TimeClass6minuteEv>:
{
   d9c6c:	b508      	push	{r3, lr}
	return minute(now());
   d9c6e:	f7ff ffe0 	bl	d9c32 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9c72:	17c1      	asrs	r1, r0, #31
   d9c74:	f7ff fe8c 	bl	d9990 <_ZL22Refresh_UnixTime_Cachex>
}
   d9c78:	4b01      	ldr	r3, [pc, #4]	; (d9c80 <_ZN9TimeClass6minuteEv+0x14>)
   d9c7a:	6858      	ldr	r0, [r3, #4]
   d9c7c:	bd08      	pop	{r3, pc}
   d9c7e:	bf00      	nop
   d9c80:	2003e5bc 	.word	0x2003e5bc

000d9c84 <_ZN9TimeClass3dayEv>:
{
   d9c84:	b508      	push	{r3, lr}
	return day(now());
   d9c86:	f7ff ffd4 	bl	d9c32 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9c8a:	17c1      	asrs	r1, r0, #31
   d9c8c:	f7ff fe80 	bl	d9990 <_ZL22Refresh_UnixTime_Cachex>
}
   d9c90:	4b01      	ldr	r3, [pc, #4]	; (d9c98 <_ZN9TimeClass3dayEv+0x14>)
   d9c92:	68d8      	ldr	r0, [r3, #12]
   d9c94:	bd08      	pop	{r3, pc}
   d9c96:	bf00      	nop
   d9c98:	2003e5bc 	.word	0x2003e5bc

000d9c9c <_ZN9TimeClass5monthEv>:
{
   d9c9c:	b508      	push	{r3, lr}
	return month(now());
   d9c9e:	f7ff ffc8 	bl	d9c32 <_ZN9TimeClass3nowEv>
}
   d9ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9ca6:	17c1      	asrs	r1, r0, #31
   d9ca8:	f7ff beb6 	b.w	d9a18 <_ZN9TimeClass5monthEx>

000d9cac <_ZN9TimeClass4yearEv>:
{
   d9cac:	b508      	push	{r3, lr}
	return year(now());
   d9cae:	f7ff ffc0 	bl	d9c32 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9cb2:	17c1      	asrs	r1, r0, #31
   d9cb4:	f7ff fe6c 	bl	d9990 <_ZL22Refresh_UnixTime_Cachex>
}
   d9cb8:	4b01      	ldr	r3, [pc, #4]	; (d9cc0 <_ZN9TimeClass4yearEv+0x14>)
   d9cba:	6958      	ldr	r0, [r3, #20]
   d9cbc:	bd08      	pop	{r3, pc}
   d9cbe:	bf00      	nop
   d9cc0:	2003e5bc 	.word	0x2003e5bc

000d9cc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9cc4:	4b02      	ldr	r3, [pc, #8]	; (d9cd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9cc6:	681a      	ldr	r2, [r3, #0]
   d9cc8:	4b02      	ldr	r3, [pc, #8]	; (d9cd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9cca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9ccc:	4770      	bx	lr
   d9cce:	bf00      	nop
   d9cd0:	2003dce0 	.word	0x2003dce0
   d9cd4:	2003e5b8 	.word	0x2003e5b8

000d9cd8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9cd8:	4770      	bx	lr

000d9cda <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9cda:	7441      	strb	r1, [r0, #17]
}
   d9cdc:	4770      	bx	lr

000d9cde <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9cde:	4770      	bx	lr

000d9ce0 <_ZN11USARTSerial17availableForWriteEv>:
{
   d9ce0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9ce2:	7c00      	ldrb	r0, [r0, #16]
   d9ce4:	f7fe f9fc 	bl	d80e0 <hal_usart_available_data_for_write>
}
   d9ce8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9cec:	bd08      	pop	{r3, pc}

000d9cee <_ZN11USARTSerial9availableEv>:
{
   d9cee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9cf0:	7c00      	ldrb	r0, [r0, #16]
   d9cf2:	f7fe f9cd 	bl	d8090 <hal_usart_available>
}
   d9cf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9cfa:	bd08      	pop	{r3, pc}

000d9cfc <_ZN11USARTSerial4peekEv>:
{
   d9cfc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9cfe:	7c00      	ldrb	r0, [r0, #16]
   d9d00:	f7fe f9d6 	bl	d80b0 <hal_usart_peek>
}
   d9d04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d08:	bd08      	pop	{r3, pc}

000d9d0a <_ZN11USARTSerial4readEv>:
{
   d9d0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9d0c:	7c00      	ldrb	r0, [r0, #16]
   d9d0e:	f7fe f9c7 	bl	d80a0 <hal_usart_read>
}
   d9d12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d16:	bd08      	pop	{r3, pc}

000d9d18 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d9d18:	7c00      	ldrb	r0, [r0, #16]
   d9d1a:	f7fe b9d1 	b.w	d80c0 <hal_usart_flush>

000d9d1e <_ZN11USARTSerial5writeEh>:
{
   d9d1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9d20:	7c45      	ldrb	r5, [r0, #17]
{
   d9d22:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9d24:	b12d      	cbz	r5, d9d32 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d9d26:	7c20      	ldrb	r0, [r4, #16]
}
   d9d28:	b003      	add	sp, #12
   d9d2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9d2e:	f7fe b9a7 	b.w	d8080 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9d32:	7c00      	ldrb	r0, [r0, #16]
   d9d34:	9101      	str	r1, [sp, #4]
   d9d36:	f7fe f9d3 	bl	d80e0 <hal_usart_available_data_for_write>
   d9d3a:	2800      	cmp	r0, #0
   d9d3c:	9901      	ldr	r1, [sp, #4]
   d9d3e:	dcf2      	bgt.n	d9d26 <_ZN11USARTSerial5writeEh+0x8>
}
   d9d40:	4628      	mov	r0, r5
   d9d42:	b003      	add	sp, #12
   d9d44:	bd30      	pop	{r4, r5, pc}

000d9d46 <_ZN11USARTSerialD0Ev>:
   d9d46:	b510      	push	{r4, lr}
   d9d48:	2114      	movs	r1, #20
   d9d4a:	4604      	mov	r4, r0
   d9d4c:	f000 fa76 	bl	da23c <_ZdlPvj>
   d9d50:	4620      	mov	r0, r4
   d9d52:	bd10      	pop	{r4, pc}

000d9d54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9d54:	b510      	push	{r4, lr}
   d9d56:	f04f 0c00 	mov.w	ip, #0
   d9d5a:	4604      	mov	r4, r0
   d9d5c:	4608      	mov	r0, r1
   d9d5e:	4611      	mov	r1, r2
   d9d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9d64:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9d68:	4a04      	ldr	r2, [pc, #16]	; (d9d7c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9d6a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9d6c:	2201      	movs	r2, #1
  _serial = serial;
   d9d6e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9d70:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9d72:	461a      	mov	r2, r3
   d9d74:	f7fe f97c 	bl	d8070 <hal_usart_init>
}
   d9d78:	4620      	mov	r0, r4
   d9d7a:	bd10      	pop	{r4, pc}
   d9d7c:	000ddfd8 	.word	0x000ddfd8

000d9d80 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d9d80:	7c00      	ldrb	r0, [r0, #16]
   d9d82:	2300      	movs	r3, #0
   d9d84:	f7fe b9b4 	b.w	d80f0 <hal_usart_begin_config>

000d9d88 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d9d88:	2200      	movs	r2, #0
   d9d8a:	f7ff bff9 	b.w	d9d80 <_ZN11USARTSerial5beginEmm>
	...

000d9d90 <_Z22__fetch_global_Serial1v>:
{
   d9d90:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9d92:	4c0d      	ldr	r4, [pc, #52]	; (d9dc8 <_Z22__fetch_global_Serial1v+0x38>)
   d9d94:	7821      	ldrb	r1, [r4, #0]
   d9d96:	f3bf 8f5b 	dmb	ish
   d9d9a:	f011 0101 	ands.w	r1, r1, #1
   d9d9e:	d110      	bne.n	d9dc2 <_Z22__fetch_global_Serial1v+0x32>
   d9da0:	4620      	mov	r0, r4
   d9da2:	9101      	str	r1, [sp, #4]
   d9da4:	f7fa f988 	bl	d40b8 <__cxa_guard_acquire>
   d9da8:	9901      	ldr	r1, [sp, #4]
   d9daa:	b150      	cbz	r0, d9dc2 <_Z22__fetch_global_Serial1v+0x32>
   d9dac:	4b07      	ldr	r3, [pc, #28]	; (d9dcc <_Z22__fetch_global_Serial1v+0x3c>)
   d9dae:	4a08      	ldr	r2, [pc, #32]	; (d9dd0 <_Z22__fetch_global_Serial1v+0x40>)
   d9db0:	4808      	ldr	r0, [pc, #32]	; (d9dd4 <_Z22__fetch_global_Serial1v+0x44>)
   d9db2:	f7ff ffcf 	bl	d9d54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9db6:	4620      	mov	r0, r4
   d9db8:	f7fa f983 	bl	d40c2 <__cxa_guard_release>
   d9dbc:	4806      	ldr	r0, [pc, #24]	; (d9dd8 <_Z22__fetch_global_Serial1v+0x48>)
   d9dbe:	f001 f909 	bl	dafd4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9dc2:	4804      	ldr	r0, [pc, #16]	; (d9dd4 <_Z22__fetch_global_Serial1v+0x44>)
   d9dc4:	b002      	add	sp, #8
   d9dc6:	bd10      	pop	{r4, pc}
   d9dc8:	2003e5f8 	.word	0x2003e5f8
   d9dcc:	2003e680 	.word	0x2003e680
   d9dd0:	2003e5fc 	.word	0x2003e5fc
   d9dd4:	2003e704 	.word	0x2003e704
   d9dd8:	000d9cdf 	.word	0x000d9cdf

000d9ddc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9ddc:	7441      	strb	r1, [r0, #17]
}
   d9dde:	4770      	bx	lr

000d9de0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9de0:	4770      	bx	lr

000d9de2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9de2:	4770      	bx	lr

000d9de4 <_ZN9USBSerial4readEv>:
{
   d9de4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9de6:	2100      	movs	r1, #0
   d9de8:	7c00      	ldrb	r0, [r0, #16]
   d9dea:	f7fe f9a9 	bl	d8140 <HAL_USB_USART_Receive_Data>
}
   d9dee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9df2:	bd08      	pop	{r3, pc}

000d9df4 <_ZN9USBSerial4peekEv>:
{
   d9df4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9df6:	2101      	movs	r1, #1
   d9df8:	7c00      	ldrb	r0, [r0, #16]
   d9dfa:	f7fe f9a1 	bl	d8140 <HAL_USB_USART_Receive_Data>
}
   d9dfe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9e02:	bd08      	pop	{r3, pc}

000d9e04 <_ZN9USBSerial17availableForWriteEv>:
{
   d9e04:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9e06:	7c00      	ldrb	r0, [r0, #16]
   d9e08:	f7fe f992 	bl	d8130 <HAL_USB_USART_Available_Data_For_Write>
}
   d9e0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e10:	bd08      	pop	{r3, pc}

000d9e12 <_ZN9USBSerial9availableEv>:
{
   d9e12:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9e14:	7c00      	ldrb	r0, [r0, #16]
   d9e16:	f7fe f983 	bl	d8120 <HAL_USB_USART_Available_Data>
}
   d9e1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e1e:	bd08      	pop	{r3, pc}

000d9e20 <_ZN9USBSerial5writeEh>:
{
   d9e20:	b513      	push	{r0, r1, r4, lr}
   d9e22:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9e24:	7c00      	ldrb	r0, [r0, #16]
{
   d9e26:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9e28:	f7fe f982 	bl	d8130 <HAL_USB_USART_Available_Data_For_Write>
   d9e2c:	2800      	cmp	r0, #0
   d9e2e:	9901      	ldr	r1, [sp, #4]
   d9e30:	dc01      	bgt.n	d9e36 <_ZN9USBSerial5writeEh+0x16>
   d9e32:	7c60      	ldrb	r0, [r4, #17]
   d9e34:	b120      	cbz	r0, d9e40 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9e36:	7c20      	ldrb	r0, [r4, #16]
   d9e38:	f7fe f98a 	bl	d8150 <HAL_USB_USART_Send_Data>
   d9e3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9e40:	b002      	add	sp, #8
   d9e42:	bd10      	pop	{r4, pc}

000d9e44 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9e44:	7c00      	ldrb	r0, [r0, #16]
   d9e46:	f7fe b98b 	b.w	d8160 <HAL_USB_USART_Flush_Data>

000d9e4a <_ZN9USBSerialD0Ev>:
   d9e4a:	b510      	push	{r4, lr}
   d9e4c:	2114      	movs	r1, #20
   d9e4e:	4604      	mov	r4, r0
   d9e50:	f000 f9f4 	bl	da23c <_ZdlPvj>
   d9e54:	4620      	mov	r0, r4
   d9e56:	bd10      	pop	{r4, pc}

000d9e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9e58:	b510      	push	{r4, lr}
   d9e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9e5e:	4604      	mov	r4, r0
   d9e60:	4608      	mov	r0, r1
   d9e62:	2100      	movs	r1, #0
   d9e64:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9e68:	4b04      	ldr	r3, [pc, #16]	; (d9e7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9e6a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9e6c:	2301      	movs	r3, #1
  _serial = serial;
   d9e6e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9e70:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9e72:	4611      	mov	r1, r2
   d9e74:	f7fe f944 	bl	d8100 <HAL_USB_USART_Init>
}
   d9e78:	4620      	mov	r0, r4
   d9e7a:	bd10      	pop	{r4, pc}
   d9e7c:	000de008 	.word	0x000de008

000d9e80 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9e80:	7c00      	ldrb	r0, [r0, #16]
   d9e82:	2200      	movs	r2, #0
   d9e84:	f7fe b944 	b.w	d8110 <HAL_USB_USART_Begin>

000d9e88 <_Z19acquireSerialBufferv>:
{
   d9e88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9e8a:	2214      	movs	r2, #20
{
   d9e8c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9e8e:	2100      	movs	r1, #0
   d9e90:	f001 f8c9 	bl	db026 <memset>
}
   d9e94:	4620      	mov	r0, r4
   d9e96:	bd10      	pop	{r4, pc}

000d9e98 <_Z16_fetch_usbserialv>:
{
   d9e98:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9e9a:	4c0f      	ldr	r4, [pc, #60]	; (d9ed8 <_Z16_fetch_usbserialv+0x40>)
{
   d9e9c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9e9e:	a803      	add	r0, sp, #12
   d9ea0:	f7ff fff2 	bl	d9e88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9ea4:	7821      	ldrb	r1, [r4, #0]
   d9ea6:	f3bf 8f5b 	dmb	ish
   d9eaa:	f011 0101 	ands.w	r1, r1, #1
   d9eae:	d10f      	bne.n	d9ed0 <_Z16_fetch_usbserialv+0x38>
   d9eb0:	4620      	mov	r0, r4
   d9eb2:	9101      	str	r1, [sp, #4]
   d9eb4:	f7fa f900 	bl	d40b8 <__cxa_guard_acquire>
   d9eb8:	9901      	ldr	r1, [sp, #4]
   d9eba:	b148      	cbz	r0, d9ed0 <_Z16_fetch_usbserialv+0x38>
   d9ebc:	aa03      	add	r2, sp, #12
   d9ebe:	4807      	ldr	r0, [pc, #28]	; (d9edc <_Z16_fetch_usbserialv+0x44>)
   d9ec0:	f7ff ffca 	bl	d9e58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9ec4:	4620      	mov	r0, r4
   d9ec6:	f7fa f8fc 	bl	d40c2 <__cxa_guard_release>
   d9eca:	4805      	ldr	r0, [pc, #20]	; (d9ee0 <_Z16_fetch_usbserialv+0x48>)
   d9ecc:	f001 f882 	bl	dafd4 <atexit>
	return _usbserial;
}
   d9ed0:	4802      	ldr	r0, [pc, #8]	; (d9edc <_Z16_fetch_usbserialv+0x44>)
   d9ed2:	b008      	add	sp, #32
   d9ed4:	bd10      	pop	{r4, pc}
   d9ed6:	bf00      	nop
   d9ed8:	2003e718 	.word	0x2003e718
   d9edc:	2003e71c 	.word	0x2003e71c
   d9ee0:	000d9de1 	.word	0x000d9de1

000d9ee4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9ee4:	b510      	push	{r4, lr}
   d9ee6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9ee8:	f001 f8f9 	bl	db0de <strlen>
   d9eec:	3801      	subs	r0, #1
   d9eee:	1823      	adds	r3, r4, r0
   d9ef0:	4620      	mov	r0, r4
	while(i<j){
   d9ef2:	4283      	cmp	r3, r0
   d9ef4:	d906      	bls.n	d9f04 <_Z11str_reversePc+0x20>
		c = *i;
   d9ef6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9ef8:	7819      	ldrb	r1, [r3, #0]
   d9efa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9efe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d9f02:	e7f6      	b.n	d9ef2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d9f04:	bd10      	pop	{r4, pc}

000d9f06 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9f06:	b570      	push	{r4, r5, r6, lr}
   d9f08:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9f0a:	1e91      	subs	r1, r2, #2
   d9f0c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9f0e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9f10:	d822      	bhi.n	d9f58 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d9f12:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d9f14:	b16d      	cbz	r5, d9f32 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9f16:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d9f1a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d9f1e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9f20:	2d09      	cmp	r5, #9
                *ptr += '0';
   d9f22:	bf94      	ite	ls
   d9f24:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9f26:	3157      	addhi	r1, #87	; 0x57
   d9f28:	b2c9      	uxtb	r1, r1
   d9f2a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d9f2e:	4635      	mov	r5, r6
	while(a){
   d9f30:	e7f0      	b.n	d9f14 <ultoa+0xe>
   d9f32:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d9f34:	4423      	add	r3, r4
            *ptr++ = '0';
   d9f36:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d9f38:	4293      	cmp	r3, r2
   d9f3a:	d902      	bls.n	d9f42 <ultoa+0x3c>
            *ptr++ = '0';
   d9f3c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d9f40:	e7fa      	b.n	d9f38 <ultoa+0x32>
   d9f42:	1a1a      	subs	r2, r3, r0
   d9f44:	4283      	cmp	r3, r0
   d9f46:	bf38      	it	cc
   d9f48:	2200      	movcc	r2, #0

	*ptr = '\0';
   d9f4a:	2300      	movs	r3, #0
   d9f4c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d9f4e:	4620      	mov	r0, r4
   d9f50:	f7ff ffc8 	bl	d9ee4 <_Z11str_reversePc>
	return buffer;
   d9f54:	4620      	mov	r0, r4
}
   d9f56:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d9f58:	2000      	movs	r0, #0
   d9f5a:	e7fc      	b.n	d9f56 <ultoa+0x50>

000d9f5c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9f5c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9f5e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9f60:	460c      	mov	r4, r1
   d9f62:	4615      	mov	r5, r2
	if(a<0){
   d9f64:	da0e      	bge.n	d9f84 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d9f6a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9f6e:	bf14      	ite	ne
   d9f70:	4258      	negne	r0, r3
   d9f72:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9f74:	2301      	movs	r3, #1
		*buffer = '-';
   d9f76:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d9f78:	462a      	mov	r2, r5
   d9f7a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d9f7c:	f7ff ffc3 	bl	d9f06 <ultoa>
	}
	return buffer;
}
   d9f80:	4620      	mov	r0, r4
   d9f82:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d9f84:	2301      	movs	r3, #1
   d9f86:	e7f9      	b.n	d9f7c <itoa+0x20>

000d9f88 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9f88:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9f8a:	2301      	movs	r3, #1
   d9f8c:	f7ff ffbb 	bl	d9f06 <ultoa>
}
   d9f90:	bd08      	pop	{r3, pc}
	...

000d9f94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9f94:	4b01      	ldr	r3, [pc, #4]	; (d9f9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9f96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9f98:	4770      	bx	lr
   d9f9a:	bf00      	nop
   d9f9c:	2003dce8 	.word	0x2003dce8

000d9fa0 <serialEventRun>:
{
   d9fa0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9fa2:	4b0b      	ldr	r3, [pc, #44]	; (d9fd0 <serialEventRun+0x30>)
   d9fa4:	b143      	cbz	r3, d9fb8 <serialEventRun+0x18>
   d9fa6:	f7ff ff77 	bl	d9e98 <_Z16_fetch_usbserialv>
   d9faa:	6803      	ldr	r3, [r0, #0]
   d9fac:	691b      	ldr	r3, [r3, #16]
   d9fae:	4798      	blx	r3
   d9fb0:	2800      	cmp	r0, #0
   d9fb2:	dd01      	ble.n	d9fb8 <serialEventRun+0x18>
        serialEvent();
   d9fb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9fb8:	4b06      	ldr	r3, [pc, #24]	; (d9fd4 <serialEventRun+0x34>)
   d9fba:	b143      	cbz	r3, d9fce <serialEventRun+0x2e>
   d9fbc:	f7ff fee8 	bl	d9d90 <_Z22__fetch_global_Serial1v>
   d9fc0:	6803      	ldr	r3, [r0, #0]
   d9fc2:	691b      	ldr	r3, [r3, #16]
   d9fc4:	4798      	blx	r3
   d9fc6:	2800      	cmp	r0, #0
   d9fc8:	dd01      	ble.n	d9fce <serialEventRun+0x2e>
        serialEvent1();
   d9fca:	f3af 8000 	nop.w
}
   d9fce:	bd08      	pop	{r3, pc}
	...

000d9fd8 <_post_loop>:
{
   d9fd8:	b508      	push	{r3, lr}
	serialEventRun();
   d9fda:	f7ff ffe1 	bl	d9fa0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9fde:	f7fd ff37 	bl	d7e50 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9fe2:	4b01      	ldr	r3, [pc, #4]	; (d9fe8 <_post_loop+0x10>)
   d9fe4:	6018      	str	r0, [r3, #0]
}
   d9fe6:	bd08      	pop	{r3, pc}
   d9fe8:	2003e738 	.word	0x2003e738

000d9fec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9fec:	4805      	ldr	r0, [pc, #20]	; (da004 <_Z33system_initialize_user_backup_ramv+0x18>)
   d9fee:	4a06      	ldr	r2, [pc, #24]	; (da008 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d9ff0:	4906      	ldr	r1, [pc, #24]	; (da00c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d9ff2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9ff4:	1a12      	subs	r2, r2, r0
   d9ff6:	f001 f808 	bl	db00a <memcpy>
    __backup_sram_signature = signature;
   d9ffa:	4b05      	ldr	r3, [pc, #20]	; (da010 <_Z33system_initialize_user_backup_ramv+0x24>)
   d9ffc:	4a05      	ldr	r2, [pc, #20]	; (da014 <_Z33system_initialize_user_backup_ramv+0x28>)
   d9ffe:	601a      	str	r2, [r3, #0]
}
   da000:	bd08      	pop	{r3, pc}
   da002:	bf00      	nop
   da004:	2003f400 	.word	0x2003f400
   da008:	2003f404 	.word	0x2003f404
   da00c:	000de328 	.word	0x000de328
   da010:	2003f400 	.word	0x2003f400
   da014:	9a271c1e 	.word	0x9a271c1e

000da018 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da018:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da01a:	2300      	movs	r3, #0
   da01c:	9300      	str	r3, [sp, #0]
   da01e:	461a      	mov	r2, r3
   da020:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da024:	f7fe f8f0 	bl	d8208 <system_ctrl_set_result>
}
   da028:	b003      	add	sp, #12
   da02a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da030 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da030:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da032:	8843      	ldrh	r3, [r0, #2]
   da034:	2b0a      	cmp	r3, #10
   da036:	d008      	beq.n	da04a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da038:	2b50      	cmp	r3, #80	; 0x50
   da03a:	d10b      	bne.n	da054 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da03c:	4b09      	ldr	r3, [pc, #36]	; (da064 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da03e:	681b      	ldr	r3, [r3, #0]
   da040:	b14b      	cbz	r3, da056 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da042:	b003      	add	sp, #12
   da044:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da048:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da04a:	f7ff ffe5 	bl	da018 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da04e:	b003      	add	sp, #12
   da050:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da054:	2300      	movs	r3, #0
   da056:	9300      	str	r3, [sp, #0]
   da058:	461a      	mov	r2, r3
   da05a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da05e:	f7fe f8d3 	bl	d8208 <system_ctrl_set_result>
}
   da062:	e7f4      	b.n	da04e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da064:	2003e734 	.word	0x2003e734

000da068 <module_user_init_hook>:
{
   da068:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da06a:	4812      	ldr	r0, [pc, #72]	; (da0b4 <module_user_init_hook+0x4c>)
   da06c:	2100      	movs	r1, #0
   da06e:	f7fe f9ad 	bl	d83cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   da072:	4b11      	ldr	r3, [pc, #68]	; (da0b8 <module_user_init_hook+0x50>)
   da074:	681a      	ldr	r2, [r3, #0]
   da076:	4b11      	ldr	r3, [pc, #68]	; (da0bc <module_user_init_hook+0x54>)
   da078:	429a      	cmp	r2, r3
   da07a:	4b11      	ldr	r3, [pc, #68]	; (da0c0 <module_user_init_hook+0x58>)
   da07c:	bf0c      	ite	eq
   da07e:	2201      	moveq	r2, #1
   da080:	2200      	movne	r2, #0
   da082:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da084:	d001      	beq.n	da08a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   da086:	f7ff ffb1 	bl	d9fec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da08a:	f7fd fec9 	bl	d7e20 <HAL_RNG_GetRandomNumber>
   da08e:	4604      	mov	r4, r0
    srand(seed);
   da090:	f000 ffd2 	bl	db038 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da094:	4b0b      	ldr	r3, [pc, #44]	; (da0c4 <module_user_init_hook+0x5c>)
   da096:	b113      	cbz	r3, da09e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   da098:	4620      	mov	r0, r4
   da09a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da09e:	2100      	movs	r1, #0
   da0a0:	4808      	ldr	r0, [pc, #32]	; (da0c4 <module_user_init_hook+0x5c>)
   da0a2:	f7fe f8eb 	bl	d827c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da0aa:	4807      	ldr	r0, [pc, #28]	; (da0c8 <module_user_init_hook+0x60>)
   da0ac:	2100      	movs	r1, #0
   da0ae:	f7fe b8a1 	b.w	d81f4 <system_ctrl_set_app_request_handler>
   da0b2:	bf00      	nop
   da0b4:	000d9f95 	.word	0x000d9f95
   da0b8:	2003f400 	.word	0x2003f400
   da0bc:	9a271c1e 	.word	0x9a271c1e
   da0c0:	2003e730 	.word	0x2003e730
   da0c4:	00000000 	.word	0x00000000
   da0c8:	000da031 	.word	0x000da031

000da0cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da0cc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da0ce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da0d0:	d902      	bls.n	da0d8 <pinAvailable+0xc>
    return false;
   da0d2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da0d4:	b002      	add	sp, #8
   da0d6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da0d8:	f1a0 030b 	sub.w	r3, r0, #11
   da0dc:	2b02      	cmp	r3, #2
   da0de:	d81a      	bhi.n	da116 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da0e0:	4c17      	ldr	r4, [pc, #92]	; (da140 <pinAvailable+0x74>)
   da0e2:	7821      	ldrb	r1, [r4, #0]
   da0e4:	f3bf 8f5b 	dmb	ish
   da0e8:	f011 0101 	ands.w	r1, r1, #1
   da0ec:	d10b      	bne.n	da106 <pinAvailable+0x3a>
   da0ee:	4620      	mov	r0, r4
   da0f0:	9101      	str	r1, [sp, #4]
   da0f2:	f7f9 ffe1 	bl	d40b8 <__cxa_guard_acquire>
   da0f6:	9901      	ldr	r1, [sp, #4]
   da0f8:	b128      	cbz	r0, da106 <pinAvailable+0x3a>
   da0fa:	4812      	ldr	r0, [pc, #72]	; (da144 <pinAvailable+0x78>)
   da0fc:	f7ff f8f4 	bl	d92e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da100:	4620      	mov	r0, r4
   da102:	f7f9 ffde 	bl	d40c2 <__cxa_guard_release>
   da106:	4b0f      	ldr	r3, [pc, #60]	; (da144 <pinAvailable+0x78>)
   da108:	7818      	ldrb	r0, [r3, #0]
   da10a:	f7fd ff79 	bl	d8000 <hal_spi_is_enabled>
   da10e:	2800      	cmp	r0, #0
   da110:	d1df      	bne.n	da0d2 <pinAvailable+0x6>
  return true; // 'pin' is available
   da112:	2001      	movs	r0, #1
   da114:	e7de      	b.n	da0d4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da116:	2801      	cmp	r0, #1
   da118:	d809      	bhi.n	da12e <pinAvailable+0x62>
   da11a:	f000 f86b 	bl	da1f4 <_Z19__fetch_global_Wirev>
   da11e:	2100      	movs	r1, #0
   da120:	7c00      	ldrb	r0, [r0, #16]
   da122:	f7fd ff25 	bl	d7f70 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da126:	f080 0001 	eor.w	r0, r0, #1
   da12a:	b2c0      	uxtb	r0, r0
   da12c:	e7d2      	b.n	da0d4 <pinAvailable+0x8>
   da12e:	3809      	subs	r0, #9
   da130:	2801      	cmp	r0, #1
   da132:	d8ee      	bhi.n	da112 <pinAvailable+0x46>
   da134:	f7ff fe2c 	bl	d9d90 <_Z22__fetch_global_Serial1v>
   da138:	7c00      	ldrb	r0, [r0, #16]
   da13a:	f7fd ffc9 	bl	d80d0 <hal_usart_is_enabled>
   da13e:	e7f2      	b.n	da126 <pinAvailable+0x5a>
   da140:	2003dec0 	.word	0x2003dec0
   da144:	2003dec4 	.word	0x2003dec4

000da148 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da148:	2823      	cmp	r0, #35	; 0x23
{
   da14a:	b538      	push	{r3, r4, r5, lr}
   da14c:	4604      	mov	r4, r0
   da14e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da150:	d80a      	bhi.n	da168 <pinMode+0x20>
   da152:	29ff      	cmp	r1, #255	; 0xff
   da154:	d008      	beq.n	da168 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da156:	f7ff ffb9 	bl	da0cc <pinAvailable>
   da15a:	b128      	cbz	r0, da168 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da15c:	4629      	mov	r1, r5
   da15e:	4620      	mov	r0, r4
}
   da160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da164:	f7fd be8c 	b.w	d7e80 <HAL_Pin_Mode>
}
   da168:	bd38      	pop	{r3, r4, r5, pc}

000da16a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da16a:	b538      	push	{r3, r4, r5, lr}
   da16c:	4604      	mov	r4, r0
   da16e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da170:	f7fd fe8e 	bl	d7e90 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da174:	28ff      	cmp	r0, #255	; 0xff
   da176:	d010      	beq.n	da19a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da178:	2806      	cmp	r0, #6
   da17a:	d804      	bhi.n	da186 <digitalWrite+0x1c>
   da17c:	234d      	movs	r3, #77	; 0x4d
   da17e:	fa23 f000 	lsr.w	r0, r3, r0
   da182:	07c3      	lsls	r3, r0, #31
   da184:	d409      	bmi.n	da19a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da186:	4620      	mov	r0, r4
   da188:	f7ff ffa0 	bl	da0cc <pinAvailable>
   da18c:	b128      	cbz	r0, da19a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da18e:	4629      	mov	r1, r5
   da190:	4620      	mov	r0, r4
}
   da192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da196:	f7fd be83 	b.w	d7ea0 <HAL_GPIO_Write>
}
   da19a:	bd38      	pop	{r3, r4, r5, pc}

000da19c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da19c:	b510      	push	{r4, lr}
   da19e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da1a0:	f7fd fe76 	bl	d7e90 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da1a4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da1a6:	b2db      	uxtb	r3, r3
   da1a8:	2b01      	cmp	r3, #1
   da1aa:	d908      	bls.n	da1be <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da1ac:	4620      	mov	r0, r4
   da1ae:	f7ff ff8d 	bl	da0cc <pinAvailable>
   da1b2:	b120      	cbz	r0, da1be <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da1b4:	4620      	mov	r0, r4
}
   da1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da1ba:	f7fd be79 	b.w	d7eb0 <HAL_GPIO_Read>
}
   da1be:	2000      	movs	r0, #0
   da1c0:	bd10      	pop	{r4, pc}

000da1c2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da1c2:	4770      	bx	lr

000da1c4 <_Z17acquireWireBufferv>:
{
   da1c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da1c6:	2300      	movs	r3, #0
   da1c8:	2520      	movs	r5, #32
   da1ca:	8043      	strh	r3, [r0, #2]
   da1cc:	2314      	movs	r3, #20
{
   da1ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da1d0:	8003      	strh	r3, [r0, #0]
   da1d2:	6085      	str	r5, [r0, #8]
   da1d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da1d6:	4906      	ldr	r1, [pc, #24]	; (da1f0 <_Z17acquireWireBufferv+0x2c>)
   da1d8:	4628      	mov	r0, r5
   da1da:	f000 f831 	bl	da240 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da1de:	4904      	ldr	r1, [pc, #16]	; (da1f0 <_Z17acquireWireBufferv+0x2c>)
	};
   da1e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da1e2:	4628      	mov	r0, r5
   da1e4:	f000 f82c 	bl	da240 <_ZnajRKSt9nothrow_t>
	};
   da1e8:	60e0      	str	r0, [r4, #12]
}
   da1ea:	4620      	mov	r0, r4
   da1ec:	bd38      	pop	{r3, r4, r5, pc}
   da1ee:	bf00      	nop
   da1f0:	000de030 	.word	0x000de030

000da1f4 <_Z19__fetch_global_Wirev>:
{
   da1f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da1f6:	4d0e      	ldr	r5, [pc, #56]	; (da230 <_Z19__fetch_global_Wirev+0x3c>)
   da1f8:	7829      	ldrb	r1, [r5, #0]
   da1fa:	f3bf 8f5b 	dmb	ish
   da1fe:	f011 0401 	ands.w	r4, r1, #1
{
   da202:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da204:	d111      	bne.n	da22a <_Z19__fetch_global_Wirev+0x36>
   da206:	4628      	mov	r0, r5
   da208:	f7f9 ff56 	bl	d40b8 <__cxa_guard_acquire>
   da20c:	b168      	cbz	r0, da22a <_Z19__fetch_global_Wirev+0x36>
   da20e:	a801      	add	r0, sp, #4
   da210:	f7ff ffd8 	bl	da1c4 <_Z17acquireWireBufferv>
   da214:	aa01      	add	r2, sp, #4
   da216:	4621      	mov	r1, r4
   da218:	4806      	ldr	r0, [pc, #24]	; (da234 <_Z19__fetch_global_Wirev+0x40>)
   da21a:	f7fe fd65 	bl	d8ce8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da21e:	4628      	mov	r0, r5
   da220:	f7f9 ff4f 	bl	d40c2 <__cxa_guard_release>
   da224:	4804      	ldr	r0, [pc, #16]	; (da238 <_Z19__fetch_global_Wirev+0x44>)
   da226:	f000 fed5 	bl	dafd4 <atexit>
	return wire;
}
   da22a:	4802      	ldr	r0, [pc, #8]	; (da234 <_Z19__fetch_global_Wirev+0x40>)
   da22c:	b007      	add	sp, #28
   da22e:	bd30      	pop	{r4, r5, pc}
   da230:	2003e73c 	.word	0x2003e73c
   da234:	2003e740 	.word	0x2003e740
   da238:	000da1c3 	.word	0x000da1c3

000da23c <_ZdlPvj>:
   da23c:	f7f9 bf2f 	b.w	d409e <_ZdlPv>

000da240 <_ZnajRKSt9nothrow_t>:
   da240:	f7f9 bf2b 	b.w	d409a <_Znaj>

000da244 <_ZSt25__throw_bad_function_callv>:
   da244:	b508      	push	{r3, lr}
   da246:	f7fe f8b1 	bl	d83ac <abort>
	...

000da24c <__aeabi_drsub>:
   da24c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da250:	e002      	b.n	da258 <__adddf3>
   da252:	bf00      	nop

000da254 <__aeabi_dsub>:
   da254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da258 <__adddf3>:
   da258:	b530      	push	{r4, r5, lr}
   da25a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da25e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da262:	ea94 0f05 	teq	r4, r5
   da266:	bf08      	it	eq
   da268:	ea90 0f02 	teqeq	r0, r2
   da26c:	bf1f      	itttt	ne
   da26e:	ea54 0c00 	orrsne.w	ip, r4, r0
   da272:	ea55 0c02 	orrsne.w	ip, r5, r2
   da276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da27a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da27e:	f000 80e2 	beq.w	da446 <__adddf3+0x1ee>
   da282:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da28a:	bfb8      	it	lt
   da28c:	426d      	neglt	r5, r5
   da28e:	dd0c      	ble.n	da2aa <__adddf3+0x52>
   da290:	442c      	add	r4, r5
   da292:	ea80 0202 	eor.w	r2, r0, r2
   da296:	ea81 0303 	eor.w	r3, r1, r3
   da29a:	ea82 0000 	eor.w	r0, r2, r0
   da29e:	ea83 0101 	eor.w	r1, r3, r1
   da2a2:	ea80 0202 	eor.w	r2, r0, r2
   da2a6:	ea81 0303 	eor.w	r3, r1, r3
   da2aa:	2d36      	cmp	r5, #54	; 0x36
   da2ac:	bf88      	it	hi
   da2ae:	bd30      	pophi	{r4, r5, pc}
   da2b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da2b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da2b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da2bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da2c0:	d002      	beq.n	da2c8 <__adddf3+0x70>
   da2c2:	4240      	negs	r0, r0
   da2c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da2c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da2cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da2d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da2d4:	d002      	beq.n	da2dc <__adddf3+0x84>
   da2d6:	4252      	negs	r2, r2
   da2d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da2dc:	ea94 0f05 	teq	r4, r5
   da2e0:	f000 80a7 	beq.w	da432 <__adddf3+0x1da>
   da2e4:	f1a4 0401 	sub.w	r4, r4, #1
   da2e8:	f1d5 0e20 	rsbs	lr, r5, #32
   da2ec:	db0d      	blt.n	da30a <__adddf3+0xb2>
   da2ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   da2f2:	fa22 f205 	lsr.w	r2, r2, r5
   da2f6:	1880      	adds	r0, r0, r2
   da2f8:	f141 0100 	adc.w	r1, r1, #0
   da2fc:	fa03 f20e 	lsl.w	r2, r3, lr
   da300:	1880      	adds	r0, r0, r2
   da302:	fa43 f305 	asr.w	r3, r3, r5
   da306:	4159      	adcs	r1, r3
   da308:	e00e      	b.n	da328 <__adddf3+0xd0>
   da30a:	f1a5 0520 	sub.w	r5, r5, #32
   da30e:	f10e 0e20 	add.w	lr, lr, #32
   da312:	2a01      	cmp	r2, #1
   da314:	fa03 fc0e 	lsl.w	ip, r3, lr
   da318:	bf28      	it	cs
   da31a:	f04c 0c02 	orrcs.w	ip, ip, #2
   da31e:	fa43 f305 	asr.w	r3, r3, r5
   da322:	18c0      	adds	r0, r0, r3
   da324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da32c:	d507      	bpl.n	da33e <__adddf3+0xe6>
   da32e:	f04f 0e00 	mov.w	lr, #0
   da332:	f1dc 0c00 	rsbs	ip, ip, #0
   da336:	eb7e 0000 	sbcs.w	r0, lr, r0
   da33a:	eb6e 0101 	sbc.w	r1, lr, r1
   da33e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da342:	d31b      	bcc.n	da37c <__adddf3+0x124>
   da344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da348:	d30c      	bcc.n	da364 <__adddf3+0x10c>
   da34a:	0849      	lsrs	r1, r1, #1
   da34c:	ea5f 0030 	movs.w	r0, r0, rrx
   da350:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da354:	f104 0401 	add.w	r4, r4, #1
   da358:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da35c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da360:	f080 809a 	bcs.w	da498 <__adddf3+0x240>
   da364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da368:	bf08      	it	eq
   da36a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da36e:	f150 0000 	adcs.w	r0, r0, #0
   da372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da376:	ea41 0105 	orr.w	r1, r1, r5
   da37a:	bd30      	pop	{r4, r5, pc}
   da37c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da380:	4140      	adcs	r0, r0
   da382:	eb41 0101 	adc.w	r1, r1, r1
   da386:	3c01      	subs	r4, #1
   da388:	bf28      	it	cs
   da38a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da38e:	d2e9      	bcs.n	da364 <__adddf3+0x10c>
   da390:	f091 0f00 	teq	r1, #0
   da394:	bf04      	itt	eq
   da396:	4601      	moveq	r1, r0
   da398:	2000      	moveq	r0, #0
   da39a:	fab1 f381 	clz	r3, r1
   da39e:	bf08      	it	eq
   da3a0:	3320      	addeq	r3, #32
   da3a2:	f1a3 030b 	sub.w	r3, r3, #11
   da3a6:	f1b3 0220 	subs.w	r2, r3, #32
   da3aa:	da0c      	bge.n	da3c6 <__adddf3+0x16e>
   da3ac:	320c      	adds	r2, #12
   da3ae:	dd08      	ble.n	da3c2 <__adddf3+0x16a>
   da3b0:	f102 0c14 	add.w	ip, r2, #20
   da3b4:	f1c2 020c 	rsb	r2, r2, #12
   da3b8:	fa01 f00c 	lsl.w	r0, r1, ip
   da3bc:	fa21 f102 	lsr.w	r1, r1, r2
   da3c0:	e00c      	b.n	da3dc <__adddf3+0x184>
   da3c2:	f102 0214 	add.w	r2, r2, #20
   da3c6:	bfd8      	it	le
   da3c8:	f1c2 0c20 	rsble	ip, r2, #32
   da3cc:	fa01 f102 	lsl.w	r1, r1, r2
   da3d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   da3d4:	bfdc      	itt	le
   da3d6:	ea41 010c 	orrle.w	r1, r1, ip
   da3da:	4090      	lslle	r0, r2
   da3dc:	1ae4      	subs	r4, r4, r3
   da3de:	bfa2      	ittt	ge
   da3e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da3e4:	4329      	orrge	r1, r5
   da3e6:	bd30      	popge	{r4, r5, pc}
   da3e8:	ea6f 0404 	mvn.w	r4, r4
   da3ec:	3c1f      	subs	r4, #31
   da3ee:	da1c      	bge.n	da42a <__adddf3+0x1d2>
   da3f0:	340c      	adds	r4, #12
   da3f2:	dc0e      	bgt.n	da412 <__adddf3+0x1ba>
   da3f4:	f104 0414 	add.w	r4, r4, #20
   da3f8:	f1c4 0220 	rsb	r2, r4, #32
   da3fc:	fa20 f004 	lsr.w	r0, r0, r4
   da400:	fa01 f302 	lsl.w	r3, r1, r2
   da404:	ea40 0003 	orr.w	r0, r0, r3
   da408:	fa21 f304 	lsr.w	r3, r1, r4
   da40c:	ea45 0103 	orr.w	r1, r5, r3
   da410:	bd30      	pop	{r4, r5, pc}
   da412:	f1c4 040c 	rsb	r4, r4, #12
   da416:	f1c4 0220 	rsb	r2, r4, #32
   da41a:	fa20 f002 	lsr.w	r0, r0, r2
   da41e:	fa01 f304 	lsl.w	r3, r1, r4
   da422:	ea40 0003 	orr.w	r0, r0, r3
   da426:	4629      	mov	r1, r5
   da428:	bd30      	pop	{r4, r5, pc}
   da42a:	fa21 f004 	lsr.w	r0, r1, r4
   da42e:	4629      	mov	r1, r5
   da430:	bd30      	pop	{r4, r5, pc}
   da432:	f094 0f00 	teq	r4, #0
   da436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da43a:	bf06      	itte	eq
   da43c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da440:	3401      	addeq	r4, #1
   da442:	3d01      	subne	r5, #1
   da444:	e74e      	b.n	da2e4 <__adddf3+0x8c>
   da446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da44a:	bf18      	it	ne
   da44c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da450:	d029      	beq.n	da4a6 <__adddf3+0x24e>
   da452:	ea94 0f05 	teq	r4, r5
   da456:	bf08      	it	eq
   da458:	ea90 0f02 	teqeq	r0, r2
   da45c:	d005      	beq.n	da46a <__adddf3+0x212>
   da45e:	ea54 0c00 	orrs.w	ip, r4, r0
   da462:	bf04      	itt	eq
   da464:	4619      	moveq	r1, r3
   da466:	4610      	moveq	r0, r2
   da468:	bd30      	pop	{r4, r5, pc}
   da46a:	ea91 0f03 	teq	r1, r3
   da46e:	bf1e      	ittt	ne
   da470:	2100      	movne	r1, #0
   da472:	2000      	movne	r0, #0
   da474:	bd30      	popne	{r4, r5, pc}
   da476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da47a:	d105      	bne.n	da488 <__adddf3+0x230>
   da47c:	0040      	lsls	r0, r0, #1
   da47e:	4149      	adcs	r1, r1
   da480:	bf28      	it	cs
   da482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da486:	bd30      	pop	{r4, r5, pc}
   da488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da48c:	bf3c      	itt	cc
   da48e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da492:	bd30      	popcc	{r4, r5, pc}
   da494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da49c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da4a0:	f04f 0000 	mov.w	r0, #0
   da4a4:	bd30      	pop	{r4, r5, pc}
   da4a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da4aa:	bf1a      	itte	ne
   da4ac:	4619      	movne	r1, r3
   da4ae:	4610      	movne	r0, r2
   da4b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da4b4:	bf1c      	itt	ne
   da4b6:	460b      	movne	r3, r1
   da4b8:	4602      	movne	r2, r0
   da4ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da4be:	bf06      	itte	eq
   da4c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da4c4:	ea91 0f03 	teqeq	r1, r3
   da4c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da4cc:	bd30      	pop	{r4, r5, pc}
   da4ce:	bf00      	nop

000da4d0 <__aeabi_ui2d>:
   da4d0:	f090 0f00 	teq	r0, #0
   da4d4:	bf04      	itt	eq
   da4d6:	2100      	moveq	r1, #0
   da4d8:	4770      	bxeq	lr
   da4da:	b530      	push	{r4, r5, lr}
   da4dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da4e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da4e4:	f04f 0500 	mov.w	r5, #0
   da4e8:	f04f 0100 	mov.w	r1, #0
   da4ec:	e750      	b.n	da390 <__adddf3+0x138>
   da4ee:	bf00      	nop

000da4f0 <__aeabi_i2d>:
   da4f0:	f090 0f00 	teq	r0, #0
   da4f4:	bf04      	itt	eq
   da4f6:	2100      	moveq	r1, #0
   da4f8:	4770      	bxeq	lr
   da4fa:	b530      	push	{r4, r5, lr}
   da4fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da500:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da508:	bf48      	it	mi
   da50a:	4240      	negmi	r0, r0
   da50c:	f04f 0100 	mov.w	r1, #0
   da510:	e73e      	b.n	da390 <__adddf3+0x138>
   da512:	bf00      	nop

000da514 <__aeabi_f2d>:
   da514:	0042      	lsls	r2, r0, #1
   da516:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da51a:	ea4f 0131 	mov.w	r1, r1, rrx
   da51e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da522:	bf1f      	itttt	ne
   da524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da52c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da530:	4770      	bxne	lr
   da532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da536:	bf08      	it	eq
   da538:	4770      	bxeq	lr
   da53a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da53e:	bf04      	itt	eq
   da540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da544:	4770      	bxeq	lr
   da546:	b530      	push	{r4, r5, lr}
   da548:	f44f 7460 	mov.w	r4, #896	; 0x380
   da54c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da554:	e71c      	b.n	da390 <__adddf3+0x138>
   da556:	bf00      	nop

000da558 <__aeabi_ul2d>:
   da558:	ea50 0201 	orrs.w	r2, r0, r1
   da55c:	bf08      	it	eq
   da55e:	4770      	bxeq	lr
   da560:	b530      	push	{r4, r5, lr}
   da562:	f04f 0500 	mov.w	r5, #0
   da566:	e00a      	b.n	da57e <__aeabi_l2d+0x16>

000da568 <__aeabi_l2d>:
   da568:	ea50 0201 	orrs.w	r2, r0, r1
   da56c:	bf08      	it	eq
   da56e:	4770      	bxeq	lr
   da570:	b530      	push	{r4, r5, lr}
   da572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da576:	d502      	bpl.n	da57e <__aeabi_l2d+0x16>
   da578:	4240      	negs	r0, r0
   da57a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da57e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da582:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da58a:	f43f aed8 	beq.w	da33e <__adddf3+0xe6>
   da58e:	f04f 0203 	mov.w	r2, #3
   da592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da596:	bf18      	it	ne
   da598:	3203      	addne	r2, #3
   da59a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da59e:	bf18      	it	ne
   da5a0:	3203      	addne	r2, #3
   da5a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da5a6:	f1c2 0320 	rsb	r3, r2, #32
   da5aa:	fa00 fc03 	lsl.w	ip, r0, r3
   da5ae:	fa20 f002 	lsr.w	r0, r0, r2
   da5b2:	fa01 fe03 	lsl.w	lr, r1, r3
   da5b6:	ea40 000e 	orr.w	r0, r0, lr
   da5ba:	fa21 f102 	lsr.w	r1, r1, r2
   da5be:	4414      	add	r4, r2
   da5c0:	e6bd      	b.n	da33e <__adddf3+0xe6>
   da5c2:	bf00      	nop

000da5c4 <__aeabi_dmul>:
   da5c4:	b570      	push	{r4, r5, r6, lr}
   da5c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da5ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da5ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da5d2:	bf1d      	ittte	ne
   da5d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da5d8:	ea94 0f0c 	teqne	r4, ip
   da5dc:	ea95 0f0c 	teqne	r5, ip
   da5e0:	f000 f8de 	bleq	da7a0 <__aeabi_dmul+0x1dc>
   da5e4:	442c      	add	r4, r5
   da5e6:	ea81 0603 	eor.w	r6, r1, r3
   da5ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da5ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da5f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da5f6:	bf18      	it	ne
   da5f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da5fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da604:	d038      	beq.n	da678 <__aeabi_dmul+0xb4>
   da606:	fba0 ce02 	umull	ip, lr, r0, r2
   da60a:	f04f 0500 	mov.w	r5, #0
   da60e:	fbe1 e502 	umlal	lr, r5, r1, r2
   da612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da616:	fbe0 e503 	umlal	lr, r5, r0, r3
   da61a:	f04f 0600 	mov.w	r6, #0
   da61e:	fbe1 5603 	umlal	r5, r6, r1, r3
   da622:	f09c 0f00 	teq	ip, #0
   da626:	bf18      	it	ne
   da628:	f04e 0e01 	orrne.w	lr, lr, #1
   da62c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da638:	d204      	bcs.n	da644 <__aeabi_dmul+0x80>
   da63a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da63e:	416d      	adcs	r5, r5
   da640:	eb46 0606 	adc.w	r6, r6, r6
   da644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da64c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da65c:	bf88      	it	hi
   da65e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da662:	d81e      	bhi.n	da6a2 <__aeabi_dmul+0xde>
   da664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da668:	bf08      	it	eq
   da66a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da66e:	f150 0000 	adcs.w	r0, r0, #0
   da672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da676:	bd70      	pop	{r4, r5, r6, pc}
   da678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da67c:	ea46 0101 	orr.w	r1, r6, r1
   da680:	ea40 0002 	orr.w	r0, r0, r2
   da684:	ea81 0103 	eor.w	r1, r1, r3
   da688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da68c:	bfc2      	ittt	gt
   da68e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da696:	bd70      	popgt	{r4, r5, r6, pc}
   da698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da69c:	f04f 0e00 	mov.w	lr, #0
   da6a0:	3c01      	subs	r4, #1
   da6a2:	f300 80ab 	bgt.w	da7fc <__aeabi_dmul+0x238>
   da6a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da6aa:	bfde      	ittt	le
   da6ac:	2000      	movle	r0, #0
   da6ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da6b2:	bd70      	pople	{r4, r5, r6, pc}
   da6b4:	f1c4 0400 	rsb	r4, r4, #0
   da6b8:	3c20      	subs	r4, #32
   da6ba:	da35      	bge.n	da728 <__aeabi_dmul+0x164>
   da6bc:	340c      	adds	r4, #12
   da6be:	dc1b      	bgt.n	da6f8 <__aeabi_dmul+0x134>
   da6c0:	f104 0414 	add.w	r4, r4, #20
   da6c4:	f1c4 0520 	rsb	r5, r4, #32
   da6c8:	fa00 f305 	lsl.w	r3, r0, r5
   da6cc:	fa20 f004 	lsr.w	r0, r0, r4
   da6d0:	fa01 f205 	lsl.w	r2, r1, r5
   da6d4:	ea40 0002 	orr.w	r0, r0, r2
   da6d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da6dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da6e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da6e4:	fa21 f604 	lsr.w	r6, r1, r4
   da6e8:	eb42 0106 	adc.w	r1, r2, r6
   da6ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da6f0:	bf08      	it	eq
   da6f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da6f6:	bd70      	pop	{r4, r5, r6, pc}
   da6f8:	f1c4 040c 	rsb	r4, r4, #12
   da6fc:	f1c4 0520 	rsb	r5, r4, #32
   da700:	fa00 f304 	lsl.w	r3, r0, r4
   da704:	fa20 f005 	lsr.w	r0, r0, r5
   da708:	fa01 f204 	lsl.w	r2, r1, r4
   da70c:	ea40 0002 	orr.w	r0, r0, r2
   da710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da718:	f141 0100 	adc.w	r1, r1, #0
   da71c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da720:	bf08      	it	eq
   da722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da726:	bd70      	pop	{r4, r5, r6, pc}
   da728:	f1c4 0520 	rsb	r5, r4, #32
   da72c:	fa00 f205 	lsl.w	r2, r0, r5
   da730:	ea4e 0e02 	orr.w	lr, lr, r2
   da734:	fa20 f304 	lsr.w	r3, r0, r4
   da738:	fa01 f205 	lsl.w	r2, r1, r5
   da73c:	ea43 0302 	orr.w	r3, r3, r2
   da740:	fa21 f004 	lsr.w	r0, r1, r4
   da744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da748:	fa21 f204 	lsr.w	r2, r1, r4
   da74c:	ea20 0002 	bic.w	r0, r0, r2
   da750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da758:	bf08      	it	eq
   da75a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da75e:	bd70      	pop	{r4, r5, r6, pc}
   da760:	f094 0f00 	teq	r4, #0
   da764:	d10f      	bne.n	da786 <__aeabi_dmul+0x1c2>
   da766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da76a:	0040      	lsls	r0, r0, #1
   da76c:	eb41 0101 	adc.w	r1, r1, r1
   da770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da774:	bf08      	it	eq
   da776:	3c01      	subeq	r4, #1
   da778:	d0f7      	beq.n	da76a <__aeabi_dmul+0x1a6>
   da77a:	ea41 0106 	orr.w	r1, r1, r6
   da77e:	f095 0f00 	teq	r5, #0
   da782:	bf18      	it	ne
   da784:	4770      	bxne	lr
   da786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da78a:	0052      	lsls	r2, r2, #1
   da78c:	eb43 0303 	adc.w	r3, r3, r3
   da790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da794:	bf08      	it	eq
   da796:	3d01      	subeq	r5, #1
   da798:	d0f7      	beq.n	da78a <__aeabi_dmul+0x1c6>
   da79a:	ea43 0306 	orr.w	r3, r3, r6
   da79e:	4770      	bx	lr
   da7a0:	ea94 0f0c 	teq	r4, ip
   da7a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da7a8:	bf18      	it	ne
   da7aa:	ea95 0f0c 	teqne	r5, ip
   da7ae:	d00c      	beq.n	da7ca <__aeabi_dmul+0x206>
   da7b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da7b4:	bf18      	it	ne
   da7b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da7ba:	d1d1      	bne.n	da760 <__aeabi_dmul+0x19c>
   da7bc:	ea81 0103 	eor.w	r1, r1, r3
   da7c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da7c4:	f04f 0000 	mov.w	r0, #0
   da7c8:	bd70      	pop	{r4, r5, r6, pc}
   da7ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da7ce:	bf06      	itte	eq
   da7d0:	4610      	moveq	r0, r2
   da7d2:	4619      	moveq	r1, r3
   da7d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da7d8:	d019      	beq.n	da80e <__aeabi_dmul+0x24a>
   da7da:	ea94 0f0c 	teq	r4, ip
   da7de:	d102      	bne.n	da7e6 <__aeabi_dmul+0x222>
   da7e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da7e4:	d113      	bne.n	da80e <__aeabi_dmul+0x24a>
   da7e6:	ea95 0f0c 	teq	r5, ip
   da7ea:	d105      	bne.n	da7f8 <__aeabi_dmul+0x234>
   da7ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da7f0:	bf1c      	itt	ne
   da7f2:	4610      	movne	r0, r2
   da7f4:	4619      	movne	r1, r3
   da7f6:	d10a      	bne.n	da80e <__aeabi_dmul+0x24a>
   da7f8:	ea81 0103 	eor.w	r1, r1, r3
   da7fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da808:	f04f 0000 	mov.w	r0, #0
   da80c:	bd70      	pop	{r4, r5, r6, pc}
   da80e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da816:	bd70      	pop	{r4, r5, r6, pc}

000da818 <__aeabi_ddiv>:
   da818:	b570      	push	{r4, r5, r6, lr}
   da81a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da81e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da826:	bf1d      	ittte	ne
   da828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da82c:	ea94 0f0c 	teqne	r4, ip
   da830:	ea95 0f0c 	teqne	r5, ip
   da834:	f000 f8a7 	bleq	da986 <__aeabi_ddiv+0x16e>
   da838:	eba4 0405 	sub.w	r4, r4, r5
   da83c:	ea81 0e03 	eor.w	lr, r1, r3
   da840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da844:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da848:	f000 8088 	beq.w	da95c <__aeabi_ddiv+0x144>
   da84c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da85c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da868:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da86c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da870:	429d      	cmp	r5, r3
   da872:	bf08      	it	eq
   da874:	4296      	cmpeq	r6, r2
   da876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da87a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da87e:	d202      	bcs.n	da886 <__aeabi_ddiv+0x6e>
   da880:	085b      	lsrs	r3, r3, #1
   da882:	ea4f 0232 	mov.w	r2, r2, rrx
   da886:	1ab6      	subs	r6, r6, r2
   da888:	eb65 0503 	sbc.w	r5, r5, r3
   da88c:	085b      	lsrs	r3, r3, #1
   da88e:	ea4f 0232 	mov.w	r2, r2, rrx
   da892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da89a:	ebb6 0e02 	subs.w	lr, r6, r2
   da89e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8a2:	bf22      	ittt	cs
   da8a4:	1ab6      	subcs	r6, r6, r2
   da8a6:	4675      	movcs	r5, lr
   da8a8:	ea40 000c 	orrcs.w	r0, r0, ip
   da8ac:	085b      	lsrs	r3, r3, #1
   da8ae:	ea4f 0232 	mov.w	r2, r2, rrx
   da8b2:	ebb6 0e02 	subs.w	lr, r6, r2
   da8b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8ba:	bf22      	ittt	cs
   da8bc:	1ab6      	subcs	r6, r6, r2
   da8be:	4675      	movcs	r5, lr
   da8c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da8c4:	085b      	lsrs	r3, r3, #1
   da8c6:	ea4f 0232 	mov.w	r2, r2, rrx
   da8ca:	ebb6 0e02 	subs.w	lr, r6, r2
   da8ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8d2:	bf22      	ittt	cs
   da8d4:	1ab6      	subcs	r6, r6, r2
   da8d6:	4675      	movcs	r5, lr
   da8d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da8dc:	085b      	lsrs	r3, r3, #1
   da8de:	ea4f 0232 	mov.w	r2, r2, rrx
   da8e2:	ebb6 0e02 	subs.w	lr, r6, r2
   da8e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da8ea:	bf22      	ittt	cs
   da8ec:	1ab6      	subcs	r6, r6, r2
   da8ee:	4675      	movcs	r5, lr
   da8f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da8f4:	ea55 0e06 	orrs.w	lr, r5, r6
   da8f8:	d018      	beq.n	da92c <__aeabi_ddiv+0x114>
   da8fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da8fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da902:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da90a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da90e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da916:	d1c0      	bne.n	da89a <__aeabi_ddiv+0x82>
   da918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da91c:	d10b      	bne.n	da936 <__aeabi_ddiv+0x11e>
   da91e:	ea41 0100 	orr.w	r1, r1, r0
   da922:	f04f 0000 	mov.w	r0, #0
   da926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da92a:	e7b6      	b.n	da89a <__aeabi_ddiv+0x82>
   da92c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da930:	bf04      	itt	eq
   da932:	4301      	orreq	r1, r0
   da934:	2000      	moveq	r0, #0
   da936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da93a:	bf88      	it	hi
   da93c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da940:	f63f aeaf 	bhi.w	da6a2 <__aeabi_dmul+0xde>
   da944:	ebb5 0c03 	subs.w	ip, r5, r3
   da948:	bf04      	itt	eq
   da94a:	ebb6 0c02 	subseq.w	ip, r6, r2
   da94e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da952:	f150 0000 	adcs.w	r0, r0, #0
   da956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da95a:	bd70      	pop	{r4, r5, r6, pc}
   da95c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da968:	bfc2      	ittt	gt
   da96a:	ebd4 050c 	rsbsgt	r5, r4, ip
   da96e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da972:	bd70      	popgt	{r4, r5, r6, pc}
   da974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da978:	f04f 0e00 	mov.w	lr, #0
   da97c:	3c01      	subs	r4, #1
   da97e:	e690      	b.n	da6a2 <__aeabi_dmul+0xde>
   da980:	ea45 0e06 	orr.w	lr, r5, r6
   da984:	e68d      	b.n	da6a2 <__aeabi_dmul+0xde>
   da986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da98a:	ea94 0f0c 	teq	r4, ip
   da98e:	bf08      	it	eq
   da990:	ea95 0f0c 	teqeq	r5, ip
   da994:	f43f af3b 	beq.w	da80e <__aeabi_dmul+0x24a>
   da998:	ea94 0f0c 	teq	r4, ip
   da99c:	d10a      	bne.n	da9b4 <__aeabi_ddiv+0x19c>
   da99e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da9a2:	f47f af34 	bne.w	da80e <__aeabi_dmul+0x24a>
   da9a6:	ea95 0f0c 	teq	r5, ip
   da9aa:	f47f af25 	bne.w	da7f8 <__aeabi_dmul+0x234>
   da9ae:	4610      	mov	r0, r2
   da9b0:	4619      	mov	r1, r3
   da9b2:	e72c      	b.n	da80e <__aeabi_dmul+0x24a>
   da9b4:	ea95 0f0c 	teq	r5, ip
   da9b8:	d106      	bne.n	da9c8 <__aeabi_ddiv+0x1b0>
   da9ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da9be:	f43f aefd 	beq.w	da7bc <__aeabi_dmul+0x1f8>
   da9c2:	4610      	mov	r0, r2
   da9c4:	4619      	mov	r1, r3
   da9c6:	e722      	b.n	da80e <__aeabi_dmul+0x24a>
   da9c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da9cc:	bf18      	it	ne
   da9ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da9d2:	f47f aec5 	bne.w	da760 <__aeabi_dmul+0x19c>
   da9d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da9da:	f47f af0d 	bne.w	da7f8 <__aeabi_dmul+0x234>
   da9de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da9e2:	f47f aeeb 	bne.w	da7bc <__aeabi_dmul+0x1f8>
   da9e6:	e712      	b.n	da80e <__aeabi_dmul+0x24a>

000da9e8 <__gedf2>:
   da9e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da9ec:	e006      	b.n	da9fc <__cmpdf2+0x4>
   da9ee:	bf00      	nop

000da9f0 <__ledf2>:
   da9f0:	f04f 0c01 	mov.w	ip, #1
   da9f4:	e002      	b.n	da9fc <__cmpdf2+0x4>
   da9f6:	bf00      	nop

000da9f8 <__cmpdf2>:
   da9f8:	f04f 0c01 	mov.w	ip, #1
   da9fc:	f84d cd04 	str.w	ip, [sp, #-4]!
   daa00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daa04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daa0c:	bf18      	it	ne
   daa0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   daa12:	d01b      	beq.n	daa4c <__cmpdf2+0x54>
   daa14:	b001      	add	sp, #4
   daa16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   daa1a:	bf0c      	ite	eq
   daa1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   daa20:	ea91 0f03 	teqne	r1, r3
   daa24:	bf02      	ittt	eq
   daa26:	ea90 0f02 	teqeq	r0, r2
   daa2a:	2000      	moveq	r0, #0
   daa2c:	4770      	bxeq	lr
   daa2e:	f110 0f00 	cmn.w	r0, #0
   daa32:	ea91 0f03 	teq	r1, r3
   daa36:	bf58      	it	pl
   daa38:	4299      	cmppl	r1, r3
   daa3a:	bf08      	it	eq
   daa3c:	4290      	cmpeq	r0, r2
   daa3e:	bf2c      	ite	cs
   daa40:	17d8      	asrcs	r0, r3, #31
   daa42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   daa46:	f040 0001 	orr.w	r0, r0, #1
   daa4a:	4770      	bx	lr
   daa4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daa50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa54:	d102      	bne.n	daa5c <__cmpdf2+0x64>
   daa56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daa5a:	d107      	bne.n	daa6c <__cmpdf2+0x74>
   daa5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daa60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa64:	d1d6      	bne.n	daa14 <__cmpdf2+0x1c>
   daa66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daa6a:	d0d3      	beq.n	daa14 <__cmpdf2+0x1c>
   daa6c:	f85d 0b04 	ldr.w	r0, [sp], #4
   daa70:	4770      	bx	lr
   daa72:	bf00      	nop

000daa74 <__aeabi_cdrcmple>:
   daa74:	4684      	mov	ip, r0
   daa76:	4610      	mov	r0, r2
   daa78:	4662      	mov	r2, ip
   daa7a:	468c      	mov	ip, r1
   daa7c:	4619      	mov	r1, r3
   daa7e:	4663      	mov	r3, ip
   daa80:	e000      	b.n	daa84 <__aeabi_cdcmpeq>
   daa82:	bf00      	nop

000daa84 <__aeabi_cdcmpeq>:
   daa84:	b501      	push	{r0, lr}
   daa86:	f7ff ffb7 	bl	da9f8 <__cmpdf2>
   daa8a:	2800      	cmp	r0, #0
   daa8c:	bf48      	it	mi
   daa8e:	f110 0f00 	cmnmi.w	r0, #0
   daa92:	bd01      	pop	{r0, pc}

000daa94 <__aeabi_dcmpeq>:
   daa94:	f84d ed08 	str.w	lr, [sp, #-8]!
   daa98:	f7ff fff4 	bl	daa84 <__aeabi_cdcmpeq>
   daa9c:	bf0c      	ite	eq
   daa9e:	2001      	moveq	r0, #1
   daaa0:	2000      	movne	r0, #0
   daaa2:	f85d fb08 	ldr.w	pc, [sp], #8
   daaa6:	bf00      	nop

000daaa8 <__aeabi_dcmplt>:
   daaa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   daaac:	f7ff ffea 	bl	daa84 <__aeabi_cdcmpeq>
   daab0:	bf34      	ite	cc
   daab2:	2001      	movcc	r0, #1
   daab4:	2000      	movcs	r0, #0
   daab6:	f85d fb08 	ldr.w	pc, [sp], #8
   daaba:	bf00      	nop

000daabc <__aeabi_dcmple>:
   daabc:	f84d ed08 	str.w	lr, [sp, #-8]!
   daac0:	f7ff ffe0 	bl	daa84 <__aeabi_cdcmpeq>
   daac4:	bf94      	ite	ls
   daac6:	2001      	movls	r0, #1
   daac8:	2000      	movhi	r0, #0
   daaca:	f85d fb08 	ldr.w	pc, [sp], #8
   daace:	bf00      	nop

000daad0 <__aeabi_dcmpge>:
   daad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   daad4:	f7ff ffce 	bl	daa74 <__aeabi_cdrcmple>
   daad8:	bf94      	ite	ls
   daada:	2001      	movls	r0, #1
   daadc:	2000      	movhi	r0, #0
   daade:	f85d fb08 	ldr.w	pc, [sp], #8
   daae2:	bf00      	nop

000daae4 <__aeabi_dcmpgt>:
   daae4:	f84d ed08 	str.w	lr, [sp, #-8]!
   daae8:	f7ff ffc4 	bl	daa74 <__aeabi_cdrcmple>
   daaec:	bf34      	ite	cc
   daaee:	2001      	movcc	r0, #1
   daaf0:	2000      	movcs	r0, #0
   daaf2:	f85d fb08 	ldr.w	pc, [sp], #8
   daaf6:	bf00      	nop

000daaf8 <__aeabi_dcmpun>:
   daaf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daafc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dab00:	d102      	bne.n	dab08 <__aeabi_dcmpun+0x10>
   dab02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dab06:	d10a      	bne.n	dab1e <__aeabi_dcmpun+0x26>
   dab08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dab0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dab10:	d102      	bne.n	dab18 <__aeabi_dcmpun+0x20>
   dab12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dab16:	d102      	bne.n	dab1e <__aeabi_dcmpun+0x26>
   dab18:	f04f 0000 	mov.w	r0, #0
   dab1c:	4770      	bx	lr
   dab1e:	f04f 0001 	mov.w	r0, #1
   dab22:	4770      	bx	lr

000dab24 <__aeabi_d2iz>:
   dab24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dab28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dab2c:	d215      	bcs.n	dab5a <__aeabi_d2iz+0x36>
   dab2e:	d511      	bpl.n	dab54 <__aeabi_d2iz+0x30>
   dab30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dab34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dab38:	d912      	bls.n	dab60 <__aeabi_d2iz+0x3c>
   dab3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dab3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dab42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dab46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dab4a:	fa23 f002 	lsr.w	r0, r3, r2
   dab4e:	bf18      	it	ne
   dab50:	4240      	negne	r0, r0
   dab52:	4770      	bx	lr
   dab54:	f04f 0000 	mov.w	r0, #0
   dab58:	4770      	bx	lr
   dab5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dab5e:	d105      	bne.n	dab6c <__aeabi_d2iz+0x48>
   dab60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dab64:	bf08      	it	eq
   dab66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dab6a:	4770      	bx	lr
   dab6c:	f04f 0000 	mov.w	r0, #0
   dab70:	4770      	bx	lr
   dab72:	bf00      	nop

000dab74 <__aeabi_d2uiz>:
   dab74:	004a      	lsls	r2, r1, #1
   dab76:	d211      	bcs.n	dab9c <__aeabi_d2uiz+0x28>
   dab78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dab7c:	d211      	bcs.n	daba2 <__aeabi_d2uiz+0x2e>
   dab7e:	d50d      	bpl.n	dab9c <__aeabi_d2uiz+0x28>
   dab80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dab84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dab88:	d40e      	bmi.n	daba8 <__aeabi_d2uiz+0x34>
   dab8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dab8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dab92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dab96:	fa23 f002 	lsr.w	r0, r3, r2
   dab9a:	4770      	bx	lr
   dab9c:	f04f 0000 	mov.w	r0, #0
   daba0:	4770      	bx	lr
   daba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   daba6:	d102      	bne.n	dabae <__aeabi_d2uiz+0x3a>
   daba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dabac:	4770      	bx	lr
   dabae:	f04f 0000 	mov.w	r0, #0
   dabb2:	4770      	bx	lr

000dabb4 <__aeabi_d2f>:
   dabb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dabb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dabbc:	bf24      	itt	cs
   dabbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dabc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dabc6:	d90d      	bls.n	dabe4 <__aeabi_d2f+0x30>
   dabc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dabcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dabd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dabd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dabd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dabdc:	bf08      	it	eq
   dabde:	f020 0001 	biceq.w	r0, r0, #1
   dabe2:	4770      	bx	lr
   dabe4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dabe8:	d121      	bne.n	dac2e <__aeabi_d2f+0x7a>
   dabea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dabee:	bfbc      	itt	lt
   dabf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dabf4:	4770      	bxlt	lr
   dabf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dabfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dabfe:	f1c2 0218 	rsb	r2, r2, #24
   dac02:	f1c2 0c20 	rsb	ip, r2, #32
   dac06:	fa10 f30c 	lsls.w	r3, r0, ip
   dac0a:	fa20 f002 	lsr.w	r0, r0, r2
   dac0e:	bf18      	it	ne
   dac10:	f040 0001 	orrne.w	r0, r0, #1
   dac14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dac18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dac1c:	fa03 fc0c 	lsl.w	ip, r3, ip
   dac20:	ea40 000c 	orr.w	r0, r0, ip
   dac24:	fa23 f302 	lsr.w	r3, r3, r2
   dac28:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dac2c:	e7cc      	b.n	dabc8 <__aeabi_d2f+0x14>
   dac2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dac32:	d107      	bne.n	dac44 <__aeabi_d2f+0x90>
   dac34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dac38:	bf1e      	ittt	ne
   dac3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dac3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dac42:	4770      	bxne	lr
   dac44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dac48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dac4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dac50:	4770      	bx	lr
   dac52:	bf00      	nop

000dac54 <__aeabi_uldivmod>:
   dac54:	b953      	cbnz	r3, dac6c <__aeabi_uldivmod+0x18>
   dac56:	b94a      	cbnz	r2, dac6c <__aeabi_uldivmod+0x18>
   dac58:	2900      	cmp	r1, #0
   dac5a:	bf08      	it	eq
   dac5c:	2800      	cmpeq	r0, #0
   dac5e:	bf1c      	itt	ne
   dac60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   dac64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   dac68:	f000 b98c 	b.w	daf84 <__aeabi_idiv0>
   dac6c:	f1ad 0c08 	sub.w	ip, sp, #8
   dac70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dac74:	f000 f824 	bl	dacc0 <__udivmoddi4>
   dac78:	f8dd e004 	ldr.w	lr, [sp, #4]
   dac7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dac80:	b004      	add	sp, #16
   dac82:	4770      	bx	lr

000dac84 <__aeabi_d2ulz>:
   dac84:	b5d0      	push	{r4, r6, r7, lr}
   dac86:	4b0c      	ldr	r3, [pc, #48]	; (dacb8 <__aeabi_d2ulz+0x34>)
   dac88:	2200      	movs	r2, #0
   dac8a:	4606      	mov	r6, r0
   dac8c:	460f      	mov	r7, r1
   dac8e:	f7ff fc99 	bl	da5c4 <__aeabi_dmul>
   dac92:	f7ff ff6f 	bl	dab74 <__aeabi_d2uiz>
   dac96:	4604      	mov	r4, r0
   dac98:	f7ff fc1a 	bl	da4d0 <__aeabi_ui2d>
   dac9c:	4b07      	ldr	r3, [pc, #28]	; (dacbc <__aeabi_d2ulz+0x38>)
   dac9e:	2200      	movs	r2, #0
   daca0:	f7ff fc90 	bl	da5c4 <__aeabi_dmul>
   daca4:	4602      	mov	r2, r0
   daca6:	460b      	mov	r3, r1
   daca8:	4630      	mov	r0, r6
   dacaa:	4639      	mov	r1, r7
   dacac:	f7ff fad2 	bl	da254 <__aeabi_dsub>
   dacb0:	f7ff ff60 	bl	dab74 <__aeabi_d2uiz>
   dacb4:	4621      	mov	r1, r4
   dacb6:	bdd0      	pop	{r4, r6, r7, pc}
   dacb8:	3df00000 	.word	0x3df00000
   dacbc:	41f00000 	.word	0x41f00000

000dacc0 <__udivmoddi4>:
   dacc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dacc4:	9d08      	ldr	r5, [sp, #32]
   dacc6:	4604      	mov	r4, r0
   dacc8:	468c      	mov	ip, r1
   dacca:	2b00      	cmp	r3, #0
   daccc:	f040 8083 	bne.w	dadd6 <__udivmoddi4+0x116>
   dacd0:	428a      	cmp	r2, r1
   dacd2:	4617      	mov	r7, r2
   dacd4:	d947      	bls.n	dad66 <__udivmoddi4+0xa6>
   dacd6:	fab2 f282 	clz	r2, r2
   dacda:	b142      	cbz	r2, dacee <__udivmoddi4+0x2e>
   dacdc:	f1c2 0020 	rsb	r0, r2, #32
   dace0:	fa24 f000 	lsr.w	r0, r4, r0
   dace4:	4091      	lsls	r1, r2
   dace6:	4097      	lsls	r7, r2
   dace8:	ea40 0c01 	orr.w	ip, r0, r1
   dacec:	4094      	lsls	r4, r2
   dacee:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dacf2:	0c23      	lsrs	r3, r4, #16
   dacf4:	fbbc f6f8 	udiv	r6, ip, r8
   dacf8:	fa1f fe87 	uxth.w	lr, r7
   dacfc:	fb08 c116 	mls	r1, r8, r6, ip
   dad00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dad04:	fb06 f10e 	mul.w	r1, r6, lr
   dad08:	4299      	cmp	r1, r3
   dad0a:	d909      	bls.n	dad20 <__udivmoddi4+0x60>
   dad0c:	18fb      	adds	r3, r7, r3
   dad0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   dad12:	f080 8119 	bcs.w	daf48 <__udivmoddi4+0x288>
   dad16:	4299      	cmp	r1, r3
   dad18:	f240 8116 	bls.w	daf48 <__udivmoddi4+0x288>
   dad1c:	3e02      	subs	r6, #2
   dad1e:	443b      	add	r3, r7
   dad20:	1a5b      	subs	r3, r3, r1
   dad22:	b2a4      	uxth	r4, r4
   dad24:	fbb3 f0f8 	udiv	r0, r3, r8
   dad28:	fb08 3310 	mls	r3, r8, r0, r3
   dad2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dad30:	fb00 fe0e 	mul.w	lr, r0, lr
   dad34:	45a6      	cmp	lr, r4
   dad36:	d909      	bls.n	dad4c <__udivmoddi4+0x8c>
   dad38:	193c      	adds	r4, r7, r4
   dad3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dad3e:	f080 8105 	bcs.w	daf4c <__udivmoddi4+0x28c>
   dad42:	45a6      	cmp	lr, r4
   dad44:	f240 8102 	bls.w	daf4c <__udivmoddi4+0x28c>
   dad48:	3802      	subs	r0, #2
   dad4a:	443c      	add	r4, r7
   dad4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dad50:	eba4 040e 	sub.w	r4, r4, lr
   dad54:	2600      	movs	r6, #0
   dad56:	b11d      	cbz	r5, dad60 <__udivmoddi4+0xa0>
   dad58:	40d4      	lsrs	r4, r2
   dad5a:	2300      	movs	r3, #0
   dad5c:	e9c5 4300 	strd	r4, r3, [r5]
   dad60:	4631      	mov	r1, r6
   dad62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dad66:	b902      	cbnz	r2, dad6a <__udivmoddi4+0xaa>
   dad68:	deff      	udf	#255	; 0xff
   dad6a:	fab2 f282 	clz	r2, r2
   dad6e:	2a00      	cmp	r2, #0
   dad70:	d150      	bne.n	dae14 <__udivmoddi4+0x154>
   dad72:	1bcb      	subs	r3, r1, r7
   dad74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dad78:	fa1f f887 	uxth.w	r8, r7
   dad7c:	2601      	movs	r6, #1
   dad7e:	fbb3 fcfe 	udiv	ip, r3, lr
   dad82:	0c21      	lsrs	r1, r4, #16
   dad84:	fb0e 331c 	mls	r3, lr, ip, r3
   dad88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dad8c:	fb08 f30c 	mul.w	r3, r8, ip
   dad90:	428b      	cmp	r3, r1
   dad92:	d907      	bls.n	dada4 <__udivmoddi4+0xe4>
   dad94:	1879      	adds	r1, r7, r1
   dad96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dad9a:	d202      	bcs.n	dada2 <__udivmoddi4+0xe2>
   dad9c:	428b      	cmp	r3, r1
   dad9e:	f200 80e9 	bhi.w	daf74 <__udivmoddi4+0x2b4>
   dada2:	4684      	mov	ip, r0
   dada4:	1ac9      	subs	r1, r1, r3
   dada6:	b2a3      	uxth	r3, r4
   dada8:	fbb1 f0fe 	udiv	r0, r1, lr
   dadac:	fb0e 1110 	mls	r1, lr, r0, r1
   dadb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dadb4:	fb08 f800 	mul.w	r8, r8, r0
   dadb8:	45a0      	cmp	r8, r4
   dadba:	d907      	bls.n	dadcc <__udivmoddi4+0x10c>
   dadbc:	193c      	adds	r4, r7, r4
   dadbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dadc2:	d202      	bcs.n	dadca <__udivmoddi4+0x10a>
   dadc4:	45a0      	cmp	r8, r4
   dadc6:	f200 80d9 	bhi.w	daf7c <__udivmoddi4+0x2bc>
   dadca:	4618      	mov	r0, r3
   dadcc:	eba4 0408 	sub.w	r4, r4, r8
   dadd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dadd4:	e7bf      	b.n	dad56 <__udivmoddi4+0x96>
   dadd6:	428b      	cmp	r3, r1
   dadd8:	d909      	bls.n	dadee <__udivmoddi4+0x12e>
   dadda:	2d00      	cmp	r5, #0
   daddc:	f000 80b1 	beq.w	daf42 <__udivmoddi4+0x282>
   dade0:	2600      	movs	r6, #0
   dade2:	e9c5 0100 	strd	r0, r1, [r5]
   dade6:	4630      	mov	r0, r6
   dade8:	4631      	mov	r1, r6
   dadea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dadee:	fab3 f683 	clz	r6, r3
   dadf2:	2e00      	cmp	r6, #0
   dadf4:	d14a      	bne.n	dae8c <__udivmoddi4+0x1cc>
   dadf6:	428b      	cmp	r3, r1
   dadf8:	d302      	bcc.n	dae00 <__udivmoddi4+0x140>
   dadfa:	4282      	cmp	r2, r0
   dadfc:	f200 80b8 	bhi.w	daf70 <__udivmoddi4+0x2b0>
   dae00:	1a84      	subs	r4, r0, r2
   dae02:	eb61 0103 	sbc.w	r1, r1, r3
   dae06:	2001      	movs	r0, #1
   dae08:	468c      	mov	ip, r1
   dae0a:	2d00      	cmp	r5, #0
   dae0c:	d0a8      	beq.n	dad60 <__udivmoddi4+0xa0>
   dae0e:	e9c5 4c00 	strd	r4, ip, [r5]
   dae12:	e7a5      	b.n	dad60 <__udivmoddi4+0xa0>
   dae14:	f1c2 0320 	rsb	r3, r2, #32
   dae18:	fa20 f603 	lsr.w	r6, r0, r3
   dae1c:	4097      	lsls	r7, r2
   dae1e:	fa01 f002 	lsl.w	r0, r1, r2
   dae22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dae26:	40d9      	lsrs	r1, r3
   dae28:	4330      	orrs	r0, r6
   dae2a:	0c03      	lsrs	r3, r0, #16
   dae2c:	fbb1 f6fe 	udiv	r6, r1, lr
   dae30:	fa1f f887 	uxth.w	r8, r7
   dae34:	fb0e 1116 	mls	r1, lr, r6, r1
   dae38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dae3c:	fb06 f108 	mul.w	r1, r6, r8
   dae40:	4299      	cmp	r1, r3
   dae42:	fa04 f402 	lsl.w	r4, r4, r2
   dae46:	d909      	bls.n	dae5c <__udivmoddi4+0x19c>
   dae48:	18fb      	adds	r3, r7, r3
   dae4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dae4e:	f080 808d 	bcs.w	daf6c <__udivmoddi4+0x2ac>
   dae52:	4299      	cmp	r1, r3
   dae54:	f240 808a 	bls.w	daf6c <__udivmoddi4+0x2ac>
   dae58:	3e02      	subs	r6, #2
   dae5a:	443b      	add	r3, r7
   dae5c:	1a5b      	subs	r3, r3, r1
   dae5e:	b281      	uxth	r1, r0
   dae60:	fbb3 f0fe 	udiv	r0, r3, lr
   dae64:	fb0e 3310 	mls	r3, lr, r0, r3
   dae68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dae6c:	fb00 f308 	mul.w	r3, r0, r8
   dae70:	428b      	cmp	r3, r1
   dae72:	d907      	bls.n	dae84 <__udivmoddi4+0x1c4>
   dae74:	1879      	adds	r1, r7, r1
   dae76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dae7a:	d273      	bcs.n	daf64 <__udivmoddi4+0x2a4>
   dae7c:	428b      	cmp	r3, r1
   dae7e:	d971      	bls.n	daf64 <__udivmoddi4+0x2a4>
   dae80:	3802      	subs	r0, #2
   dae82:	4439      	add	r1, r7
   dae84:	1acb      	subs	r3, r1, r3
   dae86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dae8a:	e778      	b.n	dad7e <__udivmoddi4+0xbe>
   dae8c:	f1c6 0c20 	rsb	ip, r6, #32
   dae90:	fa03 f406 	lsl.w	r4, r3, r6
   dae94:	fa22 f30c 	lsr.w	r3, r2, ip
   dae98:	431c      	orrs	r4, r3
   dae9a:	fa20 f70c 	lsr.w	r7, r0, ip
   dae9e:	fa01 f306 	lsl.w	r3, r1, r6
   daea2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   daea6:	fa21 f10c 	lsr.w	r1, r1, ip
   daeaa:	431f      	orrs	r7, r3
   daeac:	0c3b      	lsrs	r3, r7, #16
   daeae:	fbb1 f9fe 	udiv	r9, r1, lr
   daeb2:	fa1f f884 	uxth.w	r8, r4
   daeb6:	fb0e 1119 	mls	r1, lr, r9, r1
   daeba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   daebe:	fb09 fa08 	mul.w	sl, r9, r8
   daec2:	458a      	cmp	sl, r1
   daec4:	fa02 f206 	lsl.w	r2, r2, r6
   daec8:	fa00 f306 	lsl.w	r3, r0, r6
   daecc:	d908      	bls.n	daee0 <__udivmoddi4+0x220>
   daece:	1861      	adds	r1, r4, r1
   daed0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   daed4:	d248      	bcs.n	daf68 <__udivmoddi4+0x2a8>
   daed6:	458a      	cmp	sl, r1
   daed8:	d946      	bls.n	daf68 <__udivmoddi4+0x2a8>
   daeda:	f1a9 0902 	sub.w	r9, r9, #2
   daede:	4421      	add	r1, r4
   daee0:	eba1 010a 	sub.w	r1, r1, sl
   daee4:	b2bf      	uxth	r7, r7
   daee6:	fbb1 f0fe 	udiv	r0, r1, lr
   daeea:	fb0e 1110 	mls	r1, lr, r0, r1
   daeee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   daef2:	fb00 f808 	mul.w	r8, r0, r8
   daef6:	45b8      	cmp	r8, r7
   daef8:	d907      	bls.n	daf0a <__udivmoddi4+0x24a>
   daefa:	19e7      	adds	r7, r4, r7
   daefc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   daf00:	d22e      	bcs.n	daf60 <__udivmoddi4+0x2a0>
   daf02:	45b8      	cmp	r8, r7
   daf04:	d92c      	bls.n	daf60 <__udivmoddi4+0x2a0>
   daf06:	3802      	subs	r0, #2
   daf08:	4427      	add	r7, r4
   daf0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   daf0e:	eba7 0708 	sub.w	r7, r7, r8
   daf12:	fba0 8902 	umull	r8, r9, r0, r2
   daf16:	454f      	cmp	r7, r9
   daf18:	46c6      	mov	lr, r8
   daf1a:	4649      	mov	r1, r9
   daf1c:	d31a      	bcc.n	daf54 <__udivmoddi4+0x294>
   daf1e:	d017      	beq.n	daf50 <__udivmoddi4+0x290>
   daf20:	b15d      	cbz	r5, daf3a <__udivmoddi4+0x27a>
   daf22:	ebb3 020e 	subs.w	r2, r3, lr
   daf26:	eb67 0701 	sbc.w	r7, r7, r1
   daf2a:	fa07 fc0c 	lsl.w	ip, r7, ip
   daf2e:	40f2      	lsrs	r2, r6
   daf30:	ea4c 0202 	orr.w	r2, ip, r2
   daf34:	40f7      	lsrs	r7, r6
   daf36:	e9c5 2700 	strd	r2, r7, [r5]
   daf3a:	2600      	movs	r6, #0
   daf3c:	4631      	mov	r1, r6
   daf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf42:	462e      	mov	r6, r5
   daf44:	4628      	mov	r0, r5
   daf46:	e70b      	b.n	dad60 <__udivmoddi4+0xa0>
   daf48:	4606      	mov	r6, r0
   daf4a:	e6e9      	b.n	dad20 <__udivmoddi4+0x60>
   daf4c:	4618      	mov	r0, r3
   daf4e:	e6fd      	b.n	dad4c <__udivmoddi4+0x8c>
   daf50:	4543      	cmp	r3, r8
   daf52:	d2e5      	bcs.n	daf20 <__udivmoddi4+0x260>
   daf54:	ebb8 0e02 	subs.w	lr, r8, r2
   daf58:	eb69 0104 	sbc.w	r1, r9, r4
   daf5c:	3801      	subs	r0, #1
   daf5e:	e7df      	b.n	daf20 <__udivmoddi4+0x260>
   daf60:	4608      	mov	r0, r1
   daf62:	e7d2      	b.n	daf0a <__udivmoddi4+0x24a>
   daf64:	4660      	mov	r0, ip
   daf66:	e78d      	b.n	dae84 <__udivmoddi4+0x1c4>
   daf68:	4681      	mov	r9, r0
   daf6a:	e7b9      	b.n	daee0 <__udivmoddi4+0x220>
   daf6c:	4666      	mov	r6, ip
   daf6e:	e775      	b.n	dae5c <__udivmoddi4+0x19c>
   daf70:	4630      	mov	r0, r6
   daf72:	e74a      	b.n	dae0a <__udivmoddi4+0x14a>
   daf74:	f1ac 0c02 	sub.w	ip, ip, #2
   daf78:	4439      	add	r1, r7
   daf7a:	e713      	b.n	dada4 <__udivmoddi4+0xe4>
   daf7c:	3802      	subs	r0, #2
   daf7e:	443c      	add	r4, r7
   daf80:	e724      	b.n	dadcc <__udivmoddi4+0x10c>
   daf82:	bf00      	nop

000daf84 <__aeabi_idiv0>:
   daf84:	4770      	bx	lr
   daf86:	bf00      	nop

000daf88 <asctime_r>:
   daf88:	b510      	push	{r4, lr}
   daf8a:	460c      	mov	r4, r1
   daf8c:	6941      	ldr	r1, [r0, #20]
   daf8e:	6903      	ldr	r3, [r0, #16]
   daf90:	6982      	ldr	r2, [r0, #24]
   daf92:	b086      	sub	sp, #24
   daf94:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daf98:	9104      	str	r1, [sp, #16]
   daf9a:	6801      	ldr	r1, [r0, #0]
   daf9c:	9103      	str	r1, [sp, #12]
   daf9e:	6841      	ldr	r1, [r0, #4]
   dafa0:	9102      	str	r1, [sp, #8]
   dafa2:	6881      	ldr	r1, [r0, #8]
   dafa4:	9101      	str	r1, [sp, #4]
   dafa6:	68c1      	ldr	r1, [r0, #12]
   dafa8:	9100      	str	r1, [sp, #0]
   dafaa:	4907      	ldr	r1, [pc, #28]	; (dafc8 <asctime_r+0x40>)
   dafac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dafb0:	440b      	add	r3, r1
   dafb2:	4906      	ldr	r1, [pc, #24]	; (dafcc <asctime_r+0x44>)
   dafb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dafb8:	440a      	add	r2, r1
   dafba:	4620      	mov	r0, r4
   dafbc:	4904      	ldr	r1, [pc, #16]	; (dafd0 <asctime_r+0x48>)
   dafbe:	f7fd f9dd 	bl	d837c <siprintf>
   dafc2:	4620      	mov	r0, r4
   dafc4:	b006      	add	sp, #24
   dafc6:	bd10      	pop	{r4, pc}
   dafc8:	000de066 	.word	0x000de066
   dafcc:	000de051 	.word	0x000de051
   dafd0:	000de031 	.word	0x000de031

000dafd4 <atexit>:
   dafd4:	2300      	movs	r3, #0
   dafd6:	4601      	mov	r1, r0
   dafd8:	461a      	mov	r2, r3
   dafda:	4618      	mov	r0, r3
   dafdc:	f000 bf7a 	b.w	dbed4 <__register_exitproc>

000dafe0 <atof>:
   dafe0:	2100      	movs	r1, #0
   dafe2:	f000 bee7 	b.w	dbdb4 <strtod>

000dafe6 <atol>:
   dafe6:	220a      	movs	r2, #10
   dafe8:	2100      	movs	r1, #0
   dafea:	f000 bf69 	b.w	dbec0 <strtol>

000dafee <memcmp>:
   dafee:	b530      	push	{r4, r5, lr}
   daff0:	3901      	subs	r1, #1
   daff2:	2400      	movs	r4, #0
   daff4:	42a2      	cmp	r2, r4
   daff6:	d101      	bne.n	daffc <memcmp+0xe>
   daff8:	2000      	movs	r0, #0
   daffa:	e005      	b.n	db008 <memcmp+0x1a>
   daffc:	5d03      	ldrb	r3, [r0, r4]
   daffe:	3401      	adds	r4, #1
   db000:	5d0d      	ldrb	r5, [r1, r4]
   db002:	42ab      	cmp	r3, r5
   db004:	d0f6      	beq.n	daff4 <memcmp+0x6>
   db006:	1b58      	subs	r0, r3, r5
   db008:	bd30      	pop	{r4, r5, pc}

000db00a <memcpy>:
   db00a:	440a      	add	r2, r1
   db00c:	4291      	cmp	r1, r2
   db00e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   db012:	d100      	bne.n	db016 <memcpy+0xc>
   db014:	4770      	bx	lr
   db016:	b510      	push	{r4, lr}
   db018:	f811 4b01 	ldrb.w	r4, [r1], #1
   db01c:	f803 4f01 	strb.w	r4, [r3, #1]!
   db020:	4291      	cmp	r1, r2
   db022:	d1f9      	bne.n	db018 <memcpy+0xe>
   db024:	bd10      	pop	{r4, pc}

000db026 <memset>:
   db026:	4402      	add	r2, r0
   db028:	4603      	mov	r3, r0
   db02a:	4293      	cmp	r3, r2
   db02c:	d100      	bne.n	db030 <memset+0xa>
   db02e:	4770      	bx	lr
   db030:	f803 1b01 	strb.w	r1, [r3], #1
   db034:	e7f9      	b.n	db02a <memset+0x4>
	...

000db038 <srand>:
   db038:	b538      	push	{r3, r4, r5, lr}
   db03a:	4b0d      	ldr	r3, [pc, #52]	; (db070 <srand+0x38>)
   db03c:	681d      	ldr	r5, [r3, #0]
   db03e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db040:	4604      	mov	r4, r0
   db042:	b97b      	cbnz	r3, db064 <srand+0x2c>
   db044:	2018      	movs	r0, #24
   db046:	f7fd f981 	bl	d834c <malloc>
   db04a:	4a0a      	ldr	r2, [pc, #40]	; (db074 <srand+0x3c>)
   db04c:	4b0a      	ldr	r3, [pc, #40]	; (db078 <srand+0x40>)
   db04e:	63a8      	str	r0, [r5, #56]	; 0x38
   db050:	e9c0 2300 	strd	r2, r3, [r0]
   db054:	4b09      	ldr	r3, [pc, #36]	; (db07c <srand+0x44>)
   db056:	6083      	str	r3, [r0, #8]
   db058:	230b      	movs	r3, #11
   db05a:	8183      	strh	r3, [r0, #12]
   db05c:	2201      	movs	r2, #1
   db05e:	2300      	movs	r3, #0
   db060:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db064:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db066:	2200      	movs	r2, #0
   db068:	611c      	str	r4, [r3, #16]
   db06a:	615a      	str	r2, [r3, #20]
   db06c:	bd38      	pop	{r3, r4, r5, pc}
   db06e:	bf00      	nop
   db070:	2003dce8 	.word	0x2003dce8
   db074:	abcd330e 	.word	0xabcd330e
   db078:	e66d1234 	.word	0xe66d1234
   db07c:	0005deec 	.word	0x0005deec

000db080 <strcmp>:
   db080:	f810 2b01 	ldrb.w	r2, [r0], #1
   db084:	f811 3b01 	ldrb.w	r3, [r1], #1
   db088:	2a01      	cmp	r2, #1
   db08a:	bf28      	it	cs
   db08c:	429a      	cmpcs	r2, r3
   db08e:	d0f7      	beq.n	db080 <strcmp>
   db090:	1ad0      	subs	r0, r2, r3
   db092:	4770      	bx	lr

000db094 <strcpy>:
   db094:	4603      	mov	r3, r0
   db096:	f811 2b01 	ldrb.w	r2, [r1], #1
   db09a:	f803 2b01 	strb.w	r2, [r3], #1
   db09e:	2a00      	cmp	r2, #0
   db0a0:	d1f9      	bne.n	db096 <strcpy+0x2>
   db0a2:	4770      	bx	lr

000db0a4 <strdup>:
   db0a4:	4b02      	ldr	r3, [pc, #8]	; (db0b0 <strdup+0xc>)
   db0a6:	4601      	mov	r1, r0
   db0a8:	6818      	ldr	r0, [r3, #0]
   db0aa:	f000 b803 	b.w	db0b4 <_strdup_r>
   db0ae:	bf00      	nop
   db0b0:	2003dce8 	.word	0x2003dce8

000db0b4 <_strdup_r>:
   db0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db0b6:	4604      	mov	r4, r0
   db0b8:	4608      	mov	r0, r1
   db0ba:	460d      	mov	r5, r1
   db0bc:	f000 f80f 	bl	db0de <strlen>
   db0c0:	1c42      	adds	r2, r0, #1
   db0c2:	4611      	mov	r1, r2
   db0c4:	4620      	mov	r0, r4
   db0c6:	9201      	str	r2, [sp, #4]
   db0c8:	f7fd f978 	bl	d83bc <_malloc_r>
   db0cc:	4604      	mov	r4, r0
   db0ce:	b118      	cbz	r0, db0d8 <_strdup_r+0x24>
   db0d0:	9a01      	ldr	r2, [sp, #4]
   db0d2:	4629      	mov	r1, r5
   db0d4:	f7ff ff99 	bl	db00a <memcpy>
   db0d8:	4620      	mov	r0, r4
   db0da:	b003      	add	sp, #12
   db0dc:	bd30      	pop	{r4, r5, pc}

000db0de <strlen>:
   db0de:	4603      	mov	r3, r0
   db0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   db0e4:	2a00      	cmp	r2, #0
   db0e6:	d1fb      	bne.n	db0e0 <strlen+0x2>
   db0e8:	1a18      	subs	r0, r3, r0
   db0ea:	3801      	subs	r0, #1
   db0ec:	4770      	bx	lr

000db0ee <strncmp>:
   db0ee:	b510      	push	{r4, lr}
   db0f0:	b16a      	cbz	r2, db10e <strncmp+0x20>
   db0f2:	3901      	subs	r1, #1
   db0f4:	1884      	adds	r4, r0, r2
   db0f6:	f810 3b01 	ldrb.w	r3, [r0], #1
   db0fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db0fe:	4293      	cmp	r3, r2
   db100:	d103      	bne.n	db10a <strncmp+0x1c>
   db102:	42a0      	cmp	r0, r4
   db104:	d001      	beq.n	db10a <strncmp+0x1c>
   db106:	2b00      	cmp	r3, #0
   db108:	d1f5      	bne.n	db0f6 <strncmp+0x8>
   db10a:	1a98      	subs	r0, r3, r2
   db10c:	bd10      	pop	{r4, pc}
   db10e:	4610      	mov	r0, r2
   db110:	e7fc      	b.n	db10c <strncmp+0x1e>

000db112 <strncpy>:
   db112:	b510      	push	{r4, lr}
   db114:	3901      	subs	r1, #1
   db116:	4603      	mov	r3, r0
   db118:	b132      	cbz	r2, db128 <strncpy+0x16>
   db11a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db11e:	f803 4b01 	strb.w	r4, [r3], #1
   db122:	3a01      	subs	r2, #1
   db124:	2c00      	cmp	r4, #0
   db126:	d1f7      	bne.n	db118 <strncpy+0x6>
   db128:	441a      	add	r2, r3
   db12a:	2100      	movs	r1, #0
   db12c:	4293      	cmp	r3, r2
   db12e:	d100      	bne.n	db132 <strncpy+0x20>
   db130:	bd10      	pop	{r4, pc}
   db132:	f803 1b01 	strb.w	r1, [r3], #1
   db136:	e7f9      	b.n	db12c <strncpy+0x1a>

000db138 <strstr>:
   db138:	b5f0      	push	{r4, r5, r6, r7, lr}
   db13a:	780c      	ldrb	r4, [r1, #0]
   db13c:	b164      	cbz	r4, db158 <strstr+0x20>
   db13e:	4603      	mov	r3, r0
   db140:	781a      	ldrb	r2, [r3, #0]
   db142:	4618      	mov	r0, r3
   db144:	1c5e      	adds	r6, r3, #1
   db146:	b90a      	cbnz	r2, db14c <strstr+0x14>
   db148:	4610      	mov	r0, r2
   db14a:	e005      	b.n	db158 <strstr+0x20>
   db14c:	4294      	cmp	r4, r2
   db14e:	d108      	bne.n	db162 <strstr+0x2a>
   db150:	460d      	mov	r5, r1
   db152:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   db156:	b902      	cbnz	r2, db15a <strstr+0x22>
   db158:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db15a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   db15e:	4297      	cmp	r7, r2
   db160:	d0f7      	beq.n	db152 <strstr+0x1a>
   db162:	4633      	mov	r3, r6
   db164:	e7ec      	b.n	db140 <strstr+0x8>

000db166 <sulp>:
   db166:	b570      	push	{r4, r5, r6, lr}
   db168:	4604      	mov	r4, r0
   db16a:	460d      	mov	r5, r1
   db16c:	ec45 4b10 	vmov	d0, r4, r5
   db170:	4616      	mov	r6, r2
   db172:	f001 fd81 	bl	dcc78 <__ulp>
   db176:	ec51 0b10 	vmov	r0, r1, d0
   db17a:	b17e      	cbz	r6, db19c <sulp+0x36>
   db17c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   db180:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db184:	2b00      	cmp	r3, #0
   db186:	dd09      	ble.n	db19c <sulp+0x36>
   db188:	051b      	lsls	r3, r3, #20
   db18a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   db18e:	2400      	movs	r4, #0
   db190:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   db194:	4622      	mov	r2, r4
   db196:	462b      	mov	r3, r5
   db198:	f7ff fa14 	bl	da5c4 <__aeabi_dmul>
   db19c:	bd70      	pop	{r4, r5, r6, pc}
	...

000db1a0 <_strtod_l>:
   db1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db1a4:	b0a3      	sub	sp, #140	; 0x8c
   db1a6:	461f      	mov	r7, r3
   db1a8:	2300      	movs	r3, #0
   db1aa:	931e      	str	r3, [sp, #120]	; 0x78
   db1ac:	4ba4      	ldr	r3, [pc, #656]	; (db440 <_strtod_l+0x2a0>)
   db1ae:	9219      	str	r2, [sp, #100]	; 0x64
   db1b0:	681b      	ldr	r3, [r3, #0]
   db1b2:	9307      	str	r3, [sp, #28]
   db1b4:	4604      	mov	r4, r0
   db1b6:	4618      	mov	r0, r3
   db1b8:	4688      	mov	r8, r1
   db1ba:	f7ff ff90 	bl	db0de <strlen>
   db1be:	f04f 0a00 	mov.w	sl, #0
   db1c2:	4605      	mov	r5, r0
   db1c4:	f04f 0b00 	mov.w	fp, #0
   db1c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db1cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db1ce:	781a      	ldrb	r2, [r3, #0]
   db1d0:	2a2b      	cmp	r2, #43	; 0x2b
   db1d2:	d04c      	beq.n	db26e <_strtod_l+0xce>
   db1d4:	d839      	bhi.n	db24a <_strtod_l+0xaa>
   db1d6:	2a0d      	cmp	r2, #13
   db1d8:	d832      	bhi.n	db240 <_strtod_l+0xa0>
   db1da:	2a08      	cmp	r2, #8
   db1dc:	d832      	bhi.n	db244 <_strtod_l+0xa4>
   db1de:	2a00      	cmp	r2, #0
   db1e0:	d03c      	beq.n	db25c <_strtod_l+0xbc>
   db1e2:	2300      	movs	r3, #0
   db1e4:	930e      	str	r3, [sp, #56]	; 0x38
   db1e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   db1e8:	7833      	ldrb	r3, [r6, #0]
   db1ea:	2b30      	cmp	r3, #48	; 0x30
   db1ec:	f040 80b4 	bne.w	db358 <_strtod_l+0x1b8>
   db1f0:	7873      	ldrb	r3, [r6, #1]
   db1f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db1f6:	2b58      	cmp	r3, #88	; 0x58
   db1f8:	d16c      	bne.n	db2d4 <_strtod_l+0x134>
   db1fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db1fc:	9301      	str	r3, [sp, #4]
   db1fe:	ab1e      	add	r3, sp, #120	; 0x78
   db200:	9702      	str	r7, [sp, #8]
   db202:	9300      	str	r3, [sp, #0]
   db204:	4a8f      	ldr	r2, [pc, #572]	; (db444 <_strtod_l+0x2a4>)
   db206:	ab1f      	add	r3, sp, #124	; 0x7c
   db208:	a91d      	add	r1, sp, #116	; 0x74
   db20a:	4620      	mov	r0, r4
   db20c:	f000 ff2c 	bl	dc068 <__gethex>
   db210:	f010 0707 	ands.w	r7, r0, #7
   db214:	4605      	mov	r5, r0
   db216:	d005      	beq.n	db224 <_strtod_l+0x84>
   db218:	2f06      	cmp	r7, #6
   db21a:	d12a      	bne.n	db272 <_strtod_l+0xd2>
   db21c:	3601      	adds	r6, #1
   db21e:	2300      	movs	r3, #0
   db220:	961d      	str	r6, [sp, #116]	; 0x74
   db222:	930e      	str	r3, [sp, #56]	; 0x38
   db224:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db226:	2b00      	cmp	r3, #0
   db228:	f040 8596 	bne.w	dbd58 <_strtod_l+0xbb8>
   db22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db22e:	b1db      	cbz	r3, db268 <_strtod_l+0xc8>
   db230:	4652      	mov	r2, sl
   db232:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db236:	ec43 2b10 	vmov	d0, r2, r3
   db23a:	b023      	add	sp, #140	; 0x8c
   db23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db240:	2a20      	cmp	r2, #32
   db242:	d1ce      	bne.n	db1e2 <_strtod_l+0x42>
   db244:	3301      	adds	r3, #1
   db246:	931d      	str	r3, [sp, #116]	; 0x74
   db248:	e7c0      	b.n	db1cc <_strtod_l+0x2c>
   db24a:	2a2d      	cmp	r2, #45	; 0x2d
   db24c:	d1c9      	bne.n	db1e2 <_strtod_l+0x42>
   db24e:	2201      	movs	r2, #1
   db250:	920e      	str	r2, [sp, #56]	; 0x38
   db252:	1c5a      	adds	r2, r3, #1
   db254:	921d      	str	r2, [sp, #116]	; 0x74
   db256:	785b      	ldrb	r3, [r3, #1]
   db258:	2b00      	cmp	r3, #0
   db25a:	d1c4      	bne.n	db1e6 <_strtod_l+0x46>
   db25c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db25e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db262:	2b00      	cmp	r3, #0
   db264:	f040 8576 	bne.w	dbd54 <_strtod_l+0xbb4>
   db268:	4652      	mov	r2, sl
   db26a:	465b      	mov	r3, fp
   db26c:	e7e3      	b.n	db236 <_strtod_l+0x96>
   db26e:	2200      	movs	r2, #0
   db270:	e7ee      	b.n	db250 <_strtod_l+0xb0>
   db272:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db274:	b13a      	cbz	r2, db286 <_strtod_l+0xe6>
   db276:	2135      	movs	r1, #53	; 0x35
   db278:	a820      	add	r0, sp, #128	; 0x80
   db27a:	f001 fdfc 	bl	dce76 <__copybits>
   db27e:	991e      	ldr	r1, [sp, #120]	; 0x78
   db280:	4620      	mov	r0, r4
   db282:	f001 fa30 	bl	dc6e6 <_Bfree>
   db286:	3f01      	subs	r7, #1
   db288:	2f05      	cmp	r7, #5
   db28a:	d807      	bhi.n	db29c <_strtod_l+0xfc>
   db28c:	e8df f007 	tbb	[pc, r7]
   db290:	1d180b0e 	.word	0x1d180b0e
   db294:	030e      	.short	0x030e
   db296:	f04f 0b00 	mov.w	fp, #0
   db29a:	46da      	mov	sl, fp
   db29c:	0728      	lsls	r0, r5, #28
   db29e:	d5c1      	bpl.n	db224 <_strtod_l+0x84>
   db2a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   db2a4:	e7be      	b.n	db224 <_strtod_l+0x84>
   db2a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   db2aa:	e7f7      	b.n	db29c <_strtod_l+0xfc>
   db2ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   db2b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   db2b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   db2b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   db2ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   db2be:	e7ed      	b.n	db29c <_strtod_l+0xfc>
   db2c0:	f8df b184 	ldr.w	fp, [pc, #388]	; db448 <_strtod_l+0x2a8>
   db2c4:	f04f 0a00 	mov.w	sl, #0
   db2c8:	e7e8      	b.n	db29c <_strtod_l+0xfc>
   db2ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   db2ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db2d2:	e7e3      	b.n	db29c <_strtod_l+0xfc>
   db2d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db2d6:	1c5a      	adds	r2, r3, #1
   db2d8:	921d      	str	r2, [sp, #116]	; 0x74
   db2da:	785b      	ldrb	r3, [r3, #1]
   db2dc:	2b30      	cmp	r3, #48	; 0x30
   db2de:	d0f9      	beq.n	db2d4 <_strtod_l+0x134>
   db2e0:	2b00      	cmp	r3, #0
   db2e2:	d09f      	beq.n	db224 <_strtod_l+0x84>
   db2e4:	2301      	movs	r3, #1
   db2e6:	f04f 0900 	mov.w	r9, #0
   db2ea:	9304      	str	r3, [sp, #16]
   db2ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db2ee:	930a      	str	r3, [sp, #40]	; 0x28
   db2f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   db2f4:	464f      	mov	r7, r9
   db2f6:	220a      	movs	r2, #10
   db2f8:	981d      	ldr	r0, [sp, #116]	; 0x74
   db2fa:	7806      	ldrb	r6, [r0, #0]
   db2fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db300:	b2d9      	uxtb	r1, r3
   db302:	2909      	cmp	r1, #9
   db304:	d92a      	bls.n	db35c <_strtod_l+0x1bc>
   db306:	9907      	ldr	r1, [sp, #28]
   db308:	462a      	mov	r2, r5
   db30a:	f7ff fef0 	bl	db0ee <strncmp>
   db30e:	b398      	cbz	r0, db378 <_strtod_l+0x1d8>
   db310:	2000      	movs	r0, #0
   db312:	4633      	mov	r3, r6
   db314:	463d      	mov	r5, r7
   db316:	9007      	str	r0, [sp, #28]
   db318:	4602      	mov	r2, r0
   db31a:	2b65      	cmp	r3, #101	; 0x65
   db31c:	d001      	beq.n	db322 <_strtod_l+0x182>
   db31e:	2b45      	cmp	r3, #69	; 0x45
   db320:	d118      	bne.n	db354 <_strtod_l+0x1b4>
   db322:	b91d      	cbnz	r5, db32c <_strtod_l+0x18c>
   db324:	9b04      	ldr	r3, [sp, #16]
   db326:	4303      	orrs	r3, r0
   db328:	d098      	beq.n	db25c <_strtod_l+0xbc>
   db32a:	2500      	movs	r5, #0
   db32c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   db330:	f108 0301 	add.w	r3, r8, #1
   db334:	931d      	str	r3, [sp, #116]	; 0x74
   db336:	f898 3001 	ldrb.w	r3, [r8, #1]
   db33a:	2b2b      	cmp	r3, #43	; 0x2b
   db33c:	d075      	beq.n	db42a <_strtod_l+0x28a>
   db33e:	2b2d      	cmp	r3, #45	; 0x2d
   db340:	d07b      	beq.n	db43a <_strtod_l+0x29a>
   db342:	f04f 0c00 	mov.w	ip, #0
   db346:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db34a:	2909      	cmp	r1, #9
   db34c:	f240 8082 	bls.w	db454 <_strtod_l+0x2b4>
   db350:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db354:	2600      	movs	r6, #0
   db356:	e09d      	b.n	db494 <_strtod_l+0x2f4>
   db358:	2300      	movs	r3, #0
   db35a:	e7c4      	b.n	db2e6 <_strtod_l+0x146>
   db35c:	2f08      	cmp	r7, #8
   db35e:	bfd8      	it	le
   db360:	9909      	ldrle	r1, [sp, #36]	; 0x24
   db362:	f100 0001 	add.w	r0, r0, #1
   db366:	bfda      	itte	le
   db368:	fb02 3301 	mlale	r3, r2, r1, r3
   db36c:	9309      	strle	r3, [sp, #36]	; 0x24
   db36e:	fb02 3909 	mlagt	r9, r2, r9, r3
   db372:	3701      	adds	r7, #1
   db374:	901d      	str	r0, [sp, #116]	; 0x74
   db376:	e7bf      	b.n	db2f8 <_strtod_l+0x158>
   db378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db37a:	195a      	adds	r2, r3, r5
   db37c:	921d      	str	r2, [sp, #116]	; 0x74
   db37e:	5d5b      	ldrb	r3, [r3, r5]
   db380:	2f00      	cmp	r7, #0
   db382:	d037      	beq.n	db3f4 <_strtod_l+0x254>
   db384:	9007      	str	r0, [sp, #28]
   db386:	463d      	mov	r5, r7
   db388:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   db38c:	2a09      	cmp	r2, #9
   db38e:	d912      	bls.n	db3b6 <_strtod_l+0x216>
   db390:	2201      	movs	r2, #1
   db392:	e7c2      	b.n	db31a <_strtod_l+0x17a>
   db394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db396:	1c5a      	adds	r2, r3, #1
   db398:	921d      	str	r2, [sp, #116]	; 0x74
   db39a:	785b      	ldrb	r3, [r3, #1]
   db39c:	3001      	adds	r0, #1
   db39e:	2b30      	cmp	r3, #48	; 0x30
   db3a0:	d0f8      	beq.n	db394 <_strtod_l+0x1f4>
   db3a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db3a6:	2a08      	cmp	r2, #8
   db3a8:	f200 84db 	bhi.w	dbd62 <_strtod_l+0xbc2>
   db3ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   db3ae:	9007      	str	r0, [sp, #28]
   db3b0:	2000      	movs	r0, #0
   db3b2:	920a      	str	r2, [sp, #40]	; 0x28
   db3b4:	4605      	mov	r5, r0
   db3b6:	3b30      	subs	r3, #48	; 0x30
   db3b8:	f100 0201 	add.w	r2, r0, #1
   db3bc:	d014      	beq.n	db3e8 <_strtod_l+0x248>
   db3be:	9907      	ldr	r1, [sp, #28]
   db3c0:	4411      	add	r1, r2
   db3c2:	9107      	str	r1, [sp, #28]
   db3c4:	462a      	mov	r2, r5
   db3c6:	eb00 0e05 	add.w	lr, r0, r5
   db3ca:	210a      	movs	r1, #10
   db3cc:	4572      	cmp	r2, lr
   db3ce:	d113      	bne.n	db3f8 <_strtod_l+0x258>
   db3d0:	182a      	adds	r2, r5, r0
   db3d2:	2a08      	cmp	r2, #8
   db3d4:	f105 0501 	add.w	r5, r5, #1
   db3d8:	4405      	add	r5, r0
   db3da:	dc1c      	bgt.n	db416 <_strtod_l+0x276>
   db3dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   db3de:	220a      	movs	r2, #10
   db3e0:	fb02 3301 	mla	r3, r2, r1, r3
   db3e4:	9309      	str	r3, [sp, #36]	; 0x24
   db3e6:	2200      	movs	r2, #0
   db3e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db3ea:	1c59      	adds	r1, r3, #1
   db3ec:	911d      	str	r1, [sp, #116]	; 0x74
   db3ee:	785b      	ldrb	r3, [r3, #1]
   db3f0:	4610      	mov	r0, r2
   db3f2:	e7c9      	b.n	db388 <_strtod_l+0x1e8>
   db3f4:	4638      	mov	r0, r7
   db3f6:	e7d2      	b.n	db39e <_strtod_l+0x1fe>
   db3f8:	2a08      	cmp	r2, #8
   db3fa:	dc04      	bgt.n	db406 <_strtod_l+0x266>
   db3fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   db3fe:	434e      	muls	r6, r1
   db400:	9609      	str	r6, [sp, #36]	; 0x24
   db402:	3201      	adds	r2, #1
   db404:	e7e2      	b.n	db3cc <_strtod_l+0x22c>
   db406:	f102 0c01 	add.w	ip, r2, #1
   db40a:	f1bc 0f10 	cmp.w	ip, #16
   db40e:	bfd8      	it	le
   db410:	fb01 f909 	mulle.w	r9, r1, r9
   db414:	e7f5      	b.n	db402 <_strtod_l+0x262>
   db416:	2d10      	cmp	r5, #16
   db418:	bfdc      	itt	le
   db41a:	220a      	movle	r2, #10
   db41c:	fb02 3909 	mlale	r9, r2, r9, r3
   db420:	e7e1      	b.n	db3e6 <_strtod_l+0x246>
   db422:	2300      	movs	r3, #0
   db424:	9307      	str	r3, [sp, #28]
   db426:	2201      	movs	r2, #1
   db428:	e77c      	b.n	db324 <_strtod_l+0x184>
   db42a:	f04f 0c00 	mov.w	ip, #0
   db42e:	f108 0302 	add.w	r3, r8, #2
   db432:	931d      	str	r3, [sp, #116]	; 0x74
   db434:	f898 3002 	ldrb.w	r3, [r8, #2]
   db438:	e785      	b.n	db346 <_strtod_l+0x1a6>
   db43a:	f04f 0c01 	mov.w	ip, #1
   db43e:	e7f6      	b.n	db42e <_strtod_l+0x28e>
   db440:	000de1e4 	.word	0x000de1e4
   db444:	000de090 	.word	0x000de090
   db448:	7ff00000 	.word	0x7ff00000
   db44c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db44e:	1c59      	adds	r1, r3, #1
   db450:	911d      	str	r1, [sp, #116]	; 0x74
   db452:	785b      	ldrb	r3, [r3, #1]
   db454:	2b30      	cmp	r3, #48	; 0x30
   db456:	d0f9      	beq.n	db44c <_strtod_l+0x2ac>
   db458:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   db45c:	2908      	cmp	r1, #8
   db45e:	f63f af79 	bhi.w	db354 <_strtod_l+0x1b4>
   db462:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db466:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db468:	9308      	str	r3, [sp, #32]
   db46a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db46c:	1c59      	adds	r1, r3, #1
   db46e:	911d      	str	r1, [sp, #116]	; 0x74
   db470:	785b      	ldrb	r3, [r3, #1]
   db472:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db476:	2e09      	cmp	r6, #9
   db478:	d937      	bls.n	db4ea <_strtod_l+0x34a>
   db47a:	9e08      	ldr	r6, [sp, #32]
   db47c:	1b89      	subs	r1, r1, r6
   db47e:	2908      	cmp	r1, #8
   db480:	f644 661f 	movw	r6, #19999	; 0x4e1f
   db484:	dc02      	bgt.n	db48c <_strtod_l+0x2ec>
   db486:	4576      	cmp	r6, lr
   db488:	bfa8      	it	ge
   db48a:	4676      	movge	r6, lr
   db48c:	f1bc 0f00 	cmp.w	ip, #0
   db490:	d000      	beq.n	db494 <_strtod_l+0x2f4>
   db492:	4276      	negs	r6, r6
   db494:	2d00      	cmp	r5, #0
   db496:	d14f      	bne.n	db538 <_strtod_l+0x398>
   db498:	9904      	ldr	r1, [sp, #16]
   db49a:	4301      	orrs	r1, r0
   db49c:	f47f aec2 	bne.w	db224 <_strtod_l+0x84>
   db4a0:	2a00      	cmp	r2, #0
   db4a2:	f47f aedb 	bne.w	db25c <_strtod_l+0xbc>
   db4a6:	2b69      	cmp	r3, #105	; 0x69
   db4a8:	d027      	beq.n	db4fa <_strtod_l+0x35a>
   db4aa:	dc24      	bgt.n	db4f6 <_strtod_l+0x356>
   db4ac:	2b49      	cmp	r3, #73	; 0x49
   db4ae:	d024      	beq.n	db4fa <_strtod_l+0x35a>
   db4b0:	2b4e      	cmp	r3, #78	; 0x4e
   db4b2:	f47f aed3 	bne.w	db25c <_strtod_l+0xbc>
   db4b6:	499e      	ldr	r1, [pc, #632]	; (db730 <_strtod_l+0x590>)
   db4b8:	a81d      	add	r0, sp, #116	; 0x74
   db4ba:	f001 f81b 	bl	dc4f4 <__match>
   db4be:	2800      	cmp	r0, #0
   db4c0:	f43f aecc 	beq.w	db25c <_strtod_l+0xbc>
   db4c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db4c6:	781b      	ldrb	r3, [r3, #0]
   db4c8:	2b28      	cmp	r3, #40	; 0x28
   db4ca:	d12d      	bne.n	db528 <_strtod_l+0x388>
   db4cc:	4999      	ldr	r1, [pc, #612]	; (db734 <_strtod_l+0x594>)
   db4ce:	aa20      	add	r2, sp, #128	; 0x80
   db4d0:	a81d      	add	r0, sp, #116	; 0x74
   db4d2:	f001 f823 	bl	dc51c <__hexnan>
   db4d6:	2805      	cmp	r0, #5
   db4d8:	d126      	bne.n	db528 <_strtod_l+0x388>
   db4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
   db4dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   db4e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db4e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db4e8:	e69c      	b.n	db224 <_strtod_l+0x84>
   db4ea:	210a      	movs	r1, #10
   db4ec:	fb01 3e0e 	mla	lr, r1, lr, r3
   db4f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db4f4:	e7b9      	b.n	db46a <_strtod_l+0x2ca>
   db4f6:	2b6e      	cmp	r3, #110	; 0x6e
   db4f8:	e7db      	b.n	db4b2 <_strtod_l+0x312>
   db4fa:	498f      	ldr	r1, [pc, #572]	; (db738 <_strtod_l+0x598>)
   db4fc:	a81d      	add	r0, sp, #116	; 0x74
   db4fe:	f000 fff9 	bl	dc4f4 <__match>
   db502:	2800      	cmp	r0, #0
   db504:	f43f aeaa 	beq.w	db25c <_strtod_l+0xbc>
   db508:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db50a:	498c      	ldr	r1, [pc, #560]	; (db73c <_strtod_l+0x59c>)
   db50c:	3b01      	subs	r3, #1
   db50e:	a81d      	add	r0, sp, #116	; 0x74
   db510:	931d      	str	r3, [sp, #116]	; 0x74
   db512:	f000 ffef 	bl	dc4f4 <__match>
   db516:	b910      	cbnz	r0, db51e <_strtod_l+0x37e>
   db518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db51a:	3301      	adds	r3, #1
   db51c:	931d      	str	r3, [sp, #116]	; 0x74
   db51e:	f8df b22c 	ldr.w	fp, [pc, #556]	; db74c <_strtod_l+0x5ac>
   db522:	f04f 0a00 	mov.w	sl, #0
   db526:	e67d      	b.n	db224 <_strtod_l+0x84>
   db528:	4885      	ldr	r0, [pc, #532]	; (db740 <_strtod_l+0x5a0>)
   db52a:	f001 fcf9 	bl	dcf20 <nan>
   db52e:	ed8d 0b04 	vstr	d0, [sp, #16]
   db532:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   db536:	e675      	b.n	db224 <_strtod_l+0x84>
   db538:	9b07      	ldr	r3, [sp, #28]
   db53a:	9809      	ldr	r0, [sp, #36]	; 0x24
   db53c:	1af3      	subs	r3, r6, r3
   db53e:	2f00      	cmp	r7, #0
   db540:	bf08      	it	eq
   db542:	462f      	moveq	r7, r5
   db544:	2d10      	cmp	r5, #16
   db546:	9308      	str	r3, [sp, #32]
   db548:	46a8      	mov	r8, r5
   db54a:	bfa8      	it	ge
   db54c:	f04f 0810 	movge.w	r8, #16
   db550:	f7fe ffbe 	bl	da4d0 <__aeabi_ui2d>
   db554:	2d09      	cmp	r5, #9
   db556:	4682      	mov	sl, r0
   db558:	468b      	mov	fp, r1
   db55a:	dd13      	ble.n	db584 <_strtod_l+0x3e4>
   db55c:	4b79      	ldr	r3, [pc, #484]	; (db744 <_strtod_l+0x5a4>)
   db55e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   db562:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db566:	f7ff f82d 	bl	da5c4 <__aeabi_dmul>
   db56a:	4682      	mov	sl, r0
   db56c:	4648      	mov	r0, r9
   db56e:	468b      	mov	fp, r1
   db570:	f7fe ffae 	bl	da4d0 <__aeabi_ui2d>
   db574:	4602      	mov	r2, r0
   db576:	460b      	mov	r3, r1
   db578:	4650      	mov	r0, sl
   db57a:	4659      	mov	r1, fp
   db57c:	f7fe fe6c 	bl	da258 <__adddf3>
   db580:	4682      	mov	sl, r0
   db582:	468b      	mov	fp, r1
   db584:	2d0f      	cmp	r5, #15
   db586:	dc38      	bgt.n	db5fa <_strtod_l+0x45a>
   db588:	9b08      	ldr	r3, [sp, #32]
   db58a:	2b00      	cmp	r3, #0
   db58c:	f43f ae4a 	beq.w	db224 <_strtod_l+0x84>
   db590:	dd24      	ble.n	db5dc <_strtod_l+0x43c>
   db592:	2b16      	cmp	r3, #22
   db594:	dc0b      	bgt.n	db5ae <_strtod_l+0x40e>
   db596:	4d6b      	ldr	r5, [pc, #428]	; (db744 <_strtod_l+0x5a4>)
   db598:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   db59c:	e9d5 0100 	ldrd	r0, r1, [r5]
   db5a0:	4652      	mov	r2, sl
   db5a2:	465b      	mov	r3, fp
   db5a4:	f7ff f80e 	bl	da5c4 <__aeabi_dmul>
   db5a8:	4682      	mov	sl, r0
   db5aa:	468b      	mov	fp, r1
   db5ac:	e63a      	b.n	db224 <_strtod_l+0x84>
   db5ae:	9a08      	ldr	r2, [sp, #32]
   db5b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db5b4:	4293      	cmp	r3, r2
   db5b6:	db20      	blt.n	db5fa <_strtod_l+0x45a>
   db5b8:	4c62      	ldr	r4, [pc, #392]	; (db744 <_strtod_l+0x5a4>)
   db5ba:	f1c5 050f 	rsb	r5, r5, #15
   db5be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db5c2:	4652      	mov	r2, sl
   db5c4:	465b      	mov	r3, fp
   db5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   db5ca:	f7fe fffb 	bl	da5c4 <__aeabi_dmul>
   db5ce:	9b08      	ldr	r3, [sp, #32]
   db5d0:	1b5d      	subs	r5, r3, r5
   db5d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db5d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   db5da:	e7e3      	b.n	db5a4 <_strtod_l+0x404>
   db5dc:	9b08      	ldr	r3, [sp, #32]
   db5de:	3316      	adds	r3, #22
   db5e0:	db0b      	blt.n	db5fa <_strtod_l+0x45a>
   db5e2:	9b07      	ldr	r3, [sp, #28]
   db5e4:	4a57      	ldr	r2, [pc, #348]	; (db744 <_strtod_l+0x5a4>)
   db5e6:	1b9e      	subs	r6, r3, r6
   db5e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   db5ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   db5f0:	4650      	mov	r0, sl
   db5f2:	4659      	mov	r1, fp
   db5f4:	f7ff f910 	bl	da818 <__aeabi_ddiv>
   db5f8:	e7d6      	b.n	db5a8 <_strtod_l+0x408>
   db5fa:	9b08      	ldr	r3, [sp, #32]
   db5fc:	eba5 0808 	sub.w	r8, r5, r8
   db600:	4498      	add	r8, r3
   db602:	f1b8 0f00 	cmp.w	r8, #0
   db606:	dd71      	ble.n	db6ec <_strtod_l+0x54c>
   db608:	f018 030f 	ands.w	r3, r8, #15
   db60c:	d00a      	beq.n	db624 <_strtod_l+0x484>
   db60e:	494d      	ldr	r1, [pc, #308]	; (db744 <_strtod_l+0x5a4>)
   db610:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   db614:	4652      	mov	r2, sl
   db616:	465b      	mov	r3, fp
   db618:	e9d1 0100 	ldrd	r0, r1, [r1]
   db61c:	f7fe ffd2 	bl	da5c4 <__aeabi_dmul>
   db620:	4682      	mov	sl, r0
   db622:	468b      	mov	fp, r1
   db624:	f038 080f 	bics.w	r8, r8, #15
   db628:	d04d      	beq.n	db6c6 <_strtod_l+0x526>
   db62a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   db62e:	dd22      	ble.n	db676 <_strtod_l+0x4d6>
   db630:	2500      	movs	r5, #0
   db632:	462e      	mov	r6, r5
   db634:	9509      	str	r5, [sp, #36]	; 0x24
   db636:	9507      	str	r5, [sp, #28]
   db638:	2322      	movs	r3, #34	; 0x22
   db63a:	f8df b110 	ldr.w	fp, [pc, #272]	; db74c <_strtod_l+0x5ac>
   db63e:	6023      	str	r3, [r4, #0]
   db640:	f04f 0a00 	mov.w	sl, #0
   db644:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db646:	2b00      	cmp	r3, #0
   db648:	f43f adec 	beq.w	db224 <_strtod_l+0x84>
   db64c:	991e      	ldr	r1, [sp, #120]	; 0x78
   db64e:	4620      	mov	r0, r4
   db650:	f001 f849 	bl	dc6e6 <_Bfree>
   db654:	9907      	ldr	r1, [sp, #28]
   db656:	4620      	mov	r0, r4
   db658:	f001 f845 	bl	dc6e6 <_Bfree>
   db65c:	4631      	mov	r1, r6
   db65e:	4620      	mov	r0, r4
   db660:	f001 f841 	bl	dc6e6 <_Bfree>
   db664:	9909      	ldr	r1, [sp, #36]	; 0x24
   db666:	4620      	mov	r0, r4
   db668:	f001 f83d 	bl	dc6e6 <_Bfree>
   db66c:	4629      	mov	r1, r5
   db66e:	4620      	mov	r0, r4
   db670:	f001 f839 	bl	dc6e6 <_Bfree>
   db674:	e5d6      	b.n	db224 <_strtod_l+0x84>
   db676:	2300      	movs	r3, #0
   db678:	ea4f 1828 	mov.w	r8, r8, asr #4
   db67c:	4650      	mov	r0, sl
   db67e:	4659      	mov	r1, fp
   db680:	4699      	mov	r9, r3
   db682:	f1b8 0f01 	cmp.w	r8, #1
   db686:	dc21      	bgt.n	db6cc <_strtod_l+0x52c>
   db688:	b10b      	cbz	r3, db68e <_strtod_l+0x4ee>
   db68a:	4682      	mov	sl, r0
   db68c:	468b      	mov	fp, r1
   db68e:	4b2e      	ldr	r3, [pc, #184]	; (db748 <_strtod_l+0x5a8>)
   db690:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db694:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   db698:	4652      	mov	r2, sl
   db69a:	465b      	mov	r3, fp
   db69c:	e9d9 0100 	ldrd	r0, r1, [r9]
   db6a0:	f7fe ff90 	bl	da5c4 <__aeabi_dmul>
   db6a4:	4b29      	ldr	r3, [pc, #164]	; (db74c <_strtod_l+0x5ac>)
   db6a6:	460a      	mov	r2, r1
   db6a8:	400b      	ands	r3, r1
   db6aa:	4929      	ldr	r1, [pc, #164]	; (db750 <_strtod_l+0x5b0>)
   db6ac:	428b      	cmp	r3, r1
   db6ae:	4682      	mov	sl, r0
   db6b0:	d8be      	bhi.n	db630 <_strtod_l+0x490>
   db6b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db6b6:	428b      	cmp	r3, r1
   db6b8:	bf86      	itte	hi
   db6ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; db754 <_strtod_l+0x5b4>
   db6be:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db6c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db6c6:	2300      	movs	r3, #0
   db6c8:	9304      	str	r3, [sp, #16]
   db6ca:	e081      	b.n	db7d0 <_strtod_l+0x630>
   db6cc:	f018 0f01 	tst.w	r8, #1
   db6d0:	d007      	beq.n	db6e2 <_strtod_l+0x542>
   db6d2:	4b1d      	ldr	r3, [pc, #116]	; (db748 <_strtod_l+0x5a8>)
   db6d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   db6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   db6dc:	f7fe ff72 	bl	da5c4 <__aeabi_dmul>
   db6e0:	2301      	movs	r3, #1
   db6e2:	f109 0901 	add.w	r9, r9, #1
   db6e6:	ea4f 0868 	mov.w	r8, r8, asr #1
   db6ea:	e7ca      	b.n	db682 <_strtod_l+0x4e2>
   db6ec:	d0eb      	beq.n	db6c6 <_strtod_l+0x526>
   db6ee:	f1c8 0800 	rsb	r8, r8, #0
   db6f2:	f018 020f 	ands.w	r2, r8, #15
   db6f6:	d00a      	beq.n	db70e <_strtod_l+0x56e>
   db6f8:	4b12      	ldr	r3, [pc, #72]	; (db744 <_strtod_l+0x5a4>)
   db6fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db6fe:	4650      	mov	r0, sl
   db700:	4659      	mov	r1, fp
   db702:	e9d3 2300 	ldrd	r2, r3, [r3]
   db706:	f7ff f887 	bl	da818 <__aeabi_ddiv>
   db70a:	4682      	mov	sl, r0
   db70c:	468b      	mov	fp, r1
   db70e:	ea5f 1828 	movs.w	r8, r8, asr #4
   db712:	d0d8      	beq.n	db6c6 <_strtod_l+0x526>
   db714:	f1b8 0f1f 	cmp.w	r8, #31
   db718:	dd1e      	ble.n	db758 <_strtod_l+0x5b8>
   db71a:	2500      	movs	r5, #0
   db71c:	462e      	mov	r6, r5
   db71e:	9509      	str	r5, [sp, #36]	; 0x24
   db720:	9507      	str	r5, [sp, #28]
   db722:	2322      	movs	r3, #34	; 0x22
   db724:	f04f 0a00 	mov.w	sl, #0
   db728:	f04f 0b00 	mov.w	fp, #0
   db72c:	6023      	str	r3, [r4, #0]
   db72e:	e789      	b.n	db644 <_strtod_l+0x4a4>
   db730:	000ddf91 	.word	0x000ddf91
   db734:	000de0a4 	.word	0x000de0a4
   db738:	000ddf95 	.word	0x000ddf95
   db73c:	000de08a 	.word	0x000de08a
   db740:	000de050 	.word	0x000de050
   db744:	000de220 	.word	0x000de220
   db748:	000de1f8 	.word	0x000de1f8
   db74c:	7ff00000 	.word	0x7ff00000
   db750:	7ca00000 	.word	0x7ca00000
   db754:	7fefffff 	.word	0x7fefffff
   db758:	f018 0310 	ands.w	r3, r8, #16
   db75c:	bf18      	it	ne
   db75e:	236a      	movne	r3, #106	; 0x6a
   db760:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dbb18 <_strtod_l+0x978>
   db764:	9304      	str	r3, [sp, #16]
   db766:	4650      	mov	r0, sl
   db768:	4659      	mov	r1, fp
   db76a:	2300      	movs	r3, #0
   db76c:	f018 0f01 	tst.w	r8, #1
   db770:	d004      	beq.n	db77c <_strtod_l+0x5dc>
   db772:	e9d9 2300 	ldrd	r2, r3, [r9]
   db776:	f7fe ff25 	bl	da5c4 <__aeabi_dmul>
   db77a:	2301      	movs	r3, #1
   db77c:	ea5f 0868 	movs.w	r8, r8, asr #1
   db780:	f109 0908 	add.w	r9, r9, #8
   db784:	d1f2      	bne.n	db76c <_strtod_l+0x5cc>
   db786:	b10b      	cbz	r3, db78c <_strtod_l+0x5ec>
   db788:	4682      	mov	sl, r0
   db78a:	468b      	mov	fp, r1
   db78c:	9b04      	ldr	r3, [sp, #16]
   db78e:	b1bb      	cbz	r3, db7c0 <_strtod_l+0x620>
   db790:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db794:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db798:	2b00      	cmp	r3, #0
   db79a:	4659      	mov	r1, fp
   db79c:	dd10      	ble.n	db7c0 <_strtod_l+0x620>
   db79e:	2b1f      	cmp	r3, #31
   db7a0:	f340 8128 	ble.w	db9f4 <_strtod_l+0x854>
   db7a4:	2b34      	cmp	r3, #52	; 0x34
   db7a6:	bfde      	ittt	le
   db7a8:	3b20      	suble	r3, #32
   db7aa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db7ae:	fa02 f303 	lslle.w	r3, r2, r3
   db7b2:	f04f 0a00 	mov.w	sl, #0
   db7b6:	bfcc      	ite	gt
   db7b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db7bc:	ea03 0b01 	andle.w	fp, r3, r1
   db7c0:	2200      	movs	r2, #0
   db7c2:	2300      	movs	r3, #0
   db7c4:	4650      	mov	r0, sl
   db7c6:	4659      	mov	r1, fp
   db7c8:	f7ff f964 	bl	daa94 <__aeabi_dcmpeq>
   db7cc:	2800      	cmp	r0, #0
   db7ce:	d1a4      	bne.n	db71a <_strtod_l+0x57a>
   db7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db7d2:	9300      	str	r3, [sp, #0]
   db7d4:	990a      	ldr	r1, [sp, #40]	; 0x28
   db7d6:	462b      	mov	r3, r5
   db7d8:	463a      	mov	r2, r7
   db7da:	4620      	mov	r0, r4
   db7dc:	f000 ffd8 	bl	dc790 <__s2b>
   db7e0:	9009      	str	r0, [sp, #36]	; 0x24
   db7e2:	2800      	cmp	r0, #0
   db7e4:	f43f af24 	beq.w	db630 <_strtod_l+0x490>
   db7e8:	9b07      	ldr	r3, [sp, #28]
   db7ea:	1b9e      	subs	r6, r3, r6
   db7ec:	9b08      	ldr	r3, [sp, #32]
   db7ee:	2b00      	cmp	r3, #0
   db7f0:	bfb4      	ite	lt
   db7f2:	4633      	movlt	r3, r6
   db7f4:	2300      	movge	r3, #0
   db7f6:	9310      	str	r3, [sp, #64]	; 0x40
   db7f8:	9b08      	ldr	r3, [sp, #32]
   db7fa:	2500      	movs	r5, #0
   db7fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   db800:	9318      	str	r3, [sp, #96]	; 0x60
   db802:	462e      	mov	r6, r5
   db804:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db806:	4620      	mov	r0, r4
   db808:	6859      	ldr	r1, [r3, #4]
   db80a:	f000 ff38 	bl	dc67e <_Balloc>
   db80e:	9007      	str	r0, [sp, #28]
   db810:	2800      	cmp	r0, #0
   db812:	f43f af11 	beq.w	db638 <_strtod_l+0x498>
   db816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db818:	691a      	ldr	r2, [r3, #16]
   db81a:	3202      	adds	r2, #2
   db81c:	f103 010c 	add.w	r1, r3, #12
   db820:	0092      	lsls	r2, r2, #2
   db822:	300c      	adds	r0, #12
   db824:	f7ff fbf1 	bl	db00a <memcpy>
   db828:	ec4b ab10 	vmov	d0, sl, fp
   db82c:	aa20      	add	r2, sp, #128	; 0x80
   db82e:	a91f      	add	r1, sp, #124	; 0x7c
   db830:	4620      	mov	r0, r4
   db832:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   db836:	f001 fa9b 	bl	dcd70 <__d2b>
   db83a:	901e      	str	r0, [sp, #120]	; 0x78
   db83c:	2800      	cmp	r0, #0
   db83e:	f43f aefb 	beq.w	db638 <_strtod_l+0x498>
   db842:	2101      	movs	r1, #1
   db844:	4620      	mov	r0, r4
   db846:	f001 f831 	bl	dc8ac <__i2b>
   db84a:	4606      	mov	r6, r0
   db84c:	2800      	cmp	r0, #0
   db84e:	f43f aef3 	beq.w	db638 <_strtod_l+0x498>
   db852:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db854:	9904      	ldr	r1, [sp, #16]
   db856:	2b00      	cmp	r3, #0
   db858:	bfab      	itete	ge
   db85a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db85c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db85e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db860:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db864:	bfac      	ite	ge
   db866:	eb03 0902 	addge.w	r9, r3, r2
   db86a:	1ad7      	sublt	r7, r2, r3
   db86c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db86e:	eba3 0801 	sub.w	r8, r3, r1
   db872:	4490      	add	r8, r2
   db874:	4ba3      	ldr	r3, [pc, #652]	; (dbb04 <_strtod_l+0x964>)
   db876:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db87a:	4598      	cmp	r8, r3
   db87c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db880:	f280 80cc 	bge.w	dba1c <_strtod_l+0x87c>
   db884:	eba3 0308 	sub.w	r3, r3, r8
   db888:	2b1f      	cmp	r3, #31
   db88a:	eba2 0203 	sub.w	r2, r2, r3
   db88e:	f04f 0101 	mov.w	r1, #1
   db892:	f300 80b6 	bgt.w	dba02 <_strtod_l+0x862>
   db896:	fa01 f303 	lsl.w	r3, r1, r3
   db89a:	9311      	str	r3, [sp, #68]	; 0x44
   db89c:	2300      	movs	r3, #0
   db89e:	930c      	str	r3, [sp, #48]	; 0x30
   db8a0:	eb09 0802 	add.w	r8, r9, r2
   db8a4:	9b04      	ldr	r3, [sp, #16]
   db8a6:	45c1      	cmp	r9, r8
   db8a8:	4417      	add	r7, r2
   db8aa:	441f      	add	r7, r3
   db8ac:	464b      	mov	r3, r9
   db8ae:	bfa8      	it	ge
   db8b0:	4643      	movge	r3, r8
   db8b2:	42bb      	cmp	r3, r7
   db8b4:	bfa8      	it	ge
   db8b6:	463b      	movge	r3, r7
   db8b8:	2b00      	cmp	r3, #0
   db8ba:	bfc2      	ittt	gt
   db8bc:	eba8 0803 	subgt.w	r8, r8, r3
   db8c0:	1aff      	subgt	r7, r7, r3
   db8c2:	eba9 0903 	subgt.w	r9, r9, r3
   db8c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db8c8:	2b00      	cmp	r3, #0
   db8ca:	dd17      	ble.n	db8fc <_strtod_l+0x75c>
   db8cc:	4631      	mov	r1, r6
   db8ce:	461a      	mov	r2, r3
   db8d0:	4620      	mov	r0, r4
   db8d2:	f001 f891 	bl	dc9f8 <__pow5mult>
   db8d6:	4606      	mov	r6, r0
   db8d8:	2800      	cmp	r0, #0
   db8da:	f43f aead 	beq.w	db638 <_strtod_l+0x498>
   db8de:	4601      	mov	r1, r0
   db8e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db8e2:	4620      	mov	r0, r4
   db8e4:	f000 ffeb 	bl	dc8be <__multiply>
   db8e8:	900f      	str	r0, [sp, #60]	; 0x3c
   db8ea:	2800      	cmp	r0, #0
   db8ec:	f43f aea4 	beq.w	db638 <_strtod_l+0x498>
   db8f0:	991e      	ldr	r1, [sp, #120]	; 0x78
   db8f2:	4620      	mov	r0, r4
   db8f4:	f000 fef7 	bl	dc6e6 <_Bfree>
   db8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db8fa:	931e      	str	r3, [sp, #120]	; 0x78
   db8fc:	f1b8 0f00 	cmp.w	r8, #0
   db900:	f300 8091 	bgt.w	dba26 <_strtod_l+0x886>
   db904:	9b08      	ldr	r3, [sp, #32]
   db906:	2b00      	cmp	r3, #0
   db908:	dd08      	ble.n	db91c <_strtod_l+0x77c>
   db90a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db90c:	9907      	ldr	r1, [sp, #28]
   db90e:	4620      	mov	r0, r4
   db910:	f001 f872 	bl	dc9f8 <__pow5mult>
   db914:	9007      	str	r0, [sp, #28]
   db916:	2800      	cmp	r0, #0
   db918:	f43f ae8e 	beq.w	db638 <_strtod_l+0x498>
   db91c:	2f00      	cmp	r7, #0
   db91e:	dd08      	ble.n	db932 <_strtod_l+0x792>
   db920:	9907      	ldr	r1, [sp, #28]
   db922:	463a      	mov	r2, r7
   db924:	4620      	mov	r0, r4
   db926:	f001 f8b5 	bl	dca94 <__lshift>
   db92a:	9007      	str	r0, [sp, #28]
   db92c:	2800      	cmp	r0, #0
   db92e:	f43f ae83 	beq.w	db638 <_strtod_l+0x498>
   db932:	f1b9 0f00 	cmp.w	r9, #0
   db936:	dd08      	ble.n	db94a <_strtod_l+0x7aa>
   db938:	4631      	mov	r1, r6
   db93a:	464a      	mov	r2, r9
   db93c:	4620      	mov	r0, r4
   db93e:	f001 f8a9 	bl	dca94 <__lshift>
   db942:	4606      	mov	r6, r0
   db944:	2800      	cmp	r0, #0
   db946:	f43f ae77 	beq.w	db638 <_strtod_l+0x498>
   db94a:	9a07      	ldr	r2, [sp, #28]
   db94c:	991e      	ldr	r1, [sp, #120]	; 0x78
   db94e:	4620      	mov	r0, r4
   db950:	f001 f91b 	bl	dcb8a <__mdiff>
   db954:	4605      	mov	r5, r0
   db956:	2800      	cmp	r0, #0
   db958:	f43f ae6e 	beq.w	db638 <_strtod_l+0x498>
   db95c:	68c3      	ldr	r3, [r0, #12]
   db95e:	930f      	str	r3, [sp, #60]	; 0x3c
   db960:	2300      	movs	r3, #0
   db962:	60c3      	str	r3, [r0, #12]
   db964:	4631      	mov	r1, r6
   db966:	f001 f8f4 	bl	dcb52 <__mcmp>
   db96a:	2800      	cmp	r0, #0
   db96c:	da65      	bge.n	dba3a <_strtod_l+0x89a>
   db96e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db970:	ea53 030a 	orrs.w	r3, r3, sl
   db974:	f040 8087 	bne.w	dba86 <_strtod_l+0x8e6>
   db978:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db97c:	2b00      	cmp	r3, #0
   db97e:	f040 8082 	bne.w	dba86 <_strtod_l+0x8e6>
   db982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db986:	0d1b      	lsrs	r3, r3, #20
   db988:	051b      	lsls	r3, r3, #20
   db98a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db98e:	d97a      	bls.n	dba86 <_strtod_l+0x8e6>
   db990:	696b      	ldr	r3, [r5, #20]
   db992:	b913      	cbnz	r3, db99a <_strtod_l+0x7fa>
   db994:	692b      	ldr	r3, [r5, #16]
   db996:	2b01      	cmp	r3, #1
   db998:	dd75      	ble.n	dba86 <_strtod_l+0x8e6>
   db99a:	4629      	mov	r1, r5
   db99c:	2201      	movs	r2, #1
   db99e:	4620      	mov	r0, r4
   db9a0:	f001 f878 	bl	dca94 <__lshift>
   db9a4:	4631      	mov	r1, r6
   db9a6:	4605      	mov	r5, r0
   db9a8:	f001 f8d3 	bl	dcb52 <__mcmp>
   db9ac:	2800      	cmp	r0, #0
   db9ae:	dd6a      	ble.n	dba86 <_strtod_l+0x8e6>
   db9b0:	9904      	ldr	r1, [sp, #16]
   db9b2:	4a55      	ldr	r2, [pc, #340]	; (dbb08 <_strtod_l+0x968>)
   db9b4:	465b      	mov	r3, fp
   db9b6:	2900      	cmp	r1, #0
   db9b8:	f000 8085 	beq.w	dbac6 <_strtod_l+0x926>
   db9bc:	ea02 010b 	and.w	r1, r2, fp
   db9c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db9c4:	dc7f      	bgt.n	dbac6 <_strtod_l+0x926>
   db9c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db9ca:	f77f aeaa 	ble.w	db722 <_strtod_l+0x582>
   db9ce:	4a4f      	ldr	r2, [pc, #316]	; (dbb0c <_strtod_l+0x96c>)
   db9d0:	2300      	movs	r3, #0
   db9d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db9d6:	4650      	mov	r0, sl
   db9d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db9dc:	4659      	mov	r1, fp
   db9de:	f7fe fdf1 	bl	da5c4 <__aeabi_dmul>
   db9e2:	460b      	mov	r3, r1
   db9e4:	4303      	orrs	r3, r0
   db9e6:	bf08      	it	eq
   db9e8:	2322      	moveq	r3, #34	; 0x22
   db9ea:	4682      	mov	sl, r0
   db9ec:	468b      	mov	fp, r1
   db9ee:	bf08      	it	eq
   db9f0:	6023      	streq	r3, [r4, #0]
   db9f2:	e62b      	b.n	db64c <_strtod_l+0x4ac>
   db9f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db9f8:	fa02 f303 	lsl.w	r3, r2, r3
   db9fc:	ea03 0a0a 	and.w	sl, r3, sl
   dba00:	e6de      	b.n	db7c0 <_strtod_l+0x620>
   dba02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dba06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dba0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dba0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dba12:	fa01 f308 	lsl.w	r3, r1, r8
   dba16:	930c      	str	r3, [sp, #48]	; 0x30
   dba18:	9111      	str	r1, [sp, #68]	; 0x44
   dba1a:	e741      	b.n	db8a0 <_strtod_l+0x700>
   dba1c:	2300      	movs	r3, #0
   dba1e:	930c      	str	r3, [sp, #48]	; 0x30
   dba20:	2301      	movs	r3, #1
   dba22:	9311      	str	r3, [sp, #68]	; 0x44
   dba24:	e73c      	b.n	db8a0 <_strtod_l+0x700>
   dba26:	991e      	ldr	r1, [sp, #120]	; 0x78
   dba28:	4642      	mov	r2, r8
   dba2a:	4620      	mov	r0, r4
   dba2c:	f001 f832 	bl	dca94 <__lshift>
   dba30:	901e      	str	r0, [sp, #120]	; 0x78
   dba32:	2800      	cmp	r0, #0
   dba34:	f47f af66 	bne.w	db904 <_strtod_l+0x764>
   dba38:	e5fe      	b.n	db638 <_strtod_l+0x498>
   dba3a:	465f      	mov	r7, fp
   dba3c:	d16e      	bne.n	dbb1c <_strtod_l+0x97c>
   dba3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dba40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dba44:	b342      	cbz	r2, dba98 <_strtod_l+0x8f8>
   dba46:	4a32      	ldr	r2, [pc, #200]	; (dbb10 <_strtod_l+0x970>)
   dba48:	4293      	cmp	r3, r2
   dba4a:	d128      	bne.n	dba9e <_strtod_l+0x8fe>
   dba4c:	9b04      	ldr	r3, [sp, #16]
   dba4e:	4650      	mov	r0, sl
   dba50:	b1eb      	cbz	r3, dba8e <_strtod_l+0x8ee>
   dba52:	4a2d      	ldr	r2, [pc, #180]	; (dbb08 <_strtod_l+0x968>)
   dba54:	403a      	ands	r2, r7
   dba56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dba5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dba5e:	d819      	bhi.n	dba94 <_strtod_l+0x8f4>
   dba60:	0d12      	lsrs	r2, r2, #20
   dba62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dba66:	fa01 f303 	lsl.w	r3, r1, r3
   dba6a:	4298      	cmp	r0, r3
   dba6c:	d117      	bne.n	dba9e <_strtod_l+0x8fe>
   dba6e:	4b29      	ldr	r3, [pc, #164]	; (dbb14 <_strtod_l+0x974>)
   dba70:	429f      	cmp	r7, r3
   dba72:	d102      	bne.n	dba7a <_strtod_l+0x8da>
   dba74:	3001      	adds	r0, #1
   dba76:	f43f addf 	beq.w	db638 <_strtod_l+0x498>
   dba7a:	4b23      	ldr	r3, [pc, #140]	; (dbb08 <_strtod_l+0x968>)
   dba7c:	403b      	ands	r3, r7
   dba7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dba82:	f04f 0a00 	mov.w	sl, #0
   dba86:	9b04      	ldr	r3, [sp, #16]
   dba88:	2b00      	cmp	r3, #0
   dba8a:	d1a0      	bne.n	db9ce <_strtod_l+0x82e>
   dba8c:	e5de      	b.n	db64c <_strtod_l+0x4ac>
   dba8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dba92:	e7ea      	b.n	dba6a <_strtod_l+0x8ca>
   dba94:	460b      	mov	r3, r1
   dba96:	e7e8      	b.n	dba6a <_strtod_l+0x8ca>
   dba98:	ea53 030a 	orrs.w	r3, r3, sl
   dba9c:	d088      	beq.n	db9b0 <_strtod_l+0x810>
   dba9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dbaa0:	b1db      	cbz	r3, dbada <_strtod_l+0x93a>
   dbaa2:	423b      	tst	r3, r7
   dbaa4:	d0ef      	beq.n	dba86 <_strtod_l+0x8e6>
   dbaa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbaa8:	9a04      	ldr	r2, [sp, #16]
   dbaaa:	4650      	mov	r0, sl
   dbaac:	4659      	mov	r1, fp
   dbaae:	b1c3      	cbz	r3, dbae2 <_strtod_l+0x942>
   dbab0:	f7ff fb59 	bl	db166 <sulp>
   dbab4:	4602      	mov	r2, r0
   dbab6:	460b      	mov	r3, r1
   dbab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dbabc:	f7fe fbcc 	bl	da258 <__adddf3>
   dbac0:	4682      	mov	sl, r0
   dbac2:	468b      	mov	fp, r1
   dbac4:	e7df      	b.n	dba86 <_strtod_l+0x8e6>
   dbac6:	4013      	ands	r3, r2
   dbac8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dbacc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dbad0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dbad4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbad8:	e7d5      	b.n	dba86 <_strtod_l+0x8e6>
   dbada:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dbadc:	ea13 0f0a 	tst.w	r3, sl
   dbae0:	e7e0      	b.n	dbaa4 <_strtod_l+0x904>
   dbae2:	f7ff fb40 	bl	db166 <sulp>
   dbae6:	4602      	mov	r2, r0
   dbae8:	460b      	mov	r3, r1
   dbaea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dbaee:	f7fe fbb1 	bl	da254 <__aeabi_dsub>
   dbaf2:	2200      	movs	r2, #0
   dbaf4:	2300      	movs	r3, #0
   dbaf6:	4682      	mov	sl, r0
   dbaf8:	468b      	mov	fp, r1
   dbafa:	f7fe ffcb 	bl	daa94 <__aeabi_dcmpeq>
   dbafe:	2800      	cmp	r0, #0
   dbb00:	d0c1      	beq.n	dba86 <_strtod_l+0x8e6>
   dbb02:	e60e      	b.n	db722 <_strtod_l+0x582>
   dbb04:	fffffc02 	.word	0xfffffc02
   dbb08:	7ff00000 	.word	0x7ff00000
   dbb0c:	39500000 	.word	0x39500000
   dbb10:	000fffff 	.word	0x000fffff
   dbb14:	7fefffff 	.word	0x7fefffff
   dbb18:	000de0b8 	.word	0x000de0b8
   dbb1c:	4631      	mov	r1, r6
   dbb1e:	4628      	mov	r0, r5
   dbb20:	f001 f976 	bl	dce10 <__ratio>
   dbb24:	ec59 8b10 	vmov	r8, r9, d0
   dbb28:	ee10 0a10 	vmov	r0, s0
   dbb2c:	2200      	movs	r2, #0
   dbb2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dbb32:	4649      	mov	r1, r9
   dbb34:	f7fe ffc2 	bl	daabc <__aeabi_dcmple>
   dbb38:	2800      	cmp	r0, #0
   dbb3a:	d07c      	beq.n	dbc36 <_strtod_l+0xa96>
   dbb3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbb3e:	2b00      	cmp	r3, #0
   dbb40:	d04c      	beq.n	dbbdc <_strtod_l+0xa3c>
   dbb42:	4b95      	ldr	r3, [pc, #596]	; (dbd98 <_strtod_l+0xbf8>)
   dbb44:	2200      	movs	r2, #0
   dbb46:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dbb4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; dbd98 <_strtod_l+0xbf8>
   dbb4e:	f04f 0800 	mov.w	r8, #0
   dbb52:	4b92      	ldr	r3, [pc, #584]	; (dbd9c <_strtod_l+0xbfc>)
   dbb54:	403b      	ands	r3, r7
   dbb56:	9311      	str	r3, [sp, #68]	; 0x44
   dbb58:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbb5a:	4b91      	ldr	r3, [pc, #580]	; (dbda0 <_strtod_l+0xc00>)
   dbb5c:	429a      	cmp	r2, r3
   dbb5e:	f040 80b2 	bne.w	dbcc6 <_strtod_l+0xb26>
   dbb62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dbb66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbb6a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dbb6e:	ec4b ab10 	vmov	d0, sl, fp
   dbb72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dbb76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dbb7a:	f001 f87d 	bl	dcc78 <__ulp>
   dbb7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbb82:	ec53 2b10 	vmov	r2, r3, d0
   dbb86:	f7fe fd1d 	bl	da5c4 <__aeabi_dmul>
   dbb8a:	4652      	mov	r2, sl
   dbb8c:	465b      	mov	r3, fp
   dbb8e:	f7fe fb63 	bl	da258 <__adddf3>
   dbb92:	460b      	mov	r3, r1
   dbb94:	4981      	ldr	r1, [pc, #516]	; (dbd9c <_strtod_l+0xbfc>)
   dbb96:	4a83      	ldr	r2, [pc, #524]	; (dbda4 <_strtod_l+0xc04>)
   dbb98:	4019      	ands	r1, r3
   dbb9a:	4291      	cmp	r1, r2
   dbb9c:	4682      	mov	sl, r0
   dbb9e:	d95e      	bls.n	dbc5e <_strtod_l+0xabe>
   dbba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dbba2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dbba6:	4293      	cmp	r3, r2
   dbba8:	d103      	bne.n	dbbb2 <_strtod_l+0xa12>
   dbbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbbac:	3301      	adds	r3, #1
   dbbae:	f43f ad43 	beq.w	db638 <_strtod_l+0x498>
   dbbb2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dbdb0 <_strtod_l+0xc10>
   dbbb6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbbba:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbbbc:	4620      	mov	r0, r4
   dbbbe:	f000 fd92 	bl	dc6e6 <_Bfree>
   dbbc2:	9907      	ldr	r1, [sp, #28]
   dbbc4:	4620      	mov	r0, r4
   dbbc6:	f000 fd8e 	bl	dc6e6 <_Bfree>
   dbbca:	4631      	mov	r1, r6
   dbbcc:	4620      	mov	r0, r4
   dbbce:	f000 fd8a 	bl	dc6e6 <_Bfree>
   dbbd2:	4629      	mov	r1, r5
   dbbd4:	4620      	mov	r0, r4
   dbbd6:	f000 fd86 	bl	dc6e6 <_Bfree>
   dbbda:	e613      	b.n	db804 <_strtod_l+0x664>
   dbbdc:	f1ba 0f00 	cmp.w	sl, #0
   dbbe0:	d11b      	bne.n	dbc1a <_strtod_l+0xa7a>
   dbbe2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbbe6:	b9f3      	cbnz	r3, dbc26 <_strtod_l+0xa86>
   dbbe8:	4b6b      	ldr	r3, [pc, #428]	; (dbd98 <_strtod_l+0xbf8>)
   dbbea:	2200      	movs	r2, #0
   dbbec:	4640      	mov	r0, r8
   dbbee:	4649      	mov	r1, r9
   dbbf0:	f7fe ff5a 	bl	daaa8 <__aeabi_dcmplt>
   dbbf4:	b9d0      	cbnz	r0, dbc2c <_strtod_l+0xa8c>
   dbbf6:	4640      	mov	r0, r8
   dbbf8:	4649      	mov	r1, r9
   dbbfa:	4b6b      	ldr	r3, [pc, #428]	; (dbda8 <_strtod_l+0xc08>)
   dbbfc:	2200      	movs	r2, #0
   dbbfe:	f7fe fce1 	bl	da5c4 <__aeabi_dmul>
   dbc02:	4680      	mov	r8, r0
   dbc04:	4689      	mov	r9, r1
   dbc06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dbc0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dbc0e:	931b      	str	r3, [sp, #108]	; 0x6c
   dbc10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dbc14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dbc18:	e79b      	b.n	dbb52 <_strtod_l+0x9b2>
   dbc1a:	f1ba 0f01 	cmp.w	sl, #1
   dbc1e:	d102      	bne.n	dbc26 <_strtod_l+0xa86>
   dbc20:	2f00      	cmp	r7, #0
   dbc22:	f43f ad7e 	beq.w	db722 <_strtod_l+0x582>
   dbc26:	4b61      	ldr	r3, [pc, #388]	; (dbdac <_strtod_l+0xc0c>)
   dbc28:	2200      	movs	r2, #0
   dbc2a:	e78c      	b.n	dbb46 <_strtod_l+0x9a6>
   dbc2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; dbda8 <_strtod_l+0xc08>
   dbc30:	f04f 0800 	mov.w	r8, #0
   dbc34:	e7e7      	b.n	dbc06 <_strtod_l+0xa66>
   dbc36:	4b5c      	ldr	r3, [pc, #368]	; (dbda8 <_strtod_l+0xc08>)
   dbc38:	4640      	mov	r0, r8
   dbc3a:	4649      	mov	r1, r9
   dbc3c:	2200      	movs	r2, #0
   dbc3e:	f7fe fcc1 	bl	da5c4 <__aeabi_dmul>
   dbc42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbc44:	4680      	mov	r8, r0
   dbc46:	4689      	mov	r9, r1
   dbc48:	b933      	cbnz	r3, dbc58 <_strtod_l+0xab8>
   dbc4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbc4e:	9012      	str	r0, [sp, #72]	; 0x48
   dbc50:	9313      	str	r3, [sp, #76]	; 0x4c
   dbc52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dbc56:	e7dd      	b.n	dbc14 <_strtod_l+0xa74>
   dbc58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dbc5c:	e7f9      	b.n	dbc52 <_strtod_l+0xab2>
   dbc5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dbc62:	9b04      	ldr	r3, [sp, #16]
   dbc64:	2b00      	cmp	r3, #0
   dbc66:	d1a8      	bne.n	dbbba <_strtod_l+0xa1a>
   dbc68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbc6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbc6e:	0d1b      	lsrs	r3, r3, #20
   dbc70:	051b      	lsls	r3, r3, #20
   dbc72:	429a      	cmp	r2, r3
   dbc74:	d1a1      	bne.n	dbbba <_strtod_l+0xa1a>
   dbc76:	4640      	mov	r0, r8
   dbc78:	4649      	mov	r1, r9
   dbc7a:	f001 f967 	bl	dcf4c <__aeabi_d2lz>
   dbc7e:	f7fe fc73 	bl	da568 <__aeabi_l2d>
   dbc82:	4602      	mov	r2, r0
   dbc84:	460b      	mov	r3, r1
   dbc86:	4640      	mov	r0, r8
   dbc88:	4649      	mov	r1, r9
   dbc8a:	f7fe fae3 	bl	da254 <__aeabi_dsub>
   dbc8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dbc90:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbc94:	ea43 030a 	orr.w	r3, r3, sl
   dbc98:	4313      	orrs	r3, r2
   dbc9a:	4680      	mov	r8, r0
   dbc9c:	4689      	mov	r9, r1
   dbc9e:	d053      	beq.n	dbd48 <_strtod_l+0xba8>
   dbca0:	a335      	add	r3, pc, #212	; (adr r3, dbd78 <_strtod_l+0xbd8>)
   dbca2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbca6:	f7fe feff 	bl	daaa8 <__aeabi_dcmplt>
   dbcaa:	2800      	cmp	r0, #0
   dbcac:	f47f acce 	bne.w	db64c <_strtod_l+0x4ac>
   dbcb0:	a333      	add	r3, pc, #204	; (adr r3, dbd80 <_strtod_l+0xbe0>)
   dbcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbcb6:	4640      	mov	r0, r8
   dbcb8:	4649      	mov	r1, r9
   dbcba:	f7fe ff13 	bl	daae4 <__aeabi_dcmpgt>
   dbcbe:	2800      	cmp	r0, #0
   dbcc0:	f43f af7b 	beq.w	dbbba <_strtod_l+0xa1a>
   dbcc4:	e4c2      	b.n	db64c <_strtod_l+0x4ac>
   dbcc6:	9b04      	ldr	r3, [sp, #16]
   dbcc8:	b333      	cbz	r3, dbd18 <_strtod_l+0xb78>
   dbcca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dbccc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dbcd0:	d822      	bhi.n	dbd18 <_strtod_l+0xb78>
   dbcd2:	a32d      	add	r3, pc, #180	; (adr r3, dbd88 <_strtod_l+0xbe8>)
   dbcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbcd8:	4640      	mov	r0, r8
   dbcda:	4649      	mov	r1, r9
   dbcdc:	f7fe feee 	bl	daabc <__aeabi_dcmple>
   dbce0:	b1a0      	cbz	r0, dbd0c <_strtod_l+0xb6c>
   dbce2:	4649      	mov	r1, r9
   dbce4:	4640      	mov	r0, r8
   dbce6:	f7fe ff45 	bl	dab74 <__aeabi_d2uiz>
   dbcea:	2801      	cmp	r0, #1
   dbcec:	bf38      	it	cc
   dbcee:	2001      	movcc	r0, #1
   dbcf0:	f7fe fbee 	bl	da4d0 <__aeabi_ui2d>
   dbcf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbcf6:	4680      	mov	r8, r0
   dbcf8:	4689      	mov	r9, r1
   dbcfa:	bb13      	cbnz	r3, dbd42 <_strtod_l+0xba2>
   dbcfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbd00:	9014      	str	r0, [sp, #80]	; 0x50
   dbd02:	9315      	str	r3, [sp, #84]	; 0x54
   dbd04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dbd08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dbd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dbd0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbd10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dbd14:	1a9b      	subs	r3, r3, r2
   dbd16:	930d      	str	r3, [sp, #52]	; 0x34
   dbd18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbd1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dbd20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dbd24:	f000 ffa8 	bl	dcc78 <__ulp>
   dbd28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbd2c:	ec53 2b10 	vmov	r2, r3, d0
   dbd30:	f7fe fc48 	bl	da5c4 <__aeabi_dmul>
   dbd34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dbd38:	f7fe fa8e 	bl	da258 <__adddf3>
   dbd3c:	4682      	mov	sl, r0
   dbd3e:	468b      	mov	fp, r1
   dbd40:	e78f      	b.n	dbc62 <_strtod_l+0xac2>
   dbd42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dbd46:	e7dd      	b.n	dbd04 <_strtod_l+0xb64>
   dbd48:	a311      	add	r3, pc, #68	; (adr r3, dbd90 <_strtod_l+0xbf0>)
   dbd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbd4e:	f7fe feab 	bl	daaa8 <__aeabi_dcmplt>
   dbd52:	e7b4      	b.n	dbcbe <_strtod_l+0xb1e>
   dbd54:	2300      	movs	r3, #0
   dbd56:	930e      	str	r3, [sp, #56]	; 0x38
   dbd58:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dbd5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbd5c:	6013      	str	r3, [r2, #0]
   dbd5e:	f7ff ba65 	b.w	db22c <_strtod_l+0x8c>
   dbd62:	2b65      	cmp	r3, #101	; 0x65
   dbd64:	f43f ab5d 	beq.w	db422 <_strtod_l+0x282>
   dbd68:	2b45      	cmp	r3, #69	; 0x45
   dbd6a:	f43f ab5a 	beq.w	db422 <_strtod_l+0x282>
   dbd6e:	2201      	movs	r2, #1
   dbd70:	f7ff bb92 	b.w	db498 <_strtod_l+0x2f8>
   dbd74:	f3af 8000 	nop.w
   dbd78:	94a03595 	.word	0x94a03595
   dbd7c:	3fdfffff 	.word	0x3fdfffff
   dbd80:	35afe535 	.word	0x35afe535
   dbd84:	3fe00000 	.word	0x3fe00000
   dbd88:	ffc00000 	.word	0xffc00000
   dbd8c:	41dfffff 	.word	0x41dfffff
   dbd90:	94a03595 	.word	0x94a03595
   dbd94:	3fcfffff 	.word	0x3fcfffff
   dbd98:	3ff00000 	.word	0x3ff00000
   dbd9c:	7ff00000 	.word	0x7ff00000
   dbda0:	7fe00000 	.word	0x7fe00000
   dbda4:	7c9fffff 	.word	0x7c9fffff
   dbda8:	3fe00000 	.word	0x3fe00000
   dbdac:	bff00000 	.word	0xbff00000
   dbdb0:	7fefffff 	.word	0x7fefffff

000dbdb4 <strtod>:
   dbdb4:	460a      	mov	r2, r1
   dbdb6:	4601      	mov	r1, r0
   dbdb8:	4802      	ldr	r0, [pc, #8]	; (dbdc4 <strtod+0x10>)
   dbdba:	4b03      	ldr	r3, [pc, #12]	; (dbdc8 <strtod+0x14>)
   dbdbc:	6800      	ldr	r0, [r0, #0]
   dbdbe:	f7ff b9ef 	b.w	db1a0 <_strtod_l>
   dbdc2:	bf00      	nop
   dbdc4:	2003dce8 	.word	0x2003dce8
   dbdc8:	2003dd54 	.word	0x2003dd54

000dbdcc <_strtol_l.isra.0>:
   dbdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbdd0:	4e3a      	ldr	r6, [pc, #232]	; (dbebc <_strtol_l.isra.0+0xf0>)
   dbdd2:	4686      	mov	lr, r0
   dbdd4:	468c      	mov	ip, r1
   dbdd6:	4660      	mov	r0, ip
   dbdd8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbddc:	5da5      	ldrb	r5, [r4, r6]
   dbdde:	f015 0508 	ands.w	r5, r5, #8
   dbde2:	d1f8      	bne.n	dbdd6 <_strtol_l.isra.0+0xa>
   dbde4:	2c2d      	cmp	r4, #45	; 0x2d
   dbde6:	d133      	bne.n	dbe50 <_strtol_l.isra.0+0x84>
   dbde8:	f89c 4000 	ldrb.w	r4, [ip]
   dbdec:	f04f 0801 	mov.w	r8, #1
   dbdf0:	f100 0c02 	add.w	ip, r0, #2
   dbdf4:	2b00      	cmp	r3, #0
   dbdf6:	d05c      	beq.n	dbeb2 <_strtol_l.isra.0+0xe6>
   dbdf8:	2b10      	cmp	r3, #16
   dbdfa:	d10c      	bne.n	dbe16 <_strtol_l.isra.0+0x4a>
   dbdfc:	2c30      	cmp	r4, #48	; 0x30
   dbdfe:	d10a      	bne.n	dbe16 <_strtol_l.isra.0+0x4a>
   dbe00:	f89c 0000 	ldrb.w	r0, [ip]
   dbe04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbe08:	2858      	cmp	r0, #88	; 0x58
   dbe0a:	d14d      	bne.n	dbea8 <_strtol_l.isra.0+0xdc>
   dbe0c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dbe10:	2310      	movs	r3, #16
   dbe12:	f10c 0c02 	add.w	ip, ip, #2
   dbe16:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dbe1a:	3f01      	subs	r7, #1
   dbe1c:	2600      	movs	r6, #0
   dbe1e:	fbb7 f9f3 	udiv	r9, r7, r3
   dbe22:	4630      	mov	r0, r6
   dbe24:	fb03 7a19 	mls	sl, r3, r9, r7
   dbe28:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dbe2c:	2d09      	cmp	r5, #9
   dbe2e:	d818      	bhi.n	dbe62 <_strtol_l.isra.0+0x96>
   dbe30:	462c      	mov	r4, r5
   dbe32:	42a3      	cmp	r3, r4
   dbe34:	dd24      	ble.n	dbe80 <_strtol_l.isra.0+0xb4>
   dbe36:	1c75      	adds	r5, r6, #1
   dbe38:	d007      	beq.n	dbe4a <_strtol_l.isra.0+0x7e>
   dbe3a:	4581      	cmp	r9, r0
   dbe3c:	d31d      	bcc.n	dbe7a <_strtol_l.isra.0+0xae>
   dbe3e:	d101      	bne.n	dbe44 <_strtol_l.isra.0+0x78>
   dbe40:	45a2      	cmp	sl, r4
   dbe42:	db1a      	blt.n	dbe7a <_strtol_l.isra.0+0xae>
   dbe44:	fb00 4003 	mla	r0, r0, r3, r4
   dbe48:	2601      	movs	r6, #1
   dbe4a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbe4e:	e7eb      	b.n	dbe28 <_strtol_l.isra.0+0x5c>
   dbe50:	2c2b      	cmp	r4, #43	; 0x2b
   dbe52:	bf08      	it	eq
   dbe54:	f89c 4000 	ldrbeq.w	r4, [ip]
   dbe58:	46a8      	mov	r8, r5
   dbe5a:	bf08      	it	eq
   dbe5c:	f100 0c02 	addeq.w	ip, r0, #2
   dbe60:	e7c8      	b.n	dbdf4 <_strtol_l.isra.0+0x28>
   dbe62:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dbe66:	2d19      	cmp	r5, #25
   dbe68:	d801      	bhi.n	dbe6e <_strtol_l.isra.0+0xa2>
   dbe6a:	3c37      	subs	r4, #55	; 0x37
   dbe6c:	e7e1      	b.n	dbe32 <_strtol_l.isra.0+0x66>
   dbe6e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dbe72:	2d19      	cmp	r5, #25
   dbe74:	d804      	bhi.n	dbe80 <_strtol_l.isra.0+0xb4>
   dbe76:	3c57      	subs	r4, #87	; 0x57
   dbe78:	e7db      	b.n	dbe32 <_strtol_l.isra.0+0x66>
   dbe7a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbe7e:	e7e4      	b.n	dbe4a <_strtol_l.isra.0+0x7e>
   dbe80:	1c73      	adds	r3, r6, #1
   dbe82:	d106      	bne.n	dbe92 <_strtol_l.isra.0+0xc6>
   dbe84:	2322      	movs	r3, #34	; 0x22
   dbe86:	f8ce 3000 	str.w	r3, [lr]
   dbe8a:	4638      	mov	r0, r7
   dbe8c:	b942      	cbnz	r2, dbea0 <_strtol_l.isra.0+0xd4>
   dbe8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbe92:	f1b8 0f00 	cmp.w	r8, #0
   dbe96:	d000      	beq.n	dbe9a <_strtol_l.isra.0+0xce>
   dbe98:	4240      	negs	r0, r0
   dbe9a:	2a00      	cmp	r2, #0
   dbe9c:	d0f7      	beq.n	dbe8e <_strtol_l.isra.0+0xc2>
   dbe9e:	b10e      	cbz	r6, dbea4 <_strtol_l.isra.0+0xd8>
   dbea0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dbea4:	6011      	str	r1, [r2, #0]
   dbea6:	e7f2      	b.n	dbe8e <_strtol_l.isra.0+0xc2>
   dbea8:	2430      	movs	r4, #48	; 0x30
   dbeaa:	2b00      	cmp	r3, #0
   dbeac:	d1b3      	bne.n	dbe16 <_strtol_l.isra.0+0x4a>
   dbeae:	2308      	movs	r3, #8
   dbeb0:	e7b1      	b.n	dbe16 <_strtol_l.isra.0+0x4a>
   dbeb2:	2c30      	cmp	r4, #48	; 0x30
   dbeb4:	d0a4      	beq.n	dbe00 <_strtol_l.isra.0+0x34>
   dbeb6:	230a      	movs	r3, #10
   dbeb8:	e7ad      	b.n	dbe16 <_strtol_l.isra.0+0x4a>
   dbeba:	bf00      	nop
   dbebc:	000de0e1 	.word	0x000de0e1

000dbec0 <strtol>:
   dbec0:	4613      	mov	r3, r2
   dbec2:	460a      	mov	r2, r1
   dbec4:	4601      	mov	r1, r0
   dbec6:	4802      	ldr	r0, [pc, #8]	; (dbed0 <strtol+0x10>)
   dbec8:	6800      	ldr	r0, [r0, #0]
   dbeca:	f7ff bf7f 	b.w	dbdcc <_strtol_l.isra.0>
   dbece:	bf00      	nop
   dbed0:	2003dce8 	.word	0x2003dce8

000dbed4 <__register_exitproc>:
   dbed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbed8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dbf94 <__register_exitproc+0xc0>
   dbedc:	4606      	mov	r6, r0
   dbede:	f8d8 0000 	ldr.w	r0, [r8]
   dbee2:	461f      	mov	r7, r3
   dbee4:	460d      	mov	r5, r1
   dbee6:	4691      	mov	r9, r2
   dbee8:	f000 fbb4 	bl	dc654 <__retarget_lock_acquire_recursive>
   dbeec:	4b25      	ldr	r3, [pc, #148]	; (dbf84 <__register_exitproc+0xb0>)
   dbeee:	681c      	ldr	r4, [r3, #0]
   dbef0:	b934      	cbnz	r4, dbf00 <__register_exitproc+0x2c>
   dbef2:	4c25      	ldr	r4, [pc, #148]	; (dbf88 <__register_exitproc+0xb4>)
   dbef4:	601c      	str	r4, [r3, #0]
   dbef6:	4b25      	ldr	r3, [pc, #148]	; (dbf8c <__register_exitproc+0xb8>)
   dbef8:	b113      	cbz	r3, dbf00 <__register_exitproc+0x2c>
   dbefa:	681b      	ldr	r3, [r3, #0]
   dbefc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dbf00:	6863      	ldr	r3, [r4, #4]
   dbf02:	2b1f      	cmp	r3, #31
   dbf04:	dd07      	ble.n	dbf16 <__register_exitproc+0x42>
   dbf06:	f8d8 0000 	ldr.w	r0, [r8]
   dbf0a:	f000 fba5 	bl	dc658 <__retarget_lock_release_recursive>
   dbf0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbf16:	b34e      	cbz	r6, dbf6c <__register_exitproc+0x98>
   dbf18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dbf1c:	b988      	cbnz	r0, dbf42 <__register_exitproc+0x6e>
   dbf1e:	4b1c      	ldr	r3, [pc, #112]	; (dbf90 <__register_exitproc+0xbc>)
   dbf20:	b923      	cbnz	r3, dbf2c <__register_exitproc+0x58>
   dbf22:	f8d8 0000 	ldr.w	r0, [r8]
   dbf26:	f000 fb96 	bl	dc656 <__retarget_lock_release>
   dbf2a:	e7f0      	b.n	dbf0e <__register_exitproc+0x3a>
   dbf2c:	f44f 7084 	mov.w	r0, #264	; 0x108
   dbf30:	f7fc fa0c 	bl	d834c <malloc>
   dbf34:	2800      	cmp	r0, #0
   dbf36:	d0f4      	beq.n	dbf22 <__register_exitproc+0x4e>
   dbf38:	2300      	movs	r3, #0
   dbf3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dbf3e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dbf42:	6863      	ldr	r3, [r4, #4]
   dbf44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dbf48:	2201      	movs	r2, #1
   dbf4a:	409a      	lsls	r2, r3
   dbf4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dbf50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dbf54:	4313      	orrs	r3, r2
   dbf56:	2e02      	cmp	r6, #2
   dbf58:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dbf5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dbf60:	bf02      	ittt	eq
   dbf62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dbf66:	431a      	orreq	r2, r3
   dbf68:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dbf6c:	6863      	ldr	r3, [r4, #4]
   dbf6e:	f8d8 0000 	ldr.w	r0, [r8]
   dbf72:	1c5a      	adds	r2, r3, #1
   dbf74:	3302      	adds	r3, #2
   dbf76:	6062      	str	r2, [r4, #4]
   dbf78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dbf7c:	f000 fb6c 	bl	dc658 <__retarget_lock_release_recursive>
   dbf80:	2000      	movs	r0, #0
   dbf82:	e7c6      	b.n	dbf12 <__register_exitproc+0x3e>
   dbf84:	2003e7e0 	.word	0x2003e7e0
   dbf88:	2003e754 	.word	0x2003e754
   dbf8c:	00000000 	.word	0x00000000
   dbf90:	000d834d 	.word	0x000d834d
   dbf94:	2003dd4c 	.word	0x2003dd4c

000dbf98 <rshift>:
   dbf98:	6903      	ldr	r3, [r0, #16]
   dbf9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dbf9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbfa2:	ea4f 1261 	mov.w	r2, r1, asr #5
   dbfa6:	f100 0414 	add.w	r4, r0, #20
   dbfaa:	dd45      	ble.n	dc038 <rshift+0xa0>
   dbfac:	f011 011f 	ands.w	r1, r1, #31
   dbfb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dbfb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dbfb8:	d10c      	bne.n	dbfd4 <rshift+0x3c>
   dbfba:	f100 0710 	add.w	r7, r0, #16
   dbfbe:	4629      	mov	r1, r5
   dbfc0:	42b1      	cmp	r1, r6
   dbfc2:	d334      	bcc.n	dc02e <rshift+0x96>
   dbfc4:	1a9b      	subs	r3, r3, r2
   dbfc6:	009b      	lsls	r3, r3, #2
   dbfc8:	1eea      	subs	r2, r5, #3
   dbfca:	4296      	cmp	r6, r2
   dbfcc:	bf38      	it	cc
   dbfce:	2300      	movcc	r3, #0
   dbfd0:	4423      	add	r3, r4
   dbfd2:	e015      	b.n	dc000 <rshift+0x68>
   dbfd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dbfd8:	f1c1 0820 	rsb	r8, r1, #32
   dbfdc:	40cf      	lsrs	r7, r1
   dbfde:	f105 0e04 	add.w	lr, r5, #4
   dbfe2:	46a1      	mov	r9, r4
   dbfe4:	4576      	cmp	r6, lr
   dbfe6:	46f4      	mov	ip, lr
   dbfe8:	d815      	bhi.n	dc016 <rshift+0x7e>
   dbfea:	1a9b      	subs	r3, r3, r2
   dbfec:	009a      	lsls	r2, r3, #2
   dbfee:	3a04      	subs	r2, #4
   dbff0:	3501      	adds	r5, #1
   dbff2:	42ae      	cmp	r6, r5
   dbff4:	bf38      	it	cc
   dbff6:	2200      	movcc	r2, #0
   dbff8:	18a3      	adds	r3, r4, r2
   dbffa:	50a7      	str	r7, [r4, r2]
   dbffc:	b107      	cbz	r7, dc000 <rshift+0x68>
   dbffe:	3304      	adds	r3, #4
   dc000:	1b1a      	subs	r2, r3, r4
   dc002:	42a3      	cmp	r3, r4
   dc004:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dc008:	bf08      	it	eq
   dc00a:	2300      	moveq	r3, #0
   dc00c:	6102      	str	r2, [r0, #16]
   dc00e:	bf08      	it	eq
   dc010:	6143      	streq	r3, [r0, #20]
   dc012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc016:	f8dc c000 	ldr.w	ip, [ip]
   dc01a:	fa0c fc08 	lsl.w	ip, ip, r8
   dc01e:	ea4c 0707 	orr.w	r7, ip, r7
   dc022:	f849 7b04 	str.w	r7, [r9], #4
   dc026:	f85e 7b04 	ldr.w	r7, [lr], #4
   dc02a:	40cf      	lsrs	r7, r1
   dc02c:	e7da      	b.n	dbfe4 <rshift+0x4c>
   dc02e:	f851 cb04 	ldr.w	ip, [r1], #4
   dc032:	f847 cf04 	str.w	ip, [r7, #4]!
   dc036:	e7c3      	b.n	dbfc0 <rshift+0x28>
   dc038:	4623      	mov	r3, r4
   dc03a:	e7e1      	b.n	dc000 <rshift+0x68>

000dc03c <__hexdig_fun>:
   dc03c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dc040:	2b09      	cmp	r3, #9
   dc042:	d802      	bhi.n	dc04a <__hexdig_fun+0xe>
   dc044:	3820      	subs	r0, #32
   dc046:	b2c0      	uxtb	r0, r0
   dc048:	4770      	bx	lr
   dc04a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dc04e:	2b05      	cmp	r3, #5
   dc050:	d801      	bhi.n	dc056 <__hexdig_fun+0x1a>
   dc052:	3847      	subs	r0, #71	; 0x47
   dc054:	e7f7      	b.n	dc046 <__hexdig_fun+0xa>
   dc056:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dc05a:	2b05      	cmp	r3, #5
   dc05c:	d801      	bhi.n	dc062 <__hexdig_fun+0x26>
   dc05e:	3827      	subs	r0, #39	; 0x27
   dc060:	e7f1      	b.n	dc046 <__hexdig_fun+0xa>
   dc062:	2000      	movs	r0, #0
   dc064:	4770      	bx	lr
	...

000dc068 <__gethex>:
   dc068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc06c:	ed2d 8b02 	vpush	{d8}
   dc070:	b089      	sub	sp, #36	; 0x24
   dc072:	ee08 0a10 	vmov	s16, r0
   dc076:	9304      	str	r3, [sp, #16]
   dc078:	4bbc      	ldr	r3, [pc, #752]	; (dc36c <__gethex+0x304>)
   dc07a:	681b      	ldr	r3, [r3, #0]
   dc07c:	9301      	str	r3, [sp, #4]
   dc07e:	4618      	mov	r0, r3
   dc080:	468b      	mov	fp, r1
   dc082:	4690      	mov	r8, r2
   dc084:	f7ff f82b 	bl	db0de <strlen>
   dc088:	9b01      	ldr	r3, [sp, #4]
   dc08a:	f8db 2000 	ldr.w	r2, [fp]
   dc08e:	4403      	add	r3, r0
   dc090:	4682      	mov	sl, r0
   dc092:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dc096:	9305      	str	r3, [sp, #20]
   dc098:	1c93      	adds	r3, r2, #2
   dc09a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dc09e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dc0a2:	32fe      	adds	r2, #254	; 0xfe
   dc0a4:	18d1      	adds	r1, r2, r3
   dc0a6:	461f      	mov	r7, r3
   dc0a8:	f813 0b01 	ldrb.w	r0, [r3], #1
   dc0ac:	9100      	str	r1, [sp, #0]
   dc0ae:	2830      	cmp	r0, #48	; 0x30
   dc0b0:	d0f8      	beq.n	dc0a4 <__gethex+0x3c>
   dc0b2:	f7ff ffc3 	bl	dc03c <__hexdig_fun>
   dc0b6:	4604      	mov	r4, r0
   dc0b8:	2800      	cmp	r0, #0
   dc0ba:	d13a      	bne.n	dc132 <__gethex+0xca>
   dc0bc:	9901      	ldr	r1, [sp, #4]
   dc0be:	4652      	mov	r2, sl
   dc0c0:	4638      	mov	r0, r7
   dc0c2:	f7ff f814 	bl	db0ee <strncmp>
   dc0c6:	4605      	mov	r5, r0
   dc0c8:	2800      	cmp	r0, #0
   dc0ca:	d168      	bne.n	dc19e <__gethex+0x136>
   dc0cc:	f817 000a 	ldrb.w	r0, [r7, sl]
   dc0d0:	eb07 060a 	add.w	r6, r7, sl
   dc0d4:	f7ff ffb2 	bl	dc03c <__hexdig_fun>
   dc0d8:	2800      	cmp	r0, #0
   dc0da:	d062      	beq.n	dc1a2 <__gethex+0x13a>
   dc0dc:	4633      	mov	r3, r6
   dc0de:	7818      	ldrb	r0, [r3, #0]
   dc0e0:	2830      	cmp	r0, #48	; 0x30
   dc0e2:	461f      	mov	r7, r3
   dc0e4:	f103 0301 	add.w	r3, r3, #1
   dc0e8:	d0f9      	beq.n	dc0de <__gethex+0x76>
   dc0ea:	f7ff ffa7 	bl	dc03c <__hexdig_fun>
   dc0ee:	2301      	movs	r3, #1
   dc0f0:	fab0 f480 	clz	r4, r0
   dc0f4:	0964      	lsrs	r4, r4, #5
   dc0f6:	4635      	mov	r5, r6
   dc0f8:	9300      	str	r3, [sp, #0]
   dc0fa:	463a      	mov	r2, r7
   dc0fc:	4616      	mov	r6, r2
   dc0fe:	3201      	adds	r2, #1
   dc100:	7830      	ldrb	r0, [r6, #0]
   dc102:	f7ff ff9b 	bl	dc03c <__hexdig_fun>
   dc106:	2800      	cmp	r0, #0
   dc108:	d1f8      	bne.n	dc0fc <__gethex+0x94>
   dc10a:	9901      	ldr	r1, [sp, #4]
   dc10c:	4652      	mov	r2, sl
   dc10e:	4630      	mov	r0, r6
   dc110:	f7fe ffed 	bl	db0ee <strncmp>
   dc114:	b980      	cbnz	r0, dc138 <__gethex+0xd0>
   dc116:	b94d      	cbnz	r5, dc12c <__gethex+0xc4>
   dc118:	eb06 050a 	add.w	r5, r6, sl
   dc11c:	462a      	mov	r2, r5
   dc11e:	4616      	mov	r6, r2
   dc120:	3201      	adds	r2, #1
   dc122:	7830      	ldrb	r0, [r6, #0]
   dc124:	f7ff ff8a 	bl	dc03c <__hexdig_fun>
   dc128:	2800      	cmp	r0, #0
   dc12a:	d1f8      	bne.n	dc11e <__gethex+0xb6>
   dc12c:	1bad      	subs	r5, r5, r6
   dc12e:	00ad      	lsls	r5, r5, #2
   dc130:	e004      	b.n	dc13c <__gethex+0xd4>
   dc132:	2400      	movs	r4, #0
   dc134:	4625      	mov	r5, r4
   dc136:	e7e0      	b.n	dc0fa <__gethex+0x92>
   dc138:	2d00      	cmp	r5, #0
   dc13a:	d1f7      	bne.n	dc12c <__gethex+0xc4>
   dc13c:	7833      	ldrb	r3, [r6, #0]
   dc13e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc142:	2b50      	cmp	r3, #80	; 0x50
   dc144:	d13b      	bne.n	dc1be <__gethex+0x156>
   dc146:	7873      	ldrb	r3, [r6, #1]
   dc148:	2b2b      	cmp	r3, #43	; 0x2b
   dc14a:	d02c      	beq.n	dc1a6 <__gethex+0x13e>
   dc14c:	2b2d      	cmp	r3, #45	; 0x2d
   dc14e:	d02e      	beq.n	dc1ae <__gethex+0x146>
   dc150:	1c71      	adds	r1, r6, #1
   dc152:	f04f 0900 	mov.w	r9, #0
   dc156:	7808      	ldrb	r0, [r1, #0]
   dc158:	f7ff ff70 	bl	dc03c <__hexdig_fun>
   dc15c:	1e43      	subs	r3, r0, #1
   dc15e:	b2db      	uxtb	r3, r3
   dc160:	2b18      	cmp	r3, #24
   dc162:	d82c      	bhi.n	dc1be <__gethex+0x156>
   dc164:	f1a0 0210 	sub.w	r2, r0, #16
   dc168:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc16c:	f7ff ff66 	bl	dc03c <__hexdig_fun>
   dc170:	1e43      	subs	r3, r0, #1
   dc172:	b2db      	uxtb	r3, r3
   dc174:	2b18      	cmp	r3, #24
   dc176:	d91d      	bls.n	dc1b4 <__gethex+0x14c>
   dc178:	f1b9 0f00 	cmp.w	r9, #0
   dc17c:	d000      	beq.n	dc180 <__gethex+0x118>
   dc17e:	4252      	negs	r2, r2
   dc180:	4415      	add	r5, r2
   dc182:	f8cb 1000 	str.w	r1, [fp]
   dc186:	b1e4      	cbz	r4, dc1c2 <__gethex+0x15a>
   dc188:	9b00      	ldr	r3, [sp, #0]
   dc18a:	2b00      	cmp	r3, #0
   dc18c:	bf14      	ite	ne
   dc18e:	2700      	movne	r7, #0
   dc190:	2706      	moveq	r7, #6
   dc192:	4638      	mov	r0, r7
   dc194:	b009      	add	sp, #36	; 0x24
   dc196:	ecbd 8b02 	vpop	{d8}
   dc19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc19e:	463e      	mov	r6, r7
   dc1a0:	4625      	mov	r5, r4
   dc1a2:	2401      	movs	r4, #1
   dc1a4:	e7ca      	b.n	dc13c <__gethex+0xd4>
   dc1a6:	f04f 0900 	mov.w	r9, #0
   dc1aa:	1cb1      	adds	r1, r6, #2
   dc1ac:	e7d3      	b.n	dc156 <__gethex+0xee>
   dc1ae:	f04f 0901 	mov.w	r9, #1
   dc1b2:	e7fa      	b.n	dc1aa <__gethex+0x142>
   dc1b4:	230a      	movs	r3, #10
   dc1b6:	fb03 0202 	mla	r2, r3, r2, r0
   dc1ba:	3a10      	subs	r2, #16
   dc1bc:	e7d4      	b.n	dc168 <__gethex+0x100>
   dc1be:	4631      	mov	r1, r6
   dc1c0:	e7df      	b.n	dc182 <__gethex+0x11a>
   dc1c2:	1bf3      	subs	r3, r6, r7
   dc1c4:	3b01      	subs	r3, #1
   dc1c6:	4621      	mov	r1, r4
   dc1c8:	2b07      	cmp	r3, #7
   dc1ca:	dc52      	bgt.n	dc272 <__gethex+0x20a>
   dc1cc:	ee18 0a10 	vmov	r0, s16
   dc1d0:	f000 fa55 	bl	dc67e <_Balloc>
   dc1d4:	f04f 0b00 	mov.w	fp, #0
   dc1d8:	f100 0914 	add.w	r9, r0, #20
   dc1dc:	f1ca 0301 	rsb	r3, sl, #1
   dc1e0:	4604      	mov	r4, r0
   dc1e2:	f8cd 9008 	str.w	r9, [sp, #8]
   dc1e6:	f8cd b000 	str.w	fp, [sp]
   dc1ea:	9306      	str	r3, [sp, #24]
   dc1ec:	42b7      	cmp	r7, r6
   dc1ee:	d343      	bcc.n	dc278 <__gethex+0x210>
   dc1f0:	9802      	ldr	r0, [sp, #8]
   dc1f2:	9b00      	ldr	r3, [sp, #0]
   dc1f4:	f840 3b04 	str.w	r3, [r0], #4
   dc1f8:	eba0 0009 	sub.w	r0, r0, r9
   dc1fc:	1080      	asrs	r0, r0, #2
   dc1fe:	0146      	lsls	r6, r0, #5
   dc200:	6120      	str	r0, [r4, #16]
   dc202:	4618      	mov	r0, r3
   dc204:	f000 fb02 	bl	dc80c <__hi0bits>
   dc208:	1a30      	subs	r0, r6, r0
   dc20a:	f8d8 6000 	ldr.w	r6, [r8]
   dc20e:	42b0      	cmp	r0, r6
   dc210:	dd66      	ble.n	dc2e0 <__gethex+0x278>
   dc212:	1b87      	subs	r7, r0, r6
   dc214:	4639      	mov	r1, r7
   dc216:	4620      	mov	r0, r4
   dc218:	f000 fe50 	bl	dcebc <__any_on>
   dc21c:	4682      	mov	sl, r0
   dc21e:	b1a8      	cbz	r0, dc24c <__gethex+0x1e4>
   dc220:	1e7b      	subs	r3, r7, #1
   dc222:	1159      	asrs	r1, r3, #5
   dc224:	f003 021f 	and.w	r2, r3, #31
   dc228:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dc22c:	f04f 0a01 	mov.w	sl, #1
   dc230:	fa0a f202 	lsl.w	r2, sl, r2
   dc234:	420a      	tst	r2, r1
   dc236:	d009      	beq.n	dc24c <__gethex+0x1e4>
   dc238:	4553      	cmp	r3, sl
   dc23a:	dd05      	ble.n	dc248 <__gethex+0x1e0>
   dc23c:	1eb9      	subs	r1, r7, #2
   dc23e:	4620      	mov	r0, r4
   dc240:	f000 fe3c 	bl	dcebc <__any_on>
   dc244:	2800      	cmp	r0, #0
   dc246:	d148      	bne.n	dc2da <__gethex+0x272>
   dc248:	f04f 0a02 	mov.w	sl, #2
   dc24c:	4639      	mov	r1, r7
   dc24e:	4620      	mov	r0, r4
   dc250:	f7ff fea2 	bl	dbf98 <rshift>
   dc254:	443d      	add	r5, r7
   dc256:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc25a:	42ab      	cmp	r3, r5
   dc25c:	da4f      	bge.n	dc2fe <__gethex+0x296>
   dc25e:	ee18 0a10 	vmov	r0, s16
   dc262:	4621      	mov	r1, r4
   dc264:	f000 fa3f 	bl	dc6e6 <_Bfree>
   dc268:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc26a:	2300      	movs	r3, #0
   dc26c:	6013      	str	r3, [r2, #0]
   dc26e:	27a3      	movs	r7, #163	; 0xa3
   dc270:	e78f      	b.n	dc192 <__gethex+0x12a>
   dc272:	3101      	adds	r1, #1
   dc274:	105b      	asrs	r3, r3, #1
   dc276:	e7a7      	b.n	dc1c8 <__gethex+0x160>
   dc278:	1e73      	subs	r3, r6, #1
   dc27a:	9a05      	ldr	r2, [sp, #20]
   dc27c:	9303      	str	r3, [sp, #12]
   dc27e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc282:	4293      	cmp	r3, r2
   dc284:	d019      	beq.n	dc2ba <__gethex+0x252>
   dc286:	f1bb 0f20 	cmp.w	fp, #32
   dc28a:	d107      	bne.n	dc29c <__gethex+0x234>
   dc28c:	9b02      	ldr	r3, [sp, #8]
   dc28e:	9a00      	ldr	r2, [sp, #0]
   dc290:	f843 2b04 	str.w	r2, [r3], #4
   dc294:	9302      	str	r3, [sp, #8]
   dc296:	2300      	movs	r3, #0
   dc298:	9300      	str	r3, [sp, #0]
   dc29a:	469b      	mov	fp, r3
   dc29c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc2a0:	f7ff fecc 	bl	dc03c <__hexdig_fun>
   dc2a4:	9b00      	ldr	r3, [sp, #0]
   dc2a6:	f000 000f 	and.w	r0, r0, #15
   dc2aa:	fa00 f00b 	lsl.w	r0, r0, fp
   dc2ae:	4303      	orrs	r3, r0
   dc2b0:	9300      	str	r3, [sp, #0]
   dc2b2:	f10b 0b04 	add.w	fp, fp, #4
   dc2b6:	9b03      	ldr	r3, [sp, #12]
   dc2b8:	e00d      	b.n	dc2d6 <__gethex+0x26e>
   dc2ba:	9b03      	ldr	r3, [sp, #12]
   dc2bc:	9a06      	ldr	r2, [sp, #24]
   dc2be:	4413      	add	r3, r2
   dc2c0:	42bb      	cmp	r3, r7
   dc2c2:	d3e0      	bcc.n	dc286 <__gethex+0x21e>
   dc2c4:	4618      	mov	r0, r3
   dc2c6:	9901      	ldr	r1, [sp, #4]
   dc2c8:	9307      	str	r3, [sp, #28]
   dc2ca:	4652      	mov	r2, sl
   dc2cc:	f7fe ff0f 	bl	db0ee <strncmp>
   dc2d0:	9b07      	ldr	r3, [sp, #28]
   dc2d2:	2800      	cmp	r0, #0
   dc2d4:	d1d7      	bne.n	dc286 <__gethex+0x21e>
   dc2d6:	461e      	mov	r6, r3
   dc2d8:	e788      	b.n	dc1ec <__gethex+0x184>
   dc2da:	f04f 0a03 	mov.w	sl, #3
   dc2de:	e7b5      	b.n	dc24c <__gethex+0x1e4>
   dc2e0:	da0a      	bge.n	dc2f8 <__gethex+0x290>
   dc2e2:	1a37      	subs	r7, r6, r0
   dc2e4:	4621      	mov	r1, r4
   dc2e6:	ee18 0a10 	vmov	r0, s16
   dc2ea:	463a      	mov	r2, r7
   dc2ec:	f000 fbd2 	bl	dca94 <__lshift>
   dc2f0:	1bed      	subs	r5, r5, r7
   dc2f2:	4604      	mov	r4, r0
   dc2f4:	f100 0914 	add.w	r9, r0, #20
   dc2f8:	f04f 0a00 	mov.w	sl, #0
   dc2fc:	e7ab      	b.n	dc256 <__gethex+0x1ee>
   dc2fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc302:	42a8      	cmp	r0, r5
   dc304:	dd6d      	ble.n	dc3e2 <__gethex+0x37a>
   dc306:	1b45      	subs	r5, r0, r5
   dc308:	42ae      	cmp	r6, r5
   dc30a:	dc31      	bgt.n	dc370 <__gethex+0x308>
   dc30c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc310:	2b02      	cmp	r3, #2
   dc312:	d023      	beq.n	dc35c <__gethex+0x2f4>
   dc314:	2b03      	cmp	r3, #3
   dc316:	d025      	beq.n	dc364 <__gethex+0x2fc>
   dc318:	2b01      	cmp	r3, #1
   dc31a:	d115      	bne.n	dc348 <__gethex+0x2e0>
   dc31c:	42ae      	cmp	r6, r5
   dc31e:	d113      	bne.n	dc348 <__gethex+0x2e0>
   dc320:	2e01      	cmp	r6, #1
   dc322:	d10b      	bne.n	dc33c <__gethex+0x2d4>
   dc324:	9a04      	ldr	r2, [sp, #16]
   dc326:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc32a:	6013      	str	r3, [r2, #0]
   dc32c:	2301      	movs	r3, #1
   dc32e:	6123      	str	r3, [r4, #16]
   dc330:	f8c9 3000 	str.w	r3, [r9]
   dc334:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc336:	2762      	movs	r7, #98	; 0x62
   dc338:	601c      	str	r4, [r3, #0]
   dc33a:	e72a      	b.n	dc192 <__gethex+0x12a>
   dc33c:	1e71      	subs	r1, r6, #1
   dc33e:	4620      	mov	r0, r4
   dc340:	f000 fdbc 	bl	dcebc <__any_on>
   dc344:	2800      	cmp	r0, #0
   dc346:	d1ed      	bne.n	dc324 <__gethex+0x2bc>
   dc348:	ee18 0a10 	vmov	r0, s16
   dc34c:	4621      	mov	r1, r4
   dc34e:	f000 f9ca 	bl	dc6e6 <_Bfree>
   dc352:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc354:	2300      	movs	r3, #0
   dc356:	6013      	str	r3, [r2, #0]
   dc358:	2750      	movs	r7, #80	; 0x50
   dc35a:	e71a      	b.n	dc192 <__gethex+0x12a>
   dc35c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc35e:	2b00      	cmp	r3, #0
   dc360:	d1f2      	bne.n	dc348 <__gethex+0x2e0>
   dc362:	e7df      	b.n	dc324 <__gethex+0x2bc>
   dc364:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc366:	2b00      	cmp	r3, #0
   dc368:	d1dc      	bne.n	dc324 <__gethex+0x2bc>
   dc36a:	e7ed      	b.n	dc348 <__gethex+0x2e0>
   dc36c:	000de1e4 	.word	0x000de1e4
   dc370:	1e6f      	subs	r7, r5, #1
   dc372:	f1ba 0f00 	cmp.w	sl, #0
   dc376:	d131      	bne.n	dc3dc <__gethex+0x374>
   dc378:	b127      	cbz	r7, dc384 <__gethex+0x31c>
   dc37a:	4639      	mov	r1, r7
   dc37c:	4620      	mov	r0, r4
   dc37e:	f000 fd9d 	bl	dcebc <__any_on>
   dc382:	4682      	mov	sl, r0
   dc384:	117b      	asrs	r3, r7, #5
   dc386:	2101      	movs	r1, #1
   dc388:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dc38c:	f007 071f 	and.w	r7, r7, #31
   dc390:	fa01 f707 	lsl.w	r7, r1, r7
   dc394:	421f      	tst	r7, r3
   dc396:	4629      	mov	r1, r5
   dc398:	4620      	mov	r0, r4
   dc39a:	bf18      	it	ne
   dc39c:	f04a 0a02 	orrne.w	sl, sl, #2
   dc3a0:	1b76      	subs	r6, r6, r5
   dc3a2:	f7ff fdf9 	bl	dbf98 <rshift>
   dc3a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dc3aa:	2702      	movs	r7, #2
   dc3ac:	f1ba 0f00 	cmp.w	sl, #0
   dc3b0:	d048      	beq.n	dc444 <__gethex+0x3dc>
   dc3b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc3b6:	2b02      	cmp	r3, #2
   dc3b8:	d015      	beq.n	dc3e6 <__gethex+0x37e>
   dc3ba:	2b03      	cmp	r3, #3
   dc3bc:	d017      	beq.n	dc3ee <__gethex+0x386>
   dc3be:	2b01      	cmp	r3, #1
   dc3c0:	d109      	bne.n	dc3d6 <__gethex+0x36e>
   dc3c2:	f01a 0f02 	tst.w	sl, #2
   dc3c6:	d006      	beq.n	dc3d6 <__gethex+0x36e>
   dc3c8:	f8d9 0000 	ldr.w	r0, [r9]
   dc3cc:	ea4a 0a00 	orr.w	sl, sl, r0
   dc3d0:	f01a 0f01 	tst.w	sl, #1
   dc3d4:	d10e      	bne.n	dc3f4 <__gethex+0x38c>
   dc3d6:	f047 0710 	orr.w	r7, r7, #16
   dc3da:	e033      	b.n	dc444 <__gethex+0x3dc>
   dc3dc:	f04f 0a01 	mov.w	sl, #1
   dc3e0:	e7d0      	b.n	dc384 <__gethex+0x31c>
   dc3e2:	2701      	movs	r7, #1
   dc3e4:	e7e2      	b.n	dc3ac <__gethex+0x344>
   dc3e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc3e8:	f1c3 0301 	rsb	r3, r3, #1
   dc3ec:	9315      	str	r3, [sp, #84]	; 0x54
   dc3ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc3f0:	2b00      	cmp	r3, #0
   dc3f2:	d0f0      	beq.n	dc3d6 <__gethex+0x36e>
   dc3f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc3f8:	f104 0314 	add.w	r3, r4, #20
   dc3fc:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dc400:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dc404:	f04f 0c00 	mov.w	ip, #0
   dc408:	4618      	mov	r0, r3
   dc40a:	f853 2b04 	ldr.w	r2, [r3], #4
   dc40e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc412:	d01c      	beq.n	dc44e <__gethex+0x3e6>
   dc414:	3201      	adds	r2, #1
   dc416:	6002      	str	r2, [r0, #0]
   dc418:	2f02      	cmp	r7, #2
   dc41a:	f104 0314 	add.w	r3, r4, #20
   dc41e:	d13a      	bne.n	dc496 <__gethex+0x42e>
   dc420:	f8d8 2000 	ldr.w	r2, [r8]
   dc424:	3a01      	subs	r2, #1
   dc426:	42b2      	cmp	r2, r6
   dc428:	d10a      	bne.n	dc440 <__gethex+0x3d8>
   dc42a:	1171      	asrs	r1, r6, #5
   dc42c:	2201      	movs	r2, #1
   dc42e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dc432:	f006 061f 	and.w	r6, r6, #31
   dc436:	fa02 f606 	lsl.w	r6, r2, r6
   dc43a:	421e      	tst	r6, r3
   dc43c:	bf18      	it	ne
   dc43e:	4617      	movne	r7, r2
   dc440:	f047 0720 	orr.w	r7, r7, #32
   dc444:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc446:	601c      	str	r4, [r3, #0]
   dc448:	9b04      	ldr	r3, [sp, #16]
   dc44a:	601d      	str	r5, [r3, #0]
   dc44c:	e6a1      	b.n	dc192 <__gethex+0x12a>
   dc44e:	4299      	cmp	r1, r3
   dc450:	f843 cc04 	str.w	ip, [r3, #-4]
   dc454:	d8d8      	bhi.n	dc408 <__gethex+0x3a0>
   dc456:	68a3      	ldr	r3, [r4, #8]
   dc458:	4599      	cmp	r9, r3
   dc45a:	db14      	blt.n	dc486 <__gethex+0x41e>
   dc45c:	6861      	ldr	r1, [r4, #4]
   dc45e:	ee18 0a10 	vmov	r0, s16
   dc462:	3101      	adds	r1, #1
   dc464:	f000 f90b 	bl	dc67e <_Balloc>
   dc468:	6922      	ldr	r2, [r4, #16]
   dc46a:	3202      	adds	r2, #2
   dc46c:	f104 010c 	add.w	r1, r4, #12
   dc470:	4682      	mov	sl, r0
   dc472:	0092      	lsls	r2, r2, #2
   dc474:	300c      	adds	r0, #12
   dc476:	f7fe fdc8 	bl	db00a <memcpy>
   dc47a:	4621      	mov	r1, r4
   dc47c:	ee18 0a10 	vmov	r0, s16
   dc480:	f000 f931 	bl	dc6e6 <_Bfree>
   dc484:	4654      	mov	r4, sl
   dc486:	6923      	ldr	r3, [r4, #16]
   dc488:	1c5a      	adds	r2, r3, #1
   dc48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dc48e:	6122      	str	r2, [r4, #16]
   dc490:	2201      	movs	r2, #1
   dc492:	615a      	str	r2, [r3, #20]
   dc494:	e7c0      	b.n	dc418 <__gethex+0x3b0>
   dc496:	6922      	ldr	r2, [r4, #16]
   dc498:	454a      	cmp	r2, r9
   dc49a:	dd0b      	ble.n	dc4b4 <__gethex+0x44c>
   dc49c:	2101      	movs	r1, #1
   dc49e:	4620      	mov	r0, r4
   dc4a0:	f7ff fd7a 	bl	dbf98 <rshift>
   dc4a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc4a8:	3501      	adds	r5, #1
   dc4aa:	42ab      	cmp	r3, r5
   dc4ac:	f6ff aed7 	blt.w	dc25e <__gethex+0x1f6>
   dc4b0:	2701      	movs	r7, #1
   dc4b2:	e7c5      	b.n	dc440 <__gethex+0x3d8>
   dc4b4:	f016 061f 	ands.w	r6, r6, #31
   dc4b8:	d0fa      	beq.n	dc4b0 <__gethex+0x448>
   dc4ba:	449b      	add	fp, r3
   dc4bc:	f1c6 0620 	rsb	r6, r6, #32
   dc4c0:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dc4c4:	f000 f9a2 	bl	dc80c <__hi0bits>
   dc4c8:	42b0      	cmp	r0, r6
   dc4ca:	dbe7      	blt.n	dc49c <__gethex+0x434>
   dc4cc:	e7f0      	b.n	dc4b0 <__gethex+0x448>
   dc4ce:	bf00      	nop

000dc4d0 <L_shift>:
   dc4d0:	f1c2 0208 	rsb	r2, r2, #8
   dc4d4:	0092      	lsls	r2, r2, #2
   dc4d6:	b570      	push	{r4, r5, r6, lr}
   dc4d8:	f1c2 0620 	rsb	r6, r2, #32
   dc4dc:	6843      	ldr	r3, [r0, #4]
   dc4de:	6804      	ldr	r4, [r0, #0]
   dc4e0:	fa03 f506 	lsl.w	r5, r3, r6
   dc4e4:	432c      	orrs	r4, r5
   dc4e6:	40d3      	lsrs	r3, r2
   dc4e8:	6004      	str	r4, [r0, #0]
   dc4ea:	f840 3f04 	str.w	r3, [r0, #4]!
   dc4ee:	4288      	cmp	r0, r1
   dc4f0:	d3f4      	bcc.n	dc4dc <L_shift+0xc>
   dc4f2:	bd70      	pop	{r4, r5, r6, pc}

000dc4f4 <__match>:
   dc4f4:	b530      	push	{r4, r5, lr}
   dc4f6:	6803      	ldr	r3, [r0, #0]
   dc4f8:	3301      	adds	r3, #1
   dc4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc4fe:	b914      	cbnz	r4, dc506 <__match+0x12>
   dc500:	6003      	str	r3, [r0, #0]
   dc502:	2001      	movs	r0, #1
   dc504:	bd30      	pop	{r4, r5, pc}
   dc506:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc50a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc50e:	2d19      	cmp	r5, #25
   dc510:	bf98      	it	ls
   dc512:	3220      	addls	r2, #32
   dc514:	42a2      	cmp	r2, r4
   dc516:	d0f0      	beq.n	dc4fa <__match+0x6>
   dc518:	2000      	movs	r0, #0
   dc51a:	e7f3      	b.n	dc504 <__match+0x10>

000dc51c <__hexnan>:
   dc51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc520:	680b      	ldr	r3, [r1, #0]
   dc522:	6801      	ldr	r1, [r0, #0]
   dc524:	115e      	asrs	r6, r3, #5
   dc526:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc52a:	f013 031f 	ands.w	r3, r3, #31
   dc52e:	b087      	sub	sp, #28
   dc530:	bf18      	it	ne
   dc532:	3604      	addne	r6, #4
   dc534:	2500      	movs	r5, #0
   dc536:	1f37      	subs	r7, r6, #4
   dc538:	4682      	mov	sl, r0
   dc53a:	4690      	mov	r8, r2
   dc53c:	9301      	str	r3, [sp, #4]
   dc53e:	f846 5c04 	str.w	r5, [r6, #-4]
   dc542:	46b9      	mov	r9, r7
   dc544:	463c      	mov	r4, r7
   dc546:	9502      	str	r5, [sp, #8]
   dc548:	46ab      	mov	fp, r5
   dc54a:	784a      	ldrb	r2, [r1, #1]
   dc54c:	1c4b      	adds	r3, r1, #1
   dc54e:	9303      	str	r3, [sp, #12]
   dc550:	b342      	cbz	r2, dc5a4 <__hexnan+0x88>
   dc552:	4610      	mov	r0, r2
   dc554:	9105      	str	r1, [sp, #20]
   dc556:	9204      	str	r2, [sp, #16]
   dc558:	f7ff fd70 	bl	dc03c <__hexdig_fun>
   dc55c:	2800      	cmp	r0, #0
   dc55e:	d14f      	bne.n	dc600 <__hexnan+0xe4>
   dc560:	9a04      	ldr	r2, [sp, #16]
   dc562:	9905      	ldr	r1, [sp, #20]
   dc564:	2a20      	cmp	r2, #32
   dc566:	d818      	bhi.n	dc59a <__hexnan+0x7e>
   dc568:	9b02      	ldr	r3, [sp, #8]
   dc56a:	459b      	cmp	fp, r3
   dc56c:	dd13      	ble.n	dc596 <__hexnan+0x7a>
   dc56e:	454c      	cmp	r4, r9
   dc570:	d206      	bcs.n	dc580 <__hexnan+0x64>
   dc572:	2d07      	cmp	r5, #7
   dc574:	dc04      	bgt.n	dc580 <__hexnan+0x64>
   dc576:	462a      	mov	r2, r5
   dc578:	4649      	mov	r1, r9
   dc57a:	4620      	mov	r0, r4
   dc57c:	f7ff ffa8 	bl	dc4d0 <L_shift>
   dc580:	4544      	cmp	r4, r8
   dc582:	d950      	bls.n	dc626 <__hexnan+0x10a>
   dc584:	2300      	movs	r3, #0
   dc586:	f1a4 0904 	sub.w	r9, r4, #4
   dc58a:	f844 3c04 	str.w	r3, [r4, #-4]
   dc58e:	f8cd b008 	str.w	fp, [sp, #8]
   dc592:	464c      	mov	r4, r9
   dc594:	461d      	mov	r5, r3
   dc596:	9903      	ldr	r1, [sp, #12]
   dc598:	e7d7      	b.n	dc54a <__hexnan+0x2e>
   dc59a:	2a29      	cmp	r2, #41	; 0x29
   dc59c:	d156      	bne.n	dc64c <__hexnan+0x130>
   dc59e:	3102      	adds	r1, #2
   dc5a0:	f8ca 1000 	str.w	r1, [sl]
   dc5a4:	f1bb 0f00 	cmp.w	fp, #0
   dc5a8:	d050      	beq.n	dc64c <__hexnan+0x130>
   dc5aa:	454c      	cmp	r4, r9
   dc5ac:	d206      	bcs.n	dc5bc <__hexnan+0xa0>
   dc5ae:	2d07      	cmp	r5, #7
   dc5b0:	dc04      	bgt.n	dc5bc <__hexnan+0xa0>
   dc5b2:	462a      	mov	r2, r5
   dc5b4:	4649      	mov	r1, r9
   dc5b6:	4620      	mov	r0, r4
   dc5b8:	f7ff ff8a 	bl	dc4d0 <L_shift>
   dc5bc:	4544      	cmp	r4, r8
   dc5be:	d934      	bls.n	dc62a <__hexnan+0x10e>
   dc5c0:	f1a8 0204 	sub.w	r2, r8, #4
   dc5c4:	4623      	mov	r3, r4
   dc5c6:	f853 1b04 	ldr.w	r1, [r3], #4
   dc5ca:	f842 1f04 	str.w	r1, [r2, #4]!
   dc5ce:	429f      	cmp	r7, r3
   dc5d0:	d2f9      	bcs.n	dc5c6 <__hexnan+0xaa>
   dc5d2:	1b3b      	subs	r3, r7, r4
   dc5d4:	f023 0303 	bic.w	r3, r3, #3
   dc5d8:	3304      	adds	r3, #4
   dc5da:	3401      	adds	r4, #1
   dc5dc:	3e03      	subs	r6, #3
   dc5de:	42b4      	cmp	r4, r6
   dc5e0:	bf88      	it	hi
   dc5e2:	2304      	movhi	r3, #4
   dc5e4:	4443      	add	r3, r8
   dc5e6:	2200      	movs	r2, #0
   dc5e8:	f843 2b04 	str.w	r2, [r3], #4
   dc5ec:	429f      	cmp	r7, r3
   dc5ee:	d2fb      	bcs.n	dc5e8 <__hexnan+0xcc>
   dc5f0:	683b      	ldr	r3, [r7, #0]
   dc5f2:	b91b      	cbnz	r3, dc5fc <__hexnan+0xe0>
   dc5f4:	4547      	cmp	r7, r8
   dc5f6:	d127      	bne.n	dc648 <__hexnan+0x12c>
   dc5f8:	2301      	movs	r3, #1
   dc5fa:	603b      	str	r3, [r7, #0]
   dc5fc:	2005      	movs	r0, #5
   dc5fe:	e026      	b.n	dc64e <__hexnan+0x132>
   dc600:	3501      	adds	r5, #1
   dc602:	2d08      	cmp	r5, #8
   dc604:	f10b 0b01 	add.w	fp, fp, #1
   dc608:	dd06      	ble.n	dc618 <__hexnan+0xfc>
   dc60a:	4544      	cmp	r4, r8
   dc60c:	d9c3      	bls.n	dc596 <__hexnan+0x7a>
   dc60e:	2300      	movs	r3, #0
   dc610:	f844 3c04 	str.w	r3, [r4, #-4]
   dc614:	2501      	movs	r5, #1
   dc616:	3c04      	subs	r4, #4
   dc618:	6822      	ldr	r2, [r4, #0]
   dc61a:	f000 000f 	and.w	r0, r0, #15
   dc61e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dc622:	6022      	str	r2, [r4, #0]
   dc624:	e7b7      	b.n	dc596 <__hexnan+0x7a>
   dc626:	2508      	movs	r5, #8
   dc628:	e7b5      	b.n	dc596 <__hexnan+0x7a>
   dc62a:	9b01      	ldr	r3, [sp, #4]
   dc62c:	2b00      	cmp	r3, #0
   dc62e:	d0df      	beq.n	dc5f0 <__hexnan+0xd4>
   dc630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc634:	f1c3 0320 	rsb	r3, r3, #32
   dc638:	fa22 f303 	lsr.w	r3, r2, r3
   dc63c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc640:	401a      	ands	r2, r3
   dc642:	f846 2c04 	str.w	r2, [r6, #-4]
   dc646:	e7d3      	b.n	dc5f0 <__hexnan+0xd4>
   dc648:	3f04      	subs	r7, #4
   dc64a:	e7d1      	b.n	dc5f0 <__hexnan+0xd4>
   dc64c:	2004      	movs	r0, #4
   dc64e:	b007      	add	sp, #28
   dc650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc654 <__retarget_lock_acquire_recursive>:
   dc654:	4770      	bx	lr

000dc656 <__retarget_lock_release>:
   dc656:	4770      	bx	lr

000dc658 <__retarget_lock_release_recursive>:
   dc658:	4770      	bx	lr

000dc65a <__ascii_mbtowc>:
   dc65a:	b082      	sub	sp, #8
   dc65c:	b901      	cbnz	r1, dc660 <__ascii_mbtowc+0x6>
   dc65e:	a901      	add	r1, sp, #4
   dc660:	b142      	cbz	r2, dc674 <__ascii_mbtowc+0x1a>
   dc662:	b14b      	cbz	r3, dc678 <__ascii_mbtowc+0x1e>
   dc664:	7813      	ldrb	r3, [r2, #0]
   dc666:	600b      	str	r3, [r1, #0]
   dc668:	7812      	ldrb	r2, [r2, #0]
   dc66a:	1e10      	subs	r0, r2, #0
   dc66c:	bf18      	it	ne
   dc66e:	2001      	movne	r0, #1
   dc670:	b002      	add	sp, #8
   dc672:	4770      	bx	lr
   dc674:	4610      	mov	r0, r2
   dc676:	e7fb      	b.n	dc670 <__ascii_mbtowc+0x16>
   dc678:	f06f 0001 	mvn.w	r0, #1
   dc67c:	e7f8      	b.n	dc670 <__ascii_mbtowc+0x16>

000dc67e <_Balloc>:
   dc67e:	b570      	push	{r4, r5, r6, lr}
   dc680:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc682:	4604      	mov	r4, r0
   dc684:	460d      	mov	r5, r1
   dc686:	b93e      	cbnz	r6, dc698 <_Balloc+0x1a>
   dc688:	2010      	movs	r0, #16
   dc68a:	f7fb fe5f 	bl	d834c <malloc>
   dc68e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc692:	6260      	str	r0, [r4, #36]	; 0x24
   dc694:	6006      	str	r6, [r0, #0]
   dc696:	60c6      	str	r6, [r0, #12]
   dc698:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dc69a:	68f3      	ldr	r3, [r6, #12]
   dc69c:	b183      	cbz	r3, dc6c0 <_Balloc+0x42>
   dc69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc6a0:	68db      	ldr	r3, [r3, #12]
   dc6a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dc6a6:	b9b8      	cbnz	r0, dc6d8 <_Balloc+0x5a>
   dc6a8:	2101      	movs	r1, #1
   dc6aa:	fa01 f605 	lsl.w	r6, r1, r5
   dc6ae:	1d72      	adds	r2, r6, #5
   dc6b0:	0092      	lsls	r2, r2, #2
   dc6b2:	4620      	mov	r0, r4
   dc6b4:	f000 fc23 	bl	dcefe <_calloc_r>
   dc6b8:	b160      	cbz	r0, dc6d4 <_Balloc+0x56>
   dc6ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dc6be:	e00e      	b.n	dc6de <_Balloc+0x60>
   dc6c0:	2221      	movs	r2, #33	; 0x21
   dc6c2:	2104      	movs	r1, #4
   dc6c4:	4620      	mov	r0, r4
   dc6c6:	f000 fc1a 	bl	dcefe <_calloc_r>
   dc6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc6cc:	60f0      	str	r0, [r6, #12]
   dc6ce:	68db      	ldr	r3, [r3, #12]
   dc6d0:	2b00      	cmp	r3, #0
   dc6d2:	d1e4      	bne.n	dc69e <_Balloc+0x20>
   dc6d4:	2000      	movs	r0, #0
   dc6d6:	bd70      	pop	{r4, r5, r6, pc}
   dc6d8:	6802      	ldr	r2, [r0, #0]
   dc6da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dc6de:	2300      	movs	r3, #0
   dc6e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dc6e4:	e7f7      	b.n	dc6d6 <_Balloc+0x58>

000dc6e6 <_Bfree>:
   dc6e6:	b570      	push	{r4, r5, r6, lr}
   dc6e8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc6ea:	4605      	mov	r5, r0
   dc6ec:	460c      	mov	r4, r1
   dc6ee:	b93e      	cbnz	r6, dc700 <_Bfree+0x1a>
   dc6f0:	2010      	movs	r0, #16
   dc6f2:	f7fb fe2b 	bl	d834c <malloc>
   dc6f6:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc6fa:	6268      	str	r0, [r5, #36]	; 0x24
   dc6fc:	6006      	str	r6, [r0, #0]
   dc6fe:	60c6      	str	r6, [r0, #12]
   dc700:	b13c      	cbz	r4, dc712 <_Bfree+0x2c>
   dc702:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dc704:	6862      	ldr	r2, [r4, #4]
   dc706:	68db      	ldr	r3, [r3, #12]
   dc708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc70c:	6021      	str	r1, [r4, #0]
   dc70e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dc712:	bd70      	pop	{r4, r5, r6, pc}

000dc714 <__multadd>:
   dc714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc718:	690e      	ldr	r6, [r1, #16]
   dc71a:	4607      	mov	r7, r0
   dc71c:	4698      	mov	r8, r3
   dc71e:	460c      	mov	r4, r1
   dc720:	f101 0014 	add.w	r0, r1, #20
   dc724:	2300      	movs	r3, #0
   dc726:	6805      	ldr	r5, [r0, #0]
   dc728:	b2a9      	uxth	r1, r5
   dc72a:	fb02 8101 	mla	r1, r2, r1, r8
   dc72e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dc732:	0c2d      	lsrs	r5, r5, #16
   dc734:	fb02 c505 	mla	r5, r2, r5, ip
   dc738:	b289      	uxth	r1, r1
   dc73a:	3301      	adds	r3, #1
   dc73c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dc740:	429e      	cmp	r6, r3
   dc742:	f840 1b04 	str.w	r1, [r0], #4
   dc746:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dc74a:	dcec      	bgt.n	dc726 <__multadd+0x12>
   dc74c:	f1b8 0f00 	cmp.w	r8, #0
   dc750:	d01b      	beq.n	dc78a <__multadd+0x76>
   dc752:	68a3      	ldr	r3, [r4, #8]
   dc754:	42b3      	cmp	r3, r6
   dc756:	dc12      	bgt.n	dc77e <__multadd+0x6a>
   dc758:	6861      	ldr	r1, [r4, #4]
   dc75a:	4638      	mov	r0, r7
   dc75c:	3101      	adds	r1, #1
   dc75e:	f7ff ff8e 	bl	dc67e <_Balloc>
   dc762:	6922      	ldr	r2, [r4, #16]
   dc764:	3202      	adds	r2, #2
   dc766:	f104 010c 	add.w	r1, r4, #12
   dc76a:	4605      	mov	r5, r0
   dc76c:	0092      	lsls	r2, r2, #2
   dc76e:	300c      	adds	r0, #12
   dc770:	f7fe fc4b 	bl	db00a <memcpy>
   dc774:	4621      	mov	r1, r4
   dc776:	4638      	mov	r0, r7
   dc778:	f7ff ffb5 	bl	dc6e6 <_Bfree>
   dc77c:	462c      	mov	r4, r5
   dc77e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dc782:	3601      	adds	r6, #1
   dc784:	f8c3 8014 	str.w	r8, [r3, #20]
   dc788:	6126      	str	r6, [r4, #16]
   dc78a:	4620      	mov	r0, r4
   dc78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc790 <__s2b>:
   dc790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc794:	460c      	mov	r4, r1
   dc796:	4615      	mov	r5, r2
   dc798:	461f      	mov	r7, r3
   dc79a:	2209      	movs	r2, #9
   dc79c:	3308      	adds	r3, #8
   dc79e:	4606      	mov	r6, r0
   dc7a0:	fb93 f3f2 	sdiv	r3, r3, r2
   dc7a4:	2100      	movs	r1, #0
   dc7a6:	2201      	movs	r2, #1
   dc7a8:	429a      	cmp	r2, r3
   dc7aa:	db20      	blt.n	dc7ee <__s2b+0x5e>
   dc7ac:	4630      	mov	r0, r6
   dc7ae:	f7ff ff66 	bl	dc67e <_Balloc>
   dc7b2:	9b08      	ldr	r3, [sp, #32]
   dc7b4:	6143      	str	r3, [r0, #20]
   dc7b6:	2d09      	cmp	r5, #9
   dc7b8:	f04f 0301 	mov.w	r3, #1
   dc7bc:	6103      	str	r3, [r0, #16]
   dc7be:	dd19      	ble.n	dc7f4 <__s2b+0x64>
   dc7c0:	f104 0909 	add.w	r9, r4, #9
   dc7c4:	46c8      	mov	r8, r9
   dc7c6:	442c      	add	r4, r5
   dc7c8:	f818 3b01 	ldrb.w	r3, [r8], #1
   dc7cc:	4601      	mov	r1, r0
   dc7ce:	3b30      	subs	r3, #48	; 0x30
   dc7d0:	220a      	movs	r2, #10
   dc7d2:	4630      	mov	r0, r6
   dc7d4:	f7ff ff9e 	bl	dc714 <__multadd>
   dc7d8:	45a0      	cmp	r8, r4
   dc7da:	d1f5      	bne.n	dc7c8 <__s2b+0x38>
   dc7dc:	f1a5 0408 	sub.w	r4, r5, #8
   dc7e0:	444c      	add	r4, r9
   dc7e2:	1b2d      	subs	r5, r5, r4
   dc7e4:	1963      	adds	r3, r4, r5
   dc7e6:	42bb      	cmp	r3, r7
   dc7e8:	db07      	blt.n	dc7fa <__s2b+0x6a>
   dc7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc7ee:	0052      	lsls	r2, r2, #1
   dc7f0:	3101      	adds	r1, #1
   dc7f2:	e7d9      	b.n	dc7a8 <__s2b+0x18>
   dc7f4:	340a      	adds	r4, #10
   dc7f6:	2509      	movs	r5, #9
   dc7f8:	e7f3      	b.n	dc7e2 <__s2b+0x52>
   dc7fa:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc7fe:	4601      	mov	r1, r0
   dc800:	3b30      	subs	r3, #48	; 0x30
   dc802:	220a      	movs	r2, #10
   dc804:	4630      	mov	r0, r6
   dc806:	f7ff ff85 	bl	dc714 <__multadd>
   dc80a:	e7eb      	b.n	dc7e4 <__s2b+0x54>

000dc80c <__hi0bits>:
   dc80c:	0c03      	lsrs	r3, r0, #16
   dc80e:	041b      	lsls	r3, r3, #16
   dc810:	b9d3      	cbnz	r3, dc848 <__hi0bits+0x3c>
   dc812:	0400      	lsls	r0, r0, #16
   dc814:	2310      	movs	r3, #16
   dc816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc81a:	bf04      	itt	eq
   dc81c:	0200      	lsleq	r0, r0, #8
   dc81e:	3308      	addeq	r3, #8
   dc820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc824:	bf04      	itt	eq
   dc826:	0100      	lsleq	r0, r0, #4
   dc828:	3304      	addeq	r3, #4
   dc82a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc82e:	bf04      	itt	eq
   dc830:	0080      	lsleq	r0, r0, #2
   dc832:	3302      	addeq	r3, #2
   dc834:	2800      	cmp	r0, #0
   dc836:	db05      	blt.n	dc844 <__hi0bits+0x38>
   dc838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dc83c:	f103 0301 	add.w	r3, r3, #1
   dc840:	bf08      	it	eq
   dc842:	2320      	moveq	r3, #32
   dc844:	4618      	mov	r0, r3
   dc846:	4770      	bx	lr
   dc848:	2300      	movs	r3, #0
   dc84a:	e7e4      	b.n	dc816 <__hi0bits+0xa>

000dc84c <__lo0bits>:
   dc84c:	6803      	ldr	r3, [r0, #0]
   dc84e:	f013 0207 	ands.w	r2, r3, #7
   dc852:	4601      	mov	r1, r0
   dc854:	d00b      	beq.n	dc86e <__lo0bits+0x22>
   dc856:	07da      	lsls	r2, r3, #31
   dc858:	d424      	bmi.n	dc8a4 <__lo0bits+0x58>
   dc85a:	0798      	lsls	r0, r3, #30
   dc85c:	bf49      	itett	mi
   dc85e:	085b      	lsrmi	r3, r3, #1
   dc860:	089b      	lsrpl	r3, r3, #2
   dc862:	2001      	movmi	r0, #1
   dc864:	600b      	strmi	r3, [r1, #0]
   dc866:	bf5c      	itt	pl
   dc868:	600b      	strpl	r3, [r1, #0]
   dc86a:	2002      	movpl	r0, #2
   dc86c:	4770      	bx	lr
   dc86e:	b298      	uxth	r0, r3
   dc870:	b9b0      	cbnz	r0, dc8a0 <__lo0bits+0x54>
   dc872:	0c1b      	lsrs	r3, r3, #16
   dc874:	2010      	movs	r0, #16
   dc876:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc87a:	bf04      	itt	eq
   dc87c:	0a1b      	lsreq	r3, r3, #8
   dc87e:	3008      	addeq	r0, #8
   dc880:	071a      	lsls	r2, r3, #28
   dc882:	bf04      	itt	eq
   dc884:	091b      	lsreq	r3, r3, #4
   dc886:	3004      	addeq	r0, #4
   dc888:	079a      	lsls	r2, r3, #30
   dc88a:	bf04      	itt	eq
   dc88c:	089b      	lsreq	r3, r3, #2
   dc88e:	3002      	addeq	r0, #2
   dc890:	07da      	lsls	r2, r3, #31
   dc892:	d403      	bmi.n	dc89c <__lo0bits+0x50>
   dc894:	085b      	lsrs	r3, r3, #1
   dc896:	f100 0001 	add.w	r0, r0, #1
   dc89a:	d005      	beq.n	dc8a8 <__lo0bits+0x5c>
   dc89c:	600b      	str	r3, [r1, #0]
   dc89e:	4770      	bx	lr
   dc8a0:	4610      	mov	r0, r2
   dc8a2:	e7e8      	b.n	dc876 <__lo0bits+0x2a>
   dc8a4:	2000      	movs	r0, #0
   dc8a6:	4770      	bx	lr
   dc8a8:	2020      	movs	r0, #32
   dc8aa:	4770      	bx	lr

000dc8ac <__i2b>:
   dc8ac:	b510      	push	{r4, lr}
   dc8ae:	460c      	mov	r4, r1
   dc8b0:	2101      	movs	r1, #1
   dc8b2:	f7ff fee4 	bl	dc67e <_Balloc>
   dc8b6:	2201      	movs	r2, #1
   dc8b8:	6144      	str	r4, [r0, #20]
   dc8ba:	6102      	str	r2, [r0, #16]
   dc8bc:	bd10      	pop	{r4, pc}

000dc8be <__multiply>:
   dc8be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc8c2:	4615      	mov	r5, r2
   dc8c4:	690a      	ldr	r2, [r1, #16]
   dc8c6:	692b      	ldr	r3, [r5, #16]
   dc8c8:	429a      	cmp	r2, r3
   dc8ca:	bfb8      	it	lt
   dc8cc:	460b      	movlt	r3, r1
   dc8ce:	460c      	mov	r4, r1
   dc8d0:	bfbc      	itt	lt
   dc8d2:	462c      	movlt	r4, r5
   dc8d4:	461d      	movlt	r5, r3
   dc8d6:	6927      	ldr	r7, [r4, #16]
   dc8d8:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dc8dc:	68a3      	ldr	r3, [r4, #8]
   dc8de:	6861      	ldr	r1, [r4, #4]
   dc8e0:	eb07 0609 	add.w	r6, r7, r9
   dc8e4:	42b3      	cmp	r3, r6
   dc8e6:	bfb8      	it	lt
   dc8e8:	3101      	addlt	r1, #1
   dc8ea:	b085      	sub	sp, #20
   dc8ec:	f7ff fec7 	bl	dc67e <_Balloc>
   dc8f0:	f100 0114 	add.w	r1, r0, #20
   dc8f4:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dc8f8:	460b      	mov	r3, r1
   dc8fa:	2200      	movs	r2, #0
   dc8fc:	4543      	cmp	r3, r8
   dc8fe:	d31d      	bcc.n	dc93c <__multiply+0x7e>
   dc900:	f104 0314 	add.w	r3, r4, #20
   dc904:	f105 0214 	add.w	r2, r5, #20
   dc908:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dc90c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dc910:	9302      	str	r3, [sp, #8]
   dc912:	1b3b      	subs	r3, r7, r4
   dc914:	3b15      	subs	r3, #21
   dc916:	f023 0303 	bic.w	r3, r3, #3
   dc91a:	3304      	adds	r3, #4
   dc91c:	f104 0515 	add.w	r5, r4, #21
   dc920:	42af      	cmp	r7, r5
   dc922:	bf38      	it	cc
   dc924:	2304      	movcc	r3, #4
   dc926:	9301      	str	r3, [sp, #4]
   dc928:	9b02      	ldr	r3, [sp, #8]
   dc92a:	9203      	str	r2, [sp, #12]
   dc92c:	4293      	cmp	r3, r2
   dc92e:	d808      	bhi.n	dc942 <__multiply+0x84>
   dc930:	2e00      	cmp	r6, #0
   dc932:	dc5a      	bgt.n	dc9ea <__multiply+0x12c>
   dc934:	6106      	str	r6, [r0, #16]
   dc936:	b005      	add	sp, #20
   dc938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc93c:	f843 2b04 	str.w	r2, [r3], #4
   dc940:	e7dc      	b.n	dc8fc <__multiply+0x3e>
   dc942:	f8b2 a000 	ldrh.w	sl, [r2]
   dc946:	f1ba 0f00 	cmp.w	sl, #0
   dc94a:	d024      	beq.n	dc996 <__multiply+0xd8>
   dc94c:	f104 0e14 	add.w	lr, r4, #20
   dc950:	4689      	mov	r9, r1
   dc952:	f04f 0c00 	mov.w	ip, #0
   dc956:	f85e 5b04 	ldr.w	r5, [lr], #4
   dc95a:	f8d9 b000 	ldr.w	fp, [r9]
   dc95e:	b2ab      	uxth	r3, r5
   dc960:	fa1f fb8b 	uxth.w	fp, fp
   dc964:	fb0a b303 	mla	r3, sl, r3, fp
   dc968:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc96c:	f8d9 5000 	ldr.w	r5, [r9]
   dc970:	4463      	add	r3, ip
   dc972:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc976:	fb0a c50b 	mla	r5, sl, fp, ip
   dc97a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc97e:	b29b      	uxth	r3, r3
   dc980:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc984:	4577      	cmp	r7, lr
   dc986:	f849 3b04 	str.w	r3, [r9], #4
   dc98a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc98e:	d8e2      	bhi.n	dc956 <__multiply+0x98>
   dc990:	9b01      	ldr	r3, [sp, #4]
   dc992:	f841 c003 	str.w	ip, [r1, r3]
   dc996:	9b03      	ldr	r3, [sp, #12]
   dc998:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc99c:	3204      	adds	r2, #4
   dc99e:	f1b9 0f00 	cmp.w	r9, #0
   dc9a2:	d020      	beq.n	dc9e6 <__multiply+0x128>
   dc9a4:	680b      	ldr	r3, [r1, #0]
   dc9a6:	f104 0c14 	add.w	ip, r4, #20
   dc9aa:	468e      	mov	lr, r1
   dc9ac:	f04f 0a00 	mov.w	sl, #0
   dc9b0:	f8bc 5000 	ldrh.w	r5, [ip]
   dc9b4:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc9b8:	fb09 b505 	mla	r5, r9, r5, fp
   dc9bc:	44aa      	add	sl, r5
   dc9be:	b29b      	uxth	r3, r3
   dc9c0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc9c4:	f84e 3b04 	str.w	r3, [lr], #4
   dc9c8:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc9cc:	f8be 5000 	ldrh.w	r5, [lr]
   dc9d0:	0c1b      	lsrs	r3, r3, #16
   dc9d2:	fb09 5303 	mla	r3, r9, r3, r5
   dc9d6:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc9da:	4567      	cmp	r7, ip
   dc9dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc9e0:	d8e6      	bhi.n	dc9b0 <__multiply+0xf2>
   dc9e2:	9d01      	ldr	r5, [sp, #4]
   dc9e4:	514b      	str	r3, [r1, r5]
   dc9e6:	3104      	adds	r1, #4
   dc9e8:	e79e      	b.n	dc928 <__multiply+0x6a>
   dc9ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc9ee:	2b00      	cmp	r3, #0
   dc9f0:	d1a0      	bne.n	dc934 <__multiply+0x76>
   dc9f2:	3e01      	subs	r6, #1
   dc9f4:	e79c      	b.n	dc930 <__multiply+0x72>
	...

000dc9f8 <__pow5mult>:
   dc9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc9fc:	4615      	mov	r5, r2
   dc9fe:	f012 0203 	ands.w	r2, r2, #3
   dca02:	4606      	mov	r6, r0
   dca04:	460f      	mov	r7, r1
   dca06:	d007      	beq.n	dca18 <__pow5mult+0x20>
   dca08:	4c21      	ldr	r4, [pc, #132]	; (dca90 <__pow5mult+0x98>)
   dca0a:	3a01      	subs	r2, #1
   dca0c:	2300      	movs	r3, #0
   dca0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dca12:	f7ff fe7f 	bl	dc714 <__multadd>
   dca16:	4607      	mov	r7, r0
   dca18:	10ad      	asrs	r5, r5, #2
   dca1a:	d035      	beq.n	dca88 <__pow5mult+0x90>
   dca1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dca1e:	b93c      	cbnz	r4, dca30 <__pow5mult+0x38>
   dca20:	2010      	movs	r0, #16
   dca22:	f7fb fc93 	bl	d834c <malloc>
   dca26:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dca2a:	6270      	str	r0, [r6, #36]	; 0x24
   dca2c:	6004      	str	r4, [r0, #0]
   dca2e:	60c4      	str	r4, [r0, #12]
   dca30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dca34:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dca38:	b94c      	cbnz	r4, dca4e <__pow5mult+0x56>
   dca3a:	f240 2171 	movw	r1, #625	; 0x271
   dca3e:	4630      	mov	r0, r6
   dca40:	f7ff ff34 	bl	dc8ac <__i2b>
   dca44:	2300      	movs	r3, #0
   dca46:	f8c8 0008 	str.w	r0, [r8, #8]
   dca4a:	4604      	mov	r4, r0
   dca4c:	6003      	str	r3, [r0, #0]
   dca4e:	f04f 0900 	mov.w	r9, #0
   dca52:	07eb      	lsls	r3, r5, #31
   dca54:	d50a      	bpl.n	dca6c <__pow5mult+0x74>
   dca56:	4639      	mov	r1, r7
   dca58:	4622      	mov	r2, r4
   dca5a:	4630      	mov	r0, r6
   dca5c:	f7ff ff2f 	bl	dc8be <__multiply>
   dca60:	4639      	mov	r1, r7
   dca62:	4680      	mov	r8, r0
   dca64:	4630      	mov	r0, r6
   dca66:	f7ff fe3e 	bl	dc6e6 <_Bfree>
   dca6a:	4647      	mov	r7, r8
   dca6c:	106d      	asrs	r5, r5, #1
   dca6e:	d00b      	beq.n	dca88 <__pow5mult+0x90>
   dca70:	6820      	ldr	r0, [r4, #0]
   dca72:	b938      	cbnz	r0, dca84 <__pow5mult+0x8c>
   dca74:	4622      	mov	r2, r4
   dca76:	4621      	mov	r1, r4
   dca78:	4630      	mov	r0, r6
   dca7a:	f7ff ff20 	bl	dc8be <__multiply>
   dca7e:	6020      	str	r0, [r4, #0]
   dca80:	f8c0 9000 	str.w	r9, [r0]
   dca84:	4604      	mov	r4, r0
   dca86:	e7e4      	b.n	dca52 <__pow5mult+0x5a>
   dca88:	4638      	mov	r0, r7
   dca8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dca8e:	bf00      	nop
   dca90:	000de2e8 	.word	0x000de2e8

000dca94 <__lshift>:
   dca94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dca98:	460c      	mov	r4, r1
   dca9a:	6849      	ldr	r1, [r1, #4]
   dca9c:	6923      	ldr	r3, [r4, #16]
   dca9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dcaa2:	68a3      	ldr	r3, [r4, #8]
   dcaa4:	4607      	mov	r7, r0
   dcaa6:	4691      	mov	r9, r2
   dcaa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dcaac:	f108 0601 	add.w	r6, r8, #1
   dcab0:	42b3      	cmp	r3, r6
   dcab2:	db3f      	blt.n	dcb34 <__lshift+0xa0>
   dcab4:	4638      	mov	r0, r7
   dcab6:	f7ff fde2 	bl	dc67e <_Balloc>
   dcaba:	2300      	movs	r3, #0
   dcabc:	4605      	mov	r5, r0
   dcabe:	f100 0114 	add.w	r1, r0, #20
   dcac2:	f100 0210 	add.w	r2, r0, #16
   dcac6:	4618      	mov	r0, r3
   dcac8:	4553      	cmp	r3, sl
   dcaca:	db36      	blt.n	dcb3a <__lshift+0xa6>
   dcacc:	6920      	ldr	r0, [r4, #16]
   dcace:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dcad2:	f104 0314 	add.w	r3, r4, #20
   dcad6:	f019 091f 	ands.w	r9, r9, #31
   dcada:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dcade:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dcae2:	d02e      	beq.n	dcb42 <__lshift+0xae>
   dcae4:	f1c9 0e20 	rsb	lr, r9, #32
   dcae8:	468a      	mov	sl, r1
   dcaea:	2200      	movs	r2, #0
   dcaec:	6818      	ldr	r0, [r3, #0]
   dcaee:	fa00 f009 	lsl.w	r0, r0, r9
   dcaf2:	4302      	orrs	r2, r0
   dcaf4:	f84a 2b04 	str.w	r2, [sl], #4
   dcaf8:	f853 2b04 	ldr.w	r2, [r3], #4
   dcafc:	459c      	cmp	ip, r3
   dcafe:	fa22 f20e 	lsr.w	r2, r2, lr
   dcb02:	d8f3      	bhi.n	dcaec <__lshift+0x58>
   dcb04:	ebac 0304 	sub.w	r3, ip, r4
   dcb08:	3b15      	subs	r3, #21
   dcb0a:	f023 0303 	bic.w	r3, r3, #3
   dcb0e:	3304      	adds	r3, #4
   dcb10:	f104 0015 	add.w	r0, r4, #21
   dcb14:	4560      	cmp	r0, ip
   dcb16:	bf88      	it	hi
   dcb18:	2304      	movhi	r3, #4
   dcb1a:	50ca      	str	r2, [r1, r3]
   dcb1c:	b10a      	cbz	r2, dcb22 <__lshift+0x8e>
   dcb1e:	f108 0602 	add.w	r6, r8, #2
   dcb22:	3e01      	subs	r6, #1
   dcb24:	4638      	mov	r0, r7
   dcb26:	612e      	str	r6, [r5, #16]
   dcb28:	4621      	mov	r1, r4
   dcb2a:	f7ff fddc 	bl	dc6e6 <_Bfree>
   dcb2e:	4628      	mov	r0, r5
   dcb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcb34:	3101      	adds	r1, #1
   dcb36:	005b      	lsls	r3, r3, #1
   dcb38:	e7ba      	b.n	dcab0 <__lshift+0x1c>
   dcb3a:	f842 0f04 	str.w	r0, [r2, #4]!
   dcb3e:	3301      	adds	r3, #1
   dcb40:	e7c2      	b.n	dcac8 <__lshift+0x34>
   dcb42:	3904      	subs	r1, #4
   dcb44:	f853 2b04 	ldr.w	r2, [r3], #4
   dcb48:	f841 2f04 	str.w	r2, [r1, #4]!
   dcb4c:	459c      	cmp	ip, r3
   dcb4e:	d8f9      	bhi.n	dcb44 <__lshift+0xb0>
   dcb50:	e7e7      	b.n	dcb22 <__lshift+0x8e>

000dcb52 <__mcmp>:
   dcb52:	b530      	push	{r4, r5, lr}
   dcb54:	6902      	ldr	r2, [r0, #16]
   dcb56:	690c      	ldr	r4, [r1, #16]
   dcb58:	1b12      	subs	r2, r2, r4
   dcb5a:	d10e      	bne.n	dcb7a <__mcmp+0x28>
   dcb5c:	f100 0314 	add.w	r3, r0, #20
   dcb60:	3114      	adds	r1, #20
   dcb62:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dcb66:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dcb6a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dcb6e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dcb72:	42a5      	cmp	r5, r4
   dcb74:	d003      	beq.n	dcb7e <__mcmp+0x2c>
   dcb76:	d305      	bcc.n	dcb84 <__mcmp+0x32>
   dcb78:	2201      	movs	r2, #1
   dcb7a:	4610      	mov	r0, r2
   dcb7c:	bd30      	pop	{r4, r5, pc}
   dcb7e:	4283      	cmp	r3, r0
   dcb80:	d3f3      	bcc.n	dcb6a <__mcmp+0x18>
   dcb82:	e7fa      	b.n	dcb7a <__mcmp+0x28>
   dcb84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dcb88:	e7f7      	b.n	dcb7a <__mcmp+0x28>

000dcb8a <__mdiff>:
   dcb8a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcb8e:	460c      	mov	r4, r1
   dcb90:	4606      	mov	r6, r0
   dcb92:	4611      	mov	r1, r2
   dcb94:	4620      	mov	r0, r4
   dcb96:	4617      	mov	r7, r2
   dcb98:	f7ff ffdb 	bl	dcb52 <__mcmp>
   dcb9c:	1e05      	subs	r5, r0, #0
   dcb9e:	d108      	bne.n	dcbb2 <__mdiff+0x28>
   dcba0:	4629      	mov	r1, r5
   dcba2:	4630      	mov	r0, r6
   dcba4:	f7ff fd6b 	bl	dc67e <_Balloc>
   dcba8:	2301      	movs	r3, #1
   dcbaa:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dcbae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcbb2:	bfa4      	itt	ge
   dcbb4:	463b      	movge	r3, r7
   dcbb6:	4627      	movge	r7, r4
   dcbb8:	4630      	mov	r0, r6
   dcbba:	6879      	ldr	r1, [r7, #4]
   dcbbc:	bfa6      	itte	ge
   dcbbe:	461c      	movge	r4, r3
   dcbc0:	2500      	movge	r5, #0
   dcbc2:	2501      	movlt	r5, #1
   dcbc4:	f7ff fd5b 	bl	dc67e <_Balloc>
   dcbc8:	693e      	ldr	r6, [r7, #16]
   dcbca:	60c5      	str	r5, [r0, #12]
   dcbcc:	6925      	ldr	r5, [r4, #16]
   dcbce:	f107 0114 	add.w	r1, r7, #20
   dcbd2:	f104 0914 	add.w	r9, r4, #20
   dcbd6:	f100 0e14 	add.w	lr, r0, #20
   dcbda:	f107 0210 	add.w	r2, r7, #16
   dcbde:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dcbe2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dcbe6:	46f2      	mov	sl, lr
   dcbe8:	2700      	movs	r7, #0
   dcbea:	f859 3b04 	ldr.w	r3, [r9], #4
   dcbee:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dcbf2:	fa1f f883 	uxth.w	r8, r3
   dcbf6:	fa17 f78b 	uxtah	r7, r7, fp
   dcbfa:	0c1b      	lsrs	r3, r3, #16
   dcbfc:	eba7 0808 	sub.w	r8, r7, r8
   dcc00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dcc04:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dcc08:	fa1f f888 	uxth.w	r8, r8
   dcc0c:	141f      	asrs	r7, r3, #16
   dcc0e:	454d      	cmp	r5, r9
   dcc10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dcc14:	f84a 3b04 	str.w	r3, [sl], #4
   dcc18:	d8e7      	bhi.n	dcbea <__mdiff+0x60>
   dcc1a:	1b2b      	subs	r3, r5, r4
   dcc1c:	3b15      	subs	r3, #21
   dcc1e:	f023 0303 	bic.w	r3, r3, #3
   dcc22:	3304      	adds	r3, #4
   dcc24:	3415      	adds	r4, #21
   dcc26:	42a5      	cmp	r5, r4
   dcc28:	bf38      	it	cc
   dcc2a:	2304      	movcc	r3, #4
   dcc2c:	4419      	add	r1, r3
   dcc2e:	4473      	add	r3, lr
   dcc30:	469e      	mov	lr, r3
   dcc32:	460d      	mov	r5, r1
   dcc34:	4565      	cmp	r5, ip
   dcc36:	d30e      	bcc.n	dcc56 <__mdiff+0xcc>
   dcc38:	f10c 0203 	add.w	r2, ip, #3
   dcc3c:	1a52      	subs	r2, r2, r1
   dcc3e:	f022 0203 	bic.w	r2, r2, #3
   dcc42:	3903      	subs	r1, #3
   dcc44:	458c      	cmp	ip, r1
   dcc46:	bf38      	it	cc
   dcc48:	2200      	movcc	r2, #0
   dcc4a:	441a      	add	r2, r3
   dcc4c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dcc50:	b17b      	cbz	r3, dcc72 <__mdiff+0xe8>
   dcc52:	6106      	str	r6, [r0, #16]
   dcc54:	e7ab      	b.n	dcbae <__mdiff+0x24>
   dcc56:	f855 8b04 	ldr.w	r8, [r5], #4
   dcc5a:	fa17 f488 	uxtah	r4, r7, r8
   dcc5e:	1422      	asrs	r2, r4, #16
   dcc60:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dcc64:	b2a4      	uxth	r4, r4
   dcc66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dcc6a:	f84e 4b04 	str.w	r4, [lr], #4
   dcc6e:	1417      	asrs	r7, r2, #16
   dcc70:	e7e0      	b.n	dcc34 <__mdiff+0xaa>
   dcc72:	3e01      	subs	r6, #1
   dcc74:	e7ea      	b.n	dcc4c <__mdiff+0xc2>
	...

000dcc78 <__ulp>:
   dcc78:	b082      	sub	sp, #8
   dcc7a:	ed8d 0b00 	vstr	d0, [sp]
   dcc7e:	9b01      	ldr	r3, [sp, #4]
   dcc80:	4912      	ldr	r1, [pc, #72]	; (dcccc <__ulp+0x54>)
   dcc82:	4019      	ands	r1, r3
   dcc84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dcc88:	2900      	cmp	r1, #0
   dcc8a:	dd05      	ble.n	dcc98 <__ulp+0x20>
   dcc8c:	2200      	movs	r2, #0
   dcc8e:	460b      	mov	r3, r1
   dcc90:	ec43 2b10 	vmov	d0, r2, r3
   dcc94:	b002      	add	sp, #8
   dcc96:	4770      	bx	lr
   dcc98:	4249      	negs	r1, r1
   dcc9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dcc9e:	ea4f 5021 	mov.w	r0, r1, asr #20
   dcca2:	f04f 0200 	mov.w	r2, #0
   dcca6:	f04f 0300 	mov.w	r3, #0
   dccaa:	da04      	bge.n	dccb6 <__ulp+0x3e>
   dccac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dccb0:	fa41 f300 	asr.w	r3, r1, r0
   dccb4:	e7ec      	b.n	dcc90 <__ulp+0x18>
   dccb6:	f1a0 0114 	sub.w	r1, r0, #20
   dccba:	291e      	cmp	r1, #30
   dccbc:	bfda      	itte	le
   dccbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dccc2:	fa20 f101 	lsrle.w	r1, r0, r1
   dccc6:	2101      	movgt	r1, #1
   dccc8:	460a      	mov	r2, r1
   dccca:	e7e1      	b.n	dcc90 <__ulp+0x18>
   dcccc:	7ff00000 	.word	0x7ff00000

000dccd0 <__b2d>:
   dccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dccd2:	6905      	ldr	r5, [r0, #16]
   dccd4:	f100 0714 	add.w	r7, r0, #20
   dccd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dccdc:	1f2e      	subs	r6, r5, #4
   dccde:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dcce2:	4620      	mov	r0, r4
   dcce4:	f7ff fd92 	bl	dc80c <__hi0bits>
   dcce8:	f1c0 0320 	rsb	r3, r0, #32
   dccec:	280a      	cmp	r0, #10
   dccee:	f8df c07c 	ldr.w	ip, [pc, #124]	; dcd6c <__b2d+0x9c>
   dccf2:	600b      	str	r3, [r1, #0]
   dccf4:	dc14      	bgt.n	dcd20 <__b2d+0x50>
   dccf6:	f1c0 0e0b 	rsb	lr, r0, #11
   dccfa:	fa24 f10e 	lsr.w	r1, r4, lr
   dccfe:	42b7      	cmp	r7, r6
   dcd00:	ea41 030c 	orr.w	r3, r1, ip
   dcd04:	bf34      	ite	cc
   dcd06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcd0a:	2100      	movcs	r1, #0
   dcd0c:	3015      	adds	r0, #21
   dcd0e:	fa04 f000 	lsl.w	r0, r4, r0
   dcd12:	fa21 f10e 	lsr.w	r1, r1, lr
   dcd16:	ea40 0201 	orr.w	r2, r0, r1
   dcd1a:	ec43 2b10 	vmov	d0, r2, r3
   dcd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dcd20:	42b7      	cmp	r7, r6
   dcd22:	bf3a      	itte	cc
   dcd24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcd28:	f1a5 0608 	subcc.w	r6, r5, #8
   dcd2c:	2100      	movcs	r1, #0
   dcd2e:	380b      	subs	r0, #11
   dcd30:	d017      	beq.n	dcd62 <__b2d+0x92>
   dcd32:	f1c0 0c20 	rsb	ip, r0, #32
   dcd36:	fa04 f500 	lsl.w	r5, r4, r0
   dcd3a:	42be      	cmp	r6, r7
   dcd3c:	fa21 f40c 	lsr.w	r4, r1, ip
   dcd40:	ea45 0504 	orr.w	r5, r5, r4
   dcd44:	bf8c      	ite	hi
   dcd46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dcd4a:	2400      	movls	r4, #0
   dcd4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dcd50:	fa01 f000 	lsl.w	r0, r1, r0
   dcd54:	fa24 f40c 	lsr.w	r4, r4, ip
   dcd58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcd5c:	ea40 0204 	orr.w	r2, r0, r4
   dcd60:	e7db      	b.n	dcd1a <__b2d+0x4a>
   dcd62:	ea44 030c 	orr.w	r3, r4, ip
   dcd66:	460a      	mov	r2, r1
   dcd68:	e7d7      	b.n	dcd1a <__b2d+0x4a>
   dcd6a:	bf00      	nop
   dcd6c:	3ff00000 	.word	0x3ff00000

000dcd70 <__d2b>:
   dcd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcd74:	4689      	mov	r9, r1
   dcd76:	2101      	movs	r1, #1
   dcd78:	ec57 6b10 	vmov	r6, r7, d0
   dcd7c:	4690      	mov	r8, r2
   dcd7e:	f7ff fc7e 	bl	dc67e <_Balloc>
   dcd82:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dcd86:	4604      	mov	r4, r0
   dcd88:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dcd8c:	bb35      	cbnz	r5, dcddc <__d2b+0x6c>
   dcd8e:	2e00      	cmp	r6, #0
   dcd90:	9301      	str	r3, [sp, #4]
   dcd92:	d028      	beq.n	dcde6 <__d2b+0x76>
   dcd94:	4668      	mov	r0, sp
   dcd96:	9600      	str	r6, [sp, #0]
   dcd98:	f7ff fd58 	bl	dc84c <__lo0bits>
   dcd9c:	9900      	ldr	r1, [sp, #0]
   dcd9e:	b300      	cbz	r0, dcde2 <__d2b+0x72>
   dcda0:	9a01      	ldr	r2, [sp, #4]
   dcda2:	f1c0 0320 	rsb	r3, r0, #32
   dcda6:	fa02 f303 	lsl.w	r3, r2, r3
   dcdaa:	430b      	orrs	r3, r1
   dcdac:	40c2      	lsrs	r2, r0
   dcdae:	6163      	str	r3, [r4, #20]
   dcdb0:	9201      	str	r2, [sp, #4]
   dcdb2:	9b01      	ldr	r3, [sp, #4]
   dcdb4:	61a3      	str	r3, [r4, #24]
   dcdb6:	2b00      	cmp	r3, #0
   dcdb8:	bf14      	ite	ne
   dcdba:	2202      	movne	r2, #2
   dcdbc:	2201      	moveq	r2, #1
   dcdbe:	6122      	str	r2, [r4, #16]
   dcdc0:	b1d5      	cbz	r5, dcdf8 <__d2b+0x88>
   dcdc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dcdc6:	4405      	add	r5, r0
   dcdc8:	f8c9 5000 	str.w	r5, [r9]
   dcdcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dcdd0:	f8c8 0000 	str.w	r0, [r8]
   dcdd4:	4620      	mov	r0, r4
   dcdd6:	b003      	add	sp, #12
   dcdd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dcddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcde0:	e7d5      	b.n	dcd8e <__d2b+0x1e>
   dcde2:	6161      	str	r1, [r4, #20]
   dcde4:	e7e5      	b.n	dcdb2 <__d2b+0x42>
   dcde6:	a801      	add	r0, sp, #4
   dcde8:	f7ff fd30 	bl	dc84c <__lo0bits>
   dcdec:	9b01      	ldr	r3, [sp, #4]
   dcdee:	6163      	str	r3, [r4, #20]
   dcdf0:	2201      	movs	r2, #1
   dcdf2:	6122      	str	r2, [r4, #16]
   dcdf4:	3020      	adds	r0, #32
   dcdf6:	e7e3      	b.n	dcdc0 <__d2b+0x50>
   dcdf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dcdfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dce00:	f8c9 0000 	str.w	r0, [r9]
   dce04:	6918      	ldr	r0, [r3, #16]
   dce06:	f7ff fd01 	bl	dc80c <__hi0bits>
   dce0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dce0e:	e7df      	b.n	dcdd0 <__d2b+0x60>

000dce10 <__ratio>:
   dce10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dce14:	4688      	mov	r8, r1
   dce16:	4669      	mov	r1, sp
   dce18:	4681      	mov	r9, r0
   dce1a:	f7ff ff59 	bl	dccd0 <__b2d>
   dce1e:	a901      	add	r1, sp, #4
   dce20:	4640      	mov	r0, r8
   dce22:	ec55 4b10 	vmov	r4, r5, d0
   dce26:	f7ff ff53 	bl	dccd0 <__b2d>
   dce2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dce2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dce32:	eba3 0c02 	sub.w	ip, r3, r2
   dce36:	e9dd 3200 	ldrd	r3, r2, [sp]
   dce3a:	1a9b      	subs	r3, r3, r2
   dce3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dce40:	ec51 0b10 	vmov	r0, r1, d0
   dce44:	2b00      	cmp	r3, #0
   dce46:	bfd6      	itet	le
   dce48:	460a      	movle	r2, r1
   dce4a:	462a      	movgt	r2, r5
   dce4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dce50:	468b      	mov	fp, r1
   dce52:	462f      	mov	r7, r5
   dce54:	bfd4      	ite	le
   dce56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dce5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dce5e:	4620      	mov	r0, r4
   dce60:	ee10 2a10 	vmov	r2, s0
   dce64:	465b      	mov	r3, fp
   dce66:	4639      	mov	r1, r7
   dce68:	f7fd fcd6 	bl	da818 <__aeabi_ddiv>
   dce6c:	ec41 0b10 	vmov	d0, r0, r1
   dce70:	b003      	add	sp, #12
   dce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dce76 <__copybits>:
   dce76:	3901      	subs	r1, #1
   dce78:	b570      	push	{r4, r5, r6, lr}
   dce7a:	1149      	asrs	r1, r1, #5
   dce7c:	6914      	ldr	r4, [r2, #16]
   dce7e:	3101      	adds	r1, #1
   dce80:	f102 0314 	add.w	r3, r2, #20
   dce84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dce88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dce8c:	1f05      	subs	r5, r0, #4
   dce8e:	42a3      	cmp	r3, r4
   dce90:	d30c      	bcc.n	dceac <__copybits+0x36>
   dce92:	1aa3      	subs	r3, r4, r2
   dce94:	3b11      	subs	r3, #17
   dce96:	f023 0303 	bic.w	r3, r3, #3
   dce9a:	3211      	adds	r2, #17
   dce9c:	42a2      	cmp	r2, r4
   dce9e:	bf88      	it	hi
   dcea0:	2300      	movhi	r3, #0
   dcea2:	4418      	add	r0, r3
   dcea4:	2300      	movs	r3, #0
   dcea6:	4288      	cmp	r0, r1
   dcea8:	d305      	bcc.n	dceb6 <__copybits+0x40>
   dceaa:	bd70      	pop	{r4, r5, r6, pc}
   dceac:	f853 6b04 	ldr.w	r6, [r3], #4
   dceb0:	f845 6f04 	str.w	r6, [r5, #4]!
   dceb4:	e7eb      	b.n	dce8e <__copybits+0x18>
   dceb6:	f840 3b04 	str.w	r3, [r0], #4
   dceba:	e7f4      	b.n	dcea6 <__copybits+0x30>

000dcebc <__any_on>:
   dcebc:	f100 0214 	add.w	r2, r0, #20
   dcec0:	6900      	ldr	r0, [r0, #16]
   dcec2:	114b      	asrs	r3, r1, #5
   dcec4:	4298      	cmp	r0, r3
   dcec6:	b510      	push	{r4, lr}
   dcec8:	db11      	blt.n	dceee <__any_on+0x32>
   dceca:	dd0a      	ble.n	dcee2 <__any_on+0x26>
   dcecc:	f011 011f 	ands.w	r1, r1, #31
   dced0:	d007      	beq.n	dcee2 <__any_on+0x26>
   dced2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dced6:	fa24 f001 	lsr.w	r0, r4, r1
   dceda:	fa00 f101 	lsl.w	r1, r0, r1
   dcede:	428c      	cmp	r4, r1
   dcee0:	d10b      	bne.n	dcefa <__any_on+0x3e>
   dcee2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcee6:	4293      	cmp	r3, r2
   dcee8:	d803      	bhi.n	dcef2 <__any_on+0x36>
   dceea:	2000      	movs	r0, #0
   dceec:	bd10      	pop	{r4, pc}
   dceee:	4603      	mov	r3, r0
   dcef0:	e7f7      	b.n	dcee2 <__any_on+0x26>
   dcef2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dcef6:	2900      	cmp	r1, #0
   dcef8:	d0f5      	beq.n	dcee6 <__any_on+0x2a>
   dcefa:	2001      	movs	r0, #1
   dcefc:	e7f6      	b.n	dceec <__any_on+0x30>

000dcefe <_calloc_r>:
   dcefe:	b513      	push	{r0, r1, r4, lr}
   dcf00:	434a      	muls	r2, r1
   dcf02:	4611      	mov	r1, r2
   dcf04:	9201      	str	r2, [sp, #4]
   dcf06:	f7fb fa59 	bl	d83bc <_malloc_r>
   dcf0a:	4604      	mov	r4, r0
   dcf0c:	b118      	cbz	r0, dcf16 <_calloc_r+0x18>
   dcf0e:	9a01      	ldr	r2, [sp, #4]
   dcf10:	2100      	movs	r1, #0
   dcf12:	f7fe f888 	bl	db026 <memset>
   dcf16:	4620      	mov	r0, r4
   dcf18:	b002      	add	sp, #8
   dcf1a:	bd10      	pop	{r4, pc}
   dcf1c:	0000      	movs	r0, r0
	...

000dcf20 <nan>:
   dcf20:	ed9f 0b01 	vldr	d0, [pc, #4]	; dcf28 <nan+0x8>
   dcf24:	4770      	bx	lr
   dcf26:	bf00      	nop
   dcf28:	00000000 	.word	0x00000000
   dcf2c:	7ff80000 	.word	0x7ff80000

000dcf30 <__ascii_wctomb>:
   dcf30:	b149      	cbz	r1, dcf46 <__ascii_wctomb+0x16>
   dcf32:	2aff      	cmp	r2, #255	; 0xff
   dcf34:	bf85      	ittet	hi
   dcf36:	238a      	movhi	r3, #138	; 0x8a
   dcf38:	6003      	strhi	r3, [r0, #0]
   dcf3a:	700a      	strbls	r2, [r1, #0]
   dcf3c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dcf40:	bf98      	it	ls
   dcf42:	2001      	movls	r0, #1
   dcf44:	4770      	bx	lr
   dcf46:	4608      	mov	r0, r1
   dcf48:	4770      	bx	lr
	...

000dcf4c <__aeabi_d2lz>:
   dcf4c:	b538      	push	{r3, r4, r5, lr}
   dcf4e:	2200      	movs	r2, #0
   dcf50:	2300      	movs	r3, #0
   dcf52:	4604      	mov	r4, r0
   dcf54:	460d      	mov	r5, r1
   dcf56:	f7fd fda7 	bl	daaa8 <__aeabi_dcmplt>
   dcf5a:	b928      	cbnz	r0, dcf68 <__aeabi_d2lz+0x1c>
   dcf5c:	4620      	mov	r0, r4
   dcf5e:	4629      	mov	r1, r5
   dcf60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcf64:	f7fd be8e 	b.w	dac84 <__aeabi_d2ulz>
   dcf68:	4620      	mov	r0, r4
   dcf6a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dcf6e:	f7fd fe89 	bl	dac84 <__aeabi_d2ulz>
   dcf72:	4240      	negs	r0, r0
   dcf74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dcf78:	bd38      	pop	{r3, r4, r5, pc}
   dcf7a:	bf00      	nop

000dcf7c <dynalib_user>:
   dcf7c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dcf8c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   dcf9c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dcfac:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dcfbc:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   dcfcc:	4f4d 4544 7525 003e 2931 4120 746e 6e65     MODE%u>.1) Anten
   dcfdc:	616e 5320 6174 7574 2073 2428 4750 4f54     na Status ($PGTO
   dcfec:	2950 3d00 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     P).=============
   dcffc:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dd00c:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dd01c:	3d3d 3d3d 3d3d 3d3d 003d 6f43 6d6d 6e61     =========.Comman
   dd02c:	2064 4449 203a 4100 746e 6e65 616e 5320     d ID: .Antenna S
   dd03c:	6174 7574 3a73 0020 2932 4720 6f6c 6162     tatus: .2) Globa
   dd04c:	206c 6f50 6973 6974 6e6f 6e69 2067 7953     l Positioning Sy
   dd05c:	7473 6d65 4620 7869 6465 4420 7461 2061     stem Fixed Data 
   dd06c:	2428 5047 4747 2941 5500 4354 5420 6d69     ($GPGGA).UTC Tim
   dd07c:	3a65 0020 614c 6974 7574 6564 203a 4e00     e: .Latitude: .N
   dd08c:	726f 6874 532f 756f 6874 6e49 6964 6163     orth/SouthIndica
   dd09c:	6f74 3a72 0020 6f4c 676e 7469 6475 3a65     tor: .Longitude:
   dd0ac:	0020 6145 7473 572f 7365 4974 646e 6369      .East/WestIndic
   dd0bc:	7461 726f 203a 5000 736f 7469 6f69 206e     ator: .Position 
   dd0cc:	6946 2078 6e49 6964 6163 6f74 3a72 0020     Fix Indicator: .
   dd0dc:	6153 6574 6c6c 7469 7365 5520 6573 3a64     Satellites Used:
   dd0ec:	0020 6f48 6972 6f7a 746e 6c61 4420 6c69      .Horizontal Dil
   dd0fc:	7475 6f69 206e 666f 5020 6572 6963 6973     ution of Precisi
   dd10c:	6e6f 203a 4100 746c 7469 6475 3a65 0020     on: .Altitude: .
   dd11c:	6547 696f 6164 206c 6553 6170 6172 6974     Geoidal Separati
   dd12c:	6e6f 203a 4100 6567 6f20 2066 6944 6666     on: .Age of Diff
   dd13c:	202e 6f43 7272 3a2e 0020 6946 3a78 2000     . Corr.: .Fix:. 
   dd14c:	0020 6543 6c6c 532d 6769 003a 614c 3a74      .Cell-Sig:.Lat:
   dd15c:	4c00 6e6f 3a67 4300 7275 6572 746e 4620     .Long:.Current F
   dd16c:	6c69 3a65 4200 7461 6574 7972 203a 2000     ile:.Battery: . 
   dd17c:	0025 4453 4320 7261 2064 6966 656c 6420     %.SD Card file d
   dd18c:	7665 6369 4965 2d44 7878 2078 706f 6e65     eviceID-xxx open
   dd19c:	6620 6961 656c 0064 002c 002d 632e 7673      failed.,.-..csv
   dd1ac:	4900 696e 6974 6c61 7a69 6e69 2e67 2e2e     .Initializing...
   dd1bc:	4900 696e 6974 6c61 7a69 6e69 0067 4453     .Initializing.SD
   dd1cc:	6143 6472 535f 7465 7075 5300 4344 7261     Card_Setup.SDCar
   dd1dc:	2064 6f4c 6767 7265 5300 4344 7261 5f64     d Logger.SDCard_
   dd1ec:	6146 6c69 7275 2165 4100 454c 5452 5300     Failure!.ALERT.S
   dd1fc:	2044 6143 6472 4920 696e 2074 6146 6c69     D Card Init Fail
   dd20c:	6465 5300 2044 6143 6472 4920 696e 2074     ed.SD Card Init 
   dd21c:	202d 4b4f 0000 0000                         - OK....

000dd224 <_ZTVN8particle11SPISettingsE>:
	...
   dd22c:	4251 000d 40c9 000d 4161 000d               QB...@..aA..

000dd238 <_ZTV5Timer>:
	...
   dd240:	42d5 000d 431d 000d 418f 000d               .B...C...A..

000dd24c <_ZTV4File>:
	...
   dd254:	415f 000d 416f 000d 421d 000d 4189 000d     _A..oA...B...A..
   dd264:	40cb 000d 41e1 000d 41db 000d 41d5 000d     .@...A...A...A..

000dd274 <_ZL4font>:
   dd274:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dd284:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dd294:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dd2a4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dd2b4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dd2c4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dd2d4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dd2e4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dd2f4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dd304:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dd314:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dd324:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dd334:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dd344:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dd354:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dd364:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dd374:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dd384:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dd394:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dd3a4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dd3b4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dd3c4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dd3d4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dd3e4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dd3f4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dd404:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dd414:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dd424:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dd434:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dd444:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dd454:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dd464:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dd474:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dd484:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dd494:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dd4a4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dd4b4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dd4c4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dd4d4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dd4e4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dd4f4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dd504:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   dd514:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dd524:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dd534:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   dd544:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd554:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   dd564:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   dd574:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   dd584:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd594:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd5a4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd5b4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd5c4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd5d4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd5e4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   dd5f4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   dd604:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   dd614:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   dd624:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   dd634:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   dd644:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   dd654:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   dd664:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   dd674:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   dd684:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   dd694:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   dd6a4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   dd6b4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   dd6c4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   dd6d4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   dd6e4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   dd6f4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   dd704:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   dd714:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   dd724:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   dd734:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   dd744:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   dd754:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   dd764:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000dd774 <_ZTV12Adafruit_GFX>:
	...
   dd784:	5555 000d 8fe9 000d 40a5 000d 4f5d 000d     UU.......@..]O..
   dd794:	4f5f 000d 4f91 000d 4f6d 000d 4f7f 000d     _O...O..mO...O..
   dd7a4:	4ea1 000d 4f5d 000d 5189 000d 5103 000d     .N..]O...Q...Q..
   dd7b4:	4fa9 000d 4fe7 000d 5021 000d 5067 000d     .O...O..!P..gP..
   dd7c4:	5105 000d 5083 000d                         .Q...P..

000dd7cc <_ZL12splash1_data>:
   dd7cc:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   dd7dc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   dd7ec:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   dd7fc:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   dd80c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   dd81c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   dd834:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   dd844:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   dd854:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   dd864:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   dd874:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   dd884:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   dd894:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   dd8a4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   dd8b4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   dd8c4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   dd8d4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   dd8e4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   dd8f4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   dd904:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   dd914:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   dd924:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   dd934:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   dd944:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   dd95c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   dd974:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   dd984:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   dd994:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   dd9a4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   dd9b4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   dd9c4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   dd9d4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   dd9e4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   dd9f4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   dda04:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   dda14:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   dda24:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   dda34:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   dda44:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   dda54:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   dda64:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   dda74:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   dda84:	fdff 5b6b 6adb c0fd                         ..k[.j..

000dda8c <_ZL12splash2_data>:
   dda8c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   dda9c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   ddaac:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   ddac8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   ddad8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   ddae8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   ddaf8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   ddb08:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   ddb18:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   ddb28:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   ddb38:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   ddb48:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   ddb58:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   ddb68:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   ddb78:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   ddb88:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   ddb98:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   ddba8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   ddbb8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   ddbc8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   ddbd8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   ddbe8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   ddbf8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   ddc08:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   ddc20:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   ddc30:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   ddc40:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   ddc50:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   ddc60:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000ddc6c <_ZTV16Adafruit_SSD1306>:
	...
   ddc74:	5665 000d 567d 000d 5555 000d 8fe9 000d     eV..}V..UU......
   ddc84:	5691 000d 4f5d 000d 4f5f 000d 4f91 000d     .V..]O.._O...O..
   ddc94:	4f6d 000d 4f7f 000d 4ea1 000d 4f5d 000d     mO...O...N..]O..
   ddca4:	5189 000d 584b 000d 5ddf 000d 5d91 000d     .Q..KX...]...]..
   ddcb4:	5021 000d 5067 000d 5105 000d 5083 000d     !P..gP...Q...P..

000ddcc4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   ddcc4:	8000 e0c0 f8f0 fefc                         ........

000ddccc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   ddccc:	0100 0703 1f0f 7f3f                         ......?.

000ddcd4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   ddcd4:	d5ae a880                                   ....

000ddcd8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   ddcd8:	00d3 8d40                                   ..@.

000ddcdc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   ddcdc:	0020 c8a1                                    ...

000ddce0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   ddce0:	40db a6a4 af2e                              .@....

000ddce6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   ddce6:	02da 8f81                                   ....

000ddcea <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   ddcea:	12da                                         ...

000ddced <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   ddced:	02da                                         ...

000ddcf0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   ddcf0:	0022 21ff 2400 4d50 4b54 3532 2c31 3639     "..!.$PMTK251,96
   ddd00:	3030 312a 0037 5024 544d 324b 3032 352c     00*17.$PMTK220,5
   ddd10:	3030 2a30 4231 2400 4d50 4b54 3033 2c30     000*1B.$PMTK300,
   ddd20:	3031 3030 302c 302c 302c 302c 312a 0043     1000,0,0,0,0*1C.
   ddd30:	5024 544d 334b 3431 302c 312c 302c 312c     $PMTK314,0,1,0,1
   ddd40:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
   ddd50:	302c 302c 302c 302c 302c 302c 302c 322a     ,0,0,0,0,0,0,0*2
   ddd60:	0038 5024 544d 334b 3130 322c 322a 0045     8.$PMTK301,2*2E.
   ddd70:	5024 4347 444d 332c 2c33 2a31 4336 4200     $PGCMD,33,1*6C.B
   ddd80:	6675 6566 2072 764f 7265 6e75 203a 0027     uffer Overun: '.
   ddd90:	002a 0024                                   *.$.

000ddd94 <CSWTCH.24>:
   ddd94:	0201 0403 0605 0807 0009 0000 0000 0000     ................
   ddda4:	0b0a 0d0c 0f0e 4724 4750 4147 2400 5047     ......$GPGGA.$GP
   dddb4:	5347 0041 4724 4750 5653 2400 5047 4d52     GSA.$GPGSV.$GPRM
   dddc4:	0043 4724 5650 4754 2400 4750 4f54 0050     C.$GPVTG.$PGTOP.

000dddd4 <_ZTV3Gga>:
	...
   ddddc:	6511 000d                                   .e..

000ddde0 <_ZTV5Pgtop>:
	...
   ddde8:	64e5 000d                                   .d..

000dddec <_ZTV16OledWingAdafruit>:
	...
   dddf4:	7c8d 000d 7cad 000d 5555 000d 8fe9 000d     .|...|..UU......
   dde04:	5691 000d 4f5d 000d 4f5f 000d 4f91 000d     .V..]O.._O...O..
   dde14:	4f6d 000d 4f7f 000d 4ea1 000d 4f5d 000d     mO...O...N..]O..
   dde24:	5189 000d 584b 000d 5ddf 000d 5d91 000d     .Q..KX...]...]..
   dde34:	5021 000d 5067 000d 5105 000d 5083 000d     !P..gP...Q...P..

000dde44 <_ZTVN5spark13CellularClassE>:
	...
   dde4c:	84a7 000d 849d 000d 8493 000d 8449 000d     ............I...
   dde5c:	8487 000d 847b 000d 8ec9 000d 8ed1 000d     ....{...........
   dde6c:	846f 000d 8467 000d 845d 000d 8453 000d     o...g...]...S...
   dde7c:	8f01 000d                                   ....

000dde80 <_ZTV14CellularSignal>:
	...
   dde88:	8555 000d 857d 000d 8557 000d 858d 000d     U...}...W.......
   dde98:	85c1 000d 85ed 000d 8621 000d 8671 000d     ........!...q...
   ddea8:	855b 000d 8577 000d fffc ffff 0000 0000     [...w...........
   ddeb8:	8697 000d                                   ....

000ddebc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ddec4:	86b7 000d 86bd 000d 86fb 000d 86cb 000d     ................
   dded4:	86b9 000d                                   ....

000dded8 <_ZTVN5spark13EthernetClassE>:
	...
   ddee0:	8c73 000d 8c69 000d 8c5f 000d 8c55 000d     s...i..._...U...
   ddef0:	8c49 000d 8c3d 000d 8ec9 000d 8ed1 000d     I...=...........
   ddf00:	8c31 000d 8c29 000d 8c1f 000d 8c15 000d     1...)...........
   ddf10:	8f01 000d                                   ....

000ddf14 <_ZTV7TwoWire>:
	...
   ddf1c:	8c91 000d 8cdb 000d 8cb3 000d 8c93 000d     ................
   ddf2c:	8cbb 000d 8cc3 000d 8ccb 000d 8cd3 000d     ................

000ddf3c <_ZTV9IPAddress>:
	...
   ddf44:	8da5 000d 8d95 000d 8d97 000d 7061 0070     ............app.

000ddf54 <_ZTVN5spark12NetworkClassE>:
	...
   ddf5c:	8e89 000d 8e93 000d 8e9d 000d 8ea7 000d     ................
   ddf6c:	8eb1 000d 8ebd 000d 8ec9 000d 8ed1 000d     ................
   ddf7c:	8ed9 000d 8ee5 000d 8eed 000d 8ef7 000d     ................
   ddf8c:	8f01 000d 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000ddf9c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ddf9c:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   ddfac:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   ddfbc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   ddfcc:	0000 0000                                   ....

000ddfd0 <_ZTV11USARTSerial>:
	...
   ddfd8:	9cd9 000d 9d47 000d 9d1f 000d 8fe9 000d     ....G...........
   ddfe8:	9cef 000d 9d0b 000d 9cfd 000d 9d19 000d     ................
   ddff8:	9cdb 000d 9ce1 000d                         ........

000de000 <_ZTV9USBSerial>:
	...
   de008:	9de3 000d 9e4b 000d 9e21 000d 8fe9 000d     ....K...!.......
   de018:	9e13 000d 9de5 000d 9df5 000d 9e45 000d     ............E...
   de028:	9e05 000d 9ddd 000d                         ........

000de030 <_ZSt7nothrow>:
   de030:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   de040:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000de051 <day_name.6145>:
   de051:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   de061:	6972 6153                                    riSat

000de066 <mon_name.6146>:
   de066:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   de076:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   de086:	4476 6365 6e69 7469 0079                    vDecinity.

000de090 <fpi.7566>:
   de090:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   de0a0:	0000 0000                                   ....

000de0a4 <fpinan.7602>:
   de0a4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   de0b4:	0000 0000                                   ....

000de0b8 <tinytens>:
   de0b8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   de0c8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   de0d8:	6f43 64ac 0628 1168                         Co.d(.h.

000de0e0 <_ctype_>:
   de0e0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de0f0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de100:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de110:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de120:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de130:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de140:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de150:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de160:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de1e4 <_C_numeric_locale>:
   de1e4:	d1bb 000d e050 000d dd50 2003 4f50 4953     ....P...P.. POSI
   de1f4:	0058 0000                                   X...

000de1f8 <__mprec_bigtens>:
   de1f8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de208:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de218:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de220 <__mprec_tens>:
   de220:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de230:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de240:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de250:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de260:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de270:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de280:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de290:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de2a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de2b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de2c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de2d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de2e0:	9db4 79d9 7843 44ea                         ...yCx.D

000de2e8 <p05.7490>:
   de2e8:	0005 0000 0019 0000 007d 0000               ........}...

000de2f4 <link_const_variable_data_end>:
   de2f4:	000d4abd 	.word	0x000d4abd
   de2f8:	000d8439 	.word	0x000d8439
   de2fc:	000d8525 	.word	0x000d8525
   de300:	000d8c7d 	.word	0x000d8c7d
   de304:	000d8e79 	.word	0x000d8e79
   de308:	000d8fd5 	.word	0x000d8fd5
   de30c:	000d92d1 	.word	0x000d92d1
   de310:	000d996d 	.word	0x000d996d
   de314:	000d9cc5 	.word	0x000d9cc5

000de318 <link_constructors_end>:
	...
