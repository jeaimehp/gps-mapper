
/Users/jhpowell/Documents/Particle/gps-mapper/target/2.3.0/boron/gps-mapper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a210  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000de230  000de230  0000e230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000de238  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003dcd8  000de23c  0001dcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000930  2003dec0  2003dec0  0002dec0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000de424  000de424  0001e424  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000de44c  000de44c  0001e44c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0028216e  00000000  00000000  0001e450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00026347  00000000  00000000  002a05be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004160f  00000000  00000000  002c6905  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000033e8  00000000  00000000  00307f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009fd0  00000000  00000000  0030b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004cced  00000000  00000000  003152cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00064a85  00000000  00000000  00361fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001179dc  00000000  00000000  003c6a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009e6c  00000000  00000000  004de41c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 ff76 	bl	daf22 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 ff7e 	bl	daf3e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcd8 	.word	0x2003dcd8
   d404c:	000de23c 	.word	0x000de23c
   d4050:	2003dec0 	.word	0x2003dec0
   d4054:	2003dec0 	.word	0x2003dec0
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 ff8d 	bl	d9f80 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de20c 	.word	0x000de20c
   d4080:	000de230 	.word	0x000de230

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bcd8 	b.w	d4a38 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9c7 	bl	d441c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 bf2d 	b.w	d9ef0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b8e5 	b.w	d8264 <malloc>

000d409a <_Znaj>:
   d409a:	f004 b8e3 	b.w	d8264 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b8e9 	b.w	d8274 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fff4 	bl	d8098 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7d59 	.word	0x000d7d59

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ca:	7c03      	ldrb	r3, [r0, #16]
   d40cc:	f013 0308 	ands.w	r3, r3, #8
   d40d0:	bf1e      	ittt	ne
   d40d2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40d4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40d6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40d8:	2b00      	cmp	r3, #0
  }
   d40da:	bfac      	ite	ge
   d40dc:	4618      	movge	r0, r3
   d40de:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40e2:	4770      	bx	lr

000d40e4 <_Z23displayvoltage_button_Av>:
bool buttonB = false;
bool buttonC = false;


void displayvoltage_button_A (void) {
  buttonA = true;
   d40e4:	4b04      	ldr	r3, [pc, #16]	; (d40f8 <_Z23displayvoltage_button_Av+0x14>)
   d40e6:	2201      	movs	r2, #1
   d40e8:	701a      	strb	r2, [r3, #0]
  buttonB = false;
   d40ea:	4a04      	ldr	r2, [pc, #16]	; (d40fc <_Z23displayvoltage_button_Av+0x18>)
   d40ec:	2300      	movs	r3, #0
   d40ee:	7013      	strb	r3, [r2, #0]
  buttonC = false;
   d40f0:	4a03      	ldr	r2, [pc, #12]	; (d4100 <_Z23displayvoltage_button_Av+0x1c>)
   d40f2:	7013      	strb	r3, [r2, #0]
};
   d40f4:	4770      	bx	lr
   d40f6:	bf00      	nop
   d40f8:	2003dcd8 	.word	0x2003dcd8
   d40fc:	2003dfe8 	.word	0x2003dfe8
   d4100:	2003dfe9 	.word	0x2003dfe9

000d4104 <_Z23displayvoltage_button_Bv>:

void displayvoltage_button_B (void) {
  buttonA = false;
   d4104:	4a04      	ldr	r2, [pc, #16]	; (d4118 <_Z23displayvoltage_button_Bv+0x14>)
   d4106:	2300      	movs	r3, #0
   d4108:	7013      	strb	r3, [r2, #0]
  buttonB = true;
   d410a:	4a04      	ldr	r2, [pc, #16]	; (d411c <_Z23displayvoltage_button_Bv+0x18>)
   d410c:	2101      	movs	r1, #1
   d410e:	7011      	strb	r1, [r2, #0]
  buttonC = false;
   d4110:	4a03      	ldr	r2, [pc, #12]	; (d4120 <_Z23displayvoltage_button_Bv+0x1c>)
   d4112:	7013      	strb	r3, [r2, #0]
};
   d4114:	4770      	bx	lr
   d4116:	bf00      	nop
   d4118:	2003dcd8 	.word	0x2003dcd8
   d411c:	2003dfe8 	.word	0x2003dfe8
   d4120:	2003dfe9 	.word	0x2003dfe9

000d4124 <_Z23displayvoltage_button_Cv>:

void displayvoltage_button_C (void) {
  buttonA = false;
   d4124:	4a04      	ldr	r2, [pc, #16]	; (d4138 <_Z23displayvoltage_button_Cv+0x14>)
   d4126:	2300      	movs	r3, #0
   d4128:	7013      	strb	r3, [r2, #0]
  buttonB = false;
   d412a:	4a04      	ldr	r2, [pc, #16]	; (d413c <_Z23displayvoltage_button_Cv+0x18>)
   d412c:	7013      	strb	r3, [r2, #0]
  buttonC = true;
   d412e:	4b04      	ldr	r3, [pc, #16]	; (d4140 <_Z23displayvoltage_button_Cv+0x1c>)
   d4130:	2201      	movs	r2, #1
   d4132:	701a      	strb	r2, [r3, #0]
};
   d4134:	4770      	bx	lr
   d4136:	bf00      	nop
   d4138:	2003dcd8 	.word	0x2003dcd8
   d413c:	2003dfe8 	.word	0x2003dfe8
   d4140:	2003dfe9 	.word	0x2003dfe9

000d4144 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4144:	6803      	ldr	r3, [r0, #0]
   d4146:	4718      	bx	r3

000d4148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d4148:	2a01      	cmp	r2, #1
   d414a:	d003      	beq.n	d4154 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d414c:	2a02      	cmp	r2, #2
   d414e:	d003      	beq.n	d4158 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d4150:	2000      	movs	r0, #0
   d4152:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4154:	6001      	str	r1, [r0, #0]
	      break;
   d4156:	e7fb      	b.n	d4150 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4158:	680b      	ldr	r3, [r1, #0]
   d415a:	6003      	str	r3, [r0, #0]
	}
   d415c:	e7f8      	b.n	d4150 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d415e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d415e:	4770      	bx	lr

000d4160 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4160:	b510      	push	{r4, lr}
  }
   d4162:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4164:	4604      	mov	r4, r0
  }
   d4166:	f005 fff5 	bl	da154 <_ZdlPvj>
   d416a:	4620      	mov	r0, r4
   d416c:	bd10      	pop	{r4, pc}

000d416e <_ZN4FileD0Ev>:
   d416e:	b510      	push	{r4, lr}
   d4170:	2134      	movs	r1, #52	; 0x34
   d4172:	4604      	mov	r4, r0
   d4174:	f005 ffee 	bl	da154 <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_Z12onSerialDatav>:

}

void onSerialData()
{
  _gps.onSerialData();
   d417c:	4801      	ldr	r0, [pc, #4]	; (d4184 <_Z12onSerialDatav+0x8>)
   d417e:	f001 bef5 	b.w	d5f6c <_ZN3Gps12onSerialDataEv>
   d4182:	bf00      	nop
   d4184:	2003ded0 	.word	0x2003ded0

000d4188 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4188:	3010      	adds	r0, #16
   d418a:	f002 bcbd 	b.w	d6b08 <_ZN7FatFile5writeEPKvj>

000d418e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d418e:	6943      	ldr	r3, [r0, #20]
   d4190:	b113      	cbz	r3, d4198 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4192:	6983      	ldr	r3, [r0, #24]
   d4194:	300c      	adds	r0, #12
   d4196:	4718      	bx	r3
            callback();
        }
    }
   d4198:	4770      	bx	lr

000d419a <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d419a:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d419c:	2100      	movs	r1, #0
   d419e:	4604      	mov	r4, r0
   d41a0:	4608      	mov	r0, r1
   d41a2:	f003 fd89 	bl	d7cb8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41a6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41a8:	4620      	mov	r0, r4
   d41aa:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41ac:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41ae:	f003 fd9b 	bl	d7ce8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41b2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41b4:	b10c      	cbz	r4, d41ba <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41b6:	2301      	movs	r3, #1
   d41b8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41ba:	2100      	movs	r1, #0
   d41bc:	2001      	movs	r0, #1
   d41be:	f003 fd7b 	bl	d7cb8 <os_thread_scheduling>
            }
        }
        if (t) {
   d41c2:	b12c      	cbz	r4, d41d0 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41c4:	6823      	ldr	r3, [r4, #0]
   d41c6:	4620      	mov	r0, r4
   d41c8:	689b      	ldr	r3, [r3, #8]
   d41ca:	4798      	blx	r3
            t->running = false;
   d41cc:	2300      	movs	r3, #0
   d41ce:	7123      	strb	r3, [r4, #4]
        }
    }
   d41d0:	b002      	add	sp, #8
   d41d2:	bd10      	pop	{r4, pc}

000d41d4 <_ZN4File5flushEv>:
    FatFile::sync();
   d41d4:	3010      	adds	r0, #16
   d41d6:	f002 bc0d 	b.w	d69f4 <_ZN7FatFile4syncEv>

000d41da <_ZN4File4peekEv>:
    return FatFile::peek();
   d41da:	3010      	adds	r0, #16
   d41dc:	f002 bb28 	b.w	d6830 <_ZN7FatFile4peekEv>

000d41e0 <_ZN4File4readEv>:
  int read() {
   d41e0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d41e2:	2201      	movs	r2, #1
   d41e4:	f10d 0107 	add.w	r1, sp, #7
   d41e8:	3010      	adds	r0, #16
   d41ea:	f002 fa73 	bl	d66d4 <_ZN7FatFile4readEPvj>
   d41ee:	2801      	cmp	r0, #1
   d41f0:	bf0c      	ite	eq
   d41f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d41f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   d41fa:	b003      	add	sp, #12
   d41fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d4200:	b513      	push	{r0, r1, r4, lr}
   d4202:	4b05      	ldr	r3, [pc, #20]	; (d4218 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d4204:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4206:	f88d 3000 	strb.w	r3, [sp]
   d420a:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d420c:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d420e:	f004 fb17 	bl	d8840 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d4212:	4620      	mov	r0, r4
   d4214:	b002      	add	sp, #8
   d4216:	bd10      	pop	{r4, pc}
   d4218:	2003decc 	.word	0x2003decc

000d421c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d421c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d421e:	2201      	movs	r2, #1
   d4220:	f88d 1007 	strb.w	r1, [sp, #7]
   d4224:	3010      	adds	r0, #16
   d4226:	f10d 0107 	add.w	r1, sp, #7
   d422a:	f002 fc6d 	bl	d6b08 <_ZN7FatFile5writeEPKvj>
  }
   d422e:	b003      	add	sp, #12
   d4230:	f85d fb04 	ldr.w	pc, [sp], #4

000d4234 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4234:	b40e      	push	{r1, r2, r3}
   d4236:	b503      	push	{r0, r1, lr}
   d4238:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d423a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d423c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4240:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4242:	f004 ffa0 	bl	d9186 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4246:	b002      	add	sp, #8
   d4248:	f85d eb04 	ldr.w	lr, [sp], #4
   d424c:	b003      	add	sp, #12
   d424e:	4770      	bx	lr

000d4250 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4250:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4256:	7922      	ldrb	r2, [r4, #4]
   d4258:	68a3      	ldr	r3, [r4, #8]
   d425a:	b132      	cbz	r2, d426a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d425c:	b9a3      	cbnz	r3, d4288 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d425e:	490b      	ldr	r1, [pc, #44]	; (d428c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4260:	b002      	add	sp, #8
   d4262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4266:	f004 be61 	b.w	d8f2c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d426a:	4a09      	ldr	r2, [pc, #36]	; (d4290 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d426c:	7b26      	ldrb	r6, [r4, #12]
   d426e:	4d09      	ldr	r5, [pc, #36]	; (d4294 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4270:	4909      	ldr	r1, [pc, #36]	; (d4298 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4272:	7b64      	ldrb	r4, [r4, #13]
   d4274:	2e01      	cmp	r6, #1
   d4276:	bf18      	it	ne
   d4278:	4629      	movne	r1, r5
   d427a:	e9cd 1400 	strd	r1, r4, [sp]
   d427e:	4907      	ldr	r1, [pc, #28]	; (d429c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4280:	f7ff ffd8 	bl	d4234 <_ZN5Print6printfEPKcz>
  }
   d4284:	b002      	add	sp, #8
   d4286:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4288:	4a05      	ldr	r2, [pc, #20]	; (d42a0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d428a:	e7ef      	b.n	d426c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d428c:	000dceb9 	.word	0x000dceb9
   d4290:	000ddf68 	.word	0x000ddf68
   d4294:	000dceb5 	.word	0x000dceb5
   d4298:	000dceb1 	.word	0x000dceb1
   d429c:	000dcecf 	.word	0x000dcecf
   d42a0:	000dcea8 	.word	0x000dcea8

000d42a4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42a4:	b510      	push	{r4, lr}
      if (_M_manager)
   d42a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42a8:	4604      	mov	r4, r0
      if (_M_manager)
   d42aa:	b113      	cbz	r3, d42b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42ac:	2203      	movs	r2, #3
   d42ae:	4601      	mov	r1, r0
   d42b0:	4798      	blx	r3
    }
   d42b2:	4620      	mov	r0, r4
   d42b4:	bd10      	pop	{r4, pc}

000d42b6 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d42b6:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42b8:	6880      	ldr	r0, [r0, #8]
   d42ba:	2300      	movs	r3, #0
   d42bc:	b138      	cbz	r0, d42ce <_ZN5Timer5_stopEjb+0x18>
   d42be:	e9cd 1300 	strd	r1, r3, [sp]
   d42c2:	2102      	movs	r1, #2
   d42c4:	f003 fd18 	bl	d7cf8 <os_timer_change>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
    }
   d42ce:	b003      	add	sp, #12
   d42d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42d4:	b538      	push	{r3, r4, r5, lr}
   d42d6:	4b10      	ldr	r3, [pc, #64]	; (d4318 <_ZN5TimerD1Ev+0x44>)
   d42d8:	6003      	str	r3, [r0, #0]
        if (handle) {
   d42da:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d42dc:	4604      	mov	r4, r0
        if (handle) {
   d42de:	b1a3      	cbz	r3, d430a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d42e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d42e4:	2200      	movs	r2, #0
   d42e6:	f7ff ffe6 	bl	d42b6 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d42ea:	68a0      	ldr	r0, [r4, #8]
   d42ec:	2100      	movs	r1, #0
   d42ee:	f003 fd23 	bl	d7d38 <os_timer_set_id>
            while (running) {
   d42f2:	7923      	ldrb	r3, [r4, #4]
   d42f4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42f8:	b113      	cbz	r3, d4300 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d42fa:	f003 fcd5 	bl	d7ca8 <os_thread_yield>
            while (running) {
   d42fe:	e7f8      	b.n	d42f2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4300:	68a0      	ldr	r0, [r4, #8]
   d4302:	4629      	mov	r1, r5
   d4304:	f003 fce8 	bl	d7cd8 <os_timer_destroy>
            handle = nullptr;
   d4308:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d430a:	f104 000c 	add.w	r0, r4, #12
   d430e:	f7ff ffc9 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
    }
   d4312:	4620      	mov	r0, r4
   d4314:	bd38      	pop	{r3, r4, r5, pc}
   d4316:	bf00      	nop
   d4318:	000dd158 	.word	0x000dd158

000d431c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d431c:	b510      	push	{r4, lr}
   d431e:	4604      	mov	r4, r0
    }
   d4320:	f7ff ffd8 	bl	d42d4 <_ZN5TimerD1Ev>
   d4324:	4620      	mov	r0, r4
   d4326:	211c      	movs	r1, #28
   d4328:	f005 ff14 	bl	da154 <_ZdlPvj>
   d432c:	4620      	mov	r0, r4
   d432e:	bd10      	pop	{r4, pc}

000d4330 <_ZN9NmeaCacheD1Ev>:
#define NMEA_MSGID_PGT      "$PGTOP"

#define NMEA_MSGID_LENGTH   6
#define NMEA_MAX_SENTENCE   6

class NmeaCache
   d4330:	b538      	push	{r3, r4, r5, lr}
   d4332:	4605      	mov	r5, r0
   d4334:	f100 0470 	add.w	r4, r0, #112	; 0x70
   d4338:	42ac      	cmp	r4, r5
   d433a:	d004      	beq.n	d4346 <_ZN9NmeaCacheD1Ev+0x16>
   d433c:	3c10      	subs	r4, #16
   d433e:	4620      	mov	r0, r4
   d4340:	f005 f88c 	bl	d945c <_ZN6StringD1Ev>
   d4344:	e7f8      	b.n	d4338 <_ZN9NmeaCacheD1Ev+0x8>
   d4346:	4620      	mov	r0, r4
   d4348:	bd38      	pop	{r3, r4, r5, pc}

000d434a <_ZN9NmeaCacheC1ERKS_>:
   d434a:	b570      	push	{r4, r5, r6, lr}
   d434c:	4605      	mov	r5, r0
   d434e:	460e      	mov	r6, r1
   d4350:	2400      	movs	r4, #0
   d4352:	1931      	adds	r1, r6, r4
   d4354:	1928      	adds	r0, r5, r4
   d4356:	3410      	adds	r4, #16
   d4358:	f005 f90b 	bl	d9572 <_ZN6StringC1ERKS_>
   d435c:	2c70      	cmp	r4, #112	; 0x70
   d435e:	d1f8      	bne.n	d4352 <_ZN9NmeaCacheC1ERKS_+0x8>
   d4360:	4628      	mov	r0, r5
   d4362:	bd70      	pop	{r4, r5, r6, pc}

000d4364 <_Z11conv_coordsf>:
 {
 //Initialize the location.
 float f = in_coords;
 // Get the first two digits by turning f into an integer, then doing an integer divide by 100;
 // firsttowdigits should be 77 at this point.
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d4364:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 {
   d4368:	b5d0      	push	{r4, r6, r7, lr}
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d436a:	ee17 4a90 	vmov	r4, s15
   d436e:	2364      	movs	r3, #100	; 0x64
   d4370:	fb94 f4f3 	sdiv	r4, r4, r3
 float nexttwodigits = f - (float)(firsttwodigits*100);
   d4374:	4363      	muls	r3, r4
   d4376:	ee07 3a90 	vmov	s15, r3
   d437a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 float theFinalAnswer = (float)(firsttwodigits + nexttwodigits/60.0);
   d437e:	ee70 7a67 	vsub.f32	s15, s0, s15
   d4382:	ee17 0a90 	vmov	r0, s15
   d4386:	f006 f851 	bl	da42c <__aeabi_f2d>
   d438a:	4b0a      	ldr	r3, [pc, #40]	; (d43b4 <_Z11conv_coordsf+0x50>)
   d438c:	2200      	movs	r2, #0
   d438e:	f006 f9cf 	bl	da730 <__aeabi_ddiv>
   d4392:	4606      	mov	r6, r0
   d4394:	4620      	mov	r0, r4
   d4396:	460f      	mov	r7, r1
   d4398:	f006 f836 	bl	da408 <__aeabi_i2d>
   d439c:	4602      	mov	r2, r0
   d439e:	460b      	mov	r3, r1
   d43a0:	4630      	mov	r0, r6
   d43a2:	4639      	mov	r1, r7
   d43a4:	f005 fee4 	bl	da170 <__adddf3>
   d43a8:	f006 fb90 	bl	daacc <__aeabi_d2f>
 return theFinalAnswer;
 }
   d43ac:	ee00 0a10 	vmov	s0, r0
   d43b0:	bdd0      	pop	{r4, r6, r7, pc}
   d43b2:	bf00      	nop
   d43b4:	404e0000 	.word	0x404e0000

000d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d43b8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d43ba:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d43bc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d43be:	b17c      	cbz	r4, d43e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d43c0:	6863      	ldr	r3, [r4, #4]
   d43c2:	3b01      	subs	r3, #1
   d43c4:	6063      	str	r3, [r4, #4]
   d43c6:	b95b      	cbnz	r3, d43e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d43c8:	6823      	ldr	r3, [r4, #0]
   d43ca:	4620      	mov	r0, r4
   d43cc:	689b      	ldr	r3, [r3, #8]
   d43ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43d0:	68a3      	ldr	r3, [r4, #8]
   d43d2:	3b01      	subs	r3, #1
   d43d4:	60a3      	str	r3, [r4, #8]
   d43d6:	b91b      	cbnz	r3, d43e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d43d8:	6823      	ldr	r3, [r4, #0]
   d43da:	4620      	mov	r0, r4
   d43dc:	68db      	ldr	r3, [r3, #12]
   d43de:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d43e0:	4628      	mov	r0, r5
   d43e2:	bd38      	pop	{r3, r4, r5, pc}

000d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d43e4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d43e6:	4c0b      	ldr	r4, [pc, #44]	; (d4414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d43e8:	7821      	ldrb	r1, [r4, #0]
   d43ea:	f3bf 8f5b 	dmb	ish
   d43ee:	f011 0101 	ands.w	r1, r1, #1
   d43f2:	d10b      	bne.n	d440c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d43f4:	4620      	mov	r0, r4
   d43f6:	9101      	str	r1, [sp, #4]
   d43f8:	f7ff fe5e 	bl	d40b8 <__cxa_guard_acquire>
   d43fc:	9901      	ldr	r1, [sp, #4]
   d43fe:	b128      	cbz	r0, d440c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4400:	4805      	ldr	r0, [pc, #20]	; (d4418 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4402:	f004 fefd 	bl	d9200 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4406:	4620      	mov	r0, r4
   d4408:	f7ff fe5b 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d440c:	4802      	ldr	r0, [pc, #8]	; (d4418 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d440e:	b002      	add	sp, #8
   d4410:	bd10      	pop	{r4, pc}
   d4412:	bf00      	nop
   d4414:	2003dec0 	.word	0x2003dec0
   d4418:	2003dec4 	.word	0x2003dec4

000d441c <loop>:
{
   d441c:	b570      	push	{r4, r5, r6, lr}
   d441e:	b0e8      	sub	sp, #416	; 0x1a0
  Pgtop pgtop = Pgtop(_gps);
   d4420:	49cc      	ldr	r1, [pc, #816]	; (d4754 <loop+0x338>)
   d4422:	a83a      	add	r0, sp, #232	; 0xe8
   d4424:	f7ff ff91 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d4428:	a93a      	add	r1, sp, #232	; 0xe8
   d442a:	a812      	add	r0, sp, #72	; 0x48
   d442c:	f002 f866 	bl	d64fc <_ZN5PgtopC1E9NmeaCache>
   d4430:	a83a      	add	r0, sp, #232	; 0xe8
   d4432:	f7ff ff7d 	bl	d4330 <_ZN9NmeaCacheD1Ev>
  if (pgtop.parse())
   d4436:	a812      	add	r0, sp, #72	; 0x48
   d4438:	f001 ffe8 	bl	d640c <_ZN5Pgtop5parseEv>
   d443c:	b360      	cbz	r0, d4498 <loop+0x7c>
    Serial.println("1) Antenna Status ($PGTOP)");
   d443e:	f005 fcb7 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4442:	49c5      	ldr	r1, [pc, #788]	; (d4758 <loop+0x33c>)
   d4444:	f004 fd85 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d4448:	f005 fcb2 	bl	d9db0 <_Z16_fetch_usbserialv>
   d444c:	49c3      	ldr	r1, [pc, #780]	; (d475c <loop+0x340>)
   d444e:	f004 fd80 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("Command ID: "); Serial.println(pgtop.commandId);
   d4452:	f005 fcad 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4456:	49c2      	ldr	r1, [pc, #776]	; (d4760 <loop+0x344>)
   d4458:	f004 fd68 	bl	d8f2c <_ZN5Print5printEPKc>
   d445c:	f005 fca8 	bl	d9db0 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4460:	220a      	movs	r2, #10
   d4462:	991c      	ldr	r1, [sp, #112]	; 0x70
   d4464:	4604      	mov	r4, r0
   d4466:	f004 fd7e 	bl	d8f66 <_ZN5Print11printNumberEmh>
        n += println();
   d446a:	4620      	mov	r0, r4
   d446c:	f004 fd65 	bl	d8f3a <_ZN5Print7printlnEv>
    Serial.print("Antenna Status: "); Serial.println(pgtop.reference);
   d4470:	f005 fc9e 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4474:	49bb      	ldr	r1, [pc, #748]	; (d4764 <loop+0x348>)
   d4476:	f004 fd59 	bl	d8f2c <_ZN5Print5printEPKc>
   d447a:	f005 fc99 	bl	d9db0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d447e:	991d      	ldr	r1, [sp, #116]	; 0x74
   d4480:	220a      	movs	r2, #10
   d4482:	4604      	mov	r4, r0
   d4484:	f004 fd6f 	bl	d8f66 <_ZN5Print11printNumberEmh>
        n += println();
   d4488:	4620      	mov	r0, r4
   d448a:	f004 fd56 	bl	d8f3a <_ZN5Print7printlnEv>
    Serial.println("");
   d448e:	f005 fc8f 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4492:	49b5      	ldr	r1, [pc, #724]	; (d4768 <loop+0x34c>)
   d4494:	f004 fd5d 	bl	d8f52 <_ZN5Print7printlnEPKc>
  Gga gga = Gga(_gps);
   d4498:	49ae      	ldr	r1, [pc, #696]	; (d4754 <loop+0x338>)
   d449a:	a81e      	add	r0, sp, #120	; 0x78
   d449c:	f7ff ff55 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d44a0:	a91e      	add	r1, sp, #120	; 0x78
   d44a2:	a83a      	add	r0, sp, #232	; 0xe8
   d44a4:	f002 f84c 	bl	d6540 <_ZN3GgaC1E9NmeaCache>
   d44a8:	a81e      	add	r0, sp, #120	; 0x78
   d44aa:	f7ff ff41 	bl	d4330 <_ZN9NmeaCacheD1Ev>
  if (gga.parse())
   d44ae:	a83a      	add	r0, sp, #232	; 0xe8
   d44b0:	f001 ffc2 	bl	d6438 <_ZN3Gga5parseEv>
   d44b4:	2800      	cmp	r0, #0
   d44b6:	f000 81b3 	beq.w	d4820 <loop+0x404>
    Serial.println("2) Global Positioning System Fixed Data ($GPGGA)");
   d44ba:	f005 fc79 	bl	d9db0 <_Z16_fetch_usbserialv>
   d44be:	49ab      	ldr	r1, [pc, #684]	; (d476c <loop+0x350>)
   d44c0:	f004 fd47 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d44c4:	f005 fc74 	bl	d9db0 <_Z16_fetch_usbserialv>
   d44c8:	49a4      	ldr	r1, [pc, #656]	; (d475c <loop+0x340>)
   d44ca:	f004 fd42 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("UTC Time: "); Serial.println(gga.utcTime);
   d44ce:	f005 fc6f 	bl	d9db0 <_Z16_fetch_usbserialv>
   d44d2:	49a7      	ldr	r1, [pc, #668]	; (d4770 <loop+0x354>)
   d44d4:	f004 fd2a 	bl	d8f2c <_ZN5Print5printEPKc>
   d44d8:	f005 fc6a 	bl	d9db0 <_Z16_fetch_usbserialv>
   d44dc:	9944      	ldr	r1, [sp, #272]	; 0x110
   d44de:	f004 fd38 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("Latitude: "); Serial.println(gga.latitude);
   d44e2:	f005 fc65 	bl	d9db0 <_Z16_fetch_usbserialv>
   d44e6:	49a3      	ldr	r1, [pc, #652]	; (d4774 <loop+0x358>)
   d44e8:	f004 fd20 	bl	d8f2c <_ZN5Print5printEPKc>
   d44ec:	f005 fc60 	bl	d9db0 <_Z16_fetch_usbserialv>
   d44f0:	9948      	ldr	r1, [sp, #288]	; 0x120
   d44f2:	f004 fd2e 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("North/SouthIndicator: "); Serial.println(gga.northSouthIndicator);
   d44f6:	f005 fc5b 	bl	d9db0 <_Z16_fetch_usbserialv>
   d44fa:	499f      	ldr	r1, [pc, #636]	; (d4778 <loop+0x35c>)
   d44fc:	f004 fd16 	bl	d8f2c <_ZN5Print5printEPKc>
   d4500:	f005 fc56 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4504:	994c      	ldr	r1, [sp, #304]	; 0x130
   d4506:	f004 fd24 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("Longitude: "); Serial.println(gga.longitude);
   d450a:	f005 fc51 	bl	d9db0 <_Z16_fetch_usbserialv>
   d450e:	499b      	ldr	r1, [pc, #620]	; (d477c <loop+0x360>)
   d4510:	f004 fd0c 	bl	d8f2c <_ZN5Print5printEPKc>
   d4514:	f005 fc4c 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4518:	9950      	ldr	r1, [sp, #320]	; 0x140
   d451a:	f004 fd1a 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("East/WestIndicator: "); Serial.println(gga.eastWestIndicator);
   d451e:	f005 fc47 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4522:	4997      	ldr	r1, [pc, #604]	; (d4780 <loop+0x364>)
   d4524:	f004 fd02 	bl	d8f2c <_ZN5Print5printEPKc>
   d4528:	f005 fc42 	bl	d9db0 <_Z16_fetch_usbserialv>
   d452c:	9954      	ldr	r1, [sp, #336]	; 0x150
   d452e:	f004 fd10 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("Position Fix Indicator: "); Serial.println(gga.positionFixIndicator);
   d4532:	f005 fc3d 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4536:	4993      	ldr	r1, [pc, #588]	; (d4784 <loop+0x368>)
   d4538:	f004 fcf8 	bl	d8f2c <_ZN5Print5printEPKc>
   d453c:	f005 fc38 	bl	d9db0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4540:	220a      	movs	r2, #10
   d4542:	f89d 1160 	ldrb.w	r1, [sp, #352]	; 0x160
   d4546:	4604      	mov	r4, r0
   d4548:	f004 fd0d 	bl	d8f66 <_ZN5Print11printNumberEmh>
        n += println();
   d454c:	4620      	mov	r0, r4
   d454e:	f004 fcf4 	bl	d8f3a <_ZN5Print7printlnEv>
    Serial.print("Satellites Used: "); Serial.println(gga.satellitesUsed);
   d4552:	f005 fc2d 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4556:	498c      	ldr	r1, [pc, #560]	; (d4788 <loop+0x36c>)
   d4558:	f004 fce8 	bl	d8f2c <_ZN5Print5printEPKc>
   d455c:	f005 fc28 	bl	d9db0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4560:	220a      	movs	r2, #10
   d4562:	f89d 1161 	ldrb.w	r1, [sp, #353]	; 0x161
   d4566:	4604      	mov	r4, r0
   d4568:	f004 fcfd 	bl	d8f66 <_ZN5Print11printNumberEmh>
        n += println();
   d456c:	4620      	mov	r0, r4
   d456e:	f004 fce4 	bl	d8f3a <_ZN5Print7printlnEv>
    Serial.print("Horizontal Dilution of Precision: "); Serial.println(gga.hdop);
   d4572:	f005 fc1d 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4576:	4985      	ldr	r1, [pc, #532]	; (d478c <loop+0x370>)
   d4578:	f004 fcd8 	bl	d8f2c <_ZN5Print5printEPKc>
   d457c:	f005 fc18 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4580:	ed9d 0a59 	vldr	s0, [sp, #356]	; 0x164
   d4584:	2102      	movs	r1, #2
   d4586:	f004 fdef 	bl	d9168 <_ZN5Print7printlnEfi>
    Serial.print("Altitude: "); Serial.print(gga.altitude); Serial.print(" "); Serial.println(gga.altitudeUnit);
   d458a:	f005 fc11 	bl	d9db0 <_Z16_fetch_usbserialv>
   d458e:	4980      	ldr	r1, [pc, #512]	; (d4790 <loop+0x374>)
   d4590:	f004 fccc 	bl	d8f2c <_ZN5Print5printEPKc>
   d4594:	f005 fc0c 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4598:	ed9d 0a5a 	vldr	s0, [sp, #360]	; 0x168
   d459c:	2102      	movs	r1, #2
   d459e:	f004 fdc9 	bl	d9134 <_ZN5Print5printEfi>
   d45a2:	f005 fc05 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45a6:	497b      	ldr	r1, [pc, #492]	; (d4794 <loop+0x378>)
   d45a8:	f004 fcc0 	bl	d8f2c <_ZN5Print5printEPKc>
   d45ac:	f005 fc00 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45b0:	995b      	ldr	r1, [sp, #364]	; 0x16c
   d45b2:	f004 fcce 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("Geoidal Separation: "); Serial.print(gga.geoidalSeparation); Serial.print(" "); Serial.println(gga.geoidalSeparationUnit);
   d45b6:	f005 fbfb 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45ba:	4977      	ldr	r1, [pc, #476]	; (d4798 <loop+0x37c>)
   d45bc:	f004 fcb6 	bl	d8f2c <_ZN5Print5printEPKc>
   d45c0:	f005 fbf6 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45c4:	ed9d 0a5f 	vldr	s0, [sp, #380]	; 0x17c
   d45c8:	2102      	movs	r1, #2
   d45ca:	f004 fdb3 	bl	d9134 <_ZN5Print5printEfi>
   d45ce:	f005 fbef 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45d2:	4970      	ldr	r1, [pc, #448]	; (d4794 <loop+0x378>)
   d45d4:	f004 fcaa 	bl	d8f2c <_ZN5Print5printEPKc>
   d45d8:	f005 fbea 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45dc:	9960      	ldr	r1, [sp, #384]	; 0x180
   d45de:	f004 fcb8 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.print("Age of Diff. Corr.: "); Serial.println(gga.ageOfDiffCorr);
   d45e2:	f005 fbe5 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45e6:	496d      	ldr	r1, [pc, #436]	; (d479c <loop+0x380>)
   d45e8:	f004 fca0 	bl	d8f2c <_ZN5Print5printEPKc>
   d45ec:	f005 fbe0 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45f0:	9964      	ldr	r1, [sp, #400]	; 0x190
   d45f2:	f004 fcae 	bl	d8f52 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d45f6:	f005 fbdb 	bl	d9db0 <_Z16_fetch_usbserialv>
   d45fa:	495b      	ldr	r1, [pc, #364]	; (d4768 <loop+0x34c>)
   d45fc:	f004 fca9 	bl	d8f52 <_ZN5Print7printlnEPKc>
    CellularSignal sig = Cellular.RSSI();
   d4600:	4967      	ldr	r1, [pc, #412]	; (d47a0 <loop+0x384>)
   d4602:	a81e      	add	r0, sp, #120	; 0x78
   d4604:	f003 fee0 	bl	d83c8 <_ZN5spark13CellularClass4RSSIEv>
    String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d4608:	f005 fa9f 	bl	d9b4a <_ZN9TimeClass3nowEv>
   d460c:	4b65      	ldr	r3, [pc, #404]	; (d47a4 <loop+0x388>)
   d460e:	4966      	ldr	r1, [pc, #408]	; (d47a8 <loop+0x38c>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	9300      	str	r3, [sp, #0]
   d4614:	4602      	mov	r2, r0
   d4616:	17c3      	asrs	r3, r0, #31
   d4618:	a802      	add	r0, sp, #8
   d461a:	f005 fa37 	bl	d9a8c <_ZN9TimeClass6formatExPKc>
    if (buttonA) { 
   d461e:	4b63      	ldr	r3, [pc, #396]	; (d47ac <loop+0x390>)
   d4620:	781e      	ldrb	r6, [r3, #0]
   d4622:	2e00      	cmp	r6, #0
   d4624:	f000 812a 	beq.w	d487c <loop+0x460>
      display.clearDisplay();
   d4628:	4c61      	ldr	r4, [pc, #388]	; (d47b0 <loop+0x394>)
   d462a:	4620      	mov	r0, r4
   d462c:	f001 f926 	bl	d587c <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d4630:	2101      	movs	r1, #1
   d4632:	4620      	mov	r0, r4
   d4634:	f000 ffa3 	bl	d557e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4638:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d463c:	2200      	movs	r2, #0
   d463e:	e9c4 2304 	strd	r2, r3, [r4, #16]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4642:	495c      	ldr	r1, [pc, #368]	; (d47b4 <loop+0x398>)
   d4644:	a80e      	add	r0, sp, #56	; 0x38
   d4646:	f004 ff54 	bl	d94f2 <_ZN6StringC1EPKc>
      display.println("Fix:" + String(gga.positionFixIndicator)+"  " + "Cell-Sig:" + int(sig.getStrength()) +"%");
   d464a:	220a      	movs	r2, #10
   d464c:	f89d 1160 	ldrb.w	r1, [sp, #352]	; 0x160
   d4650:	a80a      	add	r0, sp, #40	; 0x28
   d4652:	f004 ffc4 	bl	d95de <_ZN6StringC1Ehh>
   d4656:	a90a      	add	r1, sp, #40	; 0x28
   d4658:	a80e      	add	r0, sp, #56	; 0x38
   d465a:	f005 f82b 	bl	d96b4 <_ZplRK15StringSumHelperRK6String>
   d465e:	4956      	ldr	r1, [pc, #344]	; (d47b8 <loop+0x39c>)
   d4660:	f005 f834 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d4664:	4955      	ldr	r1, [pc, #340]	; (d47bc <loop+0x3a0>)
   d4666:	f005 f831 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d466a:	4605      	mov	r5, r0
   d466c:	a81e      	add	r0, sp, #120	; 0x78
   d466e:	f003 ff19 	bl	d84a4 <_ZNK14CellularSignal11getStrengthEv>
   d4672:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d4676:	4628      	mov	r0, r5
   d4678:	ee17 1a90 	vmov	r1, s15
   d467c:	f005 f83b 	bl	d96f6 <_ZplRK15StringSumHelperi>
   d4680:	494f      	ldr	r1, [pc, #316]	; (d47c0 <loop+0x3a4>)
   d4682:	f005 f823 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d4686:	6801      	ldr	r1, [r0, #0]
   d4688:	4620      	mov	r0, r4
   d468a:	f004 fc62 	bl	d8f52 <_ZN5Print7printlnEPKc>
   d468e:	a80a      	add	r0, sp, #40	; 0x28
   d4690:	f004 fee4 	bl	d945c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4694:	a80e      	add	r0, sp, #56	; 0x38
   d4696:	f004 fee1 	bl	d945c <_ZN6StringD1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d469a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   d469e:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d46a0:	4948      	ldr	r1, [pc, #288]	; (d47c4 <loop+0x3a8>)
   d46a2:	a80a      	add	r0, sp, #40	; 0x28
   d46a4:	f004 ff25 	bl	d94f2 <_ZN6StringC1EPKc>
      display.println("Lat:" + String(gga.northSouthIndicator)+" "+String(conv_coords(gga.latitude.toFloat())));
   d46a8:	a94c      	add	r1, sp, #304	; 0x130
   d46aa:	a806      	add	r0, sp, #24
   d46ac:	f004 ff61 	bl	d9572 <_ZN6StringC1ERKS_>
   d46b0:	a906      	add	r1, sp, #24
   d46b2:	a80a      	add	r0, sp, #40	; 0x28
   d46b4:	f004 fffe 	bl	d96b4 <_ZplRK15StringSumHelperRK6String>
   d46b8:	4936      	ldr	r1, [pc, #216]	; (d4794 <loop+0x378>)
   d46ba:	f005 f807 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d46be:	4605      	mov	r5, r0
   d46c0:	a848      	add	r0, sp, #288	; 0x120
   d46c2:	f005 f8cd 	bl	d9860 <_ZNK6String7toFloatEv>
   d46c6:	f7ff fe4d 	bl	d4364 <_Z11conv_coordsf>
   d46ca:	2106      	movs	r1, #6
   d46cc:	a80e      	add	r0, sp, #56	; 0x38
   d46ce:	f004 ff98 	bl	d9602 <_ZN6StringC1Efi>
   d46d2:	a90e      	add	r1, sp, #56	; 0x38
   d46d4:	4628      	mov	r0, r5
   d46d6:	f004 ffed 	bl	d96b4 <_ZplRK15StringSumHelperRK6String>
   d46da:	6801      	ldr	r1, [r0, #0]
   d46dc:	4620      	mov	r0, r4
   d46de:	f004 fc38 	bl	d8f52 <_ZN5Print7printlnEPKc>
   d46e2:	a80e      	add	r0, sp, #56	; 0x38
   d46e4:	f004 feba 	bl	d945c <_ZN6StringD1Ev>
   d46e8:	a806      	add	r0, sp, #24
   d46ea:	f004 feb7 	bl	d945c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46ee:	a80a      	add	r0, sp, #40	; 0x28
   d46f0:	f004 feb4 	bl	d945c <_ZN6StringD1Ev>
   d46f4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   d46f8:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d46fa:	4933      	ldr	r1, [pc, #204]	; (d47c8 <loop+0x3ac>)
   d46fc:	a80a      	add	r0, sp, #40	; 0x28
   d46fe:	f004 fef8 	bl	d94f2 <_ZN6StringC1EPKc>
      display.println("Long:" + String(gga.eastWestIndicator) +" "+String(conv_coords(gga.longitude.toFloat())));
   d4702:	a954      	add	r1, sp, #336	; 0x150
   d4704:	a806      	add	r0, sp, #24
   d4706:	f004 ff34 	bl	d9572 <_ZN6StringC1ERKS_>
   d470a:	a906      	add	r1, sp, #24
   d470c:	a80a      	add	r0, sp, #40	; 0x28
   d470e:	f004 ffd1 	bl	d96b4 <_ZplRK15StringSumHelperRK6String>
   d4712:	4920      	ldr	r1, [pc, #128]	; (d4794 <loop+0x378>)
   d4714:	f004 ffda 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d4718:	4605      	mov	r5, r0
   d471a:	a850      	add	r0, sp, #320	; 0x140
   d471c:	f005 f8a0 	bl	d9860 <_ZNK6String7toFloatEv>
   d4720:	f7ff fe20 	bl	d4364 <_Z11conv_coordsf>
   d4724:	2106      	movs	r1, #6
   d4726:	a80e      	add	r0, sp, #56	; 0x38
   d4728:	f004 ff6b 	bl	d9602 <_ZN6StringC1Efi>
   d472c:	a90e      	add	r1, sp, #56	; 0x38
   d472e:	4628      	mov	r0, r5
   d4730:	f004 ffc0 	bl	d96b4 <_ZplRK15StringSumHelperRK6String>
   d4734:	6801      	ldr	r1, [r0, #0]
   d4736:	4620      	mov	r0, r4
   d4738:	f004 fc0b 	bl	d8f52 <_ZN5Print7printlnEPKc>
   d473c:	a80e      	add	r0, sp, #56	; 0x38
   d473e:	f004 fe8d 	bl	d945c <_ZN6StringD1Ev>
   d4742:	a806      	add	r0, sp, #24
   d4744:	f004 fe8a 	bl	d945c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4748:	a80a      	add	r0, sp, #40	; 0x28
   d474a:	f004 fe87 	bl	d945c <_ZN6StringD1Ev>
      display.display();
   d474e:	4620      	mov	r0, r4
   d4750:	e03c      	b.n	d47cc <loop+0x3b0>
   d4752:	bf00      	nop
   d4754:	2003ded0 	.word	0x2003ded0
   d4758:	000dceec 	.word	0x000dceec
   d475c:	000dcf07 	.word	0x000dcf07
   d4760:	000dcf3e 	.word	0x000dcf3e
   d4764:	000dcf4b 	.word	0x000dcf4b
   d4768:	000ddf68 	.word	0x000ddf68
   d476c:	000dcf5c 	.word	0x000dcf5c
   d4770:	000dcf8d 	.word	0x000dcf8d
   d4774:	000dcf98 	.word	0x000dcf98
   d4778:	000dcfa3 	.word	0x000dcfa3
   d477c:	000dcfba 	.word	0x000dcfba
   d4780:	000dcfc6 	.word	0x000dcfc6
   d4784:	000dcfdb 	.word	0x000dcfdb
   d4788:	000dcff4 	.word	0x000dcff4
   d478c:	000dd006 	.word	0x000dd006
   d4790:	000dd029 	.word	0x000dd029
   d4794:	000dd064 	.word	0x000dd064
   d4798:	000dd034 	.word	0x000dd034
   d479c:	000dd049 	.word	0x000dd049
   d47a0:	2003e550 	.word	0x2003e550
   d47a4:	2003dce4 	.word	0x2003dce4
   d47a8:	2003e5b4 	.word	0x2003e5b4
   d47ac:	2003dcd8 	.word	0x2003dcd8
   d47b0:	2003dffc 	.word	0x2003dffc
   d47b4:	000dd05e 	.word	0x000dd05e
   d47b8:	000dd063 	.word	0x000dd063
   d47bc:	000dd066 	.word	0x000dd066
   d47c0:	000dd094 	.word	0x000dd094
   d47c4:	000dd070 	.word	0x000dd070
   d47c8:	000dd075 	.word	0x000dd075
      display.display();
   d47cc:	f001 fac2 	bl	d5d54 <_ZN16Adafruit_SSD13067displayEv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d47d0:	f7ff fe08 	bl	d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47d4:	2100      	movs	r1, #0
   d47d6:	f004 fd2e 	bl	d9236 <_ZN8SPIClass11setDataModeEh>
	if (gga.positionFixIndicator != 0){
   d47da:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
   d47de:	b1e3      	cbz	r3, d481a <loop+0x3fe>
	   if (millis() - lastmillis_pub >= pub_time_milli) {
   d47e0:	4d83      	ldr	r5, [pc, #524]	; (d49f0 <loop+0x5d4>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d47e2:	f003 fac9 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
   d47e6:	682a      	ldr	r2, [r5, #0]
   d47e8:	1a80      	subs	r0, r0, r2
   d47ea:	4a82      	ldr	r2, [pc, #520]	; (d49f4 <loop+0x5d8>)
   d47ec:	6812      	ldr	r2, [r2, #0]
   d47ee:	4290      	cmp	r0, r2
   d47f0:	d313      	bcc.n	d481a <loop+0x3fe>
    return open(m_cwd, path, oflag);
   d47f2:	4a81      	ldr	r2, [pc, #516]	; (d49f8 <loop+0x5dc>)
   d47f4:	4981      	ldr	r1, [pc, #516]	; (d49fc <loop+0x5e0>)
   d47f6:	6812      	ldr	r2, [r2, #0]
   d47f8:	6809      	ldr	r1, [r1, #0]
   d47fa:	4881      	ldr	r0, [pc, #516]	; (d4a00 <loop+0x5e4>)
   d47fc:	f244 2302 	movw	r3, #16898	; 0x4202
   d4800:	f002 f935 	bl	d6a6e <_ZN7FatFile4openEPS_PKci>
	     if (!myFile.open(datafile_name, O_RDWR | O_CREAT | O_AT_END)) {
   d4804:	2800      	cmp	r0, #0
   d4806:	f040 80ae 	bne.w	d4966 <loop+0x54a>
            Serial.println("SD Card file deviceID-xxx open failed");
   d480a:	f005 fad1 	bl	d9db0 <_Z16_fetch_usbserialv>
   d480e:	497d      	ldr	r1, [pc, #500]	; (d4a04 <loop+0x5e8>)
   d4810:	f004 fb9f 	bl	d8f52 <_ZN5Print7printlnEPKc>
   d4814:	f003 fab0 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
	    lastmillis_pub = millis();
   d4818:	6028      	str	r0, [r5, #0]
    String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d481a:	a802      	add	r0, sp, #8
   d481c:	f004 fe1e 	bl	d945c <_ZN6StringD1Ev>
  delay(1000);
   d4820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4824:	f003 fd76 	bl	d8314 <delay>
Checksum
<CR> <LF>                                       End of message termination

*/

class Gga : public Nmea
   d4828:	4b77      	ldr	r3, [pc, #476]	; (d4a08 <loop+0x5ec>)
   d482a:	933a      	str	r3, [sp, #232]	; 0xe8
   d482c:	a864      	add	r0, sp, #400	; 0x190
   d482e:	f004 fe15 	bl	d945c <_ZN6StringD1Ev>
   d4832:	a860      	add	r0, sp, #384	; 0x180
   d4834:	f004 fe12 	bl	d945c <_ZN6StringD1Ev>
   d4838:	a85b      	add	r0, sp, #364	; 0x16c
   d483a:	f004 fe0f 	bl	d945c <_ZN6StringD1Ev>
   d483e:	a854      	add	r0, sp, #336	; 0x150
   d4840:	f004 fe0c 	bl	d945c <_ZN6StringD1Ev>
   d4844:	a850      	add	r0, sp, #320	; 0x140
   d4846:	f004 fe09 	bl	d945c <_ZN6StringD1Ev>
   d484a:	a84c      	add	r0, sp, #304	; 0x130
   d484c:	f004 fe06 	bl	d945c <_ZN6StringD1Ev>
   d4850:	a848      	add	r0, sp, #288	; 0x120
   d4852:	f004 fe03 	bl	d945c <_ZN6StringD1Ev>
   d4856:	a844      	add	r0, sp, #272	; 0x110
   d4858:	f004 fe00 	bl	d945c <_ZN6StringD1Ev>
#define _NMEA_H

#include "application.h"
#include "NmeaCache.h"

class Nmea
   d485c:	a840      	add	r0, sp, #256	; 0x100
   d485e:	f004 fdfd 	bl	d945c <_ZN6StringD1Ev>
   d4862:	a83b      	add	r0, sp, #236	; 0xec
   d4864:	f004 fdfa 	bl	d945c <_ZN6StringD1Ev>
class Pgtop : public Nmea
   d4868:	4b68      	ldr	r3, [pc, #416]	; (d4a0c <loop+0x5f0>)
   d486a:	9312      	str	r3, [sp, #72]	; 0x48
   d486c:	a818      	add	r0, sp, #96	; 0x60
   d486e:	f004 fdf5 	bl	d945c <_ZN6StringD1Ev>
   d4872:	a813      	add	r0, sp, #76	; 0x4c
   d4874:	f004 fdf2 	bl	d945c <_ZN6StringD1Ev>
}
   d4878:	b068      	add	sp, #416	; 0x1a0
   d487a:	bd70      	pop	{r4, r5, r6, pc}
    else if (buttonB){
   d487c:	4b64      	ldr	r3, [pc, #400]	; (d4a10 <loop+0x5f4>)
   d487e:	781d      	ldrb	r5, [r3, #0]
   d4880:	b1ad      	cbz	r5, d48ae <loop+0x492>
      display.clearDisplay();
   d4882:	4c64      	ldr	r4, [pc, #400]	; (d4a14 <loop+0x5f8>)
   d4884:	4620      	mov	r0, r4
   d4886:	f000 fff9 	bl	d587c <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d488a:	4620      	mov	r0, r4
   d488c:	2101      	movs	r1, #1
   d488e:	f000 fe76 	bl	d557e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4892:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4896:	6163      	str	r3, [r4, #20]
      display.println("Current File:");
   d4898:	495f      	ldr	r1, [pc, #380]	; (d4a18 <loop+0x5fc>)
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d489a:	6126      	str	r6, [r4, #16]
   d489c:	4620      	mov	r0, r4
   d489e:	f004 fb58 	bl	d8f52 <_ZN5Print7printlnEPKc>
        operator const char*() const { return c_str(); }
   d48a2:	4b55      	ldr	r3, [pc, #340]	; (d49f8 <loop+0x5dc>)
      display.println(datafile_name);
   d48a4:	4620      	mov	r0, r4
   d48a6:	6819      	ldr	r1, [r3, #0]
   d48a8:	f004 fb53 	bl	d8f52 <_ZN5Print7printlnEPKc>
   d48ac:	e74f      	b.n	d474e <loop+0x332>
    else if (buttonC){
   d48ae:	4b5b      	ldr	r3, [pc, #364]	; (d4a1c <loop+0x600>)
   d48b0:	781b      	ldrb	r3, [r3, #0]
   d48b2:	2b00      	cmp	r3, #0
   d48b4:	d08c      	beq.n	d47d0 <loop+0x3b4>
      display.clearDisplay();
   d48b6:	4c57      	ldr	r4, [pc, #348]	; (d4a14 <loop+0x5f8>)
   d48b8:	4620      	mov	r0, r4
   d48ba:	f000 ffdf 	bl	d587c <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d48be:	2101      	movs	r1, #1
   d48c0:	4620      	mov	r0, r4
   d48c2:	f000 fe5c 	bl	d557e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d48c6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
      display.println(timeStamp);
   d48ca:	9902      	ldr	r1, [sp, #8]
   d48cc:	6163      	str	r3, [r4, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d48ce:	6125      	str	r5, [r4, #16]
   d48d0:	4620      	mov	r0, r4
   d48d2:	f004 fb3e 	bl	d8f52 <_ZN5Print7printlnEPKc>
   d48d6:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
      display.print("Battery: ");
   d48da:	4951      	ldr	r1, [pc, #324]	; (d4a20 <loop+0x604>)
   d48dc:	6123      	str	r3, [r4, #16]
   d48de:	4620      	mov	r0, r4
   d48e0:	f004 fb24 	bl	d8f2c <_ZN5Print5printEPKc>
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d48e4:	462a      	mov	r2, r5
   d48e6:	a90a      	add	r1, sp, #40	; 0x28
   d48e8:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d48ea:	950a      	str	r5, [sp, #40]	; 0x28
    const int ret = diag_get_source(id, &src, nullptr);
   d48ec:	f003 fbdc 	bl	d80a8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d48f0:	2800      	cmp	r0, #0
   d48f2:	d132      	bne.n	d495a <loop+0x53e>
        return ret;
    }
    return get(src, val);
   d48f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    SPARK_ASSERT(src && src->callback);
   d48f6:	b10c      	cbz	r4, d48fc <loop+0x4e0>
   d48f8:	6923      	ldr	r3, [r4, #16]
   d48fa:	b923      	cbnz	r3, d4906 <loop+0x4ea>
   d48fc:	4a49      	ldr	r2, [pc, #292]	; (d4a24 <loop+0x608>)
   d48fe:	2100      	movs	r1, #0
   d4900:	200a      	movs	r0, #10
   d4902:	f003 fbc9 	bl	d8098 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4906:	2300      	movs	r3, #0
   d4908:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   d490c:	230c      	movs	r3, #12
   d490e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   d4912:	ad06      	add	r5, sp, #24
   d4914:	2304      	movs	r3, #4
   d4916:	950f      	str	r5, [sp, #60]	; 0x3c
   d4918:	9310      	str	r3, [sp, #64]	; 0x40
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d491a:	6923      	ldr	r3, [r4, #16]
   d491c:	aa0e      	add	r2, sp, #56	; 0x38
   d491e:	2101      	movs	r1, #1
   d4920:	4620      	mov	r0, r4
   d4922:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4924:	b9c8      	cbnz	r0, d495a <loop+0x53e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4926:	882b      	ldrh	r3, [r5, #0]
   d4928:	ee07 3a90 	vmov	s15, r3
   d492c:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
      display.print(int(System.batteryCharge()));
   d4930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4934:	ee17 4a90 	vmov	r4, s15
        if (n < 0 && base == 10) {
   d4938:	2c00      	cmp	r4, #0
   d493a:	da11      	bge.n	d4960 <loop+0x544>
            t = print('-');
   d493c:	212d      	movs	r1, #45	; 0x2d
   d493e:	4835      	ldr	r0, [pc, #212]	; (d4a14 <loop+0x5f8>)
   d4940:	f004 faf8 	bl	d8f34 <_ZN5Print5printEc>
            val = -n;
   d4944:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4946:	220a      	movs	r2, #10
   d4948:	4832      	ldr	r0, [pc, #200]	; (d4a14 <loop+0x5f8>)
   d494a:	f004 fb0c 	bl	d8f66 <_ZN5Print11printNumberEmh>
      display.println(" %");
   d494e:	4936      	ldr	r1, [pc, #216]	; (d4a28 <loop+0x60c>)
   d4950:	4830      	ldr	r0, [pc, #192]	; (d4a14 <loop+0x5f8>)
   d4952:	f004 fafe 	bl	d8f52 <_ZN5Print7printlnEPKc>
      display.display();
   d4956:	482f      	ldr	r0, [pc, #188]	; (d4a14 <loop+0x5f8>)
   d4958:	e738      	b.n	d47cc <loop+0x3b0>
            return -1.0f;
   d495a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d495e:	e7e7      	b.n	d4930 <loop+0x514>
            val = n;
   d4960:	ee17 1a90 	vmov	r1, s15
   d4964:	e7ef      	b.n	d4946 <loop+0x52a>
	StringSumHelper(const String &s) : String(s) {}
   d4966:	a902      	add	r1, sp, #8
   d4968:	a80a      	add	r0, sp, #40	; 0x28
   d496a:	f004 fe02 	bl	d9572 <_ZN6StringC1ERKS_>
            myFile.println(String(timeStamp + ","+gga.northSouthIndicator+" "+conv_coords(gga.latitude.toFloat())+","+gga.eastWestIndicator+" "+conv_coords(gga.longitude.toFloat())+","+sig.getStrength()));
   d496e:	492f      	ldr	r1, [pc, #188]	; (d4a2c <loop+0x610>)
   d4970:	a80a      	add	r0, sp, #40	; 0x28
   d4972:	f004 feab 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d4976:	a94c      	add	r1, sp, #304	; 0x130
   d4978:	f004 fe9c 	bl	d96b4 <_ZplRK15StringSumHelperRK6String>
   d497c:	492c      	ldr	r1, [pc, #176]	; (d4a30 <loop+0x614>)
   d497e:	f004 fea5 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d4982:	4604      	mov	r4, r0
   d4984:	a848      	add	r0, sp, #288	; 0x120
   d4986:	f004 ff6b 	bl	d9860 <_ZNK6String7toFloatEv>
   d498a:	f7ff fceb 	bl	d4364 <_Z11conv_coordsf>
   d498e:	4620      	mov	r0, r4
   d4990:	f004 febb 	bl	d970a <_ZplRK15StringSumHelperf>
   d4994:	4925      	ldr	r1, [pc, #148]	; (d4a2c <loop+0x610>)
   d4996:	f004 fe99 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d499a:	a954      	add	r1, sp, #336	; 0x150
   d499c:	f004 fe8a 	bl	d96b4 <_ZplRK15StringSumHelperRK6String>
   d49a0:	4923      	ldr	r1, [pc, #140]	; (d4a30 <loop+0x614>)
   d49a2:	f004 fe93 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d49a6:	4604      	mov	r4, r0
   d49a8:	a850      	add	r0, sp, #320	; 0x140
   d49aa:	f004 ff59 	bl	d9860 <_ZNK6String7toFloatEv>
   d49ae:	f7ff fcd9 	bl	d4364 <_Z11conv_coordsf>
   d49b2:	4620      	mov	r0, r4
   d49b4:	f004 fea9 	bl	d970a <_ZplRK15StringSumHelperf>
   d49b8:	491c      	ldr	r1, [pc, #112]	; (d4a2c <loop+0x610>)
   d49ba:	f004 fe87 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d49be:	4604      	mov	r4, r0
   d49c0:	a81e      	add	r0, sp, #120	; 0x78
   d49c2:	f003 fd6f 	bl	d84a4 <_ZNK14CellularSignal11getStrengthEv>
   d49c6:	4620      	mov	r0, r4
   d49c8:	f004 fe9f 	bl	d970a <_ZplRK15StringSumHelperf>
   d49cc:	4601      	mov	r1, r0
   d49ce:	a80e      	add	r0, sp, #56	; 0x38
   d49d0:	f004 fdcf 	bl	d9572 <_ZN6StringC1ERKS_>
   d49d4:	990e      	ldr	r1, [sp, #56]	; 0x38
   d49d6:	4817      	ldr	r0, [pc, #92]	; (d4a34 <loop+0x618>)
   d49d8:	f004 fabb 	bl	d8f52 <_ZN5Print7printlnEPKc>
   d49dc:	a80e      	add	r0, sp, #56	; 0x38
   d49de:	f004 fd3d 	bl	d945c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d49e2:	a80a      	add	r0, sp, #40	; 0x28
   d49e4:	f004 fd3a 	bl	d945c <_ZN6StringD1Ev>
            myFile.close();
   d49e8:	4805      	ldr	r0, [pc, #20]	; (d4a00 <loop+0x5e4>)
   d49ea:	f002 f839 	bl	d6a60 <_ZN7FatFile5closeEv>
   d49ee:	e711      	b.n	d4814 <loop+0x3f8>
   d49f0:	2003e06c 	.word	0x2003e06c
   d49f4:	2003e0b4 	.word	0x2003e0b4
   d49f8:	2003dfec 	.word	0x2003dfec
   d49fc:	2003e540 	.word	0x2003e540
   d4a00:	2003e080 	.word	0x2003e080
   d4a04:	000dd096 	.word	0x000dd096
   d4a08:	000ddcf4 	.word	0x000ddcf4
   d4a0c:	000ddd00 	.word	0x000ddd00
   d4a10:	2003dfe8 	.word	0x2003dfe8
   d4a14:	2003dffc 	.word	0x2003dffc
   d4a18:	000dd07b 	.word	0x000dd07b
   d4a1c:	2003dfe9 	.word	0x2003dfe9
   d4a20:	000dd089 	.word	0x000dd089
   d4a24:	000d7d59 	.word	0x000d7d59
   d4a28:	000dd093 	.word	0x000dd093
   d4a2c:	000dd0bc 	.word	0x000dd0bc
   d4a30:	000dd064 	.word	0x000dd064
   d4a34:	2003e070 	.word	0x2003e070

000d4a38 <setup>:
{
   d4a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  delay(2000);
   d4a3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
   d4a3e:	b087      	sub	sp, #28
  display.setup();
   d4a40:	4c6e      	ldr	r4, [pc, #440]	; (d4bfc <setup+0x1c4>)
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4a42:	4d6f      	ldr	r5, [pc, #444]	; (d4c00 <setup+0x1c8>)
  delay(2000);
   d4a44:	f003 fc66 	bl	d8314 <delay>
  Serial.begin();
   d4a48:	f005 f9b2 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4a4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4a50:	f005 f9a2 	bl	d9d98 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   d4a54:	f005 f9ac 	bl	d9db0 <_Z16_fetch_usbserialv>
   d4a58:	496a      	ldr	r1, [pc, #424]	; (d4c04 <setup+0x1cc>)
   d4a5a:	f004 fa7a 	bl	d8f52 <_ZN5Print7printlnEPKc>
  display.setup();
   d4a5e:	4620      	mov	r0, r4
   d4a60:	f003 f8f0 	bl	d7c44 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4a64:	4620      	mov	r0, r4
   d4a66:	f000 ff09 	bl	d587c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	f001 f972 	bl	d5d54 <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   d4a70:	2101      	movs	r1, #1
   d4a72:	4620      	mov	r0, r4
   d4a74:	f000 fd83 	bl	d557e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4a78:	2600      	movs	r6, #0
   d4a7a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4a7e:	e9c4 6304 	strd	r6, r3, [r4, #16]
  display.println("Initializing...");
   d4a82:	4960      	ldr	r1, [pc, #384]	; (d4c04 <setup+0x1cc>)
   d4a84:	4620      	mov	r0, r4
   d4a86:	f004 fa64 	bl	d8f52 <_ZN5Print7printlnEPKc>
  display.display();
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f001 f962 	bl	d5d54 <_ZN16Adafruit_SSD13067displayEv>
  _gps.begin(9600);
   d4a90:	485d      	ldr	r0, [pc, #372]	; (d4c08 <setup+0x1d0>)
   d4a92:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4a96:	f001 fa2f 	bl	d5ef8 <_ZN3Gps5beginEm>
   d4a9a:	4628      	mov	r0, r5
   d4a9c:	4632      	mov	r2, r6
   d4a9e:	4631      	mov	r1, r6
   d4aa0:	f7ff fc09 	bl	d42b6 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4aa4:	68a8      	ldr	r0, [r5, #8]
   d4aa6:	4625      	mov	r5, r4
   d4aa8:	b140      	cbz	r0, d4abc <setup+0x84>
   d4aaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4aae:	9300      	str	r3, [sp, #0]
   d4ab0:	9601      	str	r6, [sp, #4]
   d4ab2:	4633      	mov	r3, r6
   d4ab4:	4632      	mov	r2, r6
   d4ab6:	4631      	mov	r1, r6
   d4ab8:	f003 f91e 	bl	d7cf8 <os_timer_change>
   d4abc:	f7ff fc92 	bl	d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	f004 fbb8 	bl	d9236 <_ZN8SPIClass11setDataModeEh>
 Particle.publish("SDCard_Setup", "Initializing");
   d4ac6:	4a51      	ldr	r2, [pc, #324]	; (d4c0c <setup+0x1d4>)
   d4ac8:	4951      	ldr	r1, [pc, #324]	; (d4c10 <setup+0x1d8>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4aca:	4c52      	ldr	r4, [pc, #328]	; (d4c14 <setup+0x1dc>)
   d4acc:	a802      	add	r0, sp, #8
   d4ace:	f7ff fb97 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ad2:	a803      	add	r0, sp, #12
   d4ad4:	f7ff fc70 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class SPISettings : public Printable {
   d4ad8:	4b4f      	ldr	r3, [pc, #316]	; (d4c18 <setup+0x1e0>)
   d4ada:	9302      	str	r3, [sp, #8]
   d4adc:	2300      	movs	r3, #0
   d4ade:	f88d 300c 	strb.w	r3, [sp, #12]
   d4ae2:	f504 678c 	add.w	r7, r4, #1120	; 0x460
   d4ae6:	4b4d      	ldr	r3, [pc, #308]	; (d4c1c <setup+0x1e4>)
   d4ae8:	9304      	str	r3, [sp, #16]
   d4aea:	2601      	movs	r6, #1
   d4aec:	ab02      	add	r3, sp, #8
   d4aee:	2205      	movs	r2, #5
   d4af0:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4af4:	4638      	mov	r0, r7
   d4af6:	f8ad 6014 	strh.w	r6, [sp, #20]
   d4afa:	f002 fe49 	bl	d7790 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d4afe:	2800      	cmp	r0, #0
   d4b00:	d05d      	beq.n	d4bbe <setup+0x186>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4b02:	6027      	str	r7, [r4, #0]
    vwd()->close();
   d4b04:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   d4b08:	f001 ffaa 	bl	d6a60 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4b0c:	4631      	mov	r1, r6
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f002 fcec 	bl	d74ec <_ZN9FatVolume4initEh>
   d4b14:	f204 463c 	addw	r6, r4, #1084	; 0x43c
   d4b18:	4601      	mov	r1, r0
   d4b1a:	2800      	cmp	r0, #0
   d4b1c:	d04a      	beq.n	d4bb4 <setup+0x17c>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4b1e:	493d      	ldr	r1, [pc, #244]	; (d4c14 <setup+0x1dc>)
   d4b20:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   d4b24:	f001 fdbd 	bl	d66a2 <_ZN7FatFile8openRootEP9FatVolume>
   d4b28:	2800      	cmp	r0, #0
   d4b2a:	d048      	beq.n	d4bbe <setup+0x186>
    if (!dir->isDir()) {
   d4b2c:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4b30:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4b34:	d043      	beq.n	d4bbe <setup+0x186>
    m_cwd = dir;
   d4b36:	4b3a      	ldr	r3, [pc, #232]	; (d4c20 <setup+0x1e8>)
            Particle.publish("SDCard Logger", "OK");
   d4b38:	4a3a      	ldr	r2, [pc, #232]	; (d4c24 <setup+0x1ec>)
   d4b3a:	493b      	ldr	r1, [pc, #236]	; (d4c28 <setup+0x1f0>)
   d4b3c:	601e      	str	r6, [r3, #0]
   d4b3e:	a802      	add	r0, sp, #8
   d4b40:	f7ff fb5e 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4b44:	a803      	add	r0, sp, #12
   d4b46:	f7ff fc37 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4b4a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init - OK");
   d4b4e:	4937      	ldr	r1, [pc, #220]	; (d4c2c <setup+0x1f4>)
   d4b50:	612b      	str	r3, [r5, #16]
   d4b52:	482a      	ldr	r0, [pc, #168]	; (d4bfc <setup+0x1c4>)
   d4b54:	f004 f9fd 	bl	d8f52 <_ZN5Print7printlnEPKc>
          display.display();
   d4b58:	4828      	ldr	r0, [pc, #160]	; (d4bfc <setup+0x1c4>)
   d4b5a:	f001 f8fb 	bl	d5d54 <_ZN16Adafruit_SSD13067displayEv>
            delay(1000);
   d4b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4b62:	f003 fbd7 	bl	d8314 <delay>
    attachInterrupt(D4, displayvoltage_button_A, CHANGE);
   d4b66:	2400      	movs	r4, #0
    pinMode(D4, INPUT_PULLUP);
   d4b68:	2102      	movs	r1, #2
   d4b6a:	2004      	movs	r0, #4
   d4b6c:	f005 fa78 	bl	da060 <pinMode>
    attachInterrupt(D4, displayvoltage_button_A, CHANGE);
   d4b70:	4622      	mov	r2, r4
   d4b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4b76:	492e      	ldr	r1, [pc, #184]	; (d4c30 <setup+0x1f8>)
   d4b78:	9400      	str	r4, [sp, #0]
   d4b7a:	2004      	movs	r0, #4
   d4b7c:	f004 f86c 	bl	d8c58 <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(D3, INPUT_PULLUP);
   d4b80:	2102      	movs	r1, #2
   d4b82:	2003      	movs	r0, #3
   d4b84:	f005 fa6c 	bl	da060 <pinMode>
    attachInterrupt(D3, displayvoltage_button_B, CHANGE);
   d4b88:	4622      	mov	r2, r4
   d4b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4b8e:	4929      	ldr	r1, [pc, #164]	; (d4c34 <setup+0x1fc>)
   d4b90:	9400      	str	r4, [sp, #0]
   d4b92:	2003      	movs	r0, #3
   d4b94:	f004 f860 	bl	d8c58 <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(D2, INPUT_PULLUP);
   d4b98:	2102      	movs	r1, #2
   d4b9a:	4608      	mov	r0, r1
   d4b9c:	f005 fa60 	bl	da060 <pinMode>
    attachInterrupt(D2, displayvoltage_button_C, CHANGE);
   d4ba0:	4925      	ldr	r1, [pc, #148]	; (d4c38 <setup+0x200>)
   d4ba2:	9400      	str	r4, [sp, #0]
   d4ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4ba8:	4622      	mov	r2, r4
   d4baa:	2002      	movs	r0, #2
   d4bac:	f004 f854 	bl	d8c58 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4bb0:	b007      	add	sp, #28
   d4bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (part ? init(part) : init(1) || init(0))
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	f002 fc99 	bl	d74ec <_ZN9FatVolume4initEh>
   d4bba:	2800      	cmp	r0, #0
   d4bbc:	d1af      	bne.n	d4b1e <setup+0xe6>
         Particle.publish("SDCard Logger", "Failed");
   d4bbe:	4a1f      	ldr	r2, [pc, #124]	; (d4c3c <setup+0x204>)
   d4bc0:	4919      	ldr	r1, [pc, #100]	; (d4c28 <setup+0x1f0>)
   d4bc2:	a802      	add	r0, sp, #8
   d4bc4:	f7ff fb1c 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4bc8:	a803      	add	r0, sp, #12
   d4bca:	f7ff fbf5 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
         delay(1000);
   d4bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4bd2:	f003 fb9f 	bl	d8314 <delay>
         Particle.publish("ALERT", "SDCard_Failure!");
   d4bd6:	4a1a      	ldr	r2, [pc, #104]	; (d4c40 <setup+0x208>)
   d4bd8:	491a      	ldr	r1, [pc, #104]	; (d4c44 <setup+0x20c>)
   d4bda:	a802      	add	r0, sp, #8
   d4bdc:	f7ff fb10 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4be0:	a803      	add	r0, sp, #12
   d4be2:	f7ff fbe9 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4be6:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init Failed");
   d4bea:	4917      	ldr	r1, [pc, #92]	; (d4c48 <setup+0x210>)
   d4bec:	612b      	str	r3, [r5, #16]
   d4bee:	4803      	ldr	r0, [pc, #12]	; (d4bfc <setup+0x1c4>)
   d4bf0:	f004 f9af 	bl	d8f52 <_ZN5Print7printlnEPKc>
          display.display();
   d4bf4:	4801      	ldr	r0, [pc, #4]	; (d4bfc <setup+0x1c4>)
   d4bf6:	f001 f8ad 	bl	d5d54 <_ZN16Adafruit_SSD13067displayEv>
   d4bfa:	e7b4      	b.n	d4b66 <setup+0x12e>
   d4bfc:	2003dffc 	.word	0x2003dffc
   d4c00:	2003dfcc 	.word	0x2003dfcc
   d4c04:	000dd0be 	.word	0x000dd0be
   d4c08:	2003ded0 	.word	0x2003ded0
   d4c0c:	000dd0ce 	.word	0x000dd0ce
   d4c10:	000dd0db 	.word	0x000dd0db
   d4c14:	2003e0b8 	.word	0x2003e0b8
   d4c18:	000dd144 	.word	0x000dd144
   d4c1c:	02faf080 	.word	0x02faf080
   d4c20:	2003e540 	.word	0x2003e540
   d4c24:	000dd105 	.word	0x000dd105
   d4c28:	000dd0e8 	.word	0x000dd0e8
   d4c2c:	000dd0f6 	.word	0x000dd0f6
   d4c30:	000d40e5 	.word	0x000d40e5
   d4c34:	000d4105 	.word	0x000d4105
   d4c38:	000d4125 	.word	0x000d4125
   d4c3c:	000dd12b 	.word	0x000dd12b
   d4c40:	000dd108 	.word	0x000dd108
   d4c44:	000dd118 	.word	0x000dd118
   d4c48:	000dd11e 	.word	0x000dd11e

000d4c4c <_GLOBAL__sub_I__gps>:
 }
   d4c4c:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c4e:	4b4b      	ldr	r3, [pc, #300]	; (d4d7c <_GLOBAL__sub_I__gps+0x130>)
   d4c50:	2400      	movs	r4, #0
   d4c52:	b088      	sub	sp, #32
   d4c54:	701c      	strb	r4, [r3, #0]
Gps _gps = Gps(&Serial1);
   d4c56:	f005 f827 	bl	d9ca8 <_Z22__fetch_global_Serial1v>
   d4c5a:	4601      	mov	r1, r0
   d4c5c:	4848      	ldr	r0, [pc, #288]	; (d4d80 <_GLOBAL__sub_I__gps+0x134>)
   d4c5e:	f001 f934 	bl	d5eca <_ZN3GpsC1EP11USARTSerial>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4c62:	4b48      	ldr	r3, [pc, #288]	; (d4d84 <_GLOBAL__sub_I__gps+0x138>)
   d4c64:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c66:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4c68:	4b47      	ldr	r3, [pc, #284]	; (d4d88 <_GLOBAL__sub_I__gps+0x13c>)
   d4c6a:	4a48      	ldr	r2, [pc, #288]	; (d4d8c <_GLOBAL__sub_I__gps+0x140>)
   d4c6c:	601a      	str	r2, [r3, #0]
   d4c6e:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c72:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c76:	ae02      	add	r6, sp, #8
   d4c78:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4c80:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4c84:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4c88:	e882 0003 	stmia.w	r2, {r0, r1}
   d4c8c:	4a40      	ldr	r2, [pc, #256]	; (d4d90 <_GLOBAL__sub_I__gps+0x144>)
   d4c8e:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c90:	699a      	ldr	r2, [r3, #24]
   d4c92:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c94:	4a3f      	ldr	r2, [pc, #252]	; (d4d94 <_GLOBAL__sub_I__gps+0x148>)
   d4c96:	711c      	strb	r4, [r3, #4]
   d4c98:	609c      	str	r4, [r3, #8]
   d4c9a:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4c9c:	f103 0008 	add.w	r0, r3, #8
   d4ca0:	4a3d      	ldr	r2, [pc, #244]	; (d4d98 <_GLOBAL__sub_I__gps+0x14c>)
      __a = _GLIBCXX_MOVE(__b);
   d4ca2:	9406      	str	r4, [sp, #24]
   d4ca4:	2101      	movs	r1, #1
   d4ca6:	e9cd 4400 	strd	r4, r4, [sp]
   d4caa:	f003 f80d 	bl	d7cc8 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d4cae:	4628      	mov	r0, r5
   d4cb0:	f7ff faf8 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
OledWingAdafruit display;
   d4cb4:	2107      	movs	r1, #7
   d4cb6:	4839      	ldr	r0, [pc, #228]	; (d4d9c <_GLOBAL__sub_I__gps+0x150>)
   d4cb8:	f002 ff96 	bl	d7be8 <_ZN16OledWingAdafruitC1Ei>
    static String deviceID(void) { return spark_deviceID(); }
   d4cbc:	4938      	ldr	r1, [pc, #224]	; (d4da0 <_GLOBAL__sub_I__gps+0x154>)
   d4cbe:	4608      	mov	r0, r1
   d4cc0:	f003 fa50 	bl	d8164 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
   d4cc4:	4936      	ldr	r1, [pc, #216]	; (d4da0 <_GLOBAL__sub_I__gps+0x154>)
   d4cc6:	4628      	mov	r0, r5
   d4cc8:	f004 fc53 	bl	d9572 <_ZN6StringC1ERKS_>
String datafile_name = String(myID+"-"+Time.year()+Time.month()+Time.day()+Time.hour()+Time.minute()+".csv");
   d4ccc:	4935      	ldr	r1, [pc, #212]	; (d4da4 <_GLOBAL__sub_I__gps+0x158>)
   d4cce:	4628      	mov	r0, r5
   d4cd0:	f004 fcfc 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d4cd4:	4606      	mov	r6, r0
   d4cd6:	f004 ff75 	bl	d9bc4 <_ZN9TimeClass4yearEv>
   d4cda:	4601      	mov	r1, r0
   d4cdc:	4630      	mov	r0, r6
   d4cde:	f004 fd0a 	bl	d96f6 <_ZplRK15StringSumHelperi>
   d4ce2:	4606      	mov	r6, r0
   d4ce4:	f004 ff66 	bl	d9bb4 <_ZN9TimeClass5monthEv>
   d4ce8:	4601      	mov	r1, r0
   d4cea:	4630      	mov	r0, r6
   d4cec:	f004 fd03 	bl	d96f6 <_ZplRK15StringSumHelperi>
   d4cf0:	4606      	mov	r6, r0
   d4cf2:	f004 ff53 	bl	d9b9c <_ZN9TimeClass3dayEv>
   d4cf6:	4601      	mov	r1, r0
   d4cf8:	4630      	mov	r0, r6
   d4cfa:	f004 fcfc 	bl	d96f6 <_ZplRK15StringSumHelperi>
   d4cfe:	4606      	mov	r6, r0
   d4d00:	f004 ff34 	bl	d9b6c <_ZN9TimeClass4hourEv>
   d4d04:	4601      	mov	r1, r0
   d4d06:	4630      	mov	r0, r6
   d4d08:	f004 fcf5 	bl	d96f6 <_ZplRK15StringSumHelperi>
   d4d0c:	4606      	mov	r6, r0
   d4d0e:	f004 ff39 	bl	d9b84 <_ZN9TimeClass6minuteEv>
   d4d12:	4601      	mov	r1, r0
   d4d14:	4630      	mov	r0, r6
   d4d16:	f004 fcee 	bl	d96f6 <_ZplRK15StringSumHelperi>
   d4d1a:	4923      	ldr	r1, [pc, #140]	; (d4da8 <_GLOBAL__sub_I__gps+0x15c>)
   d4d1c:	f004 fcd6 	bl	d96cc <_ZplRK15StringSumHelperPKc>
   d4d20:	4601      	mov	r1, r0
   d4d22:	4822      	ldr	r0, [pc, #136]	; (d4dac <_GLOBAL__sub_I__gps+0x160>)
   d4d24:	f004 fc25 	bl	d9572 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d4d28:	4628      	mov	r0, r5
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4d2a:	4d21      	ldr	r5, [pc, #132]	; (d4db0 <_GLOBAL__sub_I__gps+0x164>)
   d4d2c:	f004 fb96 	bl	d945c <_ZN6StringD1Ev>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4d30:	2364      	movs	r3, #100	; 0x64
   d4d32:	f885 3460 	strb.w	r3, [r5, #1120]	; 0x460
  {
   d4d36:	4b1f      	ldr	r3, [pc, #124]	; (d4db4 <_GLOBAL__sub_I__gps+0x168>)
   d4d38:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   d4d3c:	2301      	movs	r3, #1
   d4d3e:	f885 3474 	strb.w	r3, [r5, #1140]	; 0x474
   d4d42:	71ec      	strb	r4, [r5, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4d44:	f8a5 443c 	strh.w	r4, [r5, #1084]	; 0x43c
   d4d48:	f885 446a 	strb.w	r4, [r5, #1130]	; 0x46a
   d4d4c:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   d4d50:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   d4d54:	f7ff fb46 	bl	d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4d58:	4a17      	ldr	r2, [pc, #92]	; (d4db8 <_GLOBAL__sub_I__gps+0x16c>)
  File() {}
   d4d5a:	4918      	ldr	r1, [pc, #96]	; (d4dbc <_GLOBAL__sub_I__gps+0x170>)
   d4d5c:	6011      	str	r1, [r2, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d62:	6093      	str	r3, [r2, #8]
   d4d64:	8214      	strh	r4, [r2, #16]
    Print() : write_error(0) {}
   d4d66:	6054      	str	r4, [r2, #4]
int pub_time_milli = pub_time * 1000;
   d4d68:	4a15      	ldr	r2, [pc, #84]	; (d4dc0 <_GLOBAL__sub_I__gps+0x174>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4d6a:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
   d4d6e:	6812      	ldr	r2, [r2, #0]
   d4d70:	4353      	muls	r3, r2
   d4d72:	4a14      	ldr	r2, [pc, #80]	; (d4dc4 <_GLOBAL__sub_I__gps+0x178>)
   d4d74:	6013      	str	r3, [r2, #0]
 }
   d4d76:	b008      	add	sp, #32
   d4d78:	bd70      	pop	{r4, r5, r6, pc}
   d4d7a:	bf00      	nop
   d4d7c:	2003decc 	.word	0x2003decc
   d4d80:	2003ded0 	.word	0x2003ded0
   d4d84:	000d417d 	.word	0x000d417d
   d4d88:	2003dfcc 	.word	0x2003dfcc
   d4d8c:	000dd158 	.word	0x000dd158
   d4d90:	000d4149 	.word	0x000d4149
   d4d94:	000d4145 	.word	0x000d4145
   d4d98:	000d419b 	.word	0x000d419b
   d4d9c:	2003dffc 	.word	0x2003dffc
   d4da0:	2003e0a4 	.word	0x2003e0a4
   d4da4:	000dd132 	.word	0x000dd132
   d4da8:	000dd134 	.word	0x000dd134
   d4dac:	2003dfec 	.word	0x2003dfec
   d4db0:	2003e0b8 	.word	0x2003e0b8
   d4db4:	000dd144 	.word	0x000dd144
   d4db8:	2003e070 	.word	0x2003e070
   d4dbc:	000dd16c 	.word	0x000dd16c
   d4dc0:	2003dcdc 	.word	0x2003dcdc
   d4dc4:	2003e0b4 	.word	0x2003e0b4

000d4dc8 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4dcc:	b085      	sub	sp, #20
   d4dce:	461f      	mov	r7, r3
   d4dd0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4dd4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4dd8:	eba8 0902 	sub.w	r9, r8, r2
   d4ddc:	eba7 0a01 	sub.w	sl, r7, r1
   d4de0:	f1b9 0f00 	cmp.w	r9, #0
   d4de4:	bfb8      	it	lt
   d4de6:	f1c9 0900 	rsblt	r9, r9, #0
   d4dea:	f1ba 0f00 	cmp.w	sl, #0
   d4dee:	bfb8      	it	lt
   d4df0:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4df4:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4df6:	4683      	mov	fp, r0
   d4df8:	460c      	mov	r4, r1
   d4dfa:	4615      	mov	r5, r2
    if (steep) {
   d4dfc:	dd04      	ble.n	d4e08 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4dfe:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4e00:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4e02:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4e04:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4e06:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4e08:	42bc      	cmp	r4, r7
   d4e0a:	dd05      	ble.n	d4e18 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4e0c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4e0e:	4645      	mov	r5, r8
   d4e10:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4e12:	4622      	mov	r2, r4
   d4e14:	463c      	mov	r4, r7
   d4e16:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4e18:	1b3e      	subs	r6, r7, r4
   d4e1a:	b2b2      	uxth	r2, r6
   d4e1c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4e1e:	eba8 0205 	sub.w	r2, r8, r5
   d4e22:	2a00      	cmp	r2, #0
   d4e24:	bfb8      	it	lt
   d4e26:	4252      	neglt	r2, r2
   d4e28:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4e2a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4e2e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4e32:	4545      	cmp	r5, r8
   d4e34:	bfb4      	ite	lt
   d4e36:	2201      	movlt	r2, #1
   d4e38:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    int16_t err = dx / 2;
   d4e3c:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4e3e:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4e40:	42bc      	cmp	r4, r7
   d4e42:	dc1c      	bgt.n	d4e7e <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4e44:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4e48:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4e4a:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4e4c:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4e50:	bfc7      	ittee	gt
   d4e52:	4629      	movgt	r1, r5
   d4e54:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4e56:	462a      	movle	r2, r5
   d4e58:	4621      	movle	r1, r4
   d4e5a:	4658      	mov	r0, fp
   d4e5c:	47c0      	blx	r8
        }
        err -= dy;
   d4e5e:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4e60:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4e62:	1ab6      	subs	r6, r6, r2
   d4e64:	b2b1      	uxth	r1, r6
   d4e66:	b236      	sxth	r6, r6
        if (err < 0) {
   d4e68:	2e00      	cmp	r6, #0
   d4e6a:	da05      	bge.n	d4e78 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4e6c:	9a02      	ldr	r2, [sp, #8]
   d4e6e:	4415      	add	r5, r2
            err += dx;
   d4e70:	9a00      	ldr	r2, [sp, #0]
   d4e72:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4e74:	b22d      	sxth	r5, r5
            err += dx;
   d4e76:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4e78:	3401      	adds	r4, #1
   d4e7a:	b224      	sxth	r4, r4
   d4e7c:	e7e0      	b.n	d4e40 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4e7e:	b005      	add	sp, #20
   d4e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4e84 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4e84:	4770      	bx	lr

000d4e86 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4e86:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4e88:	6804      	ldr	r4, [r0, #0]
   d4e8a:	6924      	ldr	r4, [r4, #16]
   d4e8c:	46a4      	mov	ip, r4
}
   d4e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4e92:	4760      	bx	ip

000d4e94 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4e94:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4e96:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4e98:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4e9c:	9502      	str	r5, [sp, #8]
   d4e9e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4ea0:	46a4      	mov	ip, r4
}
   d4ea2:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4ea4:	4760      	bx	ip

000d4ea6 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4ea6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4ea8:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4eaa:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4eae:	9502      	str	r5, [sp, #8]
   d4eb0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4eb2:	46a4      	mov	ip, r4
}
   d4eb4:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4eb6:	4760      	bx	ip

000d4eb8 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4eb8:	b470      	push	{r4, r5, r6}
   d4eba:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4ebe:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4ec2:	6804      	ldr	r4, [r0, #0]
   d4ec4:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4ec8:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4eca:	46a4      	mov	ip, r4
}
   d4ecc:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4ece:	4760      	bx	ip

000d4ed0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4ed0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4ed4:	461c      	mov	r4, r3
    startWrite();
   d4ed6:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4ed8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4edc:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4ede:	4605      	mov	r5, r0
   d4ee0:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4ee2:	3c01      	subs	r4, #1
   d4ee4:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4ee6:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4ee8:	b224      	sxth	r4, r4
    startWrite();
   d4eea:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4eec:	682b      	ldr	r3, [r5, #0]
   d4eee:	f8cd 8004 	str.w	r8, [sp, #4]
   d4ef2:	9400      	str	r4, [sp, #0]
   d4ef4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	463b      	mov	r3, r7
   d4efa:	4632      	mov	r2, r6
   d4efc:	4639      	mov	r1, r7
   d4efe:	47a0      	blx	r4
    endWrite();
   d4f00:	682b      	ldr	r3, [r5, #0]
   d4f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f04:	4628      	mov	r0, r5
}
   d4f06:	b002      	add	sp, #8
   d4f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4f0c:	4718      	bx	r3

000d4f0e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4f12:	461d      	mov	r5, r3
    startWrite();
   d4f14:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4f16:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4f1a:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4f1c:	4604      	mov	r4, r0
   d4f1e:	4617      	mov	r7, r2
   d4f20:	460e      	mov	r6, r1
    startWrite();
   d4f22:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4f24:	e9cd 7800 	strd	r7, r8, [sp]
   d4f28:	6822      	ldr	r2, [r4, #0]
   d4f2a:	1e6b      	subs	r3, r5, #1
   d4f2c:	4433      	add	r3, r6
   d4f2e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4f30:	4620      	mov	r0, r4
   d4f32:	b21b      	sxth	r3, r3
   d4f34:	463a      	mov	r2, r7
   d4f36:	4631      	mov	r1, r6
   d4f38:	47a8      	blx	r5
    endWrite();
   d4f3a:	6823      	ldr	r3, [r4, #0]
   d4f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f3e:	4620      	mov	r0, r4
}
   d4f40:	b002      	add	sp, #8
   d4f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4f46:	4718      	bx	r3

000d4f48 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4f4c:	461e      	mov	r6, r3
    startWrite();
   d4f4e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4f50:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4f54:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4f56:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4f5a:	460c      	mov	r4, r1
   d4f5c:	4605      	mov	r5, r0
   d4f5e:	4617      	mov	r7, r2
    startWrite();
   d4f60:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4f62:	4426      	add	r6, r4
   d4f64:	42b4      	cmp	r4, r6
   d4f66:	682b      	ldr	r3, [r5, #0]
   d4f68:	da0b      	bge.n	d4f82 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4f6a:	f8cd 8000 	str.w	r8, [sp]
   d4f6e:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4f72:	4621      	mov	r1, r4
   d4f74:	464b      	mov	r3, r9
   d4f76:	463a      	mov	r2, r7
   d4f78:	4628      	mov	r0, r5
   d4f7a:	3401      	adds	r4, #1
   d4f7c:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4f7e:	b224      	sxth	r4, r4
   d4f80:	e7f0      	b.n	d4f64 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f84:	4628      	mov	r0, r5
}
   d4f86:	b002      	add	sp, #8
   d4f88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4f8c:	4718      	bx	r3

000d4f8e <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4f8e:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4f90:	6802      	ldr	r2, [r0, #0]
   d4f92:	9101      	str	r1, [sp, #4]
   d4f94:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4f98:	9100      	str	r1, [sp, #0]
   d4f9a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4f9c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4fa0:	2200      	movs	r2, #0
   d4fa2:	4611      	mov	r1, r2
   d4fa4:	47a0      	blx	r4
}
   d4fa6:	b002      	add	sp, #8
   d4fa8:	bd10      	pop	{r4, pc}

000d4faa <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4faa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4fae:	461d      	mov	r5, r3
    startWrite();
   d4fb0:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4fb2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4fb6:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4fb8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4fbc:	4604      	mov	r4, r0
   d4fbe:	460f      	mov	r7, r1
   d4fc0:	4616      	mov	r6, r2
    startWrite();
   d4fc2:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4fc4:	6823      	ldr	r3, [r4, #0]
   d4fc6:	f8cd 8000 	str.w	r8, [sp]
   d4fca:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4fce:	4632      	mov	r2, r6
   d4fd0:	462b      	mov	r3, r5
   d4fd2:	4639      	mov	r1, r7
   d4fd4:	4620      	mov	r0, r4
   d4fd6:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4fd8:	6823      	ldr	r3, [r4, #0]
   d4fda:	f8cd 8000 	str.w	r8, [sp]
   d4fde:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d4fe2:	4432      	add	r2, r6
   d4fe4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4fe8:	4639      	mov	r1, r7
   d4fea:	462b      	mov	r3, r5
   d4fec:	4620      	mov	r0, r4
   d4fee:	b212      	sxth	r2, r2
   d4ff0:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4ff2:	6823      	ldr	r3, [r4, #0]
   d4ff4:	f8cd 8000 	str.w	r8, [sp]
   d4ff8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4ffc:	4632      	mov	r2, r6
   d4ffe:	464b      	mov	r3, r9
   d5000:	4639      	mov	r1, r7
   d5002:	4620      	mov	r0, r4
   d5004:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d5006:	1e6b      	subs	r3, r5, #1
   d5008:	19d9      	adds	r1, r3, r7
   d500a:	6823      	ldr	r3, [r4, #0]
   d500c:	f8cd 8000 	str.w	r8, [sp]
   d5010:	6a1d      	ldr	r5, [r3, #32]
   d5012:	4620      	mov	r0, r4
   d5014:	464b      	mov	r3, r9
   d5016:	4632      	mov	r2, r6
   d5018:	b209      	sxth	r1, r1
   d501a:	47a8      	blx	r5
    endWrite();
   d501c:	6823      	ldr	r3, [r4, #0]
   d501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5020:	4620      	mov	r0, r4
}
   d5022:	b002      	add	sp, #8
   d5024:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5028:	4718      	bx	r3

000d502a <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d502a:	4770      	bx	lr

000d502c <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d502c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5030:	4299      	cmp	r1, r3
        uint16_t color) {
   d5032:	4616      	mov	r6, r2
   d5034:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d5038:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d503c:	6802      	ldr	r2, [r0, #0]
   d503e:	4680      	mov	r8, r0
   d5040:	460d      	mov	r5, r1
   d5042:	461c      	mov	r4, r3
    if(x0 == x1){
   d5044:	d113      	bne.n	d506e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5046:	42be      	cmp	r6, r7
   d5048:	bfc8      	it	gt
   d504a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d504c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5050:	bfc4      	itt	gt
   d5052:	463e      	movgt	r6, r7
   d5054:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5056:	1c7b      	adds	r3, r7, #1
   d5058:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d505a:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d505c:	b21b      	sxth	r3, r3
   d505e:	4632      	mov	r2, r6
   d5060:	4629      	mov	r1, r5
   d5062:	4640      	mov	r0, r8
   d5064:	46a4      	mov	ip, r4
}
   d5066:	b003      	add	sp, #12
   d5068:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d506c:	4760      	bx	ip
    } else if(y0 == y1){
   d506e:	42be      	cmp	r6, r7
   d5070:	d10a      	bne.n	d5088 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d5072:	4299      	cmp	r1, r3
   d5074:	bfc2      	ittt	gt
   d5076:	460b      	movgt	r3, r1
   d5078:	4625      	movgt	r5, r4
   d507a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d507c:	1c63      	adds	r3, r4, #1
   d507e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d5082:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d5084:	1b5b      	subs	r3, r3, r5
   d5086:	e7e9      	b.n	d505c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5088:	6953      	ldr	r3, [r2, #20]
   d508a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d508c:	e9cd 7900 	strd	r7, r9, [sp]
   d5090:	f8d8 3000 	ldr.w	r3, [r8]
   d5094:	4640      	mov	r0, r8
   d5096:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5098:	4632      	mov	r2, r6
   d509a:	4623      	mov	r3, r4
   d509c:	4629      	mov	r1, r5
   d509e:	47b8      	blx	r7
        endWrite();
   d50a0:	f8d8 3000 	ldr.w	r3, [r8]
   d50a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50a6:	4640      	mov	r0, r8
}
   d50a8:	b003      	add	sp, #12
   d50aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d50ae:	4718      	bx	r3

000d50b0 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d50b0:	f001 0303 	and.w	r3, r1, #3
   d50b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d50b8:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d50ba:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d50bc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d50c0:	bf59      	ittee	pl
   d50c2:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d50c4:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d50c6:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d50c8:	81c3      	strhmi	r3, [r0, #14]
}
   d50ca:	4770      	bx	lr

000d50cc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d50cc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d50ce:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d50d0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d50d2:	4a07      	ldr	r2, [pc, #28]	; (d50f0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d50d4:	4d07      	ldr	r5, [pc, #28]	; (d50f4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d50d6:	8101      	strh	r1, [r0, #8]
   d50d8:	2400      	movs	r4, #0
    _width    = WIDTH;
   d50da:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d50dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d50e0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d50e4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d50e6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d50e8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d50ea:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d50ec:	6204      	str	r4, [r0, #32]
}
   d50ee:	bd30      	pop	{r4, r5, pc}
   d50f0:	01000101 	.word	0x01000101
   d50f4:	000dd694 	.word	0x000dd694

000d50f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d50f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50fc:	b089      	sub	sp, #36	; 0x24
   d50fe:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d5102:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5104:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d5108:	9304      	str	r3, [sp, #16]
   d510a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d510e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5110:	9305      	str	r3, [sp, #20]
   d5112:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d5116:	4604      	mov	r4, r0
    startWrite();
   d5118:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d511a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d511e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5122:	bf48      	it	mi
   d5124:	f108 020e 	addmi.w	r2, r8, #14
   d5128:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d512c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d512e:	4635      	mov	r5, r6
   d5130:	9b03      	ldr	r3, [sp, #12]
   d5132:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d5134:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d5138:	189a      	adds	r2, r3, r2
   d513a:	9b05      	ldr	r3, [sp, #20]
   d513c:	428b      	cmp	r3, r1
   d513e:	b212      	sxth	r2, r2
   d5140:	dd27      	ble.n	d5192 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5142:	9b04      	ldr	r3, [sp, #16]
   d5144:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d5146:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d514a:	9306      	str	r3, [sp, #24]
   d514c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d5150:	4580      	cmp	r8, r0
   d5152:	fa1f f189 	uxth.w	r1, r9
   d5156:	dd17      	ble.n	d5188 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5158:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d515a:	bf05      	ittet	eq
   d515c:	9b06      	ldreq	r3, [sp, #24]
   d515e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5160:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5162:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d5164:	bf18      	it	ne
   d5166:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5168:	062b      	lsls	r3, r5, #24
   d516a:	d50a      	bpl.n	d5182 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d516c:	9b02      	ldr	r3, [sp, #8]
   d516e:	6820      	ldr	r0, [r4, #0]
   d5170:	9207      	str	r2, [sp, #28]
   d5172:	4419      	add	r1, r3
   d5174:	6983      	ldr	r3, [r0, #24]
   d5176:	b209      	sxth	r1, r1
   d5178:	461f      	mov	r7, r3
   d517a:	4620      	mov	r0, r4
   d517c:	4653      	mov	r3, sl
   d517e:	47b8      	blx	r7
   d5180:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d5182:	f109 0901 	add.w	r9, r9, #1
   d5186:	e7e1      	b.n	d514c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5188:	9b01      	ldr	r3, [sp, #4]
   d518a:	3301      	adds	r3, #1
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	445e      	add	r6, fp
   d5190:	e7ce      	b.n	d5130 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d5192:	6823      	ldr	r3, [r4, #0]
   d5194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5196:	4620      	mov	r0, r4
}
   d5198:	b009      	add	sp, #36	; 0x24
   d519a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d519e:	4718      	bx	r3

000d51a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d51a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51a4:	ed2d 8b02 	vpush	{d8}
   d51a8:	b091      	sub	sp, #68	; 0x44
   d51aa:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d51ac:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d51ae:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d51b2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d51b6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d51ba:	9103      	str	r1, [sp, #12]
   d51bc:	461f      	mov	r7, r3
   d51be:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d51c2:	9304      	str	r3, [sp, #16]
   d51c4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d51c6:	2a00      	cmp	r2, #0
   d51c8:	f040 80c5 	bne.w	d5356 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d51cc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d51d0:	428b      	cmp	r3, r1
   d51d2:	f340 814c 	ble.w	d546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d51d6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d51da:	42b3      	cmp	r3, r6
   d51dc:	f340 8147 	ble.w	d546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d51e0:	2306      	movs	r3, #6
   d51e2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d51e6:	2b00      	cmp	r3, #0
   d51e8:	f340 8141 	ble.w	d546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d51ec:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d51f0:	2b00      	cmp	r3, #0
   d51f2:	f340 813c 	ble.w	d546e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d51f6:	7f03      	ldrb	r3, [r0, #28]
   d51f8:	b91b      	cbnz	r3, d5202 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d51fa:	2faf      	cmp	r7, #175	; 0xaf
   d51fc:	bf84      	itt	hi
   d51fe:	3701      	addhi	r7, #1
   d5200:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d5202:	f8db 3000 	ldr.w	r3, [fp]
   d5206:	4658      	mov	r0, fp
   d5208:	695b      	ldr	r3, [r3, #20]
   d520a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d520c:	2205      	movs	r2, #5
   d520e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5210:	2200      	movs	r2, #0
   d5212:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5214:	4a98      	ldr	r2, [pc, #608]	; (d5478 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d5216:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d521a:	18d3      	adds	r3, r2, r3
   d521c:	930c      	str	r3, [sp, #48]	; 0x30
   d521e:	b2b3      	uxth	r3, r6
   d5220:	9306      	str	r3, [sp, #24]
   d5222:	9a05      	ldr	r2, [sp, #20]
   d5224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5226:	5c9b      	ldrb	r3, [r3, r2]
   d5228:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d522a:	b2ab      	uxth	r3, r5
   d522c:	930b      	str	r3, [sp, #44]	; 0x2c
   d522e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d5232:	9308      	str	r3, [sp, #32]
   d5234:	9b03      	ldr	r3, [sp, #12]
   d5236:	fb02 f905 	mul.w	r9, r2, r5
   d523a:	fa19 f983 	uxtah	r9, r9, r3
   d523e:	fa0f f389 	sxth.w	r3, r9
   d5242:	ee08 3a10 	vmov	s16, r3
   d5246:	2308      	movs	r3, #8
   d5248:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d524a:	9b03      	ldr	r3, [sp, #12]
   d524c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5250:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d5254:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d5258:	9a07      	ldr	r2, [sp, #28]
   d525a:	f8db 3000 	ldr.w	r3, [fp]
   d525e:	07d2      	lsls	r2, r2, #31
   d5260:	d552      	bpl.n	d5308 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d5262:	2d01      	cmp	r5, #1
   d5264:	fa1f f289 	uxth.w	r2, r9
   d5268:	d13e      	bne.n	d52e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d526a:	2c01      	cmp	r4, #1
   d526c:	d13c      	bne.n	d52e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d526e:	699b      	ldr	r3, [r3, #24]
   d5270:	9906      	ldr	r1, [sp, #24]
   d5272:	461f      	mov	r7, r3
   d5274:	9b04      	ldr	r3, [sp, #16]
   d5276:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d5278:	b212      	sxth	r2, r2
   d527a:	4651      	mov	r1, sl
   d527c:	4658      	mov	r0, fp
   d527e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5280:	f109 0301 	add.w	r3, r9, #1
   d5284:	fa4f f983 	sxtb.w	r9, r3
   d5288:	9b07      	ldr	r3, [sp, #28]
   d528a:	085b      	lsrs	r3, r3, #1
   d528c:	9307      	str	r3, [sp, #28]
   d528e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5290:	3b01      	subs	r3, #1
   d5292:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5296:	930a      	str	r3, [sp, #40]	; 0x28
   d5298:	d1de      	bne.n	d5258 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d529a:	9f05      	ldr	r7, [sp, #20]
   d529c:	3701      	adds	r7, #1
   d529e:	b27b      	sxtb	r3, r7
   d52a0:	9305      	str	r3, [sp, #20]
   d52a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d52a4:	3b01      	subs	r3, #1
   d52a6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d52aa:	9309      	str	r3, [sp, #36]	; 0x24
   d52ac:	d1b9      	bne.n	d5222 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d52ae:	9b04      	ldr	r3, [sp, #16]
   d52b0:	4543      	cmp	r3, r8
   d52b2:	d00f      	beq.n	d52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d52b4:	2d01      	cmp	r5, #1
   d52b6:	f8db 3000 	ldr.w	r3, [fp]
   d52ba:	d13b      	bne.n	d5334 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d52bc:	2c01      	cmp	r4, #1
   d52be:	d139      	bne.n	d5334 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d52c0:	9908      	ldr	r1, [sp, #32]
   d52c2:	f8cd 8000 	str.w	r8, [sp]
   d52c6:	3105      	adds	r1, #5
   d52c8:	6a1c      	ldr	r4, [r3, #32]
   d52ca:	4632      	mov	r2, r6
   d52cc:	2308      	movs	r3, #8
   d52ce:	b209      	sxth	r1, r1
   d52d0:	4658      	mov	r0, fp
   d52d2:	47a0      	blx	r4
        endWrite();
   d52d4:	f8db 3000 	ldr.w	r3, [fp]
   d52d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52da:	4658      	mov	r0, fp
}
   d52dc:	b011      	add	sp, #68	; 0x44
   d52de:	ecbd 8b02 	vpop	{d8}
   d52e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d52e6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d52e8:	9906      	ldr	r1, [sp, #24]
   d52ea:	fb14 f202 	smulbb	r2, r4, r2
   d52ee:	440a      	add	r2, r1
   d52f0:	9904      	ldr	r1, [sp, #16]
   d52f2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d52f4:	9400      	str	r4, [sp, #0]
   d52f6:	69db      	ldr	r3, [r3, #28]
   d52f8:	ee18 1a10 	vmov	r1, s16
   d52fc:	461f      	mov	r7, r3
   d52fe:	b212      	sxth	r2, r2
   d5300:	462b      	mov	r3, r5
   d5302:	4658      	mov	r0, fp
   d5304:	47b8      	blx	r7
   d5306:	e7bb      	b.n	d5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d5308:	9a04      	ldr	r2, [sp, #16]
   d530a:	4542      	cmp	r2, r8
   d530c:	d0b8      	beq.n	d5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d530e:	2d01      	cmp	r5, #1
   d5310:	fa1f f289 	uxth.w	r2, r9
   d5314:	d107      	bne.n	d5326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d5316:	2c01      	cmp	r4, #1
   d5318:	d105      	bne.n	d5326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d531a:	699b      	ldr	r3, [r3, #24]
   d531c:	9906      	ldr	r1, [sp, #24]
   d531e:	461f      	mov	r7, r3
   d5320:	440a      	add	r2, r1
   d5322:	4643      	mov	r3, r8
   d5324:	e7a8      	b.n	d5278 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5326:	9906      	ldr	r1, [sp, #24]
   d5328:	f8cd 8004 	str.w	r8, [sp, #4]
   d532c:	fb14 f202 	smulbb	r2, r4, r2
   d5330:	440a      	add	r2, r1
   d5332:	e7df      	b.n	d52f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d5334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5336:	f8cd 8004 	str.w	r8, [sp, #4]
   d533a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d533e:	9a08      	ldr	r2, [sp, #32]
   d5340:	00e4      	lsls	r4, r4, #3
   d5342:	440a      	add	r2, r1
   d5344:	4611      	mov	r1, r2
   d5346:	9400      	str	r4, [sp, #0]
   d5348:	69dc      	ldr	r4, [r3, #28]
   d534a:	4632      	mov	r2, r6
   d534c:	462b      	mov	r3, r5
   d534e:	b209      	sxth	r1, r1
   d5350:	4658      	mov	r0, fp
   d5352:	47a0      	blx	r4
        endWrite();
   d5354:	e7be      	b.n	d52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5356:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d5358:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d535a:	6812      	ldr	r2, [r2, #0]
   d535c:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d535e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d5360:	b2ff      	uxtb	r7, r7
   d5362:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d5366:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d536a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d536c:	789a      	ldrb	r2, [r3, #2]
   d536e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d5370:	78da      	ldrb	r2, [r3, #3]
   d5372:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d5374:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5376:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d537a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d537e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d5380:	d801      	bhi.n	d5386 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d5382:	2c01      	cmp	r4, #1
   d5384:	d957      	bls.n	d5436 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d5386:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d538a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d538c:	fa0f f38a 	sxth.w	r3, sl
   d5390:	9307      	str	r3, [sp, #28]
        startWrite();
   d5392:	f8db 3000 	ldr.w	r3, [fp]
   d5396:	4658      	mov	r0, fp
   d5398:	695b      	ldr	r3, [r3, #20]
   d539a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d539c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d539e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53a2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53a4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d53a8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d53aa:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53ac:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d53ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d53b0:	429f      	cmp	r7, r3
   d53b2:	d28f      	bcs.n	d52d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53b4:	9b07      	ldr	r3, [sp, #28]
   d53b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d53b8:	443b      	add	r3, r7
   d53ba:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d53be:	2200      	movs	r2, #0
   d53c0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53c4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53c6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53ca:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53ce:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53d2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d53d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d53d6:	9905      	ldr	r1, [sp, #20]
   d53d8:	4291      	cmp	r1, r2
   d53da:	d241      	bcs.n	d5460 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d53dc:	1c5a      	adds	r2, r3, #1
   d53de:	b2d2      	uxtb	r2, r2
   d53e0:	075b      	lsls	r3, r3, #29
   d53e2:	920c      	str	r2, [sp, #48]	; 0x30
   d53e4:	d107      	bne.n	d53f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d53e6:	9b06      	ldr	r3, [sp, #24]
   d53e8:	9906      	ldr	r1, [sp, #24]
   d53ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d53ec:	3301      	adds	r3, #1
   d53ee:	b29b      	uxth	r3, r3
   d53f0:	f812 9001 	ldrb.w	r9, [r2, r1]
   d53f4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d53f6:	f019 0f80 	tst.w	r9, #128	; 0x80
   d53fa:	d012      	beq.n	d5422 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d53fc:	2d01      	cmp	r5, #1
   d53fe:	f8db 3000 	ldr.w	r3, [fp]
   d5402:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d5406:	d11a      	bne.n	d543e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d5408:	2c01      	cmp	r4, #1
   d540a:	d118      	bne.n	d543e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d540c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d540e:	699b      	ldr	r3, [r3, #24]
   d5410:	4411      	add	r1, r2
   d5412:	9a05      	ldr	r2, [sp, #20]
   d5414:	4411      	add	r1, r2
   d5416:	461e      	mov	r6, r3
   d5418:	4652      	mov	r2, sl
   d541a:	9b04      	ldr	r3, [sp, #16]
   d541c:	b209      	sxth	r1, r1
   d541e:	4658      	mov	r0, fp
   d5420:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d5422:	9e05      	ldr	r6, [sp, #20]
   d5424:	3601      	adds	r6, #1
   d5426:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d5428:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d542c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d542e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d5432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d5434:	e7ce      	b.n	d53d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d5436:	2300      	movs	r3, #0
   d5438:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d543c:	e7a9      	b.n	d5392 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d543e:	9805      	ldr	r0, [sp, #20]
   d5440:	9a08      	ldr	r2, [sp, #32]
   d5442:	4402      	add	r2, r0
   d5444:	fb02 1105 	mla	r1, r2, r5, r1
   d5448:	9a04      	ldr	r2, [sp, #16]
   d544a:	e9cd 4200 	strd	r4, r2, [sp]
   d544e:	69db      	ldr	r3, [r3, #28]
   d5450:	ee18 2a10 	vmov	r2, s16
   d5454:	461e      	mov	r6, r3
   d5456:	b209      	sxth	r1, r1
   d5458:	462b      	mov	r3, r5
   d545a:	4658      	mov	r0, fp
   d545c:	47b0      	blx	r6
   d545e:	e7e0      	b.n	d5422 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d5460:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d5462:	3701      	adds	r7, #1
   d5464:	4498      	add	r8, r3
   d5466:	fa5f f888 	uxtb.w	r8, r8
   d546a:	b2ff      	uxtb	r7, r7
   d546c:	e79f      	b.n	d53ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d546e:	b011      	add	sp, #68	; 0x44
   d5470:	ecbd 8b02 	vpop	{d8}
   d5474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5478:	000dd18c 	.word	0x000dd18c

000d547c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d547c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d547e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d5480:	b085      	sub	sp, #20
   d5482:	4604      	mov	r4, r0
   d5484:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d5486:	2a00      	cmp	r2, #0
   d5488:	d134      	bne.n	d54f4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d548a:	290a      	cmp	r1, #10
   d548c:	d108      	bne.n	d54a0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d548e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5490:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d5492:	7e42      	ldrb	r2, [r0, #25]
   d5494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d5498:	8263      	strh	r3, [r4, #18]
}
   d549a:	2001      	movs	r0, #1
   d549c:	b005      	add	sp, #20
   d549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d54a0:	290d      	cmp	r1, #13
   d54a2:	d0fa      	beq.n	d549a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d54a4:	7ee1      	ldrb	r1, [r4, #27]
   d54a6:	7e00      	ldrb	r0, [r0, #24]
   d54a8:	7e65      	ldrb	r5, [r4, #25]
   d54aa:	b171      	cbz	r1, d54ca <_ZN12Adafruit_GFX5writeEh+0x4e>
   d54ac:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d54b0:	2106      	movs	r1, #6
   d54b2:	fb11 6100 	smlabb	r1, r1, r0, r6
   d54b6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d54ba:	42b1      	cmp	r1, r6
   d54bc:	bfc1      	itttt	gt
   d54be:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d54c2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d54c4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d54c8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d54ca:	8ae2      	ldrh	r2, [r4, #22]
   d54cc:	9201      	str	r2, [sp, #4]
   d54ce:	8aa2      	ldrh	r2, [r4, #20]
   d54d0:	9200      	str	r2, [sp, #0]
   d54d2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d54d6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d54da:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d54de:	4620      	mov	r0, r4
   d54e0:	f7ff fe5e 	bl	d51a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d54e4:	7e23      	ldrb	r3, [r4, #24]
   d54e6:	8a22      	ldrh	r2, [r4, #16]
   d54e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d54ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d54f0:	8223      	strh	r3, [r4, #16]
   d54f2:	e7d2      	b.n	d549a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d54f4:	290a      	cmp	r1, #10
   d54f6:	d107      	bne.n	d5508 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d54f8:	2300      	movs	r3, #0
   d54fa:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d54fc:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d54fe:	7e41      	ldrb	r1, [r0, #25]
   d5500:	8a42      	ldrh	r2, [r0, #18]
   d5502:	fb01 2303 	mla	r3, r1, r3, r2
   d5506:	e7c7      	b.n	d5498 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d5508:	290d      	cmp	r1, #13
   d550a:	d0c6      	beq.n	d549a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d550c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d550e:	42a9      	cmp	r1, r5
   d5510:	d3c3      	bcc.n	d549a <_ZN12Adafruit_GFX5writeEh+0x1e>
   d5512:	7a51      	ldrb	r1, [r2, #9]
   d5514:	4299      	cmp	r1, r3
   d5516:	d3c0      	bcc.n	d549a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d5518:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d551a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d551c:	b2ed      	uxtb	r5, r5
   d551e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d5522:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d5524:	b32f      	cbz	r7, d5572 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d5526:	78e9      	ldrb	r1, [r5, #3]
   d5528:	b319      	cbz	r1, d5572 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d552a:	7ee1      	ldrb	r1, [r4, #27]
   d552c:	7e00      	ldrb	r0, [r0, #24]
   d552e:	7e66      	ldrb	r6, [r4, #25]
   d5530:	b191      	cbz	r1, d5558 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d5532:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d5536:	4439      	add	r1, r7
   d5538:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d553c:	fb00 7101 	mla	r1, r0, r1, r7
   d5540:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d5544:	42b9      	cmp	r1, r7
   d5546:	dd07      	ble.n	d5558 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d5548:	2700      	movs	r7, #0
   d554a:	8227      	strh	r7, [r4, #16]
   d554c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5550:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d5552:	fb02 1206 	mla	r2, r2, r6, r1
   d5556:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5558:	8ae2      	ldrh	r2, [r4, #22]
   d555a:	9201      	str	r2, [sp, #4]
   d555c:	8aa2      	ldrh	r2, [r4, #20]
   d555e:	9200      	str	r2, [sp, #0]
   d5560:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d5564:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5568:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d556c:	4620      	mov	r0, r4
   d556e:	f7ff fe17 	bl	d51a0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5572:	7929      	ldrb	r1, [r5, #4]
   d5574:	7e23      	ldrb	r3, [r4, #24]
   d5576:	8a22      	ldrh	r2, [r4, #16]
   d5578:	fb01 2303 	mla	r3, r1, r3, r2
   d557c:	e7b8      	b.n	d54f0 <_ZN12Adafruit_GFX5writeEh+0x74>

000d557e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d557e:	2901      	cmp	r1, #1
   d5580:	bf38      	it	cc
   d5582:	2101      	movcc	r1, #1
   d5584:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d5586:	7641      	strb	r1, [r0, #25]
}
   d5588:	4770      	bx	lr
	...

000d558c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d558c:	b510      	push	{r4, lr}
   d558e:	4b04      	ldr	r3, [pc, #16]	; (d55a0 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d5590:	6003      	str	r3, [r0, #0]
   d5592:	4604      	mov	r4, r0
  if(buffer) {
   d5594:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5596:	b108      	cbz	r0, d559c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d5598:	f002 fe6c 	bl	d8274 <free>
    buffer = NULL;
  }
}
   d559c:	4620      	mov	r0, r4
   d559e:	bd10      	pop	{r4, pc}
   d55a0:	000ddb8c 	.word	0x000ddb8c

000d55a4 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d55a4:	b510      	push	{r4, lr}
   d55a6:	4604      	mov	r4, r0
}
   d55a8:	f7ff fff0 	bl	d558c <_ZN16Adafruit_SSD1306D1Ev>
   d55ac:	4620      	mov	r0, r4
   d55ae:	2150      	movs	r1, #80	; 0x50
   d55b0:	f004 fdd0 	bl	da154 <_ZdlPvj>
   d55b4:	4620      	mov	r0, r4
   d55b6:	bd10      	pop	{r4, pc}

000d55b8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d55b8:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d55ba:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d55bc:	db4b      	blt.n	d5656 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d55be:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d55c2:	428c      	cmp	r4, r1
   d55c4:	dd47      	ble.n	d5656 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d55c6:	2a00      	cmp	r2, #0
   d55c8:	db45      	blt.n	d5656 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d55ca:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d55ce:	4294      	cmp	r4, r2
   d55d0:	dd41      	ble.n	d5656 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d55d2:	7e84      	ldrb	r4, [r0, #26]
   d55d4:	2c02      	cmp	r4, #2
   d55d6:	d01f      	beq.n	d5618 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d55d8:	2c03      	cmp	r4, #3
   d55da:	d026      	beq.n	d562a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d55dc:	2c01      	cmp	r4, #1
   d55de:	d104      	bne.n	d55ea <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d55e0:	8904      	ldrh	r4, [r0, #8]
   d55e2:	43d2      	mvns	r2, r2
   d55e4:	4414      	add	r4, r2
      break;
   d55e6:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d55e8:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d55ea:	2b01      	cmp	r3, #1
   d55ec:	d023      	beq.n	d5636 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d55ee:	2b02      	cmp	r3, #2
   d55f0:	d032      	beq.n	d5658 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d55f2:	bb83      	cbnz	r3, d5656 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d55f4:	2a00      	cmp	r2, #0
   d55f6:	4613      	mov	r3, r2
   d55f8:	8904      	ldrh	r4, [r0, #8]
   d55fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d55fc:	bfb8      	it	lt
   d55fe:	1dd3      	addlt	r3, r2, #7
   d5600:	10db      	asrs	r3, r3, #3
   d5602:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5606:	f002 0207 	and.w	r2, r2, #7
   d560a:	2301      	movs	r3, #1
   d560c:	4093      	lsls	r3, r2
   d560e:	5c42      	ldrb	r2, [r0, r1]
   d5610:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5614:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d5616:	e01e      	b.n	d5656 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d5618:	8904      	ldrh	r4, [r0, #8]
   d561a:	43c9      	mvns	r1, r1
   d561c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d561e:	8944      	ldrh	r4, [r0, #10]
   d5620:	43d2      	mvns	r2, r2
   d5622:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d5624:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d5626:	b212      	sxth	r2, r2
      break;
   d5628:	e7df      	b.n	d55ea <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d562a:	8944      	ldrh	r4, [r0, #10]
   d562c:	43c9      	mvns	r1, r1
   d562e:	440c      	add	r4, r1
      break;
   d5630:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d5632:	b222      	sxth	r2, r4
      break;
   d5634:	e7d9      	b.n	d55ea <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d5636:	2a00      	cmp	r2, #0
   d5638:	8904      	ldrh	r4, [r0, #8]
   d563a:	4613      	mov	r3, r2
   d563c:	bfb8      	it	lt
   d563e:	1dd3      	addlt	r3, r2, #7
   d5640:	10db      	asrs	r3, r3, #3
   d5642:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5646:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5648:	f002 0007 	and.w	r0, r2, #7
   d564c:	2201      	movs	r2, #1
   d564e:	4082      	lsls	r2, r0
   d5650:	5c58      	ldrb	r0, [r3, r1]
   d5652:	4302      	orrs	r2, r0
   d5654:	545a      	strb	r2, [r3, r1]
}
   d5656:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5658:	2a00      	cmp	r2, #0
   d565a:	4613      	mov	r3, r2
   d565c:	8904      	ldrh	r4, [r0, #8]
   d565e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5660:	bfb8      	it	lt
   d5662:	1dd3      	addlt	r3, r2, #7
   d5664:	10db      	asrs	r3, r3, #3
   d5666:	fb13 1104 	smlabb	r1, r3, r4, r1
   d566a:	f002 0207 	and.w	r2, r2, #7
   d566e:	2301      	movs	r3, #1
   d5670:	fa03 f202 	lsl.w	r2, r3, r2
   d5674:	5c43      	ldrb	r3, [r0, r1]
   d5676:	405a      	eors	r2, r3
   d5678:	e7cc      	b.n	d5614 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d567a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d567a:	b510      	push	{r4, lr}
   d567c:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d567e:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d5682:	2101      	movs	r1, #1
   d5684:	b280      	uxth	r0, r0
   d5686:	f004 fcfc 	bl	da082 <digitalWrite>
   d568a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d568c:	b118      	cbz	r0, d5696 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d568e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d5692:	f003 bde3 	b.w	d925c <_ZN8SPIClass14endTransactionEv>
}
   d5696:	bd10      	pop	{r4, pc}

000d5698 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d5698:	b570      	push	{r4, r5, r6, lr}
   d569a:	4604      	mov	r4, r0
   d569c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d569e:	2600      	movs	r6, #0
   d56a0:	f7ff fd14 	bl	d50cc <_ZN12Adafruit_GFXC1Ess>
   d56a4:	4b11      	ldr	r3, [pc, #68]	; (d56ec <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d56a6:	6023      	str	r3, [r4, #0]
   d56a8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d56aa:	b915      	cbnz	r5, d56b2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d56ac:	f004 fd2e 	bl	da10c <_Z19__fetch_global_Wirev>
   d56b0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d56b2:	23ff      	movs	r3, #255	; 0xff
   d56b4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d56b8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d56bc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d56c0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   d56c4:	4b0a      	ldr	r3, [pc, #40]	; (d56f0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d56c6:	63a3      	str	r3, [r4, #56]	; 0x38
   d56c8:	2301      	movs	r3, #1
   d56ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d56ce:	9b05      	ldr	r3, [sp, #20]
   d56d0:	64a3      	str	r3, [r4, #72]	; 0x48
   d56d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d56d6:	9b06      	ldr	r3, [sp, #24]
   d56d8:	86a2      	strh	r2, [r4, #52]	; 0x34
   d56da:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d56de:	6426      	str	r6, [r4, #64]	; 0x40
   d56e0:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d56e4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d56e6:	4620      	mov	r0, r4
   d56e8:	bd70      	pop	{r4, r5, r6, pc}
   d56ea:	bf00      	nop
   d56ec:	000ddb8c 	.word	0x000ddb8c
   d56f0:	000dd144 	.word	0x000dd144

000d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d56f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56f6:	4604      	mov	r4, r0
  if(wire) { // I2C
   d56f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d56fa:	460d      	mov	r5, r1
  if(wire) { // I2C
   d56fc:	b190      	cbz	r0, d5724 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d56fe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5702:	f003 fa9d 	bl	d8c40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5706:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5708:	6803      	ldr	r3, [r0, #0]
   d570a:	2100      	movs	r1, #0
   d570c:	689b      	ldr	r3, [r3, #8]
   d570e:	4798      	blx	r3
    WIRE_WRITE(c);
   d5710:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5712:	6803      	ldr	r3, [r0, #0]
   d5714:	4629      	mov	r1, r5
   d5716:	689b      	ldr	r3, [r3, #8]
   d5718:	4798      	blx	r3
    wire->endTransmission();
   d571a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d571c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d5720:	f003 ba95 	b.w	d8c4e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5724:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5728:	4601      	mov	r1, r0
   d572a:	b298      	uxth	r0, r3
   d572c:	f004 fca9 	bl	da082 <digitalWrite>
  if(spi) {
   d5730:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5732:	b120      	cbz	r0, d573e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d5734:	4629      	mov	r1, r5
}
   d5736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d573a:	f003 be17 	b.w	d936c <_ZN8SPIClass8transferEh>
   d573e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5740:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5742:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5746:	ea05 0107 	and.w	r1, r5, r7
   d574a:	b280      	uxth	r0, r0
   d574c:	f004 fc99 	bl	da082 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5750:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5754:	2101      	movs	r1, #1
   d5756:	b280      	uxth	r0, r0
   d5758:	f004 fc93 	bl	da082 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d575c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5760:	2100      	movs	r1, #0
   d5762:	b280      	uxth	r0, r0
   d5764:	f004 fc8d 	bl	da082 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5768:	3e01      	subs	r6, #1
   d576a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d576e:	d1e8      	bne.n	d5742 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d5770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5772 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5772:	b538      	push	{r3, r4, r5, lr}
   d5774:	4604      	mov	r4, r0
  TRANSACTION_START
   d5776:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5778:	460d      	mov	r5, r1
  TRANSACTION_START
   d577a:	b180      	cbz	r0, d579e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d577c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d577e:	f003 fa51 	bl	d8c24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d5782:	2d00      	cmp	r5, #0
   d5784:	4620      	mov	r0, r4
   d5786:	bf14      	ite	ne
   d5788:	21a7      	movne	r1, #167	; 0xa7
   d578a:	21a6      	moveq	r1, #166	; 0xa6
   d578c:	f7ff ffb2 	bl	d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d5790:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5792:	b188      	cbz	r0, d57b8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d5794:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d579a:	f003 ba43 	b.w	d8c24 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d579e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d57a0:	b118      	cbz	r0, d57aa <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d57a2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d57a6:	f003 fd73 	bl	d9290 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d57aa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d57ae:	2100      	movs	r1, #0
   d57b0:	b280      	uxth	r0, r0
   d57b2:	f004 fc66 	bl	da082 <digitalWrite>
   d57b6:	e7e4      	b.n	d5782 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d57b8:	4620      	mov	r0, r4
}
   d57ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d57be:	f7ff bf5c 	b.w	d567a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d57c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d57c6:	4604      	mov	r4, r0
  if(wire) { // I2C
   d57c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d57ca:	460d      	mov	r5, r1
  if(wire) { // I2C
   d57cc:	188f      	adds	r7, r1, r2
   d57ce:	b340      	cbz	r0, d5822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d57d0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d57d4:	f003 fa34 	bl	d8c40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d57d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57da:	6803      	ldr	r3, [r0, #0]
   d57dc:	2100      	movs	r1, #0
   d57de:	689b      	ldr	r3, [r3, #8]
   d57e0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d57e2:	2601      	movs	r6, #1
    while(n--) {
   d57e4:	42bd      	cmp	r5, r7
   d57e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57e8:	d017      	beq.n	d581a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d57ea:	2e1f      	cmp	r6, #31
   d57ec:	d90c      	bls.n	d5808 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d57ee:	f003 fa2e 	bl	d8c4e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d57f2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d57f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57f8:	f003 fa22 	bl	d8c40 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d57fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57fe:	6803      	ldr	r3, [r0, #0]
   d5800:	2100      	movs	r1, #0
   d5802:	689b      	ldr	r3, [r3, #8]
   d5804:	4798      	blx	r3
        bytesOut = 1;
   d5806:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5808:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d580a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d580e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5810:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5812:	689b      	ldr	r3, [r3, #8]
   d5814:	4798      	blx	r3
      bytesOut++;
   d5816:	b2f6      	uxtb	r6, r6
    while(n--) {
   d5818:	e7e4      	b.n	d57e4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d581a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d581e:	f003 ba16 	b.w	d8c4e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5822:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5826:	4601      	mov	r1, r0
   d5828:	b298      	uxth	r0, r3
   d582a:	f004 fc2a 	bl	da082 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d582e:	42af      	cmp	r7, r5
   d5830:	d022      	beq.n	d5878 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5832:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5834:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5838:	b118      	cbz	r0, d5842 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d583a:	4649      	mov	r1, r9
   d583c:	f003 fd96 	bl	d936c <_ZN8SPIClass8transferEh>
   d5840:	e7f5      	b.n	d582e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5842:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5844:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5848:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d584c:	ea09 0108 	and.w	r1, r9, r8
   d5850:	b280      	uxth	r0, r0
   d5852:	f004 fc16 	bl	da082 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5856:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d585a:	2101      	movs	r1, #1
   d585c:	b280      	uxth	r0, r0
   d585e:	f004 fc10 	bl	da082 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5862:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5866:	2100      	movs	r1, #0
   d5868:	b280      	uxth	r0, r0
   d586a:	f004 fc0a 	bl	da082 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d586e:	3e01      	subs	r6, #1
   d5870:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5874:	d1e8      	bne.n	d5848 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d5876:	e7da      	b.n	d582e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d5878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d587c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d587c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5880:	1dda      	adds	r2, r3, #7
   d5882:	bf48      	it	mi
   d5884:	f103 020e 	addmi.w	r2, r3, #14
   d5888:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d588c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d588e:	10d2      	asrs	r2, r2, #3
   d5890:	435a      	muls	r2, r3
   d5892:	2100      	movs	r1, #0
   d5894:	f005 bb53 	b.w	daf3e <memset>

000d5898 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d5898:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d589c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d589e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d58a0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d58a4:	4604      	mov	r4, r0
   d58a6:	460f      	mov	r7, r1
   d58a8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d58aa:	b1b3      	cbz	r3, d58da <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d58ac:	4620      	mov	r0, r4
   d58ae:	f7ff ffe5 	bl	d587c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d58b2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d58b6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d58ba:	2820      	cmp	r0, #32
   d58bc:	dc1f      	bgt.n	d58fe <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d58be:	2320      	movs	r3, #32
   d58c0:	2201      	movs	r2, #1
   d58c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d58c6:	3820      	subs	r0, #32
   d58c8:	2373      	movs	r3, #115	; 0x73
   d58ca:	3973      	subs	r1, #115	; 0x73
   d58cc:	9300      	str	r3, [sp, #0]
   d58ce:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d58d2:	4b89      	ldr	r3, [pc, #548]	; (d5af8 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d58d4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d58d8:	e01f      	b.n	d591a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d58da:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d58de:	1dd8      	adds	r0, r3, #7
   d58e0:	bf48      	it	mi
   d58e2:	f103 000e 	addmi.w	r0, r3, #14
   d58e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d58ea:	10c0      	asrs	r0, r0, #3
   d58ec:	4358      	muls	r0, r3
   d58ee:	f002 fcb9 	bl	d8264 <malloc>
   d58f2:	62e0      	str	r0, [r4, #44]	; 0x2c
   d58f4:	2800      	cmp	r0, #0
   d58f6:	d1d9      	bne.n	d58ac <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d58f8:	b004      	add	sp, #16
   d58fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d58fe:	2340      	movs	r3, #64	; 0x40
   d5900:	f04f 0c01 	mov.w	ip, #1
   d5904:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5908:	2352      	movs	r3, #82	; 0x52
   d590a:	3840      	subs	r0, #64	; 0x40
   d590c:	3952      	subs	r1, #82	; 0x52
   d590e:	9300      	str	r3, [sp, #0]
   d5910:	4b7a      	ldr	r3, [pc, #488]	; (d5afc <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5912:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5916:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d591a:	f340 024f 	sbfx	r2, r0, #1, #16
   d591e:	f341 014f 	sbfx	r1, r1, #1, #16
   d5922:	4620      	mov	r0, r4
   d5924:	f7ff fbe8 	bl	d50f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5928:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d592a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d592e:	2800      	cmp	r0, #0
   d5930:	d078      	beq.n	d5a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5932:	2d00      	cmp	r5, #0
   d5934:	d174      	bne.n	d5a20 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d5936:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d593a:	2b20      	cmp	r3, #32
   d593c:	bf0c      	ite	eq
   d593e:	253c      	moveq	r5, #60	; 0x3c
   d5940:	253d      	movne	r5, #61	; 0x3d
   d5942:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5946:	f1b8 0f00 	cmp.w	r8, #0
   d594a:	d001      	beq.n	d5950 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d594c:	f003 f96e 	bl	d8c2c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5950:	b1fe      	cbz	r6, d5992 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5952:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5956:	2800      	cmp	r0, #0
   d5958:	db1b      	blt.n	d5992 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d595a:	2101      	movs	r1, #1
   d595c:	b280      	uxth	r0, r0
   d595e:	f004 fb7f 	bl	da060 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5962:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5966:	2101      	movs	r1, #1
   d5968:	b280      	uxth	r0, r0
   d596a:	f004 fb8a 	bl	da082 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d596e:	2001      	movs	r0, #1
   d5970:	f002 fcd0 	bl	d8314 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5974:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5978:	2100      	movs	r1, #0
   d597a:	b280      	uxth	r0, r0
   d597c:	f004 fb81 	bl	da082 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5980:	200a      	movs	r0, #10
   d5982:	f002 fcc7 	bl	d8314 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5986:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d598a:	2101      	movs	r1, #1
   d598c:	b280      	uxth	r0, r0
   d598e:	f004 fb78 	bl	da082 <digitalWrite>
  TRANSACTION_START
   d5992:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5994:	2800      	cmp	r0, #0
   d5996:	d074      	beq.n	d5a82 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5998:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d599a:	f003 f943 	bl	d8c24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d599e:	2204      	movs	r2, #4
   d59a0:	4957      	ldr	r1, [pc, #348]	; (d5b00 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d59a2:	4620      	mov	r0, r4
   d59a4:	f7ff ff0d 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d59a8:	7aa1      	ldrb	r1, [r4, #10]
   d59aa:	3901      	subs	r1, #1
   d59ac:	b2c9      	uxtb	r1, r1
   d59ae:	4620      	mov	r0, r4
   d59b0:	f7ff fea0 	bl	d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d59b4:	4953      	ldr	r1, [pc, #332]	; (d5b04 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d59b6:	2204      	movs	r2, #4
   d59b8:	4620      	mov	r0, r4
   d59ba:	f7ff ff02 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d59be:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d59c2:	2b01      	cmp	r3, #1
   d59c4:	bf0c      	ite	eq
   d59c6:	2110      	moveq	r1, #16
   d59c8:	2114      	movne	r1, #20
   d59ca:	4620      	mov	r0, r4
   d59cc:	f7ff fe92 	bl	d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d59d0:	2204      	movs	r2, #4
   d59d2:	494d      	ldr	r1, [pc, #308]	; (d5b08 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d59d4:	4620      	mov	r0, r4
   d59d6:	f7ff fef4 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d59da:	68a3      	ldr	r3, [r4, #8]
   d59dc:	4a4b      	ldr	r2, [pc, #300]	; (d5b0c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d59de:	4293      	cmp	r3, r2
   d59e0:	d15c      	bne.n	d5a9c <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d59e2:	494b      	ldr	r1, [pc, #300]	; (d5b10 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d59e4:	2204      	movs	r2, #4
   d59e6:	4620      	mov	r0, r4
   d59e8:	f7ff feeb 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d59ec:	21d9      	movs	r1, #217	; 0xd9
   d59ee:	4620      	mov	r0, r4
   d59f0:	f7ff fe80 	bl	d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d59f4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d59f8:	2b01      	cmp	r3, #1
   d59fa:	bf0c      	ite	eq
   d59fc:	2122      	moveq	r1, #34	; 0x22
   d59fe:	21f1      	movne	r1, #241	; 0xf1
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff fe77 	bl	d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5a06:	4620      	mov	r0, r4
   d5a08:	4942      	ldr	r1, [pc, #264]	; (d5b14 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5a0a:	2206      	movs	r2, #6
   d5a0c:	f7ff fed9 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5a10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5a12:	2800      	cmp	r0, #0
   d5a14:	d063      	beq.n	d5ade <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5a16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5a18:	f003 f904 	bl	d8c24 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5a1c:	2001      	movs	r0, #1
   d5a1e:	e76b      	b.n	d58f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5a20:	b26d      	sxtb	r5, r5
   d5a22:	e78e      	b.n	d5942 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5a24:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5a28:	2101      	movs	r1, #1
   d5a2a:	b280      	uxth	r0, r0
   d5a2c:	f004 fb18 	bl	da060 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5a30:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5a34:	2101      	movs	r1, #1
   d5a36:	b280      	uxth	r0, r0
   d5a38:	f004 fb12 	bl	da060 <pinMode>
    SSD1306_DESELECT
   d5a3c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5a40:	2101      	movs	r1, #1
   d5a42:	b280      	uxth	r0, r0
   d5a44:	f004 fb1d 	bl	da082 <digitalWrite>
    if(spi) { // Hardware SPI
   d5a48:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5a4a:	b13d      	cbz	r5, d5a5c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5a4c:	f1b8 0f00 	cmp.w	r8, #0
   d5a50:	f43f af7e 	beq.w	d5950 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5a54:	4628      	mov	r0, r5
   d5a56:	f003 fbdd 	bl	d9214 <_ZN8SPIClass5beginEv>
   d5a5a:	e779      	b.n	d5950 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5a5c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5a60:	2101      	movs	r1, #1
   d5a62:	b280      	uxth	r0, r0
   d5a64:	f004 fafc 	bl	da060 <pinMode>
      pinMode(clkPin , OUTPUT);
   d5a68:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5a6c:	2101      	movs	r1, #1
   d5a6e:	b280      	uxth	r0, r0
   d5a70:	f004 faf6 	bl	da060 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5a74:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5a78:	4629      	mov	r1, r5
   d5a7a:	b280      	uxth	r0, r0
   d5a7c:	f004 fb01 	bl	da082 <digitalWrite>
   d5a80:	e766      	b.n	d5950 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5a82:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5a84:	b118      	cbz	r0, d5a8e <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5a86:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5a8a:	f003 fc01 	bl	d9290 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5a8e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5a92:	2100      	movs	r1, #0
   d5a94:	b280      	uxth	r0, r0
   d5a96:	f004 faf4 	bl	da082 <digitalWrite>
   d5a9a:	e780      	b.n	d599e <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5a9c:	4a1e      	ldr	r2, [pc, #120]	; (d5b18 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5a9e:	4293      	cmp	r3, r2
   d5aa0:	d10e      	bne.n	d5ac0 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5aa2:	491e      	ldr	r1, [pc, #120]	; (d5b1c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5aa4:	2203      	movs	r2, #3
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	f7ff fe8b 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5aac:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5ab0:	2b01      	cmp	r3, #1
   d5ab2:	bf0c      	ite	eq
   d5ab4:	219f      	moveq	r1, #159	; 0x9f
   d5ab6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5ab8:	4620      	mov	r0, r4
   d5aba:	f7ff fe1b 	bl	d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d5abe:	e795      	b.n	d59ec <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5ac0:	4a17      	ldr	r2, [pc, #92]	; (d5b20 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5ac2:	4293      	cmp	r3, r2
   d5ac4:	d192      	bne.n	d59ec <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5ac6:	4917      	ldr	r1, [pc, #92]	; (d5b24 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5ac8:	2203      	movs	r2, #3
   d5aca:	4620      	mov	r0, r4
   d5acc:	f7ff fe79 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5ad0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5ad4:	2b01      	cmp	r3, #1
   d5ad6:	bf0c      	ite	eq
   d5ad8:	2110      	moveq	r1, #16
   d5ada:	21af      	movne	r1, #175	; 0xaf
   d5adc:	e7ec      	b.n	d5ab8 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5ade:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5ae2:	2101      	movs	r1, #1
   d5ae4:	b280      	uxth	r0, r0
   d5ae6:	f004 facc 	bl	da082 <digitalWrite>
   d5aea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5aec:	2800      	cmp	r0, #0
   d5aee:	d095      	beq.n	d5a1c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5af0:	f003 fbb4 	bl	d925c <_ZN8SPIClass14endTransactionEv>
   d5af4:	e792      	b.n	d5a1c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5af6:	bf00      	nop
   d5af8:	000dd9a4 	.word	0x000dd9a4
   d5afc:	000dd6e4 	.word	0x000dd6e4
   d5b00:	000ddbec 	.word	0x000ddbec
   d5b04:	000ddbf0 	.word	0x000ddbf0
   d5b08:	000ddbf4 	.word	0x000ddbf4
   d5b0c:	00200080 	.word	0x00200080
   d5b10:	000ddbfe 	.word	0x000ddbfe
   d5b14:	000ddbf8 	.word	0x000ddbf8
   d5b18:	00400080 	.word	0x00400080
   d5b1c:	000ddc02 	.word	0x000ddc02
   d5b20:	00100060 	.word	0x00100060
   d5b24:	000ddc05 	.word	0x000ddc05

000d5b28 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5b28:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5b2a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5b2c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5b30:	db3d      	blt.n	d5bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5b32:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5b36:	4294      	cmp	r4, r2
   d5b38:	dd39      	ble.n	d5bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5b3a:	2900      	cmp	r1, #0
      w += x;
   d5b3c:	bfbe      	ittt	lt
   d5b3e:	185b      	addlt	r3, r3, r1
   d5b40:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5b42:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5b44:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5b48:	18ce      	adds	r6, r1, r3
   d5b4a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5b4c:	bfc4      	itt	gt
   d5b4e:	1a63      	subgt	r3, r4, r1
   d5b50:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5b52:	2b00      	cmp	r3, #0
   d5b54:	dd2b      	ble.n	d5bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5b56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5b58:	10d6      	asrs	r6, r2, #3
   d5b5a:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5b5e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5b60:	f002 0007 	and.w	r0, r2, #7
   d5b64:	2201      	movs	r2, #1
   d5b66:	4082      	lsls	r2, r0
      switch(color) {
   d5b68:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5b6a:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5b6c:	d016      	beq.n	d5b9c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5b6e:	2d02      	cmp	r5, #2
   d5b70:	d00b      	beq.n	d5b8a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5b72:	b9e5      	cbnz	r5, d5bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5b74:	43d2      	mvns	r2, r2
   d5b76:	b2d2      	uxtb	r2, r2
   d5b78:	440b      	add	r3, r1
   d5b7a:	4299      	cmp	r1, r3
   d5b7c:	d017      	beq.n	d5bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5b7e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5b82:	4010      	ands	r0, r2
   d5b84:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5b88:	e7f7      	b.n	d5b7a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5b8a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5b8c:	4299      	cmp	r1, r3
   d5b8e:	d00e      	beq.n	d5bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5b90:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5b94:	4050      	eors	r0, r2
   d5b96:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5b9a:	e7f7      	b.n	d5b8c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5b9c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5b9e:	4299      	cmp	r1, r3
   d5ba0:	d005      	beq.n	d5bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5ba2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5ba6:	4310      	orrs	r0, r2
   d5ba8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5bac:	e7f7      	b.n	d5b9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5bae:	bd70      	pop	{r4, r5, r6, pc}

000d5bb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5bb2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5bb4:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5bb8:	db76      	blt.n	d5ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5bba:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5bbe:	42a9      	cmp	r1, r5
   d5bc0:	da72      	bge.n	d5ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5bc2:	2a00      	cmp	r2, #0
      __h += __y;
   d5bc4:	bfbc      	itt	lt
   d5bc6:	18d2      	addlt	r2, r2, r3
   d5bc8:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5bca:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5bce:	bfb8      	it	lt
   d5bd0:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5bd2:	18d7      	adds	r7, r2, r3
   d5bd4:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5bd6:	bfc4      	itt	gt
   d5bd8:	1aa3      	subgt	r3, r4, r2
   d5bda:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5bdc:	2b00      	cmp	r3, #0
   d5bde:	dd63      	ble.n	d5ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5be0:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5be4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5be6:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5bea:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5bee:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5bf0:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5bf4:	d023      	beq.n	d5c3e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5bf6:	f1c2 0208 	rsb	r2, r2, #8
   d5bfa:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5bfc:	4d2c      	ldr	r5, [pc, #176]	; (d5cb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5bfe:	4293      	cmp	r3, r2
   d5c00:	bf3c      	itt	cc
   d5c02:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5c06:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5c0a:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5c0c:	bf3c      	itt	cc
   d5c0e:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5c12:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5c16:	2e01      	cmp	r6, #1
   d5c18:	d007      	beq.n	d5c2a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5c1a:	2e02      	cmp	r6, #2
   d5c1c:	d02e      	beq.n	d5c7c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5c1e:	b94e      	cbnz	r6, d5c34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5c20:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5c24:	ea2c 0505 	bic.w	r5, ip, r5
   d5c28:	e003      	b.n	d5c32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5c2a:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5c2e:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5c32:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5c34:	4293      	cmp	r3, r2
   d5c36:	d337      	bcc.n	d5ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5c38:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5c3c:	440c      	add	r4, r1
        h -= mod;
   d5c3e:	1a9a      	subs	r2, r3, r2
   d5c40:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5c42:	2a07      	cmp	r2, #7
   d5c44:	d90e      	bls.n	d5c64 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5c46:	2e02      	cmp	r6, #2
   d5c48:	d11d      	bne.n	d5c86 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5c4a:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5c4c:	7821      	ldrb	r1, [r4, #0]
   d5c4e:	43c9      	mvns	r1, r1
   d5c50:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5c52:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5c54:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5c58:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5c5a:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5c5c:	440c      	add	r4, r1
            } while(h >= 8);
   d5c5e:	d8f5      	bhi.n	d5c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5c60:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5c64:	b302      	cbz	r2, d5ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5c66:	4b13      	ldr	r3, [pc, #76]	; (d5cb4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5c68:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5c6a:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5c6c:	d019      	beq.n	d5ca2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5c6e:	2e02      	cmp	r6, #2
   d5c70:	d01b      	beq.n	d5caa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5c72:	b9ce      	cbnz	r6, d5ca8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5c74:	7822      	ldrb	r2, [r4, #0]
   d5c76:	ea22 0303 	bic.w	r3, r2, r3
   d5c7a:	e014      	b.n	d5ca6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5c7c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5c80:	ea85 050c 	eor.w	r5, r5, ip
   d5c84:	e7d5      	b.n	d5c32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5c86:	2e00      	cmp	r6, #0
   d5c88:	bf14      	ite	ne
   d5c8a:	25ff      	movne	r5, #255	; 0xff
   d5c8c:	2500      	moveq	r5, #0
   d5c8e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5c90:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5c92:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5c94:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5c98:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5c9a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5c9c:	440c      	add	r4, r1
            } while(h >= 8);
   d5c9e:	d8f7      	bhi.n	d5c90 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5ca0:	e7de      	b.n	d5c60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5ca2:	7822      	ldrb	r2, [r4, #0]
   d5ca4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5ca6:	7023      	strb	r3, [r4, #0]
}
   d5ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5caa:	7822      	ldrb	r2, [r4, #0]
   d5cac:	4053      	eors	r3, r2
   d5cae:	e7fa      	b.n	d5ca6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5cb0:	000ddbdc 	.word	0x000ddbdc
   d5cb4:	000ddbe4 	.word	0x000ddbe4

000d5cb8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5cb8:	b470      	push	{r4, r5, r6}
   d5cba:	4614      	mov	r4, r2
  switch(rotation) {
   d5cbc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5cbe:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5cc2:	2a02      	cmp	r2, #2
   d5cc4:	d00d      	beq.n	d5ce2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5cc6:	2a03      	cmp	r2, #3
   d5cc8:	d018      	beq.n	d5cfc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5cca:	2a01      	cmp	r2, #1
   d5ccc:	d111      	bne.n	d5cf2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5cce:	8902      	ldrh	r2, [r0, #8]
   d5cd0:	43e4      	mvns	r4, r4
   d5cd2:	4414      	add	r4, r2
   d5cd4:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5cd6:	9603      	str	r6, [sp, #12]
   d5cd8:	460a      	mov	r2, r1
   d5cda:	4621      	mov	r1, r4
}
   d5cdc:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5cde:	f7ff bf67 	b.w	d5bb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5ce2:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5ce4:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5ce6:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5ce8:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5cea:	4414      	add	r4, r2
    x -= (w-1);
   d5cec:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5cee:	b224      	sxth	r4, r4
    x -= (w-1);
   d5cf0:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5cf2:	9603      	str	r6, [sp, #12]
   d5cf4:	4622      	mov	r2, r4
}
   d5cf6:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5cf8:	f7ff bf16 	b.w	d5b28 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5cfc:	8945      	ldrh	r5, [r0, #10]
   d5cfe:	4419      	add	r1, r3
   d5d00:	1a69      	subs	r1, r5, r1
   d5d02:	b209      	sxth	r1, r1
    break;
   d5d04:	e7e7      	b.n	d5cd6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5d06 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5d06:	b430      	push	{r4, r5}
   d5d08:	4614      	mov	r4, r2
  switch(rotation) {
   d5d0a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5d0c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5d10:	2a02      	cmp	r2, #2
   d5d12:	d00d      	beq.n	d5d30 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5d14:	2a03      	cmp	r2, #3
   d5d16:	d018      	beq.n	d5d4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5d18:	2a01      	cmp	r2, #1
   d5d1a:	d111      	bne.n	d5d40 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5d1c:	18e2      	adds	r2, r4, r3
   d5d1e:	8904      	ldrh	r4, [r0, #8]
   d5d20:	1aa4      	subs	r4, r4, r2
   d5d22:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5d24:	9502      	str	r5, [sp, #8]
   d5d26:	460a      	mov	r2, r1
   d5d28:	4621      	mov	r1, r4
}
   d5d2a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5d2c:	f7ff befc 	b.w	d5b28 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5d30:	8902      	ldrh	r2, [r0, #8]
   d5d32:	43c9      	mvns	r1, r1
   d5d34:	4411      	add	r1, r2
    y -= (h-1);
   d5d36:	18e2      	adds	r2, r4, r3
   d5d38:	8944      	ldrh	r4, [r0, #10]
   d5d3a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5d3c:	b209      	sxth	r1, r1
    y -= (h-1);
   d5d3e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5d40:	9502      	str	r5, [sp, #8]
   d5d42:	4622      	mov	r2, r4
}
   d5d44:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5d46:	f7ff bf33 	b.w	d5bb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5d4a:	8942      	ldrh	r2, [r0, #10]
   d5d4c:	43c9      	mvns	r1, r1
   d5d4e:	4411      	add	r1, r2
   d5d50:	b209      	sxth	r1, r1
    break;
   d5d52:	e7e7      	b.n	d5d24 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5d54 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5d58:	4604      	mov	r4, r0
  TRANSACTION_START
   d5d5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5d5c:	2800      	cmp	r0, #0
   d5d5e:	d042      	beq.n	d5de6 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5d60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5d62:	f002 ff5f 	bl	d8c24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5d66:	4947      	ldr	r1, [pc, #284]	; (d5e84 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5d68:	2205      	movs	r2, #5
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	f7ff fd29 	bl	d57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5d70:	7a21      	ldrb	r1, [r4, #8]
   d5d72:	3901      	subs	r1, #1
   d5d74:	4620      	mov	r0, r4
   d5d76:	b2c9      	uxtb	r1, r1
   d5d78:	f7ff fcbc 	bl	d56f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5d7c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5d80:	1dde      	adds	r6, r3, #7
   d5d82:	bf48      	it	mi
   d5d84:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5d88:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5d8c:	8923      	ldrh	r3, [r4, #8]
   d5d8e:	10f6      	asrs	r6, r6, #3
   d5d90:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5d94:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5d98:	2800      	cmp	r0, #0
   d5d9a:	d03a      	beq.n	d5e12 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5d9c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5da0:	f002 ff4e 	bl	d8c40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5da4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5da6:	6803      	ldr	r3, [r0, #0]
   d5da8:	2140      	movs	r1, #64	; 0x40
   d5daa:	689b      	ldr	r3, [r3, #8]
   d5dac:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5dae:	2701      	movs	r7, #1
    while(count--) {
   d5db0:	42b5      	cmp	r5, r6
   d5db2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5db4:	d024      	beq.n	d5e00 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5db6:	2f1f      	cmp	r7, #31
   d5db8:	d90c      	bls.n	d5dd4 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5dba:	f002 ff48 	bl	d8c4e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5dbe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5dc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dc4:	f002 ff3c 	bl	d8c40 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5dc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dca:	6803      	ldr	r3, [r0, #0]
   d5dcc:	2140      	movs	r1, #64	; 0x40
   d5dce:	689b      	ldr	r3, [r3, #8]
   d5dd0:	4798      	blx	r3
        bytesOut = 1;
   d5dd2:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5dd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dd6:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5dda:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5ddc:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5dde:	689b      	ldr	r3, [r3, #8]
   d5de0:	4798      	blx	r3
      bytesOut++;
   d5de2:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5de4:	e7e4      	b.n	d5db0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5de8:	b118      	cbz	r0, d5df2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5dea:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5dee:	f003 fa4f 	bl	d9290 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5df2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5df6:	2100      	movs	r1, #0
   d5df8:	b280      	uxth	r0, r0
   d5dfa:	f004 f942 	bl	da082 <digitalWrite>
   d5dfe:	e7b2      	b.n	d5d66 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5e00:	f002 ff25 	bl	d8c4e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5e04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e06:	b378      	cbz	r0, d5e68 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5e08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5e0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e0e:	f002 bf09 	b.w	d8c24 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5e12:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5e16:	2101      	movs	r1, #1
   d5e18:	b280      	uxth	r0, r0
   d5e1a:	f004 f932 	bl	da082 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5e1e:	42b5      	cmp	r5, r6
   d5e20:	d0f0      	beq.n	d5e04 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5e24:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5e28:	b118      	cbz	r0, d5e32 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5e2a:	4649      	mov	r1, r9
   d5e2c:	f003 fa9e 	bl	d936c <_ZN8SPIClass8transferEh>
   d5e30:	e7f5      	b.n	d5e1e <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5e32:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5e34:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5e38:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5e3c:	ea09 0108 	and.w	r1, r9, r8
   d5e40:	b280      	uxth	r0, r0
   d5e42:	f004 f91e 	bl	da082 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5e46:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5e4a:	2101      	movs	r1, #1
   d5e4c:	b280      	uxth	r0, r0
   d5e4e:	f004 f918 	bl	da082 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5e52:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5e56:	2100      	movs	r1, #0
   d5e58:	b280      	uxth	r0, r0
   d5e5a:	f004 f912 	bl	da082 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5e5e:	3f01      	subs	r7, #1
   d5e60:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5e64:	d1e8      	bne.n	d5e38 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5e66:	e7da      	b.n	d5e1e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5e68:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5e6c:	2101      	movs	r1, #1
   d5e6e:	b280      	uxth	r0, r0
   d5e70:	f004 f907 	bl	da082 <digitalWrite>
   d5e74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5e76:	b118      	cbz	r0, d5e80 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5e78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5e7c:	f003 b9ee 	b.w	d925c <_ZN8SPIClass14endTransactionEv>
}
   d5e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5e84:	000ddc08 	.word	0x000ddc08

000d5e88 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5e88:	2100      	movs	r1, #0
   d5e8a:	220a      	movs	r2, #10
   d5e8c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5e90:	4770      	bx	lr

000d5e92 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5e92:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5e94:	b510      	push	{r4, lr}
   d5e96:	4604      	mov	r4, r0
    this->pin = pin;
   d5e98:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5e9a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5e9c:	b288      	uxth	r0, r1
   d5e9e:	f004 f909 	bl	da0b4 <digitalRead>
   d5ea2:	b108      	cbz	r0, d5ea8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5ea4:	2303      	movs	r3, #3
   d5ea6:	71a3      	strb	r3, [r4, #6]
   d5ea8:	f001 ff66 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5eac:	6020      	str	r0, [r4, #0]
#endif
}
   d5eae:	bd10      	pop	{r4, pc}

000d5eb0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5eb0:	b538      	push	{r3, r4, r5, lr}
   d5eb2:	460c      	mov	r4, r1
   d5eb4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5eb6:	4611      	mov	r1, r2
   d5eb8:	b2a0      	uxth	r0, r4
   d5eba:	f004 f8d1 	bl	da060 <pinMode>
  
  this->attach(pin);
   d5ebe:	4621      	mov	r1, r4
   d5ec0:	4628      	mov	r0, r5
}
   d5ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5ec6:	f7ff bfe4 	b.w	d5e92 <_ZN8Debounce6attachEi>

000d5eca <_ZN3GpsC1EP11USARTSerial>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
   d5eca:	b538      	push	{r3, r4, r5, lr}
   d5ecc:	4604      	mov	r4, r0
   d5ece:	460d      	mov	r5, r1
   d5ed0:	f000 fa1c 	bl	d630c <_ZN9NmeaCacheC1Ev>
   d5ed4:	2300      	movs	r3, #0
   d5ed6:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
{
    this->_serial = serial;
   d5eda:	6725      	str	r5, [r4, #112]	; 0x70
Gps::Gps(USARTSerial* serial)
   d5edc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
};
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	bd38      	pop	{r3, r4, r5, pc}

000d5ee4 <_ZN3Gps11sendCommandEPKc>:
{
    this->_serial->end();
}

void Gps::sendCommand(const char* data)
{
   d5ee4:	b508      	push	{r3, lr}
    this->_serial->println(data);
   d5ee6:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5ee8:	f003 f833 	bl	d8f52 <_ZN5Print7printlnEPKc>
    delay(250);
}
   d5eec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(250);
   d5ef0:	20fa      	movs	r0, #250	; 0xfa
   d5ef2:	f002 ba0f 	b.w	d8314 <delay>
	...

000d5ef8 <_ZN3Gps5beginEm>:
{
   d5ef8:	b510      	push	{r4, lr}
   d5efa:	4604      	mov	r4, r0
    this->_serial->begin(baud);
   d5efc:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5efe:	f003 fecf 	bl	d9ca0 <_ZN11USARTSerial5beginEm>
    this->_serial->blockOnOverrun(true);
   d5f02:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d5f04:	6803      	ldr	r3, [r0, #0]
   d5f06:	2101      	movs	r1, #1
   d5f08:	6a1b      	ldr	r3, [r3, #32]
   d5f0a:	4798      	blx	r3
    this->sendCommand(PMTK_SET_BAUD_9600);
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	490c      	ldr	r1, [pc, #48]	; (d5f40 <_ZN3Gps5beginEm+0x48>)
   d5f10:	f7ff ffe8 	bl	d5ee4 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
   d5f14:	4620      	mov	r0, r4
   d5f16:	490b      	ldr	r1, [pc, #44]	; (d5f44 <_ZN3Gps5beginEm+0x4c>)
   d5f18:	f7ff ffe4 	bl	d5ee4 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	490a      	ldr	r1, [pc, #40]	; (d5f48 <_ZN3Gps5beginEm+0x50>)
   d5f20:	f7ff ffe0 	bl	d5ee4 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d5f24:	4620      	mov	r0, r4
   d5f26:	4909      	ldr	r1, [pc, #36]	; (d5f4c <_ZN3Gps5beginEm+0x54>)
   d5f28:	f7ff ffdc 	bl	d5ee4 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_ENABLE_WAAS);
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	4908      	ldr	r1, [pc, #32]	; (d5f50 <_ZN3Gps5beginEm+0x58>)
   d5f30:	f7ff ffd8 	bl	d5ee4 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PGCMD_ANTENNA);
   d5f34:	4620      	mov	r0, r4
   d5f36:	4907      	ldr	r1, [pc, #28]	; (d5f54 <_ZN3Gps5beginEm+0x5c>)
};
   d5f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->sendCommand(PGCMD_ANTENNA);
   d5f3c:	f7ff bfd2 	b.w	d5ee4 <_ZN3Gps11sendCommandEPKc>
   d5f40:	000ddc0d 	.word	0x000ddc0d
   d5f44:	000ddc1e 	.word	0x000ddc1e
   d5f48:	000ddc2f 	.word	0x000ddc2f
   d5f4c:	000ddc48 	.word	0x000ddc48
   d5f50:	000ddc7a 	.word	0x000ddc7a
   d5f54:	000ddc88 	.word	0x000ddc88

000d5f58 <_ZN3Gps11clearBufferEv>:
    }
}

void Gps::clearBuffer()
{
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5f58:	2300      	movs	r3, #0
    {
        this->_buffer[i] = 0;
   d5f5a:	4619      	mov	r1, r3
   d5f5c:	18c2      	adds	r2, r0, r3
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5f5e:	3301      	adds	r3, #1
   d5f60:	2b80      	cmp	r3, #128	; 0x80
        this->_buffer[i] = 0;
   d5f62:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5f66:	d1f9      	bne.n	d5f5c <_ZN3Gps11clearBufferEv+0x4>
    }
}
   d5f68:	4770      	bx	lr
	...

000d5f6c <_ZN3Gps12onSerialDataEv>:
{
   d5f6c:	b570      	push	{r4, r5, r6, lr}
   d5f6e:	4604      	mov	r4, r0
    if (this->_serial->available())
   d5f70:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5f72:	6803      	ldr	r3, [r0, #0]
{
   d5f74:	b088      	sub	sp, #32
    if (this->_serial->available())
   d5f76:	691b      	ldr	r3, [r3, #16]
   d5f78:	4798      	blx	r3
   d5f7a:	b1e8      	cbz	r0, d5fb8 <_ZN3Gps12onSerialDataEv+0x4c>
        char c = this->_serial->read();
   d5f7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d5f7e:	6803      	ldr	r3, [r0, #0]
   d5f80:	695b      	ldr	r3, [r3, #20]
   d5f82:	4798      	blx	r3
        if (!this->_synced && c == '$') this->_synced = true;
   d5f84:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
        char c = this->_serial->read();
   d5f88:	b2c0      	uxtb	r0, r0
        if (!this->_synced && c == '$') this->_synced = true;
   d5f8a:	b923      	cbnz	r3, d5f96 <_ZN3Gps12onSerialDataEv+0x2a>
   d5f8c:	2824      	cmp	r0, #36	; 0x24
   d5f8e:	bf04      	itt	eq
   d5f90:	2301      	moveq	r3, #1
   d5f92:	f884 30f8 	strbeq.w	r3, [r4, #248]	; 0xf8
        if (this->_synced)
   d5f96:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   d5f9a:	b16b      	cbz	r3, d5fb8 <_ZN3Gps12onSerialDataEv+0x4c>
            if (this->_bufferIndex > BUFFER_SIZE)
   d5f9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d5fa0:	2b80      	cmp	r3, #128	; 0x80
   d5fa2:	dd0b      	ble.n	d5fbc <_ZN3Gps12onSerialDataEv+0x50>
                Serial.println("Buffer Overun: '");
   d5fa4:	f003 ff04 	bl	d9db0 <_Z16_fetch_usbserialv>
   d5fa8:	4920      	ldr	r1, [pc, #128]	; (d602c <_ZN3Gps12onSerialDataEv+0xc0>)
   d5faa:	f002 ffd2 	bl	d8f52 <_ZN5Print7printlnEPKc>
                this->_bufferIndex = 0;
   d5fae:	2300      	movs	r3, #0
   d5fb0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
                this->_synced = false;
   d5fb4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   d5fb8:	b008      	add	sp, #32
   d5fba:	bd70      	pop	{r4, r5, r6, pc}
                this->_buffer[this->_bufferIndex] =  0;
   d5fbc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            else if (c == '\r')
   d5fc0:	280d      	cmp	r0, #13
                this->_buffer[this->_bufferIndex] =  0;
   d5fc2:	4423      	add	r3, r4
            else if (c == '\r')
   d5fc4:	d108      	bne.n	d5fd8 <_ZN3Gps12onSerialDataEv+0x6c>
                this->_buffer[this->_bufferIndex] =  0;
   d5fc6:	2200      	movs	r2, #0
   d5fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                this->_bufferIndex++;
   d5fcc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d5fd0:	3301      	adds	r3, #1
   d5fd2:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
   d5fd6:	e7ef      	b.n	d5fb8 <_ZN3Gps12onSerialDataEv+0x4c>
            else if (c == '\n')
   d5fd8:	280a      	cmp	r0, #10
   d5fda:	d124      	bne.n	d6026 <_ZN3Gps12onSerialDataEv+0xba>
                this->_buffer[this->_bufferIndex] =  0;
   d5fdc:	2600      	movs	r6, #0
   d5fde:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
                String tempBuffer = String((char*)this->_buffer);
   d5fe2:	f104 0174 	add.w	r1, r4, #116	; 0x74
   d5fe6:	4668      	mov	r0, sp
   d5fe8:	f003 fa83 	bl	d94f2 <_ZN6StringC1EPKc>
                uint8_t index = this->msgIdToIndex(tempBuffer);
   d5fec:	4669      	mov	r1, sp
   d5fee:	a804      	add	r0, sp, #16
   d5ff0:	f003 fabf 	bl	d9572 <_ZN6StringC1ERKS_>
   d5ff4:	a904      	add	r1, sp, #16
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	f000 f99a 	bl	d6330 <_ZN9NmeaCache12msgIdToIndexE6String>
   d5ffc:	4605      	mov	r5, r0
   d5ffe:	a804      	add	r0, sp, #16
   d6000:	f003 fa2c 	bl	d945c <_ZN6StringD1Ev>
                this->data[index] = tempBuffer;
   d6004:	b228      	sxth	r0, r5
   d6006:	4669      	mov	r1, sp
   d6008:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   d600c:	f003 faa2 	bl	d9554 <_ZN6StringaSERKS_>
                this->_bufferIndex = 0;
   d6010:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
                this->clearBuffer();
   d6014:	4620      	mov	r0, r4
                this->_synced = false;
   d6016:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
                this->clearBuffer();
   d601a:	f7ff ff9d 	bl	d5f58 <_ZN3Gps11clearBufferEv>
                String tempBuffer = String((char*)this->_buffer);
   d601e:	4668      	mov	r0, sp
   d6020:	f003 fa1c 	bl	d945c <_ZN6StringD1Ev>
   d6024:	e7c8      	b.n	d5fb8 <_ZN3Gps12onSerialDataEv+0x4c>
                this->_buffer[this->_bufferIndex] = c;
   d6026:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
   d602a:	e7cf      	b.n	d5fcc <_ZN3Gps12onSerialDataEv+0x60>
   d602c:	000ddc97 	.word	0x000ddc97

000d6030 <_ZN4NmeaC1E6Stringh9NmeaCache>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Nmea.h"

Nmea::Nmea(String messageId, uint8_t dataIndex, NmeaCache nmeaCache)
   d6030:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6034:	4604      	mov	r4, r0
   d6036:	460f      	mov	r7, r1
   d6038:	f104 0814 	add.w	r8, r4, #20
   d603c:	490e      	ldr	r1, [pc, #56]	; (d6078 <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d603e:	4615      	mov	r5, r2
   d6040:	461e      	mov	r6, r3
   d6042:	f003 fa56 	bl	d94f2 <_ZN6StringC1EPKc>
   d6046:	490c      	ldr	r1, [pc, #48]	; (d6078 <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d6048:	4640      	mov	r0, r8
   d604a:	f003 fa52 	bl	d94f2 <_ZN6StringC1EPKc>
{
    // ***
    // *** Save the Message ID
    // ***
    this->_messageId = messageId;
   d604e:	4639      	mov	r1, r7
   d6050:	4620      	mov	r0, r4
   d6052:	f003 fa7f 	bl	d9554 <_ZN6StringaSERKS_>
    this->_dataIndex = dataIndex;
    
    // ***
    // *** Make a copy of the data.
    // ***
    this->_data = String(nmeaCache.data[dataIndex]);
   d6056:	eb06 1105 	add.w	r1, r6, r5, lsl #4
    this->_dataIndex = dataIndex;
   d605a:	7425      	strb	r5, [r4, #16]
    this->_data = String(nmeaCache.data[dataIndex]);
   d605c:	4668      	mov	r0, sp
   d605e:	f003 fa88 	bl	d9572 <_ZN6StringC1ERKS_>
   d6062:	4669      	mov	r1, sp
   d6064:	4640      	mov	r0, r8
   d6066:	f003 fa8f 	bl	d9588 <_ZN6StringaSEOS_>
   d606a:	4668      	mov	r0, sp
   d606c:	f003 f9f6 	bl	d945c <_ZN6StringD1Ev>
}
   d6070:	4620      	mov	r0, r4
   d6072:	b004      	add	sp, #16
   d6074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6078:	000ddf68 	.word	0x000ddf68

000d607c <_ZN4Nmea15extractChecksumEv>:

    return returnValue;
}

uint16_t Nmea::extractChecksum()
{
   d607c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d607e:	b085      	sub	sp, #20
    uint16_t returnValue = 0;
    
    // ***
    // *** Get the position of the last * character.
    // ***
    uint8_t index = this->_data.lastIndexOf("*");
   d6080:	4919      	ldr	r1, [pc, #100]	; (d60e8 <_ZN4Nmea15extractChecksumEv+0x6c>)
{
   d6082:	4605      	mov	r5, r0
    uint8_t index = this->_data.lastIndexOf("*");
   d6084:	f100 0614 	add.w	r6, r0, #20
   d6088:	4668      	mov	r0, sp
   d608a:	f003 fa32 	bl	d94f2 <_ZN6StringC1EPKc>
   d608e:	4669      	mov	r1, sp
   d6090:	4630      	mov	r0, r6
   d6092:	f003 fbb4 	bl	d97fe <_ZNK6String11lastIndexOfERKS_>
   d6096:	4604      	mov	r4, r0
   d6098:	4668      	mov	r0, sp
   d609a:	f003 f9df 	bl	d945c <_ZN6StringD1Ev>
    
    // ***
    // *** Check that we have the character and that the string
    // *** is at least two characters longer than the position.
    // ***
    if (index != -1 && this->_data.length() >= (uint16_t)(index + 2))
   d609e:	69eb      	ldr	r3, [r5, #28]
   d60a0:	b2e1      	uxtb	r1, r4
   d60a2:	1c8f      	adds	r7, r1, #2
   d60a4:	429f      	cmp	r7, r3
   d60a6:	d81d      	bhi.n	d60e4 <_ZN4Nmea15extractChecksumEv+0x68>
    {
        char c1 = this->_data.charAt(index + 1);
   d60a8:	3101      	adds	r1, #1
   d60aa:	4630      	mov	r0, r6
   d60ac:	f003 fb71 	bl	d9792 <_ZNK6String6charAtEj>
        char c2 = this->_data.charAt(index + 2);
   d60b0:	4639      	mov	r1, r7
        char c1 = this->_data.charAt(index + 1);
   d60b2:	4604      	mov	r4, r0
        char c2 = this->_data.charAt(index + 2);
   d60b4:	4630      	mov	r0, r6
   d60b6:	f003 fb6c 	bl	d9792 <_ZNK6String6charAtEj>
// ***
uint8_t Nmea::parseHex(char c) 
{
    uint8_t returnValue = 0;

    switch(c)
   d60ba:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   d60be:	b2db      	uxtb	r3, r3
   d60c0:	2b15      	cmp	r3, #21
   d60c2:	bf9c      	itt	ls
   d60c4:	4a09      	ldrls	r2, [pc, #36]	; (d60ec <_ZN4Nmea15extractChecksumEv+0x70>)
   d60c6:	5cd3      	ldrbls	r3, [r2, r3]
   d60c8:	f1a0 0031 	sub.w	r0, r0, #49	; 0x31
        char c2 = this->_data.charAt(index + 2);
   d60cc:	bf88      	it	hi
   d60ce:	2300      	movhi	r3, #0
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d60d0:	011a      	lsls	r2, r3, #4
    switch(c)
   d60d2:	b2c3      	uxtb	r3, r0
   d60d4:	2b15      	cmp	r3, #21
   d60d6:	bf9a      	itte	ls
   d60d8:	4904      	ldrls	r1, [pc, #16]	; (d60ec <_ZN4Nmea15extractChecksumEv+0x70>)
   d60da:	5cc8      	ldrbls	r0, [r1, r3]
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d60dc:	2000      	movhi	r0, #0
   d60de:	4410      	add	r0, r2
}
   d60e0:	b005      	add	sp, #20
   d60e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t returnValue = 0;
   d60e4:	2000      	movs	r0, #0
   d60e6:	e7fb      	b.n	d60e0 <_ZN4Nmea15extractChecksumEv+0x64>
   d60e8:	000ddca8 	.word	0x000ddca8
   d60ec:	000ddcac 	.word	0x000ddcac

000d60f0 <_ZN4Nmea17calculateChecksumEv>:
{
   d60f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60f2:	b085      	sub	sp, #20
    if (this->_data.startsWith("$"))
   d60f4:	4910      	ldr	r1, [pc, #64]	; (d6138 <_ZN4Nmea17calculateChecksumEv+0x48>)
   d60f6:	f100 0714 	add.w	r7, r0, #20
{
   d60fa:	4606      	mov	r6, r0
    if (this->_data.startsWith("$"))
   d60fc:	4668      	mov	r0, sp
   d60fe:	f003 f9f8 	bl	d94f2 <_ZN6StringC1EPKc>
   d6102:	4669      	mov	r1, sp
   d6104:	4638      	mov	r0, r7
   d6106:	f003 fb32 	bl	d976e <_ZNK6String10startsWithERKS_>
   d610a:	4604      	mov	r4, r0
   d610c:	4668      	mov	r0, sp
   d610e:	f003 f9a5 	bl	d945c <_ZN6StringD1Ev>
   d6112:	b174      	cbz	r4, d6132 <_ZN4Nmea17calculateChecksumEv+0x42>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6114:	2501      	movs	r5, #1
    uint16_t returnValue = 0;
   d6116:	2400      	movs	r4, #0
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6118:	69f3      	ldr	r3, [r6, #28]
   d611a:	3b03      	subs	r3, #3
   d611c:	429d      	cmp	r5, r3
   d611e:	d208      	bcs.n	d6132 <_ZN4Nmea17calculateChecksumEv+0x42>
            returnValue ^= this->_data.charAt(i);
   d6120:	4629      	mov	r1, r5
   d6122:	4638      	mov	r0, r7
   d6124:	f003 fb35 	bl	d9792 <_ZNK6String6charAtEj>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6128:	3501      	adds	r5, #1
            returnValue ^= this->_data.charAt(i);
   d612a:	4044      	eors	r4, r0
   d612c:	b2a4      	uxth	r4, r4
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d612e:	b2ed      	uxtb	r5, r5
   d6130:	e7f2      	b.n	d6118 <_ZN4Nmea17calculateChecksumEv+0x28>
}
   d6132:	4620      	mov	r0, r4
   d6134:	b005      	add	sp, #20
   d6136:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6138:	000ddcaa 	.word	0x000ddcaa

000d613c <_ZN4Nmea7isValidEv>:
{
   d613c:	b538      	push	{r3, r4, r5, lr}
    if (this->_data.startsWith(this->_messageId))
   d613e:	4601      	mov	r1, r0
{
   d6140:	4605      	mov	r5, r0
    if (this->_data.startsWith(this->_messageId))
   d6142:	3014      	adds	r0, #20
   d6144:	f003 fb13 	bl	d976e <_ZNK6String10startsWithERKS_>
   d6148:	b148      	cbz	r0, d615e <_ZN4Nmea7isValidEv+0x22>
        uint16_t providedChecksum = this->extractChecksum();
   d614a:	4628      	mov	r0, r5
   d614c:	f7ff ff96 	bl	d607c <_ZN4Nmea15extractChecksumEv>
   d6150:	4604      	mov	r4, r0
        uint16_t calculatedChecksum = this->calculateChecksum();
   d6152:	4628      	mov	r0, r5
   d6154:	f7ff ffcc 	bl	d60f0 <_ZN4Nmea17calculateChecksumEv>
        returnValue = (providedChecksum == calculatedChecksum);
   d6158:	1a23      	subs	r3, r4, r0
   d615a:	4258      	negs	r0, r3
   d615c:	4158      	adcs	r0, r3
}
   d615e:	bd38      	pop	{r3, r4, r5, pc}

000d6160 <_ZN4Nmea15getNextPositionEm>:

    return returnValue;
}

int32_t Nmea::getNextPosition(uint32_t from)
{
   d6160:	b510      	push	{r4, lr}
   d6162:	b086      	sub	sp, #24
   d6164:	4604      	mov	r4, r0
   d6166:	9101      	str	r1, [sp, #4]
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        returnValue = this->_data.indexOf(",", from);
   d6168:	a802      	add	r0, sp, #8
   d616a:	4908      	ldr	r1, [pc, #32]	; (d618c <_ZN4Nmea15getNextPositionEm+0x2c>)
   d616c:	f003 f9c1 	bl	d94f2 <_ZN6StringC1EPKc>
   d6170:	9a01      	ldr	r2, [sp, #4]
   d6172:	a902      	add	r1, sp, #8
   d6174:	f104 0014 	add.w	r0, r4, #20
   d6178:	f003 fb0d 	bl	d9796 <_ZNK6String7indexOfERKS_j>
   d617c:	4604      	mov	r4, r0
   d617e:	a802      	add	r0, sp, #8
   d6180:	f003 f96c 	bl	d945c <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d6184:	4620      	mov	r0, r4
   d6186:	b006      	add	sp, #24
   d6188:	bd10      	pop	{r4, pc}
   d618a:	bf00      	nop
   d618c:	000dd0bc 	.word	0x000dd0bc

000d6190 <_ZN4Nmea13getNextIsNullEm>:

bool Nmea::getNextIsNull(uint32_t from)
{
   d6190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        String nextChar = String(this->_data.charAt(from + 1));
   d6192:	3101      	adds	r1, #1
   d6194:	3014      	adds	r0, #20
   d6196:	f003 fafc 	bl	d9792 <_ZNK6String6charAtEj>
   d619a:	4601      	mov	r1, r0
   d619c:	4668      	mov	r0, sp
   d619e:	f003 fa0d 	bl	d95bc <_ZN6StringC1Ec>
        returnValue = nextChar.equals(",");
   d61a2:	4906      	ldr	r1, [pc, #24]	; (d61bc <_ZN4Nmea13getNextIsNullEm+0x2c>)
   d61a4:	4668      	mov	r0, sp
   d61a6:	f003 faba 	bl	d971e <_ZNK6String6equalsEPKc>
   d61aa:	4604      	mov	r4, r0
        String nextChar = String(this->_data.charAt(from + 1));
   d61ac:	4668      	mov	r0, sp
   d61ae:	f003 f955 	bl	d945c <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d61b2:	1e20      	subs	r0, r4, #0
   d61b4:	bf18      	it	ne
   d61b6:	2001      	movne	r0, #1
   d61b8:	b004      	add	sp, #16
   d61ba:	bd10      	pop	{r4, pc}
   d61bc:	000dd0bc 	.word	0x000dd0bc

000d61c0 <_ZN4Nmea13getNextUint32EmPm>:

int32_t Nmea::getNextUint32(uint32_t from, uint32_t* value)
{
   d61c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d61c2:	2300      	movs	r3, #0
   d61c4:	6013      	str	r3, [r2, #0]
{
   d61c6:	4606      	mov	r6, r0
   d61c8:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d61ca:	f7ff ffc9 	bl	d6160 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d61ce:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d61d0:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d61d2:	d104      	bne.n	d61de <_ZN4Nmea13getNextUint32EmPm+0x1e>
    int32_t returnValue = -1;
   d61d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d61d8:	4620      	mov	r0, r4
   d61da:	b004      	add	sp, #16
   d61dc:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d61de:	4601      	mov	r1, r0
   d61e0:	4630      	mov	r0, r6
   d61e2:	f7ff ffd5 	bl	d6190 <_ZN4Nmea13getNextIsNullEm>
   d61e6:	2800      	cmp	r0, #0
   d61e8:	d1f4      	bne.n	d61d4 <_ZN4Nmea13getNextUint32EmPm+0x14>
        returnValue = index + 1;
   d61ea:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toInt();
   d61ec:	4622      	mov	r2, r4
   d61ee:	f106 0114 	add.w	r1, r6, #20
   d61f2:	4668      	mov	r0, sp
   d61f4:	f003 fb28 	bl	d9848 <_ZNK6String9substringEj>
   d61f8:	4668      	mov	r0, sp
   d61fa:	f003 fb2c 	bl	d9856 <_ZNK6String5toIntEv>
   d61fe:	6028      	str	r0, [r5, #0]
   d6200:	4668      	mov	r0, sp
   d6202:	f003 f92b 	bl	d945c <_ZN6StringD1Ev>
    return returnValue;
   d6206:	e7e7      	b.n	d61d8 <_ZN4Nmea13getNextUint32EmPm+0x18>

000d6208 <_ZN4Nmea12getNextUint8EmPh>:

int32_t Nmea::getNextUint8(uint32_t from, uint8_t* value)
{
   d6208:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d620a:	2300      	movs	r3, #0
   d620c:	7013      	strb	r3, [r2, #0]
{
   d620e:	4606      	mov	r6, r0
   d6210:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d6212:	f7ff ffa5 	bl	d6160 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d6216:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d6218:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d621a:	d104      	bne.n	d6226 <_ZN4Nmea12getNextUint8EmPh+0x1e>
    int32_t returnValue = -1;
   d621c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d6220:	4620      	mov	r0, r4
   d6222:	b004      	add	sp, #16
   d6224:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d6226:	4601      	mov	r1, r0
   d6228:	4630      	mov	r0, r6
   d622a:	f7ff ffb1 	bl	d6190 <_ZN4Nmea13getNextIsNullEm>
   d622e:	2800      	cmp	r0, #0
   d6230:	d1f4      	bne.n	d621c <_ZN4Nmea12getNextUint8EmPh+0x14>
        returnValue = index + 1;
   d6232:	3401      	adds	r4, #1
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
   d6234:	4622      	mov	r2, r4
   d6236:	f106 0114 	add.w	r1, r6, #20
   d623a:	4668      	mov	r0, sp
   d623c:	f003 fb04 	bl	d9848 <_ZNK6String9substringEj>
   d6240:	4668      	mov	r0, sp
   d6242:	f003 fb08 	bl	d9856 <_ZNK6String5toIntEv>
   d6246:	7028      	strb	r0, [r5, #0]
   d6248:	4668      	mov	r0, sp
   d624a:	f003 f907 	bl	d945c <_ZN6StringD1Ev>
    return returnValue;
   d624e:	e7e7      	b.n	d6220 <_ZN4Nmea12getNextUint8EmPh+0x18>

000d6250 <_ZN4Nmea12getNextFloatEmPf>:

int32_t Nmea::getNextFloat(uint32_t from, float* value)
{
   d6250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d6252:	2300      	movs	r3, #0
   d6254:	6013      	str	r3, [r2, #0]
{
   d6256:	4606      	mov	r6, r0
   d6258:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d625a:	f7ff ff81 	bl	d6160 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d625e:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d6260:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d6262:	d104      	bne.n	d626e <_ZN4Nmea12getNextFloatEmPf+0x1e>
    int32_t returnValue = -1;
   d6264:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toFloat();
    }
    
    return returnValue;
}
   d6268:	4620      	mov	r0, r4
   d626a:	b004      	add	sp, #16
   d626c:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d626e:	4601      	mov	r1, r0
   d6270:	4630      	mov	r0, r6
   d6272:	f7ff ff8d 	bl	d6190 <_ZN4Nmea13getNextIsNullEm>
   d6276:	2800      	cmp	r0, #0
   d6278:	d1f4      	bne.n	d6264 <_ZN4Nmea12getNextFloatEmPf+0x14>
        returnValue = index + 1;
   d627a:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toFloat();
   d627c:	4622      	mov	r2, r4
   d627e:	f106 0114 	add.w	r1, r6, #20
   d6282:	4668      	mov	r0, sp
   d6284:	f003 fae0 	bl	d9848 <_ZNK6String9substringEj>
   d6288:	4668      	mov	r0, sp
   d628a:	f003 fae9 	bl	d9860 <_ZNK6String7toFloatEv>
   d628e:	4668      	mov	r0, sp
   d6290:	ed85 0a00 	vstr	s0, [r5]
   d6294:	f003 f8e2 	bl	d945c <_ZN6StringD1Ev>
    return returnValue;
   d6298:	e7e6      	b.n	d6268 <_ZN4Nmea12getNextFloatEmPf+0x18>
	...

000d629c <_ZN4Nmea13getNextStringEmmP6String>:

int32_t Nmea::getNextString(uint32_t from, uint32_t length, String* value)
{
   d629c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d62a0:	4698      	mov	r8, r3
   d62a2:	460c      	mov	r4, r1
   d62a4:	4605      	mov	r5, r0
    int32_t returnValue = -1;
    *value = String("");
   d62a6:	4918      	ldr	r1, [pc, #96]	; (d6308 <_ZN4Nmea13getNextStringEmmP6String+0x6c>)
   d62a8:	4668      	mov	r0, sp
{
   d62aa:	4616      	mov	r6, r2
    *value = String("");
   d62ac:	f003 f921 	bl	d94f2 <_ZN6StringC1EPKc>
   d62b0:	4669      	mov	r1, sp
   d62b2:	4640      	mov	r0, r8
   d62b4:	f003 f968 	bl	d9588 <_ZN6StringaSEOS_>
   d62b8:	4668      	mov	r0, sp
   d62ba:	f003 f8cf 	bl	d945c <_ZN6StringD1Ev>

     // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d62be:	4621      	mov	r1, r4
   d62c0:	4628      	mov	r0, r5
   d62c2:	f7ff ff4d 	bl	d6160 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d62c6:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d62c8:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d62ca:	d105      	bne.n	d62d8 <_ZN4Nmea13getNextStringEmmP6String+0x3c>
    int32_t returnValue = -1;
   d62cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = String(this->_data.substring(index + 1, index + 1 + length));
    }
    
    return returnValue;
   d62d0:	4638      	mov	r0, r7
   d62d2:	b004      	add	sp, #16
   d62d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d62d8:	4601      	mov	r1, r0
   d62da:	4628      	mov	r0, r5
   d62dc:	f7ff ff58 	bl	d6190 <_ZN4Nmea13getNextIsNullEm>
   d62e0:	2800      	cmp	r0, #0
   d62e2:	d1f3      	bne.n	d62cc <_ZN4Nmea13getNextStringEmmP6String+0x30>
        returnValue = index + 1;
   d62e4:	1c67      	adds	r7, r4, #1
        *value = String(this->_data.substring(index + 1, index + 1 + length));
   d62e6:	3601      	adds	r6, #1
   d62e8:	1933      	adds	r3, r6, r4
   d62ea:	463a      	mov	r2, r7
   d62ec:	f105 0114 	add.w	r1, r5, #20
   d62f0:	4668      	mov	r0, sp
   d62f2:	f003 fa89 	bl	d9808 <_ZNK6String9substringEjj>
   d62f6:	4669      	mov	r1, sp
   d62f8:	4640      	mov	r0, r8
   d62fa:	f003 f945 	bl	d9588 <_ZN6StringaSEOS_>
   d62fe:	4668      	mov	r0, sp
   d6300:	f003 f8ac 	bl	d945c <_ZN6StringD1Ev>
    return returnValue;
   d6304:	e7e4      	b.n	d62d0 <_ZN4Nmea13getNextStringEmmP6String+0x34>
   d6306:	bf00      	nop
   d6308:	000ddf68 	.word	0x000ddf68

000d630c <_ZN9NmeaCacheC1Ev>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "NmeaCache.h"

NmeaCache::NmeaCache()
   d630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d630e:	4f07      	ldr	r7, [pc, #28]	; (d632c <_ZN9NmeaCacheC1Ev+0x20>)
   d6310:	4604      	mov	r4, r0
   d6312:	4605      	mov	r5, r0
   d6314:	f100 0670 	add.w	r6, r0, #112	; 0x70
   d6318:	4628      	mov	r0, r5
   d631a:	4639      	mov	r1, r7
   d631c:	3510      	adds	r5, #16
   d631e:	f003 f8e8 	bl	d94f2 <_ZN6StringC1EPKc>
   d6322:	42ae      	cmp	r6, r5
   d6324:	d1f8      	bne.n	d6318 <_ZN9NmeaCacheC1Ev+0xc>
{
}
   d6326:	4620      	mov	r0, r4
   d6328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d632a:	bf00      	nop
   d632c:	000ddf68 	.word	0x000ddf68

000d6330 <_ZN9NmeaCache12msgIdToIndexE6String>:

uint8_t NmeaCache::msgIdToIndex(String messageId)
{
   d6330:	b530      	push	{r4, r5, lr}
   d6332:	b085      	sub	sp, #20
   d6334:	460c      	mov	r4, r1
    uint8_t returnValue = 0;
    
    if (messageId.startsWith(NMEA_MSGID_GGA))
   d6336:	4668      	mov	r0, sp
   d6338:	492e      	ldr	r1, [pc, #184]	; (d63f4 <_ZN9NmeaCache12msgIdToIndexE6String+0xc4>)
   d633a:	f003 f8da 	bl	d94f2 <_ZN6StringC1EPKc>
   d633e:	4669      	mov	r1, sp
   d6340:	4620      	mov	r0, r4
   d6342:	f003 fa14 	bl	d976e <_ZNK6String10startsWithERKS_>
   d6346:	4605      	mov	r5, r0
   d6348:	4668      	mov	r0, sp
   d634a:	f003 f887 	bl	d945c <_ZN6StringD1Ev>
   d634e:	2d00      	cmp	r5, #0
   d6350:	d146      	bne.n	d63e0 <_ZN9NmeaCache12msgIdToIndexE6String+0xb0>
    {
        returnValue = NMEA_INDEX_GGA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSA))
   d6352:	4929      	ldr	r1, [pc, #164]	; (d63f8 <_ZN9NmeaCache12msgIdToIndexE6String+0xc8>)
   d6354:	4668      	mov	r0, sp
   d6356:	f003 f8cc 	bl	d94f2 <_ZN6StringC1EPKc>
   d635a:	4669      	mov	r1, sp
   d635c:	4620      	mov	r0, r4
   d635e:	f003 fa06 	bl	d976e <_ZNK6String10startsWithERKS_>
   d6362:	4605      	mov	r5, r0
   d6364:	4668      	mov	r0, sp
   d6366:	f003 f879 	bl	d945c <_ZN6StringD1Ev>
   d636a:	2d00      	cmp	r5, #0
   d636c:	d13a      	bne.n	d63e4 <_ZN9NmeaCache12msgIdToIndexE6String+0xb4>
    {
        returnValue = NMEA_INDEX_GSA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSV))
   d636e:	4923      	ldr	r1, [pc, #140]	; (d63fc <_ZN9NmeaCache12msgIdToIndexE6String+0xcc>)
   d6370:	4668      	mov	r0, sp
   d6372:	f003 f8be 	bl	d94f2 <_ZN6StringC1EPKc>
   d6376:	4669      	mov	r1, sp
   d6378:	4620      	mov	r0, r4
   d637a:	f003 f9f8 	bl	d976e <_ZNK6String10startsWithERKS_>
   d637e:	4605      	mov	r5, r0
   d6380:	4668      	mov	r0, sp
   d6382:	f003 f86b 	bl	d945c <_ZN6StringD1Ev>
   d6386:	bb7d      	cbnz	r5, d63e8 <_ZN9NmeaCache12msgIdToIndexE6String+0xb8>
    {
        returnValue = NMEA_INDEX_GSV;
    }
    else if (messageId.startsWith(NMEA_MSGID_RMC))
   d6388:	491d      	ldr	r1, [pc, #116]	; (d6400 <_ZN9NmeaCache12msgIdToIndexE6String+0xd0>)
   d638a:	4668      	mov	r0, sp
   d638c:	f003 f8b1 	bl	d94f2 <_ZN6StringC1EPKc>
   d6390:	4669      	mov	r1, sp
   d6392:	4620      	mov	r0, r4
   d6394:	f003 f9eb 	bl	d976e <_ZNK6String10startsWithERKS_>
   d6398:	4605      	mov	r5, r0
   d639a:	4668      	mov	r0, sp
   d639c:	f003 f85e 	bl	d945c <_ZN6StringD1Ev>
   d63a0:	bb25      	cbnz	r5, d63ec <_ZN9NmeaCache12msgIdToIndexE6String+0xbc>
    {
        returnValue = NMEA_INDEX_RMC;
    }
    else if (messageId.startsWith(NMEA_MSGID_VTG))
   d63a2:	4918      	ldr	r1, [pc, #96]	; (d6404 <_ZN9NmeaCache12msgIdToIndexE6String+0xd4>)
   d63a4:	4668      	mov	r0, sp
   d63a6:	f003 f8a4 	bl	d94f2 <_ZN6StringC1EPKc>
   d63aa:	4669      	mov	r1, sp
   d63ac:	4620      	mov	r0, r4
   d63ae:	f003 f9de 	bl	d976e <_ZNK6String10startsWithERKS_>
   d63b2:	4605      	mov	r5, r0
   d63b4:	4668      	mov	r0, sp
   d63b6:	f003 f851 	bl	d945c <_ZN6StringD1Ev>
   d63ba:	b9cd      	cbnz	r5, d63f0 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    {
        returnValue = NMEA_INDEX_VTG;
    }
    else if (messageId.startsWith(NMEA_MSGID_PGT))
   d63bc:	4912      	ldr	r1, [pc, #72]	; (d6408 <_ZN9NmeaCache12msgIdToIndexE6String+0xd8>)
   d63be:	4668      	mov	r0, sp
   d63c0:	f003 f897 	bl	d94f2 <_ZN6StringC1EPKc>
   d63c4:	4669      	mov	r1, sp
   d63c6:	4620      	mov	r0, r4
   d63c8:	f003 f9d1 	bl	d976e <_ZNK6String10startsWithERKS_>
   d63cc:	4604      	mov	r4, r0
   d63ce:	4668      	mov	r0, sp
   d63d0:	f003 f844 	bl	d945c <_ZN6StringD1Ev>
   d63d4:	2c00      	cmp	r4, #0
    {
        returnValue = NMEA_INDEX_PGT;
   d63d6:	bf18      	it	ne
   d63d8:	2406      	movne	r4, #6
    }
    
    return returnValue;
   d63da:	4620      	mov	r0, r4
   d63dc:	b005      	add	sp, #20
   d63de:	bd30      	pop	{r4, r5, pc}
        returnValue = NMEA_INDEX_GGA;
   d63e0:	2401      	movs	r4, #1
   d63e2:	e7fa      	b.n	d63da <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSA;
   d63e4:	2402      	movs	r4, #2
   d63e6:	e7f8      	b.n	d63da <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSV;
   d63e8:	2403      	movs	r4, #3
   d63ea:	e7f6      	b.n	d63da <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_RMC;
   d63ec:	2404      	movs	r4, #4
   d63ee:	e7f4      	b.n	d63da <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_VTG;
   d63f0:	2405      	movs	r4, #5
   d63f2:	e7f2      	b.n	d63da <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
   d63f4:	000ddcc2 	.word	0x000ddcc2
   d63f8:	000ddcc9 	.word	0x000ddcc9
   d63fc:	000ddcd0 	.word	0x000ddcd0
   d6400:	000ddcd7 	.word	0x000ddcd7
   d6404:	000ddcde 	.word	0x000ddcde
   d6408:	000ddce5 	.word	0x000ddce5

000d640c <_ZN5Pgtop5parseEv>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
{
}

bool Pgtop::parse()
{
   d640c:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d640e:	1d06      	adds	r6, r0, #4
{
   d6410:	4604      	mov	r4, r0
    if (this->isValid())
   d6412:	4630      	mov	r0, r6
   d6414:	f7ff fe92 	bl	d613c <_ZN4Nmea7isValidEv>
   d6418:	4605      	mov	r5, r0
   d641a:	b158      	cbz	r0, d6434 <_ZN5Pgtop5parseEv+0x28>
    {
        // ***
        // *** Get the first field value (Command ID).
        // ***
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d641c:	f104 0228 	add.w	r2, r4, #40	; 0x28
   d6420:	2100      	movs	r1, #0
   d6422:	4630      	mov	r0, r6
   d6424:	f7ff fecc 	bl	d61c0 <_ZN4Nmea13getNextUint32EmPm>
        
        // ***
        // *** Get the next field value (Reference).
        // ***
        index = getNextUint32(index, &this->reference);
   d6428:	f104 022c 	add.w	r2, r4, #44	; 0x2c
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d642c:	4601      	mov	r1, r0
        index = getNextUint32(index, &this->reference);
   d642e:	4630      	mov	r0, r6
   d6430:	f7ff fec6 	bl	d61c0 <_ZN4Nmea13getNextUint32EmPm>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d6434:	4628      	mov	r0, r5
   d6436:	bd70      	pop	{r4, r5, r6, pc}

000d6438 <_ZN3Gga5parseEv>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
{
}

bool Gga::parse()
{
   d6438:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d643a:	1d05      	adds	r5, r0, #4
{
   d643c:	4604      	mov	r4, r0
    if (this->isValid())
   d643e:	4628      	mov	r0, r5
   d6440:	f7ff fe7c 	bl	d613c <_ZN4Nmea7isValidEv>
   d6444:	4606      	mov	r6, r0
   d6446:	2800      	cmp	r0, #0
   d6448:	d055      	beq.n	d64f6 <_ZN3Gga5parseEv+0xbe>
    {
        // ***
        // *** Get the first field value (UTC Time).
        // ***
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d644a:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d644e:	220a      	movs	r2, #10
   d6450:	2100      	movs	r1, #0
   d6452:	4628      	mov	r0, r5
   d6454:	f7ff ff22 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Latitude).
        // ***
        index = this->getNextString(index, 9,  &this->latitude);
   d6458:	f104 0338 	add.w	r3, r4, #56	; 0x38
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d645c:	4601      	mov	r1, r0
        index = this->getNextString(index, 9,  &this->latitude);
   d645e:	2209      	movs	r2, #9
   d6460:	4628      	mov	r0, r5
   d6462:	f7ff ff1b 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (North/South Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d6466:	f104 0348 	add.w	r3, r4, #72	; 0x48
        index = this->getNextString(index, 9,  &this->latitude);
   d646a:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d646c:	2201      	movs	r2, #1
   d646e:	4628      	mov	r0, r5
   d6470:	f7ff ff14 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Longitude).
        // ***
        index = this->getNextString(index, 10,  &this->longitude);
   d6474:	f104 0358 	add.w	r3, r4, #88	; 0x58
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d6478:	4601      	mov	r1, r0
        index = this->getNextString(index, 10,  &this->longitude);
   d647a:	220a      	movs	r2, #10
   d647c:	4628      	mov	r0, r5
   d647e:	f7ff ff0d 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d6482:	f104 0368 	add.w	r3, r4, #104	; 0x68
        index = this->getNextString(index, 10,  &this->longitude);
   d6486:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d6488:	2201      	movs	r2, #1
   d648a:	4628      	mov	r0, r5
   d648c:	f7ff ff06 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Position Fix Indicator).
        // ***
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d6490:	f104 0278 	add.w	r2, r4, #120	; 0x78
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d6494:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d6496:	4628      	mov	r0, r5
   d6498:	f7ff feb6 	bl	d6208 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextUint8(index, &this->satellitesUsed);
   d649c:	f104 0279 	add.w	r2, r4, #121	; 0x79
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d64a0:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->satellitesUsed);
   d64a2:	4628      	mov	r0, r5
   d64a4:	f7ff feb0 	bl	d6208 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->hdop);
   d64a8:	f104 027c 	add.w	r2, r4, #124	; 0x7c
        index = this->getNextUint8(index, &this->satellitesUsed);
   d64ac:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->hdop);
   d64ae:	4628      	mov	r0, r5
   d64b0:	f7ff fece 	bl	d6250 <_ZN4Nmea12getNextFloatEmPf>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->altitude);
   d64b4:	f104 0280 	add.w	r2, r4, #128	; 0x80
        index = this->getNextFloat(index, &this->hdop);
   d64b8:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->altitude);
   d64ba:	4628      	mov	r0, r5
   d64bc:	f7ff fec8 	bl	d6250 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d64c0:	f104 0384 	add.w	r3, r4, #132	; 0x84
        index = this->getNextFloat(index, &this->altitude);
   d64c4:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d64c6:	2201      	movs	r2, #1
   d64c8:	4628      	mov	r0, r5
   d64ca:	f7ff fee7 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d64ce:	f104 0294 	add.w	r2, r4, #148	; 0x94
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d64d2:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d64d4:	4628      	mov	r0, r5
   d64d6:	f7ff febb 	bl	d6250 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d64da:	f104 0398 	add.w	r3, r4, #152	; 0x98
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d64de:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d64e0:	2201      	movs	r2, #1
   d64e2:	4628      	mov	r0, r5
   d64e4:	f7ff feda 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d64e8:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d64ec:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d64ee:	2201      	movs	r2, #1
   d64f0:	4628      	mov	r0, r5
   d64f2:	f7ff fed3 	bl	d629c <_ZN4Nmea13getNextStringEmmP6String>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d64f6:	4630      	mov	r0, r6
   d64f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d64fc <_ZN5PgtopC1E9NmeaCache>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
   d64fc:	b530      	push	{r4, r5, lr}
   d64fe:	b0a1      	sub	sp, #132	; 0x84
   d6500:	4604      	mov	r4, r0
   d6502:	460d      	mov	r5, r1
   d6504:	4668      	mov	r0, sp
   d6506:	490c      	ldr	r1, [pc, #48]	; (d6538 <_ZN5PgtopC1E9NmeaCache+0x3c>)
   d6508:	f002 fff3 	bl	d94f2 <_ZN6StringC1EPKc>
   d650c:	4629      	mov	r1, r5
   d650e:	a804      	add	r0, sp, #16
   d6510:	f7fd ff1b 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d6514:	ab04      	add	r3, sp, #16
   d6516:	2206      	movs	r2, #6
   d6518:	4669      	mov	r1, sp
   d651a:	1d20      	adds	r0, r4, #4
   d651c:	f7ff fd88 	bl	d6030 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d6520:	a804      	add	r0, sp, #16
   d6522:	f7fd ff05 	bl	d4330 <_ZN9NmeaCacheD1Ev>
   d6526:	4668      	mov	r0, sp
   d6528:	f002 ff98 	bl	d945c <_ZN6StringD1Ev>
   d652c:	4b03      	ldr	r3, [pc, #12]	; (d653c <_ZN5PgtopC1E9NmeaCache+0x40>)
   d652e:	6023      	str	r3, [r4, #0]
}
   d6530:	4620      	mov	r0, r4
   d6532:	b021      	add	sp, #132	; 0x84
   d6534:	bd30      	pop	{r4, r5, pc}
   d6536:	bf00      	nop
   d6538:	000ddce5 	.word	0x000ddce5
   d653c:	000ddd00 	.word	0x000ddd00

000d6540 <_ZN3GgaC1E9NmeaCache>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
   d6540:	b530      	push	{r4, r5, lr}
   d6542:	b0a1      	sub	sp, #132	; 0x84
   d6544:	4604      	mov	r4, r0
   d6546:	460d      	mov	r5, r1
   d6548:	4668      	mov	r0, sp
   d654a:	4920      	ldr	r1, [pc, #128]	; (d65cc <_ZN3GgaC1E9NmeaCache+0x8c>)
   d654c:	f002 ffd1 	bl	d94f2 <_ZN6StringC1EPKc>
   d6550:	4629      	mov	r1, r5
   d6552:	a804      	add	r0, sp, #16
   d6554:	f7fd fef9 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d6558:	2201      	movs	r2, #1
   d655a:	ab04      	add	r3, sp, #16
   d655c:	4669      	mov	r1, sp
   d655e:	1d20      	adds	r0, r4, #4
   d6560:	f7ff fd66 	bl	d6030 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d6564:	a804      	add	r0, sp, #16
   d6566:	f7fd fee3 	bl	d4330 <_ZN9NmeaCacheD1Ev>
   d656a:	4668      	mov	r0, sp
   d656c:	4d18      	ldr	r5, [pc, #96]	; (d65d0 <_ZN3GgaC1E9NmeaCache+0x90>)
   d656e:	f002 ff75 	bl	d945c <_ZN6StringD1Ev>
   d6572:	4620      	mov	r0, r4
   d6574:	4b17      	ldr	r3, [pc, #92]	; (d65d4 <_ZN3GgaC1E9NmeaCache+0x94>)
   d6576:	f840 3b28 	str.w	r3, [r0], #40
   d657a:	4629      	mov	r1, r5
   d657c:	f002 ffb9 	bl	d94f2 <_ZN6StringC1EPKc>
   d6580:	4629      	mov	r1, r5
   d6582:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6586:	f002 ffb4 	bl	d94f2 <_ZN6StringC1EPKc>
   d658a:	4629      	mov	r1, r5
   d658c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6590:	f002 ffaf 	bl	d94f2 <_ZN6StringC1EPKc>
   d6594:	4629      	mov	r1, r5
   d6596:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d659a:	f002 ffaa 	bl	d94f2 <_ZN6StringC1EPKc>
   d659e:	4629      	mov	r1, r5
   d65a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d65a4:	f002 ffa5 	bl	d94f2 <_ZN6StringC1EPKc>
   d65a8:	4629      	mov	r1, r5
   d65aa:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d65ae:	f002 ffa0 	bl	d94f2 <_ZN6StringC1EPKc>
   d65b2:	4629      	mov	r1, r5
   d65b4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d65b8:	f002 ff9b 	bl	d94f2 <_ZN6StringC1EPKc>
   d65bc:	4629      	mov	r1, r5
   d65be:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d65c2:	f002 ff96 	bl	d94f2 <_ZN6StringC1EPKc>
}
   d65c6:	4620      	mov	r0, r4
   d65c8:	b021      	add	sp, #132	; 0x84
   d65ca:	bd30      	pop	{r4, r5, pc}
   d65cc:	000ddcc2 	.word	0x000ddcc2
   d65d0:	000ddf68 	.word	0x000ddf68
   d65d4:	000ddcf4 	.word	0x000ddcf4

000d65d8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d65d8:	b510      	push	{r4, lr}
   d65da:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d65dc:	3024      	adds	r0, #36	; 0x24
   d65de:	f000 fe77 	bl	d72d0 <_ZN8FatCache4syncEv>
   d65e2:	b128      	cbz	r0, d65f0 <_ZN9FatVolume9cacheSyncEv+0x18>
   d65e4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d65e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d65ec:	f000 be70 	b.w	d72d0 <_ZN8FatCache4syncEv>
  }
   d65f0:	bd10      	pop	{r4, pc}

000d65f2 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d65f2:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d65f4:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d65f6:	f043 0304 	orr.w	r3, r3, #4
   d65fa:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d65fc:	f100 0210 	add.w	r2, r0, #16
   d6600:	6880      	ldr	r0, [r0, #8]
   d6602:	f000 bf1b 	b.w	d743c <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6608 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d660c:	7801      	ldrb	r1, [r0, #0]
   d660e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d6612:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d6614:	d003      	beq.n	d661e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d6616:	2600      	movs	r6, #0
}
   d6618:	4630      	mov	r0, r6
   d661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d661e:	6942      	ldr	r2, [r0, #20]
   d6620:	4b17      	ldr	r3, [pc, #92]	; (d6680 <_ZN7FatFile13addDirClusterEv+0x78>)
   d6622:	429a      	cmp	r2, r3
   d6624:	d2f7      	bcs.n	d6616 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d6626:	f7ff ffe4 	bl	d65f2 <_ZN7FatFile10addClusterEv>
   d662a:	4606      	mov	r6, r0
   d662c:	2800      	cmp	r0, #0
   d662e:	d0f2      	beq.n	d6616 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6630:	6921      	ldr	r1, [r4, #16]
   d6632:	68a0      	ldr	r0, [r4, #8]
   d6634:	f000 fe97 	bl	d7366 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6638:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d663a:	68a0      	ldr	r0, [r4, #8]
   d663c:	2205      	movs	r2, #5
   d663e:	4639      	mov	r1, r7
   d6640:	3024      	adds	r0, #36	; 0x24
   d6642:	f000 fe6d 	bl	d7320 <_ZN8FatCache4readEmh>
  if (!pc) {
   d6646:	4680      	mov	r8, r0
   d6648:	2800      	cmp	r0, #0
   d664a:	d0e4      	beq.n	d6616 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d664c:	4629      	mov	r1, r5
   d664e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6652:	f004 fc74 	bl	daf3e <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6656:	2501      	movs	r5, #1
   d6658:	68a3      	ldr	r3, [r4, #8]
   d665a:	791a      	ldrb	r2, [r3, #4]
   d665c:	42aa      	cmp	r2, r5
   d665e:	d909      	bls.n	d6674 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d6660:	6818      	ldr	r0, [r3, #0]
   d6662:	4642      	mov	r2, r8
   d6664:	19e9      	adds	r1, r5, r7
   d6666:	f001 f9c4 	bl	d79f2 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d666a:	2800      	cmp	r0, #0
   d666c:	d0d3      	beq.n	d6616 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d666e:	3501      	adds	r5, #1
   d6670:	b2ed      	uxtb	r5, r5
   d6672:	e7f1      	b.n	d6658 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d6674:	6963      	ldr	r3, [r4, #20]
   d6676:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d667a:	6163      	str	r3, [r4, #20]
  return true;
   d667c:	e7cc      	b.n	d6618 <_ZN7FatFile13addDirClusterEv+0x10>
   d667e:	bf00      	nop
   d6680:	001ffe00 	.word	0x001ffe00

000d6684 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d6684:	b510      	push	{r4, lr}
   d6686:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d6688:	6880      	ldr	r0, [r0, #8]
   d668a:	460a      	mov	r2, r1
   d668c:	3024      	adds	r0, #36	; 0x24
   d668e:	69a1      	ldr	r1, [r4, #24]
   d6690:	f000 fe46 	bl	d7320 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d6694:	b120      	cbz	r0, d66a0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d6696:	88a3      	ldrh	r3, [r4, #4]
   d6698:	f003 030f 	and.w	r3, r3, #15
   d669c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d66a0:	bd10      	pop	{r4, pc}

000d66a2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d66a2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d66a4:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d66a6:	4605      	mov	r5, r0
   d66a8:	460e      	mov	r6, r1
  if (isOpen()) {
   d66aa:	b94c      	cbnz	r4, d66c0 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d66ac:	2224      	movs	r2, #36	; 0x24
   d66ae:	4621      	mov	r1, r4
   d66b0:	f004 fc45 	bl	daf3e <memset>

  m_vol = vol;
   d66b4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d66b6:	79f3      	ldrb	r3, [r6, #7]
   d66b8:	2b10      	cmp	r3, #16
   d66ba:	d003      	beq.n	d66c4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d66bc:	2b20      	cmp	r3, #32
   d66be:	d007      	beq.n	d66d0 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d66c0:	2000      	movs	r0, #0
   d66c2:	e004      	b.n	d66ce <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d66c4:	2320      	movs	r3, #32
  m_flags = F_READ;
   d66c6:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d66c8:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d66ca:	70ac      	strb	r4, [r5, #2]
  return true;
   d66cc:	4620      	mov	r0, r4
}
   d66ce:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d66d0:	2340      	movs	r3, #64	; 0x40
   d66d2:	e7f8      	b.n	d66c6 <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d66d4 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d66d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d66d8:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d66da:	4604      	mov	r4, r0
   d66dc:	4688      	mov	r8, r1
   d66de:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d66e0:	2b00      	cmp	r3, #0
   d66e2:	d05d      	beq.n	d67a0 <_ZN7FatFile4readEPvj+0xcc>
   d66e4:	7882      	ldrb	r2, [r0, #2]
   d66e6:	07d1      	lsls	r1, r2, #31
   d66e8:	d55a      	bpl.n	d67a0 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d66ea:	071a      	lsls	r2, r3, #28
   d66ec:	d52d      	bpl.n	d674a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d66ee:	69c3      	ldr	r3, [r0, #28]
   d66f0:	6942      	ldr	r2, [r0, #20]
   d66f2:	1a9b      	subs	r3, r3, r2
   d66f4:	429d      	cmp	r5, r3
   d66f6:	bf28      	it	cs
   d66f8:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d66fa:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d66fc:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6700:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d6704:	2e00      	cmp	r6, #0
   d6706:	f000 808f 	beq.w	d6828 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d670a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d670c:	6963      	ldr	r3, [r4, #20]
   d670e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6710:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d6712:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d6716:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d671a:	d51f      	bpl.n	d675c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d671c:	6a00      	ldr	r0, [r0, #32]
   d671e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6720:	68a0      	ldr	r0, [r4, #8]
   d6722:	f1ba 0f00 	cmp.w	sl, #0
   d6726:	d142      	bne.n	d67ae <_ZN7FatFile4readEPvj+0xda>
   d6728:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d672c:	d33f      	bcc.n	d67ae <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d672e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6730:	4299      	cmp	r1, r3
   d6732:	d03c      	beq.n	d67ae <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6734:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6738:	d252      	bcs.n	d67e0 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d673a:	6800      	ldr	r0, [r0, #0]
   d673c:	4642      	mov	r2, r8
   d673e:	f001 f8cf 	bl	d78e0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6742:	b368      	cbz	r0, d67a0 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d6744:	f44f 7700 	mov.w	r7, #512	; 0x200
   d6748:	e044      	b.n	d67d4 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d674a:	069b      	lsls	r3, r3, #26
   d674c:	d5d5      	bpl.n	d66fa <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d674e:	6883      	ldr	r3, [r0, #8]
   d6750:	891a      	ldrh	r2, [r3, #8]
   d6752:	6943      	ldr	r3, [r0, #20]
   d6754:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d6758:	b29b      	uxth	r3, r3
   d675a:	e7cb      	b.n	d66f4 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d675c:	f890 9005 	ldrb.w	r9, [r0, #5]
   d6760:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d6764:	f1ba 0f00 	cmp.w	sl, #0
   d6768:	d108      	bne.n	d677c <_ZN7FatFile4readEPvj+0xa8>
   d676a:	f1b9 0f00 	cmp.w	r9, #0
   d676e:	d105      	bne.n	d677c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d6770:	b95b      	cbnz	r3, d678a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6772:	0651      	lsls	r1, r2, #25
   d6774:	bf4c      	ite	mi
   d6776:	6a03      	ldrmi	r3, [r0, #32]
   d6778:	6a23      	ldrpl	r3, [r4, #32]
   d677a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d677c:	6921      	ldr	r1, [r4, #16]
   d677e:	68a0      	ldr	r0, [r4, #8]
   d6780:	f000 fdf1 	bl	d7366 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6784:	eb09 0100 	add.w	r1, r9, r0
   d6788:	e7ca      	b.n	d6720 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d678a:	6921      	ldr	r1, [r4, #16]
   d678c:	465a      	mov	r2, fp
   d678e:	f000 fdf0 	bl	d7372 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d6792:	2800      	cmp	r0, #0
   d6794:	db04      	blt.n	d67a0 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d6796:	d1f1      	bne.n	d677c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d6798:	7823      	ldrb	r3, [r4, #0]
   d679a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d679e:	d143      	bne.n	d6828 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d67a0:	7863      	ldrb	r3, [r4, #1]
   d67a2:	f043 0302 	orr.w	r3, r3, #2
   d67a6:	7063      	strb	r3, [r4, #1]
  return -1;
   d67a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d67ac:	e03d      	b.n	d682a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d67ae:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d67b2:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d67b4:	f04f 0200 	mov.w	r2, #0
   d67b8:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d67bc:	bf28      	it	cs
   d67be:	4637      	movcs	r7, r6
   d67c0:	f000 fdae 	bl	d7320 <_ZN8FatCache4readEmh>
      if (!pc) {
   d67c4:	2800      	cmp	r0, #0
   d67c6:	d0eb      	beq.n	d67a0 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d67c8:	eb00 010a 	add.w	r1, r0, sl
   d67cc:	463a      	mov	r2, r7
   d67ce:	4640      	mov	r0, r8
   d67d0:	f004 fba7 	bl	daf22 <memcpy>
    m_curPosition += n;
   d67d4:	6963      	ldr	r3, [r4, #20]
   d67d6:	443b      	add	r3, r7
    dst += n;
   d67d8:	44b8      	add	r8, r7
    m_curPosition += n;
   d67da:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d67dc:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d67de:	e791      	b.n	d6704 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d67e0:	7822      	ldrb	r2, [r4, #0]
   d67e2:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d67e4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d67e8:	d406      	bmi.n	d67f8 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d67ea:	7902      	ldrb	r2, [r0, #4]
   d67ec:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d67f0:	b2d2      	uxtb	r2, r2
   d67f2:	4592      	cmp	sl, r2
   d67f4:	bf28      	it	cs
   d67f6:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d67f8:	4299      	cmp	r1, r3
      n = 512*nb;
   d67fa:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d67fe:	d208      	bcs.n	d6812 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d6800:	68a0      	ldr	r0, [r4, #8]
   d6802:	4653      	mov	r3, sl
   d6804:	6800      	ldr	r0, [r0, #0]
   d6806:	4642      	mov	r2, r8
   d6808:	f001 f8b2 	bl	d7970 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d680c:	2800      	cmp	r0, #0
   d680e:	d1e1      	bne.n	d67d4 <_ZN7FatFile4readEPvj+0x100>
   d6810:	e7c6      	b.n	d67a0 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6812:	4453      	add	r3, sl
   d6814:	428b      	cmp	r3, r1
   d6816:	d9f3      	bls.n	d6800 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d6818:	3024      	adds	r0, #36	; 0x24
   d681a:	9101      	str	r1, [sp, #4]
   d681c:	f000 fd58 	bl	d72d0 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d6820:	9901      	ldr	r1, [sp, #4]
   d6822:	2800      	cmp	r0, #0
   d6824:	d1ec      	bne.n	d6800 <_ZN7FatFile4readEPvj+0x12c>
   d6826:	e7bb      	b.n	d67a0 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d6828:	1ba8      	subs	r0, r5, r6
}
   d682a:	b003      	add	sp, #12
   d682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6830 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d6830:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d6832:	2201      	movs	r2, #1
   d6834:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d6838:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d683c:	4604      	mov	r4, r0
   d683e:	f7ff ff49 	bl	d66d4 <_ZN7FatFile4readEPvj>
   d6842:	2801      	cmp	r0, #1
   d6844:	bf0a      	itet	eq
   d6846:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d684a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d684e:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d6852:	b002      	add	sp, #8
   d6854:	bd70      	pop	{r4, r5, r6, pc}

000d6856 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6856:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6858:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d685a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d685e:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6860:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d6864:	d000      	beq.n	d6868 <_ZN7FatFile12readDirCacheEb+0x12>
   d6866:	b999      	cbnz	r1, d6890 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d6868:	2201      	movs	r2, #1
   d686a:	f10d 0107 	add.w	r1, sp, #7
   d686e:	4620      	mov	r0, r4
   d6870:	f7ff ff30 	bl	d66d4 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d6874:	b240      	sxtb	r0, r0
   d6876:	2801      	cmp	r0, #1
   d6878:	d002      	beq.n	d6880 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d687a:	2000      	movs	r0, #0
}
   d687c:	b003      	add	sp, #12
   d687e:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d6880:	6963      	ldr	r3, [r4, #20]
   d6882:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d6884:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d6886:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d6888:	3030      	adds	r0, #48	; 0x30
   d688a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d688e:	e7f5      	b.n	d687c <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d6890:	3320      	adds	r3, #32
   d6892:	e7f7      	b.n	d6884 <_ZN7FatFile12readDirCacheEb+0x2e>

000d6894 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d6894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d6898:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d689a:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d689c:	4604      	mov	r4, r0
   d689e:	460d      	mov	r5, r1
  if (!isOpen()) {
   d68a0:	b162      	cbz	r2, d68bc <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d68a2:	6940      	ldr	r0, [r0, #20]
   d68a4:	4288      	cmp	r0, r1
   d68a6:	d002      	beq.n	d68ae <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d68a8:	b919      	cbnz	r1, d68b2 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d68aa:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d68ac:	6165      	str	r5, [r4, #20]
    return true;
   d68ae:	2001      	movs	r0, #1
   d68b0:	e006      	b.n	d68c0 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d68b2:	0716      	lsls	r6, r2, #28
   d68b4:	d506      	bpl.n	d68c4 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d68b6:	69e3      	ldr	r3, [r4, #28]
   d68b8:	428b      	cmp	r3, r1
   d68ba:	d20b      	bcs.n	d68d4 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d68bc:	6127      	str	r7, [r4, #16]
  return false;
   d68be:	2000      	movs	r0, #0
}
   d68c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d68c4:	0691      	lsls	r1, r2, #26
   d68c6:	d505      	bpl.n	d68d4 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d68c8:	68a3      	ldr	r3, [r4, #8]
   d68ca:	891b      	ldrh	r3, [r3, #8]
   d68cc:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d68d0:	d9ec      	bls.n	d68ac <_ZN7FatFile7seekSetEm+0x18>
   d68d2:	e7f3      	b.n	d68bc <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d68d4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d68d8:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d68dc:	1e43      	subs	r3, r0, #1
   d68de:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d68e2:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d68e4:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d68e6:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d68e8:	42b3      	cmp	r3, r6
   d68ea:	d800      	bhi.n	d68ee <_ZN7FatFile7seekSetEm+0x5a>
   d68ec:	b998      	cbnz	r0, d6916 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d68ee:	0653      	lsls	r3, r2, #25
   d68f0:	bf4c      	ite	mi
   d68f2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d68f6:	6a23      	ldrpl	r3, [r4, #32]
   d68f8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d68fa:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d68fe:	2e00      	cmp	r6, #0
   d6900:	d0d4      	beq.n	d68ac <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6902:	6921      	ldr	r1, [r4, #16]
   d6904:	68a0      	ldr	r0, [r4, #8]
   d6906:	4642      	mov	r2, r8
   d6908:	f000 fd33 	bl	d7372 <_ZN9FatVolume6fatGetEmPm>
   d690c:	2800      	cmp	r0, #0
   d690e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d6912:	dcf4      	bgt.n	d68fe <_ZN7FatFile7seekSetEm+0x6a>
   d6914:	e7d2      	b.n	d68bc <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d6916:	1af6      	subs	r6, r6, r3
   d6918:	e7ef      	b.n	d68fa <_ZN7FatFile7seekSetEm+0x66>

000d691a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d691a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d691c:	460f      	mov	r7, r1
   d691e:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d6920:	2100      	movs	r1, #0
   d6922:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d6924:	4604      	mov	r4, r0
   d6926:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d6928:	f004 fb09 	bl	daf3e <memset>
  m_vol = dirFile->m_vol;
   d692c:	68b8      	ldr	r0, [r7, #8]
   d692e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d6930:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6932:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d6936:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d693a:	6a3b      	ldr	r3, [r7, #32]
   d693c:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d693e:	0171      	lsls	r1, r6, #5
   d6940:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6944:	7af3      	ldrb	r3, [r6, #11]
   d6946:	071f      	lsls	r7, r3, #28
   d6948:	d446      	bmi.n	d69d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d694a:	1843      	adds	r3, r0, r1
   d694c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6950:	f003 0317 	and.w	r3, r3, #23
   d6954:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6956:	7af2      	ldrb	r2, [r6, #11]
   d6958:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d695c:	bf04      	itt	eq
   d695e:	f043 0308 	orreq.w	r3, r3, #8
   d6962:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d6964:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6968:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d696a:	f005 0303 	and.w	r3, r5, #3
   d696e:	2b01      	cmp	r3, #1
   d6970:	d02c      	beq.n	d69cc <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d6972:	2b02      	cmp	r3, #2
   d6974:	d028      	beq.n	d69c8 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d6976:	bb7b      	cbnz	r3, d69d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d6978:	056a      	lsls	r2, r5, #21
   d697a:	d42d      	bmi.n	d69d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d697c:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d697e:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d6980:	78a2      	ldrb	r2, [r4, #2]
   d6982:	0793      	lsls	r3, r2, #30
   d6984:	d504      	bpl.n	d6990 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d6986:	7823      	ldrb	r3, [r4, #0]
   d6988:	06df      	lsls	r7, r3, #27
   d698a:	d425      	bmi.n	d69d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d698c:	07de      	lsls	r6, r3, #31
   d698e:	d423      	bmi.n	d69d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6990:	11ab      	asrs	r3, r5, #6
   d6992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d6996:	f005 0608 	and.w	r6, r5, #8
   d699a:	4333      	orrs	r3, r6
   d699c:	4313      	orrs	r3, r2
   d699e:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d69a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d69a2:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d69a4:	1843      	adds	r3, r0, r1
   d69a6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d69aa:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d69ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d69b2:	056a      	lsls	r2, r5, #21
   d69b4:	d513      	bpl.n	d69de <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d69b6:	b959      	cbnz	r1, d69d0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d69b8:	78a3      	ldrb	r3, [r4, #2]
   d69ba:	f043 0304 	orr.w	r3, r3, #4
   d69be:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d69c0:	046b      	lsls	r3, r5, #17
   d69c2:	d410      	bmi.n	d69e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d69c4:	2001      	movs	r0, #1
}
   d69c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d69c8:	2303      	movs	r3, #3
   d69ca:	e7d8      	b.n	d697e <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d69cc:	2302      	movs	r3, #2
   d69ce:	e7d6      	b.n	d697e <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d69d0:	f000 fd6f 	bl	d74b2 <_ZN9FatVolume9freeChainEm>
   d69d4:	2800      	cmp	r0, #0
   d69d6:	d1ef      	bne.n	d69b8 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d69d8:	2000      	movs	r0, #0
   d69da:	7020      	strb	r0, [r4, #0]
  return false;
   d69dc:	e7f3      	b.n	d69c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d69de:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d69e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d69e2:	61e3      	str	r3, [r4, #28]
   d69e4:	e7ec      	b.n	d69c0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d69e6:	69e1      	ldr	r1, [r4, #28]
   d69e8:	4620      	mov	r0, r4
   d69ea:	f7ff ff53 	bl	d6894 <_ZN7FatFile7seekSetEm>
   d69ee:	2800      	cmp	r0, #0
   d69f0:	d1e8      	bne.n	d69c4 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d69f2:	e7f1      	b.n	d69d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d69f4 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d69f4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d69f6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d69f8:	4604      	mov	r4, r0
  if (!isOpen()) {
   d69fa:	b90b      	cbnz	r3, d6a00 <_ZN7FatFile4syncEv+0xc>
    return true;
   d69fc:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d69fe:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6a00:	7883      	ldrb	r3, [r0, #2]
   d6a02:	075a      	lsls	r2, r3, #29
   d6a04:	d523      	bpl.n	d6a4e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6a06:	2101      	movs	r1, #1
   d6a08:	f7ff fe3c 	bl	d6684 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6a0c:	4605      	mov	r5, r0
   d6a0e:	b928      	cbnz	r0, d6a1c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d6a10:	7863      	ldrb	r3, [r4, #1]
   d6a12:	f043 0301 	orr.w	r3, r3, #1
   d6a16:	7063      	strb	r3, [r4, #1]
  return false;
   d6a18:	2000      	movs	r0, #0
   d6a1a:	e7f0      	b.n	d69fe <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6a1c:	7803      	ldrb	r3, [r0, #0]
   d6a1e:	2be5      	cmp	r3, #229	; 0xe5
   d6a20:	d0f6      	beq.n	d6a10 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d6a22:	7823      	ldrb	r3, [r4, #0]
   d6a24:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6a26:	bf44      	itt	mi
   d6a28:	69e3      	ldrmi	r3, [r4, #28]
   d6a2a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6a2c:	8c23      	ldrh	r3, [r4, #32]
   d6a2e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6a30:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6a32:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d6a34:	4b09      	ldr	r3, [pc, #36]	; (d6a5c <_ZN7FatFile4syncEv+0x68>)
   d6a36:	681b      	ldr	r3, [r3, #0]
   d6a38:	b12b      	cbz	r3, d6a46 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6a3a:	f100 0116 	add.w	r1, r0, #22
   d6a3e:	3018      	adds	r0, #24
   d6a40:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6a42:	8b2b      	ldrh	r3, [r5, #24]
   d6a44:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6a46:	78a3      	ldrb	r3, [r4, #2]
   d6a48:	f023 0304 	bic.w	r3, r3, #4
   d6a4c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d6a4e:	68a0      	ldr	r0, [r4, #8]
   d6a50:	f7ff fdc2 	bl	d65d8 <_ZN9FatVolume9cacheSyncEv>
   d6a54:	2800      	cmp	r0, #0
   d6a56:	d0db      	beq.n	d6a10 <_ZN7FatFile4syncEv+0x1c>
   d6a58:	e7d0      	b.n	d69fc <_ZN7FatFile4syncEv+0x8>
   d6a5a:	bf00      	nop
   d6a5c:	2003e53c 	.word	0x2003e53c

000d6a60 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d6a60:	b510      	push	{r4, lr}
   d6a62:	4604      	mov	r4, r0
  bool rtn = sync();
   d6a64:	f7ff ffc6 	bl	d69f4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6a68:	2300      	movs	r3, #0
   d6a6a:	7023      	strb	r3, [r4, #0]
}
   d6a6c:	bd10      	pop	{r4, pc}

000d6a6e <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a70:	b093      	sub	sp, #76	; 0x4c
   d6a72:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6a74:	2300      	movs	r3, #0
   d6a76:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d6a7a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6a7c:	9201      	str	r2, [sp, #4]
   d6a7e:	4606      	mov	r6, r0
   d6a80:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d6a82:	b113      	cbz	r3, d6a8a <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d6a84:	2000      	movs	r0, #0
}
   d6a86:	b013      	add	sp, #76	; 0x4c
   d6a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d6a8a:	780b      	ldrb	r3, [r1, #0]
   d6a8c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6a90:	d0f8      	beq.n	d6a84 <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d6a92:	7813      	ldrb	r3, [r2, #0]
   d6a94:	2b2f      	cmp	r3, #47	; 0x2f
   d6a96:	d112      	bne.n	d6abe <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d6a98:	9a01      	ldr	r2, [sp, #4]
   d6a9a:	7813      	ldrb	r3, [r2, #0]
   d6a9c:	2b2f      	cmp	r3, #47	; 0x2f
   d6a9e:	d102      	bne.n	d6aa6 <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d6aa0:	3201      	adds	r2, #1
   d6aa2:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d6aa4:	e7f8      	b.n	d6a98 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d6aa6:	68a1      	ldr	r1, [r4, #8]
   d6aa8:	b91b      	cbnz	r3, d6ab2 <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d6aaa:	4630      	mov	r0, r6
   d6aac:	f7ff fdf9 	bl	d66a2 <_ZN7FatFile8openRootEP9FatVolume>
   d6ab0:	e7e9      	b.n	d6a86 <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6ab2:	a809      	add	r0, sp, #36	; 0x24
   d6ab4:	f7ff fdf5 	bl	d66a2 <_ZN7FatFile8openRootEP9FatVolume>
   d6ab8:	2800      	cmp	r0, #0
   d6aba:	d0e3      	beq.n	d6a84 <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d6abc:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d6abe:	9801      	ldr	r0, [sp, #4]
   d6ac0:	aa01      	add	r2, sp, #4
   d6ac2:	a903      	add	r1, sp, #12
   d6ac4:	f000 f8f6 	bl	d6cb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6ac8:	2800      	cmp	r0, #0
   d6aca:	d0db      	beq.n	d6a84 <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d6acc:	9b01      	ldr	r3, [sp, #4]
   d6ace:	781b      	ldrb	r3, [r3, #0]
   d6ad0:	b19b      	cbz	r3, d6afa <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6ad2:	2300      	movs	r3, #0
   d6ad4:	aa03      	add	r2, sp, #12
   d6ad6:	4621      	mov	r1, r4
   d6ad8:	4630      	mov	r0, r6
   d6ada:	f000 fa1f 	bl	d6f1c <_ZN7FatFile4openEPS_P7fname_ti>
   d6ade:	2800      	cmp	r0, #0
   d6ae0:	d0d0      	beq.n	d6a84 <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d6ae2:	4635      	mov	r5, r6
   d6ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ae6:	ac09      	add	r4, sp, #36	; 0x24
   d6ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6aee:	682b      	ldr	r3, [r5, #0]
   d6af0:	6023      	str	r3, [r4, #0]
    close();
   d6af2:	4630      	mov	r0, r6
   d6af4:	f7ff ffb4 	bl	d6a60 <_ZN7FatFile5closeEv>
  while (1) {
   d6af8:	e7e0      	b.n	d6abc <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d6afa:	463b      	mov	r3, r7
   d6afc:	aa03      	add	r2, sp, #12
   d6afe:	4621      	mov	r1, r4
   d6b00:	4630      	mov	r0, r6
   d6b02:	f000 fa0b 	bl	d6f1c <_ZN7FatFile4openEPS_P7fname_ti>
   d6b06:	e7be      	b.n	d6a86 <_ZN7FatFile4openEPS_PKci+0x18>

000d6b08 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6b0c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d6b0e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6b10:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d6b12:	4604      	mov	r4, r0
   d6b14:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6b16:	d55b      	bpl.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
   d6b18:	7883      	ldrb	r3, [r0, #2]
   d6b1a:	079a      	lsls	r2, r3, #30
   d6b1c:	d558      	bpl.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6b1e:	071b      	lsls	r3, r3, #28
   d6b20:	d451      	bmi.n	d6bc6 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6b22:	6963      	ldr	r3, [r4, #20]
   d6b24:	43db      	mvns	r3, r3
   d6b26:	42bb      	cmp	r3, r7
   d6b28:	d352      	bcc.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
   d6b2a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6b2c:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d6b30:	6966      	ldr	r6, [r4, #20]
   d6b32:	f1b8 0f00 	cmp.w	r8, #0
   d6b36:	f000 8091 	beq.w	d6c5c <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6b3a:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d6b3c:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6b3e:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6b42:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d6b46:	d10e      	bne.n	d6b66 <_ZN7FatFile5writeEPKvj+0x5e>
   d6b48:	b96d      	cbnz	r5, d6b66 <_ZN7FatFile5writeEPKvj+0x5e>
   d6b4a:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d6b4c:	2900      	cmp	r1, #0
   d6b4e:	d046      	beq.n	d6bde <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6b50:	4652      	mov	r2, sl
   d6b52:	f000 fc0e 	bl	d7372 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6b56:	2800      	cmp	r0, #0
   d6b58:	db3a      	blt.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6b5a:	d104      	bne.n	d6b66 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	f7ff fd48 	bl	d65f2 <_ZN7FatFile10addClusterEv>
   d6b62:	2800      	cmp	r0, #0
   d6b64:	d034      	beq.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6b66:	6921      	ldr	r1, [r4, #16]
   d6b68:	68a0      	ldr	r0, [r4, #8]
   d6b6a:	f000 fbfc 	bl	d7366 <_ZNK9FatVolume17clusterFirstBlockEm>
   d6b6e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6b70:	68a0      	ldr	r0, [r4, #8]
   d6b72:	b915      	cbnz	r5, d6b7a <_ZN7FatFile5writeEPKvj+0x72>
   d6b74:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d6b78:	d23f      	bcs.n	d6bfa <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6b7a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d6b7e:	4546      	cmp	r6, r8
   d6b80:	bf28      	it	cs
   d6b82:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6b84:	2d00      	cmp	r5, #0
   d6b86:	d136      	bne.n	d6bf6 <_ZN7FatFile5writeEPKvj+0xee>
   d6b88:	6962      	ldr	r2, [r4, #20]
   d6b8a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6b8c:	429a      	cmp	r2, r3
   d6b8e:	bf34      	ite	cc
   d6b90:	2201      	movcc	r2, #1
   d6b92:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d6b94:	3024      	adds	r0, #36	; 0x24
   d6b96:	f000 fbc3 	bl	d7320 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6b9a:	b1c8      	cbz	r0, d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6b9c:	4428      	add	r0, r5
   d6b9e:	4632      	mov	r2, r6
   d6ba0:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6ba2:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d6ba4:	f004 f9bd 	bl	daf22 <memcpy>
      if (512 == (n + blockOffset)) {
   d6ba8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d6bac:	d104      	bne.n	d6bb8 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d6bae:	68a0      	ldr	r0, [r4, #8]
   d6bb0:	3024      	adds	r0, #36	; 0x24
   d6bb2:	f000 fb8d 	bl	d72d0 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6bb6:	b158      	cbz	r0, d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6bb8:	6963      	ldr	r3, [r4, #20]
   d6bba:	4433      	add	r3, r6
   d6bbc:	6163      	str	r3, [r4, #20]
    src += n;
   d6bbe:	44b1      	add	r9, r6
    nToWrite -= n;
   d6bc0:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d6bc4:	e7b4      	b.n	d6b30 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d6bc6:	69c1      	ldr	r1, [r0, #28]
   d6bc8:	f7ff fe64 	bl	d6894 <_ZN7FatFile7seekSetEm>
   d6bcc:	2800      	cmp	r0, #0
   d6bce:	d1a8      	bne.n	d6b22 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6bd0:	7863      	ldrb	r3, [r4, #1]
   d6bd2:	f043 0301 	orr.w	r3, r3, #1
   d6bd6:	7063      	strb	r3, [r4, #1]
  return -1;
   d6bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6bdc:	e050      	b.n	d6c80 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d6bde:	6a23      	ldr	r3, [r4, #32]
   d6be0:	b93b      	cbnz	r3, d6bf2 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d6be2:	4620      	mov	r0, r4
   d6be4:	f7ff fd05 	bl	d65f2 <_ZN7FatFile10addClusterEv>
   d6be8:	2800      	cmp	r0, #0
   d6bea:	d0f1      	beq.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d6bec:	6923      	ldr	r3, [r4, #16]
   d6bee:	6223      	str	r3, [r4, #32]
   d6bf0:	e7b9      	b.n	d6b66 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d6bf2:	6123      	str	r3, [r4, #16]
   d6bf4:	e7b7      	b.n	d6b66 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6bf6:	2201      	movs	r2, #1
   d6bf8:	e7cc      	b.n	d6b94 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d6bfa:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6bfe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d6c00:	d31b      	bcc.n	d6c3a <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d6c02:	f890 c004 	ldrb.w	ip, [r0, #4]
   d6c06:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d6c0a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d6c0c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d6c10:	4573      	cmp	r3, lr
   d6c12:	bf28      	it	cs
   d6c14:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6c16:	4291      	cmp	r1, r2
      n = 512*nb;
   d6c18:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6c1c:	d307      	bcc.n	d6c2e <_ZN7FatFile5writeEPKvj+0x126>
   d6c1e:	441a      	add	r2, r3
   d6c20:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d6c22:	bf82      	ittt	hi
   d6c24:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d6c28:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6c2c:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6c2e:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d6c30:	464a      	mov	r2, r9
   d6c32:	6828      	ldr	r0, [r5, #0]
   d6c34:	f000 ff53 	bl	d7ade <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d6c38:	e7bd      	b.n	d6bb6 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d6c3a:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d6c3c:	bf02      	ittt	eq
   d6c3e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d6c42:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6c46:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d6c48:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d6c4a:	464a      	mov	r2, r9
   d6c4c:	6818      	ldr	r0, [r3, #0]
   d6c4e:	f000 fed0 	bl	d79f2 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6c52:	2800      	cmp	r0, #0
   d6c54:	d0bc      	beq.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d6c56:	f44f 7600 	mov.w	r6, #512	; 0x200
   d6c5a:	e7ad      	b.n	d6bb8 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d6c5c:	69e2      	ldr	r2, [r4, #28]
   d6c5e:	78a3      	ldrb	r3, [r4, #2]
   d6c60:	42b2      	cmp	r2, r6
   d6c62:	d204      	bcs.n	d6c6e <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d6c64:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d6c66:	f043 0304 	orr.w	r3, r3, #4
   d6c6a:	70a3      	strb	r3, [r4, #2]
   d6c6c:	e003      	b.n	d6c76 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d6c6e:	4a08      	ldr	r2, [pc, #32]	; (d6c90 <_ZN7FatFile5writeEPKvj+0x188>)
   d6c70:	6812      	ldr	r2, [r2, #0]
   d6c72:	2a00      	cmp	r2, #0
   d6c74:	d1f7      	bne.n	d6c66 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d6c76:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6c7a:	2b00      	cmp	r3, #0
   d6c7c:	db02      	blt.n	d6c84 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d6c7e:	4638      	mov	r0, r7
}
   d6c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d6c84:	4620      	mov	r0, r4
   d6c86:	f7ff feb5 	bl	d69f4 <_ZN7FatFile4syncEv>
   d6c8a:	2800      	cmp	r0, #0
   d6c8c:	d1f7      	bne.n	d6c7e <_ZN7FatFile5writeEPKvj+0x176>
   d6c8e:	e79f      	b.n	d6bd0 <_ZN7FatFile5writeEPKvj+0xc8>
   d6c90:	2003e53c 	.word	0x2003e53c

000d6c94 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6c94:	1e41      	subs	r1, r0, #1
   d6c96:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d6c9a:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6c9c:	0842      	lsrs	r2, r0, #1
   d6c9e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d6ca2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6ca6:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6caa:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6cac:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6cae:	d1f5      	bne.n	d6c9c <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d6cb0:	4770      	bx	lr
	...

000d6cb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6cb8:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6cba:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6cbe:	2b20      	cmp	r3, #32
   d6cc0:	d0fa      	beq.n	d6cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6cc2:	4d6b      	ldr	r5, [pc, #428]	; (d6e70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d6cc4:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d6cc6:	2400      	movs	r4, #0
    c = path[len];
   d6cc8:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d6cca:	b1c3      	cbz	r3, d6cfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d6ccc:	2b2f      	cmp	r3, #47	; 0x2f
   d6cce:	d016      	beq.n	d6cfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6cd0:	2b5c      	cmp	r3, #92	; 0x5c
   d6cd2:	d102      	bne.n	d6cda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6cd4:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d6cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6cda:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d6cde:	b2c0      	uxtb	r0, r0
   d6ce0:	281d      	cmp	r0, #29
   d6ce2:	d803      	bhi.n	d6cec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d6ce4:	fa25 f000 	lsr.w	r0, r5, r0
   d6ce8:	07c0      	lsls	r0, r0, #31
   d6cea:	d4f3      	bmi.n	d6cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6cec:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d6cf0:	283c      	cmp	r0, #60	; 0x3c
   d6cf2:	d0ef      	beq.n	d6cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6cf4:	3b20      	subs	r3, #32
   d6cf6:	2b5e      	cmp	r3, #94	; 0x5e
   d6cf8:	d8ec      	bhi.n	d6cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d6cfa:	3401      	adds	r4, #1
    c = path[len];
   d6cfc:	e7e4      	b.n	d6cc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d6cfe:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d6d00:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6d02:	4607      	mov	r7, r0
   d6d04:	f810 5b01 	ldrb.w	r5, [r0], #1
   d6d08:	2d20      	cmp	r5, #32
   d6d0a:	d0fa      	beq.n	d6d02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d6d0c:	2d2f      	cmp	r5, #47	; 0x2f
   d6d0e:	d0f8      	beq.n	d6d02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6d10:	6017      	str	r7, [r2, #0]
  while (len) {
   d6d12:	b14c      	cbz	r4, d6d28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6d14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6d18:	2a2e      	cmp	r2, #46	; 0x2e
   d6d1a:	d001      	beq.n	d6d20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d6d1c:	2a20      	cmp	r2, #32
   d6d1e:	d101      	bne.n	d6d24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d6d20:	3c01      	subs	r4, #1
  while (len) {
   d6d22:	e7f6      	b.n	d6d12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6d24:	2cff      	cmp	r4, #255	; 0xff
   d6d26:	dcd5      	bgt.n	d6cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d6d28:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d6d2a:	f101 030d 	add.w	r3, r1, #13
   d6d2e:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d6d32:	2020      	movs	r0, #32
   d6d34:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6d38:	4293      	cmp	r3, r2
   d6d3a:	d1fb      	bne.n	d6d34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6d3c:	f04f 0800 	mov.w	r8, #0
   d6d40:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6d44:	2b2e      	cmp	r3, #46	; 0x2e
   d6d46:	d001      	beq.n	d6d4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6d48:	2b20      	cmp	r3, #32
   d6d4a:	d102      	bne.n	d6d52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6d4c:	f108 0801 	add.w	r8, r8, #1
   d6d50:	e7f6      	b.n	d6d40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d6d52:	fab8 f088 	clz	r0, r8
   d6d56:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6d58:	1e65      	subs	r5, r4, #1
   d6d5a:	1c6b      	adds	r3, r5, #1
   d6d5c:	d002      	beq.n	d6d64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d6d5e:	5d73      	ldrb	r3, [r6, r5]
   d6d60:	2b2e      	cmp	r3, #46	; 0x2e
   d6d62:	d114      	bne.n	d6d8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6d64:	f04f 0900 	mov.w	r9, #0
   d6d68:	2707      	movs	r7, #7
   d6d6a:	464a      	mov	r2, r9
   d6d6c:	46ca      	mov	sl, r9
   d6d6e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d6d72:	45a0      	cmp	r8, r4
   d6d74:	da69      	bge.n	d6e4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d6d76:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6d7a:	2b20      	cmp	r3, #32
   d6d7c:	d003      	beq.n	d6d86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d6d7e:	2b2e      	cmp	r3, #46	; 0x2e
   d6d80:	d107      	bne.n	d6d92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6d82:	45a8      	cmp	r8, r5
   d6d84:	d012      	beq.n	d6dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6d86:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6d88:	f108 0801 	add.w	r8, r8, #1
   d6d8c:	e7f1      	b.n	d6d72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6d8e:	3d01      	subs	r5, #1
   d6d90:	e7e3      	b.n	d6d5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d6d92:	2b22      	cmp	r3, #34	; 0x22
   d6d94:	d008      	beq.n	d6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d6d96:	2b7c      	cmp	r3, #124	; 0x7c
   d6d98:	d006      	beq.n	d6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6d9a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6d9e:	f1bc 0f05 	cmp.w	ip, #5
   d6da2:	d80b      	bhi.n	d6dbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6da4:	2b2d      	cmp	r3, #45	; 0x2d
   d6da6:	d013      	beq.n	d6dd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6da8:	45a8      	cmp	r8, r5
   d6daa:	d15c      	bne.n	d6e66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d6dac:	2f0a      	cmp	r7, #10
   d6dae:	d04b      	beq.n	d6e48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6db0:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6db2:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6db4:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6db6:	f04f 0e10 	mov.w	lr, #16
   d6dba:	e7e5      	b.n	d6d88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d6dbc:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6dc0:	f1bc 0f05 	cmp.w	ip, #5
   d6dc4:	d9f0      	bls.n	d6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d6dc6:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6dca:	f1bc 0f02 	cmp.w	ip, #2
   d6dce:	d9eb      	bls.n	d6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d6dd0:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6dd4:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6dd8:	d8e6      	bhi.n	d6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d6dda:	45a8      	cmp	r8, r5
   d6ddc:	d0e6      	beq.n	d6dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d6dde:	42ba      	cmp	r2, r7
   d6de0:	d830      	bhi.n	d6e44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d6de2:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6de6:	f1bc 0f19 	cmp.w	ip, #25
   d6dea:	d81a      	bhi.n	d6e22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d6dec:	3b20      	subs	r3, #32
        lc |= bit;
   d6dee:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d6df2:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6df4:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d6df8:	f102 0c01 	add.w	ip, r2, #1
   d6dfc:	fa5f fc8c 	uxtb.w	ip, ip
   d6e00:	440a      	add	r2, r1
      if (i < 7) {
   d6e02:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d6e06:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d6e08:	d801      	bhi.n	d6e0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d6e0a:	f881 c00c 	strb.w	ip, [r1, #12]
   d6e0e:	4662      	mov	r2, ip
   d6e10:	e7ba      	b.n	d6d88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6e12:	45a8      	cmp	r8, r5
   d6e14:	dc18      	bgt.n	d6e48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6e16:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6e18:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6e1a:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6e1c:	f04f 0e10 	mov.w	lr, #16
   d6e20:	e7b1      	b.n	d6d86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d6e22:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6e26:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6e2a:	bf98      	it	ls
   d6e2c:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d6e30:	e7e2      	b.n	d6df8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d6e32:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6e34:	2001      	movs	r0, #1
   d6e36:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6e38:	4419      	add	r1, r3
   d6e3a:	237e      	movs	r3, #126	; 0x7e
   d6e3c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6e3e:	2331      	movs	r3, #49	; 0x31
   d6e40:	738b      	strb	r3, [r1, #14]
   d6e42:	e748      	b.n	d6cd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6e44:	2f0a      	cmp	r7, #10
   d6e46:	d1e4      	bne.n	d6e12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6e48:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d6e4a:	7b4b      	ldrb	r3, [r1, #13]
   d6e4c:	2b20      	cmp	r3, #32
   d6e4e:	f43f af41 	beq.w	d6cd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d6e52:	2800      	cmp	r0, #0
   d6e54:	d0ed      	beq.n	d6e32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6e56:	ea1a 0f09 	tst.w	sl, r9
   d6e5a:	bf18      	it	ne
   d6e5c:	f04f 0902 	movne.w	r9, #2
   d6e60:	f881 9000 	strb.w	r9, [r1]
   d6e64:	e737      	b.n	d6cd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d6e66:	42ba      	cmp	r2, r7
   d6e68:	d8ec      	bhi.n	d6e44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d6e6a:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6e6c:	2000      	movs	r0, #0
   d6e6e:	e7c3      	b.n	d6df8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6e70:	31000101 	.word	0x31000101

000d6e74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6e78:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6e7c:	4606      	mov	r6, r0
   d6e7e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6e80:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6e82:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6e84:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6e88:	6861      	ldr	r1, [r4, #4]
   d6e8a:	68a2      	ldr	r2, [r4, #8]
   d6e8c:	186b      	adds	r3, r5, r1
   d6e8e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6e90:	4411      	add	r1, r2
   d6e92:	4291      	cmp	r1, r2
   d6e94:	d006      	beq.n	d6ea4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6e96:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6e9a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6e9e:	4043      	eors	r3, r0
   d6ea0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6ea2:	e7f6      	b.n	d6e92 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6ea4:	f1b9 0f03 	cmp.w	r9, #3
   d6ea8:	bf28      	it	cs
   d6eaa:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6eae:	f109 0204 	add.w	r2, r9, #4
   d6eb2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6eb4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6eb8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6eba:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ebc:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ebe:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ec0:	bf94      	ite	ls
   d6ec2:	3130      	addls	r1, #48	; 0x30
   d6ec4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ec6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ec8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6eca:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ece:	d1f1      	bne.n	d6eb4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d6ed0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d6ed4:	2100      	movs	r1, #0
   d6ed6:	735f      	strb	r7, [r3, #13]
   d6ed8:	4630      	mov	r0, r6
   d6eda:	f7ff fcdb 	bl	d6894 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d6ede:	2101      	movs	r1, #1
   d6ee0:	4630      	mov	r0, r6
   d6ee2:	f7ff fcb8 	bl	d6856 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6ee6:	4601      	mov	r1, r0
   d6ee8:	b928      	cbnz	r0, d6ef6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6eea:	7870      	ldrb	r0, [r6, #1]
   d6eec:	fab0 f080 	clz	r0, r0
   d6ef0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d6ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d6ef6:	7803      	ldrb	r3, [r0, #0]
   d6ef8:	b16b      	cbz	r3, d6f16 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6efa:	7ac3      	ldrb	r3, [r0, #11]
   d6efc:	071b      	lsls	r3, r3, #28
   d6efe:	d4ee      	bmi.n	d6ede <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6f00:	220b      	movs	r2, #11
   d6f02:	4640      	mov	r0, r8
   d6f04:	f003 ffff 	bl	daf06 <memcmp>
   d6f08:	2800      	cmp	r0, #0
   d6f0a:	d1e8      	bne.n	d6ede <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d6f0c:	3501      	adds	r5, #1
   d6f0e:	b2ad      	uxth	r5, r5
   d6f10:	2d64      	cmp	r5, #100	; 0x64
   d6f12:	d1b9      	bne.n	d6e88 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6f14:	e7ed      	b.n	d6ef2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d6f16:	2001      	movs	r0, #1
   d6f18:	e7eb      	b.n	d6ef2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d6f1c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f20:	ed2d 8b02 	vpush	{d8}
   d6f24:	b089      	sub	sp, #36	; 0x24
   d6f26:	460d      	mov	r5, r1
   d6f28:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d6f2a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f2c:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d6f2e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f32:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d6f34:	d105      	bne.n	d6f42 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d6f36:	2000      	movs	r0, #0
}
   d6f38:	b009      	add	sp, #36	; 0x24
   d6f3a:	ecbd 8b02 	vpop	{d8}
   d6f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d6f42:	9b06      	ldr	r3, [sp, #24]
   d6f44:	781b      	ldrb	r3, [r3, #0]
   d6f46:	2b00      	cmp	r3, #0
   d6f48:	d1f5      	bne.n	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d6f4a:	6853      	ldr	r3, [r2, #4]
   d6f4c:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6f4e:	7813      	ldrb	r3, [r2, #0]
   d6f50:	0799      	lsls	r1, r3, #30
   d6f52:	bf1c      	itt	ne
   d6f54:	9b04      	ldrne	r3, [sp, #16]
   d6f56:	f103 070c 	addne.w	r7, r3, #12
   d6f5a:	f04f 0100 	mov.w	r1, #0
   d6f5e:	bf18      	it	ne
   d6f60:	230d      	movne	r3, #13
   d6f62:	4628      	mov	r0, r5
   d6f64:	bf1d      	ittte	ne
   d6f66:	fbb7 f7f3 	udivne	r7, r7, r3
   d6f6a:	3701      	addne	r7, #1
   d6f6c:	b2ff      	uxtbne	r7, r7
   d6f6e:	2701      	moveq	r7, #1
   d6f70:	f7ff fc90 	bl	d6894 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6f74:	f108 020d 	add.w	r2, r8, #13
  }
   d6f78:	2300      	movs	r3, #0
   d6f7a:	ee08 2a10 	vmov	s16, r2
   d6f7e:	469b      	mov	fp, r3
   d6f80:	461c      	mov	r4, r3
   d6f82:	461e      	mov	r6, r3
   d6f84:	9303      	str	r3, [sp, #12]
   d6f86:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6f88:	696a      	ldr	r2, [r5, #20]
   d6f8a:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6f8c:	2101      	movs	r1, #1
   d6f8e:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6f90:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6f94:	f7ff fc5f 	bl	d6856 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6f98:	9b07      	ldr	r3, [sp, #28]
   d6f9a:	2800      	cmp	r0, #0
   d6f9c:	d16e      	bne.n	d707c <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d6f9e:	786b      	ldrb	r3, [r5, #1]
   d6fa0:	2b00      	cmp	r3, #0
   d6fa2:	d1c8      	bne.n	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6fa4:	9b05      	ldr	r3, [sp, #20]
   d6fa6:	059a      	lsls	r2, r3, #22
   d6fa8:	d5c5      	bpl.n	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d6faa:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d6fae:	3b01      	subs	r3, #1
   d6fb0:	2b01      	cmp	r3, #1
   d6fb2:	d8c0      	bhi.n	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d6fb4:	9b03      	ldr	r3, [sp, #12]
   d6fb6:	2c00      	cmp	r4, #0
   d6fb8:	bf08      	it	eq
   d6fba:	464b      	moveq	r3, r9
   d6fbc:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d6fbe:	42bc      	cmp	r4, r7
   d6fc0:	f0c0 8103 	bcc.w	d71ca <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d6fc4:	f1ba 0f00 	cmp.w	sl, #0
   d6fc8:	f040 811b 	bne.w	d7202 <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6fcc:	9b03      	ldr	r3, [sp, #12]
   d6fce:	4628      	mov	r0, r5
   d6fd0:	0159      	lsls	r1, r3, #5
   d6fd2:	f7ff fc5f 	bl	d6894 <_ZN7FatFile7seekSetEm>
   d6fd6:	2800      	cmp	r0, #0
   d6fd8:	d0ad      	beq.n	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d6fda:	3f01      	subs	r7, #1
   d6fdc:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6fe0:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6fe2:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d6fe6:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6fe8:	2e00      	cmp	r6, #0
   d6fea:	f000 8121 	beq.w	d7230 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6fee:	2100      	movs	r1, #0
   d6ff0:	4628      	mov	r0, r5
   d6ff2:	f7ff fc30 	bl	d6856 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6ff6:	4604      	mov	r4, r0
   d6ff8:	2800      	cmp	r0, #0
   d6ffa:	d09c      	beq.n	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d6ffc:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d6ffe:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d7002:	4556      	cmp	r6, sl
   d7004:	f043 0301 	orr.w	r3, r3, #1
   d7008:	bf0c      	ite	eq
   d700a:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d700e:	46b3      	movne	fp, r6
   d7010:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d7014:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d7018:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d701a:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d701e:	f108 000d 	add.w	r0, r8, #13
   d7022:	f7ff fe37 	bl	d6c94 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d7026:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d702a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d702c:	f884 901a 	strb.w	r9, [r4, #26]
   d7030:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d7034:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d7038:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d703a:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d703e:	fb02 f20b 	mul.w	r2, r2, fp
   d7042:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d7044:	9904      	ldr	r1, [sp, #16]
   d7046:	4291      	cmp	r1, r2
   d7048:	f240 80e3 	bls.w	d7212 <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d704c:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d7050:	2b04      	cmp	r3, #4
   d7052:	fa5f fe83 	uxtb.w	lr, r3
   d7056:	f103 0001 	add.w	r0, r3, #1
   d705a:	f200 80e0 	bhi.w	d721e <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d705e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d7062:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d7066:	280d      	cmp	r0, #13
   d7068:	f102 0201 	add.w	r2, r2, #1
   d706c:	4603      	mov	r3, r0
   d706e:	d1e9      	bne.n	d7044 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d7070:	3e01      	subs	r6, #1
   d7072:	b2f6      	uxtb	r6, r6
   d7074:	e7b8      	b.n	d6fe8 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d7076:	f04f 0a01 	mov.w	sl, #1
   d707a:	e785      	b.n	d6f88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d707c:	7802      	ldrb	r2, [r0, #0]
   d707e:	2ae5      	cmp	r2, #229	; 0xe5
   d7080:	d000      	beq.n	d7084 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d7082:	b97a      	cbnz	r2, d70a4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d7084:	9903      	ldr	r1, [sp, #12]
   d7086:	2c00      	cmp	r4, #0
   d7088:	bf08      	it	eq
   d708a:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d708c:	42bc      	cmp	r4, r7
        freeFound++;
   d708e:	bf38      	it	cc
   d7090:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d7092:	9103      	str	r1, [sp, #12]
        freeFound++;
   d7094:	bf38      	it	cc
   d7096:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d7098:	2a00      	cmp	r2, #0
   d709a:	d083      	beq.n	d6fa4 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d709c:	2ae5      	cmp	r2, #229	; 0xe5
   d709e:	d104      	bne.n	d70aa <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d70a0:	2600      	movs	r6, #0
   d70a2:	e771      	b.n	d6f88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d70a4:	42bc      	cmp	r4, r7
   d70a6:	bf38      	it	cc
   d70a8:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d70aa:	2a2e      	cmp	r2, #46	; 0x2e
   d70ac:	d0f8      	beq.n	d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d70ae:	7ac1      	ldrb	r1, [r0, #11]
   d70b0:	290f      	cmp	r1, #15
   d70b2:	d15d      	bne.n	d7170 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d70b4:	bb3e      	cbnz	r6, d7106 <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d70b6:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d70ba:	f43f af65 	beq.w	d6f88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d70be:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d70c2:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d70c4:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d70c6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d70ca:	f04f 0e0d 	mov.w	lr, #13
   d70ce:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d70d2:	9a04      	ldr	r2, [sp, #16]
   d70d4:	4572      	cmp	r2, lr
   d70d6:	d9e3      	bls.n	d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d70d8:	eba2 020e 	sub.w	r2, r2, lr
   d70dc:	9207      	str	r2, [sp, #28]
   d70de:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d70e2:	f1bc 0f04 	cmp.w	ip, #4
   d70e6:	eb0c 090e 	add.w	r9, ip, lr
   d70ea:	fa5f f28c 	uxtb.w	r2, ip
   d70ee:	d814      	bhi.n	d711a <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d70f0:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d70f4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d70f8:	9907      	ldr	r1, [sp, #28]
   d70fa:	458c      	cmp	ip, r1
   d70fc:	d11b      	bne.n	d7136 <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d70fe:	2a00      	cmp	r2, #0
   d7100:	bf18      	it	ne
   d7102:	2600      	movne	r6, #0
   d7104:	e740      	b.n	d6f88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d7106:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d710a:	fa5f fb8b 	uxtb.w	fp, fp
   d710e:	455a      	cmp	r2, fp
   d7110:	d1c6      	bne.n	d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d7112:	7b42      	ldrb	r2, [r0, #13]
   d7114:	429a      	cmp	r2, r3
   d7116:	d0d6      	beq.n	d70c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d7118:	e7c2      	b.n	d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d711a:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d711c:	bf95      	itete	ls
   d711e:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d7122:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7126:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d712a:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d712e:	bf94      	ite	ls
   d7130:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d7132:	8892      	ldrhhi	r2, [r2, #4]
   d7134:	e7e0      	b.n	d70f8 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d7136:	2aff      	cmp	r2, #255	; 0xff
   d7138:	d8b2      	bhi.n	d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d713a:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d713c:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d7140:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d7142:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d7146:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d714a:	bf98      	it	ls
   d714c:	3220      	addls	r2, #32
   d714e:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d7152:	bf98      	it	ls
   d7154:	b2d2      	uxtbls	r2, r2
   d7156:	f1b9 0f19 	cmp.w	r9, #25
   d715a:	bf9c      	itt	ls
   d715c:	3120      	addls	r1, #32
   d715e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d7160:	4291      	cmp	r1, r2
   d7162:	d19d      	bne.n	d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d7164:	f10c 0c01 	add.w	ip, ip, #1
   d7168:	f1bc 0f0d 	cmp.w	ip, #13
   d716c:	d1b9      	bne.n	d70e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d716e:	e70b      	b.n	d6f88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d7170:	070a      	lsls	r2, r1, #28
   d7172:	d495      	bmi.n	d70a0 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d7174:	b166      	cbz	r6, d7190 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d7176:	f1bb 0f01 	cmp.w	fp, #1
   d717a:	9303      	str	r3, [sp, #12]
   d717c:	f47f aedb 	bne.w	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d7180:	f7ff fd88 	bl	d6c94 <_ZN7FatFile11lfnChecksumEPh>
   d7184:	9b03      	ldr	r3, [sp, #12]
   d7186:	4298      	cmp	r0, r3
   d7188:	f47f aed5 	bne.w	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d718c:	46b2      	mov	sl, r6
   d718e:	e00f      	b.n	d71b0 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d7190:	ee18 1a10 	vmov	r1, s16
   d7194:	220b      	movs	r2, #11
   d7196:	9307      	str	r3, [sp, #28]
   d7198:	f003 feb5 	bl	daf06 <memcmp>
   d719c:	9b07      	ldr	r3, [sp, #28]
   d719e:	2800      	cmp	r0, #0
   d71a0:	f47f aef2 	bne.w	d6f88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d71a4:	f898 a000 	ldrb.w	sl, [r8]
   d71a8:	f01a 0a01 	ands.w	sl, sl, #1
   d71ac:	f47f af63 	bne.w	d7076 <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d71b0:	9b05      	ldr	r3, [sp, #20]
   d71b2:	0519      	lsls	r1, r3, #20
   d71b4:	f53f aebf 	bmi.w	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d71b8:	9b05      	ldr	r3, [sp, #20]
   d71ba:	9806      	ldr	r0, [sp, #24]
   d71bc:	f8cd a000 	str.w	sl, [sp]
   d71c0:	464a      	mov	r2, r9
   d71c2:	4629      	mov	r1, r5
   d71c4:	f7ff fba9 	bl	d691a <_ZN7FatFile15openCachedEntryEPS_tih>
   d71c8:	e6b6      	b.n	d6f38 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d71ca:	2100      	movs	r1, #0
   d71cc:	4628      	mov	r0, r5
   d71ce:	f7ff fb42 	bl	d6856 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d71d2:	b998      	cbnz	r0, d71fc <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d71d4:	786b      	ldrb	r3, [r5, #1]
   d71d6:	2b00      	cmp	r3, #0
   d71d8:	f47f aead 	bne.w	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d71dc:	4628      	mov	r0, r5
   d71de:	f7ff fa13 	bl	d6608 <_ZN7FatFile13addDirClusterEv>
   d71e2:	2800      	cmp	r0, #0
   d71e4:	f43f aea7 	beq.w	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d71e8:	68ab      	ldr	r3, [r5, #8]
   d71ea:	791b      	ldrb	r3, [r3, #4]
   d71ec:	2b01      	cmp	r3, #1
   d71ee:	f63f aee9 	bhi.w	d6fc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d71f2:	3410      	adds	r4, #16
   d71f4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d71f6:	42a7      	cmp	r7, r4
   d71f8:	d8f0      	bhi.n	d71dc <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d71fa:	e6e3      	b.n	d6fc4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d71fc:	3401      	adds	r4, #1
   d71fe:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d7200:	e6dd      	b.n	d6fbe <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d7202:	4641      	mov	r1, r8
   d7204:	4628      	mov	r0, r5
   d7206:	f7ff fe35 	bl	d6e74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d720a:	2800      	cmp	r0, #0
   d720c:	f47f aede 	bne.w	d6fcc <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d7210:	e691      	b.n	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d7212:	bf14      	ite	ne
   d7214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d7218:	2100      	moveq	r1, #0
   d721a:	b289      	uxth	r1, r1
   d721c:	e718      	b.n	d7050 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d721e:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d7222:	bf94      	ite	ls
   d7224:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d7228:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d722c:	8099      	strh	r1, [r3, #4]
   d722e:	e71a      	b.n	d7066 <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d7230:	4631      	mov	r1, r6
   d7232:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d7234:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d7236:	f7ff fb0e 	bl	d6856 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d723a:	4604      	mov	r4, r0
   d723c:	2800      	cmp	r0, #0
   d723e:	f43f ae7a 	beq.w	d6f36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d7242:	2220      	movs	r2, #32
   d7244:	4631      	mov	r1, r6
   d7246:	f003 fe7a 	bl	daf3e <memset>
  memcpy(dir->name, fname->sfn, 11);
   d724a:	4643      	mov	r3, r8
   d724c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d7250:	6022      	str	r2, [r4, #0]
   d7252:	685a      	ldr	r2, [r3, #4]
   d7254:	6062      	str	r2, [r4, #4]
   d7256:	891a      	ldrh	r2, [r3, #8]
   d7258:	8122      	strh	r2, [r4, #8]
   d725a:	7a9b      	ldrb	r3, [r3, #10]
   d725c:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d725e:	f898 3000 	ldrb.w	r3, [r8]
   d7262:	f003 0318 	and.w	r3, r3, #24
   d7266:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d7268:	4b0f      	ldr	r3, [pc, #60]	; (d72a8 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d726a:	681b      	ldr	r3, [r3, #0]
   d726c:	b19b      	cbz	r3, d7296 <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d726e:	f104 010e 	add.w	r1, r4, #14
   d7272:	f104 0010 	add.w	r0, r4, #16
   d7276:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d7278:	8a23      	ldrh	r3, [r4, #16]
   d727a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d727c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d727e:	89e3      	ldrh	r3, [r4, #14]
   d7280:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d7282:	68aa      	ldr	r2, [r5, #8]
   d7284:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d7288:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d728c:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d7290:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d7294:	e790      	b.n	d71b8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d7296:	2321      	movs	r3, #33	; 0x21
   d7298:	7423      	strb	r3, [r4, #16]
   d729a:	2328      	movs	r3, #40	; 0x28
   d729c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d729e:	2308      	movs	r3, #8
   d72a0:	73a6      	strb	r6, [r4, #14]
   d72a2:	73e3      	strb	r3, [r4, #15]
   d72a4:	e7e8      	b.n	d7278 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d72a6:	bf00      	nop
   d72a8:	2003e53c 	.word	0x2003e53c

000d72ac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d72ac:	b513      	push	{r0, r1, r4, lr}
   d72ae:	4604      	mov	r4, r0
    }
   d72b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d72b2:	b159      	cbz	r1, d72cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d72b4:	9101      	str	r1, [sp, #4]
   d72b6:	f003 fe9e 	bl	daff6 <strlen>
   d72ba:	6823      	ldr	r3, [r4, #0]
   d72bc:	9901      	ldr	r1, [sp, #4]
   d72be:	68db      	ldr	r3, [r3, #12]
   d72c0:	4602      	mov	r2, r0
   d72c2:	4620      	mov	r0, r4
    }
   d72c4:	b002      	add	sp, #8
   d72c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d72ca:	4718      	bx	r3
    }
   d72cc:	b002      	add	sp, #8
   d72ce:	bd10      	pop	{r4, pc}

000d72d0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d72d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d72d2:	7803      	ldrb	r3, [r0, #0]
   d72d4:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d72d6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d72d8:	d520      	bpl.n	d731c <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d72da:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d72dc:	6881      	ldr	r1, [r0, #8]
   d72de:	f100 020c 	add.w	r2, r0, #12
   d72e2:	6818      	ldr	r0, [r3, #0]
   d72e4:	9201      	str	r2, [sp, #4]
   d72e6:	f000 fb84 	bl	d79f2 <_ZN9SdSpiCard10writeBlockEmPKh>
   d72ea:	9a01      	ldr	r2, [sp, #4]
   d72ec:	4605      	mov	r5, r0
   d72ee:	b918      	cbnz	r0, d72f8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d72f0:	2500      	movs	r5, #0
}
   d72f2:	4628      	mov	r0, r5
   d72f4:	b003      	add	sp, #12
   d72f6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d72f8:	7823      	ldrb	r3, [r4, #0]
   d72fa:	079b      	lsls	r3, r3, #30
   d72fc:	d404      	bmi.n	d7308 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d72fe:	7823      	ldrb	r3, [r4, #0]
   d7300:	f023 0301 	bic.w	r3, r3, #1
   d7304:	7023      	strb	r3, [r4, #0]
   d7306:	e7f4      	b.n	d72f2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7308:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d730c:	6919      	ldr	r1, [r3, #16]
   d730e:	4401      	add	r1, r0
   d7310:	6818      	ldr	r0, [r3, #0]
   d7312:	f000 fb6e 	bl	d79f2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d7316:	2800      	cmp	r0, #0
   d7318:	d1f1      	bne.n	d72fe <_ZN8FatCache4syncEv+0x2e>
   d731a:	e7e9      	b.n	d72f0 <_ZN8FatCache4syncEv+0x20>
  return true;
   d731c:	2501      	movs	r5, #1
   d731e:	e7e8      	b.n	d72f2 <_ZN8FatCache4syncEv+0x22>

000d7320 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7320:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7322:	6883      	ldr	r3, [r0, #8]
   d7324:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7326:	4604      	mov	r4, r0
   d7328:	460e      	mov	r6, r1
   d732a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d732c:	d009      	beq.n	d7342 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d732e:	f7ff ffcf 	bl	d72d0 <_ZN8FatCache4syncEv>
   d7332:	b908      	cbnz	r0, d7338 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d7334:	2000      	movs	r0, #0
}
   d7336:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7338:	076b      	lsls	r3, r5, #29
   d733a:	d50a      	bpl.n	d7352 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d733c:	2300      	movs	r3, #0
   d733e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7340:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d7342:	7822      	ldrb	r2, [r4, #0]
   d7344:	f005 0503 	and.w	r5, r5, #3
   d7348:	4620      	mov	r0, r4
   d734a:	4315      	orrs	r5, r2
   d734c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d7350:	e7f1      	b.n	d7336 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7352:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d7354:	f104 020c 	add.w	r2, r4, #12
   d7358:	6818      	ldr	r0, [r3, #0]
   d735a:	4631      	mov	r1, r6
   d735c:	f000 fac0 	bl	d78e0 <_ZN9SdSpiCard9readBlockEmPh>
   d7360:	2800      	cmp	r0, #0
   d7362:	d1eb      	bne.n	d733c <_ZN8FatCache4readEmh+0x1c>
   d7364:	e7e6      	b.n	d7334 <_ZN8FatCache4readEmh+0x14>

000d7366 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d7366:	7983      	ldrb	r3, [r0, #6]
   d7368:	6940      	ldr	r0, [r0, #20]
   d736a:	3902      	subs	r1, #2
   d736c:	4099      	lsls	r1, r3
}
   d736e:	4408      	add	r0, r1
   d7370:	4770      	bx	lr

000d7372 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7372:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d7374:	b570      	push	{r4, r5, r6, lr}
   d7376:	4605      	mov	r5, r0
   d7378:	460c      	mov	r4, r1
   d737a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d737c:	d802      	bhi.n	d7384 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d737e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7382:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d7384:	69c3      	ldr	r3, [r0, #28]
   d7386:	428b      	cmp	r3, r1
   d7388:	d3f9      	bcc.n	d737e <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d738a:	79c3      	ldrb	r3, [r0, #7]
   d738c:	2b20      	cmp	r3, #32
   d738e:	d116      	bne.n	d73be <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d7390:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d7392:	2202      	movs	r2, #2
   d7394:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7398:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d739c:	f7ff ffc0 	bl	d7320 <_ZN8FatCache4readEmh>
    if (!pc) {
   d73a0:	2800      	cmp	r0, #0
   d73a2:	d0ec      	beq.n	d737e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d73a4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d73a8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d73ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d73b0:	69ea      	ldr	r2, [r5, #28]
   d73b2:	429a      	cmp	r2, r3
  *value = next;
   d73b4:	bf26      	itte	cs
   d73b6:	6033      	strcs	r3, [r6, #0]
  return 1;
   d73b8:	2001      	movcs	r0, #1
    return 0;
   d73ba:	2000      	movcc	r0, #0
   d73bc:	e7e1      	b.n	d7382 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d73be:	2b10      	cmp	r3, #16
   d73c0:	d1dd      	bne.n	d737e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d73c2:	6983      	ldr	r3, [r0, #24]
   d73c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d73c8:	2202      	movs	r2, #2
   d73ca:	4419      	add	r1, r3
   d73cc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d73d0:	f7ff ffa6 	bl	d7320 <_ZN8FatCache4readEmh>
    if (!pc) {
   d73d4:	2800      	cmp	r0, #0
   d73d6:	d0d2      	beq.n	d737e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d73d8:	b2e4      	uxtb	r4, r4
   d73da:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d73de:	e7e7      	b.n	d73b0 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d73e0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d73e0:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d73e2:	b538      	push	{r3, r4, r5, lr}
   d73e4:	460c      	mov	r4, r1
   d73e6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d73e8:	d801      	bhi.n	d73ee <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d73ea:	2000      	movs	r0, #0
}
   d73ec:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d73ee:	69c3      	ldr	r3, [r0, #28]
   d73f0:	428b      	cmp	r3, r1
   d73f2:	d3fa      	bcc.n	d73ea <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d73f4:	79c3      	ldrb	r3, [r0, #7]
   d73f6:	2b20      	cmp	r3, #32
   d73f8:	d10f      	bne.n	d741a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d73fa:	6981      	ldr	r1, [r0, #24]
   d73fc:	2203      	movs	r2, #3
   d73fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7402:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7406:	f7ff ff8b 	bl	d7320 <_ZN8FatCache4readEmh>
    if (!pc) {
   d740a:	2800      	cmp	r0, #0
   d740c:	d0ed      	beq.n	d73ea <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d740e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7412:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d7416:	2001      	movs	r0, #1
   d7418:	e7e8      	b.n	d73ec <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d741a:	2b10      	cmp	r3, #16
   d741c:	d1e5      	bne.n	d73ea <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d741e:	6983      	ldr	r3, [r0, #24]
   d7420:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7424:	2203      	movs	r2, #3
   d7426:	4419      	add	r1, r3
   d7428:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d742c:	f7ff ff78 	bl	d7320 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7430:	2800      	cmp	r0, #0
   d7432:	d0da      	beq.n	d73ea <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d7434:	b2e4      	uxtb	r4, r4
   d7436:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d743a:	e7ec      	b.n	d7416 <_ZN9FatVolume6fatPutEmm+0x36>

000d743c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d743c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d7440:	68c4      	ldr	r4, [r0, #12]
   d7442:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7444:	4605      	mov	r5, r0
   d7446:	460e      	mov	r6, r1
   d7448:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d744a:	d301      	bcc.n	d7450 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d744c:	2701      	movs	r7, #1
   d744e:	e001      	b.n	d7454 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7450:	460c      	mov	r4, r1
    setStart = false;
   d7452:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d7454:	69eb      	ldr	r3, [r5, #28]
    find++;
   d7456:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7458:	42a3      	cmp	r3, r4
   d745a:	d202      	bcs.n	d7462 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d745c:	b9c7      	cbnz	r7, d7490 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d745e:	68ec      	ldr	r4, [r5, #12]
   d7460:	e7f4      	b.n	d744c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d7462:	42a6      	cmp	r6, r4
   d7464:	d014      	beq.n	d7490 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d7466:	aa01      	add	r2, sp, #4
   d7468:	4621      	mov	r1, r4
   d746a:	4628      	mov	r0, r5
   d746c:	f7ff ff81 	bl	d7372 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7470:	2800      	cmp	r0, #0
   d7472:	db0d      	blt.n	d7490 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d7474:	d0ee      	beq.n	d7454 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7476:	9b01      	ldr	r3, [sp, #4]
   d7478:	2b00      	cmp	r3, #0
   d747a:	d1eb      	bne.n	d7454 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d747c:	b107      	cbz	r7, d7480 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d747e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7480:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d7484:	4621      	mov	r1, r4
   d7486:	4628      	mov	r0, r5
   d7488:	f7ff ffaa 	bl	d73e0 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d748c:	4607      	mov	r7, r0
   d748e:	b920      	cbnz	r0, d749a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d7490:	2700      	movs	r7, #0
}
   d7492:	4638      	mov	r0, r7
   d7494:	b002      	add	sp, #8
   d7496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d749a:	b916      	cbnz	r6, d74a2 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d749c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d74a0:	e7f7      	b.n	d7492 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d74a2:	4622      	mov	r2, r4
   d74a4:	4631      	mov	r1, r6
   d74a6:	4628      	mov	r0, r5
   d74a8:	f7ff ff9a 	bl	d73e0 <_ZN9FatVolume6fatPutEmm>
   d74ac:	2800      	cmp	r0, #0
   d74ae:	d1f5      	bne.n	d749c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d74b0:	e7ee      	b.n	d7490 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d74b2 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d74b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d74b4:	4605      	mov	r5, r0
   d74b6:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d74b8:	aa01      	add	r2, sp, #4
   d74ba:	4621      	mov	r1, r4
   d74bc:	4628      	mov	r0, r5
   d74be:	f7ff ff58 	bl	d7372 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d74c2:	1e06      	subs	r6, r0, #0
   d74c4:	db10      	blt.n	d74e8 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d74c6:	2200      	movs	r2, #0
   d74c8:	4621      	mov	r1, r4
   d74ca:	4628      	mov	r0, r5
   d74cc:	f7ff ff88 	bl	d73e0 <_ZN9FatVolume6fatPutEmm>
   d74d0:	b150      	cbz	r0, d74e8 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d74d2:	68eb      	ldr	r3, [r5, #12]
   d74d4:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d74d6:	bf24      	itt	cs
   d74d8:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d74dc:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d74de:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d74e0:	2e00      	cmp	r6, #0
   d74e2:	d1e9      	bne.n	d74b8 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d74e4:	b002      	add	sp, #8
   d74e6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d74e8:	2000      	movs	r0, #0
   d74ea:	e7fb      	b.n	d74e4 <_ZN9FatVolume9freeChainEm+0x32>

000d74ec <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d74ec:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d74ee:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d74f0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d74f2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d74f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d74f8:	4604      	mov	r4, r0
  m_fatType = 0;
   d74fa:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d74fc:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d7500:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d7502:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d7506:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d7508:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d750c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7510:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d7514:	460d      	mov	r5, r1
   d7516:	b1b9      	cbz	r1, d7548 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d7518:	2904      	cmp	r1, #4
   d751a:	d901      	bls.n	d7520 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d751c:	2000      	movs	r0, #0
}
   d751e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d7520:	4611      	mov	r1, r2
   d7522:	4630      	mov	r0, r6
   d7524:	f7ff fefc 	bl	d7320 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7528:	2800      	cmp	r0, #0
   d752a:	d0f7      	beq.n	d751c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d752c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7530:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7534:	065b      	lsls	r3, r3, #25
   d7536:	d1f1      	bne.n	d751c <_ZN9FatVolume4initEh+0x30>
   d7538:	f105 011b 	add.w	r1, r5, #27
   d753c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d7540:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d7544:	2d00      	cmp	r5, #0
   d7546:	d0e9      	beq.n	d751c <_ZN9FatVolume4initEh+0x30>
   d7548:	2200      	movs	r2, #0
   d754a:	4629      	mov	r1, r5
   d754c:	4630      	mov	r0, r6
   d754e:	f7ff fee7 	bl	d7320 <_ZN8FatCache4readEmh>
  if (!pc) {
   d7552:	2800      	cmp	r0, #0
   d7554:	d0e2      	beq.n	d751c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d7556:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d755a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d755e:	d1dd      	bne.n	d751c <_ZN9FatVolume4initEh+0x30>
   d7560:	7c03      	ldrb	r3, [r0, #16]
   d7562:	2b02      	cmp	r3, #2
   d7564:	d1da      	bne.n	d751c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d7566:	89c3      	ldrh	r3, [r0, #14]
   d7568:	2b00      	cmp	r3, #0
   d756a:	d0d7      	beq.n	d751c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d756c:	7b41      	ldrb	r1, [r0, #13]
   d756e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d7570:	1e4b      	subs	r3, r1, #1
   d7572:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d7574:	2300      	movs	r3, #0
   d7576:	71a3      	strb	r3, [r4, #6]
   d7578:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d757a:	2301      	movs	r3, #1
   d757c:	4299      	cmp	r1, r3
   d757e:	d007      	beq.n	d7590 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d7580:	3e01      	subs	r6, #1
   d7582:	d0cb      	beq.n	d751c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7584:	79a2      	ldrb	r2, [r4, #6]
   d7586:	005b      	lsls	r3, r3, #1
   d7588:	3201      	adds	r2, #1
   d758a:	b2db      	uxtb	r3, r3
   d758c:	71a2      	strb	r2, [r4, #6]
   d758e:	e7f5      	b.n	d757c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d7590:	8ac1      	ldrh	r1, [r0, #22]
   d7592:	b901      	cbnz	r1, d7596 <_ZN9FatVolume4initEh+0xaa>
   d7594:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d7596:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d7598:	89c3      	ldrh	r3, [r0, #14]
   d759a:	442b      	add	r3, r5
   d759c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d759e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d75a2:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d75a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d75a8:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d75aa:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d75ae:	0149      	lsls	r1, r1, #5
   d75b0:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d75b4:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d75b8:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d75ba:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d75be:	b902      	cbnz	r2, d75c2 <_ZN9FatVolume4initEh+0xd6>
   d75c0:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d75c2:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d75c4:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d75c6:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d75c8:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d75ca:	1c4b      	adds	r3, r1, #1
   d75cc:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d75ce:	f640 73f4 	movw	r3, #4084	; 0xff4
   d75d2:	4299      	cmp	r1, r3
   d75d4:	d802      	bhi.n	d75dc <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d75d6:	230c      	movs	r3, #12
   d75d8:	71e3      	strb	r3, [r4, #7]
   d75da:	e79f      	b.n	d751c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d75dc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d75e0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d75e2:	bf85      	ittet	hi
   d75e4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d75e6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d75e8:	2310      	movls	r3, #16
    m_fatType = 32;
   d75ea:	2320      	movhi	r3, #32
   d75ec:	71e3      	strb	r3, [r4, #7]
  return true;
   d75ee:	2001      	movs	r0, #1
   d75f0:	e795      	b.n	d751e <_ZN9FatVolume4initEh+0x32>
	...

000d75f4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d75f4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d75f6:	4e0e      	ldr	r6, [pc, #56]	; (d7630 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d75f8:	460d      	mov	r5, r1
   d75fa:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d75fc:	f000 fbb4 	bl	d7d68 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7600:	6833      	ldr	r3, [r6, #0]
   d7602:	1ac0      	subs	r0, r0, r3
   d7604:	4b0b      	ldr	r3, [pc, #44]	; (d7634 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d7606:	4298      	cmp	r0, r3
   d7608:	d908      	bls.n	d761c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d760a:	f000 fbb5 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d760e:	4b0a      	ldr	r3, [pc, #40]	; (d7638 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7610:	6018      	str	r0, [r3, #0]
    		spark_process();
   d7612:	f000 fd97 	bl	d8144 <spark_process>
   d7616:	f000 fba7 	bl	d7d68 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d761a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d761c:	f000 fbac 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7620:	b280      	uxth	r0, r0
   d7622:	1b40      	subs	r0, r0, r5
}
   d7624:	42a0      	cmp	r0, r4
   d7626:	bfd4      	ite	le
   d7628:	2000      	movle	r0, #0
   d762a:	2001      	movgt	r0, #1
   d762c:	bd70      	pop	{r4, r5, r6, pc}
   d762e:	bf00      	nop
   d7630:	2003e544 	.word	0x2003e544
   d7634:	000186a0 	.word	0x000186a0
   d7638:	2003e738 	.word	0x2003e738

000d763c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d763c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d763e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d7640:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7642:	b94d      	cbnz	r5, d7658 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7644:	6840      	ldr	r0, [r0, #4]
   d7646:	f000 fa6b 	bl	d7b20 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d764a:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d764c:	4629      	mov	r1, r5
   d764e:	7d18      	ldrb	r0, [r3, #20]
   d7650:	f002 fd17 	bl	da082 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7654:	2301      	movs	r3, #1
   d7656:	7223      	strb	r3, [r4, #8]
  }
}
   d7658:	bd38      	pop	{r3, r4, r5, pc}

000d765a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d765a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d765c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d765e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7660:	b16b      	cbz	r3, d767e <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d7662:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d7664:	2101      	movs	r1, #1
   d7666:	7d18      	ldrb	r0, [r3, #20]
   d7668:	f002 fd0b 	bl	da082 <digitalWrite>
     m_spiDriver->send(data);
   d766c:	6860      	ldr	r0, [r4, #4]
   d766e:	21ff      	movs	r1, #255	; 0xff
   d7670:	f000 fa88 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d7674:	6860      	ldr	r0, [r4, #4]
   d7676:	f000 fa67 	bl	d7b48 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d767a:	2300      	movs	r3, #0
   d767c:	7223      	strb	r3, [r4, #8]
  }
}
   d767e:	bd10      	pop	{r4, pc}

000d7680 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7682:	4604      	mov	r4, r0
   d7684:	460d      	mov	r5, r1
   d7686:	4616      	mov	r6, r2
   d7688:	f000 fb76 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d768c:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d768e:	6860      	ldr	r0, [r4, #4]
   d7690:	f000 fa5d 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d7694:	28ff      	cmp	r0, #255	; 0xff
   d7696:	7260      	strb	r0, [r4, #9]
   d7698:	d10e      	bne.n	d76b8 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d769a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d769e:	4639      	mov	r1, r7
   d76a0:	4620      	mov	r0, r4
   d76a2:	f7ff ffa7 	bl	d75f4 <_ZN9SdSpiCard10isTimedOutEtt>
   d76a6:	2800      	cmp	r0, #0
   d76a8:	d0f1      	beq.n	d768e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d76aa:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d76ac:	4620      	mov	r0, r4
   d76ae:	7023      	strb	r3, [r4, #0]
   d76b0:	f7ff ffd3 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76b4:	2000      	movs	r0, #0
}
   d76b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d76b8:	28fe      	cmp	r0, #254	; 0xfe
   d76ba:	d001      	beq.n	d76c0 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d76bc:	2350      	movs	r3, #80	; 0x50
   d76be:	e7f5      	b.n	d76ac <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d76c0:	6860      	ldr	r0, [r4, #4]
   d76c2:	4632      	mov	r2, r6
   d76c4:	4629      	mov	r1, r5
   d76c6:	f000 fa47 	bl	d7b58 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d76ca:	7260      	strb	r0, [r4, #9]
   d76cc:	b108      	cbz	r0, d76d2 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d76ce:	2360      	movs	r3, #96	; 0x60
   d76d0:	e7ec      	b.n	d76ac <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d76d2:	6860      	ldr	r0, [r4, #4]
   d76d4:	f000 fa3b 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
   d76d8:	6860      	ldr	r0, [r4, #4]
   d76da:	f000 fa38 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
   d76de:	2001      	movs	r0, #1
   d76e0:	e7e9      	b.n	d76b6 <_ZN9SdSpiCard8readDataEPhj+0x36>

000d76e2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d76e2:	b570      	push	{r4, r5, r6, lr}
   d76e4:	4604      	mov	r4, r0
   d76e6:	460e      	mov	r6, r1
   d76e8:	f000 fb46 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
   d76ec:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d76ee:	4632      	mov	r2, r6
   d76f0:	4629      	mov	r1, r5
   d76f2:	4620      	mov	r0, r4
   d76f4:	f7ff ff7e 	bl	d75f4 <_ZN9SdSpiCard10isTimedOutEtt>
   d76f8:	b930      	cbnz	r0, d7708 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d76fa:	6860      	ldr	r0, [r4, #4]
   d76fc:	f000 fa27 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7700:	28ff      	cmp	r0, #255	; 0xff
   d7702:	d1f4      	bne.n	d76ee <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7704:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d7706:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d7708:	2000      	movs	r0, #0
   d770a:	e7fc      	b.n	d7706 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d770c <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d770c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d770e:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7710:	9201      	str	r2, [sp, #4]
   d7712:	4604      	mov	r4, r0
   d7714:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d7716:	b90b      	cbnz	r3, d771c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7718:	f7ff ff90 	bl	d763c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d771c:	b125      	cbz	r5, d7728 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d771e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7722:	4620      	mov	r0, r4
   d7724:	f7ff ffdd 	bl	d76e2 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d7728:	6860      	ldr	r0, [r4, #4]
   d772a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d772e:	f000 fa29 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
   d7732:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d7734:	af01      	add	r7, sp, #4
   d7736:	5db9      	ldrb	r1, [r7, r6]
   d7738:	6860      	ldr	r0, [r4, #4]
   d773a:	f000 fa23 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d773e:	3e01      	subs	r6, #1
   d7740:	d2f9      	bcs.n	d7736 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7742:	2d00      	cmp	r5, #0
   d7744:	6860      	ldr	r0, [r4, #4]
   d7746:	bf0c      	ite	eq
   d7748:	2195      	moveq	r1, #149	; 0x95
   d774a:	2187      	movne	r1, #135	; 0x87
   d774c:	f000 fa1a 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7750:	6860      	ldr	r0, [r4, #4]
   d7752:	f000 f9fc 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
   d7756:	250b      	movs	r5, #11
   d7758:	6860      	ldr	r0, [r4, #4]
   d775a:	f000 f9f8 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d775e:	0603      	lsls	r3, r0, #24
   d7760:	7260      	strb	r0, [r4, #9]
   d7762:	d503      	bpl.n	d776c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d7764:	3d01      	subs	r5, #1
   d7766:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d776a:	d1f5      	bne.n	d7758 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d776c:	b003      	add	sp, #12
   d776e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7770 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7770:	b570      	push	{r4, r5, r6, lr}
   d7772:	4604      	mov	r4, r0
   d7774:	460d      	mov	r5, r1
   d7776:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7778:	2137      	movs	r1, #55	; 0x37
   d777a:	2200      	movs	r2, #0
   d777c:	f7ff ffc6 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7780:	4632      	mov	r2, r6
   d7782:	4629      	mov	r1, r5
   d7784:	4620      	mov	r0, r4
  }
   d7786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d778a:	f7ff bfbf 	b.w	d770c <_ZN9SdSpiCard11cardCommandEhm>
	...

000d7790 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d7794:	2500      	movs	r5, #0
   d7796:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d7798:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d779a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d779c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d779e:	4604      	mov	r4, r0
   d77a0:	4690      	mov	r8, r2
   d77a2:	461e      	mov	r6, r3
   d77a4:	f000 fae8 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d77a8:	4641      	mov	r1, r8
   d77aa:	4607      	mov	r7, r0
   d77ac:	6860      	ldr	r0, [r4, #4]
   d77ae:	f000 f9bb 	bl	d7b28 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d77b2:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d77b4:	4a49      	ldr	r2, [pc, #292]	; (d78dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d77b6:	721d      	strb	r5, [r3, #8]
   d77b8:	2501      	movs	r5, #1
   d77ba:	60da      	str	r2, [r3, #12]
   d77bc:	821d      	strh	r5, [r3, #16]
  spiStart();
   d77be:	4620      	mov	r0, r4
   d77c0:	f7ff ff3c 	bl	d763c <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d77c4:	6863      	ldr	r3, [r4, #4]
   d77c6:	4629      	mov	r1, r5
   d77c8:	7d18      	ldrb	r0, [r3, #20]
   d77ca:	f002 fc5a 	bl	da082 <digitalWrite>
   d77ce:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d77d0:	6860      	ldr	r0, [r4, #4]
   d77d2:	21ff      	movs	r1, #255	; 0xff
   d77d4:	3d01      	subs	r5, #1
   d77d6:	f000 f9d5 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d77da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d77de:	d1f7      	bne.n	d77d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d77e0:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d77e2:	4629      	mov	r1, r5
   d77e4:	7d18      	ldrb	r0, [r3, #20]
   d77e6:	f002 fc4c 	bl	da082 <digitalWrite>
  }
   d77ea:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d77ec:	2200      	movs	r2, #0
   d77ee:	4611      	mov	r1, r2
   d77f0:	4620      	mov	r0, r4
   d77f2:	f7ff ff8b 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d77f6:	2801      	cmp	r0, #1
   d77f8:	4680      	mov	r8, r0
   d77fa:	d018      	beq.n	d782e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d77fc:	3d01      	subs	r5, #1
   d77fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7802:	d107      	bne.n	d7814 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d7804:	2320      	movs	r3, #32
  spiStop();
   d7806:	4620      	mov	r0, r4
   d7808:	7023      	strb	r3, [r4, #0]
   d780a:	f7ff ff26 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d780e:	2000      	movs	r0, #0
}
   d7810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d7814:	6860      	ldr	r0, [r4, #4]
   d7816:	21fd      	movs	r1, #253	; 0xfd
   d7818:	f000 f9b4 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
   d781c:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d7820:	6860      	ldr	r0, [r4, #4]
   d7822:	f000 f994 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d7826:	f1b8 0801 	subs.w	r8, r8, #1
   d782a:	d1f9      	bne.n	d7820 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d782c:	e7de      	b.n	d77ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d782e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7832:	2108      	movs	r1, #8
   d7834:	4620      	mov	r0, r4
   d7836:	f7ff ff69 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d783a:	2805      	cmp	r0, #5
   d783c:	d114      	bne.n	d7868 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d783e:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7842:	2500      	movs	r5, #0
   d7844:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d7846:	462a      	mov	r2, r5
   d7848:	2129      	movs	r1, #41	; 0x29
   d784a:	4620      	mov	r0, r4
   d784c:	f7ff ff90 	bl	d7770 <_ZN9SdSpiCard8cardAcmdEhm>
   d7850:	4602      	mov	r2, r0
   d7852:	b1d8      	cbz	r0, d788c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7854:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7858:	4639      	mov	r1, r7
   d785a:	4620      	mov	r0, r4
   d785c:	f7ff feca 	bl	d75f4 <_ZN9SdSpiCard10isTimedOutEtt>
   d7860:	2800      	cmp	r0, #0
   d7862:	d0f0      	beq.n	d7846 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d7864:	2343      	movs	r3, #67	; 0x43
   d7866:	e7ce      	b.n	d7806 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d7868:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d786a:	6860      	ldr	r0, [r4, #4]
   d786c:	f000 f96f 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
   d7870:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d7872:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d7876:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d7878:	d1f7      	bne.n	d786a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d787a:	28aa      	cmp	r0, #170	; 0xaa
   d787c:	d104      	bne.n	d7888 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d787e:	2302      	movs	r3, #2
   d7880:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7882:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d7886:	e7dd      	b.n	d7844 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d7888:	2325      	movs	r3, #37	; 0x25
   d788a:	e7bc      	b.n	d7806 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d788c:	7aa3      	ldrb	r3, [r4, #10]
   d788e:	2b02      	cmp	r3, #2
   d7890:	d118      	bne.n	d78c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d7892:	213a      	movs	r1, #58	; 0x3a
   d7894:	4620      	mov	r0, r4
   d7896:	f7ff ff39 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d789a:	b108      	cbz	r0, d78a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d789c:	2337      	movs	r3, #55	; 0x37
   d789e:	e7b2      	b.n	d7806 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d78a0:	6860      	ldr	r0, [r4, #4]
   d78a2:	f000 f954 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d78a6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d78aa:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d78ac:	bf04      	itt	eq
   d78ae:	2303      	moveq	r3, #3
   d78b0:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d78b2:	6860      	ldr	r0, [r4, #4]
   d78b4:	f000 f94b 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
   d78b8:	6860      	ldr	r0, [r4, #4]
   d78ba:	f000 f948 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
   d78be:	6860      	ldr	r0, [r4, #4]
   d78c0:	f000 f945 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d78c4:	4620      	mov	r0, r4
   d78c6:	f7ff fec8 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d78ca:	6863      	ldr	r3, [r4, #4]
   d78cc:	7930      	ldrb	r0, [r6, #4]
   d78ce:	68b1      	ldr	r1, [r6, #8]
   d78d0:	89b2      	ldrh	r2, [r6, #12]
   d78d2:	821a      	strh	r2, [r3, #16]
   d78d4:	7218      	strb	r0, [r3, #8]
   d78d6:	60d9      	str	r1, [r3, #12]
  return true;
   d78d8:	2001      	movs	r0, #1
   d78da:	e799      	b.n	d7810 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d78dc:	0003d090 	.word	0x0003d090

000d78e0 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78e0:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d78e2:	7a83      	ldrb	r3, [r0, #10]
   d78e4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d78e6:	bf18      	it	ne
   d78e8:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78ea:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d78ec:	460a      	mov	r2, r1
   d78ee:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78f0:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d78f2:	f7ff ff0b 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d78f6:	b130      	cbz	r0, d7906 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d78f8:	2330      	movs	r3, #48	; 0x30
   d78fa:	7023      	strb	r3, [r4, #0]
  spiStop();
   d78fc:	4620      	mov	r0, r4
   d78fe:	f7ff feac 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7902:	2500      	movs	r5, #0
   d7904:	e00b      	b.n	d791e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d7906:	4629      	mov	r1, r5
   d7908:	f44f 7200 	mov.w	r2, #512	; 0x200
   d790c:	4620      	mov	r0, r4
   d790e:	f7ff feb7 	bl	d7680 <_ZN9SdSpiCard8readDataEPhj>
   d7912:	4605      	mov	r5, r0
   d7914:	2800      	cmp	r0, #0
   d7916:	d0f1      	beq.n	d78fc <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d7918:	4620      	mov	r0, r4
   d791a:	f7ff fe9e 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
}
   d791e:	4628      	mov	r0, r5
   d7920:	bd38      	pop	{r3, r4, r5, pc}

000d7922 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7922:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7924:	7a83      	ldrb	r3, [r0, #10]
   d7926:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7928:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d792a:	bf18      	it	ne
   d792c:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d792e:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7930:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d7932:	f7ff feeb 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d7936:	b130      	cbz	r0, d7946 <_ZN9SdSpiCard9readStartEm+0x24>
   d7938:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d793a:	4620      	mov	r0, r4
   d793c:	7023      	strb	r3, [r4, #0]
   d793e:	f7ff fe8c 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7942:	2000      	movs	r0, #0
}
   d7944:	bd10      	pop	{r4, pc}
  return true;
   d7946:	2001      	movs	r0, #1
   d7948:	e7fc      	b.n	d7944 <_ZN9SdSpiCard9readStartEm+0x22>

000d794a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d794a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d794c:	2200      	movs	r2, #0
   d794e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d7950:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7952:	f7ff fedb 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d7956:	b130      	cbz	r0, d7966 <_ZN9SdSpiCard8readStopEv+0x1c>
   d7958:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d795a:	4620      	mov	r0, r4
   d795c:	7023      	strb	r3, [r4, #0]
   d795e:	f7ff fe7c 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7962:	2000      	movs	r0, #0
}
   d7964:	bd10      	pop	{r4, pc}
  spiStop();
   d7966:	4620      	mov	r0, r4
   d7968:	f7ff fe77 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d796c:	2001      	movs	r0, #1
   d796e:	e7f9      	b.n	d7964 <_ZN9SdSpiCard8readStopEv+0x1a>

000d7970 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7972:	4604      	mov	r4, r0
   d7974:	4616      	mov	r6, r2
   d7976:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7978:	f7ff ffd3 	bl	d7922 <_ZN9SdSpiCard9readStartEm>
   d797c:	b168      	cbz	r0, d799a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d797e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7980:	b2ab      	uxth	r3, r5
   d7982:	429f      	cmp	r7, r3
   d7984:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d7988:	d909      	bls.n	d799e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d798a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d798e:	4620      	mov	r0, r4
   d7990:	f7ff fe76 	bl	d7680 <_ZN9SdSpiCard8readDataEPhj>
   d7994:	3501      	adds	r5, #1
   d7996:	2800      	cmp	r0, #0
   d7998:	d1f2      	bne.n	d7980 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d799a:	2000      	movs	r0, #0
   d799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d799e:	4620      	mov	r0, r4
}
   d79a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d79a4:	f7ff bfd1 	b.w	d794a <_ZN9SdSpiCard8readStopEv>

000d79a8 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d79a8:	b538      	push	{r3, r4, r5, lr}
   d79aa:	4604      	mov	r4, r0
   d79ac:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d79ae:	6840      	ldr	r0, [r0, #4]
   d79b0:	f000 f8e8 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d79b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d79b8:	6860      	ldr	r0, [r4, #4]
   d79ba:	4629      	mov	r1, r5
   d79bc:	f000 f8e6 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d79c0:	6860      	ldr	r0, [r4, #4]
   d79c2:	21ff      	movs	r1, #255	; 0xff
   d79c4:	f000 f8de 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
   d79c8:	6860      	ldr	r0, [r4, #4]
   d79ca:	21ff      	movs	r1, #255	; 0xff
   d79cc:	f000 f8da 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d79d0:	6860      	ldr	r0, [r4, #4]
   d79d2:	f000 f8bc 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d79d6:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d79d8:	f000 001f 	and.w	r0, r0, #31
   d79dc:	2805      	cmp	r0, #5
   d79de:	d006      	beq.n	d79ee <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d79e0:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d79e2:	4620      	mov	r0, r4
   d79e4:	7023      	strb	r3, [r4, #0]
   d79e6:	f7ff fe38 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d79ea:	2000      	movs	r0, #0
}
   d79ec:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d79ee:	2001      	movs	r0, #1
   d79f0:	e7fc      	b.n	d79ec <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d79f2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d79f2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d79f4:	7a83      	ldrb	r3, [r0, #10]
   d79f6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d79f8:	bf18      	it	ne
   d79fa:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d79fc:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d79fe:	460a      	mov	r2, r1
   d7a00:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a02:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d7a04:	f7ff fe82 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d7a08:	4606      	mov	r6, r0
   d7a0a:	b130      	cbz	r0, d7a1a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d7a0c:	2332      	movs	r3, #50	; 0x32
   d7a0e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7a10:	4620      	mov	r0, r4
   d7a12:	f7ff fe22 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a16:	2500      	movs	r5, #0
   d7a18:	e01f      	b.n	d7a5a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d7a1a:	462a      	mov	r2, r5
   d7a1c:	21fe      	movs	r1, #254	; 0xfe
   d7a1e:	4620      	mov	r0, r4
   d7a20:	f7ff ffc2 	bl	d79a8 <_ZN9SdSpiCard9writeDataEhPKh>
   d7a24:	2800      	cmp	r0, #0
   d7a26:	d0f3      	beq.n	d7a10 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a28:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7a2c:	4620      	mov	r0, r4
   d7a2e:	f7ff fe58 	bl	d76e2 <_ZN9SdSpiCard11waitNotBusyEt>
   d7a32:	4605      	mov	r5, r0
   d7a34:	b908      	cbnz	r0, d7a3a <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d7a36:	235a      	movs	r3, #90	; 0x5a
   d7a38:	e7e9      	b.n	d7a0e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7a3a:	4632      	mov	r2, r6
   d7a3c:	210d      	movs	r1, #13
   d7a3e:	4620      	mov	r0, r4
   d7a40:	f7ff fe64 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d7a44:	b108      	cbz	r0, d7a4a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d7a46:	2329      	movs	r3, #41	; 0x29
   d7a48:	e7e1      	b.n	d7a0e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d7a4a:	6860      	ldr	r0, [r4, #4]
   d7a4c:	f000 f87f 	bl	d7b4e <_ZN14SdSpiAltDriver7receiveEv>
   d7a50:	2800      	cmp	r0, #0
   d7a52:	d1f8      	bne.n	d7a46 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d7a54:	4620      	mov	r0, r4
   d7a56:	f7ff fe00 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
}
   d7a5a:	4628      	mov	r0, r5
   d7a5c:	bd70      	pop	{r4, r5, r6, pc}

000d7a5e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a5e:	b513      	push	{r0, r1, r4, lr}
   d7a60:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a62:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a66:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a68:	f7ff fe3b 	bl	d76e2 <_ZN9SdSpiCard11waitNotBusyEt>
   d7a6c:	9a01      	ldr	r2, [sp, #4]
   d7a6e:	b930      	cbnz	r0, d7a7e <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d7a70:	235b      	movs	r3, #91	; 0x5b
   d7a72:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7a74:	4620      	mov	r0, r4
   d7a76:	f7ff fdf0 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a7a:	2000      	movs	r0, #0
   d7a7c:	e005      	b.n	d7a8a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7a7e:	21fc      	movs	r1, #252	; 0xfc
   d7a80:	4620      	mov	r0, r4
   d7a82:	f7ff ff91 	bl	d79a8 <_ZN9SdSpiCard9writeDataEhPKh>
   d7a86:	2800      	cmp	r0, #0
   d7a88:	d0f4      	beq.n	d7a74 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d7a8a:	b002      	add	sp, #8
   d7a8c:	bd10      	pop	{r4, pc}

000d7a8e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a8e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7a90:	7a83      	ldrb	r3, [r0, #10]
   d7a92:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a94:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7a96:	bf18      	it	ne
   d7a98:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7a9a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a9c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d7a9e:	f7ff fe35 	bl	d770c <_ZN9SdSpiCard11cardCommandEhm>
   d7aa2:	b130      	cbz	r0, d7ab2 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7aa4:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7aa6:	4620      	mov	r0, r4
   d7aa8:	7023      	strb	r3, [r4, #0]
   d7aaa:	f7ff fdd6 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7aae:	2000      	movs	r0, #0
}
   d7ab0:	bd10      	pop	{r4, pc}
  return true;
   d7ab2:	2001      	movs	r0, #1
   d7ab4:	e7fc      	b.n	d7ab0 <_ZN9SdSpiCard10writeStartEm+0x22>

000d7ab6 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7ab6:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ab8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d7abc:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7abe:	f7ff fe10 	bl	d76e2 <_ZN9SdSpiCard11waitNotBusyEt>
   d7ac2:	4605      	mov	r5, r0
   d7ac4:	b930      	cbnz	r0, d7ad4 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d7ac6:	2356      	movs	r3, #86	; 0x56
   d7ac8:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d7aca:	4620      	mov	r0, r4
   d7acc:	f7ff fdc5 	bl	d765a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7ad0:	4628      	mov	r0, r5
   d7ad2:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d7ad4:	6860      	ldr	r0, [r4, #4]
   d7ad6:	21fd      	movs	r1, #253	; 0xfd
   d7ad8:	f000 f854 	bl	d7b84 <_ZN14SdSpiAltDriver4sendEh>
   d7adc:	e7f5      	b.n	d7aca <_ZN9SdSpiCard9writeStopEv+0x14>

000d7ade <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ae0:	4604      	mov	r4, r0
   d7ae2:	4616      	mov	r6, r2
   d7ae4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7ae6:	f7ff ffd2 	bl	d7a8e <_ZN9SdSpiCard10writeStartEm>
   d7aea:	b170      	cbz	r0, d7b0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7aec:	2500      	movs	r5, #0
   d7aee:	42bd      	cmp	r5, r7
   d7af0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d7af4:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d7af6:	d004      	beq.n	d7b02 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7af8:	f7ff ffb1 	bl	d7a5e <_ZN9SdSpiCard9writeDataEPKh>
   d7afc:	b128      	cbz	r0, d7b0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7afe:	3501      	adds	r5, #1
   d7b00:	e7f5      	b.n	d7aee <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d7b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d7b06:	f7ff bfd6 	b.w	d7ab6 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d7b0a:	4620      	mov	r0, r4
   d7b0c:	f7ff fda5 	bl	d765a <_ZN9SdSpiCard7spiStopEv>
}
   d7b10:	2000      	movs	r0, #0
   d7b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b14 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7b14:	4b01      	ldr	r3, [pc, #4]	; (d7b1c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7b16:	2201      	movs	r2, #1
   d7b18:	701a      	strb	r2, [r3, #0]
}
   d7b1a:	4770      	bx	lr
   d7b1c:	2003e548 	.word	0x2003e548

000d7b20 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7b20:	1d01      	adds	r1, r0, #4
   d7b22:	6800      	ldr	r0, [r0, #0]
   d7b24:	f001 bbb4 	b.w	d9290 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7b28 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7b28:	b510      	push	{r4, lr}
   d7b2a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7b2c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7b2e:	6800      	ldr	r0, [r0, #0]
   d7b30:	f001 fb70 	bl	d9214 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7b34:	7d20      	ldrb	r0, [r4, #20]
   d7b36:	2101      	movs	r1, #1
   d7b38:	f002 fa92 	bl	da060 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7b3c:	7d20      	ldrb	r0, [r4, #20]
   d7b3e:	2101      	movs	r1, #1
}
   d7b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d7b44:	f002 ba9d 	b.w	da082 <digitalWrite>

000d7b48 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7b48:	6800      	ldr	r0, [r0, #0]
   d7b4a:	f001 bb87 	b.w	d925c <_ZN8SPIClass14endTransactionEv>

000d7b4e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7b4e:	6800      	ldr	r0, [r0, #0]
   d7b50:	21ff      	movs	r1, #255	; 0xff
   d7b52:	f001 bc0b 	b.w	d936c <_ZN8SPIClass8transferEh>
	...

000d7b58 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b5a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b5c:	4a07      	ldr	r2, [pc, #28]	; (d7b7c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7b5e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7b60:	2500      	movs	r5, #0
   d7b62:	4c07      	ldr	r4, [pc, #28]	; (d7b80 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b64:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7b66:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b68:	460a      	mov	r2, r1
   d7b6a:	4629      	mov	r1, r5
   d7b6c:	f001 fc04 	bl	d9378 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7b70:	7823      	ldrb	r3, [r4, #0]
   d7b72:	2b00      	cmp	r3, #0
   d7b74:	d0fc      	beq.n	d7b70 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7b76:	2000      	movs	r0, #0
   d7b78:	b003      	add	sp, #12
   d7b7a:	bd30      	pop	{r4, r5, pc}
   d7b7c:	000d7b15 	.word	0x000d7b15
   d7b80:	2003e548 	.word	0x2003e548

000d7b84 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7b84:	6800      	ldr	r0, [r0, #0]
   d7b86:	f001 bbf1 	b.w	d936c <_ZN8SPIClass8transferEh>
	...

000d7b8c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b8e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7b90:	4a06      	ldr	r2, [pc, #24]	; (d7bac <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7b92:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7b94:	2500      	movs	r5, #0
   d7b96:	4c06      	ldr	r4, [pc, #24]	; (d7bb0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7b98:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7b9a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7b9c:	462a      	mov	r2, r5
   d7b9e:	f001 fbeb 	bl	d9378 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d7ba2:	7823      	ldrb	r3, [r4, #0]
   d7ba4:	2b00      	cmp	r3, #0
   d7ba6:	d0fc      	beq.n	d7ba2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7ba8:	b003      	add	sp, #12
   d7baa:	bd30      	pop	{r4, r5, pc}
   d7bac:	000d7b15 	.word	0x000d7b15
   d7bb0:	2003e548 	.word	0x2003e548

000d7bb4 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d7bb4:	b510      	push	{r4, lr}
   d7bb6:	4b06      	ldr	r3, [pc, #24]	; (d7bd0 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d7bb8:	6003      	str	r3, [r0, #0]
   d7bba:	4604      	mov	r4, r0
	if (mutex) {
   d7bbc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d7bbe:	b108      	cbz	r0, d7bc4 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d7bc0:	f000 f8aa 	bl	d7d18 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d7bc4:	4620      	mov	r0, r4
   d7bc6:	f7fd fce1 	bl	d558c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d7bca:	4620      	mov	r0, r4
   d7bcc:	bd10      	pop	{r4, pc}
   d7bce:	bf00      	nop
   d7bd0:	000ddd0c 	.word	0x000ddd0c

000d7bd4 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d7bd4:	b510      	push	{r4, lr}
   d7bd6:	4604      	mov	r4, r0
}
   d7bd8:	f7ff ffec 	bl	d7bb4 <_ZN16OledWingAdafruitD1Ev>
   d7bdc:	4620      	mov	r0, r4
   d7bde:	2170      	movs	r1, #112	; 0x70
   d7be0:	f002 fab8 	bl	da154 <_ZdlPvj>
   d7be4:	4620      	mov	r0, r4
   d7be6:	bd10      	pop	{r4, pc}

000d7be8 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d7be8:	b530      	push	{r4, r5, lr}
   d7bea:	b085      	sub	sp, #20
   d7bec:	4604      	mov	r4, r0
   d7bee:	460d      	mov	r5, r1
   d7bf0:	f002 fa8c 	bl	da10c <_Z19__fetch_global_Wirev>
   d7bf4:	4a10      	ldr	r2, [pc, #64]	; (d7c38 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d7bf6:	4911      	ldr	r1, [pc, #68]	; (d7c3c <_ZN16OledWingAdafruitC1Ei+0x54>)
   d7bf8:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d7bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7c00:	2180      	movs	r1, #128	; 0x80
   d7c02:	4603      	mov	r3, r0
   d7c04:	9200      	str	r2, [sp, #0]
   d7c06:	4620      	mov	r0, r4
   d7c08:	2220      	movs	r2, #32
   d7c0a:	f7fd fd45 	bl	d5698 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d7c0e:	4b0c      	ldr	r3, [pc, #48]	; (d7c40 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d7c10:	6023      	str	r3, [r4, #0]
   d7c12:	2300      	movs	r3, #0
   d7c14:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d7c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7c1c:	f7fe f934 	bl	d5e88 <_ZN8DebounceC1Ev>
   d7c20:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7c24:	f7fe f930 	bl	d5e88 <_ZN8DebounceC1Ev>
   d7c28:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7c2c:	f7fe f92c 	bl	d5e88 <_ZN8DebounceC1Ev>
}
   d7c30:	4620      	mov	r0, r4
   d7c32:	b005      	add	sp, #20
   d7c34:	bd30      	pop	{r4, r5, pc}
   d7c36:	bf00      	nop
   d7c38:	00061a80 	.word	0x00061a80
   d7c3c:	000186a0 	.word	0x000186a0
   d7c40:	000ddd0c 	.word	0x000ddd0c

000d7c44 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d7c44:	b513      	push	{r0, r1, r4, lr}
   d7c46:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d7c48:	3050      	adds	r0, #80	; 0x50
   d7c4a:	f000 f85d 	bl	d7d08 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d7c4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7c50:	07d9      	lsls	r1, r3, #31
   d7c52:	d505      	bpl.n	d7c60 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d7c54:	2202      	movs	r2, #2
   d7c56:	2104      	movs	r1, #4
   d7c58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7c5c:	f7fe f928 	bl	d5eb0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d7c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7c62:	079a      	lsls	r2, r3, #30
   d7c64:	d505      	bpl.n	d7c72 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d7c66:	2200      	movs	r2, #0
   d7c68:	2103      	movs	r1, #3
   d7c6a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7c6e:	f7fe f91f 	bl	d5eb0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d7c72:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7c74:	075b      	lsls	r3, r3, #29
   d7c76:	d505      	bpl.n	d7c84 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d7c78:	2202      	movs	r2, #2
   d7c7a:	4611      	mov	r1, r2
   d7c7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7c80:	f7fe f916 	bl	d5eb0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d7c84:	2301      	movs	r3, #1
   d7c86:	9300      	str	r3, [sp, #0]
   d7c88:	223c      	movs	r2, #60	; 0x3c
   d7c8a:	2102      	movs	r1, #2
   d7c8c:	4620      	mov	r0, r4
   d7c8e:	f7fd fe03 	bl	d5898 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d7c92:	b002      	add	sp, #8
   d7c94:	bd10      	pop	{r4, pc}
	...

000d7c98 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b02      	ldr	r3, [pc, #8]	; (d7ca4 <cellular_signal+0xc>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	bd08      	pop	{r3, pc}
   d7ca4:	00030274 	.word	0x00030274

000d7ca8 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7ca8:	b508      	push	{r3, lr}
   d7caa:	4b02      	ldr	r3, [pc, #8]	; (d7cb4 <os_thread_yield+0xc>)
   d7cac:	681b      	ldr	r3, [r3, #0]
   d7cae:	68db      	ldr	r3, [r3, #12]
   d7cb0:	9301      	str	r3, [sp, #4]
   d7cb2:	bd08      	pop	{r3, pc}
   d7cb4:	00030248 	.word	0x00030248

000d7cb8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7cb8:	b508      	push	{r3, lr}
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <os_thread_scheduling+0xc>)
   d7cbc:	681b      	ldr	r3, [r3, #0]
   d7cbe:	69db      	ldr	r3, [r3, #28]
   d7cc0:	9301      	str	r3, [sp, #4]
   d7cc2:	bd08      	pop	{r3, pc}
   d7cc4:	00030248 	.word	0x00030248

000d7cc8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7cc8:	b508      	push	{r3, lr}
   d7cca:	4b02      	ldr	r3, [pc, #8]	; (d7cd4 <os_timer_create+0xc>)
   d7ccc:	681b      	ldr	r3, [r3, #0]
   d7cce:	6a1b      	ldr	r3, [r3, #32]
   d7cd0:	9301      	str	r3, [sp, #4]
   d7cd2:	bd08      	pop	{r3, pc}
   d7cd4:	00030248 	.word	0x00030248

000d7cd8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b02      	ldr	r3, [pc, #8]	; (d7ce4 <os_timer_destroy+0xc>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ce0:	9301      	str	r3, [sp, #4]
   d7ce2:	bd08      	pop	{r3, pc}
   d7ce4:	00030248 	.word	0x00030248

000d7ce8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <os_timer_get_id+0xc>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	bd08      	pop	{r3, pc}
   d7cf4:	00030248 	.word	0x00030248

000d7cf8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <os_timer_change+0xc>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7d00:	9301      	str	r3, [sp, #4]
   d7d02:	bd08      	pop	{r3, pc}
   d7d04:	00030248 	.word	0x00030248

000d7d08 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7d08:	b508      	push	{r3, lr}
   d7d0a:	4b02      	ldr	r3, [pc, #8]	; (d7d14 <os_mutex_create+0xc>)
   d7d0c:	681b      	ldr	r3, [r3, #0]
   d7d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d10:	9301      	str	r3, [sp, #4]
   d7d12:	bd08      	pop	{r3, pc}
   d7d14:	00030248 	.word	0x00030248

000d7d18 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d7d18:	b508      	push	{r3, lr}
   d7d1a:	4b02      	ldr	r3, [pc, #8]	; (d7d24 <os_mutex_destroy+0xc>)
   d7d1c:	681b      	ldr	r3, [r3, #0]
   d7d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7d20:	9301      	str	r3, [sp, #4]
   d7d22:	bd08      	pop	{r3, pc}
   d7d24:	00030248 	.word	0x00030248

000d7d28 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7d28:	b508      	push	{r3, lr}
   d7d2a:	4b02      	ldr	r3, [pc, #8]	; (d7d34 <os_mutex_recursive_create+0xc>)
   d7d2c:	681b      	ldr	r3, [r3, #0]
   d7d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d30:	9301      	str	r3, [sp, #4]
   d7d32:	bd08      	pop	{r3, pc}
   d7d34:	00030248 	.word	0x00030248

000d7d38 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7d38:	b508      	push	{r3, lr}
   d7d3a:	4b02      	ldr	r3, [pc, #8]	; (d7d44 <os_timer_set_id+0xc>)
   d7d3c:	681b      	ldr	r3, [r3, #0]
   d7d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	bd08      	pop	{r3, pc}
   d7d44:	00030248 	.word	0x00030248

000d7d48 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7d48:	b508      	push	{r3, lr}
   d7d4a:	4b02      	ldr	r3, [pc, #8]	; (d7d54 <HAL_RNG_GetRandomNumber+0xc>)
   d7d4c:	681b      	ldr	r3, [r3, #0]
   d7d4e:	685b      	ldr	r3, [r3, #4]
   d7d50:	9301      	str	r3, [sp, #4]
   d7d52:	bd08      	pop	{r3, pc}
   d7d54:	00030218 	.word	0x00030218

000d7d58 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7d58:	b508      	push	{r3, lr}
   d7d5a:	4b02      	ldr	r3, [pc, #8]	; (d7d64 <HAL_Delay_Microseconds+0xc>)
   d7d5c:	681b      	ldr	r3, [r3, #0]
   d7d5e:	68db      	ldr	r3, [r3, #12]
   d7d60:	9301      	str	r3, [sp, #4]
   d7d62:	bd08      	pop	{r3, pc}
   d7d64:	00030218 	.word	0x00030218

000d7d68 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7d68:	b508      	push	{r3, lr}
   d7d6a:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7d6c:	681b      	ldr	r3, [r3, #0]
   d7d6e:	691b      	ldr	r3, [r3, #16]
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	00030218 	.word	0x00030218

000d7d78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d78:	b508      	push	{r3, lr}
   d7d7a:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d7c:	681b      	ldr	r3, [r3, #0]
   d7d7e:	695b      	ldr	r3, [r3, #20]
   d7d80:	9301      	str	r3, [sp, #4]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	00030218 	.word	0x00030218

000d7d88 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <hal_rtc_time_is_valid+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	00030218 	.word	0x00030218

000d7d98 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b02      	ldr	r3, [pc, #8]	; (d7da4 <hal_rtc_get_time+0xc>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7da0:	9301      	str	r3, [sp, #4]
   d7da2:	bd08      	pop	{r3, pc}
   d7da4:	00030218 	.word	0x00030218

000d7da8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7da8:	b508      	push	{r3, lr}
   d7daa:	4b02      	ldr	r3, [pc, #8]	; (d7db4 <HAL_Pin_Mode+0xc>)
   d7dac:	681b      	ldr	r3, [r3, #0]
   d7dae:	689b      	ldr	r3, [r3, #8]
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	0003022c 	.word	0x0003022c

000d7db8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7db8:	b508      	push	{r3, lr}
   d7dba:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <HAL_Get_Pin_Mode+0xc>)
   d7dbc:	681b      	ldr	r3, [r3, #0]
   d7dbe:	68db      	ldr	r3, [r3, #12]
   d7dc0:	9301      	str	r3, [sp, #4]
   d7dc2:	bd08      	pop	{r3, pc}
   d7dc4:	0003022c 	.word	0x0003022c

000d7dc8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7dc8:	b508      	push	{r3, lr}
   d7dca:	4b02      	ldr	r3, [pc, #8]	; (d7dd4 <HAL_GPIO_Write+0xc>)
   d7dcc:	681b      	ldr	r3, [r3, #0]
   d7dce:	691b      	ldr	r3, [r3, #16]
   d7dd0:	9301      	str	r3, [sp, #4]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	0003022c 	.word	0x0003022c

000d7dd8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7dd8:	b508      	push	{r3, lr}
   d7dda:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <HAL_GPIO_Read+0xc>)
   d7ddc:	681b      	ldr	r3, [r3, #0]
   d7dde:	695b      	ldr	r3, [r3, #20]
   d7de0:	9301      	str	r3, [sp, #4]
   d7de2:	bd08      	pop	{r3, pc}
   d7de4:	0003022c 	.word	0x0003022c

000d7de8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7de8:	b508      	push	{r3, lr}
   d7dea:	4b02      	ldr	r3, [pc, #8]	; (d7df4 <HAL_Interrupts_Attach+0xc>)
   d7dec:	681b      	ldr	r3, [r3, #0]
   d7dee:	699b      	ldr	r3, [r3, #24]
   d7df0:	9301      	str	r3, [sp, #4]
   d7df2:	bd08      	pop	{r3, pc}
   d7df4:	0003022c 	.word	0x0003022c

000d7df8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <HAL_Interrupts_Detach+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	69db      	ldr	r3, [r3, #28]
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	0003022c 	.word	0x0003022c

000d7e08 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <hal_i2c_set_speed+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	681b      	ldr	r3, [r3, #0]
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	00030228 	.word	0x00030228

000d7e18 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <hal_i2c_begin+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	68db      	ldr	r3, [r3, #12]
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	00030228 	.word	0x00030228

000d7e28 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <hal_i2c_begin_transmission+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	699b      	ldr	r3, [r3, #24]
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	00030228 	.word	0x00030228

000d7e38 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <hal_i2c_end_transmission+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	69db      	ldr	r3, [r3, #28]
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	00030228 	.word	0x00030228

000d7e48 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7e48:	b508      	push	{r3, lr}
   d7e4a:	4b02      	ldr	r3, [pc, #8]	; (d7e54 <hal_i2c_write+0xc>)
   d7e4c:	681b      	ldr	r3, [r3, #0]
   d7e4e:	6a1b      	ldr	r3, [r3, #32]
   d7e50:	9301      	str	r3, [sp, #4]
   d7e52:	bd08      	pop	{r3, pc}
   d7e54:	00030228 	.word	0x00030228

000d7e58 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7e58:	b508      	push	{r3, lr}
   d7e5a:	4b02      	ldr	r3, [pc, #8]	; (d7e64 <hal_i2c_available+0xc>)
   d7e5c:	681b      	ldr	r3, [r3, #0]
   d7e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e60:	9301      	str	r3, [sp, #4]
   d7e62:	bd08      	pop	{r3, pc}
   d7e64:	00030228 	.word	0x00030228

000d7e68 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7e68:	b508      	push	{r3, lr}
   d7e6a:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <hal_i2c_read+0xc>)
   d7e6c:	681b      	ldr	r3, [r3, #0]
   d7e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e70:	9301      	str	r3, [sp, #4]
   d7e72:	bd08      	pop	{r3, pc}
   d7e74:	00030228 	.word	0x00030228

000d7e78 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7e78:	b508      	push	{r3, lr}
   d7e7a:	4b02      	ldr	r3, [pc, #8]	; (d7e84 <hal_i2c_peek+0xc>)
   d7e7c:	681b      	ldr	r3, [r3, #0]
   d7e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e80:	9301      	str	r3, [sp, #4]
   d7e82:	bd08      	pop	{r3, pc}
   d7e84:	00030228 	.word	0x00030228

000d7e88 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7e88:	b508      	push	{r3, lr}
   d7e8a:	4b02      	ldr	r3, [pc, #8]	; (d7e94 <hal_i2c_flush+0xc>)
   d7e8c:	681b      	ldr	r3, [r3, #0]
   d7e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e90:	9301      	str	r3, [sp, #4]
   d7e92:	bd08      	pop	{r3, pc}
   d7e94:	00030228 	.word	0x00030228

000d7e98 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7e98:	b508      	push	{r3, lr}
   d7e9a:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <hal_i2c_is_enabled+0xc>)
   d7e9c:	681b      	ldr	r3, [r3, #0]
   d7e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7ea0:	9301      	str	r3, [sp, #4]
   d7ea2:	bd08      	pop	{r3, pc}
   d7ea4:	00030228 	.word	0x00030228

000d7ea8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7ea8:	b508      	push	{r3, lr}
   d7eaa:	4b02      	ldr	r3, [pc, #8]	; (d7eb4 <hal_i2c_init+0xc>)
   d7eac:	681b      	ldr	r3, [r3, #0]
   d7eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7eb0:	9301      	str	r3, [sp, #4]
   d7eb2:	bd08      	pop	{r3, pc}
   d7eb4:	00030228 	.word	0x00030228

000d7eb8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7eb8:	b508      	push	{r3, lr}
   d7eba:	4b02      	ldr	r3, [pc, #8]	; (d7ec4 <inet_inet_ntop+0xc>)
   d7ebc:	681b      	ldr	r3, [r3, #0]
   d7ebe:	695b      	ldr	r3, [r3, #20]
   d7ec0:	9301      	str	r3, [sp, #4]
   d7ec2:	bd08      	pop	{r3, pc}
   d7ec4:	00030264 	.word	0x00030264

000d7ec8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7ec8:	b508      	push	{r3, lr}
   d7eca:	4b02      	ldr	r3, [pc, #8]	; (d7ed4 <netdb_freeaddrinfo+0xc>)
   d7ecc:	681b      	ldr	r3, [r3, #0]
   d7ece:	689b      	ldr	r3, [r3, #8]
   d7ed0:	9301      	str	r3, [sp, #4]
   d7ed2:	bd08      	pop	{r3, pc}
   d7ed4:	00030268 	.word	0x00030268

000d7ed8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7ed8:	b508      	push	{r3, lr}
   d7eda:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <netdb_getaddrinfo+0xc>)
   d7edc:	681b      	ldr	r3, [r3, #0]
   d7ede:	68db      	ldr	r3, [r3, #12]
   d7ee0:	9301      	str	r3, [sp, #4]
   d7ee2:	bd08      	pop	{r3, pc}
   d7ee4:	00030268 	.word	0x00030268

000d7ee8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7ee8:	b508      	push	{r3, lr}
   d7eea:	4b02      	ldr	r3, [pc, #8]	; (d7ef4 <hal_spi_begin+0xc>)
   d7eec:	681b      	ldr	r3, [r3, #0]
   d7eee:	681b      	ldr	r3, [r3, #0]
   d7ef0:	9301      	str	r3, [sp, #4]
   d7ef2:	bd08      	pop	{r3, pc}
   d7ef4:	00030230 	.word	0x00030230

000d7ef8 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d7ef8:	b508      	push	{r3, lr}
   d7efa:	4b02      	ldr	r3, [pc, #8]	; (d7f04 <hal_spi_set_data_mode+0xc>)
   d7efc:	681b      	ldr	r3, [r3, #0]
   d7efe:	68db      	ldr	r3, [r3, #12]
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	bd08      	pop	{r3, pc}
   d7f04:	00030230 	.word	0x00030230

000d7f08 <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7f08:	b508      	push	{r3, lr}
   d7f0a:	4b02      	ldr	r3, [pc, #8]	; (d7f14 <hal_spi_transfer+0xc>)
   d7f0c:	681b      	ldr	r3, [r3, #0]
   d7f0e:	695b      	ldr	r3, [r3, #20]
   d7f10:	9301      	str	r3, [sp, #4]
   d7f12:	bd08      	pop	{r3, pc}
   d7f14:	00030230 	.word	0x00030230

000d7f18 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7f18:	b508      	push	{r3, lr}
   d7f1a:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <hal_spi_init+0xc>)
   d7f1c:	681b      	ldr	r3, [r3, #0]
   d7f1e:	69db      	ldr	r3, [r3, #28]
   d7f20:	9301      	str	r3, [sp, #4]
   d7f22:	bd08      	pop	{r3, pc}
   d7f24:	00030230 	.word	0x00030230

000d7f28 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7f28:	b508      	push	{r3, lr}
   d7f2a:	4b02      	ldr	r3, [pc, #8]	; (d7f34 <hal_spi_is_enabled+0xc>)
   d7f2c:	681b      	ldr	r3, [r3, #0]
   d7f2e:	6a1b      	ldr	r3, [r3, #32]
   d7f30:	9301      	str	r3, [sp, #4]
   d7f32:	bd08      	pop	{r3, pc}
   d7f34:	00030230 	.word	0x00030230

000d7f38 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <hal_spi_info+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	00030230 	.word	0x00030230

000d7f48 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <hal_spi_transfer_dma+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	00030230 	.word	0x00030230

000d7f58 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <hal_spi_transfer_dma_status+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	00030230 	.word	0x00030230

000d7f68 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <hal_spi_set_settings+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	00030230 	.word	0x00030230

000d7f78 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <hal_spi_acquire+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	00030230 	.word	0x00030230

000d7f88 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <hal_spi_release+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	00030230 	.word	0x00030230

000d7f98 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <hal_usart_init+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	681b      	ldr	r3, [r3, #0]
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	0003023c 	.word	0x0003023c

000d7fa8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <hal_usart_write+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	68db      	ldr	r3, [r3, #12]
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	0003023c 	.word	0x0003023c

000d7fb8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <hal_usart_available+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	691b      	ldr	r3, [r3, #16]
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	0003023c 	.word	0x0003023c

000d7fc8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b02      	ldr	r3, [pc, #8]	; (d7fd4 <hal_usart_read+0xc>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	695b      	ldr	r3, [r3, #20]
   d7fd0:	9301      	str	r3, [sp, #4]
   d7fd2:	bd08      	pop	{r3, pc}
   d7fd4:	0003023c 	.word	0x0003023c

000d7fd8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7fd8:	b508      	push	{r3, lr}
   d7fda:	4b02      	ldr	r3, [pc, #8]	; (d7fe4 <hal_usart_peek+0xc>)
   d7fdc:	681b      	ldr	r3, [r3, #0]
   d7fde:	699b      	ldr	r3, [r3, #24]
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	bd08      	pop	{r3, pc}
   d7fe4:	0003023c 	.word	0x0003023c

000d7fe8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7fe8:	b508      	push	{r3, lr}
   d7fea:	4b02      	ldr	r3, [pc, #8]	; (d7ff4 <hal_usart_flush+0xc>)
   d7fec:	681b      	ldr	r3, [r3, #0]
   d7fee:	69db      	ldr	r3, [r3, #28]
   d7ff0:	9301      	str	r3, [sp, #4]
   d7ff2:	bd08      	pop	{r3, pc}
   d7ff4:	0003023c 	.word	0x0003023c

000d7ff8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7ff8:	b508      	push	{r3, lr}
   d7ffa:	4b02      	ldr	r3, [pc, #8]	; (d8004 <hal_usart_is_enabled+0xc>)
   d7ffc:	681b      	ldr	r3, [r3, #0]
   d7ffe:	6a1b      	ldr	r3, [r3, #32]
   d8000:	9301      	str	r3, [sp, #4]
   d8002:	bd08      	pop	{r3, pc}
   d8004:	0003023c 	.word	0x0003023c

000d8008 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8008:	b508      	push	{r3, lr}
   d800a:	4b02      	ldr	r3, [pc, #8]	; (d8014 <hal_usart_available_data_for_write+0xc>)
   d800c:	681b      	ldr	r3, [r3, #0]
   d800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8010:	9301      	str	r3, [sp, #4]
   d8012:	bd08      	pop	{r3, pc}
   d8014:	0003023c 	.word	0x0003023c

000d8018 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d8018:	b508      	push	{r3, lr}
   d801a:	4b02      	ldr	r3, [pc, #8]	; (d8024 <hal_usart_begin_config+0xc>)
   d801c:	681b      	ldr	r3, [r3, #0]
   d801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8020:	9301      	str	r3, [sp, #4]
   d8022:	bd08      	pop	{r3, pc}
   d8024:	0003023c 	.word	0x0003023c

000d8028 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8028:	b508      	push	{r3, lr}
   d802a:	4b02      	ldr	r3, [pc, #8]	; (d8034 <HAL_USB_USART_Init+0xc>)
   d802c:	681b      	ldr	r3, [r3, #0]
   d802e:	681b      	ldr	r3, [r3, #0]
   d8030:	9301      	str	r3, [sp, #4]
   d8032:	bd08      	pop	{r3, pc}
   d8034:	0003024c 	.word	0x0003024c

000d8038 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8038:	b508      	push	{r3, lr}
   d803a:	4b02      	ldr	r3, [pc, #8]	; (d8044 <HAL_USB_USART_Begin+0xc>)
   d803c:	681b      	ldr	r3, [r3, #0]
   d803e:	685b      	ldr	r3, [r3, #4]
   d8040:	9301      	str	r3, [sp, #4]
   d8042:	bd08      	pop	{r3, pc}
   d8044:	0003024c 	.word	0x0003024c

000d8048 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8048:	b508      	push	{r3, lr}
   d804a:	4b02      	ldr	r3, [pc, #8]	; (d8054 <HAL_USB_USART_Available_Data+0xc>)
   d804c:	681b      	ldr	r3, [r3, #0]
   d804e:	691b      	ldr	r3, [r3, #16]
   d8050:	9301      	str	r3, [sp, #4]
   d8052:	bd08      	pop	{r3, pc}
   d8054:	0003024c 	.word	0x0003024c

000d8058 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8058:	b508      	push	{r3, lr}
   d805a:	4b02      	ldr	r3, [pc, #8]	; (d8064 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d805c:	681b      	ldr	r3, [r3, #0]
   d805e:	695b      	ldr	r3, [r3, #20]
   d8060:	9301      	str	r3, [sp, #4]
   d8062:	bd08      	pop	{r3, pc}
   d8064:	0003024c 	.word	0x0003024c

000d8068 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8068:	b508      	push	{r3, lr}
   d806a:	4b02      	ldr	r3, [pc, #8]	; (d8074 <HAL_USB_USART_Receive_Data+0xc>)
   d806c:	681b      	ldr	r3, [r3, #0]
   d806e:	699b      	ldr	r3, [r3, #24]
   d8070:	9301      	str	r3, [sp, #4]
   d8072:	bd08      	pop	{r3, pc}
   d8074:	0003024c 	.word	0x0003024c

000d8078 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8078:	b508      	push	{r3, lr}
   d807a:	4b02      	ldr	r3, [pc, #8]	; (d8084 <HAL_USB_USART_Send_Data+0xc>)
   d807c:	681b      	ldr	r3, [r3, #0]
   d807e:	69db      	ldr	r3, [r3, #28]
   d8080:	9301      	str	r3, [sp, #4]
   d8082:	bd08      	pop	{r3, pc}
   d8084:	0003024c 	.word	0x0003024c

000d8088 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8088:	b508      	push	{r3, lr}
   d808a:	4b02      	ldr	r3, [pc, #8]	; (d8094 <HAL_USB_USART_Flush_Data+0xc>)
   d808c:	681b      	ldr	r3, [r3, #0]
   d808e:	6a1b      	ldr	r3, [r3, #32]
   d8090:	9301      	str	r3, [sp, #4]
   d8092:	bd08      	pop	{r3, pc}
   d8094:	0003024c 	.word	0x0003024c

000d8098 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8098:	b508      	push	{r3, lr}
   d809a:	4b02      	ldr	r3, [pc, #8]	; (d80a4 <panic_+0xc>)
   d809c:	681b      	ldr	r3, [r3, #0]
   d809e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d80a0:	9301      	str	r3, [sp, #4]
   d80a2:	bd08      	pop	{r3, pc}
   d80a4:	00030260 	.word	0x00030260

000d80a8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d80a8:	b508      	push	{r3, lr}
   d80aa:	4b03      	ldr	r3, [pc, #12]	; (d80b8 <diag_get_source+0x10>)
   d80ac:	681b      	ldr	r3, [r3, #0]
   d80ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d80b2:	9301      	str	r3, [sp, #4]
   d80b4:	bd08      	pop	{r3, pc}
   d80b6:	0000      	.short	0x0000
   d80b8:	00030260 	.word	0x00030260

000d80bc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <system_mode+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	681b      	ldr	r3, [r3, #0]
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030220 	.word	0x00030220

000d80cc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <set_system_mode+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	685b      	ldr	r3, [r3, #4]
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	00030220 	.word	0x00030220

000d80dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <system_delay_ms+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	695b      	ldr	r3, [r3, #20]
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	00030220 	.word	0x00030220

000d80ec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <application_thread_current+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	00030220 	.word	0x00030220

000d80fc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <application_thread_invoke+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	00030220 	.word	0x00030220

000d810c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <system_thread_get_state+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	00030220 	.word	0x00030220

000d811c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b03      	ldr	r3, [pc, #12]	; (d812c <system_ctrl_set_app_request_handler+0x10>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8126:	9301      	str	r3, [sp, #4]
   d8128:	bd08      	pop	{r3, pc}
   d812a:	0000      	.short	0x0000
   d812c:	00030220 	.word	0x00030220

000d8130 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8130:	b508      	push	{r3, lr}
   d8132:	4b03      	ldr	r3, [pc, #12]	; (d8140 <system_ctrl_set_result+0x10>)
   d8134:	681b      	ldr	r3, [r3, #0]
   d8136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d813a:	9301      	str	r3, [sp, #4]
   d813c:	bd08      	pop	{r3, pc}
   d813e:	0000      	.short	0x0000
   d8140:	00030220 	.word	0x00030220

000d8144 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8144:	b508      	push	{r3, lr}
   d8146:	4b02      	ldr	r3, [pc, #8]	; (d8150 <spark_process+0xc>)
   d8148:	681b      	ldr	r3, [r3, #0]
   d814a:	689b      	ldr	r3, [r3, #8]
   d814c:	9301      	str	r3, [sp, #4]
   d814e:	bd08      	pop	{r3, pc}
   d8150:	00030244 	.word	0x00030244

000d8154 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8154:	b508      	push	{r3, lr}
   d8156:	4b02      	ldr	r3, [pc, #8]	; (d8160 <spark_cloud_flag_connected+0xc>)
   d8158:	681b      	ldr	r3, [r3, #0]
   d815a:	695b      	ldr	r3, [r3, #20]
   d815c:	9301      	str	r3, [sp, #4]
   d815e:	bd08      	pop	{r3, pc}
   d8160:	00030244 	.word	0x00030244

000d8164 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8164:	b508      	push	{r3, lr}
   d8166:	4b02      	ldr	r3, [pc, #8]	; (d8170 <spark_deviceID+0xc>)
   d8168:	681b      	ldr	r3, [r3, #0]
   d816a:	69db      	ldr	r3, [r3, #28]
   d816c:	9301      	str	r3, [sp, #4]
   d816e:	bd08      	pop	{r3, pc}
   d8170:	00030244 	.word	0x00030244

000d8174 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8174:	b508      	push	{r3, lr}
   d8176:	4b02      	ldr	r3, [pc, #8]	; (d8180 <spark_send_event+0xc>)
   d8178:	681b      	ldr	r3, [r3, #0]
   d817a:	6a1b      	ldr	r3, [r3, #32]
   d817c:	9301      	str	r3, [sp, #4]
   d817e:	bd08      	pop	{r3, pc}
   d8180:	00030244 	.word	0x00030244

000d8184 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b02      	ldr	r3, [pc, #8]	; (d8190 <spark_sync_time_pending+0xc>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	bd08      	pop	{r3, pc}
   d8190:	00030244 	.word	0x00030244

000d8194 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8194:	b508      	push	{r3, lr}
   d8196:	4b02      	ldr	r3, [pc, #8]	; (d81a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8198:	681b      	ldr	r3, [r3, #0]
   d819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d819c:	9301      	str	r3, [sp, #4]
   d819e:	bd08      	pop	{r3, pc}
   d81a0:	00030244 	.word	0x00030244

000d81a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d81a4:	b508      	push	{r3, lr}
   d81a6:	4b02      	ldr	r3, [pc, #8]	; (d81b0 <network_connect+0xc>)
   d81a8:	681b      	ldr	r3, [r3, #0]
   d81aa:	685b      	ldr	r3, [r3, #4]
   d81ac:	9301      	str	r3, [sp, #4]
   d81ae:	bd08      	pop	{r3, pc}
   d81b0:	00030240 	.word	0x00030240

000d81b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d81b4:	b508      	push	{r3, lr}
   d81b6:	4b02      	ldr	r3, [pc, #8]	; (d81c0 <network_connecting+0xc>)
   d81b8:	681b      	ldr	r3, [r3, #0]
   d81ba:	689b      	ldr	r3, [r3, #8]
   d81bc:	9301      	str	r3, [sp, #4]
   d81be:	bd08      	pop	{r3, pc}
   d81c0:	00030240 	.word	0x00030240

000d81c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d81c4:	b508      	push	{r3, lr}
   d81c6:	4b02      	ldr	r3, [pc, #8]	; (d81d0 <network_disconnect+0xc>)
   d81c8:	681b      	ldr	r3, [r3, #0]
   d81ca:	68db      	ldr	r3, [r3, #12]
   d81cc:	9301      	str	r3, [sp, #4]
   d81ce:	bd08      	pop	{r3, pc}
   d81d0:	00030240 	.word	0x00030240

000d81d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d81d4:	b508      	push	{r3, lr}
   d81d6:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <network_ready+0xc>)
   d81d8:	681b      	ldr	r3, [r3, #0]
   d81da:	691b      	ldr	r3, [r3, #16]
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	bd08      	pop	{r3, pc}
   d81e0:	00030240 	.word	0x00030240

000d81e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d81e4:	b508      	push	{r3, lr}
   d81e6:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <network_on+0xc>)
   d81e8:	681b      	ldr	r3, [r3, #0]
   d81ea:	695b      	ldr	r3, [r3, #20]
   d81ec:	9301      	str	r3, [sp, #4]
   d81ee:	bd08      	pop	{r3, pc}
   d81f0:	00030240 	.word	0x00030240

000d81f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d81f4:	b508      	push	{r3, lr}
   d81f6:	4b02      	ldr	r3, [pc, #8]	; (d8200 <network_off+0xc>)
   d81f8:	681b      	ldr	r3, [r3, #0]
   d81fa:	699b      	ldr	r3, [r3, #24]
   d81fc:	9301      	str	r3, [sp, #4]
   d81fe:	bd08      	pop	{r3, pc}
   d8200:	00030240 	.word	0x00030240

000d8204 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8204:	b508      	push	{r3, lr}
   d8206:	4b02      	ldr	r3, [pc, #8]	; (d8210 <network_listen+0xc>)
   d8208:	681b      	ldr	r3, [r3, #0]
   d820a:	69db      	ldr	r3, [r3, #28]
   d820c:	9301      	str	r3, [sp, #4]
   d820e:	bd08      	pop	{r3, pc}
   d8210:	00030240 	.word	0x00030240

000d8214 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8214:	b508      	push	{r3, lr}
   d8216:	4b02      	ldr	r3, [pc, #8]	; (d8220 <network_listening+0xc>)
   d8218:	681b      	ldr	r3, [r3, #0]
   d821a:	6a1b      	ldr	r3, [r3, #32]
   d821c:	9301      	str	r3, [sp, #4]
   d821e:	bd08      	pop	{r3, pc}
   d8220:	00030240 	.word	0x00030240

000d8224 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8224:	b508      	push	{r3, lr}
   d8226:	4b02      	ldr	r3, [pc, #8]	; (d8230 <network_set_listen_timeout+0xc>)
   d8228:	681b      	ldr	r3, [r3, #0]
   d822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d822c:	9301      	str	r3, [sp, #4]
   d822e:	bd08      	pop	{r3, pc}
   d8230:	00030240 	.word	0x00030240

000d8234 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8234:	b508      	push	{r3, lr}
   d8236:	4b02      	ldr	r3, [pc, #8]	; (d8240 <network_get_listen_timeout+0xc>)
   d8238:	681b      	ldr	r3, [r3, #0]
   d823a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d823c:	9301      	str	r3, [sp, #4]
   d823e:	bd08      	pop	{r3, pc}
   d8240:	00030240 	.word	0x00030240

000d8244 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8244:	b508      	push	{r3, lr}
   d8246:	4b02      	ldr	r3, [pc, #8]	; (d8250 <network_is_on+0xc>)
   d8248:	681b      	ldr	r3, [r3, #0]
   d824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d824c:	9301      	str	r3, [sp, #4]
   d824e:	bd08      	pop	{r3, pc}
   d8250:	00030240 	.word	0x00030240

000d8254 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8254:	b508      	push	{r3, lr}
   d8256:	4b02      	ldr	r3, [pc, #8]	; (d8260 <network_is_off+0xc>)
   d8258:	681b      	ldr	r3, [r3, #0]
   d825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d825c:	9301      	str	r3, [sp, #4]
   d825e:	bd08      	pop	{r3, pc}
   d8260:	00030240 	.word	0x00030240

000d8264 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b02      	ldr	r3, [pc, #8]	; (d8270 <malloc+0xc>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	681b      	ldr	r3, [r3, #0]
   d826c:	9301      	str	r3, [sp, #4]
   d826e:	bd08      	pop	{r3, pc}
   d8270:	0003021c 	.word	0x0003021c

000d8274 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <free+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	685b      	ldr	r3, [r3, #4]
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	0003021c 	.word	0x0003021c

000d8284 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <realloc+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	689b      	ldr	r3, [r3, #8]
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	0003021c 	.word	0x0003021c

000d8294 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <siprintf+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	691b      	ldr	r3, [r3, #16]
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	0003021c 	.word	0x0003021c

000d82a4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <snprintf+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	69db      	ldr	r3, [r3, #28]
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	0003021c 	.word	0x0003021c

000d82b4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <vsnprintf+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	0003021c 	.word	0x0003021c

000d82c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <abort+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	0003021c 	.word	0x0003021c

000d82d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <_malloc_r+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	0003021c 	.word	0x0003021c

000d82e4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <newlib_impure_ptr_callback+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	0003021c 	.word	0x0003021c

000d82f4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <strftime+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	0003021c 	.word	0x0003021c

000d8304 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <localtime_r+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	0003021c 	.word	0x0003021c

000d8314 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8314:	2100      	movs	r1, #0
   d8316:	f7ff bee1 	b.w	d80dc <system_delay_ms>

000d831a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d831a:	b510      	push	{r4, lr}
      if (_M_empty())
   d831c:	6883      	ldr	r3, [r0, #8]
   d831e:	4604      	mov	r4, r0
   d8320:	b90b      	cbnz	r3, d8326 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8322:	f001 ff1b 	bl	da15c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8326:	68c3      	ldr	r3, [r0, #12]
   d8328:	4798      	blx	r3
      if (_M_manager)
   d832a:	68a3      	ldr	r3, [r4, #8]
   d832c:	b11b      	cbz	r3, d8336 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d832e:	2203      	movs	r2, #3
   d8330:	4621      	mov	r1, r4
   d8332:	4620      	mov	r0, r4
   d8334:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8336:	4620      	mov	r0, r4
   d8338:	2110      	movs	r1, #16
}
   d833a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d833e:	f001 bf09 	b.w	da154 <_ZdlPvj>

000d8342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8342:	680b      	ldr	r3, [r1, #0]
   d8344:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d8346:	b113      	cbz	r3, d834e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8348:	685a      	ldr	r2, [r3, #4]
   d834a:	3201      	adds	r2, #1
   d834c:	605a      	str	r2, [r3, #4]
      }
   d834e:	4770      	bx	lr

000d8350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8350:	4802      	ldr	r0, [pc, #8]	; (d835c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d8352:	2300      	movs	r3, #0
   d8354:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8356:	f7ff bce7 	b.w	d7d28 <os_mutex_recursive_create>
   d835a:	bf00      	nop
   d835c:	2003e54c 	.word	0x2003e54c

000d8360 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8360:	2200      	movs	r2, #0
   d8362:	6840      	ldr	r0, [r0, #4]
   d8364:	4611      	mov	r1, r2
   d8366:	f7ff bf35 	b.w	d81d4 <network_ready>

000d836a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d836a:	2200      	movs	r2, #0
   d836c:	6840      	ldr	r0, [r0, #4]
   d836e:	4611      	mov	r1, r2
   d8370:	f7ff bf50 	b.w	d8214 <network_listening>

000d8374 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8374:	2200      	movs	r2, #0
   d8376:	6840      	ldr	r0, [r0, #4]
   d8378:	4611      	mov	r1, r2
   d837a:	f7ff bf5b 	b.w	d8234 <network_get_listen_timeout>

000d837e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d837e:	6840      	ldr	r0, [r0, #4]
   d8380:	2200      	movs	r2, #0
   d8382:	f7ff bf4f 	b.w	d8224 <network_set_listen_timeout>

000d8386 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8386:	6840      	ldr	r0, [r0, #4]
   d8388:	2200      	movs	r2, #0
   d838a:	f081 0101 	eor.w	r1, r1, #1
   d838e:	f7ff bf39 	b.w	d8204 <network_listen>

000d8392 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8392:	2300      	movs	r3, #0
   d8394:	6840      	ldr	r0, [r0, #4]
   d8396:	461a      	mov	r2, r3
   d8398:	4619      	mov	r1, r3
   d839a:	f7ff bf2b 	b.w	d81f4 <network_off>

000d839e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d839e:	2300      	movs	r3, #0
   d83a0:	6840      	ldr	r0, [r0, #4]
   d83a2:	461a      	mov	r2, r3
   d83a4:	4619      	mov	r1, r3
   d83a6:	f7ff bf1d 	b.w	d81e4 <network_on>

000d83aa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d83aa:	2200      	movs	r2, #0
   d83ac:	6840      	ldr	r0, [r0, #4]
   d83ae:	4611      	mov	r1, r2
   d83b0:	f7ff bf00 	b.w	d81b4 <network_connecting>

000d83b4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83b4:	6840      	ldr	r0, [r0, #4]
   d83b6:	2200      	movs	r2, #0
   d83b8:	2102      	movs	r1, #2
   d83ba:	f7ff bf03 	b.w	d81c4 <network_disconnect>

000d83be <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d83be:	2300      	movs	r3, #0
   d83c0:	6840      	ldr	r0, [r0, #4]
   d83c2:	461a      	mov	r2, r3
   d83c4:	f7ff beee 	b.w	d81a4 <network_connect>

000d83c8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d83c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d83ca:	4b1b      	ldr	r3, [pc, #108]	; (d8438 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d83cc:	6003      	str	r3, [r0, #0]
   d83ce:	2500      	movs	r5, #0
   d83d0:	460f      	mov	r7, r1
   d83d2:	3330      	adds	r3, #48	; 0x30
   d83d4:	2618      	movs	r6, #24
   d83d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d83da:	b089      	sub	sp, #36	; 0x24
   d83dc:	6043      	str	r3, [r0, #4]
   d83de:	4632      	mov	r2, r6
   d83e0:	4629      	mov	r1, r5
   d83e2:	4604      	mov	r4, r0
   d83e4:	3010      	adds	r0, #16
   d83e6:	f002 fdaa 	bl	daf3e <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d83ea:	6878      	ldr	r0, [r7, #4]
   d83ec:	462a      	mov	r2, r5
   d83ee:	4629      	mov	r1, r5
   d83f0:	f7ff fef0 	bl	d81d4 <network_ready>
   d83f4:	b918      	cbnz	r0, d83fe <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d83f6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d83f8:	4620      	mov	r0, r4
   d83fa:	b009      	add	sp, #36	; 0x24
   d83fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d83fe:	4629      	mov	r1, r5
   d8400:	4632      	mov	r2, r6
   d8402:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d8404:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d8408:	f002 fd99 	bl	daf3e <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d840c:	a902      	add	r1, sp, #8
   d840e:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8410:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8414:	f7ff fc40 	bl	d7c98 <cellular_signal>
   d8418:	b110      	cbz	r0, d8420 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d841a:	2301      	movs	r3, #1
   d841c:	60a3      	str	r3, [r4, #8]
            return sig;
   d841e:	e7eb      	b.n	d83f8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8420:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8422:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d8424:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d8426:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8428:	b90b      	cbnz	r3, d842e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d842a:	2302      	movs	r3, #2
   d842c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d842e:	a902      	add	r1, sp, #8
   d8430:	4620      	mov	r0, r4
   d8432:	f000 f8c0 	bl	d85b6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d8436:	e7df      	b.n	d83f8 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d8438:	000ddda0 	.word	0x000ddda0

000d843c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d843c:	4b08      	ldr	r3, [pc, #32]	; (d8460 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d843e:	b510      	push	{r4, lr}
   d8440:	2428      	movs	r4, #40	; 0x28
   d8442:	4622      	mov	r2, r4
   d8444:	4618      	mov	r0, r3
   d8446:	2100      	movs	r1, #0
   d8448:	f002 fd79 	bl	daf3e <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d844c:	4b05      	ldr	r3, [pc, #20]	; (d8464 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d844e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8454:	6042      	str	r2, [r0, #4]
   d8456:	2204      	movs	r2, #4
   d8458:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d845a:	4a03      	ldr	r2, [pc, #12]	; (d8468 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d845c:	601a      	str	r2, [r3, #0]
   d845e:	bd10      	pop	{r4, pc}
   d8460:	2003e558 	.word	0x2003e558
   d8464:	2003e550 	.word	0x2003e550
   d8468:	000ddd64 	.word	0x000ddd64

000d846c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d846c:	4770      	bx	lr

000d846e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d846e:	7d00      	ldrb	r0, [r0, #20]
   d8470:	4770      	bx	lr

000d8472 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d8472:	7d03      	ldrb	r3, [r0, #20]
   d8474:	b14b      	cbz	r3, d848a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d8476:	6983      	ldr	r3, [r0, #24]
   d8478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d847c:	d005      	beq.n	d848a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d847e:	6a00      	ldr	r0, [r0, #32]
   d8480:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d8484:	bf18      	it	ne
   d8486:	2001      	movne	r0, #1
   d8488:	4770      	bx	lr
   d848a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d848c:	4770      	bx	lr

000d848e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d848e:	6803      	ldr	r3, [r0, #0]
   d8490:	6a1b      	ldr	r3, [r3, #32]
   d8492:	4718      	bx	r3

000d8494 <_ZN14CellularSignalD0Ev>:
   d8494:	b510      	push	{r4, lr}
   d8496:	2128      	movs	r1, #40	; 0x28
   d8498:	4604      	mov	r4, r0
   d849a:	f001 fe5b 	bl	da154 <_ZdlPvj>
   d849e:	4620      	mov	r0, r4
   d84a0:	bd10      	pop	{r4, pc}
	...

000d84a4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d84a4:	7d03      	ldrb	r3, [r0, #20]
   d84a6:	b17b      	cbz	r3, d84c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d84a8:	69c3      	ldr	r3, [r0, #28]
   d84aa:	2b00      	cmp	r3, #0
   d84ac:	db0c      	blt.n	d84c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d84ae:	ee07 3a90 	vmov	s15, r3
   d84b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; d84d0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d84b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d84ba:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d84be:	eddf 7a05 	vldr	s15, [pc, #20]	; d84d4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d84c2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d84c6:	4770      	bx	lr
    return -1.0f;
   d84c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d84cc:	4770      	bx	lr
   d84ce:	bf00      	nop
   d84d0:	477fff00 	.word	0x477fff00
   d84d4:	42c80000 	.word	0x42c80000

000d84d8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d84d8:	7d03      	ldrb	r3, [r0, #20]
   d84da:	b163      	cbz	r3, d84f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d84dc:	6983      	ldr	r3, [r0, #24]
   d84de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d84e2:	d008      	beq.n	d84f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d84e4:	ee07 3a90 	vmov	s15, r3
   d84e8:	ed9f 7a04 	vldr	s14, [pc, #16]	; d84fc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d84ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d84f0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d84f4:	4770      	bx	lr
    return 0.0f;
   d84f6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8500 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d84fa:	4770      	bx	lr
   d84fc:	42c80000 	.word	0x42c80000
   d8500:	00000000 	.word	0x00000000

000d8504 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8504:	7d03      	ldrb	r3, [r0, #20]
   d8506:	b17b      	cbz	r3, d8528 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8508:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d850a:	2b00      	cmp	r3, #0
   d850c:	db0c      	blt.n	d8528 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d850e:	ee07 3a90 	vmov	s15, r3
   d8512:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8530 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d851a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d851e:	eddf 7a05 	vldr	s15, [pc, #20]	; d8534 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8522:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8526:	4770      	bx	lr
    return -1.0f;
   d8528:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d852c:	4770      	bx	lr
   d852e:	bf00      	nop
   d8530:	477fff00 	.word	0x477fff00
   d8534:	42c80000 	.word	0x42c80000

000d8538 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8538:	7d03      	ldrb	r3, [r0, #20]
   d853a:	b163      	cbz	r3, d8556 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d853c:	6a03      	ldr	r3, [r0, #32]
   d853e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8542:	d008      	beq.n	d8556 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8544:	ee07 3a90 	vmov	s15, r3
   d8548:	ed9f 7a04 	vldr	s14, [pc, #16]	; d855c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d854c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8550:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8554:	4770      	bx	lr
    return 0.0f;
   d8556:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8560 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d855a:	4770      	bx	lr
   d855c:	42c80000 	.word	0x42c80000
   d8560:	00000000 	.word	0x00000000

000d8564 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8564:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d8566:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8568:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d856a:	da0a      	bge.n	d8582 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d856c:	212d      	movs	r1, #45	; 0x2d
   d856e:	f000 fce1 	bl	d8f34 <_ZN5Print5printEc>
            val = -n;
   d8572:	4261      	negs	r1, r4
            t = print('-');
   d8574:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8576:	220a      	movs	r2, #10
   d8578:	4630      	mov	r0, r6
   d857a:	f000 fcf4 	bl	d8f66 <_ZN5Print11printNumberEmh>
    }
}
   d857e:	4428      	add	r0, r5
   d8580:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d8582:	4621      	mov	r1, r4
        size_t t = 0;
   d8584:	2500      	movs	r5, #0
   d8586:	e7f6      	b.n	d8576 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8588 <_ZNK14CellularSignal7printToER5Print>:
{
   d8588:	b570      	push	{r4, r5, r6, lr}
   d858a:	460c      	mov	r4, r1
   d858c:	4605      	mov	r5, r0
   d858e:	6881      	ldr	r1, [r0, #8]
   d8590:	4620      	mov	r0, r4
   d8592:	f7ff ffe7 	bl	d8564 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d8596:	212c      	movs	r1, #44	; 0x2c
   d8598:	4606      	mov	r6, r0
   d859a:	4620      	mov	r0, r4
   d859c:	f000 fcca 	bl	d8f34 <_ZN5Print5printEc>
   d85a0:	68e9      	ldr	r1, [r5, #12]
   d85a2:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d85a4:	4620      	mov	r0, r4
   d85a6:	f7ff ffdd 	bl	d8564 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d85aa:	4430      	add	r0, r6
   d85ac:	bd70      	pop	{r4, r5, r6, pc}

000d85ae <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d85ae:	f1a0 0004 	sub.w	r0, r0, #4
   d85b2:	f7ff bfe9 	b.w	d8588 <_ZNK14CellularSignal7printToER5Print>

000d85b6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d85b6:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d85b8:	460d      	mov	r5, r1
   d85ba:	f100 0410 	add.w	r4, r0, #16
   d85be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d85c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d85c2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d85c6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d85ca:	2001      	movs	r0, #1
   d85cc:	bd30      	pop	{r4, r5, pc}

000d85ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85ce:	4770      	bx	lr

000d85d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d85d0:	2000      	movs	r0, #0
   d85d2:	4770      	bx	lr

000d85d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85d4:	b510      	push	{r4, lr}
   d85d6:	2110      	movs	r1, #16
   d85d8:	4604      	mov	r4, r0
   d85da:	f001 fdbb 	bl	da154 <_ZdlPvj>
   d85de:	4620      	mov	r0, r4
   d85e0:	bd10      	pop	{r4, pc}

000d85e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d85e2:	b508      	push	{r3, lr}
      { delete this; }
   d85e4:	f7ff fff6 	bl	d85d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d85e8:	bd08      	pop	{r3, pc}

000d85ea <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d85ea:	b530      	push	{r4, r5, lr}
        type_(type) {
   d85ec:	2200      	movs	r2, #0
   d85ee:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d85f2:	6002      	str	r2, [r0, #0]
   d85f4:	8084      	strh	r4, [r0, #4]
   d85f6:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d85f8:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d85fa:	680c      	ldr	r4, [r1, #0]
   d85fc:	8085      	strh	r5, [r0, #4]
   d85fe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8600:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8602:	bd30      	pop	{r4, r5, pc}

000d8604 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8604:	b510      	push	{r4, lr}
   d8606:	4604      	mov	r4, r0
    free((void*)msg_);
   d8608:	6800      	ldr	r0, [r0, #0]
   d860a:	f7ff fe33 	bl	d8274 <free>
}
   d860e:	4620      	mov	r0, r4
   d8610:	bd10      	pop	{r4, pc}

000d8612 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8612:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8614:	68c4      	ldr	r4, [r0, #12]
   d8616:	b1f4      	cbz	r4, d8656 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8618:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d861a:	2b02      	cmp	r3, #2
   d861c:	d103      	bne.n	d8626 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d861e:	f104 000c 	add.w	r0, r4, #12
   d8622:	f7ff ffef 	bl	d8604 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8626:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8628:	b135      	cbz	r5, d8638 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d862a:	4628      	mov	r0, r5
   d862c:	f7fb fe3a 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
   d8630:	2110      	movs	r1, #16
   d8632:	4628      	mov	r0, r5
   d8634:	f001 fd8e 	bl	da154 <_ZdlPvj>
   d8638:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d863a:	b135      	cbz	r5, d864a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d863c:	4628      	mov	r0, r5
   d863e:	f7fb fe31 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
   d8642:	2110      	movs	r1, #16
   d8644:	4628      	mov	r0, r5
   d8646:	f001 fd85 	bl	da154 <_ZdlPvj>
   d864a:	4620      	mov	r0, r4
   d864c:	2114      	movs	r1, #20
   d864e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8652:	f001 bd7f 	b.w	da154 <_ZdlPvj>
   d8656:	bd38      	pop	{r3, r4, r5, pc}

000d8658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8658:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d865a:	460e      	mov	r6, r1
   d865c:	4604      	mov	r4, r0
   d865e:	f856 3b04 	ldr.w	r3, [r6], #4
   d8662:	9300      	str	r3, [sp, #0]
   d8664:	460d      	mov	r5, r1
   d8666:	a801      	add	r0, sp, #4
   d8668:	4631      	mov	r1, r6
   d866a:	f7ff fe6a 	bl	d8342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d866e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8670:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8672:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8674:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8676:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8678:	2300      	movs	r3, #0
   d867a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d867c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d867e:	f7fb fe9b 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8682:	4630      	mov	r0, r6
   d8684:	f7fb fe98 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8688:	4628      	mov	r0, r5
   d868a:	2108      	movs	r1, #8
   d868c:	f001 fd62 	bl	da154 <_ZdlPvj>
        return p;
    }
   d8690:	4620      	mov	r0, r4
   d8692:	b002      	add	sp, #8
   d8694:	bd70      	pop	{r4, r5, r6, pc}

000d8696 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d8696:	b513      	push	{r0, r1, r4, lr}
   d8698:	460b      	mov	r3, r1
   d869a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d869c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d86a0:	466c      	mov	r4, sp
   d86a2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d86a6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d86aa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d86ae:	e894 0003 	ldmia.w	r4, {r0, r1}
   d86b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d86b6:	b002      	add	sp, #8
   d86b8:	bd10      	pop	{r4, pc}

000d86ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d86ba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d86bc:	b510      	push	{r4, lr}
      if (_M_empty())
   d86be:	b90a      	cbnz	r2, d86c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d86c0:	f001 fd4c 	bl	da15c <_ZSt25__throw_bad_function_callv>
    }
   d86c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d86c8:	68c3      	ldr	r3, [r0, #12]
   d86ca:	4718      	bx	r3

000d86cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d86cc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d86ce:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d86d0:	f100 0110 	add.w	r1, r0, #16
   d86d4:	f7ff fff1 	bl	d86ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d86d8:	bd08      	pop	{r3, pc}

000d86da <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d86da:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d86dc:	b510      	push	{r4, lr}
      if (_M_empty())
   d86de:	b90a      	cbnz	r2, d86e4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d86e0:	f001 fd3c 	bl	da15c <_ZSt25__throw_bad_function_callv>
    }
   d86e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d86e8:	68c3      	ldr	r3, [r0, #12]
   d86ea:	4718      	bx	r3

000d86ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d86ec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d86ee:	6800      	ldr	r0, [r0, #0]
   d86f0:	f100 0110 	add.w	r1, r0, #16
   d86f4:	f7ff fff1 	bl	d86da <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d86f8:	bd08      	pop	{r3, pc}
	...

000d86fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d86fc:	b538      	push	{r3, r4, r5, lr}
   d86fe:	2300      	movs	r3, #0
   d8700:	4604      	mov	r4, r0
   d8702:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8704:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8706:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8708:	f7fb fcc5 	bl	d4096 <_Znwj>
   d870c:	b128      	cbz	r0, d871a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d870e:	2301      	movs	r3, #1
   d8710:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8714:	4b02      	ldr	r3, [pc, #8]	; (d8720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8716:	6003      	str	r3, [r0, #0]
   d8718:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d871a:	6020      	str	r0, [r4, #0]
	}
   d871c:	4620      	mov	r0, r4
   d871e:	bd38      	pop	{r3, r4, r5, pc}
   d8720:	000ddddc 	.word	0x000ddddc

000d8724 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8724:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8726:	2300      	movs	r3, #0
   d8728:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d872a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d872c:	4604      	mov	r4, r0
   d872e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8730:	b12b      	cbz	r3, d873e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8732:	2202      	movs	r2, #2
   d8734:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8736:	68eb      	ldr	r3, [r5, #12]
   d8738:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d873a:	68ab      	ldr	r3, [r5, #8]
   d873c:	60a3      	str	r3, [r4, #8]
    }
   d873e:	4620      	mov	r0, r4
   d8740:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8744 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8744:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8746:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8748:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d874a:	4668      	mov	r0, sp
   d874c:	f7ff ff4d 	bl	d85ea <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8750:	f04f 0302 	mov.w	r3, #2
   d8754:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8758:	2a00      	cmp	r2, #0
   d875a:	d103      	bne.n	d8764 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d875c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8760:	2900      	cmp	r1, #0
   d8762:	d1f7      	bne.n	d8754 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8764:	d125      	bne.n	d87b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8766:	f104 050c 	add.w	r5, r4, #12
   d876a:	4669      	mov	r1, sp
   d876c:	4628      	mov	r0, r5
   d876e:	f7ff ff3c 	bl	d85ea <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8772:	f3bf 8f5b 	dmb	ish
   d8776:	2301      	movs	r3, #1
   d8778:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d877a:	2000      	movs	r0, #0
   d877c:	f104 0308 	add.w	r3, r4, #8
   d8780:	f3bf 8f5b 	dmb	ish
   d8784:	e853 6f00 	ldrex	r6, [r3]
   d8788:	e843 0200 	strex	r2, r0, [r3]
   d878c:	2a00      	cmp	r2, #0
   d878e:	d1f9      	bne.n	d8784 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8790:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8794:	b16e      	cbz	r6, d87b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8796:	f7ff fca9 	bl	d80ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d879a:	b178      	cbz	r0, d87bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d879c:	4629      	mov	r1, r5
   d879e:	4630      	mov	r0, r6
   d87a0:	f7ff ff8b 	bl	d86ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d87a4:	4630      	mov	r0, r6
   d87a6:	f7fb fd7d 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d87aa:	2110      	movs	r1, #16
   d87ac:	4630      	mov	r0, r6
   d87ae:	f001 fcd1 	bl	da154 <_ZdlPvj>
        p_->setError(std::move(error));
   d87b2:	4668      	mov	r0, sp
   d87b4:	f7ff ff26 	bl	d8604 <_ZN8particle5ErrorD1Ev>
    }
   d87b8:	b009      	add	sp, #36	; 0x24
   d87ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d87bc:	4631      	mov	r1, r6
   d87be:	a802      	add	r0, sp, #8
   d87c0:	f7ff ffb0 	bl	d8724 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d87c4:	68e0      	ldr	r0, [r4, #12]
   d87c6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d87ca:	b108      	cbz	r0, d87d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d87cc:	f002 fbf6 	bl	dafbc <strdup>
        type_(type) {
   d87d0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d87d2:	2010      	movs	r0, #16
   d87d4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d87d8:	f7fb fc5d 	bl	d4096 <_Znwj>
   d87dc:	4605      	mov	r5, r0
   d87de:	b1e8      	cbz	r0, d881c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d87e0:	2700      	movs	r7, #0
   d87e2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d87e4:	2018      	movs	r0, #24
   d87e6:	f7fb fc56 	bl	d4096 <_Znwj>
   d87ea:	4604      	mov	r4, r0
   d87ec:	b188      	cbz	r0, d8812 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d87ee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d87f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d87f2:	a802      	add	r0, sp, #8
   d87f4:	f7ff ff4f 	bl	d8696 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d87f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d87fa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d87fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d87fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8800:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8802:	a906      	add	r1, sp, #24
   d8804:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8806:	60e3      	str	r3, [r4, #12]
   d8808:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d880c:	9205      	str	r2, [sp, #20]
   d880e:	f7ff feec 	bl	d85ea <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8812:	4b08      	ldr	r3, [pc, #32]	; (d8834 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8814:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8816:	4b08      	ldr	r3, [pc, #32]	; (d8838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8818:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d881a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d881c:	a806      	add	r0, sp, #24
   d881e:	f7ff fef1 	bl	d8604 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8822:	a802      	add	r0, sp, #8
   d8824:	f7fb fd3e 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8828:	2200      	movs	r2, #0
   d882a:	4629      	mov	r1, r5
   d882c:	4803      	ldr	r0, [pc, #12]	; (d883c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d882e:	f7ff fc65 	bl	d80fc <application_thread_invoke>
   d8832:	e7b7      	b.n	d87a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8834:	000d86cd 	.word	0x000d86cd
   d8838:	000d8965 	.word	0x000d8965
   d883c:	000d831b 	.word	0x000d831b

000d8840 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8844:	b08a      	sub	sp, #40	; 0x28
   d8846:	4605      	mov	r5, r0
   d8848:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d884c:	460c      	mov	r4, r1
   d884e:	4617      	mov	r7, r2
   d8850:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8852:	f7ff fc7f 	bl	d8154 <spark_cloud_flag_connected>
   d8856:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8858:	4682      	mov	sl, r0
   d885a:	bb38      	cbnz	r0, d88ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d885c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8860:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8862:	a905      	add	r1, sp, #20
   d8864:	4630      	mov	r0, r6
   d8866:	f8ad 3018 	strh.w	r3, [sp, #24]
   d886a:	f7ff febe 	bl	d85ea <_ZN8particle5ErrorC1EOS0_>
   d886e:	2014      	movs	r0, #20
   d8870:	f7fb fc11 	bl	d4096 <_Znwj>
   d8874:	4604      	mov	r4, r0
   d8876:	b148      	cbz	r0, d888c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8878:	2302      	movs	r3, #2
   d887a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d887c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d887e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8882:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8884:	4631      	mov	r1, r6
   d8886:	300c      	adds	r0, #12
   d8888:	f7ff feaf 	bl	d85ea <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d888c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d888e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8890:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8894:	f7ff ff32 	bl	d86fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8898:	4630      	mov	r0, r6
   d889a:	f7ff feb3 	bl	d8604 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d889e:	a805      	add	r0, sp, #20
   d88a0:	f7ff feb0 	bl	d8604 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d88a4:	4628      	mov	r0, r5
   d88a6:	b00a      	add	sp, #40	; 0x28
   d88a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d88ac:	230c      	movs	r3, #12
   d88ae:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d88b2:	2014      	movs	r0, #20
   d88b4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d88b8:	9307      	str	r3, [sp, #28]
   d88ba:	f7fb fbec 	bl	d4096 <_Znwj>
   d88be:	4601      	mov	r1, r0
   d88c0:	b128      	cbz	r0, d88ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d88c2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d88c6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d88ca:	f880 a001 	strb.w	sl, [r0, #1]
   d88ce:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d88d0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d88d2:	f7ff ff13 	bl	d86fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d88d6:	4b22      	ldr	r3, [pc, #136]	; (d8960 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d88d8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d88da:	2008      	movs	r0, #8
   d88dc:	f7fb fbdb 	bl	d4096 <_Znwj>
   d88e0:	4682      	mov	sl, r0
   d88e2:	b128      	cbz	r0, d88f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d88e4:	9b03      	ldr	r3, [sp, #12]
   d88e6:	f840 3b04 	str.w	r3, [r0], #4
   d88ea:	a904      	add	r1, sp, #16
   d88ec:	f7ff fd29 	bl	d8342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d88f0:	9600      	str	r6, [sp, #0]
   d88f2:	fa5f f389 	uxtb.w	r3, r9
   d88f6:	4642      	mov	r2, r8
   d88f8:	4639      	mov	r1, r7
   d88fa:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d88fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8900:	f7ff fc38 	bl	d8174 <spark_send_event>
   d8904:	b9b8      	cbnz	r0, d8936 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8906:	9b03      	ldr	r3, [sp, #12]
   d8908:	785b      	ldrb	r3, [r3, #1]
   d890a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d890e:	b993      	cbnz	r3, d8936 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8910:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8914:	a905      	add	r1, sp, #20
   d8916:	a803      	add	r0, sp, #12
   d8918:	9205      	str	r2, [sp, #20]
   d891a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d891e:	f7ff ff11 	bl	d8744 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8922:	a805      	add	r0, sp, #20
   d8924:	f7ff fe6e 	bl	d8604 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8928:	a805      	add	r0, sp, #20
   d892a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d892c:	f7ff fe94 	bl	d8658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8930:	a806      	add	r0, sp, #24
   d8932:	f7fb fd41 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8936:	9b03      	ldr	r3, [sp, #12]
   d8938:	9305      	str	r3, [sp, #20]
   d893a:	a904      	add	r1, sp, #16
   d893c:	a806      	add	r0, sp, #24
   d893e:	f7ff fd00 	bl	d8342 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8942:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8944:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8946:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8948:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d894a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d894c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d894e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8950:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8952:	f7fb fd31 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8956:	a804      	add	r0, sp, #16
   d8958:	f7fb fd2e 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d895c:	e7a2      	b.n	d88a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d895e:	bf00      	nop
   d8960:	000d8a29 	.word	0x000d8a29

000d8964 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8964:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8968:	4605      	mov	r5, r0
	  switch (__op)
   d896a:	d007      	beq.n	d897c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d896c:	2a03      	cmp	r2, #3
   d896e:	d018      	beq.n	d89a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8970:	2a01      	cmp	r2, #1
   d8972:	d101      	bne.n	d8978 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8974:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8976:	6003      	str	r3, [r0, #0]
	}
   d8978:	2000      	movs	r0, #0
   d897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d897c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d897e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8980:	f7fb fb89 	bl	d4096 <_Znwj>
   d8984:	4604      	mov	r4, r0
   d8986:	b150      	cbz	r0, d899e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8988:	4631      	mov	r1, r6
   d898a:	f7ff fecb 	bl	d8724 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d898e:	6930      	ldr	r0, [r6, #16]
   d8990:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8994:	b108      	cbz	r0, d899a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8996:	f002 fb11 	bl	dafbc <strdup>
        type_(type) {
   d899a:	6120      	str	r0, [r4, #16]
   d899c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d899e:	602c      	str	r4, [r5, #0]
	}
   d89a0:	e7ea      	b.n	d8978 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d89a2:	6804      	ldr	r4, [r0, #0]
   d89a4:	2c00      	cmp	r4, #0
   d89a6:	d0e7      	beq.n	d8978 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d89a8:	f104 0010 	add.w	r0, r4, #16
   d89ac:	f7ff fe2a 	bl	d8604 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d89b0:	4620      	mov	r0, r4
   d89b2:	f7fb fc77 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d89b6:	2118      	movs	r1, #24
   d89b8:	4620      	mov	r0, r4
   d89ba:	f001 fbcb 	bl	da154 <_ZdlPvj>
   d89be:	e7db      	b.n	d8978 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d89c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d89c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d89c2:	2300      	movs	r3, #0
   d89c4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d89c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d89c8:	4604      	mov	r4, r0
   d89ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d89cc:	b12b      	cbz	r3, d89da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d89ce:	2202      	movs	r2, #2
   d89d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d89d2:	68eb      	ldr	r3, [r5, #12]
   d89d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d89d6:	68ab      	ldr	r3, [r5, #8]
   d89d8:	60a3      	str	r3, [r4, #8]
    }
   d89da:	4620      	mov	r0, r4
   d89dc:	bd38      	pop	{r3, r4, r5, pc}

000d89de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d89de:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d89e0:	b570      	push	{r4, r5, r6, lr}
   d89e2:	4604      	mov	r4, r0
	  switch (__op)
   d89e4:	d007      	beq.n	d89f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d89e6:	2a03      	cmp	r2, #3
   d89e8:	d012      	beq.n	d8a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d89ea:	2a01      	cmp	r2, #1
   d89ec:	d101      	bne.n	d89f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d89ee:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d89f0:	6003      	str	r3, [r0, #0]
	}
   d89f2:	2000      	movs	r0, #0
   d89f4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d89f6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d89f8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d89fa:	f7fb fb4c 	bl	d4096 <_Znwj>
   d89fe:	4605      	mov	r5, r0
   d8a00:	b120      	cbz	r0, d8a0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8a02:	4631      	mov	r1, r6
   d8a04:	f7ff ffdc 	bl	d89c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8a08:	7c33      	ldrb	r3, [r6, #16]
   d8a0a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8a0c:	6025      	str	r5, [r4, #0]
	}
   d8a0e:	e7f0      	b.n	d89f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a10:	6804      	ldr	r4, [r0, #0]
   d8a12:	2c00      	cmp	r4, #0
   d8a14:	d0ed      	beq.n	d89f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8a16:	4620      	mov	r0, r4
   d8a18:	f7fb fc44 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a1c:	2114      	movs	r1, #20
   d8a1e:	4620      	mov	r0, r4
   d8a20:	f001 fb98 	bl	da154 <_ZdlPvj>
   d8a24:	e7e5      	b.n	d89f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8a28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8a28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8a2a:	b089      	sub	sp, #36	; 0x24
   d8a2c:	4604      	mov	r4, r0
   d8a2e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8a30:	a801      	add	r0, sp, #4
   d8a32:	4611      	mov	r1, r2
   d8a34:	f7ff fe10 	bl	d8658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8a38:	b1a4      	cbz	r4, d8a64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8a3a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a3c:	b11d      	cbz	r5, d8a46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8a3e:	4628      	mov	r0, r5
   d8a40:	f002 fabc 	bl	dafbc <strdup>
   d8a44:	4605      	mov	r5, r0
   d8a46:	a801      	add	r0, sp, #4
   d8a48:	a903      	add	r1, sp, #12
        type_(type) {
   d8a4a:	9503      	str	r5, [sp, #12]
   d8a4c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8a50:	f7ff fe78 	bl	d8744 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8a54:	a803      	add	r0, sp, #12
   d8a56:	f7ff fdd5 	bl	d8604 <_ZN8particle5ErrorD1Ev>
   d8a5a:	a802      	add	r0, sp, #8
   d8a5c:	f7fb fcac 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8a60:	b009      	add	sp, #36	; 0x24
   d8a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8a64:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8a66:	2301      	movs	r3, #1
   d8a68:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8a6c:	2a00      	cmp	r2, #0
   d8a6e:	d103      	bne.n	d8a78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8a70:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8a74:	2900      	cmp	r1, #0
   d8a76:	d1f7      	bne.n	d8a68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8a78:	d1ef      	bne.n	d8a5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8a7a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8a7c:	f3bf 8f5b 	dmb	ish
   d8a80:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8a82:	1d2b      	adds	r3, r5, #4
   d8a84:	f3bf 8f5b 	dmb	ish
   d8a88:	e853 6f00 	ldrex	r6, [r3]
   d8a8c:	e843 4200 	strex	r2, r4, [r3]
   d8a90:	2a00      	cmp	r2, #0
   d8a92:	d1f9      	bne.n	d8a88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8a94:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8a98:	2e00      	cmp	r6, #0
   d8a9a:	d0de      	beq.n	d8a5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8a9c:	4620      	mov	r0, r4
   d8a9e:	f7ff fb25 	bl	d80ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8aa2:	4607      	mov	r7, r0
   d8aa4:	b160      	cbz	r0, d8ac0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8aa6:	f105 010c 	add.w	r1, r5, #12
   d8aaa:	4630      	mov	r0, r6
   d8aac:	f7ff fe15 	bl	d86da <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8ab0:	4630      	mov	r0, r6
   d8ab2:	f7fb fbf7 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8ab6:	2110      	movs	r1, #16
   d8ab8:	4630      	mov	r0, r6
   d8aba:	f001 fb4b 	bl	da154 <_ZdlPvj>
   d8abe:	e7cc      	b.n	d8a5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8ac0:	4631      	mov	r1, r6
   d8ac2:	a803      	add	r0, sp, #12
   d8ac4:	f7ff ff7c 	bl	d89c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8ac8:	7b2b      	ldrb	r3, [r5, #12]
   d8aca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8ace:	2010      	movs	r0, #16
   d8ad0:	f7fb fae1 	bl	d4096 <_Znwj>
   d8ad4:	4605      	mov	r5, r0
   d8ad6:	b1d0      	cbz	r0, d8b0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8ad8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ada:	2014      	movs	r0, #20
   d8adc:	f7fb fadb 	bl	d4096 <_Znwj>
   d8ae0:	4604      	mov	r4, r0
   d8ae2:	b178      	cbz	r0, d8b04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8ae4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8ae6:	4601      	mov	r1, r0
   d8ae8:	a803      	add	r0, sp, #12
   d8aea:	f7ff fdd4 	bl	d8696 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8aee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8af0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8af2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8af4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8af6:	9205      	str	r2, [sp, #20]
   d8af8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8afa:	60e3      	str	r3, [r4, #12]
   d8afc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8b00:	9206      	str	r2, [sp, #24]
   d8b02:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8b04:	4b06      	ldr	r3, [pc, #24]	; (d8b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8b06:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8b08:	4b06      	ldr	r3, [pc, #24]	; (d8b24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b0a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8b0c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8b0e:	a803      	add	r0, sp, #12
   d8b10:	f7fb fbc8 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8b14:	2200      	movs	r2, #0
   d8b16:	4629      	mov	r1, r5
   d8b18:	4803      	ldr	r0, [pc, #12]	; (d8b28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8b1a:	f7ff faef 	bl	d80fc <application_thread_invoke>
   d8b1e:	e7c7      	b.n	d8ab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8b20:	000d86ed 	.word	0x000d86ed
   d8b24:	000d89df 	.word	0x000d89df
   d8b28:	000d831b 	.word	0x000d831b

000d8b2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8b2c:	2200      	movs	r2, #0
   d8b2e:	6840      	ldr	r0, [r0, #4]
   d8b30:	4611      	mov	r1, r2
   d8b32:	f7ff bb6f 	b.w	d8214 <network_listening>

000d8b36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8b36:	2200      	movs	r2, #0
   d8b38:	6840      	ldr	r0, [r0, #4]
   d8b3a:	4611      	mov	r1, r2
   d8b3c:	f7ff bb7a 	b.w	d8234 <network_get_listen_timeout>

000d8b40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8b40:	6840      	ldr	r0, [r0, #4]
   d8b42:	2200      	movs	r2, #0
   d8b44:	f7ff bb6e 	b.w	d8224 <network_set_listen_timeout>

000d8b48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8b48:	6840      	ldr	r0, [r0, #4]
   d8b4a:	2200      	movs	r2, #0
   d8b4c:	f081 0101 	eor.w	r1, r1, #1
   d8b50:	f7ff bb58 	b.w	d8204 <network_listen>

000d8b54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8b54:	2300      	movs	r3, #0
   d8b56:	6840      	ldr	r0, [r0, #4]
   d8b58:	461a      	mov	r2, r3
   d8b5a:	4619      	mov	r1, r3
   d8b5c:	f7ff bb4a 	b.w	d81f4 <network_off>

000d8b60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8b60:	2300      	movs	r3, #0
   d8b62:	6840      	ldr	r0, [r0, #4]
   d8b64:	461a      	mov	r2, r3
   d8b66:	4619      	mov	r1, r3
   d8b68:	f7ff bb3c 	b.w	d81e4 <network_on>

000d8b6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8b6c:	2200      	movs	r2, #0
   d8b6e:	6840      	ldr	r0, [r0, #4]
   d8b70:	4611      	mov	r1, r2
   d8b72:	f7ff bb2f 	b.w	d81d4 <network_ready>

000d8b76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8b76:	2200      	movs	r2, #0
   d8b78:	6840      	ldr	r0, [r0, #4]
   d8b7a:	4611      	mov	r1, r2
   d8b7c:	f7ff bb1a 	b.w	d81b4 <network_connecting>

000d8b80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8b80:	6840      	ldr	r0, [r0, #4]
   d8b82:	2200      	movs	r2, #0
   d8b84:	2102      	movs	r1, #2
   d8b86:	f7ff bb1d 	b.w	d81c4 <network_disconnect>

000d8b8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8b8a:	2300      	movs	r3, #0
   d8b8c:	6840      	ldr	r0, [r0, #4]
   d8b8e:	461a      	mov	r2, r3
   d8b90:	f7ff bb08 	b.w	d81a4 <network_connect>

000d8b94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8b94:	4b02      	ldr	r3, [pc, #8]	; (d8ba0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8b96:	2203      	movs	r2, #3
   d8b98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8b9a:	4a02      	ldr	r2, [pc, #8]	; (d8ba4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8b9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8b9e:	4770      	bx	lr
   d8ba0:	2003e580 	.word	0x2003e580
   d8ba4:	000dddf8 	.word	0x000dddf8

000d8ba8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8ba8:	4770      	bx	lr

000d8baa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bac:	4606      	mov	r6, r0
   d8bae:	4615      	mov	r5, r2
   d8bb0:	460c      	mov	r4, r1
   d8bb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8bb4:	42bc      	cmp	r4, r7
   d8bb6:	d006      	beq.n	d8bc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8bb8:	6833      	ldr	r3, [r6, #0]
   d8bba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8bbe:	689b      	ldr	r3, [r3, #8]
   d8bc0:	4630      	mov	r0, r6
   d8bc2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8bc4:	e7f6      	b.n	d8bb4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8bc6:	4628      	mov	r0, r5
   d8bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8bca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8bca:	7c00      	ldrb	r0, [r0, #16]
   d8bcc:	2200      	movs	r2, #0
   d8bce:	f7ff b93b 	b.w	d7e48 <hal_i2c_write>

000d8bd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8bd2:	7c00      	ldrb	r0, [r0, #16]
   d8bd4:	2100      	movs	r1, #0
   d8bd6:	f7ff b93f 	b.w	d7e58 <hal_i2c_available>

000d8bda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8bda:	7c00      	ldrb	r0, [r0, #16]
   d8bdc:	2100      	movs	r1, #0
   d8bde:	f7ff b943 	b.w	d7e68 <hal_i2c_read>

000d8be2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8be2:	7c00      	ldrb	r0, [r0, #16]
   d8be4:	2100      	movs	r1, #0
   d8be6:	f7ff b947 	b.w	d7e78 <hal_i2c_peek>

000d8bea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8bea:	7c00      	ldrb	r0, [r0, #16]
   d8bec:	2100      	movs	r1, #0
   d8bee:	f7ff b94b 	b.w	d7e88 <hal_i2c_flush>

000d8bf2 <_ZN7TwoWireD0Ev>:
   d8bf2:	b510      	push	{r4, lr}
   d8bf4:	2114      	movs	r1, #20
   d8bf6:	4604      	mov	r4, r0
   d8bf8:	f001 faac 	bl	da154 <_ZdlPvj>
   d8bfc:	4620      	mov	r0, r4
   d8bfe:	bd10      	pop	{r4, pc}

000d8c00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8c00:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8c06:	4604      	mov	r4, r0
   d8c08:	4608      	mov	r0, r1
   d8c0a:	2100      	movs	r1, #0
   d8c0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8c10:	4b03      	ldr	r3, [pc, #12]	; (d8c20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8c12:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8c14:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8c16:	4611      	mov	r1, r2
   d8c18:	f7ff f946 	bl	d7ea8 <hal_i2c_init>
}
   d8c1c:	4620      	mov	r0, r4
   d8c1e:	bd10      	pop	{r4, pc}
   d8c20:	000dde34 	.word	0x000dde34

000d8c24 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d8c24:	7c00      	ldrb	r0, [r0, #16]
   d8c26:	2200      	movs	r2, #0
   d8c28:	f7ff b8ee 	b.w	d7e08 <hal_i2c_set_speed>

000d8c2c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8c2c:	2300      	movs	r3, #0
   d8c2e:	7c00      	ldrb	r0, [r0, #16]
   d8c30:	461a      	mov	r2, r3
   d8c32:	4619      	mov	r1, r3
   d8c34:	f7ff b8f0 	b.w	d7e18 <hal_i2c_begin>

000d8c38 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8c38:	7c00      	ldrb	r0, [r0, #16]
   d8c3a:	2200      	movs	r2, #0
   d8c3c:	f7ff b8f4 	b.w	d7e28 <hal_i2c_begin_transmission>

000d8c40 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8c40:	b2c9      	uxtb	r1, r1
   d8c42:	f7ff bff9 	b.w	d8c38 <_ZN7TwoWire17beginTransmissionEh>

000d8c46 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8c46:	7c00      	ldrb	r0, [r0, #16]
   d8c48:	2200      	movs	r2, #0
   d8c4a:	f7ff b8f5 	b.w	d7e38 <hal_i2c_end_transmission>

000d8c4e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8c4e:	2101      	movs	r1, #1
   d8c50:	f7ff bff9 	b.w	d8c46 <_ZN7TwoWire15endTransmissionEh>

000d8c54 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8c54:	4700      	bx	r0
	...

000d8c58 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8c58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8c5c:	2400      	movs	r4, #0
{
   d8c5e:	461d      	mov	r5, r3
   d8c60:	460f      	mov	r7, r1
   d8c62:	4690      	mov	r8, r2
   d8c64:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8c66:	f7ff f8c7 	bl	d7df8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8c6a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8c6c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8c70:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8c74:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8c78:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8c7c:	bfa2      	ittt	ge
   d8c7e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8c82:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8c86:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8c88:	4907      	ldr	r1, [pc, #28]	; (d8ca8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8c8a:	9400      	str	r4, [sp, #0]
   d8c8c:	4643      	mov	r3, r8
   d8c8e:	463a      	mov	r2, r7
   d8c90:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8c92:	bfa8      	it	ge
   d8c94:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8c98:	f7ff f8a6 	bl	d7de8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8c9c:	fab0 f080 	clz	r0, r0
   d8ca0:	0940      	lsrs	r0, r0, #5
   d8ca2:	b004      	add	sp, #16
   d8ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8ca8:	000d8c55 	.word	0x000d8c55

000d8cac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8cac:	4770      	bx	lr

000d8cae <_ZN9IPAddressD0Ev>:
   d8cae:	b510      	push	{r4, lr}
   d8cb0:	2118      	movs	r1, #24
   d8cb2:	4604      	mov	r4, r0
   d8cb4:	f001 fa4e 	bl	da154 <_ZdlPvj>
   d8cb8:	4620      	mov	r0, r4
   d8cba:	bd10      	pop	{r4, pc}

000d8cbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8cbe:	7d03      	ldrb	r3, [r0, #20]
   d8cc0:	2b06      	cmp	r3, #6
{
   d8cc2:	b08d      	sub	sp, #52	; 0x34
   d8cc4:	460e      	mov	r6, r1
   d8cc6:	f100 0704 	add.w	r7, r0, #4
   d8cca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8cce:	d012      	beq.n	d8cf6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8cd0:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8cd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8cd8:	220a      	movs	r2, #10
   d8cda:	4630      	mov	r0, r6
   d8cdc:	f000 f943 	bl	d8f66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8ce0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8ce2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8ce4:	d019      	beq.n	d8d1a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8ce6:	2c00      	cmp	r4, #0
   d8ce8:	d0f4      	beq.n	d8cd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8cea:	212e      	movs	r1, #46	; 0x2e
   d8cec:	4630      	mov	r0, r6
   d8cee:	f000 f921 	bl	d8f34 <_ZN5Print5printEc>
   d8cf2:	4404      	add	r4, r0
   d8cf4:	e7ee      	b.n	d8cd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8cf6:	232f      	movs	r3, #47	; 0x2f
   d8cf8:	466a      	mov	r2, sp
   d8cfa:	4639      	mov	r1, r7
   d8cfc:	200a      	movs	r0, #10
		buf[0] = 0;
   d8cfe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8d02:	f7ff f8d9 	bl	d7eb8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8d06:	4668      	mov	r0, sp
   d8d08:	f002 f975 	bl	daff6 <strlen>
   d8d0c:	6833      	ldr	r3, [r6, #0]
   d8d0e:	4602      	mov	r2, r0
   d8d10:	68db      	ldr	r3, [r3, #12]
   d8d12:	4669      	mov	r1, sp
   d8d14:	4630      	mov	r0, r6
   d8d16:	4798      	blx	r3
   d8d18:	4604      	mov	r4, r0
    }
    return n;
}
   d8d1a:	4620      	mov	r0, r4
   d8d1c:	b00d      	add	sp, #52	; 0x34
   d8d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8d20 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8d20:	b510      	push	{r4, lr}
   d8d22:	4b05      	ldr	r3, [pc, #20]	; (d8d38 <_ZN9IPAddressC1Ev+0x18>)
   d8d24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8d26:	2211      	movs	r2, #17
   d8d28:	f840 3b04 	str.w	r3, [r0], #4
   d8d2c:	2100      	movs	r1, #0
   d8d2e:	f002 f906 	bl	daf3e <memset>
}
   d8d32:	4620      	mov	r0, r4
   d8d34:	bd10      	pop	{r4, pc}
   d8d36:	bf00      	nop
   d8d38:	000dde5c 	.word	0x000dde5c

000d8d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8d3c:	4603      	mov	r3, r0
   d8d3e:	4a07      	ldr	r2, [pc, #28]	; (d8d5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8d40:	b510      	push	{r4, lr}
   d8d42:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8d46:	f101 0210 	add.w	r2, r1, #16
   d8d4a:	f851 4b04 	ldr.w	r4, [r1], #4
   d8d4e:	f843 4b04 	str.w	r4, [r3], #4
   d8d52:	4291      	cmp	r1, r2
   d8d54:	d1f9      	bne.n	d8d4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8d56:	780a      	ldrb	r2, [r1, #0]
   d8d58:	701a      	strb	r2, [r3, #0]
}
   d8d5a:	bd10      	pop	{r4, pc}
   d8d5c:	000dde5c 	.word	0x000dde5c

000d8d60 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8d60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8d62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8d66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8d6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8d6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8d72:	2304      	movs	r3, #4
   d8d74:	6041      	str	r1, [r0, #4]
   d8d76:	7503      	strb	r3, [r0, #20]
}
   d8d78:	bd10      	pop	{r4, pc}

000d8d7a <_ZN9IPAddressaSEPKh>:
{
   d8d7a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8d7c:	78cb      	ldrb	r3, [r1, #3]
   d8d7e:	9300      	str	r3, [sp, #0]
   d8d80:	788b      	ldrb	r3, [r1, #2]
   d8d82:	784a      	ldrb	r2, [r1, #1]
   d8d84:	7809      	ldrb	r1, [r1, #0]
   d8d86:	f7ff ffeb 	bl	d8d60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8d8a:	b002      	add	sp, #8
   d8d8c:	bd10      	pop	{r4, pc}
	...

000d8d90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8d90:	4b01      	ldr	r3, [pc, #4]	; (d8d98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8d92:	4a02      	ldr	r2, [pc, #8]	; (d8d9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8d94:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8d96:	4770      	bx	lr
   d8d98:	2003e588 	.word	0x2003e588
   d8d9c:	000dde68 	.word	0x000dde68

000d8da0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8da0:	2300      	movs	r3, #0
   d8da2:	6840      	ldr	r0, [r0, #4]
   d8da4:	461a      	mov	r2, r3
   d8da6:	f7ff b9fd 	b.w	d81a4 <network_connect>

000d8daa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8daa:	6840      	ldr	r0, [r0, #4]
   d8dac:	2200      	movs	r2, #0
   d8dae:	2102      	movs	r1, #2
   d8db0:	f7ff ba08 	b.w	d81c4 <network_disconnect>

000d8db4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8db4:	2200      	movs	r2, #0
   d8db6:	6840      	ldr	r0, [r0, #4]
   d8db8:	4611      	mov	r1, r2
   d8dba:	f7ff b9fb 	b.w	d81b4 <network_connecting>

000d8dbe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8dbe:	2200      	movs	r2, #0
   d8dc0:	6840      	ldr	r0, [r0, #4]
   d8dc2:	4611      	mov	r1, r2
   d8dc4:	f7ff ba06 	b.w	d81d4 <network_ready>

000d8dc8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8dc8:	2300      	movs	r3, #0
   d8dca:	6840      	ldr	r0, [r0, #4]
   d8dcc:	461a      	mov	r2, r3
   d8dce:	4619      	mov	r1, r3
   d8dd0:	f7ff ba08 	b.w	d81e4 <network_on>

000d8dd4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8dd4:	2300      	movs	r3, #0
   d8dd6:	6840      	ldr	r0, [r0, #4]
   d8dd8:	461a      	mov	r2, r3
   d8dda:	4619      	mov	r1, r3
   d8ddc:	f7ff ba0a 	b.w	d81f4 <network_off>

000d8de0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8de0:	6840      	ldr	r0, [r0, #4]
   d8de2:	2100      	movs	r1, #0
   d8de4:	f7ff ba2e 	b.w	d8244 <network_is_on>

000d8de8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8de8:	6840      	ldr	r0, [r0, #4]
   d8dea:	2100      	movs	r1, #0
   d8dec:	f7ff ba32 	b.w	d8254 <network_is_off>

000d8df0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8df0:	6840      	ldr	r0, [r0, #4]
   d8df2:	2200      	movs	r2, #0
   d8df4:	f081 0101 	eor.w	r1, r1, #1
   d8df8:	f7ff ba04 	b.w	d8204 <network_listen>

000d8dfc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8dfc:	6840      	ldr	r0, [r0, #4]
   d8dfe:	2200      	movs	r2, #0
   d8e00:	f7ff ba10 	b.w	d8224 <network_set_listen_timeout>

000d8e04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8e04:	2200      	movs	r2, #0
   d8e06:	6840      	ldr	r0, [r0, #4]
   d8e08:	4611      	mov	r1, r2
   d8e0a:	f7ff ba13 	b.w	d8234 <network_get_listen_timeout>

000d8e0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8e0e:	2200      	movs	r2, #0
   d8e10:	6840      	ldr	r0, [r0, #4]
   d8e12:	4611      	mov	r1, r2
   d8e14:	f7ff b9fe 	b.w	d8214 <network_listening>

000d8e18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8e1c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8e1e:	b095      	sub	sp, #84	; 0x54
   d8e20:	4616      	mov	r6, r2
   d8e22:	460d      	mov	r5, r1
   d8e24:	4607      	mov	r7, r0
    IPAddress addr;
   d8e26:	f7ff ff7b 	bl	d8d20 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8e2a:	4621      	mov	r1, r4
   d8e2c:	2218      	movs	r2, #24
   d8e2e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8e30:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8e32:	f002 f884 	bl	daf3e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8e36:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8e38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8e3c:	4621      	mov	r1, r4
   d8e3e:	466b      	mov	r3, sp
   d8e40:	aa0c      	add	r2, sp, #48	; 0x30
   d8e42:	4630      	mov	r0, r6
   d8e44:	f7ff f848 	bl	d7ed8 <netdb_getaddrinfo>
    if (!r) {
   d8e48:	4604      	mov	r4, r0
   d8e4a:	2800      	cmp	r0, #0
   d8e4c:	d146      	bne.n	d8edc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8e4e:	4602      	mov	r2, r0
   d8e50:	2101      	movs	r1, #1
   d8e52:	6868      	ldr	r0, [r5, #4]
   d8e54:	f7ff f9be 	bl	d81d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8e58:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8e5a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8e5c:	4622      	mov	r2, r4
   d8e5e:	6868      	ldr	r0, [r5, #4]
   d8e60:	f7ff f9b8 	bl	d81d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e64:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8e66:	4681      	mov	r9, r0
        bool ok = false;
   d8e68:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e6a:	2e00      	cmp	r6, #0
   d8e6c:	d036      	beq.n	d8edc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8e6e:	2900      	cmp	r1, #0
   d8e70:	d134      	bne.n	d8edc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8e72:	6873      	ldr	r3, [r6, #4]
   d8e74:	2b02      	cmp	r3, #2
   d8e76:	d003      	beq.n	d8e80 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8e78:	2b0a      	cmp	r3, #10
   d8e7a:	d00b      	beq.n	d8e94 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e7c:	69f6      	ldr	r6, [r6, #28]
   d8e7e:	e7f4      	b.n	d8e6a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8e80:	f1b8 0f00 	cmp.w	r8, #0
   d8e84:	d004      	beq.n	d8e90 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8e86:	6971      	ldr	r1, [r6, #20]
   d8e88:	4638      	mov	r0, r7
   d8e8a:	3104      	adds	r1, #4
   d8e8c:	f7ff ff75 	bl	d8d7a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8e90:	4641      	mov	r1, r8
   d8e92:	e7f3      	b.n	d8e7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8e94:	f1b9 0f00 	cmp.w	r9, #0
   d8e98:	d101      	bne.n	d8e9e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8e9a:	4649      	mov	r1, r9
   d8e9c:	e7ee      	b.n	d8e7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8e9e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8ea0:	2210      	movs	r2, #16
   d8ea2:	a801      	add	r0, sp, #4
   d8ea4:	f002 f84b 	bl	daf3e <memset>
                    a.v = 6;
   d8ea8:	2306      	movs	r3, #6
   d8eaa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8eae:	ad01      	add	r5, sp, #4
   d8eb0:	f104 0308 	add.w	r3, r4, #8
   d8eb4:	3418      	adds	r4, #24
   d8eb6:	6818      	ldr	r0, [r3, #0]
   d8eb8:	6859      	ldr	r1, [r3, #4]
   d8eba:	462a      	mov	r2, r5
   d8ebc:	c203      	stmia	r2!, {r0, r1}
   d8ebe:	3308      	adds	r3, #8
   d8ec0:	42a3      	cmp	r3, r4
   d8ec2:	4615      	mov	r5, r2
   d8ec4:	d1f7      	bne.n	d8eb6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8ec6:	a901      	add	r1, sp, #4
   d8ec8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8eca:	ad07      	add	r5, sp, #28
   d8ecc:	f7ff ff36 	bl	d8d3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8ed2:	1d3c      	adds	r4, r7, #4
   d8ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ed6:	682b      	ldr	r3, [r5, #0]
   d8ed8:	7023      	strb	r3, [r4, #0]
   d8eda:	e7de      	b.n	d8e9a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8edc:	9800      	ldr	r0, [sp, #0]
   d8ede:	f7fe fff3 	bl	d7ec8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8ee2:	4638      	mov	r0, r7
   d8ee4:	b015      	add	sp, #84	; 0x54
   d8ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8eec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8eec:	4b02      	ldr	r3, [pc, #8]	; (d8ef8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8eee:	4a03      	ldr	r2, [pc, #12]	; (d8efc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8ef0:	601a      	str	r2, [r3, #0]
   d8ef2:	2200      	movs	r2, #0
   d8ef4:	605a      	str	r2, [r3, #4]

} // spark
   d8ef6:	4770      	bx	lr
   d8ef8:	2003e58c 	.word	0x2003e58c
   d8efc:	000dde74 	.word	0x000dde74

000d8f00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f02:	4606      	mov	r6, r0
   d8f04:	460d      	mov	r5, r1
  size_t n = 0;
   d8f06:	188f      	adds	r7, r1, r2
   d8f08:	2400      	movs	r4, #0
  while (size--) {
   d8f0a:	42bd      	cmp	r5, r7
   d8f0c:	d00c      	beq.n	d8f28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8f0e:	6833      	ldr	r3, [r6, #0]
   d8f10:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8f14:	689b      	ldr	r3, [r3, #8]
   d8f16:	4630      	mov	r0, r6
   d8f18:	4798      	blx	r3
     if (chunk>=0)
   d8f1a:	1e03      	subs	r3, r0, #0
   d8f1c:	db01      	blt.n	d8f22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8f1e:	441c      	add	r4, r3
  while (size--) {
   d8f20:	e7f3      	b.n	d8f0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8f22:	2c00      	cmp	r4, #0
   d8f24:	bf08      	it	eq
   d8f26:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8f28:	4620      	mov	r0, r4
   d8f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8f2c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8f2c:	b508      	push	{r3, lr}
  return write(str);
   d8f2e:	f7fe f9bd 	bl	d72ac <_ZN5Print5writeEPKc>
}
   d8f32:	bd08      	pop	{r3, pc}

000d8f34 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8f34:	6803      	ldr	r3, [r0, #0]
   d8f36:	689b      	ldr	r3, [r3, #8]
   d8f38:	4718      	bx	r3

000d8f3a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8f3a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8f3c:	210d      	movs	r1, #13
{
   d8f3e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8f40:	f7ff fff8 	bl	d8f34 <_ZN5Print5printEc>
  n += print('\n');
   d8f44:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8f46:	4604      	mov	r4, r0
  n += print('\n');
   d8f48:	4628      	mov	r0, r5
   d8f4a:	f7ff fff3 	bl	d8f34 <_ZN5Print5printEc>
  return n;
}
   d8f4e:	4420      	add	r0, r4
   d8f50:	bd38      	pop	{r3, r4, r5, pc}

000d8f52 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8f52:	b538      	push	{r3, r4, r5, lr}
   d8f54:	4605      	mov	r5, r0
  return write(str);
   d8f56:	f7fe f9a9 	bl	d72ac <_ZN5Print5writeEPKc>
   d8f5a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8f5c:	4628      	mov	r0, r5
   d8f5e:	f7ff ffec 	bl	d8f3a <_ZN5Print7printlnEv>
  return n;
}
   d8f62:	4420      	add	r0, r4
   d8f64:	bd38      	pop	{r3, r4, r5, pc}

000d8f66 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8f66:	b530      	push	{r4, r5, lr}
   d8f68:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8f6a:	2300      	movs	r3, #0
   d8f6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8f70:	2a01      	cmp	r2, #1
   d8f72:	bf98      	it	ls
   d8f74:	220a      	movls	r2, #10
   d8f76:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8f78:	460d      	mov	r5, r1
   d8f7a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8f7e:	fb01 5312 	mls	r3, r1, r2, r5
   d8f82:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8f86:	2b09      	cmp	r3, #9
   d8f88:	bf94      	ite	ls
   d8f8a:	3330      	addls	r3, #48	; 0x30
   d8f8c:	3337      	addhi	r3, #55	; 0x37
   d8f8e:	b2db      	uxtb	r3, r3
  } while(n);
   d8f90:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8f92:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8f96:	d9ef      	bls.n	d8f78 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8f98:	4621      	mov	r1, r4
   d8f9a:	f7fe f987 	bl	d72ac <_ZN5Print5writeEPKc>
}
   d8f9e:	b00b      	add	sp, #44	; 0x2c
   d8fa0:	bd30      	pop	{r4, r5, pc}
	...

000d8fa4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fa8:	ec55 4b10 	vmov	r4, r5, d0
   d8fac:	4606      	mov	r6, r0
   d8fae:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8fb0:	ee10 2a10 	vmov	r2, s0
   d8fb4:	ee10 0a10 	vmov	r0, s0
   d8fb8:	462b      	mov	r3, r5
   d8fba:	4629      	mov	r1, r5
   d8fbc:	f001 fd28 	bl	daa10 <__aeabi_dcmpun>
   d8fc0:	b140      	cbz	r0, d8fd4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d8fc2:	4953      	ldr	r1, [pc, #332]	; (d9110 <_ZN5Print10printFloatEdh+0x16c>)
   d8fc4:	4630      	mov	r0, r6
   d8fc6:	f7fe f971 	bl	d72ac <_ZN5Print5writeEPKc>
   d8fca:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8fcc:	4650      	mov	r0, sl
   d8fce:	b003      	add	sp, #12
   d8fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8fd4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8fd8:	4b4e      	ldr	r3, [pc, #312]	; (d9114 <_ZN5Print10printFloatEdh+0x170>)
   d8fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8fde:	4620      	mov	r0, r4
   d8fe0:	4649      	mov	r1, r9
   d8fe2:	f001 fd15 	bl	daa10 <__aeabi_dcmpun>
   d8fe6:	b948      	cbnz	r0, d8ffc <_ZN5Print10printFloatEdh+0x58>
   d8fe8:	4b4a      	ldr	r3, [pc, #296]	; (d9114 <_ZN5Print10printFloatEdh+0x170>)
   d8fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8fee:	4620      	mov	r0, r4
   d8ff0:	4649      	mov	r1, r9
   d8ff2:	f001 fcef 	bl	da9d4 <__aeabi_dcmple>
   d8ff6:	b908      	cbnz	r0, d8ffc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8ff8:	4947      	ldr	r1, [pc, #284]	; (d9118 <_ZN5Print10printFloatEdh+0x174>)
   d8ffa:	e7e3      	b.n	d8fc4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8ffc:	4b47      	ldr	r3, [pc, #284]	; (d911c <_ZN5Print10printFloatEdh+0x178>)
   d8ffe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9002:	4620      	mov	r0, r4
   d9004:	4629      	mov	r1, r5
   d9006:	f001 fcf9 	bl	da9fc <__aeabi_dcmpgt>
   d900a:	b108      	cbz	r0, d9010 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d900c:	4944      	ldr	r1, [pc, #272]	; (d9120 <_ZN5Print10printFloatEdh+0x17c>)
   d900e:	e7d9      	b.n	d8fc4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d9010:	4b44      	ldr	r3, [pc, #272]	; (d9124 <_ZN5Print10printFloatEdh+0x180>)
   d9012:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d9016:	4620      	mov	r0, r4
   d9018:	4629      	mov	r1, r5
   d901a:	f001 fcd1 	bl	da9c0 <__aeabi_dcmplt>
   d901e:	2800      	cmp	r0, #0
   d9020:	d1f4      	bne.n	d900c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d9022:	2200      	movs	r2, #0
   d9024:	2300      	movs	r3, #0
   d9026:	4620      	mov	r0, r4
   d9028:	4629      	mov	r1, r5
   d902a:	f001 fcc9 	bl	da9c0 <__aeabi_dcmplt>
   d902e:	b1d0      	cbz	r0, d9066 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d9030:	212d      	movs	r1, #45	; 0x2d
   d9032:	4630      	mov	r0, r6
   d9034:	f7ff ff7e 	bl	d8f34 <_ZN5Print5printEc>
     number = -number;
   d9038:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d903c:	4682      	mov	sl, r0
     number = -number;
   d903e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d9040:	4939      	ldr	r1, [pc, #228]	; (d9128 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d9042:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d9130 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d9046:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d904a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d904c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d9050:	fa5f f38b 	uxtb.w	r3, fp
   d9054:	429f      	cmp	r7, r3
   d9056:	d908      	bls.n	d906a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d9058:	4642      	mov	r2, r8
   d905a:	464b      	mov	r3, r9
   d905c:	f001 fb68 	bl	da730 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d9060:	f10b 0b01 	add.w	fp, fp, #1
   d9064:	e7f4      	b.n	d9050 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d9066:	4682      	mov	sl, r0
   d9068:	e7ea      	b.n	d9040 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d906a:	4622      	mov	r2, r4
   d906c:	462b      	mov	r3, r5
   d906e:	f001 f87f 	bl	da170 <__adddf3>
   d9072:	460d      	mov	r5, r1
   d9074:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d9076:	f001 fd09 	bl	daa8c <__aeabi_d2uiz>
   d907a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d907c:	f001 f9b4 	bl	da3e8 <__aeabi_ui2d>
   d9080:	4602      	mov	r2, r0
   d9082:	460b      	mov	r3, r1
   d9084:	4620      	mov	r0, r4
   d9086:	4629      	mov	r1, r5
   d9088:	f001 f870 	bl	da16c <__aeabi_dsub>
        return printNumber(val, base) + t;
   d908c:	220a      	movs	r2, #10
   d908e:	4604      	mov	r4, r0
   d9090:	460d      	mov	r5, r1
   d9092:	4630      	mov	r0, r6
   d9094:	4641      	mov	r1, r8
   d9096:	f7ff ff66 	bl	d8f66 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d909a:	4482      	add	sl, r0
  if (digits > 0) {
   d909c:	b127      	cbz	r7, d90a8 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d909e:	4923      	ldr	r1, [pc, #140]	; (d912c <_ZN5Print10printFloatEdh+0x188>)
   d90a0:	4630      	mov	r0, r6
   d90a2:	f7fe f903 	bl	d72ac <_ZN5Print5writeEPKc>
    n += print(".");
   d90a6:	4482      	add	sl, r0
    remainder *= 10.0;
   d90a8:	f8df 9084 	ldr.w	r9, [pc, #132]	; d9130 <_ZN5Print10printFloatEdh+0x18c>
   d90ac:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d90b0:	3f01      	subs	r7, #1
   d90b2:	b2ff      	uxtb	r7, r7
   d90b4:	2fff      	cmp	r7, #255	; 0xff
   d90b6:	d089      	beq.n	d8fcc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d90b8:	4642      	mov	r2, r8
   d90ba:	464b      	mov	r3, r9
   d90bc:	4620      	mov	r0, r4
   d90be:	4629      	mov	r1, r5
   d90c0:	f001 fa0c 	bl	da4dc <__aeabi_dmul>
   d90c4:	4604      	mov	r4, r0
   d90c6:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d90c8:	f001 fcb8 	bl	daa3c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d90cc:	f1b0 0b00 	subs.w	fp, r0, #0
   d90d0:	da1a      	bge.n	d9108 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d90d2:	212d      	movs	r1, #45	; 0x2d
   d90d4:	4630      	mov	r0, r6
   d90d6:	f7ff ff2d 	bl	d8f34 <_ZN5Print5printEc>
            val = -n;
   d90da:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d90de:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d90e0:	220a      	movs	r2, #10
   d90e2:	4630      	mov	r0, r6
   d90e4:	9301      	str	r3, [sp, #4]
   d90e6:	f7ff ff3e 	bl	d8f66 <_ZN5Print11printNumberEmh>
   d90ea:	9b01      	ldr	r3, [sp, #4]
   d90ec:	4418      	add	r0, r3
    n += print(toPrint);
   d90ee:	4482      	add	sl, r0
    remainder -= toPrint;
   d90f0:	4658      	mov	r0, fp
   d90f2:	f001 f989 	bl	da408 <__aeabi_i2d>
   d90f6:	4602      	mov	r2, r0
   d90f8:	460b      	mov	r3, r1
   d90fa:	4620      	mov	r0, r4
   d90fc:	4629      	mov	r1, r5
   d90fe:	f001 f835 	bl	da16c <__aeabi_dsub>
   d9102:	4604      	mov	r4, r0
   d9104:	460d      	mov	r5, r1
  while (digits-- > 0)
   d9106:	e7d3      	b.n	d90b0 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d9108:	4659      	mov	r1, fp
        size_t t = 0;
   d910a:	2300      	movs	r3, #0
   d910c:	e7e8      	b.n	d90e0 <_ZN5Print10printFloatEdh+0x13c>
   d910e:	bf00      	nop
   d9110:	000ddea8 	.word	0x000ddea8
   d9114:	7fefffff 	.word	0x7fefffff
   d9118:	000ddeac 	.word	0x000ddeac
   d911c:	41efffff 	.word	0x41efffff
   d9120:	000ddeb0 	.word	0x000ddeb0
   d9124:	c1efffff 	.word	0xc1efffff
   d9128:	3fe00000 	.word	0x3fe00000
   d912c:	000dd0cc 	.word	0x000dd0cc
   d9130:	40240000 	.word	0x40240000

000d9134 <_ZN5Print5printEfi>:
{
   d9134:	b538      	push	{r3, r4, r5, lr}
   d9136:	4604      	mov	r4, r0
   d9138:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d913c:	b2cd      	uxtb	r5, r1
   d913e:	f001 f975 	bl	da42c <__aeabi_f2d>
   d9142:	ec41 0b10 	vmov	d0, r0, r1
   d9146:	4629      	mov	r1, r5
   d9148:	4620      	mov	r0, r4
}
   d914a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d914e:	f7ff bf29 	b.w	d8fa4 <_ZN5Print10printFloatEdh>

000d9152 <_ZN5Print7printlnEdi>:
{
   d9152:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d9154:	b2c9      	uxtb	r1, r1
{
   d9156:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d9158:	f7ff ff24 	bl	d8fa4 <_ZN5Print10printFloatEdh>
   d915c:	4604      	mov	r4, r0
  n += println();
   d915e:	4628      	mov	r0, r5
   d9160:	f7ff feeb 	bl	d8f3a <_ZN5Print7printlnEv>
}
   d9164:	4420      	add	r0, r4
   d9166:	bd38      	pop	{r3, r4, r5, pc}

000d9168 <_ZN5Print7printlnEfi>:
{
   d9168:	b538      	push	{r3, r4, r5, lr}
   d916a:	4604      	mov	r4, r0
   d916c:	ee10 0a10 	vmov	r0, s0
   d9170:	460d      	mov	r5, r1
    return println((double)num, digits);
   d9172:	f001 f95b 	bl	da42c <__aeabi_f2d>
   d9176:	ec41 0b10 	vmov	d0, r0, r1
   d917a:	4629      	mov	r1, r5
   d917c:	4620      	mov	r0, r4
}
   d917e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d9182:	f7ff bfe6 	b.w	d9152 <_ZN5Print7printlnEdi>

000d9186 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d918a:	b086      	sub	sp, #24
   d918c:	af00      	add	r7, sp, #0
   d918e:	4605      	mov	r5, r0
   d9190:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d9192:	1d38      	adds	r0, r7, #4
   d9194:	2114      	movs	r1, #20
{
   d9196:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9198:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d919a:	f7ff f88b 	bl	d82b4 <vsnprintf>

    if (n<bufsize)
   d919e:	2813      	cmp	r0, #19
   d91a0:	d80e      	bhi.n	d91c0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d91a2:	1d39      	adds	r1, r7, #4
   d91a4:	4628      	mov	r0, r5
   d91a6:	f7fe f881 	bl	d72ac <_ZN5Print5writeEPKc>
   d91aa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d91ac:	b11e      	cbz	r6, d91b6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d91ae:	4628      	mov	r0, r5
   d91b0:	f7ff fec3 	bl	d8f3a <_ZN5Print7printlnEv>
   d91b4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d91b6:	4620      	mov	r0, r4
   d91b8:	3718      	adds	r7, #24
   d91ba:	46bd      	mov	sp, r7
   d91bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d91c0:	f100 0308 	add.w	r3, r0, #8
   d91c4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d91c8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d91ca:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d91ce:	4622      	mov	r2, r4
   d91d0:	1c41      	adds	r1, r0, #1
   d91d2:	683b      	ldr	r3, [r7, #0]
   d91d4:	4668      	mov	r0, sp
   d91d6:	f7ff f86d 	bl	d82b4 <vsnprintf>
  return write(str);
   d91da:	4669      	mov	r1, sp
   d91dc:	4628      	mov	r0, r5
   d91de:	f7fe f865 	bl	d72ac <_ZN5Print5writeEPKc>
   d91e2:	4604      	mov	r4, r0
   d91e4:	46c5      	mov	sp, r8
   d91e6:	e7e1      	b.n	d91ac <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d91e8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d91e8:	4b01      	ldr	r3, [pc, #4]	; (d91f0 <_GLOBAL__sub_I_RGB+0x8>)
   d91ea:	2200      	movs	r2, #0
   d91ec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d91ee:	4770      	bx	lr
   d91f0:	2003e594 	.word	0x2003e594

000d91f4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d91f4:	2100      	movs	r1, #0
   d91f6:	f7fe bebf 	b.w	d7f78 <hal_spi_acquire>

000d91fa <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d91fa:	2100      	movs	r1, #0
   d91fc:	f7fe bec4 	b.w	d7f88 <hal_spi_release>

000d9200 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9200:	b510      	push	{r4, lr}
   d9202:	4604      	mov	r4, r0
   d9204:	4608      	mov	r0, r1
{
    _spi = spi;
   d9206:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9208:	f7fe fe86 	bl	d7f18 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d920c:	2300      	movs	r3, #0
   d920e:	6063      	str	r3, [r4, #4]
}
   d9210:	4620      	mov	r0, r4
   d9212:	bd10      	pop	{r4, pc}

000d9214 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9214:	b510      	push	{r4, lr}
   d9216:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9218:	7800      	ldrb	r0, [r0, #0]
   d921a:	f7ff ffeb 	bl	d91f4 <_ZN8SPIClass4lockEv.isra.0>
   d921e:	b948      	cbnz	r0, d9234 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9220:	7820      	ldrb	r0, [r4, #0]
   d9222:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9226:	f7fe fe5f 	bl	d7ee8 <hal_spi_begin>
        unlock();
   d922a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9230:	f7ff bfe3 	b.w	d91fa <_ZN8SPIClass6unlockEv.isra.0>
}
   d9234:	bd10      	pop	{r4, pc}

000d9236 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d9236:	b513      	push	{r0, r1, r4, lr}
   d9238:	4604      	mov	r4, r0
    if (!lock())
   d923a:	7800      	ldrb	r0, [r0, #0]
{
   d923c:	9101      	str	r1, [sp, #4]
    if (!lock())
   d923e:	f7ff ffd9 	bl	d91f4 <_ZN8SPIClass4lockEv.isra.0>
   d9242:	9901      	ldr	r1, [sp, #4]
   d9244:	b940      	cbnz	r0, d9258 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d9246:	7820      	ldrb	r0, [r4, #0]
   d9248:	f7fe fe56 	bl	d7ef8 <hal_spi_set_data_mode>
        unlock();
   d924c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d924e:	b002      	add	sp, #8
   d9250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9254:	f7ff bfd1 	b.w	d91fa <_ZN8SPIClass6unlockEv.isra.0>
}
   d9258:	b002      	add	sp, #8
   d925a:	bd10      	pop	{r4, pc}

000d925c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d925c:	7800      	ldrb	r0, [r0, #0]
   d925e:	f7ff bfcc 	b.w	d91fa <_ZN8SPIClass6unlockEv.isra.0>
	...

000d9264 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9264:	0840      	lsrs	r0, r0, #1
{
   d9266:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9268:	6018      	str	r0, [r3, #0]
   d926a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d926c:	6818      	ldr	r0, [r3, #0]
   d926e:	4288      	cmp	r0, r1
   d9270:	b2e5      	uxtb	r5, r4
   d9272:	d906      	bls.n	d9282 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9274:	3401      	adds	r4, #1
   d9276:	2c08      	cmp	r4, #8
   d9278:	d002      	beq.n	d9280 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d927a:	0840      	lsrs	r0, r0, #1
   d927c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d927e:	e7f5      	b.n	d926c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9280:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d9282:	4b02      	ldr	r3, [pc, #8]	; (d928c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9284:	5d5b      	ldrb	r3, [r3, r5]
   d9286:	7013      	strb	r3, [r2, #0]
}
   d9288:	bd30      	pop	{r4, r5, pc}
   d928a:	bf00      	nop
   d928c:	000ddeb4 	.word	0x000ddeb4

000d9290 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9294:	4606      	mov	r6, r0
   d9296:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d9298:	7800      	ldrb	r0, [r0, #0]
{
   d929a:	460c      	mov	r4, r1
    CHECK(lock());
   d929c:	f7ff ffaa 	bl	d91f4 <_ZN8SPIClass4lockEv.isra.0>
   d92a0:	2800      	cmp	r0, #0
   d92a2:	db1b      	blt.n	d92dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d92a4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d92a6:	2214      	movs	r2, #20
   d92a8:	2100      	movs	r1, #0
   d92aa:	a809      	add	r0, sp, #36	; 0x24
   d92ac:	f001 fe47 	bl	daf3e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d92b0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d92b2:	2200      	movs	r2, #0
   d92b4:	a909      	add	r1, sp, #36	; 0x24
   d92b6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d92b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d92bc:	f7fe fe3c 	bl	d7f38 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d92c0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d92c4:	b113      	cbz	r3, d92cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d92c6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d92ca:	b155      	cbz	r5, d92e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d92cc:	2700      	movs	r7, #0
   d92ce:	46b9      	mov	r9, r7
   d92d0:	46b8      	mov	r8, r7
   d92d2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d92d4:	7923      	ldrb	r3, [r4, #4]
   d92d6:	b15d      	cbz	r5, d92f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d92d8:	b1c3      	cbz	r3, d930c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d92da:	2000      	movs	r0, #0
}
   d92dc:	b00f      	add	sp, #60	; 0x3c
   d92de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d92e2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d92e6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d92ea:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d92ee:	e7f1      	b.n	d92d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d92f0:	2b00      	cmp	r3, #0
   d92f2:	d135      	bne.n	d9360 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d92f4:	68a3      	ldr	r3, [r4, #8]
   d92f6:	4543      	cmp	r3, r8
   d92f8:	d108      	bne.n	d930c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d92fa:	f88d 9020 	strb.w	r9, [sp, #32]
   d92fe:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9302:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9306:	89a3      	ldrh	r3, [r4, #12]
   d9308:	429a      	cmp	r2, r3
   d930a:	d0e6      	beq.n	d92da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d930c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d930e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d9310:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9314:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9316:	ab04      	add	r3, sp, #16
   d9318:	f10d 020f 	add.w	r2, sp, #15
   d931c:	f7ff ffa2 	bl	d9264 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9320:	7921      	ldrb	r1, [r4, #4]
   d9322:	b985      	cbnz	r5, d9346 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9324:	b989      	cbnz	r1, d934a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9326:	68a3      	ldr	r3, [r4, #8]
   d9328:	4543      	cmp	r3, r8
   d932a:	d30e      	bcc.n	d934a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d932c:	f88d 9020 	strb.w	r9, [sp, #32]
   d9330:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9334:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9338:	89a3      	ldrh	r3, [r4, #12]
   d933a:	429a      	cmp	r2, r3
   d933c:	d105      	bne.n	d934a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d933e:	9b04      	ldr	r3, [sp, #16]
   d9340:	4543      	cmp	r3, r8
   d9342:	d102      	bne.n	d934a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9344:	e7c9      	b.n	d92da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9346:	2900      	cmp	r1, #0
   d9348:	d1f9      	bne.n	d933e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d934a:	2300      	movs	r3, #0
   d934c:	9301      	str	r3, [sp, #4]
   d934e:	7b63      	ldrb	r3, [r4, #13]
   d9350:	9300      	str	r3, [sp, #0]
   d9352:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9356:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9358:	7830      	ldrb	r0, [r6, #0]
   d935a:	f7fe fe05 	bl	d7f68 <hal_spi_set_settings>
   d935e:	e7bc      	b.n	d92da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9360:	e9cd 5500 	strd	r5, r5, [sp]
   d9364:	462b      	mov	r3, r5
   d9366:	462a      	mov	r2, r5
   d9368:	2101      	movs	r1, #1
   d936a:	e7f5      	b.n	d9358 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d936c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d936c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d936e:	7800      	ldrb	r0, [r0, #0]
   d9370:	f7fe fdca 	bl	d7f08 <hal_spi_transfer>
}
   d9374:	b2c0      	uxtb	r0, r0
   d9376:	bd08      	pop	{r3, pc}

000d9378 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9378:	b530      	push	{r4, r5, lr}
   d937a:	b087      	sub	sp, #28
   d937c:	4604      	mov	r4, r0
   d937e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9380:	9500      	str	r5, [sp, #0]
   d9382:	7800      	ldrb	r0, [r0, #0]
   d9384:	f7fe fde0 	bl	d7f48 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d9388:	b93d      	cbnz	r5, d939a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d938a:	7820      	ldrb	r0, [r4, #0]
   d938c:	a902      	add	r1, sp, #8
   d938e:	f7fe fde3 	bl	d7f58 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d9392:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d9396:	07db      	lsls	r3, r3, #31
   d9398:	d4f7      	bmi.n	d938a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d939a:	b007      	add	sp, #28
   d939c:	bd30      	pop	{r4, r5, pc}
	...

000d93a0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d93a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93a4:	ec57 6b10 	vmov	r6, r7, d0
   d93a8:	4680      	mov	r8, r0
   d93aa:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d93ac:	ee10 0a10 	vmov	r0, s0
   d93b0:	2200      	movs	r2, #0
   d93b2:	2300      	movs	r3, #0
   d93b4:	4639      	mov	r1, r7
   d93b6:	f001 fb03 	bl	da9c0 <__aeabi_dcmplt>
   d93ba:	b128      	cbz	r0, d93c8 <_Z4dtoadhPc+0x28>
        val = -val;
   d93bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d93c0:	461f      	mov	r7, r3
        *sout++ = '-';
   d93c2:	232d      	movs	r3, #45	; 0x2d
   d93c4:	f804 3b01 	strb.w	r3, [r4], #1
   d93c8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d93ca:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d93ce:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d93d0:	b2d9      	uxtb	r1, r3
   d93d2:	4588      	cmp	r8, r1
   d93d4:	d903      	bls.n	d93de <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d93d6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d93da:	3301      	adds	r3, #1
   d93dc:	e7f8      	b.n	d93d0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d93de:	4648      	mov	r0, r9
   d93e0:	f001 f812 	bl	da408 <__aeabi_i2d>
   d93e4:	4632      	mov	r2, r6
   d93e6:	463b      	mov	r3, r7
   d93e8:	f001 f878 	bl	da4dc <__aeabi_dmul>
   d93ec:	4606      	mov	r6, r0
   d93ee:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d93f0:	f001 fbd4 	bl	dab9c <__aeabi_d2ulz>
   d93f4:	4605      	mov	r5, r0
   d93f6:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d93f8:	f001 f83a 	bl	da470 <__aeabi_ul2d>
   d93fc:	4602      	mov	r2, r0
   d93fe:	460b      	mov	r3, r1
   d9400:	4630      	mov	r0, r6
   d9402:	4639      	mov	r1, r7
   d9404:	f000 feb2 	bl	da16c <__aeabi_dsub>
   d9408:	4b13      	ldr	r3, [pc, #76]	; (d9458 <_Z4dtoadhPc+0xb8>)
   d940a:	2200      	movs	r2, #0
   d940c:	f001 faec 	bl	da9e8 <__aeabi_dcmpge>
   d9410:	b110      	cbz	r0, d9418 <_Z4dtoadhPc+0x78>
        fixed++;
   d9412:	3501      	adds	r5, #1
   d9414:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9418:	464a      	mov	r2, r9
   d941a:	4628      	mov	r0, r5
   d941c:	17d3      	asrs	r3, r2, #31
   d941e:	4651      	mov	r1, sl
   d9420:	f001 fba4 	bl	dab6c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d9424:	2301      	movs	r3, #1
   d9426:	4615      	mov	r5, r2
   d9428:	4621      	mov	r1, r4
   d942a:	220a      	movs	r2, #10
   d942c:	f000 fcf7 	bl	d9e1e <ultoa>
    if (prec) {
   d9430:	f1b8 0f00 	cmp.w	r8, #0
   d9434:	d00d      	beq.n	d9452 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d9436:	4620      	mov	r0, r4
   d9438:	f001 fddd 	bl	daff6 <strlen>
        *sout++ = '.';
   d943c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d943e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d9440:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d9442:	220a      	movs	r2, #10
   d9444:	4643      	mov	r3, r8
   d9446:	4628      	mov	r0, r5
   d9448:	3101      	adds	r1, #1
    }
}
   d944a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d944e:	f000 bce6 	b.w	d9e1e <ultoa>
}
   d9452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9456:	bf00      	nop
   d9458:	3fe00000 	.word	0x3fe00000

000d945c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d945c:	b510      	push	{r4, lr}
   d945e:	4604      	mov	r4, r0
{
	free(buffer);
   d9460:	6800      	ldr	r0, [r0, #0]
   d9462:	f7fe ff07 	bl	d8274 <free>
}
   d9466:	4620      	mov	r0, r4
   d9468:	bd10      	pop	{r4, pc}

000d946a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d946a:	b510      	push	{r4, lr}
   d946c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d946e:	6800      	ldr	r0, [r0, #0]
   d9470:	b108      	cbz	r0, d9476 <_ZN6String10invalidateEv+0xc>
   d9472:	f7fe feff 	bl	d8274 <free>
	buffer = NULL;
   d9476:	2300      	movs	r3, #0
	capacity = len = 0;
   d9478:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d947c:	6023      	str	r3, [r4, #0]
}
   d947e:	bd10      	pop	{r4, pc}

000d9480 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9480:	b538      	push	{r3, r4, r5, lr}
   d9482:	4604      	mov	r4, r0
   d9484:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9486:	6800      	ldr	r0, [r0, #0]
   d9488:	3101      	adds	r1, #1
   d948a:	f7fe fefb 	bl	d8284 <realloc>
	if (newbuffer) {
   d948e:	b110      	cbz	r0, d9496 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9490:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9494:	2001      	movs	r0, #1
	}
	return 0;
}
   d9496:	bd38      	pop	{r3, r4, r5, pc}

000d9498 <_ZN6String7reserveEj>:
{
   d9498:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d949a:	6803      	ldr	r3, [r0, #0]
{
   d949c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d949e:	b123      	cbz	r3, d94aa <_ZN6String7reserveEj+0x12>
   d94a0:	6843      	ldr	r3, [r0, #4]
   d94a2:	428b      	cmp	r3, r1
   d94a4:	d301      	bcc.n	d94aa <_ZN6String7reserveEj+0x12>
   d94a6:	2001      	movs	r0, #1
}
   d94a8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d94aa:	4620      	mov	r0, r4
   d94ac:	f7ff ffe8 	bl	d9480 <_ZN6String12changeBufferEj>
   d94b0:	2800      	cmp	r0, #0
   d94b2:	d0f9      	beq.n	d94a8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d94b4:	68a3      	ldr	r3, [r4, #8]
   d94b6:	2b00      	cmp	r3, #0
   d94b8:	d1f5      	bne.n	d94a6 <_ZN6String7reserveEj+0xe>
   d94ba:	6822      	ldr	r2, [r4, #0]
   d94bc:	7013      	strb	r3, [r2, #0]
   d94be:	e7f2      	b.n	d94a6 <_ZN6String7reserveEj+0xe>

000d94c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d94c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d94c2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d94c4:	4611      	mov	r1, r2
   d94c6:	9201      	str	r2, [sp, #4]
{
   d94c8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d94ca:	f7ff ffe5 	bl	d9498 <_ZN6String7reserveEj>
   d94ce:	9a01      	ldr	r2, [sp, #4]
   d94d0:	b928      	cbnz	r0, d94de <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d94d2:	4620      	mov	r0, r4
   d94d4:	f7ff ffc9 	bl	d946a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d94d8:	4620      	mov	r0, r4
   d94da:	b003      	add	sp, #12
   d94dc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d94de:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d94e0:	4629      	mov	r1, r5
   d94e2:	6820      	ldr	r0, [r4, #0]
   d94e4:	f001 fd1d 	bl	daf22 <memcpy>
	buffer[len] = 0;
   d94e8:	6822      	ldr	r2, [r4, #0]
   d94ea:	68a3      	ldr	r3, [r4, #8]
   d94ec:	2100      	movs	r1, #0
   d94ee:	54d1      	strb	r1, [r2, r3]
	return *this;
   d94f0:	e7f2      	b.n	d94d8 <_ZN6String4copyEPKcj+0x18>

000d94f2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d94f2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d94f4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d94f6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d94fa:	4604      	mov	r4, r0
	len = 0;
   d94fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d94fe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9500:	b141      	cbz	r1, d9514 <_ZN6StringC1EPKc+0x22>
   d9502:	4608      	mov	r0, r1
   d9504:	9101      	str	r1, [sp, #4]
   d9506:	f001 fd76 	bl	daff6 <strlen>
   d950a:	9901      	ldr	r1, [sp, #4]
   d950c:	4602      	mov	r2, r0
   d950e:	4620      	mov	r0, r4
   d9510:	f7ff ffd6 	bl	d94c0 <_ZN6String4copyEPKcj>
}
   d9514:	4620      	mov	r0, r4
   d9516:	b002      	add	sp, #8
   d9518:	bd10      	pop	{r4, pc}

000d951a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d951a:	b538      	push	{r3, r4, r5, lr}
   d951c:	4605      	mov	r5, r0
	if (buffer) {
   d951e:	6800      	ldr	r0, [r0, #0]
{
   d9520:	460c      	mov	r4, r1
	if (buffer) {
   d9522:	b168      	cbz	r0, d9540 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9524:	686a      	ldr	r2, [r5, #4]
   d9526:	688b      	ldr	r3, [r1, #8]
   d9528:	429a      	cmp	r2, r3
   d952a:	d307      	bcc.n	d953c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d952c:	6809      	ldr	r1, [r1, #0]
   d952e:	f001 fd3d 	bl	dafac <strcpy>
			len = rhs.len;
   d9532:	68a3      	ldr	r3, [r4, #8]
   d9534:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9536:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9538:	60a3      	str	r3, [r4, #8]
}
   d953a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d953c:	f7fe fe9a 	bl	d8274 <free>
	buffer = rhs.buffer;
   d9540:	6823      	ldr	r3, [r4, #0]
   d9542:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9544:	6863      	ldr	r3, [r4, #4]
   d9546:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9548:	68a3      	ldr	r3, [r4, #8]
   d954a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d954c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d954e:	e9c4 3300 	strd	r3, r3, [r4]
   d9552:	e7f1      	b.n	d9538 <_ZN6String4moveERS_+0x1e>

000d9554 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9554:	4288      	cmp	r0, r1
{
   d9556:	b510      	push	{r4, lr}
   d9558:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d955a:	d005      	beq.n	d9568 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d955c:	680b      	ldr	r3, [r1, #0]
   d955e:	b12b      	cbz	r3, d956c <_ZN6StringaSERKS_+0x18>
   d9560:	688a      	ldr	r2, [r1, #8]
   d9562:	4619      	mov	r1, r3
   d9564:	f7ff ffac 	bl	d94c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9568:	4620      	mov	r0, r4
   d956a:	bd10      	pop	{r4, pc}
	else invalidate();
   d956c:	f7ff ff7d 	bl	d946a <_ZN6String10invalidateEv>
   d9570:	e7fa      	b.n	d9568 <_ZN6StringaSERKS_+0x14>

000d9572 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9572:	b510      	push	{r4, lr}
	buffer = NULL;
   d9574:	2300      	movs	r3, #0
String::String(const String &value)
   d9576:	4604      	mov	r4, r0
	capacity = 0;
   d9578:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d957c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d957e:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9580:	f7ff ffe8 	bl	d9554 <_ZN6StringaSERKS_>
}
   d9584:	4620      	mov	r0, r4
   d9586:	bd10      	pop	{r4, pc}

000d9588 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9588:	4288      	cmp	r0, r1
{
   d958a:	b510      	push	{r4, lr}
   d958c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d958e:	d001      	beq.n	d9594 <_ZN6StringaSEOS_+0xc>
   d9590:	f7ff ffc3 	bl	d951a <_ZN6String4moveERS_>
	return *this;
}
   d9594:	4620      	mov	r0, r4
   d9596:	bd10      	pop	{r4, pc}

000d9598 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9598:	b513      	push	{r0, r1, r4, lr}
   d959a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d959c:	b159      	cbz	r1, d95b6 <_ZN6StringaSEPKc+0x1e>
   d959e:	4608      	mov	r0, r1
   d95a0:	9101      	str	r1, [sp, #4]
   d95a2:	f001 fd28 	bl	daff6 <strlen>
   d95a6:	9901      	ldr	r1, [sp, #4]
   d95a8:	4602      	mov	r2, r0
   d95aa:	4620      	mov	r0, r4
   d95ac:	f7ff ff88 	bl	d94c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d95b0:	4620      	mov	r0, r4
   d95b2:	b002      	add	sp, #8
   d95b4:	bd10      	pop	{r4, pc}
	else invalidate();
   d95b6:	f7ff ff58 	bl	d946a <_ZN6String10invalidateEv>
   d95ba:	e7f9      	b.n	d95b0 <_ZN6StringaSEPKc+0x18>

000d95bc <_ZN6StringC1Ec>:
String::String(char c)
   d95bc:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d95be:	2300      	movs	r3, #0
	buf[0] = c;
   d95c0:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d95c4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d95c8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d95ca:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d95cc:	a901      	add	r1, sp, #4
String::String(char c)
   d95ce:	4604      	mov	r4, r0
	buf[1] = 0;
   d95d0:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d95d4:	f7ff ffe0 	bl	d9598 <_ZN6StringaSEPKc>
}
   d95d8:	4620      	mov	r0, r4
   d95da:	b002      	add	sp, #8
   d95dc:	bd10      	pop	{r4, pc}

000d95de <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   d95de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d95e0:	4604      	mov	r4, r0
	buffer = NULL;
   d95e2:	2300      	movs	r3, #0
	capacity = 0;
   d95e4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d95e8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d95ea:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   d95ec:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d95ee:	a901      	add	r1, sp, #4
   d95f0:	f000 fc56 	bl	d9ea0 <utoa>
	*this = buf;
   d95f4:	a901      	add	r1, sp, #4
   d95f6:	4620      	mov	r0, r4
   d95f8:	f7ff ffce 	bl	d9598 <_ZN6StringaSEPKc>
}
   d95fc:	4620      	mov	r0, r4
   d95fe:	b004      	add	sp, #16
   d9600:	bd10      	pop	{r4, pc}

000d9602 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d9602:	b530      	push	{r4, r5, lr}
   d9604:	4604      	mov	r4, r0
	buffer = NULL;
   d9606:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d9608:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d960a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d960e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9610:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d9612:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d9616:	b2cd      	uxtb	r5, r1
   d9618:	f000 ff08 	bl	da42c <__aeabi_f2d>
   d961c:	ec41 0b10 	vmov	d0, r0, r1
   d9620:	a901      	add	r1, sp, #4
   d9622:	4628      	mov	r0, r5
   d9624:	f7ff febc 	bl	d93a0 <_Z4dtoadhPc>
        *this = buf;
   d9628:	a901      	add	r1, sp, #4
   d962a:	4620      	mov	r0, r4
   d962c:	f7ff ffb4 	bl	d9598 <_ZN6StringaSEPKc>
}
   d9630:	4620      	mov	r0, r4
   d9632:	b00b      	add	sp, #44	; 0x2c
   d9634:	bd30      	pop	{r4, r5, pc}

000d9636 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9636:	b570      	push	{r4, r5, r6, lr}
   d9638:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d963a:	460e      	mov	r6, r1
   d963c:	b909      	cbnz	r1, d9642 <_ZN6String6concatEPKcj+0xc>
   d963e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9640:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9642:	b16a      	cbz	r2, d9660 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d9644:	6884      	ldr	r4, [r0, #8]
   d9646:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9648:	4621      	mov	r1, r4
   d964a:	f7ff ff25 	bl	d9498 <_ZN6String7reserveEj>
   d964e:	2800      	cmp	r0, #0
   d9650:	d0f5      	beq.n	d963e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9652:	6828      	ldr	r0, [r5, #0]
   d9654:	68ab      	ldr	r3, [r5, #8]
   d9656:	4631      	mov	r1, r6
   d9658:	4418      	add	r0, r3
   d965a:	f001 fca7 	bl	dafac <strcpy>
	len = newlen;
   d965e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9660:	2001      	movs	r0, #1
   d9662:	e7ed      	b.n	d9640 <_ZN6String6concatEPKcj+0xa>

000d9664 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d9664:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   d9666:	220a      	movs	r2, #10
{
   d9668:	4604      	mov	r4, r0
   d966a:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   d966c:	4669      	mov	r1, sp
   d966e:	f000 fc01 	bl	d9e74 <itoa>
	return concat(buf, strlen(buf));
   d9672:	4668      	mov	r0, sp
   d9674:	f001 fcbf 	bl	daff6 <strlen>
   d9678:	4669      	mov	r1, sp
   d967a:	4602      	mov	r2, r0
   d967c:	4620      	mov	r0, r4
   d967e:	f7ff ffda 	bl	d9636 <_ZN6String6concatEPKcj>
}
   d9682:	b002      	add	sp, #8
   d9684:	bd10      	pop	{r4, pc}

000d9686 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
   d9686:	b510      	push	{r4, lr}
   d9688:	4604      	mov	r4, r0
   d968a:	b086      	sub	sp, #24
   d968c:	ee10 0a10 	vmov	r0, s0
	char buf[20];
	dtoa(num, 6, buf);
   d9690:	f000 fecc 	bl	da42c <__aeabi_f2d>
   d9694:	ec41 0b10 	vmov	d0, r0, r1
   d9698:	a901      	add	r1, sp, #4
   d969a:	2006      	movs	r0, #6
   d969c:	f7ff fe80 	bl	d93a0 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
   d96a0:	a801      	add	r0, sp, #4
   d96a2:	f001 fca8 	bl	daff6 <strlen>
   d96a6:	a901      	add	r1, sp, #4
   d96a8:	4602      	mov	r2, r0
   d96aa:	4620      	mov	r0, r4
   d96ac:	f7ff ffc3 	bl	d9636 <_ZN6String6concatEPKcj>
}
   d96b0:	b006      	add	sp, #24
   d96b2:	bd10      	pop	{r4, pc}

000d96b4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d96b4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d96b6:	688a      	ldr	r2, [r1, #8]
   d96b8:	6809      	ldr	r1, [r1, #0]
{
   d96ba:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d96bc:	f7ff ffbb 	bl	d9636 <_ZN6String6concatEPKcj>
   d96c0:	b910      	cbnz	r0, d96c8 <_ZplRK15StringSumHelperRK6String+0x14>
   d96c2:	4620      	mov	r0, r4
   d96c4:	f7ff fed1 	bl	d946a <_ZN6String10invalidateEv>
	return a;
}
   d96c8:	4620      	mov	r0, r4
   d96ca:	bd10      	pop	{r4, pc}

000d96cc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d96cc:	b513      	push	{r0, r1, r4, lr}
   d96ce:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d96d0:	b929      	cbnz	r1, d96de <_ZplRK15StringSumHelperPKc+0x12>
   d96d2:	4620      	mov	r0, r4
   d96d4:	f7ff fec9 	bl	d946a <_ZN6String10invalidateEv>
	return a;
}
   d96d8:	4620      	mov	r0, r4
   d96da:	b002      	add	sp, #8
   d96dc:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d96de:	4608      	mov	r0, r1
   d96e0:	9101      	str	r1, [sp, #4]
   d96e2:	f001 fc88 	bl	daff6 <strlen>
   d96e6:	9901      	ldr	r1, [sp, #4]
   d96e8:	4602      	mov	r2, r0
   d96ea:	4620      	mov	r0, r4
   d96ec:	f7ff ffa3 	bl	d9636 <_ZN6String6concatEPKcj>
   d96f0:	2800      	cmp	r0, #0
   d96f2:	d0ee      	beq.n	d96d2 <_ZplRK15StringSumHelperPKc+0x6>
   d96f4:	e7f0      	b.n	d96d8 <_ZplRK15StringSumHelperPKc+0xc>

000d96f6 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   d96f6:	b510      	push	{r4, lr}
   d96f8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d96fa:	f7ff ffb3 	bl	d9664 <_ZN6String6concatEi>
   d96fe:	b910      	cbnz	r0, d9706 <_ZplRK15StringSumHelperi+0x10>
   d9700:	4620      	mov	r0, r4
   d9702:	f7ff feb2 	bl	d946a <_ZN6String10invalidateEv>
	return a;
}
   d9706:	4620      	mov	r0, r4
   d9708:	bd10      	pop	{r4, pc}

000d970a <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
   d970a:	b510      	push	{r4, lr}
   d970c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d970e:	f7ff ffba 	bl	d9686 <_ZN6String6concatEf>
   d9712:	b910      	cbnz	r0, d971a <_ZplRK15StringSumHelperf+0x10>
   d9714:	4620      	mov	r0, r4
   d9716:	f7ff fea8 	bl	d946a <_ZN6String10invalidateEv>
	return a;
}
   d971a:	4620      	mov	r0, r4
   d971c:	bd10      	pop	{r4, pc}

000d971e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d971e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9720:	6882      	ldr	r2, [r0, #8]
   d9722:	b93a      	cbnz	r2, d9734 <_ZNK6String6equalsEPKc+0x16>
   d9724:	b121      	cbz	r1, d9730 <_ZNK6String6equalsEPKc+0x12>
   d9726:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d9728:	fab0 f080 	clz	r0, r0
   d972c:	0940      	lsrs	r0, r0, #5
   d972e:	e000      	b.n	d9732 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9730:	2001      	movs	r0, #1
}
   d9732:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9734:	6800      	ldr	r0, [r0, #0]
   d9736:	b909      	cbnz	r1, d973c <_ZNK6String6equalsEPKc+0x1e>
   d9738:	7800      	ldrb	r0, [r0, #0]
   d973a:	e7f5      	b.n	d9728 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d973c:	f001 fc2c 	bl	daf98 <strcmp>
   d9740:	e7f2      	b.n	d9728 <_ZNK6String6equalsEPKc+0xa>

000d9742 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d9742:	b510      	push	{r4, lr}
   d9744:	4613      	mov	r3, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d9746:	6884      	ldr	r4, [r0, #8]
   d9748:	688a      	ldr	r2, [r1, #8]
   d974a:	1aa4      	subs	r4, r4, r2
   d974c:	429c      	cmp	r4, r3
   d974e:	d30a      	bcc.n	d9766 <_ZNK6String10startsWithERKS_j+0x24>
   d9750:	6800      	ldr	r0, [r0, #0]
   d9752:	b138      	cbz	r0, d9764 <_ZNK6String10startsWithERKS_j+0x22>
   d9754:	6809      	ldr	r1, [r1, #0]
   d9756:	b141      	cbz	r1, d976a <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d9758:	4418      	add	r0, r3
   d975a:	f001 fc54 	bl	db006 <strncmp>
   d975e:	fab0 f080 	clz	r0, r0
   d9762:	0940      	lsrs	r0, r0, #5
}
   d9764:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d9766:	2000      	movs	r0, #0
   d9768:	e7fc      	b.n	d9764 <_ZNK6String10startsWithERKS_j+0x22>
   d976a:	4608      	mov	r0, r1
   d976c:	e7fa      	b.n	d9764 <_ZNK6String10startsWithERKS_j+0x22>

000d976e <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
   d976e:	6882      	ldr	r2, [r0, #8]
   d9770:	688b      	ldr	r3, [r1, #8]
   d9772:	429a      	cmp	r2, r3
   d9774:	d302      	bcc.n	d977c <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d9776:	2200      	movs	r2, #0
   d9778:	f7ff bfe3 	b.w	d9742 <_ZNK6String10startsWithERKS_j>
}
   d977c:	2000      	movs	r0, #0
   d977e:	4770      	bx	lr

000d9780 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d9780:	6883      	ldr	r3, [r0, #8]
   d9782:	428b      	cmp	r3, r1
   d9784:	d903      	bls.n	d978e <_ZNK6StringixEj+0xe>
   d9786:	6800      	ldr	r0, [r0, #0]
   d9788:	b110      	cbz	r0, d9790 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d978a:	5c40      	ldrb	r0, [r0, r1]
   d978c:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   d978e:	2000      	movs	r0, #0
}
   d9790:	4770      	bx	lr

000d9792 <_ZNK6String6charAtEj>:
	return operator[](loc);
   d9792:	f7ff bff5 	b.w	d9780 <_ZNK6StringixEj>

000d9796 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d9796:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d9798:	6883      	ldr	r3, [r0, #8]
   d979a:	4293      	cmp	r3, r2
   d979c:	d907      	bls.n	d97ae <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d979e:	6804      	ldr	r4, [r0, #0]
   d97a0:	6809      	ldr	r1, [r1, #0]
   d97a2:	18a0      	adds	r0, r4, r2
   d97a4:	f001 fc54 	bl	db050 <strstr>
	if (found == NULL) return -1;
   d97a8:	b108      	cbz	r0, d97ae <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d97aa:	1b00      	subs	r0, r0, r4
}
   d97ac:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d97ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d97b2:	e7fb      	b.n	d97ac <_ZNK6String7indexOfERKS_j+0x16>

000d97b4 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d97b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d97b8:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d97ba:	688a      	ldr	r2, [r1, #8]
{
   d97bc:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d97be:	b1ca      	cbz	r2, d97f4 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d97c0:	6883      	ldr	r3, [r0, #8]
   d97c2:	b1bb      	cbz	r3, d97f4 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d97c4:	429a      	cmp	r2, r3
   d97c6:	d815      	bhi.n	d97f4 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97c8:	6807      	ldr	r7, [r0, #0]
	if (fromIndex >= len) fromIndex = len - 1;
   d97ca:	42ab      	cmp	r3, r5
   d97cc:	bf98      	it	ls
   d97ce:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97d2:	4638      	mov	r0, r7
	int found = -1;
   d97d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97d8:	eb07 0805 	add.w	r8, r7, r5
   d97dc:	4540      	cmp	r0, r8
   d97de:	d80b      	bhi.n	d97f8 <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
   d97e0:	6831      	ldr	r1, [r6, #0]
   d97e2:	f001 fc35 	bl	db050 <strstr>
		if (!p) break;
   d97e6:	b138      	cbz	r0, d97f8 <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d97e8:	1bc3      	subs	r3, r0, r7
   d97ea:	42ab      	cmp	r3, r5
   d97ec:	bf98      	it	ls
   d97ee:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97f0:	3001      	adds	r0, #1
   d97f2:	e7f3      	b.n	d97dc <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d97f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}
	return found;
}
   d97f8:	4620      	mov	r0, r4
   d97fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d97fe <_ZNK6String11lastIndexOfERKS_>:
	return lastIndexOf(s2, len - s2.len);
   d97fe:	6882      	ldr	r2, [r0, #8]
   d9800:	688b      	ldr	r3, [r1, #8]
   d9802:	1ad2      	subs	r2, r2, r3
   d9804:	f7ff bfd6 	b.w	d97b4 <_ZNK6String11lastIndexOfERKS_j>

000d9808 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d980a:	429a      	cmp	r2, r3
{
   d980c:	460f      	mov	r7, r1
   d980e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d9810:	490c      	ldr	r1, [pc, #48]	; (d9844 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d9812:	bf88      	it	hi
   d9814:	4613      	movhi	r3, r2
{
   d9816:	4614      	mov	r4, r2
   d9818:	4606      	mov	r6, r0
	if (left > right) {
   d981a:	bf84      	itt	hi
   d981c:	462c      	movhi	r4, r5
   d981e:	461d      	movhi	r5, r3
	String out;
   d9820:	f7ff fe67 	bl	d94f2 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d9824:	68ba      	ldr	r2, [r7, #8]
   d9826:	42a2      	cmp	r2, r4
   d9828:	d30a      	bcc.n	d9840 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d982a:	6839      	ldr	r1, [r7, #0]
   d982c:	42aa      	cmp	r2, r5
   d982e:	bf94      	ite	ls
   d9830:	ebc4 0202 	rsbls	r2, r4, r2
   d9834:	ebc4 0205 	rsbhi	r2, r4, r5
   d9838:	4421      	add	r1, r4
   d983a:	4630      	mov	r0, r6
   d983c:	f7ff fe40 	bl	d94c0 <_ZN6String4copyEPKcj>
	return out;
}
   d9840:	4630      	mov	r0, r6
   d9842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9844:	000ddf68 	.word	0x000ddf68

000d9848 <_ZNK6String9substringEj>:
{
   d9848:	b510      	push	{r4, lr}
   d984a:	4604      	mov	r4, r0
	return substring(left, len);
   d984c:	688b      	ldr	r3, [r1, #8]
   d984e:	f7ff ffdb 	bl	d9808 <_ZNK6String9substringEjj>
}
   d9852:	4620      	mov	r0, r4
   d9854:	bd10      	pop	{r4, pc}

000d9856 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d9856:	6800      	ldr	r0, [r0, #0]
   d9858:	b108      	cbz	r0, d985e <_ZNK6String5toIntEv+0x8>
   d985a:	f001 bb50 	b.w	daefe <atol>
	return 0;
}
   d985e:	4770      	bx	lr

000d9860 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   d9860:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d9862:	6800      	ldr	r0, [r0, #0]
   d9864:	b140      	cbz	r0, d9878 <_ZNK6String7toFloatEv+0x18>
   d9866:	f001 fb47 	bl	daef8 <atof>
   d986a:	ec51 0b10 	vmov	r0, r1, d0
   d986e:	f001 f92d 	bl	daacc <__aeabi_d2f>
   d9872:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d9876:	bd08      	pop	{r3, pc}
	return 0;
   d9878:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9880 <_ZNK6String7toFloatEv+0x20>
   d987c:	e7fb      	b.n	d9876 <_ZNK6String7toFloatEv+0x16>
   d987e:	bf00      	nop
   d9880:	00000000 	.word	0x00000000

000d9884 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d9884:	4b05      	ldr	r3, [pc, #20]	; (d989c <_GLOBAL__sub_I_System+0x18>)
   d9886:	2202      	movs	r2, #2
   d9888:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d988a:	4b05      	ldr	r3, [pc, #20]	; (d98a0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d988c:	4a05      	ldr	r2, [pc, #20]	; (d98a4 <_GLOBAL__sub_I_System+0x20>)
   d988e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d9890:	2000      	movs	r0, #0
   d9892:	6018      	str	r0, [r3, #0]
   d9894:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d9896:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9898:	f7fe bc18 	b.w	d80cc <set_system_mode>
   d989c:	2003e5b0 	.word	0x2003e5b0
   d98a0:	2003e5a4 	.word	0x2003e5a4
   d98a4:	ffff0000 	.word	0xffff0000

000d98a8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d98a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d98ac:	4a15      	ldr	r2, [pc, #84]	; (d9904 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d98ae:	f8df 8060 	ldr.w	r8, [pc, #96]	; d9910 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d98b2:	e9d2 3200 	ldrd	r3, r2, [r2]
   d98b6:	18c0      	adds	r0, r0, r3
   d98b8:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d98bc:	4a12      	ldr	r2, [pc, #72]	; (d9908 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d98be:	e9d2 3200 	ldrd	r3, r2, [r2]
   d98c2:	18c6      	adds	r6, r0, r3
   d98c4:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d98c8:	e9d8 2300 	ldrd	r2, r3, [r8]
   d98cc:	42bb      	cmp	r3, r7
   d98ce:	bf08      	it	eq
   d98d0:	42b2      	cmpeq	r2, r6
{
   d98d2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d98d4:	d013      	beq.n	d98fe <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d98d6:	a903      	add	r1, sp, #12
   d98d8:	4668      	mov	r0, sp
   d98da:	e9cd 6700 	strd	r6, r7, [sp]
   d98de:	f7fe fd11 	bl	d8304 <localtime_r>
	calendar_time.tm_year += 1900;
   d98e2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d98e4:	4d09      	ldr	r5, [pc, #36]	; (d990c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d98e6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d98ea:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d98ec:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d98ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d98f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d98f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d98f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d98f6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d98fa:	6823      	ldr	r3, [r4, #0]
   d98fc:	602b      	str	r3, [r5, #0]
    }
}
   d98fe:	b00c      	add	sp, #48	; 0x30
   d9900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9904:	2003e5e8 	.word	0x2003e5e8
   d9908:	2003e5e0 	.word	0x2003e5e0
   d990c:	2003e5bc 	.word	0x2003e5bc
   d9910:	2003e5f0 	.word	0x2003e5f0

000d9914 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d9914:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9916:	2000      	movs	r0, #0
   d9918:	f7fe fc34 	bl	d8184 <spark_sync_time_pending>
   d991c:	b128      	cbz	r0, d992a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d991e:	f7fe fc19 	bl	d8154 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9922:	f080 0001 	eor.w	r0, r0, #1
   d9926:	b2c0      	uxtb	r0, r0
    }
   d9928:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d992a:	2001      	movs	r0, #1
   d992c:	e7fc      	b.n	d9928 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d9930 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9930:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9932:	f7ff ffb9 	bl	d98a8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d9936:	4b02      	ldr	r3, [pc, #8]	; (d9940 <_ZN9TimeClass5monthEx+0x10>)
   d9938:	6918      	ldr	r0, [r3, #16]
}
   d993a:	3001      	adds	r0, #1
   d993c:	bd08      	pop	{r3, pc}
   d993e:	bf00      	nop
   d9940:	2003e5bc 	.word	0x2003e5bc

000d9944 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d9944:	b530      	push	{r4, r5, lr}
   d9946:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9948:	4818      	ldr	r0, [pc, #96]	; (d99ac <_ZN9TimeClass7timeStrEx+0x68>)
   d994a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d994e:	1852      	adds	r2, r2, r1
   d9950:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d9954:	4816      	ldr	r0, [pc, #88]	; (d99b0 <_ZN9TimeClass7timeStrEx+0x6c>)
   d9956:	e9d0 1000 	ldrd	r1, r0, [r0]
   d995a:	1852      	adds	r2, r2, r1
{
   d995c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d995e:	eb40 0303 	adc.w	r3, r0, r3
   d9962:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d9966:	2224      	movs	r2, #36	; 0x24
   d9968:	eb0d 0002 	add.w	r0, sp, r2
   d996c:	2100      	movs	r1, #0
   d996e:	f001 fae6 	bl	daf3e <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d9972:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d9974:	a909      	add	r1, sp, #36	; 0x24
   d9976:	4668      	mov	r0, sp
   d9978:	f7fe fcc4 	bl	d8304 <localtime_r>
    char ascstr[26] = {};
   d997c:	2216      	movs	r2, #22
   d997e:	4629      	mov	r1, r5
   d9980:	a803      	add	r0, sp, #12
   d9982:	9502      	str	r5, [sp, #8]
   d9984:	f001 fadb 	bl	daf3e <memset>
    asctime_r(&calendar_time, ascstr);
   d9988:	a902      	add	r1, sp, #8
   d998a:	a809      	add	r0, sp, #36	; 0x24
   d998c:	f001 fa88 	bl	daea0 <asctime_r>
    int len = strlen(ascstr);
   d9990:	a802      	add	r0, sp, #8
   d9992:	f001 fb30 	bl	daff6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d9996:	ab12      	add	r3, sp, #72	; 0x48
   d9998:	4418      	add	r0, r3
    return String(ascstr);
   d999a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d999c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d99a0:	4620      	mov	r0, r4
   d99a2:	f7ff fda6 	bl	d94f2 <_ZN6StringC1EPKc>
}
   d99a6:	4620      	mov	r0, r4
   d99a8:	b013      	add	sp, #76	; 0x4c
   d99aa:	bd30      	pop	{r4, r5, pc}
   d99ac:	2003e5e8 	.word	0x2003e5e8
   d99b0:	2003e5e0 	.word	0x2003e5e0

000d99b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d99b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99b8:	b0a5      	sub	sp, #148	; 0x94
   d99ba:	4607      	mov	r7, r0
   d99bc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d99be:	a814      	add	r0, sp, #80	; 0x50
{
   d99c0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d99c2:	223f      	movs	r2, #63	; 0x3f
{
   d99c4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d99c6:	f001 fb30 	bl	db02a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d99ca:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d99cc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d99ce:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d99d2:	f001 fb10 	bl	daff6 <strlen>
   d99d6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d99d8:	bb5d      	cbnz	r5, d9a32 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d99da:	492a      	ldr	r1, [pc, #168]	; (d9a84 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d99dc:	a803      	add	r0, sp, #12
   d99de:	f001 fae5 	bl	dafac <strcpy>
   d99e2:	ae14      	add	r6, sp, #80	; 0x50
{
   d99e4:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d99e6:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d99ea:	45ab      	cmp	fp, r5
   d99ec:	d936      	bls.n	d9a5c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d99ee:	46b1      	mov	r9, r6
   d99f0:	f105 0a01 	add.w	sl, r5, #1
   d99f4:	f819 3b01 	ldrb.w	r3, [r9], #1
   d99f8:	2b25      	cmp	r3, #37	; 0x25
   d99fa:	d117      	bne.n	d9a2c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d99fc:	7873      	ldrb	r3, [r6, #1]
   d99fe:	2b7a      	cmp	r3, #122	; 0x7a
   d9a00:	d114      	bne.n	d9a2c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9a02:	a803      	add	r0, sp, #12
   d9a04:	f001 faf7 	bl	daff6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9a08:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d9a0a:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9a0c:	1828      	adds	r0, r5, r0
   d9a0e:	4418      	add	r0, r3
   d9a10:	ebab 0205 	sub.w	r2, fp, r5
   d9a14:	1cb1      	adds	r1, r6, #2
   d9a16:	f001 fa84 	bl	daf22 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9a1a:	4622      	mov	r2, r4
   d9a1c:	a903      	add	r1, sp, #12
   d9a1e:	4630      	mov	r0, r6
   d9a20:	f001 fa7f 	bl	daf22 <memcpy>
            len = strlen(format_str);
   d9a24:	a814      	add	r0, sp, #80	; 0x50
   d9a26:	f001 fae6 	bl	daff6 <strlen>
   d9a2a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d9a2c:	464e      	mov	r6, r9
   d9a2e:	4655      	mov	r5, sl
   d9a30:	e7d9      	b.n	d99e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9a32:	213c      	movs	r1, #60	; 0x3c
   d9a34:	fb95 f3f1 	sdiv	r3, r5, r1
   d9a38:	2b00      	cmp	r3, #0
   d9a3a:	bfb8      	it	lt
   d9a3c:	425b      	neglt	r3, r3
   d9a3e:	fbb3 f2f1 	udiv	r2, r3, r1
   d9a42:	fb01 3312 	mls	r3, r1, r2, r3
   d9a46:	9300      	str	r3, [sp, #0]
   d9a48:	4a0f      	ldr	r2, [pc, #60]	; (d9a88 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d9a4a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9a4e:	2110      	movs	r1, #16
   d9a50:	a803      	add	r0, sp, #12
   d9a52:	fb95 f3f3 	sdiv	r3, r5, r3
   d9a56:	f7fe fc25 	bl	d82a4 <snprintf>
   d9a5a:	e7c2      	b.n	d99e2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9a5c:	2100      	movs	r1, #0
   d9a5e:	222e      	movs	r2, #46	; 0x2e
   d9a60:	a808      	add	r0, sp, #32
   d9a62:	9107      	str	r1, [sp, #28]
   d9a64:	f001 fa6b 	bl	daf3e <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9a68:	4643      	mov	r3, r8
   d9a6a:	aa14      	add	r2, sp, #80	; 0x50
   d9a6c:	2132      	movs	r1, #50	; 0x32
   d9a6e:	a807      	add	r0, sp, #28
   d9a70:	f7fe fc40 	bl	d82f4 <strftime>
    return String(buf);
   d9a74:	a907      	add	r1, sp, #28
   d9a76:	4638      	mov	r0, r7
   d9a78:	f7ff fd3b 	bl	d94f2 <_ZN6StringC1EPKc>
}
   d9a7c:	4638      	mov	r0, r7
   d9a7e:	b025      	add	sp, #148	; 0x94
   d9a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a84:	000ddebc 	.word	0x000ddebc
   d9a88:	000ddebe 	.word	0x000ddebe

000d9a8c <_ZN9TimeClass6formatExPKc>:
{
   d9a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a8e:	b08d      	sub	sp, #52	; 0x34
   d9a90:	e9cd 2300 	strd	r2, r3, [sp]
   d9a94:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9a96:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9a98:	b915      	cbnz	r5, d9aa0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9a9a:	4b19      	ldr	r3, [pc, #100]	; (d9b00 <_ZN9TimeClass6formatExPKc+0x74>)
   d9a9c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9a9e:	b12d      	cbz	r5, d9aac <_ZN9TimeClass6formatExPKc+0x20>
   d9aa0:	4b18      	ldr	r3, [pc, #96]	; (d9b04 <_ZN9TimeClass6formatExPKc+0x78>)
   d9aa2:	4628      	mov	r0, r5
   d9aa4:	6819      	ldr	r1, [r3, #0]
   d9aa6:	f001 fa77 	bl	daf98 <strcmp>
   d9aaa:	b938      	cbnz	r0, d9abc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9aac:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9ab0:	4620      	mov	r0, r4
   d9ab2:	f7ff ff47 	bl	d9944 <_ZN9TimeClass7timeStrEx>
}
   d9ab6:	4620      	mov	r0, r4
   d9ab8:	b00d      	add	sp, #52	; 0x34
   d9aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9abc:	4e12      	ldr	r6, [pc, #72]	; (d9b08 <_ZN9TimeClass6formatExPKc+0x7c>)
   d9abe:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9ac0:	4f12      	ldr	r7, [pc, #72]	; (d9b0c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d9ac2:	e9d6 3200 	ldrd	r3, r2, [r6]
   d9ac6:	185b      	adds	r3, r3, r1
   d9ac8:	9901      	ldr	r1, [sp, #4]
   d9aca:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d9ace:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9ad2:	181b      	adds	r3, r3, r0
   d9ad4:	eb41 0202 	adc.w	r2, r1, r2
   d9ad8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d9adc:	2100      	movs	r1, #0
   d9ade:	2224      	movs	r2, #36	; 0x24
   d9ae0:	a803      	add	r0, sp, #12
   d9ae2:	f001 fa2c 	bl	daf3e <memset>
    localtime_r(&t, &calendar_time);
   d9ae6:	a903      	add	r1, sp, #12
   d9ae8:	4668      	mov	r0, sp
   d9aea:	f7fe fc0b 	bl	d8304 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9aee:	6832      	ldr	r2, [r6, #0]
   d9af0:	683b      	ldr	r3, [r7, #0]
   d9af2:	a903      	add	r1, sp, #12
   d9af4:	4413      	add	r3, r2
   d9af6:	4620      	mov	r0, r4
   d9af8:	462a      	mov	r2, r5
   d9afa:	f7ff ff5b 	bl	d99b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d9afe:	e7da      	b.n	d9ab6 <_ZN9TimeClass6formatExPKc+0x2a>
   d9b00:	2003e5b8 	.word	0x2003e5b8
   d9b04:	2003dce0 	.word	0x2003dce0
   d9b08:	2003e5e8 	.word	0x2003e5e8
   d9b0c:	2003e5e0 	.word	0x2003e5e0

000d9b10 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9b10:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9b12:	2000      	movs	r0, #0
   d9b14:	f7fe f938 	bl	d7d88 <hal_rtc_time_is_valid>
    if (rtcstate)
   d9b18:	4604      	mov	r4, r0
   d9b1a:	b9a0      	cbnz	r0, d9b46 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9b1c:	f7fe face 	bl	d80bc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9b20:	2801      	cmp	r0, #1
   d9b22:	d110      	bne.n	d9b46 <_ZN9TimeClass7isValidEv+0x36>
   d9b24:	4620      	mov	r0, r4
   d9b26:	f7fe faf1 	bl	d810c <system_thread_get_state>
   d9b2a:	b960      	cbnz	r0, d9b46 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d9b2c:	f7ff fef2 	bl	d9914 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9b30:	b910      	cbnz	r0, d9b38 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9b32:	f7fe fb07 	bl	d8144 <spark_process>
        while (_while() && !_condition()) {
   d9b36:	e7f9      	b.n	d9b2c <_ZN9TimeClass7isValidEv+0x1c>
   d9b38:	f7ff feec 	bl	d9914 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9b40:	2000      	movs	r0, #0
   d9b42:	f7fe b921 	b.w	d7d88 <hal_rtc_time_is_valid>
}
   d9b46:	4620      	mov	r0, r4
   d9b48:	bd10      	pop	{r4, pc}

000d9b4a <_ZN9TimeClass3nowEv>:
{
   d9b4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9b4c:	f7ff ffe0 	bl	d9b10 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9b50:	2210      	movs	r2, #16
   d9b52:	2100      	movs	r1, #0
   d9b54:	4668      	mov	r0, sp
   d9b56:	f001 f9f2 	bl	daf3e <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9b5a:	2100      	movs	r1, #0
   d9b5c:	4668      	mov	r0, sp
   d9b5e:	f7fe f91b 	bl	d7d98 <hal_rtc_get_time>
}
   d9b62:	9800      	ldr	r0, [sp, #0]
   d9b64:	b005      	add	sp, #20
   d9b66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9b6c <_ZN9TimeClass4hourEv>:
{
   d9b6c:	b508      	push	{r3, lr}
	return hour(now());
   d9b6e:	f7ff ffec 	bl	d9b4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9b72:	17c1      	asrs	r1, r0, #31
   d9b74:	f7ff fe98 	bl	d98a8 <_ZL22Refresh_UnixTime_Cachex>
}
   d9b78:	4b01      	ldr	r3, [pc, #4]	; (d9b80 <_ZN9TimeClass4hourEv+0x14>)
   d9b7a:	6898      	ldr	r0, [r3, #8]
   d9b7c:	bd08      	pop	{r3, pc}
   d9b7e:	bf00      	nop
   d9b80:	2003e5bc 	.word	0x2003e5bc

000d9b84 <_ZN9TimeClass6minuteEv>:
{
   d9b84:	b508      	push	{r3, lr}
	return minute(now());
   d9b86:	f7ff ffe0 	bl	d9b4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9b8a:	17c1      	asrs	r1, r0, #31
   d9b8c:	f7ff fe8c 	bl	d98a8 <_ZL22Refresh_UnixTime_Cachex>
}
   d9b90:	4b01      	ldr	r3, [pc, #4]	; (d9b98 <_ZN9TimeClass6minuteEv+0x14>)
   d9b92:	6858      	ldr	r0, [r3, #4]
   d9b94:	bd08      	pop	{r3, pc}
   d9b96:	bf00      	nop
   d9b98:	2003e5bc 	.word	0x2003e5bc

000d9b9c <_ZN9TimeClass3dayEv>:
{
   d9b9c:	b508      	push	{r3, lr}
	return day(now());
   d9b9e:	f7ff ffd4 	bl	d9b4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9ba2:	17c1      	asrs	r1, r0, #31
   d9ba4:	f7ff fe80 	bl	d98a8 <_ZL22Refresh_UnixTime_Cachex>
}
   d9ba8:	4b01      	ldr	r3, [pc, #4]	; (d9bb0 <_ZN9TimeClass3dayEv+0x14>)
   d9baa:	68d8      	ldr	r0, [r3, #12]
   d9bac:	bd08      	pop	{r3, pc}
   d9bae:	bf00      	nop
   d9bb0:	2003e5bc 	.word	0x2003e5bc

000d9bb4 <_ZN9TimeClass5monthEv>:
{
   d9bb4:	b508      	push	{r3, lr}
	return month(now());
   d9bb6:	f7ff ffc8 	bl	d9b4a <_ZN9TimeClass3nowEv>
}
   d9bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9bbe:	17c1      	asrs	r1, r0, #31
   d9bc0:	f7ff beb6 	b.w	d9930 <_ZN9TimeClass5monthEx>

000d9bc4 <_ZN9TimeClass4yearEv>:
{
   d9bc4:	b508      	push	{r3, lr}
	return year(now());
   d9bc6:	f7ff ffc0 	bl	d9b4a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9bca:	17c1      	asrs	r1, r0, #31
   d9bcc:	f7ff fe6c 	bl	d98a8 <_ZL22Refresh_UnixTime_Cachex>
}
   d9bd0:	4b01      	ldr	r3, [pc, #4]	; (d9bd8 <_ZN9TimeClass4yearEv+0x14>)
   d9bd2:	6958      	ldr	r0, [r3, #20]
   d9bd4:	bd08      	pop	{r3, pc}
   d9bd6:	bf00      	nop
   d9bd8:	2003e5bc 	.word	0x2003e5bc

000d9bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9bdc:	4b02      	ldr	r3, [pc, #8]	; (d9be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9bde:	681a      	ldr	r2, [r3, #0]
   d9be0:	4b02      	ldr	r3, [pc, #8]	; (d9bec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9be2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9be4:	4770      	bx	lr
   d9be6:	bf00      	nop
   d9be8:	2003dce0 	.word	0x2003dce0
   d9bec:	2003e5b8 	.word	0x2003e5b8

000d9bf0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9bf0:	4770      	bx	lr

000d9bf2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9bf2:	7441      	strb	r1, [r0, #17]
}
   d9bf4:	4770      	bx	lr

000d9bf6 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9bf6:	4770      	bx	lr

000d9bf8 <_ZN11USARTSerial17availableForWriteEv>:
{
   d9bf8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9bfa:	7c00      	ldrb	r0, [r0, #16]
   d9bfc:	f7fe fa04 	bl	d8008 <hal_usart_available_data_for_write>
}
   d9c00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c04:	bd08      	pop	{r3, pc}

000d9c06 <_ZN11USARTSerial9availableEv>:
{
   d9c06:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9c08:	7c00      	ldrb	r0, [r0, #16]
   d9c0a:	f7fe f9d5 	bl	d7fb8 <hal_usart_available>
}
   d9c0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c12:	bd08      	pop	{r3, pc}

000d9c14 <_ZN11USARTSerial4peekEv>:
{
   d9c14:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9c16:	7c00      	ldrb	r0, [r0, #16]
   d9c18:	f7fe f9de 	bl	d7fd8 <hal_usart_peek>
}
   d9c1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9c20:	bd08      	pop	{r3, pc}

000d9c22 <_ZN11USARTSerial4readEv>:
{
   d9c22:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9c24:	7c00      	ldrb	r0, [r0, #16]
   d9c26:	f7fe f9cf 	bl	d7fc8 <hal_usart_read>
}
   d9c2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9c2e:	bd08      	pop	{r3, pc}

000d9c30 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d9c30:	7c00      	ldrb	r0, [r0, #16]
   d9c32:	f7fe b9d9 	b.w	d7fe8 <hal_usart_flush>

000d9c36 <_ZN11USARTSerial5writeEh>:
{
   d9c36:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9c38:	7c45      	ldrb	r5, [r0, #17]
{
   d9c3a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9c3c:	b12d      	cbz	r5, d9c4a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d9c3e:	7c20      	ldrb	r0, [r4, #16]
}
   d9c40:	b003      	add	sp, #12
   d9c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9c46:	f7fe b9af 	b.w	d7fa8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9c4a:	7c00      	ldrb	r0, [r0, #16]
   d9c4c:	9101      	str	r1, [sp, #4]
   d9c4e:	f7fe f9db 	bl	d8008 <hal_usart_available_data_for_write>
   d9c52:	2800      	cmp	r0, #0
   d9c54:	9901      	ldr	r1, [sp, #4]
   d9c56:	dcf2      	bgt.n	d9c3e <_ZN11USARTSerial5writeEh+0x8>
}
   d9c58:	4628      	mov	r0, r5
   d9c5a:	b003      	add	sp, #12
   d9c5c:	bd30      	pop	{r4, r5, pc}

000d9c5e <_ZN11USARTSerialD0Ev>:
   d9c5e:	b510      	push	{r4, lr}
   d9c60:	2114      	movs	r1, #20
   d9c62:	4604      	mov	r4, r0
   d9c64:	f000 fa76 	bl	da154 <_ZdlPvj>
   d9c68:	4620      	mov	r0, r4
   d9c6a:	bd10      	pop	{r4, pc}

000d9c6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9c6c:	b510      	push	{r4, lr}
   d9c6e:	f04f 0c00 	mov.w	ip, #0
   d9c72:	4604      	mov	r4, r0
   d9c74:	4608      	mov	r0, r1
   d9c76:	4611      	mov	r1, r2
   d9c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9c7c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9c80:	4a04      	ldr	r2, [pc, #16]	; (d9c94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9c82:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9c84:	2201      	movs	r2, #1
  _serial = serial;
   d9c86:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9c88:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9c8a:	461a      	mov	r2, r3
   d9c8c:	f7fe f984 	bl	d7f98 <hal_usart_init>
}
   d9c90:	4620      	mov	r0, r4
   d9c92:	bd10      	pop	{r4, pc}
   d9c94:	000ddef0 	.word	0x000ddef0

000d9c98 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d9c98:	7c00      	ldrb	r0, [r0, #16]
   d9c9a:	2300      	movs	r3, #0
   d9c9c:	f7fe b9bc 	b.w	d8018 <hal_usart_begin_config>

000d9ca0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d9ca0:	2200      	movs	r2, #0
   d9ca2:	f7ff bff9 	b.w	d9c98 <_ZN11USARTSerial5beginEmm>
	...

000d9ca8 <_Z22__fetch_global_Serial1v>:
{
   d9ca8:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9caa:	4c0d      	ldr	r4, [pc, #52]	; (d9ce0 <_Z22__fetch_global_Serial1v+0x38>)
   d9cac:	7821      	ldrb	r1, [r4, #0]
   d9cae:	f3bf 8f5b 	dmb	ish
   d9cb2:	f011 0101 	ands.w	r1, r1, #1
   d9cb6:	d110      	bne.n	d9cda <_Z22__fetch_global_Serial1v+0x32>
   d9cb8:	4620      	mov	r0, r4
   d9cba:	9101      	str	r1, [sp, #4]
   d9cbc:	f7fa f9fc 	bl	d40b8 <__cxa_guard_acquire>
   d9cc0:	9901      	ldr	r1, [sp, #4]
   d9cc2:	b150      	cbz	r0, d9cda <_Z22__fetch_global_Serial1v+0x32>
   d9cc4:	4b07      	ldr	r3, [pc, #28]	; (d9ce4 <_Z22__fetch_global_Serial1v+0x3c>)
   d9cc6:	4a08      	ldr	r2, [pc, #32]	; (d9ce8 <_Z22__fetch_global_Serial1v+0x40>)
   d9cc8:	4808      	ldr	r0, [pc, #32]	; (d9cec <_Z22__fetch_global_Serial1v+0x44>)
   d9cca:	f7ff ffcf 	bl	d9c6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9cce:	4620      	mov	r0, r4
   d9cd0:	f7fa f9f7 	bl	d40c2 <__cxa_guard_release>
   d9cd4:	4806      	ldr	r0, [pc, #24]	; (d9cf0 <_Z22__fetch_global_Serial1v+0x48>)
   d9cd6:	f001 f909 	bl	daeec <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9cda:	4804      	ldr	r0, [pc, #16]	; (d9cec <_Z22__fetch_global_Serial1v+0x44>)
   d9cdc:	b002      	add	sp, #8
   d9cde:	bd10      	pop	{r4, pc}
   d9ce0:	2003e5f8 	.word	0x2003e5f8
   d9ce4:	2003e680 	.word	0x2003e680
   d9ce8:	2003e5fc 	.word	0x2003e5fc
   d9cec:	2003e704 	.word	0x2003e704
   d9cf0:	000d9bf7 	.word	0x000d9bf7

000d9cf4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9cf4:	7441      	strb	r1, [r0, #17]
}
   d9cf6:	4770      	bx	lr

000d9cf8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9cf8:	4770      	bx	lr

000d9cfa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9cfa:	4770      	bx	lr

000d9cfc <_ZN9USBSerial4readEv>:
{
   d9cfc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9cfe:	2100      	movs	r1, #0
   d9d00:	7c00      	ldrb	r0, [r0, #16]
   d9d02:	f7fe f9b1 	bl	d8068 <HAL_USB_USART_Receive_Data>
}
   d9d06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d0a:	bd08      	pop	{r3, pc}

000d9d0c <_ZN9USBSerial4peekEv>:
{
   d9d0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9d0e:	2101      	movs	r1, #1
   d9d10:	7c00      	ldrb	r0, [r0, #16]
   d9d12:	f7fe f9a9 	bl	d8068 <HAL_USB_USART_Receive_Data>
}
   d9d16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d1a:	bd08      	pop	{r3, pc}

000d9d1c <_ZN9USBSerial17availableForWriteEv>:
{
   d9d1c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9d1e:	7c00      	ldrb	r0, [r0, #16]
   d9d20:	f7fe f99a 	bl	d8058 <HAL_USB_USART_Available_Data_For_Write>
}
   d9d24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d28:	bd08      	pop	{r3, pc}

000d9d2a <_ZN9USBSerial9availableEv>:
{
   d9d2a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9d2c:	7c00      	ldrb	r0, [r0, #16]
   d9d2e:	f7fe f98b 	bl	d8048 <HAL_USB_USART_Available_Data>
}
   d9d32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d36:	bd08      	pop	{r3, pc}

000d9d38 <_ZN9USBSerial5writeEh>:
{
   d9d38:	b513      	push	{r0, r1, r4, lr}
   d9d3a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d3c:	7c00      	ldrb	r0, [r0, #16]
{
   d9d3e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d40:	f7fe f98a 	bl	d8058 <HAL_USB_USART_Available_Data_For_Write>
   d9d44:	2800      	cmp	r0, #0
   d9d46:	9901      	ldr	r1, [sp, #4]
   d9d48:	dc01      	bgt.n	d9d4e <_ZN9USBSerial5writeEh+0x16>
   d9d4a:	7c60      	ldrb	r0, [r4, #17]
   d9d4c:	b120      	cbz	r0, d9d58 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9d4e:	7c20      	ldrb	r0, [r4, #16]
   d9d50:	f7fe f992 	bl	d8078 <HAL_USB_USART_Send_Data>
   d9d54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9d58:	b002      	add	sp, #8
   d9d5a:	bd10      	pop	{r4, pc}

000d9d5c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9d5c:	7c00      	ldrb	r0, [r0, #16]
   d9d5e:	f7fe b993 	b.w	d8088 <HAL_USB_USART_Flush_Data>

000d9d62 <_ZN9USBSerialD0Ev>:
   d9d62:	b510      	push	{r4, lr}
   d9d64:	2114      	movs	r1, #20
   d9d66:	4604      	mov	r4, r0
   d9d68:	f000 f9f4 	bl	da154 <_ZdlPvj>
   d9d6c:	4620      	mov	r0, r4
   d9d6e:	bd10      	pop	{r4, pc}

000d9d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d70:	b510      	push	{r4, lr}
   d9d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9d76:	4604      	mov	r4, r0
   d9d78:	4608      	mov	r0, r1
   d9d7a:	2100      	movs	r1, #0
   d9d7c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9d80:	4b04      	ldr	r3, [pc, #16]	; (d9d94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9d82:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9d84:	2301      	movs	r3, #1
  _serial = serial;
   d9d86:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9d88:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9d8a:	4611      	mov	r1, r2
   d9d8c:	f7fe f94c 	bl	d8028 <HAL_USB_USART_Init>
}
   d9d90:	4620      	mov	r0, r4
   d9d92:	bd10      	pop	{r4, pc}
   d9d94:	000ddf20 	.word	0x000ddf20

000d9d98 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9d98:	7c00      	ldrb	r0, [r0, #16]
   d9d9a:	2200      	movs	r2, #0
   d9d9c:	f7fe b94c 	b.w	d8038 <HAL_USB_USART_Begin>

000d9da0 <_Z19acquireSerialBufferv>:
{
   d9da0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9da2:	2214      	movs	r2, #20
{
   d9da4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9da6:	2100      	movs	r1, #0
   d9da8:	f001 f8c9 	bl	daf3e <memset>
}
   d9dac:	4620      	mov	r0, r4
   d9dae:	bd10      	pop	{r4, pc}

000d9db0 <_Z16_fetch_usbserialv>:
{
   d9db0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9db2:	4c0f      	ldr	r4, [pc, #60]	; (d9df0 <_Z16_fetch_usbserialv+0x40>)
{
   d9db4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9db6:	a803      	add	r0, sp, #12
   d9db8:	f7ff fff2 	bl	d9da0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9dbc:	7821      	ldrb	r1, [r4, #0]
   d9dbe:	f3bf 8f5b 	dmb	ish
   d9dc2:	f011 0101 	ands.w	r1, r1, #1
   d9dc6:	d10f      	bne.n	d9de8 <_Z16_fetch_usbserialv+0x38>
   d9dc8:	4620      	mov	r0, r4
   d9dca:	9101      	str	r1, [sp, #4]
   d9dcc:	f7fa f974 	bl	d40b8 <__cxa_guard_acquire>
   d9dd0:	9901      	ldr	r1, [sp, #4]
   d9dd2:	b148      	cbz	r0, d9de8 <_Z16_fetch_usbserialv+0x38>
   d9dd4:	aa03      	add	r2, sp, #12
   d9dd6:	4807      	ldr	r0, [pc, #28]	; (d9df4 <_Z16_fetch_usbserialv+0x44>)
   d9dd8:	f7ff ffca 	bl	d9d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9ddc:	4620      	mov	r0, r4
   d9dde:	f7fa f970 	bl	d40c2 <__cxa_guard_release>
   d9de2:	4805      	ldr	r0, [pc, #20]	; (d9df8 <_Z16_fetch_usbserialv+0x48>)
   d9de4:	f001 f882 	bl	daeec <atexit>
	return _usbserial;
}
   d9de8:	4802      	ldr	r0, [pc, #8]	; (d9df4 <_Z16_fetch_usbserialv+0x44>)
   d9dea:	b008      	add	sp, #32
   d9dec:	bd10      	pop	{r4, pc}
   d9dee:	bf00      	nop
   d9df0:	2003e718 	.word	0x2003e718
   d9df4:	2003e71c 	.word	0x2003e71c
   d9df8:	000d9cf9 	.word	0x000d9cf9

000d9dfc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9dfc:	b510      	push	{r4, lr}
   d9dfe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9e00:	f001 f8f9 	bl	daff6 <strlen>
   d9e04:	3801      	subs	r0, #1
   d9e06:	1823      	adds	r3, r4, r0
   d9e08:	4620      	mov	r0, r4
	while(i<j){
   d9e0a:	4283      	cmp	r3, r0
   d9e0c:	d906      	bls.n	d9e1c <_Z11str_reversePc+0x20>
		c = *i;
   d9e0e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9e10:	7819      	ldrb	r1, [r3, #0]
   d9e12:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9e16:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d9e1a:	e7f6      	b.n	d9e0a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d9e1c:	bd10      	pop	{r4, pc}

000d9e1e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9e1e:	b570      	push	{r4, r5, r6, lr}
   d9e20:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9e22:	1e91      	subs	r1, r2, #2
   d9e24:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9e26:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9e28:	d822      	bhi.n	d9e70 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d9e2a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d9e2c:	b16d      	cbz	r5, d9e4a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9e2e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d9e32:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d9e36:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9e38:	2d09      	cmp	r5, #9
                *ptr += '0';
   d9e3a:	bf94      	ite	ls
   d9e3c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9e3e:	3157      	addhi	r1, #87	; 0x57
   d9e40:	b2c9      	uxtb	r1, r1
   d9e42:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d9e46:	4635      	mov	r5, r6
	while(a){
   d9e48:	e7f0      	b.n	d9e2c <ultoa+0xe>
   d9e4a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d9e4c:	4423      	add	r3, r4
            *ptr++ = '0';
   d9e4e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d9e50:	4293      	cmp	r3, r2
   d9e52:	d902      	bls.n	d9e5a <ultoa+0x3c>
            *ptr++ = '0';
   d9e54:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d9e58:	e7fa      	b.n	d9e50 <ultoa+0x32>
   d9e5a:	1a1a      	subs	r2, r3, r0
   d9e5c:	4283      	cmp	r3, r0
   d9e5e:	bf38      	it	cc
   d9e60:	2200      	movcc	r2, #0

	*ptr = '\0';
   d9e62:	2300      	movs	r3, #0
   d9e64:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d9e66:	4620      	mov	r0, r4
   d9e68:	f7ff ffc8 	bl	d9dfc <_Z11str_reversePc>
	return buffer;
   d9e6c:	4620      	mov	r0, r4
}
   d9e6e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d9e70:	2000      	movs	r0, #0
   d9e72:	e7fc      	b.n	d9e6e <ultoa+0x50>

000d9e74 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9e74:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9e76:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9e78:	460c      	mov	r4, r1
   d9e7a:	4615      	mov	r5, r2
	if(a<0){
   d9e7c:	da0e      	bge.n	d9e9c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d9e82:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9e86:	bf14      	ite	ne
   d9e88:	4258      	negne	r0, r3
   d9e8a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9e8c:	2301      	movs	r3, #1
		*buffer = '-';
   d9e8e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d9e90:	462a      	mov	r2, r5
   d9e92:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d9e94:	f7ff ffc3 	bl	d9e1e <ultoa>
	}
	return buffer;
}
   d9e98:	4620      	mov	r0, r4
   d9e9a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d9e9c:	2301      	movs	r3, #1
   d9e9e:	e7f9      	b.n	d9e94 <itoa+0x20>

000d9ea0 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9ea0:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9ea2:	2301      	movs	r3, #1
   d9ea4:	f7ff ffbb 	bl	d9e1e <ultoa>
}
   d9ea8:	bd08      	pop	{r3, pc}
	...

000d9eac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9eac:	4b01      	ldr	r3, [pc, #4]	; (d9eb4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9eae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9eb0:	4770      	bx	lr
   d9eb2:	bf00      	nop
   d9eb4:	2003dce8 	.word	0x2003dce8

000d9eb8 <serialEventRun>:
{
   d9eb8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9eba:	4b0b      	ldr	r3, [pc, #44]	; (d9ee8 <serialEventRun+0x30>)
   d9ebc:	b143      	cbz	r3, d9ed0 <serialEventRun+0x18>
   d9ebe:	f7ff ff77 	bl	d9db0 <_Z16_fetch_usbserialv>
   d9ec2:	6803      	ldr	r3, [r0, #0]
   d9ec4:	691b      	ldr	r3, [r3, #16]
   d9ec6:	4798      	blx	r3
   d9ec8:	2800      	cmp	r0, #0
   d9eca:	dd01      	ble.n	d9ed0 <serialEventRun+0x18>
        serialEvent();
   d9ecc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9ed0:	4b06      	ldr	r3, [pc, #24]	; (d9eec <serialEventRun+0x34>)
   d9ed2:	b143      	cbz	r3, d9ee6 <serialEventRun+0x2e>
   d9ed4:	f7ff fee8 	bl	d9ca8 <_Z22__fetch_global_Serial1v>
   d9ed8:	6803      	ldr	r3, [r0, #0]
   d9eda:	691b      	ldr	r3, [r3, #16]
   d9edc:	4798      	blx	r3
   d9ede:	2800      	cmp	r0, #0
   d9ee0:	dd01      	ble.n	d9ee6 <serialEventRun+0x2e>
        serialEvent1();
   d9ee2:	f3af 8000 	nop.w
}
   d9ee6:	bd08      	pop	{r3, pc}
	...

000d9ef0 <_post_loop>:
{
   d9ef0:	b508      	push	{r3, lr}
	serialEventRun();
   d9ef2:	f7ff ffe1 	bl	d9eb8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9ef6:	f7fd ff3f 	bl	d7d78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9efa:	4b01      	ldr	r3, [pc, #4]	; (d9f00 <_post_loop+0x10>)
   d9efc:	6018      	str	r0, [r3, #0]
}
   d9efe:	bd08      	pop	{r3, pc}
   d9f00:	2003e738 	.word	0x2003e738

000d9f04 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9f04:	4805      	ldr	r0, [pc, #20]	; (d9f1c <_Z33system_initialize_user_backup_ramv+0x18>)
   d9f06:	4a06      	ldr	r2, [pc, #24]	; (d9f20 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d9f08:	4906      	ldr	r1, [pc, #24]	; (d9f24 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d9f0a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9f0c:	1a12      	subs	r2, r2, r0
   d9f0e:	f001 f808 	bl	daf22 <memcpy>
    __backup_sram_signature = signature;
   d9f12:	4b05      	ldr	r3, [pc, #20]	; (d9f28 <_Z33system_initialize_user_backup_ramv+0x24>)
   d9f14:	4a05      	ldr	r2, [pc, #20]	; (d9f2c <_Z33system_initialize_user_backup_ramv+0x28>)
   d9f16:	601a      	str	r2, [r3, #0]
}
   d9f18:	bd08      	pop	{r3, pc}
   d9f1a:	bf00      	nop
   d9f1c:	2003f400 	.word	0x2003f400
   d9f20:	2003f404 	.word	0x2003f404
   d9f24:	000de238 	.word	0x000de238
   d9f28:	2003f400 	.word	0x2003f400
   d9f2c:	9a271c1e 	.word	0x9a271c1e

000d9f30 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9f30:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9f32:	2300      	movs	r3, #0
   d9f34:	9300      	str	r3, [sp, #0]
   d9f36:	461a      	mov	r2, r3
   d9f38:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9f3c:	f7fe f8f8 	bl	d8130 <system_ctrl_set_result>
}
   d9f40:	b003      	add	sp, #12
   d9f42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9f48 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9f48:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9f4a:	8843      	ldrh	r3, [r0, #2]
   d9f4c:	2b0a      	cmp	r3, #10
   d9f4e:	d008      	beq.n	d9f62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9f50:	2b50      	cmp	r3, #80	; 0x50
   d9f52:	d10b      	bne.n	d9f6c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9f54:	4b09      	ldr	r3, [pc, #36]	; (d9f7c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9f56:	681b      	ldr	r3, [r3, #0]
   d9f58:	b14b      	cbz	r3, d9f6e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9f5a:	b003      	add	sp, #12
   d9f5c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9f60:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9f62:	f7ff ffe5 	bl	d9f30 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9f66:	b003      	add	sp, #12
   d9f68:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9f6c:	2300      	movs	r3, #0
   d9f6e:	9300      	str	r3, [sp, #0]
   d9f70:	461a      	mov	r2, r3
   d9f72:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9f76:	f7fe f8db 	bl	d8130 <system_ctrl_set_result>
}
   d9f7a:	e7f4      	b.n	d9f66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9f7c:	2003e734 	.word	0x2003e734

000d9f80 <module_user_init_hook>:
{
   d9f80:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9f82:	4812      	ldr	r0, [pc, #72]	; (d9fcc <module_user_init_hook+0x4c>)
   d9f84:	2100      	movs	r1, #0
   d9f86:	f7fe f9ad 	bl	d82e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d9f8a:	4b11      	ldr	r3, [pc, #68]	; (d9fd0 <module_user_init_hook+0x50>)
   d9f8c:	681a      	ldr	r2, [r3, #0]
   d9f8e:	4b11      	ldr	r3, [pc, #68]	; (d9fd4 <module_user_init_hook+0x54>)
   d9f90:	429a      	cmp	r2, r3
   d9f92:	4b11      	ldr	r3, [pc, #68]	; (d9fd8 <module_user_init_hook+0x58>)
   d9f94:	bf0c      	ite	eq
   d9f96:	2201      	moveq	r2, #1
   d9f98:	2200      	movne	r2, #0
   d9f9a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9f9c:	d001      	beq.n	d9fa2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d9f9e:	f7ff ffb1 	bl	d9f04 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9fa2:	f7fd fed1 	bl	d7d48 <HAL_RNG_GetRandomNumber>
   d9fa6:	4604      	mov	r4, r0
    srand(seed);
   d9fa8:	f000 ffd2 	bl	daf50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9fac:	4b0b      	ldr	r3, [pc, #44]	; (d9fdc <module_user_init_hook+0x5c>)
   d9fae:	b113      	cbz	r3, d9fb6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d9fb0:	4620      	mov	r0, r4
   d9fb2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9fb6:	2100      	movs	r1, #0
   d9fb8:	4808      	ldr	r0, [pc, #32]	; (d9fdc <module_user_init_hook+0x5c>)
   d9fba:	f7fe f8eb 	bl	d8194 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9fc2:	4807      	ldr	r0, [pc, #28]	; (d9fe0 <module_user_init_hook+0x60>)
   d9fc4:	2100      	movs	r1, #0
   d9fc6:	f7fe b8a9 	b.w	d811c <system_ctrl_set_app_request_handler>
   d9fca:	bf00      	nop
   d9fcc:	000d9ead 	.word	0x000d9ead
   d9fd0:	2003f400 	.word	0x2003f400
   d9fd4:	9a271c1e 	.word	0x9a271c1e
   d9fd8:	2003e730 	.word	0x2003e730
   d9fdc:	00000000 	.word	0x00000000
   d9fe0:	000d9f49 	.word	0x000d9f49

000d9fe4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9fe4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9fe6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9fe8:	d902      	bls.n	d9ff0 <pinAvailable+0xc>
    return false;
   d9fea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9fec:	b002      	add	sp, #8
   d9fee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9ff0:	f1a0 030b 	sub.w	r3, r0, #11
   d9ff4:	2b02      	cmp	r3, #2
   d9ff6:	d81a      	bhi.n	da02e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9ff8:	4c17      	ldr	r4, [pc, #92]	; (da058 <pinAvailable+0x74>)
   d9ffa:	7821      	ldrb	r1, [r4, #0]
   d9ffc:	f3bf 8f5b 	dmb	ish
   da000:	f011 0101 	ands.w	r1, r1, #1
   da004:	d10b      	bne.n	da01e <pinAvailable+0x3a>
   da006:	4620      	mov	r0, r4
   da008:	9101      	str	r1, [sp, #4]
   da00a:	f7fa f855 	bl	d40b8 <__cxa_guard_acquire>
   da00e:	9901      	ldr	r1, [sp, #4]
   da010:	b128      	cbz	r0, da01e <pinAvailable+0x3a>
   da012:	4812      	ldr	r0, [pc, #72]	; (da05c <pinAvailable+0x78>)
   da014:	f7ff f8f4 	bl	d9200 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da018:	4620      	mov	r0, r4
   da01a:	f7fa f852 	bl	d40c2 <__cxa_guard_release>
   da01e:	4b0f      	ldr	r3, [pc, #60]	; (da05c <pinAvailable+0x78>)
   da020:	7818      	ldrb	r0, [r3, #0]
   da022:	f7fd ff81 	bl	d7f28 <hal_spi_is_enabled>
   da026:	2800      	cmp	r0, #0
   da028:	d1df      	bne.n	d9fea <pinAvailable+0x6>
  return true; // 'pin' is available
   da02a:	2001      	movs	r0, #1
   da02c:	e7de      	b.n	d9fec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da02e:	2801      	cmp	r0, #1
   da030:	d809      	bhi.n	da046 <pinAvailable+0x62>
   da032:	f000 f86b 	bl	da10c <_Z19__fetch_global_Wirev>
   da036:	2100      	movs	r1, #0
   da038:	7c00      	ldrb	r0, [r0, #16]
   da03a:	f7fd ff2d 	bl	d7e98 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da03e:	f080 0001 	eor.w	r0, r0, #1
   da042:	b2c0      	uxtb	r0, r0
   da044:	e7d2      	b.n	d9fec <pinAvailable+0x8>
   da046:	3809      	subs	r0, #9
   da048:	2801      	cmp	r0, #1
   da04a:	d8ee      	bhi.n	da02a <pinAvailable+0x46>
   da04c:	f7ff fe2c 	bl	d9ca8 <_Z22__fetch_global_Serial1v>
   da050:	7c00      	ldrb	r0, [r0, #16]
   da052:	f7fd ffd1 	bl	d7ff8 <hal_usart_is_enabled>
   da056:	e7f2      	b.n	da03e <pinAvailable+0x5a>
   da058:	2003dec0 	.word	0x2003dec0
   da05c:	2003dec4 	.word	0x2003dec4

000da060 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da060:	2823      	cmp	r0, #35	; 0x23
{
   da062:	b538      	push	{r3, r4, r5, lr}
   da064:	4604      	mov	r4, r0
   da066:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da068:	d80a      	bhi.n	da080 <pinMode+0x20>
   da06a:	29ff      	cmp	r1, #255	; 0xff
   da06c:	d008      	beq.n	da080 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da06e:	f7ff ffb9 	bl	d9fe4 <pinAvailable>
   da072:	b128      	cbz	r0, da080 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da074:	4629      	mov	r1, r5
   da076:	4620      	mov	r0, r4
}
   da078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da07c:	f7fd be94 	b.w	d7da8 <HAL_Pin_Mode>
}
   da080:	bd38      	pop	{r3, r4, r5, pc}

000da082 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da082:	b538      	push	{r3, r4, r5, lr}
   da084:	4604      	mov	r4, r0
   da086:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da088:	f7fd fe96 	bl	d7db8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da08c:	28ff      	cmp	r0, #255	; 0xff
   da08e:	d010      	beq.n	da0b2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da090:	2806      	cmp	r0, #6
   da092:	d804      	bhi.n	da09e <digitalWrite+0x1c>
   da094:	234d      	movs	r3, #77	; 0x4d
   da096:	fa23 f000 	lsr.w	r0, r3, r0
   da09a:	07c3      	lsls	r3, r0, #31
   da09c:	d409      	bmi.n	da0b2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da09e:	4620      	mov	r0, r4
   da0a0:	f7ff ffa0 	bl	d9fe4 <pinAvailable>
   da0a4:	b128      	cbz	r0, da0b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da0a6:	4629      	mov	r1, r5
   da0a8:	4620      	mov	r0, r4
}
   da0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da0ae:	f7fd be8b 	b.w	d7dc8 <HAL_GPIO_Write>
}
   da0b2:	bd38      	pop	{r3, r4, r5, pc}

000da0b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da0b4:	b510      	push	{r4, lr}
   da0b6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da0b8:	f7fd fe7e 	bl	d7db8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da0bc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da0be:	b2db      	uxtb	r3, r3
   da0c0:	2b01      	cmp	r3, #1
   da0c2:	d908      	bls.n	da0d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da0c4:	4620      	mov	r0, r4
   da0c6:	f7ff ff8d 	bl	d9fe4 <pinAvailable>
   da0ca:	b120      	cbz	r0, da0d6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da0cc:	4620      	mov	r0, r4
}
   da0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da0d2:	f7fd be81 	b.w	d7dd8 <HAL_GPIO_Read>
}
   da0d6:	2000      	movs	r0, #0
   da0d8:	bd10      	pop	{r4, pc}

000da0da <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da0da:	4770      	bx	lr

000da0dc <_Z17acquireWireBufferv>:
{
   da0dc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da0de:	2300      	movs	r3, #0
   da0e0:	2520      	movs	r5, #32
   da0e2:	8043      	strh	r3, [r0, #2]
   da0e4:	2314      	movs	r3, #20
{
   da0e6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da0e8:	8003      	strh	r3, [r0, #0]
   da0ea:	6085      	str	r5, [r0, #8]
   da0ec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0ee:	4906      	ldr	r1, [pc, #24]	; (da108 <_Z17acquireWireBufferv+0x2c>)
   da0f0:	4628      	mov	r0, r5
   da0f2:	f000 f831 	bl	da158 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0f6:	4904      	ldr	r1, [pc, #16]	; (da108 <_Z17acquireWireBufferv+0x2c>)
	};
   da0f8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0fa:	4628      	mov	r0, r5
   da0fc:	f000 f82c 	bl	da158 <_ZnajRKSt9nothrow_t>
	};
   da100:	60e0      	str	r0, [r4, #12]
}
   da102:	4620      	mov	r0, r4
   da104:	bd38      	pop	{r3, r4, r5, pc}
   da106:	bf00      	nop
   da108:	000ddf48 	.word	0x000ddf48

000da10c <_Z19__fetch_global_Wirev>:
{
   da10c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da10e:	4d0e      	ldr	r5, [pc, #56]	; (da148 <_Z19__fetch_global_Wirev+0x3c>)
   da110:	7829      	ldrb	r1, [r5, #0]
   da112:	f3bf 8f5b 	dmb	ish
   da116:	f011 0401 	ands.w	r4, r1, #1
{
   da11a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da11c:	d111      	bne.n	da142 <_Z19__fetch_global_Wirev+0x36>
   da11e:	4628      	mov	r0, r5
   da120:	f7f9 ffca 	bl	d40b8 <__cxa_guard_acquire>
   da124:	b168      	cbz	r0, da142 <_Z19__fetch_global_Wirev+0x36>
   da126:	a801      	add	r0, sp, #4
   da128:	f7ff ffd8 	bl	da0dc <_Z17acquireWireBufferv>
   da12c:	aa01      	add	r2, sp, #4
   da12e:	4621      	mov	r1, r4
   da130:	4806      	ldr	r0, [pc, #24]	; (da14c <_Z19__fetch_global_Wirev+0x40>)
   da132:	f7fe fd65 	bl	d8c00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da136:	4628      	mov	r0, r5
   da138:	f7f9 ffc3 	bl	d40c2 <__cxa_guard_release>
   da13c:	4804      	ldr	r0, [pc, #16]	; (da150 <_Z19__fetch_global_Wirev+0x44>)
   da13e:	f000 fed5 	bl	daeec <atexit>
	return wire;
}
   da142:	4802      	ldr	r0, [pc, #8]	; (da14c <_Z19__fetch_global_Wirev+0x40>)
   da144:	b007      	add	sp, #28
   da146:	bd30      	pop	{r4, r5, pc}
   da148:	2003e73c 	.word	0x2003e73c
   da14c:	2003e740 	.word	0x2003e740
   da150:	000da0db 	.word	0x000da0db

000da154 <_ZdlPvj>:
   da154:	f7f9 bfa3 	b.w	d409e <_ZdlPv>

000da158 <_ZnajRKSt9nothrow_t>:
   da158:	f7f9 bf9f 	b.w	d409a <_Znaj>

000da15c <_ZSt25__throw_bad_function_callv>:
   da15c:	b508      	push	{r3, lr}
   da15e:	f7fe f8b1 	bl	d82c4 <abort>
	...

000da164 <__aeabi_drsub>:
   da164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da168:	e002      	b.n	da170 <__adddf3>
   da16a:	bf00      	nop

000da16c <__aeabi_dsub>:
   da16c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da170 <__adddf3>:
   da170:	b530      	push	{r4, r5, lr}
   da172:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da176:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da17a:	ea94 0f05 	teq	r4, r5
   da17e:	bf08      	it	eq
   da180:	ea90 0f02 	teqeq	r0, r2
   da184:	bf1f      	itttt	ne
   da186:	ea54 0c00 	orrsne.w	ip, r4, r0
   da18a:	ea55 0c02 	orrsne.w	ip, r5, r2
   da18e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da196:	f000 80e2 	beq.w	da35e <__adddf3+0x1ee>
   da19a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da19e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da1a2:	bfb8      	it	lt
   da1a4:	426d      	neglt	r5, r5
   da1a6:	dd0c      	ble.n	da1c2 <__adddf3+0x52>
   da1a8:	442c      	add	r4, r5
   da1aa:	ea80 0202 	eor.w	r2, r0, r2
   da1ae:	ea81 0303 	eor.w	r3, r1, r3
   da1b2:	ea82 0000 	eor.w	r0, r2, r0
   da1b6:	ea83 0101 	eor.w	r1, r3, r1
   da1ba:	ea80 0202 	eor.w	r2, r0, r2
   da1be:	ea81 0303 	eor.w	r3, r1, r3
   da1c2:	2d36      	cmp	r5, #54	; 0x36
   da1c4:	bf88      	it	hi
   da1c6:	bd30      	pophi	{r4, r5, pc}
   da1c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da1cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da1d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da1d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da1d8:	d002      	beq.n	da1e0 <__adddf3+0x70>
   da1da:	4240      	negs	r0, r0
   da1dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da1e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da1e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da1e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da1ec:	d002      	beq.n	da1f4 <__adddf3+0x84>
   da1ee:	4252      	negs	r2, r2
   da1f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da1f4:	ea94 0f05 	teq	r4, r5
   da1f8:	f000 80a7 	beq.w	da34a <__adddf3+0x1da>
   da1fc:	f1a4 0401 	sub.w	r4, r4, #1
   da200:	f1d5 0e20 	rsbs	lr, r5, #32
   da204:	db0d      	blt.n	da222 <__adddf3+0xb2>
   da206:	fa02 fc0e 	lsl.w	ip, r2, lr
   da20a:	fa22 f205 	lsr.w	r2, r2, r5
   da20e:	1880      	adds	r0, r0, r2
   da210:	f141 0100 	adc.w	r1, r1, #0
   da214:	fa03 f20e 	lsl.w	r2, r3, lr
   da218:	1880      	adds	r0, r0, r2
   da21a:	fa43 f305 	asr.w	r3, r3, r5
   da21e:	4159      	adcs	r1, r3
   da220:	e00e      	b.n	da240 <__adddf3+0xd0>
   da222:	f1a5 0520 	sub.w	r5, r5, #32
   da226:	f10e 0e20 	add.w	lr, lr, #32
   da22a:	2a01      	cmp	r2, #1
   da22c:	fa03 fc0e 	lsl.w	ip, r3, lr
   da230:	bf28      	it	cs
   da232:	f04c 0c02 	orrcs.w	ip, ip, #2
   da236:	fa43 f305 	asr.w	r3, r3, r5
   da23a:	18c0      	adds	r0, r0, r3
   da23c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da244:	d507      	bpl.n	da256 <__adddf3+0xe6>
   da246:	f04f 0e00 	mov.w	lr, #0
   da24a:	f1dc 0c00 	rsbs	ip, ip, #0
   da24e:	eb7e 0000 	sbcs.w	r0, lr, r0
   da252:	eb6e 0101 	sbc.w	r1, lr, r1
   da256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da25a:	d31b      	bcc.n	da294 <__adddf3+0x124>
   da25c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da260:	d30c      	bcc.n	da27c <__adddf3+0x10c>
   da262:	0849      	lsrs	r1, r1, #1
   da264:	ea5f 0030 	movs.w	r0, r0, rrx
   da268:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da26c:	f104 0401 	add.w	r4, r4, #1
   da270:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da278:	f080 809a 	bcs.w	da3b0 <__adddf3+0x240>
   da27c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da280:	bf08      	it	eq
   da282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da286:	f150 0000 	adcs.w	r0, r0, #0
   da28a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da28e:	ea41 0105 	orr.w	r1, r1, r5
   da292:	bd30      	pop	{r4, r5, pc}
   da294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da298:	4140      	adcs	r0, r0
   da29a:	eb41 0101 	adc.w	r1, r1, r1
   da29e:	3c01      	subs	r4, #1
   da2a0:	bf28      	it	cs
   da2a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da2a6:	d2e9      	bcs.n	da27c <__adddf3+0x10c>
   da2a8:	f091 0f00 	teq	r1, #0
   da2ac:	bf04      	itt	eq
   da2ae:	4601      	moveq	r1, r0
   da2b0:	2000      	moveq	r0, #0
   da2b2:	fab1 f381 	clz	r3, r1
   da2b6:	bf08      	it	eq
   da2b8:	3320      	addeq	r3, #32
   da2ba:	f1a3 030b 	sub.w	r3, r3, #11
   da2be:	f1b3 0220 	subs.w	r2, r3, #32
   da2c2:	da0c      	bge.n	da2de <__adddf3+0x16e>
   da2c4:	320c      	adds	r2, #12
   da2c6:	dd08      	ble.n	da2da <__adddf3+0x16a>
   da2c8:	f102 0c14 	add.w	ip, r2, #20
   da2cc:	f1c2 020c 	rsb	r2, r2, #12
   da2d0:	fa01 f00c 	lsl.w	r0, r1, ip
   da2d4:	fa21 f102 	lsr.w	r1, r1, r2
   da2d8:	e00c      	b.n	da2f4 <__adddf3+0x184>
   da2da:	f102 0214 	add.w	r2, r2, #20
   da2de:	bfd8      	it	le
   da2e0:	f1c2 0c20 	rsble	ip, r2, #32
   da2e4:	fa01 f102 	lsl.w	r1, r1, r2
   da2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
   da2ec:	bfdc      	itt	le
   da2ee:	ea41 010c 	orrle.w	r1, r1, ip
   da2f2:	4090      	lslle	r0, r2
   da2f4:	1ae4      	subs	r4, r4, r3
   da2f6:	bfa2      	ittt	ge
   da2f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da2fc:	4329      	orrge	r1, r5
   da2fe:	bd30      	popge	{r4, r5, pc}
   da300:	ea6f 0404 	mvn.w	r4, r4
   da304:	3c1f      	subs	r4, #31
   da306:	da1c      	bge.n	da342 <__adddf3+0x1d2>
   da308:	340c      	adds	r4, #12
   da30a:	dc0e      	bgt.n	da32a <__adddf3+0x1ba>
   da30c:	f104 0414 	add.w	r4, r4, #20
   da310:	f1c4 0220 	rsb	r2, r4, #32
   da314:	fa20 f004 	lsr.w	r0, r0, r4
   da318:	fa01 f302 	lsl.w	r3, r1, r2
   da31c:	ea40 0003 	orr.w	r0, r0, r3
   da320:	fa21 f304 	lsr.w	r3, r1, r4
   da324:	ea45 0103 	orr.w	r1, r5, r3
   da328:	bd30      	pop	{r4, r5, pc}
   da32a:	f1c4 040c 	rsb	r4, r4, #12
   da32e:	f1c4 0220 	rsb	r2, r4, #32
   da332:	fa20 f002 	lsr.w	r0, r0, r2
   da336:	fa01 f304 	lsl.w	r3, r1, r4
   da33a:	ea40 0003 	orr.w	r0, r0, r3
   da33e:	4629      	mov	r1, r5
   da340:	bd30      	pop	{r4, r5, pc}
   da342:	fa21 f004 	lsr.w	r0, r1, r4
   da346:	4629      	mov	r1, r5
   da348:	bd30      	pop	{r4, r5, pc}
   da34a:	f094 0f00 	teq	r4, #0
   da34e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da352:	bf06      	itte	eq
   da354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da358:	3401      	addeq	r4, #1
   da35a:	3d01      	subne	r5, #1
   da35c:	e74e      	b.n	da1fc <__adddf3+0x8c>
   da35e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da362:	bf18      	it	ne
   da364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da368:	d029      	beq.n	da3be <__adddf3+0x24e>
   da36a:	ea94 0f05 	teq	r4, r5
   da36e:	bf08      	it	eq
   da370:	ea90 0f02 	teqeq	r0, r2
   da374:	d005      	beq.n	da382 <__adddf3+0x212>
   da376:	ea54 0c00 	orrs.w	ip, r4, r0
   da37a:	bf04      	itt	eq
   da37c:	4619      	moveq	r1, r3
   da37e:	4610      	moveq	r0, r2
   da380:	bd30      	pop	{r4, r5, pc}
   da382:	ea91 0f03 	teq	r1, r3
   da386:	bf1e      	ittt	ne
   da388:	2100      	movne	r1, #0
   da38a:	2000      	movne	r0, #0
   da38c:	bd30      	popne	{r4, r5, pc}
   da38e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da392:	d105      	bne.n	da3a0 <__adddf3+0x230>
   da394:	0040      	lsls	r0, r0, #1
   da396:	4149      	adcs	r1, r1
   da398:	bf28      	it	cs
   da39a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da39e:	bd30      	pop	{r4, r5, pc}
   da3a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da3a4:	bf3c      	itt	cc
   da3a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da3aa:	bd30      	popcc	{r4, r5, pc}
   da3ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da3b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da3b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da3b8:	f04f 0000 	mov.w	r0, #0
   da3bc:	bd30      	pop	{r4, r5, pc}
   da3be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da3c2:	bf1a      	itte	ne
   da3c4:	4619      	movne	r1, r3
   da3c6:	4610      	movne	r0, r2
   da3c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da3cc:	bf1c      	itt	ne
   da3ce:	460b      	movne	r3, r1
   da3d0:	4602      	movne	r2, r0
   da3d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da3d6:	bf06      	itte	eq
   da3d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da3dc:	ea91 0f03 	teqeq	r1, r3
   da3e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da3e4:	bd30      	pop	{r4, r5, pc}
   da3e6:	bf00      	nop

000da3e8 <__aeabi_ui2d>:
   da3e8:	f090 0f00 	teq	r0, #0
   da3ec:	bf04      	itt	eq
   da3ee:	2100      	moveq	r1, #0
   da3f0:	4770      	bxeq	lr
   da3f2:	b530      	push	{r4, r5, lr}
   da3f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da3f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da3fc:	f04f 0500 	mov.w	r5, #0
   da400:	f04f 0100 	mov.w	r1, #0
   da404:	e750      	b.n	da2a8 <__adddf3+0x138>
   da406:	bf00      	nop

000da408 <__aeabi_i2d>:
   da408:	f090 0f00 	teq	r0, #0
   da40c:	bf04      	itt	eq
   da40e:	2100      	moveq	r1, #0
   da410:	4770      	bxeq	lr
   da412:	b530      	push	{r4, r5, lr}
   da414:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da418:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da41c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da420:	bf48      	it	mi
   da422:	4240      	negmi	r0, r0
   da424:	f04f 0100 	mov.w	r1, #0
   da428:	e73e      	b.n	da2a8 <__adddf3+0x138>
   da42a:	bf00      	nop

000da42c <__aeabi_f2d>:
   da42c:	0042      	lsls	r2, r0, #1
   da42e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da432:	ea4f 0131 	mov.w	r1, r1, rrx
   da436:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da43a:	bf1f      	itttt	ne
   da43c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da448:	4770      	bxne	lr
   da44a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da44e:	bf08      	it	eq
   da450:	4770      	bxeq	lr
   da452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da456:	bf04      	itt	eq
   da458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da45c:	4770      	bxeq	lr
   da45e:	b530      	push	{r4, r5, lr}
   da460:	f44f 7460 	mov.w	r4, #896	; 0x380
   da464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da46c:	e71c      	b.n	da2a8 <__adddf3+0x138>
   da46e:	bf00      	nop

000da470 <__aeabi_ul2d>:
   da470:	ea50 0201 	orrs.w	r2, r0, r1
   da474:	bf08      	it	eq
   da476:	4770      	bxeq	lr
   da478:	b530      	push	{r4, r5, lr}
   da47a:	f04f 0500 	mov.w	r5, #0
   da47e:	e00a      	b.n	da496 <__aeabi_l2d+0x16>

000da480 <__aeabi_l2d>:
   da480:	ea50 0201 	orrs.w	r2, r0, r1
   da484:	bf08      	it	eq
   da486:	4770      	bxeq	lr
   da488:	b530      	push	{r4, r5, lr}
   da48a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da48e:	d502      	bpl.n	da496 <__aeabi_l2d+0x16>
   da490:	4240      	negs	r0, r0
   da492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da496:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da49a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da49e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da4a2:	f43f aed8 	beq.w	da256 <__adddf3+0xe6>
   da4a6:	f04f 0203 	mov.w	r2, #3
   da4aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da4ae:	bf18      	it	ne
   da4b0:	3203      	addne	r2, #3
   da4b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da4b6:	bf18      	it	ne
   da4b8:	3203      	addne	r2, #3
   da4ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da4be:	f1c2 0320 	rsb	r3, r2, #32
   da4c2:	fa00 fc03 	lsl.w	ip, r0, r3
   da4c6:	fa20 f002 	lsr.w	r0, r0, r2
   da4ca:	fa01 fe03 	lsl.w	lr, r1, r3
   da4ce:	ea40 000e 	orr.w	r0, r0, lr
   da4d2:	fa21 f102 	lsr.w	r1, r1, r2
   da4d6:	4414      	add	r4, r2
   da4d8:	e6bd      	b.n	da256 <__adddf3+0xe6>
   da4da:	bf00      	nop

000da4dc <__aeabi_dmul>:
   da4dc:	b570      	push	{r4, r5, r6, lr}
   da4de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da4e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da4e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da4ea:	bf1d      	ittte	ne
   da4ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da4f0:	ea94 0f0c 	teqne	r4, ip
   da4f4:	ea95 0f0c 	teqne	r5, ip
   da4f8:	f000 f8de 	bleq	da6b8 <__aeabi_dmul+0x1dc>
   da4fc:	442c      	add	r4, r5
   da4fe:	ea81 0603 	eor.w	r6, r1, r3
   da502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da50a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da50e:	bf18      	it	ne
   da510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da51c:	d038      	beq.n	da590 <__aeabi_dmul+0xb4>
   da51e:	fba0 ce02 	umull	ip, lr, r0, r2
   da522:	f04f 0500 	mov.w	r5, #0
   da526:	fbe1 e502 	umlal	lr, r5, r1, r2
   da52a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da52e:	fbe0 e503 	umlal	lr, r5, r0, r3
   da532:	f04f 0600 	mov.w	r6, #0
   da536:	fbe1 5603 	umlal	r5, r6, r1, r3
   da53a:	f09c 0f00 	teq	ip, #0
   da53e:	bf18      	it	ne
   da540:	f04e 0e01 	orrne.w	lr, lr, #1
   da544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da54c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da550:	d204      	bcs.n	da55c <__aeabi_dmul+0x80>
   da552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da556:	416d      	adcs	r5, r5
   da558:	eb46 0606 	adc.w	r6, r6, r6
   da55c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da56c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da574:	bf88      	it	hi
   da576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da57a:	d81e      	bhi.n	da5ba <__aeabi_dmul+0xde>
   da57c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da580:	bf08      	it	eq
   da582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da586:	f150 0000 	adcs.w	r0, r0, #0
   da58a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da58e:	bd70      	pop	{r4, r5, r6, pc}
   da590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da594:	ea46 0101 	orr.w	r1, r6, r1
   da598:	ea40 0002 	orr.w	r0, r0, r2
   da59c:	ea81 0103 	eor.w	r1, r1, r3
   da5a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da5a4:	bfc2      	ittt	gt
   da5a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   da5aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da5ae:	bd70      	popgt	{r4, r5, r6, pc}
   da5b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da5b4:	f04f 0e00 	mov.w	lr, #0
   da5b8:	3c01      	subs	r4, #1
   da5ba:	f300 80ab 	bgt.w	da714 <__aeabi_dmul+0x238>
   da5be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da5c2:	bfde      	ittt	le
   da5c4:	2000      	movle	r0, #0
   da5c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da5ca:	bd70      	pople	{r4, r5, r6, pc}
   da5cc:	f1c4 0400 	rsb	r4, r4, #0
   da5d0:	3c20      	subs	r4, #32
   da5d2:	da35      	bge.n	da640 <__aeabi_dmul+0x164>
   da5d4:	340c      	adds	r4, #12
   da5d6:	dc1b      	bgt.n	da610 <__aeabi_dmul+0x134>
   da5d8:	f104 0414 	add.w	r4, r4, #20
   da5dc:	f1c4 0520 	rsb	r5, r4, #32
   da5e0:	fa00 f305 	lsl.w	r3, r0, r5
   da5e4:	fa20 f004 	lsr.w	r0, r0, r4
   da5e8:	fa01 f205 	lsl.w	r2, r1, r5
   da5ec:	ea40 0002 	orr.w	r0, r0, r2
   da5f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da5f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da5f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da5fc:	fa21 f604 	lsr.w	r6, r1, r4
   da600:	eb42 0106 	adc.w	r1, r2, r6
   da604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da608:	bf08      	it	eq
   da60a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da60e:	bd70      	pop	{r4, r5, r6, pc}
   da610:	f1c4 040c 	rsb	r4, r4, #12
   da614:	f1c4 0520 	rsb	r5, r4, #32
   da618:	fa00 f304 	lsl.w	r3, r0, r4
   da61c:	fa20 f005 	lsr.w	r0, r0, r5
   da620:	fa01 f204 	lsl.w	r2, r1, r4
   da624:	ea40 0002 	orr.w	r0, r0, r2
   da628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da62c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da630:	f141 0100 	adc.w	r1, r1, #0
   da634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da638:	bf08      	it	eq
   da63a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da63e:	bd70      	pop	{r4, r5, r6, pc}
   da640:	f1c4 0520 	rsb	r5, r4, #32
   da644:	fa00 f205 	lsl.w	r2, r0, r5
   da648:	ea4e 0e02 	orr.w	lr, lr, r2
   da64c:	fa20 f304 	lsr.w	r3, r0, r4
   da650:	fa01 f205 	lsl.w	r2, r1, r5
   da654:	ea43 0302 	orr.w	r3, r3, r2
   da658:	fa21 f004 	lsr.w	r0, r1, r4
   da65c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da660:	fa21 f204 	lsr.w	r2, r1, r4
   da664:	ea20 0002 	bic.w	r0, r0, r2
   da668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da66c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da670:	bf08      	it	eq
   da672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da676:	bd70      	pop	{r4, r5, r6, pc}
   da678:	f094 0f00 	teq	r4, #0
   da67c:	d10f      	bne.n	da69e <__aeabi_dmul+0x1c2>
   da67e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da682:	0040      	lsls	r0, r0, #1
   da684:	eb41 0101 	adc.w	r1, r1, r1
   da688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da68c:	bf08      	it	eq
   da68e:	3c01      	subeq	r4, #1
   da690:	d0f7      	beq.n	da682 <__aeabi_dmul+0x1a6>
   da692:	ea41 0106 	orr.w	r1, r1, r6
   da696:	f095 0f00 	teq	r5, #0
   da69a:	bf18      	it	ne
   da69c:	4770      	bxne	lr
   da69e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da6a2:	0052      	lsls	r2, r2, #1
   da6a4:	eb43 0303 	adc.w	r3, r3, r3
   da6a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da6ac:	bf08      	it	eq
   da6ae:	3d01      	subeq	r5, #1
   da6b0:	d0f7      	beq.n	da6a2 <__aeabi_dmul+0x1c6>
   da6b2:	ea43 0306 	orr.w	r3, r3, r6
   da6b6:	4770      	bx	lr
   da6b8:	ea94 0f0c 	teq	r4, ip
   da6bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da6c0:	bf18      	it	ne
   da6c2:	ea95 0f0c 	teqne	r5, ip
   da6c6:	d00c      	beq.n	da6e2 <__aeabi_dmul+0x206>
   da6c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da6cc:	bf18      	it	ne
   da6ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da6d2:	d1d1      	bne.n	da678 <__aeabi_dmul+0x19c>
   da6d4:	ea81 0103 	eor.w	r1, r1, r3
   da6d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da6dc:	f04f 0000 	mov.w	r0, #0
   da6e0:	bd70      	pop	{r4, r5, r6, pc}
   da6e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da6e6:	bf06      	itte	eq
   da6e8:	4610      	moveq	r0, r2
   da6ea:	4619      	moveq	r1, r3
   da6ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da6f0:	d019      	beq.n	da726 <__aeabi_dmul+0x24a>
   da6f2:	ea94 0f0c 	teq	r4, ip
   da6f6:	d102      	bne.n	da6fe <__aeabi_dmul+0x222>
   da6f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da6fc:	d113      	bne.n	da726 <__aeabi_dmul+0x24a>
   da6fe:	ea95 0f0c 	teq	r5, ip
   da702:	d105      	bne.n	da710 <__aeabi_dmul+0x234>
   da704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da708:	bf1c      	itt	ne
   da70a:	4610      	movne	r0, r2
   da70c:	4619      	movne	r1, r3
   da70e:	d10a      	bne.n	da726 <__aeabi_dmul+0x24a>
   da710:	ea81 0103 	eor.w	r1, r1, r3
   da714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da71c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da720:	f04f 0000 	mov.w	r0, #0
   da724:	bd70      	pop	{r4, r5, r6, pc}
   da726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da72a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da72e:	bd70      	pop	{r4, r5, r6, pc}

000da730 <__aeabi_ddiv>:
   da730:	b570      	push	{r4, r5, r6, lr}
   da732:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da73a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da73e:	bf1d      	ittte	ne
   da740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da744:	ea94 0f0c 	teqne	r4, ip
   da748:	ea95 0f0c 	teqne	r5, ip
   da74c:	f000 f8a7 	bleq	da89e <__aeabi_ddiv+0x16e>
   da750:	eba4 0405 	sub.w	r4, r4, r5
   da754:	ea81 0e03 	eor.w	lr, r1, r3
   da758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da75c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da760:	f000 8088 	beq.w	da874 <__aeabi_ddiv+0x144>
   da764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da76c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da774:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da77c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da780:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da788:	429d      	cmp	r5, r3
   da78a:	bf08      	it	eq
   da78c:	4296      	cmpeq	r6, r2
   da78e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da792:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da796:	d202      	bcs.n	da79e <__aeabi_ddiv+0x6e>
   da798:	085b      	lsrs	r3, r3, #1
   da79a:	ea4f 0232 	mov.w	r2, r2, rrx
   da79e:	1ab6      	subs	r6, r6, r2
   da7a0:	eb65 0503 	sbc.w	r5, r5, r3
   da7a4:	085b      	lsrs	r3, r3, #1
   da7a6:	ea4f 0232 	mov.w	r2, r2, rrx
   da7aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da7ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da7b2:	ebb6 0e02 	subs.w	lr, r6, r2
   da7b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da7ba:	bf22      	ittt	cs
   da7bc:	1ab6      	subcs	r6, r6, r2
   da7be:	4675      	movcs	r5, lr
   da7c0:	ea40 000c 	orrcs.w	r0, r0, ip
   da7c4:	085b      	lsrs	r3, r3, #1
   da7c6:	ea4f 0232 	mov.w	r2, r2, rrx
   da7ca:	ebb6 0e02 	subs.w	lr, r6, r2
   da7ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   da7d2:	bf22      	ittt	cs
   da7d4:	1ab6      	subcs	r6, r6, r2
   da7d6:	4675      	movcs	r5, lr
   da7d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da7dc:	085b      	lsrs	r3, r3, #1
   da7de:	ea4f 0232 	mov.w	r2, r2, rrx
   da7e2:	ebb6 0e02 	subs.w	lr, r6, r2
   da7e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da7ea:	bf22      	ittt	cs
   da7ec:	1ab6      	subcs	r6, r6, r2
   da7ee:	4675      	movcs	r5, lr
   da7f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da7f4:	085b      	lsrs	r3, r3, #1
   da7f6:	ea4f 0232 	mov.w	r2, r2, rrx
   da7fa:	ebb6 0e02 	subs.w	lr, r6, r2
   da7fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   da802:	bf22      	ittt	cs
   da804:	1ab6      	subcs	r6, r6, r2
   da806:	4675      	movcs	r5, lr
   da808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da80c:	ea55 0e06 	orrs.w	lr, r5, r6
   da810:	d018      	beq.n	da844 <__aeabi_ddiv+0x114>
   da812:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da81a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da81e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da82a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da82e:	d1c0      	bne.n	da7b2 <__aeabi_ddiv+0x82>
   da830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da834:	d10b      	bne.n	da84e <__aeabi_ddiv+0x11e>
   da836:	ea41 0100 	orr.w	r1, r1, r0
   da83a:	f04f 0000 	mov.w	r0, #0
   da83e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da842:	e7b6      	b.n	da7b2 <__aeabi_ddiv+0x82>
   da844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da848:	bf04      	itt	eq
   da84a:	4301      	orreq	r1, r0
   da84c:	2000      	moveq	r0, #0
   da84e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da852:	bf88      	it	hi
   da854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da858:	f63f aeaf 	bhi.w	da5ba <__aeabi_dmul+0xde>
   da85c:	ebb5 0c03 	subs.w	ip, r5, r3
   da860:	bf04      	itt	eq
   da862:	ebb6 0c02 	subseq.w	ip, r6, r2
   da866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da86a:	f150 0000 	adcs.w	r0, r0, #0
   da86e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da872:	bd70      	pop	{r4, r5, r6, pc}
   da874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da87c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da880:	bfc2      	ittt	gt
   da882:	ebd4 050c 	rsbsgt	r5, r4, ip
   da886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da88a:	bd70      	popgt	{r4, r5, r6, pc}
   da88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da890:	f04f 0e00 	mov.w	lr, #0
   da894:	3c01      	subs	r4, #1
   da896:	e690      	b.n	da5ba <__aeabi_dmul+0xde>
   da898:	ea45 0e06 	orr.w	lr, r5, r6
   da89c:	e68d      	b.n	da5ba <__aeabi_dmul+0xde>
   da89e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da8a2:	ea94 0f0c 	teq	r4, ip
   da8a6:	bf08      	it	eq
   da8a8:	ea95 0f0c 	teqeq	r5, ip
   da8ac:	f43f af3b 	beq.w	da726 <__aeabi_dmul+0x24a>
   da8b0:	ea94 0f0c 	teq	r4, ip
   da8b4:	d10a      	bne.n	da8cc <__aeabi_ddiv+0x19c>
   da8b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da8ba:	f47f af34 	bne.w	da726 <__aeabi_dmul+0x24a>
   da8be:	ea95 0f0c 	teq	r5, ip
   da8c2:	f47f af25 	bne.w	da710 <__aeabi_dmul+0x234>
   da8c6:	4610      	mov	r0, r2
   da8c8:	4619      	mov	r1, r3
   da8ca:	e72c      	b.n	da726 <__aeabi_dmul+0x24a>
   da8cc:	ea95 0f0c 	teq	r5, ip
   da8d0:	d106      	bne.n	da8e0 <__aeabi_ddiv+0x1b0>
   da8d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da8d6:	f43f aefd 	beq.w	da6d4 <__aeabi_dmul+0x1f8>
   da8da:	4610      	mov	r0, r2
   da8dc:	4619      	mov	r1, r3
   da8de:	e722      	b.n	da726 <__aeabi_dmul+0x24a>
   da8e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da8e4:	bf18      	it	ne
   da8e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da8ea:	f47f aec5 	bne.w	da678 <__aeabi_dmul+0x19c>
   da8ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da8f2:	f47f af0d 	bne.w	da710 <__aeabi_dmul+0x234>
   da8f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da8fa:	f47f aeeb 	bne.w	da6d4 <__aeabi_dmul+0x1f8>
   da8fe:	e712      	b.n	da726 <__aeabi_dmul+0x24a>

000da900 <__gedf2>:
   da900:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da904:	e006      	b.n	da914 <__cmpdf2+0x4>
   da906:	bf00      	nop

000da908 <__ledf2>:
   da908:	f04f 0c01 	mov.w	ip, #1
   da90c:	e002      	b.n	da914 <__cmpdf2+0x4>
   da90e:	bf00      	nop

000da910 <__cmpdf2>:
   da910:	f04f 0c01 	mov.w	ip, #1
   da914:	f84d cd04 	str.w	ip, [sp, #-4]!
   da918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da91c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da924:	bf18      	it	ne
   da926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da92a:	d01b      	beq.n	da964 <__cmpdf2+0x54>
   da92c:	b001      	add	sp, #4
   da92e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da932:	bf0c      	ite	eq
   da934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da938:	ea91 0f03 	teqne	r1, r3
   da93c:	bf02      	ittt	eq
   da93e:	ea90 0f02 	teqeq	r0, r2
   da942:	2000      	moveq	r0, #0
   da944:	4770      	bxeq	lr
   da946:	f110 0f00 	cmn.w	r0, #0
   da94a:	ea91 0f03 	teq	r1, r3
   da94e:	bf58      	it	pl
   da950:	4299      	cmppl	r1, r3
   da952:	bf08      	it	eq
   da954:	4290      	cmpeq	r0, r2
   da956:	bf2c      	ite	cs
   da958:	17d8      	asrcs	r0, r3, #31
   da95a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da95e:	f040 0001 	orr.w	r0, r0, #1
   da962:	4770      	bx	lr
   da964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da96c:	d102      	bne.n	da974 <__cmpdf2+0x64>
   da96e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da972:	d107      	bne.n	da984 <__cmpdf2+0x74>
   da974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da97c:	d1d6      	bne.n	da92c <__cmpdf2+0x1c>
   da97e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da982:	d0d3      	beq.n	da92c <__cmpdf2+0x1c>
   da984:	f85d 0b04 	ldr.w	r0, [sp], #4
   da988:	4770      	bx	lr
   da98a:	bf00      	nop

000da98c <__aeabi_cdrcmple>:
   da98c:	4684      	mov	ip, r0
   da98e:	4610      	mov	r0, r2
   da990:	4662      	mov	r2, ip
   da992:	468c      	mov	ip, r1
   da994:	4619      	mov	r1, r3
   da996:	4663      	mov	r3, ip
   da998:	e000      	b.n	da99c <__aeabi_cdcmpeq>
   da99a:	bf00      	nop

000da99c <__aeabi_cdcmpeq>:
   da99c:	b501      	push	{r0, lr}
   da99e:	f7ff ffb7 	bl	da910 <__cmpdf2>
   da9a2:	2800      	cmp	r0, #0
   da9a4:	bf48      	it	mi
   da9a6:	f110 0f00 	cmnmi.w	r0, #0
   da9aa:	bd01      	pop	{r0, pc}

000da9ac <__aeabi_dcmpeq>:
   da9ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9b0:	f7ff fff4 	bl	da99c <__aeabi_cdcmpeq>
   da9b4:	bf0c      	ite	eq
   da9b6:	2001      	moveq	r0, #1
   da9b8:	2000      	movne	r0, #0
   da9ba:	f85d fb08 	ldr.w	pc, [sp], #8
   da9be:	bf00      	nop

000da9c0 <__aeabi_dcmplt>:
   da9c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9c4:	f7ff ffea 	bl	da99c <__aeabi_cdcmpeq>
   da9c8:	bf34      	ite	cc
   da9ca:	2001      	movcc	r0, #1
   da9cc:	2000      	movcs	r0, #0
   da9ce:	f85d fb08 	ldr.w	pc, [sp], #8
   da9d2:	bf00      	nop

000da9d4 <__aeabi_dcmple>:
   da9d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9d8:	f7ff ffe0 	bl	da99c <__aeabi_cdcmpeq>
   da9dc:	bf94      	ite	ls
   da9de:	2001      	movls	r0, #1
   da9e0:	2000      	movhi	r0, #0
   da9e2:	f85d fb08 	ldr.w	pc, [sp], #8
   da9e6:	bf00      	nop

000da9e8 <__aeabi_dcmpge>:
   da9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9ec:	f7ff ffce 	bl	da98c <__aeabi_cdrcmple>
   da9f0:	bf94      	ite	ls
   da9f2:	2001      	movls	r0, #1
   da9f4:	2000      	movhi	r0, #0
   da9f6:	f85d fb08 	ldr.w	pc, [sp], #8
   da9fa:	bf00      	nop

000da9fc <__aeabi_dcmpgt>:
   da9fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   daa00:	f7ff ffc4 	bl	da98c <__aeabi_cdrcmple>
   daa04:	bf34      	ite	cc
   daa06:	2001      	movcc	r0, #1
   daa08:	2000      	movcs	r0, #0
   daa0a:	f85d fb08 	ldr.w	pc, [sp], #8
   daa0e:	bf00      	nop

000daa10 <__aeabi_dcmpun>:
   daa10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daa14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa18:	d102      	bne.n	daa20 <__aeabi_dcmpun+0x10>
   daa1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daa1e:	d10a      	bne.n	daa36 <__aeabi_dcmpun+0x26>
   daa20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daa24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa28:	d102      	bne.n	daa30 <__aeabi_dcmpun+0x20>
   daa2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daa2e:	d102      	bne.n	daa36 <__aeabi_dcmpun+0x26>
   daa30:	f04f 0000 	mov.w	r0, #0
   daa34:	4770      	bx	lr
   daa36:	f04f 0001 	mov.w	r0, #1
   daa3a:	4770      	bx	lr

000daa3c <__aeabi_d2iz>:
   daa3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   daa40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   daa44:	d215      	bcs.n	daa72 <__aeabi_d2iz+0x36>
   daa46:	d511      	bpl.n	daa6c <__aeabi_d2iz+0x30>
   daa48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   daa4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   daa50:	d912      	bls.n	daa78 <__aeabi_d2iz+0x3c>
   daa52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   daa56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   daa5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   daa5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   daa62:	fa23 f002 	lsr.w	r0, r3, r2
   daa66:	bf18      	it	ne
   daa68:	4240      	negne	r0, r0
   daa6a:	4770      	bx	lr
   daa6c:	f04f 0000 	mov.w	r0, #0
   daa70:	4770      	bx	lr
   daa72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   daa76:	d105      	bne.n	daa84 <__aeabi_d2iz+0x48>
   daa78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   daa7c:	bf08      	it	eq
   daa7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   daa82:	4770      	bx	lr
   daa84:	f04f 0000 	mov.w	r0, #0
   daa88:	4770      	bx	lr
   daa8a:	bf00      	nop

000daa8c <__aeabi_d2uiz>:
   daa8c:	004a      	lsls	r2, r1, #1
   daa8e:	d211      	bcs.n	daab4 <__aeabi_d2uiz+0x28>
   daa90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   daa94:	d211      	bcs.n	daaba <__aeabi_d2uiz+0x2e>
   daa96:	d50d      	bpl.n	daab4 <__aeabi_d2uiz+0x28>
   daa98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   daa9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   daaa0:	d40e      	bmi.n	daac0 <__aeabi_d2uiz+0x34>
   daaa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   daaa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   daaaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   daaae:	fa23 f002 	lsr.w	r0, r3, r2
   daab2:	4770      	bx	lr
   daab4:	f04f 0000 	mov.w	r0, #0
   daab8:	4770      	bx	lr
   daaba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   daabe:	d102      	bne.n	daac6 <__aeabi_d2uiz+0x3a>
   daac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   daac4:	4770      	bx	lr
   daac6:	f04f 0000 	mov.w	r0, #0
   daaca:	4770      	bx	lr

000daacc <__aeabi_d2f>:
   daacc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   daad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   daad4:	bf24      	itt	cs
   daad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   daada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   daade:	d90d      	bls.n	daafc <__aeabi_d2f+0x30>
   daae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   daae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   daae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   daaec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   daaf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   daaf4:	bf08      	it	eq
   daaf6:	f020 0001 	biceq.w	r0, r0, #1
   daafa:	4770      	bx	lr
   daafc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dab00:	d121      	bne.n	dab46 <__aeabi_d2f+0x7a>
   dab02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dab06:	bfbc      	itt	lt
   dab08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dab0c:	4770      	bxlt	lr
   dab0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dab12:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dab16:	f1c2 0218 	rsb	r2, r2, #24
   dab1a:	f1c2 0c20 	rsb	ip, r2, #32
   dab1e:	fa10 f30c 	lsls.w	r3, r0, ip
   dab22:	fa20 f002 	lsr.w	r0, r0, r2
   dab26:	bf18      	it	ne
   dab28:	f040 0001 	orrne.w	r0, r0, #1
   dab2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dab30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dab34:	fa03 fc0c 	lsl.w	ip, r3, ip
   dab38:	ea40 000c 	orr.w	r0, r0, ip
   dab3c:	fa23 f302 	lsr.w	r3, r3, r2
   dab40:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dab44:	e7cc      	b.n	daae0 <__aeabi_d2f+0x14>
   dab46:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dab4a:	d107      	bne.n	dab5c <__aeabi_d2f+0x90>
   dab4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dab50:	bf1e      	ittt	ne
   dab52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dab56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dab5a:	4770      	bxne	lr
   dab5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dab60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dab64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dab68:	4770      	bx	lr
   dab6a:	bf00      	nop

000dab6c <__aeabi_uldivmod>:
   dab6c:	b953      	cbnz	r3, dab84 <__aeabi_uldivmod+0x18>
   dab6e:	b94a      	cbnz	r2, dab84 <__aeabi_uldivmod+0x18>
   dab70:	2900      	cmp	r1, #0
   dab72:	bf08      	it	eq
   dab74:	2800      	cmpeq	r0, #0
   dab76:	bf1c      	itt	ne
   dab78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   dab7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   dab80:	f000 b98c 	b.w	dae9c <__aeabi_idiv0>
   dab84:	f1ad 0c08 	sub.w	ip, sp, #8
   dab88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dab8c:	f000 f824 	bl	dabd8 <__udivmoddi4>
   dab90:	f8dd e004 	ldr.w	lr, [sp, #4]
   dab94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dab98:	b004      	add	sp, #16
   dab9a:	4770      	bx	lr

000dab9c <__aeabi_d2ulz>:
   dab9c:	b5d0      	push	{r4, r6, r7, lr}
   dab9e:	4b0c      	ldr	r3, [pc, #48]	; (dabd0 <__aeabi_d2ulz+0x34>)
   daba0:	2200      	movs	r2, #0
   daba2:	4606      	mov	r6, r0
   daba4:	460f      	mov	r7, r1
   daba6:	f7ff fc99 	bl	da4dc <__aeabi_dmul>
   dabaa:	f7ff ff6f 	bl	daa8c <__aeabi_d2uiz>
   dabae:	4604      	mov	r4, r0
   dabb0:	f7ff fc1a 	bl	da3e8 <__aeabi_ui2d>
   dabb4:	4b07      	ldr	r3, [pc, #28]	; (dabd4 <__aeabi_d2ulz+0x38>)
   dabb6:	2200      	movs	r2, #0
   dabb8:	f7ff fc90 	bl	da4dc <__aeabi_dmul>
   dabbc:	4602      	mov	r2, r0
   dabbe:	460b      	mov	r3, r1
   dabc0:	4630      	mov	r0, r6
   dabc2:	4639      	mov	r1, r7
   dabc4:	f7ff fad2 	bl	da16c <__aeabi_dsub>
   dabc8:	f7ff ff60 	bl	daa8c <__aeabi_d2uiz>
   dabcc:	4621      	mov	r1, r4
   dabce:	bdd0      	pop	{r4, r6, r7, pc}
   dabd0:	3df00000 	.word	0x3df00000
   dabd4:	41f00000 	.word	0x41f00000

000dabd8 <__udivmoddi4>:
   dabd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dabdc:	9d08      	ldr	r5, [sp, #32]
   dabde:	4604      	mov	r4, r0
   dabe0:	468c      	mov	ip, r1
   dabe2:	2b00      	cmp	r3, #0
   dabe4:	f040 8083 	bne.w	dacee <__udivmoddi4+0x116>
   dabe8:	428a      	cmp	r2, r1
   dabea:	4617      	mov	r7, r2
   dabec:	d947      	bls.n	dac7e <__udivmoddi4+0xa6>
   dabee:	fab2 f282 	clz	r2, r2
   dabf2:	b142      	cbz	r2, dac06 <__udivmoddi4+0x2e>
   dabf4:	f1c2 0020 	rsb	r0, r2, #32
   dabf8:	fa24 f000 	lsr.w	r0, r4, r0
   dabfc:	4091      	lsls	r1, r2
   dabfe:	4097      	lsls	r7, r2
   dac00:	ea40 0c01 	orr.w	ip, r0, r1
   dac04:	4094      	lsls	r4, r2
   dac06:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dac0a:	0c23      	lsrs	r3, r4, #16
   dac0c:	fbbc f6f8 	udiv	r6, ip, r8
   dac10:	fa1f fe87 	uxth.w	lr, r7
   dac14:	fb08 c116 	mls	r1, r8, r6, ip
   dac18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dac1c:	fb06 f10e 	mul.w	r1, r6, lr
   dac20:	4299      	cmp	r1, r3
   dac22:	d909      	bls.n	dac38 <__udivmoddi4+0x60>
   dac24:	18fb      	adds	r3, r7, r3
   dac26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   dac2a:	f080 8119 	bcs.w	dae60 <__udivmoddi4+0x288>
   dac2e:	4299      	cmp	r1, r3
   dac30:	f240 8116 	bls.w	dae60 <__udivmoddi4+0x288>
   dac34:	3e02      	subs	r6, #2
   dac36:	443b      	add	r3, r7
   dac38:	1a5b      	subs	r3, r3, r1
   dac3a:	b2a4      	uxth	r4, r4
   dac3c:	fbb3 f0f8 	udiv	r0, r3, r8
   dac40:	fb08 3310 	mls	r3, r8, r0, r3
   dac44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dac48:	fb00 fe0e 	mul.w	lr, r0, lr
   dac4c:	45a6      	cmp	lr, r4
   dac4e:	d909      	bls.n	dac64 <__udivmoddi4+0x8c>
   dac50:	193c      	adds	r4, r7, r4
   dac52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dac56:	f080 8105 	bcs.w	dae64 <__udivmoddi4+0x28c>
   dac5a:	45a6      	cmp	lr, r4
   dac5c:	f240 8102 	bls.w	dae64 <__udivmoddi4+0x28c>
   dac60:	3802      	subs	r0, #2
   dac62:	443c      	add	r4, r7
   dac64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dac68:	eba4 040e 	sub.w	r4, r4, lr
   dac6c:	2600      	movs	r6, #0
   dac6e:	b11d      	cbz	r5, dac78 <__udivmoddi4+0xa0>
   dac70:	40d4      	lsrs	r4, r2
   dac72:	2300      	movs	r3, #0
   dac74:	e9c5 4300 	strd	r4, r3, [r5]
   dac78:	4631      	mov	r1, r6
   dac7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dac7e:	b902      	cbnz	r2, dac82 <__udivmoddi4+0xaa>
   dac80:	deff      	udf	#255	; 0xff
   dac82:	fab2 f282 	clz	r2, r2
   dac86:	2a00      	cmp	r2, #0
   dac88:	d150      	bne.n	dad2c <__udivmoddi4+0x154>
   dac8a:	1bcb      	subs	r3, r1, r7
   dac8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dac90:	fa1f f887 	uxth.w	r8, r7
   dac94:	2601      	movs	r6, #1
   dac96:	fbb3 fcfe 	udiv	ip, r3, lr
   dac9a:	0c21      	lsrs	r1, r4, #16
   dac9c:	fb0e 331c 	mls	r3, lr, ip, r3
   daca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   daca4:	fb08 f30c 	mul.w	r3, r8, ip
   daca8:	428b      	cmp	r3, r1
   dacaa:	d907      	bls.n	dacbc <__udivmoddi4+0xe4>
   dacac:	1879      	adds	r1, r7, r1
   dacae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dacb2:	d202      	bcs.n	dacba <__udivmoddi4+0xe2>
   dacb4:	428b      	cmp	r3, r1
   dacb6:	f200 80e9 	bhi.w	dae8c <__udivmoddi4+0x2b4>
   dacba:	4684      	mov	ip, r0
   dacbc:	1ac9      	subs	r1, r1, r3
   dacbe:	b2a3      	uxth	r3, r4
   dacc0:	fbb1 f0fe 	udiv	r0, r1, lr
   dacc4:	fb0e 1110 	mls	r1, lr, r0, r1
   dacc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   daccc:	fb08 f800 	mul.w	r8, r8, r0
   dacd0:	45a0      	cmp	r8, r4
   dacd2:	d907      	bls.n	dace4 <__udivmoddi4+0x10c>
   dacd4:	193c      	adds	r4, r7, r4
   dacd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dacda:	d202      	bcs.n	dace2 <__udivmoddi4+0x10a>
   dacdc:	45a0      	cmp	r8, r4
   dacde:	f200 80d9 	bhi.w	dae94 <__udivmoddi4+0x2bc>
   dace2:	4618      	mov	r0, r3
   dace4:	eba4 0408 	sub.w	r4, r4, r8
   dace8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dacec:	e7bf      	b.n	dac6e <__udivmoddi4+0x96>
   dacee:	428b      	cmp	r3, r1
   dacf0:	d909      	bls.n	dad06 <__udivmoddi4+0x12e>
   dacf2:	2d00      	cmp	r5, #0
   dacf4:	f000 80b1 	beq.w	dae5a <__udivmoddi4+0x282>
   dacf8:	2600      	movs	r6, #0
   dacfa:	e9c5 0100 	strd	r0, r1, [r5]
   dacfe:	4630      	mov	r0, r6
   dad00:	4631      	mov	r1, r6
   dad02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dad06:	fab3 f683 	clz	r6, r3
   dad0a:	2e00      	cmp	r6, #0
   dad0c:	d14a      	bne.n	dada4 <__udivmoddi4+0x1cc>
   dad0e:	428b      	cmp	r3, r1
   dad10:	d302      	bcc.n	dad18 <__udivmoddi4+0x140>
   dad12:	4282      	cmp	r2, r0
   dad14:	f200 80b8 	bhi.w	dae88 <__udivmoddi4+0x2b0>
   dad18:	1a84      	subs	r4, r0, r2
   dad1a:	eb61 0103 	sbc.w	r1, r1, r3
   dad1e:	2001      	movs	r0, #1
   dad20:	468c      	mov	ip, r1
   dad22:	2d00      	cmp	r5, #0
   dad24:	d0a8      	beq.n	dac78 <__udivmoddi4+0xa0>
   dad26:	e9c5 4c00 	strd	r4, ip, [r5]
   dad2a:	e7a5      	b.n	dac78 <__udivmoddi4+0xa0>
   dad2c:	f1c2 0320 	rsb	r3, r2, #32
   dad30:	fa20 f603 	lsr.w	r6, r0, r3
   dad34:	4097      	lsls	r7, r2
   dad36:	fa01 f002 	lsl.w	r0, r1, r2
   dad3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dad3e:	40d9      	lsrs	r1, r3
   dad40:	4330      	orrs	r0, r6
   dad42:	0c03      	lsrs	r3, r0, #16
   dad44:	fbb1 f6fe 	udiv	r6, r1, lr
   dad48:	fa1f f887 	uxth.w	r8, r7
   dad4c:	fb0e 1116 	mls	r1, lr, r6, r1
   dad50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dad54:	fb06 f108 	mul.w	r1, r6, r8
   dad58:	4299      	cmp	r1, r3
   dad5a:	fa04 f402 	lsl.w	r4, r4, r2
   dad5e:	d909      	bls.n	dad74 <__udivmoddi4+0x19c>
   dad60:	18fb      	adds	r3, r7, r3
   dad62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dad66:	f080 808d 	bcs.w	dae84 <__udivmoddi4+0x2ac>
   dad6a:	4299      	cmp	r1, r3
   dad6c:	f240 808a 	bls.w	dae84 <__udivmoddi4+0x2ac>
   dad70:	3e02      	subs	r6, #2
   dad72:	443b      	add	r3, r7
   dad74:	1a5b      	subs	r3, r3, r1
   dad76:	b281      	uxth	r1, r0
   dad78:	fbb3 f0fe 	udiv	r0, r3, lr
   dad7c:	fb0e 3310 	mls	r3, lr, r0, r3
   dad80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dad84:	fb00 f308 	mul.w	r3, r0, r8
   dad88:	428b      	cmp	r3, r1
   dad8a:	d907      	bls.n	dad9c <__udivmoddi4+0x1c4>
   dad8c:	1879      	adds	r1, r7, r1
   dad8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dad92:	d273      	bcs.n	dae7c <__udivmoddi4+0x2a4>
   dad94:	428b      	cmp	r3, r1
   dad96:	d971      	bls.n	dae7c <__udivmoddi4+0x2a4>
   dad98:	3802      	subs	r0, #2
   dad9a:	4439      	add	r1, r7
   dad9c:	1acb      	subs	r3, r1, r3
   dad9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dada2:	e778      	b.n	dac96 <__udivmoddi4+0xbe>
   dada4:	f1c6 0c20 	rsb	ip, r6, #32
   dada8:	fa03 f406 	lsl.w	r4, r3, r6
   dadac:	fa22 f30c 	lsr.w	r3, r2, ip
   dadb0:	431c      	orrs	r4, r3
   dadb2:	fa20 f70c 	lsr.w	r7, r0, ip
   dadb6:	fa01 f306 	lsl.w	r3, r1, r6
   dadba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dadbe:	fa21 f10c 	lsr.w	r1, r1, ip
   dadc2:	431f      	orrs	r7, r3
   dadc4:	0c3b      	lsrs	r3, r7, #16
   dadc6:	fbb1 f9fe 	udiv	r9, r1, lr
   dadca:	fa1f f884 	uxth.w	r8, r4
   dadce:	fb0e 1119 	mls	r1, lr, r9, r1
   dadd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dadd6:	fb09 fa08 	mul.w	sl, r9, r8
   dadda:	458a      	cmp	sl, r1
   daddc:	fa02 f206 	lsl.w	r2, r2, r6
   dade0:	fa00 f306 	lsl.w	r3, r0, r6
   dade4:	d908      	bls.n	dadf8 <__udivmoddi4+0x220>
   dade6:	1861      	adds	r1, r4, r1
   dade8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dadec:	d248      	bcs.n	dae80 <__udivmoddi4+0x2a8>
   dadee:	458a      	cmp	sl, r1
   dadf0:	d946      	bls.n	dae80 <__udivmoddi4+0x2a8>
   dadf2:	f1a9 0902 	sub.w	r9, r9, #2
   dadf6:	4421      	add	r1, r4
   dadf8:	eba1 010a 	sub.w	r1, r1, sl
   dadfc:	b2bf      	uxth	r7, r7
   dadfe:	fbb1 f0fe 	udiv	r0, r1, lr
   dae02:	fb0e 1110 	mls	r1, lr, r0, r1
   dae06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dae0a:	fb00 f808 	mul.w	r8, r0, r8
   dae0e:	45b8      	cmp	r8, r7
   dae10:	d907      	bls.n	dae22 <__udivmoddi4+0x24a>
   dae12:	19e7      	adds	r7, r4, r7
   dae14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dae18:	d22e      	bcs.n	dae78 <__udivmoddi4+0x2a0>
   dae1a:	45b8      	cmp	r8, r7
   dae1c:	d92c      	bls.n	dae78 <__udivmoddi4+0x2a0>
   dae1e:	3802      	subs	r0, #2
   dae20:	4427      	add	r7, r4
   dae22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dae26:	eba7 0708 	sub.w	r7, r7, r8
   dae2a:	fba0 8902 	umull	r8, r9, r0, r2
   dae2e:	454f      	cmp	r7, r9
   dae30:	46c6      	mov	lr, r8
   dae32:	4649      	mov	r1, r9
   dae34:	d31a      	bcc.n	dae6c <__udivmoddi4+0x294>
   dae36:	d017      	beq.n	dae68 <__udivmoddi4+0x290>
   dae38:	b15d      	cbz	r5, dae52 <__udivmoddi4+0x27a>
   dae3a:	ebb3 020e 	subs.w	r2, r3, lr
   dae3e:	eb67 0701 	sbc.w	r7, r7, r1
   dae42:	fa07 fc0c 	lsl.w	ip, r7, ip
   dae46:	40f2      	lsrs	r2, r6
   dae48:	ea4c 0202 	orr.w	r2, ip, r2
   dae4c:	40f7      	lsrs	r7, r6
   dae4e:	e9c5 2700 	strd	r2, r7, [r5]
   dae52:	2600      	movs	r6, #0
   dae54:	4631      	mov	r1, r6
   dae56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dae5a:	462e      	mov	r6, r5
   dae5c:	4628      	mov	r0, r5
   dae5e:	e70b      	b.n	dac78 <__udivmoddi4+0xa0>
   dae60:	4606      	mov	r6, r0
   dae62:	e6e9      	b.n	dac38 <__udivmoddi4+0x60>
   dae64:	4618      	mov	r0, r3
   dae66:	e6fd      	b.n	dac64 <__udivmoddi4+0x8c>
   dae68:	4543      	cmp	r3, r8
   dae6a:	d2e5      	bcs.n	dae38 <__udivmoddi4+0x260>
   dae6c:	ebb8 0e02 	subs.w	lr, r8, r2
   dae70:	eb69 0104 	sbc.w	r1, r9, r4
   dae74:	3801      	subs	r0, #1
   dae76:	e7df      	b.n	dae38 <__udivmoddi4+0x260>
   dae78:	4608      	mov	r0, r1
   dae7a:	e7d2      	b.n	dae22 <__udivmoddi4+0x24a>
   dae7c:	4660      	mov	r0, ip
   dae7e:	e78d      	b.n	dad9c <__udivmoddi4+0x1c4>
   dae80:	4681      	mov	r9, r0
   dae82:	e7b9      	b.n	dadf8 <__udivmoddi4+0x220>
   dae84:	4666      	mov	r6, ip
   dae86:	e775      	b.n	dad74 <__udivmoddi4+0x19c>
   dae88:	4630      	mov	r0, r6
   dae8a:	e74a      	b.n	dad22 <__udivmoddi4+0x14a>
   dae8c:	f1ac 0c02 	sub.w	ip, ip, #2
   dae90:	4439      	add	r1, r7
   dae92:	e713      	b.n	dacbc <__udivmoddi4+0xe4>
   dae94:	3802      	subs	r0, #2
   dae96:	443c      	add	r4, r7
   dae98:	e724      	b.n	dace4 <__udivmoddi4+0x10c>
   dae9a:	bf00      	nop

000dae9c <__aeabi_idiv0>:
   dae9c:	4770      	bx	lr
   dae9e:	bf00      	nop

000daea0 <asctime_r>:
   daea0:	b510      	push	{r4, lr}
   daea2:	460c      	mov	r4, r1
   daea4:	6941      	ldr	r1, [r0, #20]
   daea6:	6903      	ldr	r3, [r0, #16]
   daea8:	6982      	ldr	r2, [r0, #24]
   daeaa:	b086      	sub	sp, #24
   daeac:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daeb0:	9104      	str	r1, [sp, #16]
   daeb2:	6801      	ldr	r1, [r0, #0]
   daeb4:	9103      	str	r1, [sp, #12]
   daeb6:	6841      	ldr	r1, [r0, #4]
   daeb8:	9102      	str	r1, [sp, #8]
   daeba:	6881      	ldr	r1, [r0, #8]
   daebc:	9101      	str	r1, [sp, #4]
   daebe:	68c1      	ldr	r1, [r0, #12]
   daec0:	9100      	str	r1, [sp, #0]
   daec2:	4907      	ldr	r1, [pc, #28]	; (daee0 <asctime_r+0x40>)
   daec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daec8:	440b      	add	r3, r1
   daeca:	4906      	ldr	r1, [pc, #24]	; (daee4 <asctime_r+0x44>)
   daecc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daed0:	440a      	add	r2, r1
   daed2:	4620      	mov	r0, r4
   daed4:	4904      	ldr	r1, [pc, #16]	; (daee8 <asctime_r+0x48>)
   daed6:	f7fd f9dd 	bl	d8294 <siprintf>
   daeda:	4620      	mov	r0, r4
   daedc:	b006      	add	sp, #24
   daede:	bd10      	pop	{r4, pc}
   daee0:	000ddf7e 	.word	0x000ddf7e
   daee4:	000ddf69 	.word	0x000ddf69
   daee8:	000ddf49 	.word	0x000ddf49

000daeec <atexit>:
   daeec:	2300      	movs	r3, #0
   daeee:	4601      	mov	r1, r0
   daef0:	461a      	mov	r2, r3
   daef2:	4618      	mov	r0, r3
   daef4:	f000 bf7a 	b.w	dbdec <__register_exitproc>

000daef8 <atof>:
   daef8:	2100      	movs	r1, #0
   daefa:	f000 bee7 	b.w	dbccc <strtod>

000daefe <atol>:
   daefe:	220a      	movs	r2, #10
   daf00:	2100      	movs	r1, #0
   daf02:	f000 bf69 	b.w	dbdd8 <strtol>

000daf06 <memcmp>:
   daf06:	b530      	push	{r4, r5, lr}
   daf08:	3901      	subs	r1, #1
   daf0a:	2400      	movs	r4, #0
   daf0c:	42a2      	cmp	r2, r4
   daf0e:	d101      	bne.n	daf14 <memcmp+0xe>
   daf10:	2000      	movs	r0, #0
   daf12:	e005      	b.n	daf20 <memcmp+0x1a>
   daf14:	5d03      	ldrb	r3, [r0, r4]
   daf16:	3401      	adds	r4, #1
   daf18:	5d0d      	ldrb	r5, [r1, r4]
   daf1a:	42ab      	cmp	r3, r5
   daf1c:	d0f6      	beq.n	daf0c <memcmp+0x6>
   daf1e:	1b58      	subs	r0, r3, r5
   daf20:	bd30      	pop	{r4, r5, pc}

000daf22 <memcpy>:
   daf22:	440a      	add	r2, r1
   daf24:	4291      	cmp	r1, r2
   daf26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   daf2a:	d100      	bne.n	daf2e <memcpy+0xc>
   daf2c:	4770      	bx	lr
   daf2e:	b510      	push	{r4, lr}
   daf30:	f811 4b01 	ldrb.w	r4, [r1], #1
   daf34:	f803 4f01 	strb.w	r4, [r3, #1]!
   daf38:	4291      	cmp	r1, r2
   daf3a:	d1f9      	bne.n	daf30 <memcpy+0xe>
   daf3c:	bd10      	pop	{r4, pc}

000daf3e <memset>:
   daf3e:	4402      	add	r2, r0
   daf40:	4603      	mov	r3, r0
   daf42:	4293      	cmp	r3, r2
   daf44:	d100      	bne.n	daf48 <memset+0xa>
   daf46:	4770      	bx	lr
   daf48:	f803 1b01 	strb.w	r1, [r3], #1
   daf4c:	e7f9      	b.n	daf42 <memset+0x4>
	...

000daf50 <srand>:
   daf50:	b538      	push	{r3, r4, r5, lr}
   daf52:	4b0d      	ldr	r3, [pc, #52]	; (daf88 <srand+0x38>)
   daf54:	681d      	ldr	r5, [r3, #0]
   daf56:	6bab      	ldr	r3, [r5, #56]	; 0x38
   daf58:	4604      	mov	r4, r0
   daf5a:	b97b      	cbnz	r3, daf7c <srand+0x2c>
   daf5c:	2018      	movs	r0, #24
   daf5e:	f7fd f981 	bl	d8264 <malloc>
   daf62:	4a0a      	ldr	r2, [pc, #40]	; (daf8c <srand+0x3c>)
   daf64:	4b0a      	ldr	r3, [pc, #40]	; (daf90 <srand+0x40>)
   daf66:	63a8      	str	r0, [r5, #56]	; 0x38
   daf68:	e9c0 2300 	strd	r2, r3, [r0]
   daf6c:	4b09      	ldr	r3, [pc, #36]	; (daf94 <srand+0x44>)
   daf6e:	6083      	str	r3, [r0, #8]
   daf70:	230b      	movs	r3, #11
   daf72:	8183      	strh	r3, [r0, #12]
   daf74:	2201      	movs	r2, #1
   daf76:	2300      	movs	r3, #0
   daf78:	e9c0 2304 	strd	r2, r3, [r0, #16]
   daf7c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   daf7e:	2200      	movs	r2, #0
   daf80:	611c      	str	r4, [r3, #16]
   daf82:	615a      	str	r2, [r3, #20]
   daf84:	bd38      	pop	{r3, r4, r5, pc}
   daf86:	bf00      	nop
   daf88:	2003dce8 	.word	0x2003dce8
   daf8c:	abcd330e 	.word	0xabcd330e
   daf90:	e66d1234 	.word	0xe66d1234
   daf94:	0005deec 	.word	0x0005deec

000daf98 <strcmp>:
   daf98:	f810 2b01 	ldrb.w	r2, [r0], #1
   daf9c:	f811 3b01 	ldrb.w	r3, [r1], #1
   dafa0:	2a01      	cmp	r2, #1
   dafa2:	bf28      	it	cs
   dafa4:	429a      	cmpcs	r2, r3
   dafa6:	d0f7      	beq.n	daf98 <strcmp>
   dafa8:	1ad0      	subs	r0, r2, r3
   dafaa:	4770      	bx	lr

000dafac <strcpy>:
   dafac:	4603      	mov	r3, r0
   dafae:	f811 2b01 	ldrb.w	r2, [r1], #1
   dafb2:	f803 2b01 	strb.w	r2, [r3], #1
   dafb6:	2a00      	cmp	r2, #0
   dafb8:	d1f9      	bne.n	dafae <strcpy+0x2>
   dafba:	4770      	bx	lr

000dafbc <strdup>:
   dafbc:	4b02      	ldr	r3, [pc, #8]	; (dafc8 <strdup+0xc>)
   dafbe:	4601      	mov	r1, r0
   dafc0:	6818      	ldr	r0, [r3, #0]
   dafc2:	f000 b803 	b.w	dafcc <_strdup_r>
   dafc6:	bf00      	nop
   dafc8:	2003dce8 	.word	0x2003dce8

000dafcc <_strdup_r>:
   dafcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dafce:	4604      	mov	r4, r0
   dafd0:	4608      	mov	r0, r1
   dafd2:	460d      	mov	r5, r1
   dafd4:	f000 f80f 	bl	daff6 <strlen>
   dafd8:	1c42      	adds	r2, r0, #1
   dafda:	4611      	mov	r1, r2
   dafdc:	4620      	mov	r0, r4
   dafde:	9201      	str	r2, [sp, #4]
   dafe0:	f7fd f978 	bl	d82d4 <_malloc_r>
   dafe4:	4604      	mov	r4, r0
   dafe6:	b118      	cbz	r0, daff0 <_strdup_r+0x24>
   dafe8:	9a01      	ldr	r2, [sp, #4]
   dafea:	4629      	mov	r1, r5
   dafec:	f7ff ff99 	bl	daf22 <memcpy>
   daff0:	4620      	mov	r0, r4
   daff2:	b003      	add	sp, #12
   daff4:	bd30      	pop	{r4, r5, pc}

000daff6 <strlen>:
   daff6:	4603      	mov	r3, r0
   daff8:	f813 2b01 	ldrb.w	r2, [r3], #1
   daffc:	2a00      	cmp	r2, #0
   daffe:	d1fb      	bne.n	daff8 <strlen+0x2>
   db000:	1a18      	subs	r0, r3, r0
   db002:	3801      	subs	r0, #1
   db004:	4770      	bx	lr

000db006 <strncmp>:
   db006:	b510      	push	{r4, lr}
   db008:	b16a      	cbz	r2, db026 <strncmp+0x20>
   db00a:	3901      	subs	r1, #1
   db00c:	1884      	adds	r4, r0, r2
   db00e:	f810 3b01 	ldrb.w	r3, [r0], #1
   db012:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db016:	4293      	cmp	r3, r2
   db018:	d103      	bne.n	db022 <strncmp+0x1c>
   db01a:	42a0      	cmp	r0, r4
   db01c:	d001      	beq.n	db022 <strncmp+0x1c>
   db01e:	2b00      	cmp	r3, #0
   db020:	d1f5      	bne.n	db00e <strncmp+0x8>
   db022:	1a98      	subs	r0, r3, r2
   db024:	bd10      	pop	{r4, pc}
   db026:	4610      	mov	r0, r2
   db028:	e7fc      	b.n	db024 <strncmp+0x1e>

000db02a <strncpy>:
   db02a:	b510      	push	{r4, lr}
   db02c:	3901      	subs	r1, #1
   db02e:	4603      	mov	r3, r0
   db030:	b132      	cbz	r2, db040 <strncpy+0x16>
   db032:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db036:	f803 4b01 	strb.w	r4, [r3], #1
   db03a:	3a01      	subs	r2, #1
   db03c:	2c00      	cmp	r4, #0
   db03e:	d1f7      	bne.n	db030 <strncpy+0x6>
   db040:	441a      	add	r2, r3
   db042:	2100      	movs	r1, #0
   db044:	4293      	cmp	r3, r2
   db046:	d100      	bne.n	db04a <strncpy+0x20>
   db048:	bd10      	pop	{r4, pc}
   db04a:	f803 1b01 	strb.w	r1, [r3], #1
   db04e:	e7f9      	b.n	db044 <strncpy+0x1a>

000db050 <strstr>:
   db050:	b5f0      	push	{r4, r5, r6, r7, lr}
   db052:	780c      	ldrb	r4, [r1, #0]
   db054:	b164      	cbz	r4, db070 <strstr+0x20>
   db056:	4603      	mov	r3, r0
   db058:	781a      	ldrb	r2, [r3, #0]
   db05a:	4618      	mov	r0, r3
   db05c:	1c5e      	adds	r6, r3, #1
   db05e:	b90a      	cbnz	r2, db064 <strstr+0x14>
   db060:	4610      	mov	r0, r2
   db062:	e005      	b.n	db070 <strstr+0x20>
   db064:	4294      	cmp	r4, r2
   db066:	d108      	bne.n	db07a <strstr+0x2a>
   db068:	460d      	mov	r5, r1
   db06a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   db06e:	b902      	cbnz	r2, db072 <strstr+0x22>
   db070:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db072:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   db076:	4297      	cmp	r7, r2
   db078:	d0f7      	beq.n	db06a <strstr+0x1a>
   db07a:	4633      	mov	r3, r6
   db07c:	e7ec      	b.n	db058 <strstr+0x8>

000db07e <sulp>:
   db07e:	b570      	push	{r4, r5, r6, lr}
   db080:	4604      	mov	r4, r0
   db082:	460d      	mov	r5, r1
   db084:	ec45 4b10 	vmov	d0, r4, r5
   db088:	4616      	mov	r6, r2
   db08a:	f001 fd81 	bl	dcb90 <__ulp>
   db08e:	ec51 0b10 	vmov	r0, r1, d0
   db092:	b17e      	cbz	r6, db0b4 <sulp+0x36>
   db094:	f3c5 530a 	ubfx	r3, r5, #20, #11
   db098:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db09c:	2b00      	cmp	r3, #0
   db09e:	dd09      	ble.n	db0b4 <sulp+0x36>
   db0a0:	051b      	lsls	r3, r3, #20
   db0a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   db0a6:	2400      	movs	r4, #0
   db0a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   db0ac:	4622      	mov	r2, r4
   db0ae:	462b      	mov	r3, r5
   db0b0:	f7ff fa14 	bl	da4dc <__aeabi_dmul>
   db0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000db0b8 <_strtod_l>:
   db0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db0bc:	b0a3      	sub	sp, #140	; 0x8c
   db0be:	461f      	mov	r7, r3
   db0c0:	2300      	movs	r3, #0
   db0c2:	931e      	str	r3, [sp, #120]	; 0x78
   db0c4:	4ba4      	ldr	r3, [pc, #656]	; (db358 <_strtod_l+0x2a0>)
   db0c6:	9219      	str	r2, [sp, #100]	; 0x64
   db0c8:	681b      	ldr	r3, [r3, #0]
   db0ca:	9307      	str	r3, [sp, #28]
   db0cc:	4604      	mov	r4, r0
   db0ce:	4618      	mov	r0, r3
   db0d0:	4688      	mov	r8, r1
   db0d2:	f7ff ff90 	bl	daff6 <strlen>
   db0d6:	f04f 0a00 	mov.w	sl, #0
   db0da:	4605      	mov	r5, r0
   db0dc:	f04f 0b00 	mov.w	fp, #0
   db0e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db0e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db0e6:	781a      	ldrb	r2, [r3, #0]
   db0e8:	2a2b      	cmp	r2, #43	; 0x2b
   db0ea:	d04c      	beq.n	db186 <_strtod_l+0xce>
   db0ec:	d839      	bhi.n	db162 <_strtod_l+0xaa>
   db0ee:	2a0d      	cmp	r2, #13
   db0f0:	d832      	bhi.n	db158 <_strtod_l+0xa0>
   db0f2:	2a08      	cmp	r2, #8
   db0f4:	d832      	bhi.n	db15c <_strtod_l+0xa4>
   db0f6:	2a00      	cmp	r2, #0
   db0f8:	d03c      	beq.n	db174 <_strtod_l+0xbc>
   db0fa:	2300      	movs	r3, #0
   db0fc:	930e      	str	r3, [sp, #56]	; 0x38
   db0fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   db100:	7833      	ldrb	r3, [r6, #0]
   db102:	2b30      	cmp	r3, #48	; 0x30
   db104:	f040 80b4 	bne.w	db270 <_strtod_l+0x1b8>
   db108:	7873      	ldrb	r3, [r6, #1]
   db10a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db10e:	2b58      	cmp	r3, #88	; 0x58
   db110:	d16c      	bne.n	db1ec <_strtod_l+0x134>
   db112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db114:	9301      	str	r3, [sp, #4]
   db116:	ab1e      	add	r3, sp, #120	; 0x78
   db118:	9702      	str	r7, [sp, #8]
   db11a:	9300      	str	r3, [sp, #0]
   db11c:	4a8f      	ldr	r2, [pc, #572]	; (db35c <_strtod_l+0x2a4>)
   db11e:	ab1f      	add	r3, sp, #124	; 0x7c
   db120:	a91d      	add	r1, sp, #116	; 0x74
   db122:	4620      	mov	r0, r4
   db124:	f000 ff2c 	bl	dbf80 <__gethex>
   db128:	f010 0707 	ands.w	r7, r0, #7
   db12c:	4605      	mov	r5, r0
   db12e:	d005      	beq.n	db13c <_strtod_l+0x84>
   db130:	2f06      	cmp	r7, #6
   db132:	d12a      	bne.n	db18a <_strtod_l+0xd2>
   db134:	3601      	adds	r6, #1
   db136:	2300      	movs	r3, #0
   db138:	961d      	str	r6, [sp, #116]	; 0x74
   db13a:	930e      	str	r3, [sp, #56]	; 0x38
   db13c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db13e:	2b00      	cmp	r3, #0
   db140:	f040 8596 	bne.w	dbc70 <_strtod_l+0xbb8>
   db144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db146:	b1db      	cbz	r3, db180 <_strtod_l+0xc8>
   db148:	4652      	mov	r2, sl
   db14a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db14e:	ec43 2b10 	vmov	d0, r2, r3
   db152:	b023      	add	sp, #140	; 0x8c
   db154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db158:	2a20      	cmp	r2, #32
   db15a:	d1ce      	bne.n	db0fa <_strtod_l+0x42>
   db15c:	3301      	adds	r3, #1
   db15e:	931d      	str	r3, [sp, #116]	; 0x74
   db160:	e7c0      	b.n	db0e4 <_strtod_l+0x2c>
   db162:	2a2d      	cmp	r2, #45	; 0x2d
   db164:	d1c9      	bne.n	db0fa <_strtod_l+0x42>
   db166:	2201      	movs	r2, #1
   db168:	920e      	str	r2, [sp, #56]	; 0x38
   db16a:	1c5a      	adds	r2, r3, #1
   db16c:	921d      	str	r2, [sp, #116]	; 0x74
   db16e:	785b      	ldrb	r3, [r3, #1]
   db170:	2b00      	cmp	r3, #0
   db172:	d1c4      	bne.n	db0fe <_strtod_l+0x46>
   db174:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db176:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db17a:	2b00      	cmp	r3, #0
   db17c:	f040 8576 	bne.w	dbc6c <_strtod_l+0xbb4>
   db180:	4652      	mov	r2, sl
   db182:	465b      	mov	r3, fp
   db184:	e7e3      	b.n	db14e <_strtod_l+0x96>
   db186:	2200      	movs	r2, #0
   db188:	e7ee      	b.n	db168 <_strtod_l+0xb0>
   db18a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db18c:	b13a      	cbz	r2, db19e <_strtod_l+0xe6>
   db18e:	2135      	movs	r1, #53	; 0x35
   db190:	a820      	add	r0, sp, #128	; 0x80
   db192:	f001 fdfc 	bl	dcd8e <__copybits>
   db196:	991e      	ldr	r1, [sp, #120]	; 0x78
   db198:	4620      	mov	r0, r4
   db19a:	f001 fa30 	bl	dc5fe <_Bfree>
   db19e:	3f01      	subs	r7, #1
   db1a0:	2f05      	cmp	r7, #5
   db1a2:	d807      	bhi.n	db1b4 <_strtod_l+0xfc>
   db1a4:	e8df f007 	tbb	[pc, r7]
   db1a8:	1d180b0e 	.word	0x1d180b0e
   db1ac:	030e      	.short	0x030e
   db1ae:	f04f 0b00 	mov.w	fp, #0
   db1b2:	46da      	mov	sl, fp
   db1b4:	0728      	lsls	r0, r5, #28
   db1b6:	d5c1      	bpl.n	db13c <_strtod_l+0x84>
   db1b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   db1bc:	e7be      	b.n	db13c <_strtod_l+0x84>
   db1be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   db1c2:	e7f7      	b.n	db1b4 <_strtod_l+0xfc>
   db1c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   db1c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   db1ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   db1ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   db1d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   db1d6:	e7ed      	b.n	db1b4 <_strtod_l+0xfc>
   db1d8:	f8df b184 	ldr.w	fp, [pc, #388]	; db360 <_strtod_l+0x2a8>
   db1dc:	f04f 0a00 	mov.w	sl, #0
   db1e0:	e7e8      	b.n	db1b4 <_strtod_l+0xfc>
   db1e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   db1e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db1ea:	e7e3      	b.n	db1b4 <_strtod_l+0xfc>
   db1ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db1ee:	1c5a      	adds	r2, r3, #1
   db1f0:	921d      	str	r2, [sp, #116]	; 0x74
   db1f2:	785b      	ldrb	r3, [r3, #1]
   db1f4:	2b30      	cmp	r3, #48	; 0x30
   db1f6:	d0f9      	beq.n	db1ec <_strtod_l+0x134>
   db1f8:	2b00      	cmp	r3, #0
   db1fa:	d09f      	beq.n	db13c <_strtod_l+0x84>
   db1fc:	2301      	movs	r3, #1
   db1fe:	f04f 0900 	mov.w	r9, #0
   db202:	9304      	str	r3, [sp, #16]
   db204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db206:	930a      	str	r3, [sp, #40]	; 0x28
   db208:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   db20c:	464f      	mov	r7, r9
   db20e:	220a      	movs	r2, #10
   db210:	981d      	ldr	r0, [sp, #116]	; 0x74
   db212:	7806      	ldrb	r6, [r0, #0]
   db214:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db218:	b2d9      	uxtb	r1, r3
   db21a:	2909      	cmp	r1, #9
   db21c:	d92a      	bls.n	db274 <_strtod_l+0x1bc>
   db21e:	9907      	ldr	r1, [sp, #28]
   db220:	462a      	mov	r2, r5
   db222:	f7ff fef0 	bl	db006 <strncmp>
   db226:	b398      	cbz	r0, db290 <_strtod_l+0x1d8>
   db228:	2000      	movs	r0, #0
   db22a:	4633      	mov	r3, r6
   db22c:	463d      	mov	r5, r7
   db22e:	9007      	str	r0, [sp, #28]
   db230:	4602      	mov	r2, r0
   db232:	2b65      	cmp	r3, #101	; 0x65
   db234:	d001      	beq.n	db23a <_strtod_l+0x182>
   db236:	2b45      	cmp	r3, #69	; 0x45
   db238:	d118      	bne.n	db26c <_strtod_l+0x1b4>
   db23a:	b91d      	cbnz	r5, db244 <_strtod_l+0x18c>
   db23c:	9b04      	ldr	r3, [sp, #16]
   db23e:	4303      	orrs	r3, r0
   db240:	d098      	beq.n	db174 <_strtod_l+0xbc>
   db242:	2500      	movs	r5, #0
   db244:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   db248:	f108 0301 	add.w	r3, r8, #1
   db24c:	931d      	str	r3, [sp, #116]	; 0x74
   db24e:	f898 3001 	ldrb.w	r3, [r8, #1]
   db252:	2b2b      	cmp	r3, #43	; 0x2b
   db254:	d075      	beq.n	db342 <_strtod_l+0x28a>
   db256:	2b2d      	cmp	r3, #45	; 0x2d
   db258:	d07b      	beq.n	db352 <_strtod_l+0x29a>
   db25a:	f04f 0c00 	mov.w	ip, #0
   db25e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db262:	2909      	cmp	r1, #9
   db264:	f240 8082 	bls.w	db36c <_strtod_l+0x2b4>
   db268:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db26c:	2600      	movs	r6, #0
   db26e:	e09d      	b.n	db3ac <_strtod_l+0x2f4>
   db270:	2300      	movs	r3, #0
   db272:	e7c4      	b.n	db1fe <_strtod_l+0x146>
   db274:	2f08      	cmp	r7, #8
   db276:	bfd8      	it	le
   db278:	9909      	ldrle	r1, [sp, #36]	; 0x24
   db27a:	f100 0001 	add.w	r0, r0, #1
   db27e:	bfda      	itte	le
   db280:	fb02 3301 	mlale	r3, r2, r1, r3
   db284:	9309      	strle	r3, [sp, #36]	; 0x24
   db286:	fb02 3909 	mlagt	r9, r2, r9, r3
   db28a:	3701      	adds	r7, #1
   db28c:	901d      	str	r0, [sp, #116]	; 0x74
   db28e:	e7bf      	b.n	db210 <_strtod_l+0x158>
   db290:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db292:	195a      	adds	r2, r3, r5
   db294:	921d      	str	r2, [sp, #116]	; 0x74
   db296:	5d5b      	ldrb	r3, [r3, r5]
   db298:	2f00      	cmp	r7, #0
   db29a:	d037      	beq.n	db30c <_strtod_l+0x254>
   db29c:	9007      	str	r0, [sp, #28]
   db29e:	463d      	mov	r5, r7
   db2a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   db2a4:	2a09      	cmp	r2, #9
   db2a6:	d912      	bls.n	db2ce <_strtod_l+0x216>
   db2a8:	2201      	movs	r2, #1
   db2aa:	e7c2      	b.n	db232 <_strtod_l+0x17a>
   db2ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db2ae:	1c5a      	adds	r2, r3, #1
   db2b0:	921d      	str	r2, [sp, #116]	; 0x74
   db2b2:	785b      	ldrb	r3, [r3, #1]
   db2b4:	3001      	adds	r0, #1
   db2b6:	2b30      	cmp	r3, #48	; 0x30
   db2b8:	d0f8      	beq.n	db2ac <_strtod_l+0x1f4>
   db2ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db2be:	2a08      	cmp	r2, #8
   db2c0:	f200 84db 	bhi.w	dbc7a <_strtod_l+0xbc2>
   db2c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   db2c6:	9007      	str	r0, [sp, #28]
   db2c8:	2000      	movs	r0, #0
   db2ca:	920a      	str	r2, [sp, #40]	; 0x28
   db2cc:	4605      	mov	r5, r0
   db2ce:	3b30      	subs	r3, #48	; 0x30
   db2d0:	f100 0201 	add.w	r2, r0, #1
   db2d4:	d014      	beq.n	db300 <_strtod_l+0x248>
   db2d6:	9907      	ldr	r1, [sp, #28]
   db2d8:	4411      	add	r1, r2
   db2da:	9107      	str	r1, [sp, #28]
   db2dc:	462a      	mov	r2, r5
   db2de:	eb00 0e05 	add.w	lr, r0, r5
   db2e2:	210a      	movs	r1, #10
   db2e4:	4572      	cmp	r2, lr
   db2e6:	d113      	bne.n	db310 <_strtod_l+0x258>
   db2e8:	182a      	adds	r2, r5, r0
   db2ea:	2a08      	cmp	r2, #8
   db2ec:	f105 0501 	add.w	r5, r5, #1
   db2f0:	4405      	add	r5, r0
   db2f2:	dc1c      	bgt.n	db32e <_strtod_l+0x276>
   db2f4:	9909      	ldr	r1, [sp, #36]	; 0x24
   db2f6:	220a      	movs	r2, #10
   db2f8:	fb02 3301 	mla	r3, r2, r1, r3
   db2fc:	9309      	str	r3, [sp, #36]	; 0x24
   db2fe:	2200      	movs	r2, #0
   db300:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db302:	1c59      	adds	r1, r3, #1
   db304:	911d      	str	r1, [sp, #116]	; 0x74
   db306:	785b      	ldrb	r3, [r3, #1]
   db308:	4610      	mov	r0, r2
   db30a:	e7c9      	b.n	db2a0 <_strtod_l+0x1e8>
   db30c:	4638      	mov	r0, r7
   db30e:	e7d2      	b.n	db2b6 <_strtod_l+0x1fe>
   db310:	2a08      	cmp	r2, #8
   db312:	dc04      	bgt.n	db31e <_strtod_l+0x266>
   db314:	9e09      	ldr	r6, [sp, #36]	; 0x24
   db316:	434e      	muls	r6, r1
   db318:	9609      	str	r6, [sp, #36]	; 0x24
   db31a:	3201      	adds	r2, #1
   db31c:	e7e2      	b.n	db2e4 <_strtod_l+0x22c>
   db31e:	f102 0c01 	add.w	ip, r2, #1
   db322:	f1bc 0f10 	cmp.w	ip, #16
   db326:	bfd8      	it	le
   db328:	fb01 f909 	mulle.w	r9, r1, r9
   db32c:	e7f5      	b.n	db31a <_strtod_l+0x262>
   db32e:	2d10      	cmp	r5, #16
   db330:	bfdc      	itt	le
   db332:	220a      	movle	r2, #10
   db334:	fb02 3909 	mlale	r9, r2, r9, r3
   db338:	e7e1      	b.n	db2fe <_strtod_l+0x246>
   db33a:	2300      	movs	r3, #0
   db33c:	9307      	str	r3, [sp, #28]
   db33e:	2201      	movs	r2, #1
   db340:	e77c      	b.n	db23c <_strtod_l+0x184>
   db342:	f04f 0c00 	mov.w	ip, #0
   db346:	f108 0302 	add.w	r3, r8, #2
   db34a:	931d      	str	r3, [sp, #116]	; 0x74
   db34c:	f898 3002 	ldrb.w	r3, [r8, #2]
   db350:	e785      	b.n	db25e <_strtod_l+0x1a6>
   db352:	f04f 0c01 	mov.w	ip, #1
   db356:	e7f6      	b.n	db346 <_strtod_l+0x28e>
   db358:	000de0fc 	.word	0x000de0fc
   db35c:	000ddfa8 	.word	0x000ddfa8
   db360:	7ff00000 	.word	0x7ff00000
   db364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db366:	1c59      	adds	r1, r3, #1
   db368:	911d      	str	r1, [sp, #116]	; 0x74
   db36a:	785b      	ldrb	r3, [r3, #1]
   db36c:	2b30      	cmp	r3, #48	; 0x30
   db36e:	d0f9      	beq.n	db364 <_strtod_l+0x2ac>
   db370:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   db374:	2908      	cmp	r1, #8
   db376:	f63f af79 	bhi.w	db26c <_strtod_l+0x1b4>
   db37a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db37e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db380:	9308      	str	r3, [sp, #32]
   db382:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db384:	1c59      	adds	r1, r3, #1
   db386:	911d      	str	r1, [sp, #116]	; 0x74
   db388:	785b      	ldrb	r3, [r3, #1]
   db38a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db38e:	2e09      	cmp	r6, #9
   db390:	d937      	bls.n	db402 <_strtod_l+0x34a>
   db392:	9e08      	ldr	r6, [sp, #32]
   db394:	1b89      	subs	r1, r1, r6
   db396:	2908      	cmp	r1, #8
   db398:	f644 661f 	movw	r6, #19999	; 0x4e1f
   db39c:	dc02      	bgt.n	db3a4 <_strtod_l+0x2ec>
   db39e:	4576      	cmp	r6, lr
   db3a0:	bfa8      	it	ge
   db3a2:	4676      	movge	r6, lr
   db3a4:	f1bc 0f00 	cmp.w	ip, #0
   db3a8:	d000      	beq.n	db3ac <_strtod_l+0x2f4>
   db3aa:	4276      	negs	r6, r6
   db3ac:	2d00      	cmp	r5, #0
   db3ae:	d14f      	bne.n	db450 <_strtod_l+0x398>
   db3b0:	9904      	ldr	r1, [sp, #16]
   db3b2:	4301      	orrs	r1, r0
   db3b4:	f47f aec2 	bne.w	db13c <_strtod_l+0x84>
   db3b8:	2a00      	cmp	r2, #0
   db3ba:	f47f aedb 	bne.w	db174 <_strtod_l+0xbc>
   db3be:	2b69      	cmp	r3, #105	; 0x69
   db3c0:	d027      	beq.n	db412 <_strtod_l+0x35a>
   db3c2:	dc24      	bgt.n	db40e <_strtod_l+0x356>
   db3c4:	2b49      	cmp	r3, #73	; 0x49
   db3c6:	d024      	beq.n	db412 <_strtod_l+0x35a>
   db3c8:	2b4e      	cmp	r3, #78	; 0x4e
   db3ca:	f47f aed3 	bne.w	db174 <_strtod_l+0xbc>
   db3ce:	499e      	ldr	r1, [pc, #632]	; (db648 <_strtod_l+0x590>)
   db3d0:	a81d      	add	r0, sp, #116	; 0x74
   db3d2:	f001 f81b 	bl	dc40c <__match>
   db3d6:	2800      	cmp	r0, #0
   db3d8:	f43f aecc 	beq.w	db174 <_strtod_l+0xbc>
   db3dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db3de:	781b      	ldrb	r3, [r3, #0]
   db3e0:	2b28      	cmp	r3, #40	; 0x28
   db3e2:	d12d      	bne.n	db440 <_strtod_l+0x388>
   db3e4:	4999      	ldr	r1, [pc, #612]	; (db64c <_strtod_l+0x594>)
   db3e6:	aa20      	add	r2, sp, #128	; 0x80
   db3e8:	a81d      	add	r0, sp, #116	; 0x74
   db3ea:	f001 f823 	bl	dc434 <__hexnan>
   db3ee:	2805      	cmp	r0, #5
   db3f0:	d126      	bne.n	db440 <_strtod_l+0x388>
   db3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   db3f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   db3f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db3fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db400:	e69c      	b.n	db13c <_strtod_l+0x84>
   db402:	210a      	movs	r1, #10
   db404:	fb01 3e0e 	mla	lr, r1, lr, r3
   db408:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db40c:	e7b9      	b.n	db382 <_strtod_l+0x2ca>
   db40e:	2b6e      	cmp	r3, #110	; 0x6e
   db410:	e7db      	b.n	db3ca <_strtod_l+0x312>
   db412:	498f      	ldr	r1, [pc, #572]	; (db650 <_strtod_l+0x598>)
   db414:	a81d      	add	r0, sp, #116	; 0x74
   db416:	f000 fff9 	bl	dc40c <__match>
   db41a:	2800      	cmp	r0, #0
   db41c:	f43f aeaa 	beq.w	db174 <_strtod_l+0xbc>
   db420:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db422:	498c      	ldr	r1, [pc, #560]	; (db654 <_strtod_l+0x59c>)
   db424:	3b01      	subs	r3, #1
   db426:	a81d      	add	r0, sp, #116	; 0x74
   db428:	931d      	str	r3, [sp, #116]	; 0x74
   db42a:	f000 ffef 	bl	dc40c <__match>
   db42e:	b910      	cbnz	r0, db436 <_strtod_l+0x37e>
   db430:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db432:	3301      	adds	r3, #1
   db434:	931d      	str	r3, [sp, #116]	; 0x74
   db436:	f8df b22c 	ldr.w	fp, [pc, #556]	; db664 <_strtod_l+0x5ac>
   db43a:	f04f 0a00 	mov.w	sl, #0
   db43e:	e67d      	b.n	db13c <_strtod_l+0x84>
   db440:	4885      	ldr	r0, [pc, #532]	; (db658 <_strtod_l+0x5a0>)
   db442:	f001 fcf9 	bl	dce38 <nan>
   db446:	ed8d 0b04 	vstr	d0, [sp, #16]
   db44a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   db44e:	e675      	b.n	db13c <_strtod_l+0x84>
   db450:	9b07      	ldr	r3, [sp, #28]
   db452:	9809      	ldr	r0, [sp, #36]	; 0x24
   db454:	1af3      	subs	r3, r6, r3
   db456:	2f00      	cmp	r7, #0
   db458:	bf08      	it	eq
   db45a:	462f      	moveq	r7, r5
   db45c:	2d10      	cmp	r5, #16
   db45e:	9308      	str	r3, [sp, #32]
   db460:	46a8      	mov	r8, r5
   db462:	bfa8      	it	ge
   db464:	f04f 0810 	movge.w	r8, #16
   db468:	f7fe ffbe 	bl	da3e8 <__aeabi_ui2d>
   db46c:	2d09      	cmp	r5, #9
   db46e:	4682      	mov	sl, r0
   db470:	468b      	mov	fp, r1
   db472:	dd13      	ble.n	db49c <_strtod_l+0x3e4>
   db474:	4b79      	ldr	r3, [pc, #484]	; (db65c <_strtod_l+0x5a4>)
   db476:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   db47a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db47e:	f7ff f82d 	bl	da4dc <__aeabi_dmul>
   db482:	4682      	mov	sl, r0
   db484:	4648      	mov	r0, r9
   db486:	468b      	mov	fp, r1
   db488:	f7fe ffae 	bl	da3e8 <__aeabi_ui2d>
   db48c:	4602      	mov	r2, r0
   db48e:	460b      	mov	r3, r1
   db490:	4650      	mov	r0, sl
   db492:	4659      	mov	r1, fp
   db494:	f7fe fe6c 	bl	da170 <__adddf3>
   db498:	4682      	mov	sl, r0
   db49a:	468b      	mov	fp, r1
   db49c:	2d0f      	cmp	r5, #15
   db49e:	dc38      	bgt.n	db512 <_strtod_l+0x45a>
   db4a0:	9b08      	ldr	r3, [sp, #32]
   db4a2:	2b00      	cmp	r3, #0
   db4a4:	f43f ae4a 	beq.w	db13c <_strtod_l+0x84>
   db4a8:	dd24      	ble.n	db4f4 <_strtod_l+0x43c>
   db4aa:	2b16      	cmp	r3, #22
   db4ac:	dc0b      	bgt.n	db4c6 <_strtod_l+0x40e>
   db4ae:	4d6b      	ldr	r5, [pc, #428]	; (db65c <_strtod_l+0x5a4>)
   db4b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   db4b4:	e9d5 0100 	ldrd	r0, r1, [r5]
   db4b8:	4652      	mov	r2, sl
   db4ba:	465b      	mov	r3, fp
   db4bc:	f7ff f80e 	bl	da4dc <__aeabi_dmul>
   db4c0:	4682      	mov	sl, r0
   db4c2:	468b      	mov	fp, r1
   db4c4:	e63a      	b.n	db13c <_strtod_l+0x84>
   db4c6:	9a08      	ldr	r2, [sp, #32]
   db4c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db4cc:	4293      	cmp	r3, r2
   db4ce:	db20      	blt.n	db512 <_strtod_l+0x45a>
   db4d0:	4c62      	ldr	r4, [pc, #392]	; (db65c <_strtod_l+0x5a4>)
   db4d2:	f1c5 050f 	rsb	r5, r5, #15
   db4d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db4da:	4652      	mov	r2, sl
   db4dc:	465b      	mov	r3, fp
   db4de:	e9d1 0100 	ldrd	r0, r1, [r1]
   db4e2:	f7fe fffb 	bl	da4dc <__aeabi_dmul>
   db4e6:	9b08      	ldr	r3, [sp, #32]
   db4e8:	1b5d      	subs	r5, r3, r5
   db4ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db4ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   db4f2:	e7e3      	b.n	db4bc <_strtod_l+0x404>
   db4f4:	9b08      	ldr	r3, [sp, #32]
   db4f6:	3316      	adds	r3, #22
   db4f8:	db0b      	blt.n	db512 <_strtod_l+0x45a>
   db4fa:	9b07      	ldr	r3, [sp, #28]
   db4fc:	4a57      	ldr	r2, [pc, #348]	; (db65c <_strtod_l+0x5a4>)
   db4fe:	1b9e      	subs	r6, r3, r6
   db500:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   db504:	e9d6 2300 	ldrd	r2, r3, [r6]
   db508:	4650      	mov	r0, sl
   db50a:	4659      	mov	r1, fp
   db50c:	f7ff f910 	bl	da730 <__aeabi_ddiv>
   db510:	e7d6      	b.n	db4c0 <_strtod_l+0x408>
   db512:	9b08      	ldr	r3, [sp, #32]
   db514:	eba5 0808 	sub.w	r8, r5, r8
   db518:	4498      	add	r8, r3
   db51a:	f1b8 0f00 	cmp.w	r8, #0
   db51e:	dd71      	ble.n	db604 <_strtod_l+0x54c>
   db520:	f018 030f 	ands.w	r3, r8, #15
   db524:	d00a      	beq.n	db53c <_strtod_l+0x484>
   db526:	494d      	ldr	r1, [pc, #308]	; (db65c <_strtod_l+0x5a4>)
   db528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   db52c:	4652      	mov	r2, sl
   db52e:	465b      	mov	r3, fp
   db530:	e9d1 0100 	ldrd	r0, r1, [r1]
   db534:	f7fe ffd2 	bl	da4dc <__aeabi_dmul>
   db538:	4682      	mov	sl, r0
   db53a:	468b      	mov	fp, r1
   db53c:	f038 080f 	bics.w	r8, r8, #15
   db540:	d04d      	beq.n	db5de <_strtod_l+0x526>
   db542:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   db546:	dd22      	ble.n	db58e <_strtod_l+0x4d6>
   db548:	2500      	movs	r5, #0
   db54a:	462e      	mov	r6, r5
   db54c:	9509      	str	r5, [sp, #36]	; 0x24
   db54e:	9507      	str	r5, [sp, #28]
   db550:	2322      	movs	r3, #34	; 0x22
   db552:	f8df b110 	ldr.w	fp, [pc, #272]	; db664 <_strtod_l+0x5ac>
   db556:	6023      	str	r3, [r4, #0]
   db558:	f04f 0a00 	mov.w	sl, #0
   db55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db55e:	2b00      	cmp	r3, #0
   db560:	f43f adec 	beq.w	db13c <_strtod_l+0x84>
   db564:	991e      	ldr	r1, [sp, #120]	; 0x78
   db566:	4620      	mov	r0, r4
   db568:	f001 f849 	bl	dc5fe <_Bfree>
   db56c:	9907      	ldr	r1, [sp, #28]
   db56e:	4620      	mov	r0, r4
   db570:	f001 f845 	bl	dc5fe <_Bfree>
   db574:	4631      	mov	r1, r6
   db576:	4620      	mov	r0, r4
   db578:	f001 f841 	bl	dc5fe <_Bfree>
   db57c:	9909      	ldr	r1, [sp, #36]	; 0x24
   db57e:	4620      	mov	r0, r4
   db580:	f001 f83d 	bl	dc5fe <_Bfree>
   db584:	4629      	mov	r1, r5
   db586:	4620      	mov	r0, r4
   db588:	f001 f839 	bl	dc5fe <_Bfree>
   db58c:	e5d6      	b.n	db13c <_strtod_l+0x84>
   db58e:	2300      	movs	r3, #0
   db590:	ea4f 1828 	mov.w	r8, r8, asr #4
   db594:	4650      	mov	r0, sl
   db596:	4659      	mov	r1, fp
   db598:	4699      	mov	r9, r3
   db59a:	f1b8 0f01 	cmp.w	r8, #1
   db59e:	dc21      	bgt.n	db5e4 <_strtod_l+0x52c>
   db5a0:	b10b      	cbz	r3, db5a6 <_strtod_l+0x4ee>
   db5a2:	4682      	mov	sl, r0
   db5a4:	468b      	mov	fp, r1
   db5a6:	4b2e      	ldr	r3, [pc, #184]	; (db660 <_strtod_l+0x5a8>)
   db5a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db5ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   db5b0:	4652      	mov	r2, sl
   db5b2:	465b      	mov	r3, fp
   db5b4:	e9d9 0100 	ldrd	r0, r1, [r9]
   db5b8:	f7fe ff90 	bl	da4dc <__aeabi_dmul>
   db5bc:	4b29      	ldr	r3, [pc, #164]	; (db664 <_strtod_l+0x5ac>)
   db5be:	460a      	mov	r2, r1
   db5c0:	400b      	ands	r3, r1
   db5c2:	4929      	ldr	r1, [pc, #164]	; (db668 <_strtod_l+0x5b0>)
   db5c4:	428b      	cmp	r3, r1
   db5c6:	4682      	mov	sl, r0
   db5c8:	d8be      	bhi.n	db548 <_strtod_l+0x490>
   db5ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db5ce:	428b      	cmp	r3, r1
   db5d0:	bf86      	itte	hi
   db5d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; db66c <_strtod_l+0x5b4>
   db5d6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db5da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db5de:	2300      	movs	r3, #0
   db5e0:	9304      	str	r3, [sp, #16]
   db5e2:	e081      	b.n	db6e8 <_strtod_l+0x630>
   db5e4:	f018 0f01 	tst.w	r8, #1
   db5e8:	d007      	beq.n	db5fa <_strtod_l+0x542>
   db5ea:	4b1d      	ldr	r3, [pc, #116]	; (db660 <_strtod_l+0x5a8>)
   db5ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   db5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db5f4:	f7fe ff72 	bl	da4dc <__aeabi_dmul>
   db5f8:	2301      	movs	r3, #1
   db5fa:	f109 0901 	add.w	r9, r9, #1
   db5fe:	ea4f 0868 	mov.w	r8, r8, asr #1
   db602:	e7ca      	b.n	db59a <_strtod_l+0x4e2>
   db604:	d0eb      	beq.n	db5de <_strtod_l+0x526>
   db606:	f1c8 0800 	rsb	r8, r8, #0
   db60a:	f018 020f 	ands.w	r2, r8, #15
   db60e:	d00a      	beq.n	db626 <_strtod_l+0x56e>
   db610:	4b12      	ldr	r3, [pc, #72]	; (db65c <_strtod_l+0x5a4>)
   db612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db616:	4650      	mov	r0, sl
   db618:	4659      	mov	r1, fp
   db61a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db61e:	f7ff f887 	bl	da730 <__aeabi_ddiv>
   db622:	4682      	mov	sl, r0
   db624:	468b      	mov	fp, r1
   db626:	ea5f 1828 	movs.w	r8, r8, asr #4
   db62a:	d0d8      	beq.n	db5de <_strtod_l+0x526>
   db62c:	f1b8 0f1f 	cmp.w	r8, #31
   db630:	dd1e      	ble.n	db670 <_strtod_l+0x5b8>
   db632:	2500      	movs	r5, #0
   db634:	462e      	mov	r6, r5
   db636:	9509      	str	r5, [sp, #36]	; 0x24
   db638:	9507      	str	r5, [sp, #28]
   db63a:	2322      	movs	r3, #34	; 0x22
   db63c:	f04f 0a00 	mov.w	sl, #0
   db640:	f04f 0b00 	mov.w	fp, #0
   db644:	6023      	str	r3, [r4, #0]
   db646:	e789      	b.n	db55c <_strtod_l+0x4a4>
   db648:	000ddea9 	.word	0x000ddea9
   db64c:	000ddfbc 	.word	0x000ddfbc
   db650:	000ddead 	.word	0x000ddead
   db654:	000ddfa2 	.word	0x000ddfa2
   db658:	000ddf68 	.word	0x000ddf68
   db65c:	000de138 	.word	0x000de138
   db660:	000de110 	.word	0x000de110
   db664:	7ff00000 	.word	0x7ff00000
   db668:	7ca00000 	.word	0x7ca00000
   db66c:	7fefffff 	.word	0x7fefffff
   db670:	f018 0310 	ands.w	r3, r8, #16
   db674:	bf18      	it	ne
   db676:	236a      	movne	r3, #106	; 0x6a
   db678:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dba30 <_strtod_l+0x978>
   db67c:	9304      	str	r3, [sp, #16]
   db67e:	4650      	mov	r0, sl
   db680:	4659      	mov	r1, fp
   db682:	2300      	movs	r3, #0
   db684:	f018 0f01 	tst.w	r8, #1
   db688:	d004      	beq.n	db694 <_strtod_l+0x5dc>
   db68a:	e9d9 2300 	ldrd	r2, r3, [r9]
   db68e:	f7fe ff25 	bl	da4dc <__aeabi_dmul>
   db692:	2301      	movs	r3, #1
   db694:	ea5f 0868 	movs.w	r8, r8, asr #1
   db698:	f109 0908 	add.w	r9, r9, #8
   db69c:	d1f2      	bne.n	db684 <_strtod_l+0x5cc>
   db69e:	b10b      	cbz	r3, db6a4 <_strtod_l+0x5ec>
   db6a0:	4682      	mov	sl, r0
   db6a2:	468b      	mov	fp, r1
   db6a4:	9b04      	ldr	r3, [sp, #16]
   db6a6:	b1bb      	cbz	r3, db6d8 <_strtod_l+0x620>
   db6a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db6ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db6b0:	2b00      	cmp	r3, #0
   db6b2:	4659      	mov	r1, fp
   db6b4:	dd10      	ble.n	db6d8 <_strtod_l+0x620>
   db6b6:	2b1f      	cmp	r3, #31
   db6b8:	f340 8128 	ble.w	db90c <_strtod_l+0x854>
   db6bc:	2b34      	cmp	r3, #52	; 0x34
   db6be:	bfde      	ittt	le
   db6c0:	3b20      	suble	r3, #32
   db6c2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db6c6:	fa02 f303 	lslle.w	r3, r2, r3
   db6ca:	f04f 0a00 	mov.w	sl, #0
   db6ce:	bfcc      	ite	gt
   db6d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db6d4:	ea03 0b01 	andle.w	fp, r3, r1
   db6d8:	2200      	movs	r2, #0
   db6da:	2300      	movs	r3, #0
   db6dc:	4650      	mov	r0, sl
   db6de:	4659      	mov	r1, fp
   db6e0:	f7ff f964 	bl	da9ac <__aeabi_dcmpeq>
   db6e4:	2800      	cmp	r0, #0
   db6e6:	d1a4      	bne.n	db632 <_strtod_l+0x57a>
   db6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db6ea:	9300      	str	r3, [sp, #0]
   db6ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   db6ee:	462b      	mov	r3, r5
   db6f0:	463a      	mov	r2, r7
   db6f2:	4620      	mov	r0, r4
   db6f4:	f000 ffd8 	bl	dc6a8 <__s2b>
   db6f8:	9009      	str	r0, [sp, #36]	; 0x24
   db6fa:	2800      	cmp	r0, #0
   db6fc:	f43f af24 	beq.w	db548 <_strtod_l+0x490>
   db700:	9b07      	ldr	r3, [sp, #28]
   db702:	1b9e      	subs	r6, r3, r6
   db704:	9b08      	ldr	r3, [sp, #32]
   db706:	2b00      	cmp	r3, #0
   db708:	bfb4      	ite	lt
   db70a:	4633      	movlt	r3, r6
   db70c:	2300      	movge	r3, #0
   db70e:	9310      	str	r3, [sp, #64]	; 0x40
   db710:	9b08      	ldr	r3, [sp, #32]
   db712:	2500      	movs	r5, #0
   db714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   db718:	9318      	str	r3, [sp, #96]	; 0x60
   db71a:	462e      	mov	r6, r5
   db71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db71e:	4620      	mov	r0, r4
   db720:	6859      	ldr	r1, [r3, #4]
   db722:	f000 ff38 	bl	dc596 <_Balloc>
   db726:	9007      	str	r0, [sp, #28]
   db728:	2800      	cmp	r0, #0
   db72a:	f43f af11 	beq.w	db550 <_strtod_l+0x498>
   db72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db730:	691a      	ldr	r2, [r3, #16]
   db732:	3202      	adds	r2, #2
   db734:	f103 010c 	add.w	r1, r3, #12
   db738:	0092      	lsls	r2, r2, #2
   db73a:	300c      	adds	r0, #12
   db73c:	f7ff fbf1 	bl	daf22 <memcpy>
   db740:	ec4b ab10 	vmov	d0, sl, fp
   db744:	aa20      	add	r2, sp, #128	; 0x80
   db746:	a91f      	add	r1, sp, #124	; 0x7c
   db748:	4620      	mov	r0, r4
   db74a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   db74e:	f001 fa9b 	bl	dcc88 <__d2b>
   db752:	901e      	str	r0, [sp, #120]	; 0x78
   db754:	2800      	cmp	r0, #0
   db756:	f43f aefb 	beq.w	db550 <_strtod_l+0x498>
   db75a:	2101      	movs	r1, #1
   db75c:	4620      	mov	r0, r4
   db75e:	f001 f831 	bl	dc7c4 <__i2b>
   db762:	4606      	mov	r6, r0
   db764:	2800      	cmp	r0, #0
   db766:	f43f aef3 	beq.w	db550 <_strtod_l+0x498>
   db76a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db76c:	9904      	ldr	r1, [sp, #16]
   db76e:	2b00      	cmp	r3, #0
   db770:	bfab      	itete	ge
   db772:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db774:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db776:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db778:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db77c:	bfac      	ite	ge
   db77e:	eb03 0902 	addge.w	r9, r3, r2
   db782:	1ad7      	sublt	r7, r2, r3
   db784:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db786:	eba3 0801 	sub.w	r8, r3, r1
   db78a:	4490      	add	r8, r2
   db78c:	4ba3      	ldr	r3, [pc, #652]	; (dba1c <_strtod_l+0x964>)
   db78e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db792:	4598      	cmp	r8, r3
   db794:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db798:	f280 80cc 	bge.w	db934 <_strtod_l+0x87c>
   db79c:	eba3 0308 	sub.w	r3, r3, r8
   db7a0:	2b1f      	cmp	r3, #31
   db7a2:	eba2 0203 	sub.w	r2, r2, r3
   db7a6:	f04f 0101 	mov.w	r1, #1
   db7aa:	f300 80b6 	bgt.w	db91a <_strtod_l+0x862>
   db7ae:	fa01 f303 	lsl.w	r3, r1, r3
   db7b2:	9311      	str	r3, [sp, #68]	; 0x44
   db7b4:	2300      	movs	r3, #0
   db7b6:	930c      	str	r3, [sp, #48]	; 0x30
   db7b8:	eb09 0802 	add.w	r8, r9, r2
   db7bc:	9b04      	ldr	r3, [sp, #16]
   db7be:	45c1      	cmp	r9, r8
   db7c0:	4417      	add	r7, r2
   db7c2:	441f      	add	r7, r3
   db7c4:	464b      	mov	r3, r9
   db7c6:	bfa8      	it	ge
   db7c8:	4643      	movge	r3, r8
   db7ca:	42bb      	cmp	r3, r7
   db7cc:	bfa8      	it	ge
   db7ce:	463b      	movge	r3, r7
   db7d0:	2b00      	cmp	r3, #0
   db7d2:	bfc2      	ittt	gt
   db7d4:	eba8 0803 	subgt.w	r8, r8, r3
   db7d8:	1aff      	subgt	r7, r7, r3
   db7da:	eba9 0903 	subgt.w	r9, r9, r3
   db7de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db7e0:	2b00      	cmp	r3, #0
   db7e2:	dd17      	ble.n	db814 <_strtod_l+0x75c>
   db7e4:	4631      	mov	r1, r6
   db7e6:	461a      	mov	r2, r3
   db7e8:	4620      	mov	r0, r4
   db7ea:	f001 f891 	bl	dc910 <__pow5mult>
   db7ee:	4606      	mov	r6, r0
   db7f0:	2800      	cmp	r0, #0
   db7f2:	f43f aead 	beq.w	db550 <_strtod_l+0x498>
   db7f6:	4601      	mov	r1, r0
   db7f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db7fa:	4620      	mov	r0, r4
   db7fc:	f000 ffeb 	bl	dc7d6 <__multiply>
   db800:	900f      	str	r0, [sp, #60]	; 0x3c
   db802:	2800      	cmp	r0, #0
   db804:	f43f aea4 	beq.w	db550 <_strtod_l+0x498>
   db808:	991e      	ldr	r1, [sp, #120]	; 0x78
   db80a:	4620      	mov	r0, r4
   db80c:	f000 fef7 	bl	dc5fe <_Bfree>
   db810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db812:	931e      	str	r3, [sp, #120]	; 0x78
   db814:	f1b8 0f00 	cmp.w	r8, #0
   db818:	f300 8091 	bgt.w	db93e <_strtod_l+0x886>
   db81c:	9b08      	ldr	r3, [sp, #32]
   db81e:	2b00      	cmp	r3, #0
   db820:	dd08      	ble.n	db834 <_strtod_l+0x77c>
   db822:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db824:	9907      	ldr	r1, [sp, #28]
   db826:	4620      	mov	r0, r4
   db828:	f001 f872 	bl	dc910 <__pow5mult>
   db82c:	9007      	str	r0, [sp, #28]
   db82e:	2800      	cmp	r0, #0
   db830:	f43f ae8e 	beq.w	db550 <_strtod_l+0x498>
   db834:	2f00      	cmp	r7, #0
   db836:	dd08      	ble.n	db84a <_strtod_l+0x792>
   db838:	9907      	ldr	r1, [sp, #28]
   db83a:	463a      	mov	r2, r7
   db83c:	4620      	mov	r0, r4
   db83e:	f001 f8b5 	bl	dc9ac <__lshift>
   db842:	9007      	str	r0, [sp, #28]
   db844:	2800      	cmp	r0, #0
   db846:	f43f ae83 	beq.w	db550 <_strtod_l+0x498>
   db84a:	f1b9 0f00 	cmp.w	r9, #0
   db84e:	dd08      	ble.n	db862 <_strtod_l+0x7aa>
   db850:	4631      	mov	r1, r6
   db852:	464a      	mov	r2, r9
   db854:	4620      	mov	r0, r4
   db856:	f001 f8a9 	bl	dc9ac <__lshift>
   db85a:	4606      	mov	r6, r0
   db85c:	2800      	cmp	r0, #0
   db85e:	f43f ae77 	beq.w	db550 <_strtod_l+0x498>
   db862:	9a07      	ldr	r2, [sp, #28]
   db864:	991e      	ldr	r1, [sp, #120]	; 0x78
   db866:	4620      	mov	r0, r4
   db868:	f001 f91b 	bl	dcaa2 <__mdiff>
   db86c:	4605      	mov	r5, r0
   db86e:	2800      	cmp	r0, #0
   db870:	f43f ae6e 	beq.w	db550 <_strtod_l+0x498>
   db874:	68c3      	ldr	r3, [r0, #12]
   db876:	930f      	str	r3, [sp, #60]	; 0x3c
   db878:	2300      	movs	r3, #0
   db87a:	60c3      	str	r3, [r0, #12]
   db87c:	4631      	mov	r1, r6
   db87e:	f001 f8f4 	bl	dca6a <__mcmp>
   db882:	2800      	cmp	r0, #0
   db884:	da65      	bge.n	db952 <_strtod_l+0x89a>
   db886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db888:	ea53 030a 	orrs.w	r3, r3, sl
   db88c:	f040 8087 	bne.w	db99e <_strtod_l+0x8e6>
   db890:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db894:	2b00      	cmp	r3, #0
   db896:	f040 8082 	bne.w	db99e <_strtod_l+0x8e6>
   db89a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db89e:	0d1b      	lsrs	r3, r3, #20
   db8a0:	051b      	lsls	r3, r3, #20
   db8a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db8a6:	d97a      	bls.n	db99e <_strtod_l+0x8e6>
   db8a8:	696b      	ldr	r3, [r5, #20]
   db8aa:	b913      	cbnz	r3, db8b2 <_strtod_l+0x7fa>
   db8ac:	692b      	ldr	r3, [r5, #16]
   db8ae:	2b01      	cmp	r3, #1
   db8b0:	dd75      	ble.n	db99e <_strtod_l+0x8e6>
   db8b2:	4629      	mov	r1, r5
   db8b4:	2201      	movs	r2, #1
   db8b6:	4620      	mov	r0, r4
   db8b8:	f001 f878 	bl	dc9ac <__lshift>
   db8bc:	4631      	mov	r1, r6
   db8be:	4605      	mov	r5, r0
   db8c0:	f001 f8d3 	bl	dca6a <__mcmp>
   db8c4:	2800      	cmp	r0, #0
   db8c6:	dd6a      	ble.n	db99e <_strtod_l+0x8e6>
   db8c8:	9904      	ldr	r1, [sp, #16]
   db8ca:	4a55      	ldr	r2, [pc, #340]	; (dba20 <_strtod_l+0x968>)
   db8cc:	465b      	mov	r3, fp
   db8ce:	2900      	cmp	r1, #0
   db8d0:	f000 8085 	beq.w	db9de <_strtod_l+0x926>
   db8d4:	ea02 010b 	and.w	r1, r2, fp
   db8d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db8dc:	dc7f      	bgt.n	db9de <_strtod_l+0x926>
   db8de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db8e2:	f77f aeaa 	ble.w	db63a <_strtod_l+0x582>
   db8e6:	4a4f      	ldr	r2, [pc, #316]	; (dba24 <_strtod_l+0x96c>)
   db8e8:	2300      	movs	r3, #0
   db8ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db8ee:	4650      	mov	r0, sl
   db8f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db8f4:	4659      	mov	r1, fp
   db8f6:	f7fe fdf1 	bl	da4dc <__aeabi_dmul>
   db8fa:	460b      	mov	r3, r1
   db8fc:	4303      	orrs	r3, r0
   db8fe:	bf08      	it	eq
   db900:	2322      	moveq	r3, #34	; 0x22
   db902:	4682      	mov	sl, r0
   db904:	468b      	mov	fp, r1
   db906:	bf08      	it	eq
   db908:	6023      	streq	r3, [r4, #0]
   db90a:	e62b      	b.n	db564 <_strtod_l+0x4ac>
   db90c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db910:	fa02 f303 	lsl.w	r3, r2, r3
   db914:	ea03 0a0a 	and.w	sl, r3, sl
   db918:	e6de      	b.n	db6d8 <_strtod_l+0x620>
   db91a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   db91e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   db922:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   db926:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   db92a:	fa01 f308 	lsl.w	r3, r1, r8
   db92e:	930c      	str	r3, [sp, #48]	; 0x30
   db930:	9111      	str	r1, [sp, #68]	; 0x44
   db932:	e741      	b.n	db7b8 <_strtod_l+0x700>
   db934:	2300      	movs	r3, #0
   db936:	930c      	str	r3, [sp, #48]	; 0x30
   db938:	2301      	movs	r3, #1
   db93a:	9311      	str	r3, [sp, #68]	; 0x44
   db93c:	e73c      	b.n	db7b8 <_strtod_l+0x700>
   db93e:	991e      	ldr	r1, [sp, #120]	; 0x78
   db940:	4642      	mov	r2, r8
   db942:	4620      	mov	r0, r4
   db944:	f001 f832 	bl	dc9ac <__lshift>
   db948:	901e      	str	r0, [sp, #120]	; 0x78
   db94a:	2800      	cmp	r0, #0
   db94c:	f47f af66 	bne.w	db81c <_strtod_l+0x764>
   db950:	e5fe      	b.n	db550 <_strtod_l+0x498>
   db952:	465f      	mov	r7, fp
   db954:	d16e      	bne.n	dba34 <_strtod_l+0x97c>
   db956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db958:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db95c:	b342      	cbz	r2, db9b0 <_strtod_l+0x8f8>
   db95e:	4a32      	ldr	r2, [pc, #200]	; (dba28 <_strtod_l+0x970>)
   db960:	4293      	cmp	r3, r2
   db962:	d128      	bne.n	db9b6 <_strtod_l+0x8fe>
   db964:	9b04      	ldr	r3, [sp, #16]
   db966:	4650      	mov	r0, sl
   db968:	b1eb      	cbz	r3, db9a6 <_strtod_l+0x8ee>
   db96a:	4a2d      	ldr	r2, [pc, #180]	; (dba20 <_strtod_l+0x968>)
   db96c:	403a      	ands	r2, r7
   db96e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   db972:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   db976:	d819      	bhi.n	db9ac <_strtod_l+0x8f4>
   db978:	0d12      	lsrs	r2, r2, #20
   db97a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   db97e:	fa01 f303 	lsl.w	r3, r1, r3
   db982:	4298      	cmp	r0, r3
   db984:	d117      	bne.n	db9b6 <_strtod_l+0x8fe>
   db986:	4b29      	ldr	r3, [pc, #164]	; (dba2c <_strtod_l+0x974>)
   db988:	429f      	cmp	r7, r3
   db98a:	d102      	bne.n	db992 <_strtod_l+0x8da>
   db98c:	3001      	adds	r0, #1
   db98e:	f43f addf 	beq.w	db550 <_strtod_l+0x498>
   db992:	4b23      	ldr	r3, [pc, #140]	; (dba20 <_strtod_l+0x968>)
   db994:	403b      	ands	r3, r7
   db996:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db99a:	f04f 0a00 	mov.w	sl, #0
   db99e:	9b04      	ldr	r3, [sp, #16]
   db9a0:	2b00      	cmp	r3, #0
   db9a2:	d1a0      	bne.n	db8e6 <_strtod_l+0x82e>
   db9a4:	e5de      	b.n	db564 <_strtod_l+0x4ac>
   db9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db9aa:	e7ea      	b.n	db982 <_strtod_l+0x8ca>
   db9ac:	460b      	mov	r3, r1
   db9ae:	e7e8      	b.n	db982 <_strtod_l+0x8ca>
   db9b0:	ea53 030a 	orrs.w	r3, r3, sl
   db9b4:	d088      	beq.n	db8c8 <_strtod_l+0x810>
   db9b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db9b8:	b1db      	cbz	r3, db9f2 <_strtod_l+0x93a>
   db9ba:	423b      	tst	r3, r7
   db9bc:	d0ef      	beq.n	db99e <_strtod_l+0x8e6>
   db9be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db9c0:	9a04      	ldr	r2, [sp, #16]
   db9c2:	4650      	mov	r0, sl
   db9c4:	4659      	mov	r1, fp
   db9c6:	b1c3      	cbz	r3, db9fa <_strtod_l+0x942>
   db9c8:	f7ff fb59 	bl	db07e <sulp>
   db9cc:	4602      	mov	r2, r0
   db9ce:	460b      	mov	r3, r1
   db9d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db9d4:	f7fe fbcc 	bl	da170 <__adddf3>
   db9d8:	4682      	mov	sl, r0
   db9da:	468b      	mov	fp, r1
   db9dc:	e7df      	b.n	db99e <_strtod_l+0x8e6>
   db9de:	4013      	ands	r3, r2
   db9e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db9e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db9e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db9ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db9f0:	e7d5      	b.n	db99e <_strtod_l+0x8e6>
   db9f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db9f4:	ea13 0f0a 	tst.w	r3, sl
   db9f8:	e7e0      	b.n	db9bc <_strtod_l+0x904>
   db9fa:	f7ff fb40 	bl	db07e <sulp>
   db9fe:	4602      	mov	r2, r0
   dba00:	460b      	mov	r3, r1
   dba02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dba06:	f7fe fbb1 	bl	da16c <__aeabi_dsub>
   dba0a:	2200      	movs	r2, #0
   dba0c:	2300      	movs	r3, #0
   dba0e:	4682      	mov	sl, r0
   dba10:	468b      	mov	fp, r1
   dba12:	f7fe ffcb 	bl	da9ac <__aeabi_dcmpeq>
   dba16:	2800      	cmp	r0, #0
   dba18:	d0c1      	beq.n	db99e <_strtod_l+0x8e6>
   dba1a:	e60e      	b.n	db63a <_strtod_l+0x582>
   dba1c:	fffffc02 	.word	0xfffffc02
   dba20:	7ff00000 	.word	0x7ff00000
   dba24:	39500000 	.word	0x39500000
   dba28:	000fffff 	.word	0x000fffff
   dba2c:	7fefffff 	.word	0x7fefffff
   dba30:	000ddfd0 	.word	0x000ddfd0
   dba34:	4631      	mov	r1, r6
   dba36:	4628      	mov	r0, r5
   dba38:	f001 f976 	bl	dcd28 <__ratio>
   dba3c:	ec59 8b10 	vmov	r8, r9, d0
   dba40:	ee10 0a10 	vmov	r0, s0
   dba44:	2200      	movs	r2, #0
   dba46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dba4a:	4649      	mov	r1, r9
   dba4c:	f7fe ffc2 	bl	da9d4 <__aeabi_dcmple>
   dba50:	2800      	cmp	r0, #0
   dba52:	d07c      	beq.n	dbb4e <_strtod_l+0xa96>
   dba54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dba56:	2b00      	cmp	r3, #0
   dba58:	d04c      	beq.n	dbaf4 <_strtod_l+0xa3c>
   dba5a:	4b95      	ldr	r3, [pc, #596]	; (dbcb0 <_strtod_l+0xbf8>)
   dba5c:	2200      	movs	r2, #0
   dba5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dba62:	f8df 924c 	ldr.w	r9, [pc, #588]	; dbcb0 <_strtod_l+0xbf8>
   dba66:	f04f 0800 	mov.w	r8, #0
   dba6a:	4b92      	ldr	r3, [pc, #584]	; (dbcb4 <_strtod_l+0xbfc>)
   dba6c:	403b      	ands	r3, r7
   dba6e:	9311      	str	r3, [sp, #68]	; 0x44
   dba70:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dba72:	4b91      	ldr	r3, [pc, #580]	; (dbcb8 <_strtod_l+0xc00>)
   dba74:	429a      	cmp	r2, r3
   dba76:	f040 80b2 	bne.w	dbbde <_strtod_l+0xb26>
   dba7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dba7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dba82:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dba86:	ec4b ab10 	vmov	d0, sl, fp
   dba8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dba8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dba92:	f001 f87d 	bl	dcb90 <__ulp>
   dba96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dba9a:	ec53 2b10 	vmov	r2, r3, d0
   dba9e:	f7fe fd1d 	bl	da4dc <__aeabi_dmul>
   dbaa2:	4652      	mov	r2, sl
   dbaa4:	465b      	mov	r3, fp
   dbaa6:	f7fe fb63 	bl	da170 <__adddf3>
   dbaaa:	460b      	mov	r3, r1
   dbaac:	4981      	ldr	r1, [pc, #516]	; (dbcb4 <_strtod_l+0xbfc>)
   dbaae:	4a83      	ldr	r2, [pc, #524]	; (dbcbc <_strtod_l+0xc04>)
   dbab0:	4019      	ands	r1, r3
   dbab2:	4291      	cmp	r1, r2
   dbab4:	4682      	mov	sl, r0
   dbab6:	d95e      	bls.n	dbb76 <_strtod_l+0xabe>
   dbab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dbaba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dbabe:	4293      	cmp	r3, r2
   dbac0:	d103      	bne.n	dbaca <_strtod_l+0xa12>
   dbac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbac4:	3301      	adds	r3, #1
   dbac6:	f43f ad43 	beq.w	db550 <_strtod_l+0x498>
   dbaca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dbcc8 <_strtod_l+0xc10>
   dbace:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbad2:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbad4:	4620      	mov	r0, r4
   dbad6:	f000 fd92 	bl	dc5fe <_Bfree>
   dbada:	9907      	ldr	r1, [sp, #28]
   dbadc:	4620      	mov	r0, r4
   dbade:	f000 fd8e 	bl	dc5fe <_Bfree>
   dbae2:	4631      	mov	r1, r6
   dbae4:	4620      	mov	r0, r4
   dbae6:	f000 fd8a 	bl	dc5fe <_Bfree>
   dbaea:	4629      	mov	r1, r5
   dbaec:	4620      	mov	r0, r4
   dbaee:	f000 fd86 	bl	dc5fe <_Bfree>
   dbaf2:	e613      	b.n	db71c <_strtod_l+0x664>
   dbaf4:	f1ba 0f00 	cmp.w	sl, #0
   dbaf8:	d11b      	bne.n	dbb32 <_strtod_l+0xa7a>
   dbafa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbafe:	b9f3      	cbnz	r3, dbb3e <_strtod_l+0xa86>
   dbb00:	4b6b      	ldr	r3, [pc, #428]	; (dbcb0 <_strtod_l+0xbf8>)
   dbb02:	2200      	movs	r2, #0
   dbb04:	4640      	mov	r0, r8
   dbb06:	4649      	mov	r1, r9
   dbb08:	f7fe ff5a 	bl	da9c0 <__aeabi_dcmplt>
   dbb0c:	b9d0      	cbnz	r0, dbb44 <_strtod_l+0xa8c>
   dbb0e:	4640      	mov	r0, r8
   dbb10:	4649      	mov	r1, r9
   dbb12:	4b6b      	ldr	r3, [pc, #428]	; (dbcc0 <_strtod_l+0xc08>)
   dbb14:	2200      	movs	r2, #0
   dbb16:	f7fe fce1 	bl	da4dc <__aeabi_dmul>
   dbb1a:	4680      	mov	r8, r0
   dbb1c:	4689      	mov	r9, r1
   dbb1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dbb22:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dbb26:	931b      	str	r3, [sp, #108]	; 0x6c
   dbb28:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dbb2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dbb30:	e79b      	b.n	dba6a <_strtod_l+0x9b2>
   dbb32:	f1ba 0f01 	cmp.w	sl, #1
   dbb36:	d102      	bne.n	dbb3e <_strtod_l+0xa86>
   dbb38:	2f00      	cmp	r7, #0
   dbb3a:	f43f ad7e 	beq.w	db63a <_strtod_l+0x582>
   dbb3e:	4b61      	ldr	r3, [pc, #388]	; (dbcc4 <_strtod_l+0xc0c>)
   dbb40:	2200      	movs	r2, #0
   dbb42:	e78c      	b.n	dba5e <_strtod_l+0x9a6>
   dbb44:	f8df 9178 	ldr.w	r9, [pc, #376]	; dbcc0 <_strtod_l+0xc08>
   dbb48:	f04f 0800 	mov.w	r8, #0
   dbb4c:	e7e7      	b.n	dbb1e <_strtod_l+0xa66>
   dbb4e:	4b5c      	ldr	r3, [pc, #368]	; (dbcc0 <_strtod_l+0xc08>)
   dbb50:	4640      	mov	r0, r8
   dbb52:	4649      	mov	r1, r9
   dbb54:	2200      	movs	r2, #0
   dbb56:	f7fe fcc1 	bl	da4dc <__aeabi_dmul>
   dbb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbb5c:	4680      	mov	r8, r0
   dbb5e:	4689      	mov	r9, r1
   dbb60:	b933      	cbnz	r3, dbb70 <_strtod_l+0xab8>
   dbb62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbb66:	9012      	str	r0, [sp, #72]	; 0x48
   dbb68:	9313      	str	r3, [sp, #76]	; 0x4c
   dbb6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dbb6e:	e7dd      	b.n	dbb2c <_strtod_l+0xa74>
   dbb70:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dbb74:	e7f9      	b.n	dbb6a <_strtod_l+0xab2>
   dbb76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dbb7a:	9b04      	ldr	r3, [sp, #16]
   dbb7c:	2b00      	cmp	r3, #0
   dbb7e:	d1a8      	bne.n	dbad2 <_strtod_l+0xa1a>
   dbb80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbb84:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbb86:	0d1b      	lsrs	r3, r3, #20
   dbb88:	051b      	lsls	r3, r3, #20
   dbb8a:	429a      	cmp	r2, r3
   dbb8c:	d1a1      	bne.n	dbad2 <_strtod_l+0xa1a>
   dbb8e:	4640      	mov	r0, r8
   dbb90:	4649      	mov	r1, r9
   dbb92:	f001 f967 	bl	dce64 <__aeabi_d2lz>
   dbb96:	f7fe fc73 	bl	da480 <__aeabi_l2d>
   dbb9a:	4602      	mov	r2, r0
   dbb9c:	460b      	mov	r3, r1
   dbb9e:	4640      	mov	r0, r8
   dbba0:	4649      	mov	r1, r9
   dbba2:	f7fe fae3 	bl	da16c <__aeabi_dsub>
   dbba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dbba8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbbac:	ea43 030a 	orr.w	r3, r3, sl
   dbbb0:	4313      	orrs	r3, r2
   dbbb2:	4680      	mov	r8, r0
   dbbb4:	4689      	mov	r9, r1
   dbbb6:	d053      	beq.n	dbc60 <_strtod_l+0xba8>
   dbbb8:	a335      	add	r3, pc, #212	; (adr r3, dbc90 <_strtod_l+0xbd8>)
   dbbba:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbbe:	f7fe feff 	bl	da9c0 <__aeabi_dcmplt>
   dbbc2:	2800      	cmp	r0, #0
   dbbc4:	f47f acce 	bne.w	db564 <_strtod_l+0x4ac>
   dbbc8:	a333      	add	r3, pc, #204	; (adr r3, dbc98 <_strtod_l+0xbe0>)
   dbbca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbce:	4640      	mov	r0, r8
   dbbd0:	4649      	mov	r1, r9
   dbbd2:	f7fe ff13 	bl	da9fc <__aeabi_dcmpgt>
   dbbd6:	2800      	cmp	r0, #0
   dbbd8:	f43f af7b 	beq.w	dbad2 <_strtod_l+0xa1a>
   dbbdc:	e4c2      	b.n	db564 <_strtod_l+0x4ac>
   dbbde:	9b04      	ldr	r3, [sp, #16]
   dbbe0:	b333      	cbz	r3, dbc30 <_strtod_l+0xb78>
   dbbe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dbbe4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dbbe8:	d822      	bhi.n	dbc30 <_strtod_l+0xb78>
   dbbea:	a32d      	add	r3, pc, #180	; (adr r3, dbca0 <_strtod_l+0xbe8>)
   dbbec:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbf0:	4640      	mov	r0, r8
   dbbf2:	4649      	mov	r1, r9
   dbbf4:	f7fe feee 	bl	da9d4 <__aeabi_dcmple>
   dbbf8:	b1a0      	cbz	r0, dbc24 <_strtod_l+0xb6c>
   dbbfa:	4649      	mov	r1, r9
   dbbfc:	4640      	mov	r0, r8
   dbbfe:	f7fe ff45 	bl	daa8c <__aeabi_d2uiz>
   dbc02:	2801      	cmp	r0, #1
   dbc04:	bf38      	it	cc
   dbc06:	2001      	movcc	r0, #1
   dbc08:	f7fe fbee 	bl	da3e8 <__aeabi_ui2d>
   dbc0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbc0e:	4680      	mov	r8, r0
   dbc10:	4689      	mov	r9, r1
   dbc12:	bb13      	cbnz	r3, dbc5a <_strtod_l+0xba2>
   dbc14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbc18:	9014      	str	r0, [sp, #80]	; 0x50
   dbc1a:	9315      	str	r3, [sp, #84]	; 0x54
   dbc1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dbc20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dbc24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dbc26:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbc28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dbc2c:	1a9b      	subs	r3, r3, r2
   dbc2e:	930d      	str	r3, [sp, #52]	; 0x34
   dbc30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbc34:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dbc38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dbc3c:	f000 ffa8 	bl	dcb90 <__ulp>
   dbc40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbc44:	ec53 2b10 	vmov	r2, r3, d0
   dbc48:	f7fe fc48 	bl	da4dc <__aeabi_dmul>
   dbc4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dbc50:	f7fe fa8e 	bl	da170 <__adddf3>
   dbc54:	4682      	mov	sl, r0
   dbc56:	468b      	mov	fp, r1
   dbc58:	e78f      	b.n	dbb7a <_strtod_l+0xac2>
   dbc5a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dbc5e:	e7dd      	b.n	dbc1c <_strtod_l+0xb64>
   dbc60:	a311      	add	r3, pc, #68	; (adr r3, dbca8 <_strtod_l+0xbf0>)
   dbc62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc66:	f7fe feab 	bl	da9c0 <__aeabi_dcmplt>
   dbc6a:	e7b4      	b.n	dbbd6 <_strtod_l+0xb1e>
   dbc6c:	2300      	movs	r3, #0
   dbc6e:	930e      	str	r3, [sp, #56]	; 0x38
   dbc70:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dbc72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbc74:	6013      	str	r3, [r2, #0]
   dbc76:	f7ff ba65 	b.w	db144 <_strtod_l+0x8c>
   dbc7a:	2b65      	cmp	r3, #101	; 0x65
   dbc7c:	f43f ab5d 	beq.w	db33a <_strtod_l+0x282>
   dbc80:	2b45      	cmp	r3, #69	; 0x45
   dbc82:	f43f ab5a 	beq.w	db33a <_strtod_l+0x282>
   dbc86:	2201      	movs	r2, #1
   dbc88:	f7ff bb92 	b.w	db3b0 <_strtod_l+0x2f8>
   dbc8c:	f3af 8000 	nop.w
   dbc90:	94a03595 	.word	0x94a03595
   dbc94:	3fdfffff 	.word	0x3fdfffff
   dbc98:	35afe535 	.word	0x35afe535
   dbc9c:	3fe00000 	.word	0x3fe00000
   dbca0:	ffc00000 	.word	0xffc00000
   dbca4:	41dfffff 	.word	0x41dfffff
   dbca8:	94a03595 	.word	0x94a03595
   dbcac:	3fcfffff 	.word	0x3fcfffff
   dbcb0:	3ff00000 	.word	0x3ff00000
   dbcb4:	7ff00000 	.word	0x7ff00000
   dbcb8:	7fe00000 	.word	0x7fe00000
   dbcbc:	7c9fffff 	.word	0x7c9fffff
   dbcc0:	3fe00000 	.word	0x3fe00000
   dbcc4:	bff00000 	.word	0xbff00000
   dbcc8:	7fefffff 	.word	0x7fefffff

000dbccc <strtod>:
   dbccc:	460a      	mov	r2, r1
   dbcce:	4601      	mov	r1, r0
   dbcd0:	4802      	ldr	r0, [pc, #8]	; (dbcdc <strtod+0x10>)
   dbcd2:	4b03      	ldr	r3, [pc, #12]	; (dbce0 <strtod+0x14>)
   dbcd4:	6800      	ldr	r0, [r0, #0]
   dbcd6:	f7ff b9ef 	b.w	db0b8 <_strtod_l>
   dbcda:	bf00      	nop
   dbcdc:	2003dce8 	.word	0x2003dce8
   dbce0:	2003dd54 	.word	0x2003dd54

000dbce4 <_strtol_l.isra.0>:
   dbce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbce8:	4e3a      	ldr	r6, [pc, #232]	; (dbdd4 <_strtol_l.isra.0+0xf0>)
   dbcea:	4686      	mov	lr, r0
   dbcec:	468c      	mov	ip, r1
   dbcee:	4660      	mov	r0, ip
   dbcf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbcf4:	5da5      	ldrb	r5, [r4, r6]
   dbcf6:	f015 0508 	ands.w	r5, r5, #8
   dbcfa:	d1f8      	bne.n	dbcee <_strtol_l.isra.0+0xa>
   dbcfc:	2c2d      	cmp	r4, #45	; 0x2d
   dbcfe:	d133      	bne.n	dbd68 <_strtol_l.isra.0+0x84>
   dbd00:	f89c 4000 	ldrb.w	r4, [ip]
   dbd04:	f04f 0801 	mov.w	r8, #1
   dbd08:	f100 0c02 	add.w	ip, r0, #2
   dbd0c:	2b00      	cmp	r3, #0
   dbd0e:	d05c      	beq.n	dbdca <_strtol_l.isra.0+0xe6>
   dbd10:	2b10      	cmp	r3, #16
   dbd12:	d10c      	bne.n	dbd2e <_strtol_l.isra.0+0x4a>
   dbd14:	2c30      	cmp	r4, #48	; 0x30
   dbd16:	d10a      	bne.n	dbd2e <_strtol_l.isra.0+0x4a>
   dbd18:	f89c 0000 	ldrb.w	r0, [ip]
   dbd1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbd20:	2858      	cmp	r0, #88	; 0x58
   dbd22:	d14d      	bne.n	dbdc0 <_strtol_l.isra.0+0xdc>
   dbd24:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dbd28:	2310      	movs	r3, #16
   dbd2a:	f10c 0c02 	add.w	ip, ip, #2
   dbd2e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dbd32:	3f01      	subs	r7, #1
   dbd34:	2600      	movs	r6, #0
   dbd36:	fbb7 f9f3 	udiv	r9, r7, r3
   dbd3a:	4630      	mov	r0, r6
   dbd3c:	fb03 7a19 	mls	sl, r3, r9, r7
   dbd40:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dbd44:	2d09      	cmp	r5, #9
   dbd46:	d818      	bhi.n	dbd7a <_strtol_l.isra.0+0x96>
   dbd48:	462c      	mov	r4, r5
   dbd4a:	42a3      	cmp	r3, r4
   dbd4c:	dd24      	ble.n	dbd98 <_strtol_l.isra.0+0xb4>
   dbd4e:	1c75      	adds	r5, r6, #1
   dbd50:	d007      	beq.n	dbd62 <_strtol_l.isra.0+0x7e>
   dbd52:	4581      	cmp	r9, r0
   dbd54:	d31d      	bcc.n	dbd92 <_strtol_l.isra.0+0xae>
   dbd56:	d101      	bne.n	dbd5c <_strtol_l.isra.0+0x78>
   dbd58:	45a2      	cmp	sl, r4
   dbd5a:	db1a      	blt.n	dbd92 <_strtol_l.isra.0+0xae>
   dbd5c:	fb00 4003 	mla	r0, r0, r3, r4
   dbd60:	2601      	movs	r6, #1
   dbd62:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbd66:	e7eb      	b.n	dbd40 <_strtol_l.isra.0+0x5c>
   dbd68:	2c2b      	cmp	r4, #43	; 0x2b
   dbd6a:	bf08      	it	eq
   dbd6c:	f89c 4000 	ldrbeq.w	r4, [ip]
   dbd70:	46a8      	mov	r8, r5
   dbd72:	bf08      	it	eq
   dbd74:	f100 0c02 	addeq.w	ip, r0, #2
   dbd78:	e7c8      	b.n	dbd0c <_strtol_l.isra.0+0x28>
   dbd7a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dbd7e:	2d19      	cmp	r5, #25
   dbd80:	d801      	bhi.n	dbd86 <_strtol_l.isra.0+0xa2>
   dbd82:	3c37      	subs	r4, #55	; 0x37
   dbd84:	e7e1      	b.n	dbd4a <_strtol_l.isra.0+0x66>
   dbd86:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dbd8a:	2d19      	cmp	r5, #25
   dbd8c:	d804      	bhi.n	dbd98 <_strtol_l.isra.0+0xb4>
   dbd8e:	3c57      	subs	r4, #87	; 0x57
   dbd90:	e7db      	b.n	dbd4a <_strtol_l.isra.0+0x66>
   dbd92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbd96:	e7e4      	b.n	dbd62 <_strtol_l.isra.0+0x7e>
   dbd98:	1c73      	adds	r3, r6, #1
   dbd9a:	d106      	bne.n	dbdaa <_strtol_l.isra.0+0xc6>
   dbd9c:	2322      	movs	r3, #34	; 0x22
   dbd9e:	f8ce 3000 	str.w	r3, [lr]
   dbda2:	4638      	mov	r0, r7
   dbda4:	b942      	cbnz	r2, dbdb8 <_strtol_l.isra.0+0xd4>
   dbda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbdaa:	f1b8 0f00 	cmp.w	r8, #0
   dbdae:	d000      	beq.n	dbdb2 <_strtol_l.isra.0+0xce>
   dbdb0:	4240      	negs	r0, r0
   dbdb2:	2a00      	cmp	r2, #0
   dbdb4:	d0f7      	beq.n	dbda6 <_strtol_l.isra.0+0xc2>
   dbdb6:	b10e      	cbz	r6, dbdbc <_strtol_l.isra.0+0xd8>
   dbdb8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dbdbc:	6011      	str	r1, [r2, #0]
   dbdbe:	e7f2      	b.n	dbda6 <_strtol_l.isra.0+0xc2>
   dbdc0:	2430      	movs	r4, #48	; 0x30
   dbdc2:	2b00      	cmp	r3, #0
   dbdc4:	d1b3      	bne.n	dbd2e <_strtol_l.isra.0+0x4a>
   dbdc6:	2308      	movs	r3, #8
   dbdc8:	e7b1      	b.n	dbd2e <_strtol_l.isra.0+0x4a>
   dbdca:	2c30      	cmp	r4, #48	; 0x30
   dbdcc:	d0a4      	beq.n	dbd18 <_strtol_l.isra.0+0x34>
   dbdce:	230a      	movs	r3, #10
   dbdd0:	e7ad      	b.n	dbd2e <_strtol_l.isra.0+0x4a>
   dbdd2:	bf00      	nop
   dbdd4:	000ddff9 	.word	0x000ddff9

000dbdd8 <strtol>:
   dbdd8:	4613      	mov	r3, r2
   dbdda:	460a      	mov	r2, r1
   dbddc:	4601      	mov	r1, r0
   dbdde:	4802      	ldr	r0, [pc, #8]	; (dbde8 <strtol+0x10>)
   dbde0:	6800      	ldr	r0, [r0, #0]
   dbde2:	f7ff bf7f 	b.w	dbce4 <_strtol_l.isra.0>
   dbde6:	bf00      	nop
   dbde8:	2003dce8 	.word	0x2003dce8

000dbdec <__register_exitproc>:
   dbdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbdf0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dbeac <__register_exitproc+0xc0>
   dbdf4:	4606      	mov	r6, r0
   dbdf6:	f8d8 0000 	ldr.w	r0, [r8]
   dbdfa:	461f      	mov	r7, r3
   dbdfc:	460d      	mov	r5, r1
   dbdfe:	4691      	mov	r9, r2
   dbe00:	f000 fbb4 	bl	dc56c <__retarget_lock_acquire_recursive>
   dbe04:	4b25      	ldr	r3, [pc, #148]	; (dbe9c <__register_exitproc+0xb0>)
   dbe06:	681c      	ldr	r4, [r3, #0]
   dbe08:	b934      	cbnz	r4, dbe18 <__register_exitproc+0x2c>
   dbe0a:	4c25      	ldr	r4, [pc, #148]	; (dbea0 <__register_exitproc+0xb4>)
   dbe0c:	601c      	str	r4, [r3, #0]
   dbe0e:	4b25      	ldr	r3, [pc, #148]	; (dbea4 <__register_exitproc+0xb8>)
   dbe10:	b113      	cbz	r3, dbe18 <__register_exitproc+0x2c>
   dbe12:	681b      	ldr	r3, [r3, #0]
   dbe14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dbe18:	6863      	ldr	r3, [r4, #4]
   dbe1a:	2b1f      	cmp	r3, #31
   dbe1c:	dd07      	ble.n	dbe2e <__register_exitproc+0x42>
   dbe1e:	f8d8 0000 	ldr.w	r0, [r8]
   dbe22:	f000 fba5 	bl	dc570 <__retarget_lock_release_recursive>
   dbe26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbe2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbe2e:	b34e      	cbz	r6, dbe84 <__register_exitproc+0x98>
   dbe30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dbe34:	b988      	cbnz	r0, dbe5a <__register_exitproc+0x6e>
   dbe36:	4b1c      	ldr	r3, [pc, #112]	; (dbea8 <__register_exitproc+0xbc>)
   dbe38:	b923      	cbnz	r3, dbe44 <__register_exitproc+0x58>
   dbe3a:	f8d8 0000 	ldr.w	r0, [r8]
   dbe3e:	f000 fb96 	bl	dc56e <__retarget_lock_release>
   dbe42:	e7f0      	b.n	dbe26 <__register_exitproc+0x3a>
   dbe44:	f44f 7084 	mov.w	r0, #264	; 0x108
   dbe48:	f7fc fa0c 	bl	d8264 <malloc>
   dbe4c:	2800      	cmp	r0, #0
   dbe4e:	d0f4      	beq.n	dbe3a <__register_exitproc+0x4e>
   dbe50:	2300      	movs	r3, #0
   dbe52:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dbe56:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dbe5a:	6863      	ldr	r3, [r4, #4]
   dbe5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dbe60:	2201      	movs	r2, #1
   dbe62:	409a      	lsls	r2, r3
   dbe64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dbe68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dbe6c:	4313      	orrs	r3, r2
   dbe6e:	2e02      	cmp	r6, #2
   dbe70:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dbe74:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dbe78:	bf02      	ittt	eq
   dbe7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dbe7e:	431a      	orreq	r2, r3
   dbe80:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dbe84:	6863      	ldr	r3, [r4, #4]
   dbe86:	f8d8 0000 	ldr.w	r0, [r8]
   dbe8a:	1c5a      	adds	r2, r3, #1
   dbe8c:	3302      	adds	r3, #2
   dbe8e:	6062      	str	r2, [r4, #4]
   dbe90:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dbe94:	f000 fb6c 	bl	dc570 <__retarget_lock_release_recursive>
   dbe98:	2000      	movs	r0, #0
   dbe9a:	e7c6      	b.n	dbe2a <__register_exitproc+0x3e>
   dbe9c:	2003e7e0 	.word	0x2003e7e0
   dbea0:	2003e754 	.word	0x2003e754
   dbea4:	00000000 	.word	0x00000000
   dbea8:	000d8265 	.word	0x000d8265
   dbeac:	2003dd4c 	.word	0x2003dd4c

000dbeb0 <rshift>:
   dbeb0:	6903      	ldr	r3, [r0, #16]
   dbeb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dbeb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbeba:	ea4f 1261 	mov.w	r2, r1, asr #5
   dbebe:	f100 0414 	add.w	r4, r0, #20
   dbec2:	dd45      	ble.n	dbf50 <rshift+0xa0>
   dbec4:	f011 011f 	ands.w	r1, r1, #31
   dbec8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dbecc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dbed0:	d10c      	bne.n	dbeec <rshift+0x3c>
   dbed2:	f100 0710 	add.w	r7, r0, #16
   dbed6:	4629      	mov	r1, r5
   dbed8:	42b1      	cmp	r1, r6
   dbeda:	d334      	bcc.n	dbf46 <rshift+0x96>
   dbedc:	1a9b      	subs	r3, r3, r2
   dbede:	009b      	lsls	r3, r3, #2
   dbee0:	1eea      	subs	r2, r5, #3
   dbee2:	4296      	cmp	r6, r2
   dbee4:	bf38      	it	cc
   dbee6:	2300      	movcc	r3, #0
   dbee8:	4423      	add	r3, r4
   dbeea:	e015      	b.n	dbf18 <rshift+0x68>
   dbeec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dbef0:	f1c1 0820 	rsb	r8, r1, #32
   dbef4:	40cf      	lsrs	r7, r1
   dbef6:	f105 0e04 	add.w	lr, r5, #4
   dbefa:	46a1      	mov	r9, r4
   dbefc:	4576      	cmp	r6, lr
   dbefe:	46f4      	mov	ip, lr
   dbf00:	d815      	bhi.n	dbf2e <rshift+0x7e>
   dbf02:	1a9b      	subs	r3, r3, r2
   dbf04:	009a      	lsls	r2, r3, #2
   dbf06:	3a04      	subs	r2, #4
   dbf08:	3501      	adds	r5, #1
   dbf0a:	42ae      	cmp	r6, r5
   dbf0c:	bf38      	it	cc
   dbf0e:	2200      	movcc	r2, #0
   dbf10:	18a3      	adds	r3, r4, r2
   dbf12:	50a7      	str	r7, [r4, r2]
   dbf14:	b107      	cbz	r7, dbf18 <rshift+0x68>
   dbf16:	3304      	adds	r3, #4
   dbf18:	1b1a      	subs	r2, r3, r4
   dbf1a:	42a3      	cmp	r3, r4
   dbf1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dbf20:	bf08      	it	eq
   dbf22:	2300      	moveq	r3, #0
   dbf24:	6102      	str	r2, [r0, #16]
   dbf26:	bf08      	it	eq
   dbf28:	6143      	streq	r3, [r0, #20]
   dbf2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dbf2e:	f8dc c000 	ldr.w	ip, [ip]
   dbf32:	fa0c fc08 	lsl.w	ip, ip, r8
   dbf36:	ea4c 0707 	orr.w	r7, ip, r7
   dbf3a:	f849 7b04 	str.w	r7, [r9], #4
   dbf3e:	f85e 7b04 	ldr.w	r7, [lr], #4
   dbf42:	40cf      	lsrs	r7, r1
   dbf44:	e7da      	b.n	dbefc <rshift+0x4c>
   dbf46:	f851 cb04 	ldr.w	ip, [r1], #4
   dbf4a:	f847 cf04 	str.w	ip, [r7, #4]!
   dbf4e:	e7c3      	b.n	dbed8 <rshift+0x28>
   dbf50:	4623      	mov	r3, r4
   dbf52:	e7e1      	b.n	dbf18 <rshift+0x68>

000dbf54 <__hexdig_fun>:
   dbf54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbf58:	2b09      	cmp	r3, #9
   dbf5a:	d802      	bhi.n	dbf62 <__hexdig_fun+0xe>
   dbf5c:	3820      	subs	r0, #32
   dbf5e:	b2c0      	uxtb	r0, r0
   dbf60:	4770      	bx	lr
   dbf62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dbf66:	2b05      	cmp	r3, #5
   dbf68:	d801      	bhi.n	dbf6e <__hexdig_fun+0x1a>
   dbf6a:	3847      	subs	r0, #71	; 0x47
   dbf6c:	e7f7      	b.n	dbf5e <__hexdig_fun+0xa>
   dbf6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dbf72:	2b05      	cmp	r3, #5
   dbf74:	d801      	bhi.n	dbf7a <__hexdig_fun+0x26>
   dbf76:	3827      	subs	r0, #39	; 0x27
   dbf78:	e7f1      	b.n	dbf5e <__hexdig_fun+0xa>
   dbf7a:	2000      	movs	r0, #0
   dbf7c:	4770      	bx	lr
	...

000dbf80 <__gethex>:
   dbf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf84:	ed2d 8b02 	vpush	{d8}
   dbf88:	b089      	sub	sp, #36	; 0x24
   dbf8a:	ee08 0a10 	vmov	s16, r0
   dbf8e:	9304      	str	r3, [sp, #16]
   dbf90:	4bbc      	ldr	r3, [pc, #752]	; (dc284 <__gethex+0x304>)
   dbf92:	681b      	ldr	r3, [r3, #0]
   dbf94:	9301      	str	r3, [sp, #4]
   dbf96:	4618      	mov	r0, r3
   dbf98:	468b      	mov	fp, r1
   dbf9a:	4690      	mov	r8, r2
   dbf9c:	f7ff f82b 	bl	daff6 <strlen>
   dbfa0:	9b01      	ldr	r3, [sp, #4]
   dbfa2:	f8db 2000 	ldr.w	r2, [fp]
   dbfa6:	4403      	add	r3, r0
   dbfa8:	4682      	mov	sl, r0
   dbfaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dbfae:	9305      	str	r3, [sp, #20]
   dbfb0:	1c93      	adds	r3, r2, #2
   dbfb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dbfb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dbfba:	32fe      	adds	r2, #254	; 0xfe
   dbfbc:	18d1      	adds	r1, r2, r3
   dbfbe:	461f      	mov	r7, r3
   dbfc0:	f813 0b01 	ldrb.w	r0, [r3], #1
   dbfc4:	9100      	str	r1, [sp, #0]
   dbfc6:	2830      	cmp	r0, #48	; 0x30
   dbfc8:	d0f8      	beq.n	dbfbc <__gethex+0x3c>
   dbfca:	f7ff ffc3 	bl	dbf54 <__hexdig_fun>
   dbfce:	4604      	mov	r4, r0
   dbfd0:	2800      	cmp	r0, #0
   dbfd2:	d13a      	bne.n	dc04a <__gethex+0xca>
   dbfd4:	9901      	ldr	r1, [sp, #4]
   dbfd6:	4652      	mov	r2, sl
   dbfd8:	4638      	mov	r0, r7
   dbfda:	f7ff f814 	bl	db006 <strncmp>
   dbfde:	4605      	mov	r5, r0
   dbfe0:	2800      	cmp	r0, #0
   dbfe2:	d168      	bne.n	dc0b6 <__gethex+0x136>
   dbfe4:	f817 000a 	ldrb.w	r0, [r7, sl]
   dbfe8:	eb07 060a 	add.w	r6, r7, sl
   dbfec:	f7ff ffb2 	bl	dbf54 <__hexdig_fun>
   dbff0:	2800      	cmp	r0, #0
   dbff2:	d062      	beq.n	dc0ba <__gethex+0x13a>
   dbff4:	4633      	mov	r3, r6
   dbff6:	7818      	ldrb	r0, [r3, #0]
   dbff8:	2830      	cmp	r0, #48	; 0x30
   dbffa:	461f      	mov	r7, r3
   dbffc:	f103 0301 	add.w	r3, r3, #1
   dc000:	d0f9      	beq.n	dbff6 <__gethex+0x76>
   dc002:	f7ff ffa7 	bl	dbf54 <__hexdig_fun>
   dc006:	2301      	movs	r3, #1
   dc008:	fab0 f480 	clz	r4, r0
   dc00c:	0964      	lsrs	r4, r4, #5
   dc00e:	4635      	mov	r5, r6
   dc010:	9300      	str	r3, [sp, #0]
   dc012:	463a      	mov	r2, r7
   dc014:	4616      	mov	r6, r2
   dc016:	3201      	adds	r2, #1
   dc018:	7830      	ldrb	r0, [r6, #0]
   dc01a:	f7ff ff9b 	bl	dbf54 <__hexdig_fun>
   dc01e:	2800      	cmp	r0, #0
   dc020:	d1f8      	bne.n	dc014 <__gethex+0x94>
   dc022:	9901      	ldr	r1, [sp, #4]
   dc024:	4652      	mov	r2, sl
   dc026:	4630      	mov	r0, r6
   dc028:	f7fe ffed 	bl	db006 <strncmp>
   dc02c:	b980      	cbnz	r0, dc050 <__gethex+0xd0>
   dc02e:	b94d      	cbnz	r5, dc044 <__gethex+0xc4>
   dc030:	eb06 050a 	add.w	r5, r6, sl
   dc034:	462a      	mov	r2, r5
   dc036:	4616      	mov	r6, r2
   dc038:	3201      	adds	r2, #1
   dc03a:	7830      	ldrb	r0, [r6, #0]
   dc03c:	f7ff ff8a 	bl	dbf54 <__hexdig_fun>
   dc040:	2800      	cmp	r0, #0
   dc042:	d1f8      	bne.n	dc036 <__gethex+0xb6>
   dc044:	1bad      	subs	r5, r5, r6
   dc046:	00ad      	lsls	r5, r5, #2
   dc048:	e004      	b.n	dc054 <__gethex+0xd4>
   dc04a:	2400      	movs	r4, #0
   dc04c:	4625      	mov	r5, r4
   dc04e:	e7e0      	b.n	dc012 <__gethex+0x92>
   dc050:	2d00      	cmp	r5, #0
   dc052:	d1f7      	bne.n	dc044 <__gethex+0xc4>
   dc054:	7833      	ldrb	r3, [r6, #0]
   dc056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc05a:	2b50      	cmp	r3, #80	; 0x50
   dc05c:	d13b      	bne.n	dc0d6 <__gethex+0x156>
   dc05e:	7873      	ldrb	r3, [r6, #1]
   dc060:	2b2b      	cmp	r3, #43	; 0x2b
   dc062:	d02c      	beq.n	dc0be <__gethex+0x13e>
   dc064:	2b2d      	cmp	r3, #45	; 0x2d
   dc066:	d02e      	beq.n	dc0c6 <__gethex+0x146>
   dc068:	1c71      	adds	r1, r6, #1
   dc06a:	f04f 0900 	mov.w	r9, #0
   dc06e:	7808      	ldrb	r0, [r1, #0]
   dc070:	f7ff ff70 	bl	dbf54 <__hexdig_fun>
   dc074:	1e43      	subs	r3, r0, #1
   dc076:	b2db      	uxtb	r3, r3
   dc078:	2b18      	cmp	r3, #24
   dc07a:	d82c      	bhi.n	dc0d6 <__gethex+0x156>
   dc07c:	f1a0 0210 	sub.w	r2, r0, #16
   dc080:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc084:	f7ff ff66 	bl	dbf54 <__hexdig_fun>
   dc088:	1e43      	subs	r3, r0, #1
   dc08a:	b2db      	uxtb	r3, r3
   dc08c:	2b18      	cmp	r3, #24
   dc08e:	d91d      	bls.n	dc0cc <__gethex+0x14c>
   dc090:	f1b9 0f00 	cmp.w	r9, #0
   dc094:	d000      	beq.n	dc098 <__gethex+0x118>
   dc096:	4252      	negs	r2, r2
   dc098:	4415      	add	r5, r2
   dc09a:	f8cb 1000 	str.w	r1, [fp]
   dc09e:	b1e4      	cbz	r4, dc0da <__gethex+0x15a>
   dc0a0:	9b00      	ldr	r3, [sp, #0]
   dc0a2:	2b00      	cmp	r3, #0
   dc0a4:	bf14      	ite	ne
   dc0a6:	2700      	movne	r7, #0
   dc0a8:	2706      	moveq	r7, #6
   dc0aa:	4638      	mov	r0, r7
   dc0ac:	b009      	add	sp, #36	; 0x24
   dc0ae:	ecbd 8b02 	vpop	{d8}
   dc0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0b6:	463e      	mov	r6, r7
   dc0b8:	4625      	mov	r5, r4
   dc0ba:	2401      	movs	r4, #1
   dc0bc:	e7ca      	b.n	dc054 <__gethex+0xd4>
   dc0be:	f04f 0900 	mov.w	r9, #0
   dc0c2:	1cb1      	adds	r1, r6, #2
   dc0c4:	e7d3      	b.n	dc06e <__gethex+0xee>
   dc0c6:	f04f 0901 	mov.w	r9, #1
   dc0ca:	e7fa      	b.n	dc0c2 <__gethex+0x142>
   dc0cc:	230a      	movs	r3, #10
   dc0ce:	fb03 0202 	mla	r2, r3, r2, r0
   dc0d2:	3a10      	subs	r2, #16
   dc0d4:	e7d4      	b.n	dc080 <__gethex+0x100>
   dc0d6:	4631      	mov	r1, r6
   dc0d8:	e7df      	b.n	dc09a <__gethex+0x11a>
   dc0da:	1bf3      	subs	r3, r6, r7
   dc0dc:	3b01      	subs	r3, #1
   dc0de:	4621      	mov	r1, r4
   dc0e0:	2b07      	cmp	r3, #7
   dc0e2:	dc52      	bgt.n	dc18a <__gethex+0x20a>
   dc0e4:	ee18 0a10 	vmov	r0, s16
   dc0e8:	f000 fa55 	bl	dc596 <_Balloc>
   dc0ec:	f04f 0b00 	mov.w	fp, #0
   dc0f0:	f100 0914 	add.w	r9, r0, #20
   dc0f4:	f1ca 0301 	rsb	r3, sl, #1
   dc0f8:	4604      	mov	r4, r0
   dc0fa:	f8cd 9008 	str.w	r9, [sp, #8]
   dc0fe:	f8cd b000 	str.w	fp, [sp]
   dc102:	9306      	str	r3, [sp, #24]
   dc104:	42b7      	cmp	r7, r6
   dc106:	d343      	bcc.n	dc190 <__gethex+0x210>
   dc108:	9802      	ldr	r0, [sp, #8]
   dc10a:	9b00      	ldr	r3, [sp, #0]
   dc10c:	f840 3b04 	str.w	r3, [r0], #4
   dc110:	eba0 0009 	sub.w	r0, r0, r9
   dc114:	1080      	asrs	r0, r0, #2
   dc116:	0146      	lsls	r6, r0, #5
   dc118:	6120      	str	r0, [r4, #16]
   dc11a:	4618      	mov	r0, r3
   dc11c:	f000 fb02 	bl	dc724 <__hi0bits>
   dc120:	1a30      	subs	r0, r6, r0
   dc122:	f8d8 6000 	ldr.w	r6, [r8]
   dc126:	42b0      	cmp	r0, r6
   dc128:	dd66      	ble.n	dc1f8 <__gethex+0x278>
   dc12a:	1b87      	subs	r7, r0, r6
   dc12c:	4639      	mov	r1, r7
   dc12e:	4620      	mov	r0, r4
   dc130:	f000 fe50 	bl	dcdd4 <__any_on>
   dc134:	4682      	mov	sl, r0
   dc136:	b1a8      	cbz	r0, dc164 <__gethex+0x1e4>
   dc138:	1e7b      	subs	r3, r7, #1
   dc13a:	1159      	asrs	r1, r3, #5
   dc13c:	f003 021f 	and.w	r2, r3, #31
   dc140:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dc144:	f04f 0a01 	mov.w	sl, #1
   dc148:	fa0a f202 	lsl.w	r2, sl, r2
   dc14c:	420a      	tst	r2, r1
   dc14e:	d009      	beq.n	dc164 <__gethex+0x1e4>
   dc150:	4553      	cmp	r3, sl
   dc152:	dd05      	ble.n	dc160 <__gethex+0x1e0>
   dc154:	1eb9      	subs	r1, r7, #2
   dc156:	4620      	mov	r0, r4
   dc158:	f000 fe3c 	bl	dcdd4 <__any_on>
   dc15c:	2800      	cmp	r0, #0
   dc15e:	d148      	bne.n	dc1f2 <__gethex+0x272>
   dc160:	f04f 0a02 	mov.w	sl, #2
   dc164:	4639      	mov	r1, r7
   dc166:	4620      	mov	r0, r4
   dc168:	f7ff fea2 	bl	dbeb0 <rshift>
   dc16c:	443d      	add	r5, r7
   dc16e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc172:	42ab      	cmp	r3, r5
   dc174:	da4f      	bge.n	dc216 <__gethex+0x296>
   dc176:	ee18 0a10 	vmov	r0, s16
   dc17a:	4621      	mov	r1, r4
   dc17c:	f000 fa3f 	bl	dc5fe <_Bfree>
   dc180:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc182:	2300      	movs	r3, #0
   dc184:	6013      	str	r3, [r2, #0]
   dc186:	27a3      	movs	r7, #163	; 0xa3
   dc188:	e78f      	b.n	dc0aa <__gethex+0x12a>
   dc18a:	3101      	adds	r1, #1
   dc18c:	105b      	asrs	r3, r3, #1
   dc18e:	e7a7      	b.n	dc0e0 <__gethex+0x160>
   dc190:	1e73      	subs	r3, r6, #1
   dc192:	9a05      	ldr	r2, [sp, #20]
   dc194:	9303      	str	r3, [sp, #12]
   dc196:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc19a:	4293      	cmp	r3, r2
   dc19c:	d019      	beq.n	dc1d2 <__gethex+0x252>
   dc19e:	f1bb 0f20 	cmp.w	fp, #32
   dc1a2:	d107      	bne.n	dc1b4 <__gethex+0x234>
   dc1a4:	9b02      	ldr	r3, [sp, #8]
   dc1a6:	9a00      	ldr	r2, [sp, #0]
   dc1a8:	f843 2b04 	str.w	r2, [r3], #4
   dc1ac:	9302      	str	r3, [sp, #8]
   dc1ae:	2300      	movs	r3, #0
   dc1b0:	9300      	str	r3, [sp, #0]
   dc1b2:	469b      	mov	fp, r3
   dc1b4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc1b8:	f7ff fecc 	bl	dbf54 <__hexdig_fun>
   dc1bc:	9b00      	ldr	r3, [sp, #0]
   dc1be:	f000 000f 	and.w	r0, r0, #15
   dc1c2:	fa00 f00b 	lsl.w	r0, r0, fp
   dc1c6:	4303      	orrs	r3, r0
   dc1c8:	9300      	str	r3, [sp, #0]
   dc1ca:	f10b 0b04 	add.w	fp, fp, #4
   dc1ce:	9b03      	ldr	r3, [sp, #12]
   dc1d0:	e00d      	b.n	dc1ee <__gethex+0x26e>
   dc1d2:	9b03      	ldr	r3, [sp, #12]
   dc1d4:	9a06      	ldr	r2, [sp, #24]
   dc1d6:	4413      	add	r3, r2
   dc1d8:	42bb      	cmp	r3, r7
   dc1da:	d3e0      	bcc.n	dc19e <__gethex+0x21e>
   dc1dc:	4618      	mov	r0, r3
   dc1de:	9901      	ldr	r1, [sp, #4]
   dc1e0:	9307      	str	r3, [sp, #28]
   dc1e2:	4652      	mov	r2, sl
   dc1e4:	f7fe ff0f 	bl	db006 <strncmp>
   dc1e8:	9b07      	ldr	r3, [sp, #28]
   dc1ea:	2800      	cmp	r0, #0
   dc1ec:	d1d7      	bne.n	dc19e <__gethex+0x21e>
   dc1ee:	461e      	mov	r6, r3
   dc1f0:	e788      	b.n	dc104 <__gethex+0x184>
   dc1f2:	f04f 0a03 	mov.w	sl, #3
   dc1f6:	e7b5      	b.n	dc164 <__gethex+0x1e4>
   dc1f8:	da0a      	bge.n	dc210 <__gethex+0x290>
   dc1fa:	1a37      	subs	r7, r6, r0
   dc1fc:	4621      	mov	r1, r4
   dc1fe:	ee18 0a10 	vmov	r0, s16
   dc202:	463a      	mov	r2, r7
   dc204:	f000 fbd2 	bl	dc9ac <__lshift>
   dc208:	1bed      	subs	r5, r5, r7
   dc20a:	4604      	mov	r4, r0
   dc20c:	f100 0914 	add.w	r9, r0, #20
   dc210:	f04f 0a00 	mov.w	sl, #0
   dc214:	e7ab      	b.n	dc16e <__gethex+0x1ee>
   dc216:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc21a:	42a8      	cmp	r0, r5
   dc21c:	dd6d      	ble.n	dc2fa <__gethex+0x37a>
   dc21e:	1b45      	subs	r5, r0, r5
   dc220:	42ae      	cmp	r6, r5
   dc222:	dc31      	bgt.n	dc288 <__gethex+0x308>
   dc224:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc228:	2b02      	cmp	r3, #2
   dc22a:	d023      	beq.n	dc274 <__gethex+0x2f4>
   dc22c:	2b03      	cmp	r3, #3
   dc22e:	d025      	beq.n	dc27c <__gethex+0x2fc>
   dc230:	2b01      	cmp	r3, #1
   dc232:	d115      	bne.n	dc260 <__gethex+0x2e0>
   dc234:	42ae      	cmp	r6, r5
   dc236:	d113      	bne.n	dc260 <__gethex+0x2e0>
   dc238:	2e01      	cmp	r6, #1
   dc23a:	d10b      	bne.n	dc254 <__gethex+0x2d4>
   dc23c:	9a04      	ldr	r2, [sp, #16]
   dc23e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc242:	6013      	str	r3, [r2, #0]
   dc244:	2301      	movs	r3, #1
   dc246:	6123      	str	r3, [r4, #16]
   dc248:	f8c9 3000 	str.w	r3, [r9]
   dc24c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc24e:	2762      	movs	r7, #98	; 0x62
   dc250:	601c      	str	r4, [r3, #0]
   dc252:	e72a      	b.n	dc0aa <__gethex+0x12a>
   dc254:	1e71      	subs	r1, r6, #1
   dc256:	4620      	mov	r0, r4
   dc258:	f000 fdbc 	bl	dcdd4 <__any_on>
   dc25c:	2800      	cmp	r0, #0
   dc25e:	d1ed      	bne.n	dc23c <__gethex+0x2bc>
   dc260:	ee18 0a10 	vmov	r0, s16
   dc264:	4621      	mov	r1, r4
   dc266:	f000 f9ca 	bl	dc5fe <_Bfree>
   dc26a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc26c:	2300      	movs	r3, #0
   dc26e:	6013      	str	r3, [r2, #0]
   dc270:	2750      	movs	r7, #80	; 0x50
   dc272:	e71a      	b.n	dc0aa <__gethex+0x12a>
   dc274:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc276:	2b00      	cmp	r3, #0
   dc278:	d1f2      	bne.n	dc260 <__gethex+0x2e0>
   dc27a:	e7df      	b.n	dc23c <__gethex+0x2bc>
   dc27c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc27e:	2b00      	cmp	r3, #0
   dc280:	d1dc      	bne.n	dc23c <__gethex+0x2bc>
   dc282:	e7ed      	b.n	dc260 <__gethex+0x2e0>
   dc284:	000de0fc 	.word	0x000de0fc
   dc288:	1e6f      	subs	r7, r5, #1
   dc28a:	f1ba 0f00 	cmp.w	sl, #0
   dc28e:	d131      	bne.n	dc2f4 <__gethex+0x374>
   dc290:	b127      	cbz	r7, dc29c <__gethex+0x31c>
   dc292:	4639      	mov	r1, r7
   dc294:	4620      	mov	r0, r4
   dc296:	f000 fd9d 	bl	dcdd4 <__any_on>
   dc29a:	4682      	mov	sl, r0
   dc29c:	117b      	asrs	r3, r7, #5
   dc29e:	2101      	movs	r1, #1
   dc2a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dc2a4:	f007 071f 	and.w	r7, r7, #31
   dc2a8:	fa01 f707 	lsl.w	r7, r1, r7
   dc2ac:	421f      	tst	r7, r3
   dc2ae:	4629      	mov	r1, r5
   dc2b0:	4620      	mov	r0, r4
   dc2b2:	bf18      	it	ne
   dc2b4:	f04a 0a02 	orrne.w	sl, sl, #2
   dc2b8:	1b76      	subs	r6, r6, r5
   dc2ba:	f7ff fdf9 	bl	dbeb0 <rshift>
   dc2be:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dc2c2:	2702      	movs	r7, #2
   dc2c4:	f1ba 0f00 	cmp.w	sl, #0
   dc2c8:	d048      	beq.n	dc35c <__gethex+0x3dc>
   dc2ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc2ce:	2b02      	cmp	r3, #2
   dc2d0:	d015      	beq.n	dc2fe <__gethex+0x37e>
   dc2d2:	2b03      	cmp	r3, #3
   dc2d4:	d017      	beq.n	dc306 <__gethex+0x386>
   dc2d6:	2b01      	cmp	r3, #1
   dc2d8:	d109      	bne.n	dc2ee <__gethex+0x36e>
   dc2da:	f01a 0f02 	tst.w	sl, #2
   dc2de:	d006      	beq.n	dc2ee <__gethex+0x36e>
   dc2e0:	f8d9 0000 	ldr.w	r0, [r9]
   dc2e4:	ea4a 0a00 	orr.w	sl, sl, r0
   dc2e8:	f01a 0f01 	tst.w	sl, #1
   dc2ec:	d10e      	bne.n	dc30c <__gethex+0x38c>
   dc2ee:	f047 0710 	orr.w	r7, r7, #16
   dc2f2:	e033      	b.n	dc35c <__gethex+0x3dc>
   dc2f4:	f04f 0a01 	mov.w	sl, #1
   dc2f8:	e7d0      	b.n	dc29c <__gethex+0x31c>
   dc2fa:	2701      	movs	r7, #1
   dc2fc:	e7e2      	b.n	dc2c4 <__gethex+0x344>
   dc2fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc300:	f1c3 0301 	rsb	r3, r3, #1
   dc304:	9315      	str	r3, [sp, #84]	; 0x54
   dc306:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc308:	2b00      	cmp	r3, #0
   dc30a:	d0f0      	beq.n	dc2ee <__gethex+0x36e>
   dc30c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc310:	f104 0314 	add.w	r3, r4, #20
   dc314:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dc318:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dc31c:	f04f 0c00 	mov.w	ip, #0
   dc320:	4618      	mov	r0, r3
   dc322:	f853 2b04 	ldr.w	r2, [r3], #4
   dc326:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc32a:	d01c      	beq.n	dc366 <__gethex+0x3e6>
   dc32c:	3201      	adds	r2, #1
   dc32e:	6002      	str	r2, [r0, #0]
   dc330:	2f02      	cmp	r7, #2
   dc332:	f104 0314 	add.w	r3, r4, #20
   dc336:	d13a      	bne.n	dc3ae <__gethex+0x42e>
   dc338:	f8d8 2000 	ldr.w	r2, [r8]
   dc33c:	3a01      	subs	r2, #1
   dc33e:	42b2      	cmp	r2, r6
   dc340:	d10a      	bne.n	dc358 <__gethex+0x3d8>
   dc342:	1171      	asrs	r1, r6, #5
   dc344:	2201      	movs	r2, #1
   dc346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dc34a:	f006 061f 	and.w	r6, r6, #31
   dc34e:	fa02 f606 	lsl.w	r6, r2, r6
   dc352:	421e      	tst	r6, r3
   dc354:	bf18      	it	ne
   dc356:	4617      	movne	r7, r2
   dc358:	f047 0720 	orr.w	r7, r7, #32
   dc35c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc35e:	601c      	str	r4, [r3, #0]
   dc360:	9b04      	ldr	r3, [sp, #16]
   dc362:	601d      	str	r5, [r3, #0]
   dc364:	e6a1      	b.n	dc0aa <__gethex+0x12a>
   dc366:	4299      	cmp	r1, r3
   dc368:	f843 cc04 	str.w	ip, [r3, #-4]
   dc36c:	d8d8      	bhi.n	dc320 <__gethex+0x3a0>
   dc36e:	68a3      	ldr	r3, [r4, #8]
   dc370:	4599      	cmp	r9, r3
   dc372:	db14      	blt.n	dc39e <__gethex+0x41e>
   dc374:	6861      	ldr	r1, [r4, #4]
   dc376:	ee18 0a10 	vmov	r0, s16
   dc37a:	3101      	adds	r1, #1
   dc37c:	f000 f90b 	bl	dc596 <_Balloc>
   dc380:	6922      	ldr	r2, [r4, #16]
   dc382:	3202      	adds	r2, #2
   dc384:	f104 010c 	add.w	r1, r4, #12
   dc388:	4682      	mov	sl, r0
   dc38a:	0092      	lsls	r2, r2, #2
   dc38c:	300c      	adds	r0, #12
   dc38e:	f7fe fdc8 	bl	daf22 <memcpy>
   dc392:	4621      	mov	r1, r4
   dc394:	ee18 0a10 	vmov	r0, s16
   dc398:	f000 f931 	bl	dc5fe <_Bfree>
   dc39c:	4654      	mov	r4, sl
   dc39e:	6923      	ldr	r3, [r4, #16]
   dc3a0:	1c5a      	adds	r2, r3, #1
   dc3a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dc3a6:	6122      	str	r2, [r4, #16]
   dc3a8:	2201      	movs	r2, #1
   dc3aa:	615a      	str	r2, [r3, #20]
   dc3ac:	e7c0      	b.n	dc330 <__gethex+0x3b0>
   dc3ae:	6922      	ldr	r2, [r4, #16]
   dc3b0:	454a      	cmp	r2, r9
   dc3b2:	dd0b      	ble.n	dc3cc <__gethex+0x44c>
   dc3b4:	2101      	movs	r1, #1
   dc3b6:	4620      	mov	r0, r4
   dc3b8:	f7ff fd7a 	bl	dbeb0 <rshift>
   dc3bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc3c0:	3501      	adds	r5, #1
   dc3c2:	42ab      	cmp	r3, r5
   dc3c4:	f6ff aed7 	blt.w	dc176 <__gethex+0x1f6>
   dc3c8:	2701      	movs	r7, #1
   dc3ca:	e7c5      	b.n	dc358 <__gethex+0x3d8>
   dc3cc:	f016 061f 	ands.w	r6, r6, #31
   dc3d0:	d0fa      	beq.n	dc3c8 <__gethex+0x448>
   dc3d2:	449b      	add	fp, r3
   dc3d4:	f1c6 0620 	rsb	r6, r6, #32
   dc3d8:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dc3dc:	f000 f9a2 	bl	dc724 <__hi0bits>
   dc3e0:	42b0      	cmp	r0, r6
   dc3e2:	dbe7      	blt.n	dc3b4 <__gethex+0x434>
   dc3e4:	e7f0      	b.n	dc3c8 <__gethex+0x448>
   dc3e6:	bf00      	nop

000dc3e8 <L_shift>:
   dc3e8:	f1c2 0208 	rsb	r2, r2, #8
   dc3ec:	0092      	lsls	r2, r2, #2
   dc3ee:	b570      	push	{r4, r5, r6, lr}
   dc3f0:	f1c2 0620 	rsb	r6, r2, #32
   dc3f4:	6843      	ldr	r3, [r0, #4]
   dc3f6:	6804      	ldr	r4, [r0, #0]
   dc3f8:	fa03 f506 	lsl.w	r5, r3, r6
   dc3fc:	432c      	orrs	r4, r5
   dc3fe:	40d3      	lsrs	r3, r2
   dc400:	6004      	str	r4, [r0, #0]
   dc402:	f840 3f04 	str.w	r3, [r0, #4]!
   dc406:	4288      	cmp	r0, r1
   dc408:	d3f4      	bcc.n	dc3f4 <L_shift+0xc>
   dc40a:	bd70      	pop	{r4, r5, r6, pc}

000dc40c <__match>:
   dc40c:	b530      	push	{r4, r5, lr}
   dc40e:	6803      	ldr	r3, [r0, #0]
   dc410:	3301      	adds	r3, #1
   dc412:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc416:	b914      	cbnz	r4, dc41e <__match+0x12>
   dc418:	6003      	str	r3, [r0, #0]
   dc41a:	2001      	movs	r0, #1
   dc41c:	bd30      	pop	{r4, r5, pc}
   dc41e:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc422:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc426:	2d19      	cmp	r5, #25
   dc428:	bf98      	it	ls
   dc42a:	3220      	addls	r2, #32
   dc42c:	42a2      	cmp	r2, r4
   dc42e:	d0f0      	beq.n	dc412 <__match+0x6>
   dc430:	2000      	movs	r0, #0
   dc432:	e7f3      	b.n	dc41c <__match+0x10>

000dc434 <__hexnan>:
   dc434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc438:	680b      	ldr	r3, [r1, #0]
   dc43a:	6801      	ldr	r1, [r0, #0]
   dc43c:	115e      	asrs	r6, r3, #5
   dc43e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc442:	f013 031f 	ands.w	r3, r3, #31
   dc446:	b087      	sub	sp, #28
   dc448:	bf18      	it	ne
   dc44a:	3604      	addne	r6, #4
   dc44c:	2500      	movs	r5, #0
   dc44e:	1f37      	subs	r7, r6, #4
   dc450:	4682      	mov	sl, r0
   dc452:	4690      	mov	r8, r2
   dc454:	9301      	str	r3, [sp, #4]
   dc456:	f846 5c04 	str.w	r5, [r6, #-4]
   dc45a:	46b9      	mov	r9, r7
   dc45c:	463c      	mov	r4, r7
   dc45e:	9502      	str	r5, [sp, #8]
   dc460:	46ab      	mov	fp, r5
   dc462:	784a      	ldrb	r2, [r1, #1]
   dc464:	1c4b      	adds	r3, r1, #1
   dc466:	9303      	str	r3, [sp, #12]
   dc468:	b342      	cbz	r2, dc4bc <__hexnan+0x88>
   dc46a:	4610      	mov	r0, r2
   dc46c:	9105      	str	r1, [sp, #20]
   dc46e:	9204      	str	r2, [sp, #16]
   dc470:	f7ff fd70 	bl	dbf54 <__hexdig_fun>
   dc474:	2800      	cmp	r0, #0
   dc476:	d14f      	bne.n	dc518 <__hexnan+0xe4>
   dc478:	9a04      	ldr	r2, [sp, #16]
   dc47a:	9905      	ldr	r1, [sp, #20]
   dc47c:	2a20      	cmp	r2, #32
   dc47e:	d818      	bhi.n	dc4b2 <__hexnan+0x7e>
   dc480:	9b02      	ldr	r3, [sp, #8]
   dc482:	459b      	cmp	fp, r3
   dc484:	dd13      	ble.n	dc4ae <__hexnan+0x7a>
   dc486:	454c      	cmp	r4, r9
   dc488:	d206      	bcs.n	dc498 <__hexnan+0x64>
   dc48a:	2d07      	cmp	r5, #7
   dc48c:	dc04      	bgt.n	dc498 <__hexnan+0x64>
   dc48e:	462a      	mov	r2, r5
   dc490:	4649      	mov	r1, r9
   dc492:	4620      	mov	r0, r4
   dc494:	f7ff ffa8 	bl	dc3e8 <L_shift>
   dc498:	4544      	cmp	r4, r8
   dc49a:	d950      	bls.n	dc53e <__hexnan+0x10a>
   dc49c:	2300      	movs	r3, #0
   dc49e:	f1a4 0904 	sub.w	r9, r4, #4
   dc4a2:	f844 3c04 	str.w	r3, [r4, #-4]
   dc4a6:	f8cd b008 	str.w	fp, [sp, #8]
   dc4aa:	464c      	mov	r4, r9
   dc4ac:	461d      	mov	r5, r3
   dc4ae:	9903      	ldr	r1, [sp, #12]
   dc4b0:	e7d7      	b.n	dc462 <__hexnan+0x2e>
   dc4b2:	2a29      	cmp	r2, #41	; 0x29
   dc4b4:	d156      	bne.n	dc564 <__hexnan+0x130>
   dc4b6:	3102      	adds	r1, #2
   dc4b8:	f8ca 1000 	str.w	r1, [sl]
   dc4bc:	f1bb 0f00 	cmp.w	fp, #0
   dc4c0:	d050      	beq.n	dc564 <__hexnan+0x130>
   dc4c2:	454c      	cmp	r4, r9
   dc4c4:	d206      	bcs.n	dc4d4 <__hexnan+0xa0>
   dc4c6:	2d07      	cmp	r5, #7
   dc4c8:	dc04      	bgt.n	dc4d4 <__hexnan+0xa0>
   dc4ca:	462a      	mov	r2, r5
   dc4cc:	4649      	mov	r1, r9
   dc4ce:	4620      	mov	r0, r4
   dc4d0:	f7ff ff8a 	bl	dc3e8 <L_shift>
   dc4d4:	4544      	cmp	r4, r8
   dc4d6:	d934      	bls.n	dc542 <__hexnan+0x10e>
   dc4d8:	f1a8 0204 	sub.w	r2, r8, #4
   dc4dc:	4623      	mov	r3, r4
   dc4de:	f853 1b04 	ldr.w	r1, [r3], #4
   dc4e2:	f842 1f04 	str.w	r1, [r2, #4]!
   dc4e6:	429f      	cmp	r7, r3
   dc4e8:	d2f9      	bcs.n	dc4de <__hexnan+0xaa>
   dc4ea:	1b3b      	subs	r3, r7, r4
   dc4ec:	f023 0303 	bic.w	r3, r3, #3
   dc4f0:	3304      	adds	r3, #4
   dc4f2:	3401      	adds	r4, #1
   dc4f4:	3e03      	subs	r6, #3
   dc4f6:	42b4      	cmp	r4, r6
   dc4f8:	bf88      	it	hi
   dc4fa:	2304      	movhi	r3, #4
   dc4fc:	4443      	add	r3, r8
   dc4fe:	2200      	movs	r2, #0
   dc500:	f843 2b04 	str.w	r2, [r3], #4
   dc504:	429f      	cmp	r7, r3
   dc506:	d2fb      	bcs.n	dc500 <__hexnan+0xcc>
   dc508:	683b      	ldr	r3, [r7, #0]
   dc50a:	b91b      	cbnz	r3, dc514 <__hexnan+0xe0>
   dc50c:	4547      	cmp	r7, r8
   dc50e:	d127      	bne.n	dc560 <__hexnan+0x12c>
   dc510:	2301      	movs	r3, #1
   dc512:	603b      	str	r3, [r7, #0]
   dc514:	2005      	movs	r0, #5
   dc516:	e026      	b.n	dc566 <__hexnan+0x132>
   dc518:	3501      	adds	r5, #1
   dc51a:	2d08      	cmp	r5, #8
   dc51c:	f10b 0b01 	add.w	fp, fp, #1
   dc520:	dd06      	ble.n	dc530 <__hexnan+0xfc>
   dc522:	4544      	cmp	r4, r8
   dc524:	d9c3      	bls.n	dc4ae <__hexnan+0x7a>
   dc526:	2300      	movs	r3, #0
   dc528:	f844 3c04 	str.w	r3, [r4, #-4]
   dc52c:	2501      	movs	r5, #1
   dc52e:	3c04      	subs	r4, #4
   dc530:	6822      	ldr	r2, [r4, #0]
   dc532:	f000 000f 	and.w	r0, r0, #15
   dc536:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dc53a:	6022      	str	r2, [r4, #0]
   dc53c:	e7b7      	b.n	dc4ae <__hexnan+0x7a>
   dc53e:	2508      	movs	r5, #8
   dc540:	e7b5      	b.n	dc4ae <__hexnan+0x7a>
   dc542:	9b01      	ldr	r3, [sp, #4]
   dc544:	2b00      	cmp	r3, #0
   dc546:	d0df      	beq.n	dc508 <__hexnan+0xd4>
   dc548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc54c:	f1c3 0320 	rsb	r3, r3, #32
   dc550:	fa22 f303 	lsr.w	r3, r2, r3
   dc554:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc558:	401a      	ands	r2, r3
   dc55a:	f846 2c04 	str.w	r2, [r6, #-4]
   dc55e:	e7d3      	b.n	dc508 <__hexnan+0xd4>
   dc560:	3f04      	subs	r7, #4
   dc562:	e7d1      	b.n	dc508 <__hexnan+0xd4>
   dc564:	2004      	movs	r0, #4
   dc566:	b007      	add	sp, #28
   dc568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc56c <__retarget_lock_acquire_recursive>:
   dc56c:	4770      	bx	lr

000dc56e <__retarget_lock_release>:
   dc56e:	4770      	bx	lr

000dc570 <__retarget_lock_release_recursive>:
   dc570:	4770      	bx	lr

000dc572 <__ascii_mbtowc>:
   dc572:	b082      	sub	sp, #8
   dc574:	b901      	cbnz	r1, dc578 <__ascii_mbtowc+0x6>
   dc576:	a901      	add	r1, sp, #4
   dc578:	b142      	cbz	r2, dc58c <__ascii_mbtowc+0x1a>
   dc57a:	b14b      	cbz	r3, dc590 <__ascii_mbtowc+0x1e>
   dc57c:	7813      	ldrb	r3, [r2, #0]
   dc57e:	600b      	str	r3, [r1, #0]
   dc580:	7812      	ldrb	r2, [r2, #0]
   dc582:	1e10      	subs	r0, r2, #0
   dc584:	bf18      	it	ne
   dc586:	2001      	movne	r0, #1
   dc588:	b002      	add	sp, #8
   dc58a:	4770      	bx	lr
   dc58c:	4610      	mov	r0, r2
   dc58e:	e7fb      	b.n	dc588 <__ascii_mbtowc+0x16>
   dc590:	f06f 0001 	mvn.w	r0, #1
   dc594:	e7f8      	b.n	dc588 <__ascii_mbtowc+0x16>

000dc596 <_Balloc>:
   dc596:	b570      	push	{r4, r5, r6, lr}
   dc598:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc59a:	4604      	mov	r4, r0
   dc59c:	460d      	mov	r5, r1
   dc59e:	b93e      	cbnz	r6, dc5b0 <_Balloc+0x1a>
   dc5a0:	2010      	movs	r0, #16
   dc5a2:	f7fb fe5f 	bl	d8264 <malloc>
   dc5a6:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc5aa:	6260      	str	r0, [r4, #36]	; 0x24
   dc5ac:	6006      	str	r6, [r0, #0]
   dc5ae:	60c6      	str	r6, [r0, #12]
   dc5b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dc5b2:	68f3      	ldr	r3, [r6, #12]
   dc5b4:	b183      	cbz	r3, dc5d8 <_Balloc+0x42>
   dc5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc5b8:	68db      	ldr	r3, [r3, #12]
   dc5ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dc5be:	b9b8      	cbnz	r0, dc5f0 <_Balloc+0x5a>
   dc5c0:	2101      	movs	r1, #1
   dc5c2:	fa01 f605 	lsl.w	r6, r1, r5
   dc5c6:	1d72      	adds	r2, r6, #5
   dc5c8:	0092      	lsls	r2, r2, #2
   dc5ca:	4620      	mov	r0, r4
   dc5cc:	f000 fc23 	bl	dce16 <_calloc_r>
   dc5d0:	b160      	cbz	r0, dc5ec <_Balloc+0x56>
   dc5d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dc5d6:	e00e      	b.n	dc5f6 <_Balloc+0x60>
   dc5d8:	2221      	movs	r2, #33	; 0x21
   dc5da:	2104      	movs	r1, #4
   dc5dc:	4620      	mov	r0, r4
   dc5de:	f000 fc1a 	bl	dce16 <_calloc_r>
   dc5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc5e4:	60f0      	str	r0, [r6, #12]
   dc5e6:	68db      	ldr	r3, [r3, #12]
   dc5e8:	2b00      	cmp	r3, #0
   dc5ea:	d1e4      	bne.n	dc5b6 <_Balloc+0x20>
   dc5ec:	2000      	movs	r0, #0
   dc5ee:	bd70      	pop	{r4, r5, r6, pc}
   dc5f0:	6802      	ldr	r2, [r0, #0]
   dc5f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dc5f6:	2300      	movs	r3, #0
   dc5f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dc5fc:	e7f7      	b.n	dc5ee <_Balloc+0x58>

000dc5fe <_Bfree>:
   dc5fe:	b570      	push	{r4, r5, r6, lr}
   dc600:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc602:	4605      	mov	r5, r0
   dc604:	460c      	mov	r4, r1
   dc606:	b93e      	cbnz	r6, dc618 <_Bfree+0x1a>
   dc608:	2010      	movs	r0, #16
   dc60a:	f7fb fe2b 	bl	d8264 <malloc>
   dc60e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc612:	6268      	str	r0, [r5, #36]	; 0x24
   dc614:	6006      	str	r6, [r0, #0]
   dc616:	60c6      	str	r6, [r0, #12]
   dc618:	b13c      	cbz	r4, dc62a <_Bfree+0x2c>
   dc61a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dc61c:	6862      	ldr	r2, [r4, #4]
   dc61e:	68db      	ldr	r3, [r3, #12]
   dc620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc624:	6021      	str	r1, [r4, #0]
   dc626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dc62a:	bd70      	pop	{r4, r5, r6, pc}

000dc62c <__multadd>:
   dc62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc630:	690e      	ldr	r6, [r1, #16]
   dc632:	4607      	mov	r7, r0
   dc634:	4698      	mov	r8, r3
   dc636:	460c      	mov	r4, r1
   dc638:	f101 0014 	add.w	r0, r1, #20
   dc63c:	2300      	movs	r3, #0
   dc63e:	6805      	ldr	r5, [r0, #0]
   dc640:	b2a9      	uxth	r1, r5
   dc642:	fb02 8101 	mla	r1, r2, r1, r8
   dc646:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dc64a:	0c2d      	lsrs	r5, r5, #16
   dc64c:	fb02 c505 	mla	r5, r2, r5, ip
   dc650:	b289      	uxth	r1, r1
   dc652:	3301      	adds	r3, #1
   dc654:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dc658:	429e      	cmp	r6, r3
   dc65a:	f840 1b04 	str.w	r1, [r0], #4
   dc65e:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dc662:	dcec      	bgt.n	dc63e <__multadd+0x12>
   dc664:	f1b8 0f00 	cmp.w	r8, #0
   dc668:	d01b      	beq.n	dc6a2 <__multadd+0x76>
   dc66a:	68a3      	ldr	r3, [r4, #8]
   dc66c:	42b3      	cmp	r3, r6
   dc66e:	dc12      	bgt.n	dc696 <__multadd+0x6a>
   dc670:	6861      	ldr	r1, [r4, #4]
   dc672:	4638      	mov	r0, r7
   dc674:	3101      	adds	r1, #1
   dc676:	f7ff ff8e 	bl	dc596 <_Balloc>
   dc67a:	6922      	ldr	r2, [r4, #16]
   dc67c:	3202      	adds	r2, #2
   dc67e:	f104 010c 	add.w	r1, r4, #12
   dc682:	4605      	mov	r5, r0
   dc684:	0092      	lsls	r2, r2, #2
   dc686:	300c      	adds	r0, #12
   dc688:	f7fe fc4b 	bl	daf22 <memcpy>
   dc68c:	4621      	mov	r1, r4
   dc68e:	4638      	mov	r0, r7
   dc690:	f7ff ffb5 	bl	dc5fe <_Bfree>
   dc694:	462c      	mov	r4, r5
   dc696:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dc69a:	3601      	adds	r6, #1
   dc69c:	f8c3 8014 	str.w	r8, [r3, #20]
   dc6a0:	6126      	str	r6, [r4, #16]
   dc6a2:	4620      	mov	r0, r4
   dc6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc6a8 <__s2b>:
   dc6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc6ac:	460c      	mov	r4, r1
   dc6ae:	4615      	mov	r5, r2
   dc6b0:	461f      	mov	r7, r3
   dc6b2:	2209      	movs	r2, #9
   dc6b4:	3308      	adds	r3, #8
   dc6b6:	4606      	mov	r6, r0
   dc6b8:	fb93 f3f2 	sdiv	r3, r3, r2
   dc6bc:	2100      	movs	r1, #0
   dc6be:	2201      	movs	r2, #1
   dc6c0:	429a      	cmp	r2, r3
   dc6c2:	db20      	blt.n	dc706 <__s2b+0x5e>
   dc6c4:	4630      	mov	r0, r6
   dc6c6:	f7ff ff66 	bl	dc596 <_Balloc>
   dc6ca:	9b08      	ldr	r3, [sp, #32]
   dc6cc:	6143      	str	r3, [r0, #20]
   dc6ce:	2d09      	cmp	r5, #9
   dc6d0:	f04f 0301 	mov.w	r3, #1
   dc6d4:	6103      	str	r3, [r0, #16]
   dc6d6:	dd19      	ble.n	dc70c <__s2b+0x64>
   dc6d8:	f104 0909 	add.w	r9, r4, #9
   dc6dc:	46c8      	mov	r8, r9
   dc6de:	442c      	add	r4, r5
   dc6e0:	f818 3b01 	ldrb.w	r3, [r8], #1
   dc6e4:	4601      	mov	r1, r0
   dc6e6:	3b30      	subs	r3, #48	; 0x30
   dc6e8:	220a      	movs	r2, #10
   dc6ea:	4630      	mov	r0, r6
   dc6ec:	f7ff ff9e 	bl	dc62c <__multadd>
   dc6f0:	45a0      	cmp	r8, r4
   dc6f2:	d1f5      	bne.n	dc6e0 <__s2b+0x38>
   dc6f4:	f1a5 0408 	sub.w	r4, r5, #8
   dc6f8:	444c      	add	r4, r9
   dc6fa:	1b2d      	subs	r5, r5, r4
   dc6fc:	1963      	adds	r3, r4, r5
   dc6fe:	42bb      	cmp	r3, r7
   dc700:	db07      	blt.n	dc712 <__s2b+0x6a>
   dc702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc706:	0052      	lsls	r2, r2, #1
   dc708:	3101      	adds	r1, #1
   dc70a:	e7d9      	b.n	dc6c0 <__s2b+0x18>
   dc70c:	340a      	adds	r4, #10
   dc70e:	2509      	movs	r5, #9
   dc710:	e7f3      	b.n	dc6fa <__s2b+0x52>
   dc712:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc716:	4601      	mov	r1, r0
   dc718:	3b30      	subs	r3, #48	; 0x30
   dc71a:	220a      	movs	r2, #10
   dc71c:	4630      	mov	r0, r6
   dc71e:	f7ff ff85 	bl	dc62c <__multadd>
   dc722:	e7eb      	b.n	dc6fc <__s2b+0x54>

000dc724 <__hi0bits>:
   dc724:	0c03      	lsrs	r3, r0, #16
   dc726:	041b      	lsls	r3, r3, #16
   dc728:	b9d3      	cbnz	r3, dc760 <__hi0bits+0x3c>
   dc72a:	0400      	lsls	r0, r0, #16
   dc72c:	2310      	movs	r3, #16
   dc72e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc732:	bf04      	itt	eq
   dc734:	0200      	lsleq	r0, r0, #8
   dc736:	3308      	addeq	r3, #8
   dc738:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc73c:	bf04      	itt	eq
   dc73e:	0100      	lsleq	r0, r0, #4
   dc740:	3304      	addeq	r3, #4
   dc742:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc746:	bf04      	itt	eq
   dc748:	0080      	lsleq	r0, r0, #2
   dc74a:	3302      	addeq	r3, #2
   dc74c:	2800      	cmp	r0, #0
   dc74e:	db05      	blt.n	dc75c <__hi0bits+0x38>
   dc750:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dc754:	f103 0301 	add.w	r3, r3, #1
   dc758:	bf08      	it	eq
   dc75a:	2320      	moveq	r3, #32
   dc75c:	4618      	mov	r0, r3
   dc75e:	4770      	bx	lr
   dc760:	2300      	movs	r3, #0
   dc762:	e7e4      	b.n	dc72e <__hi0bits+0xa>

000dc764 <__lo0bits>:
   dc764:	6803      	ldr	r3, [r0, #0]
   dc766:	f013 0207 	ands.w	r2, r3, #7
   dc76a:	4601      	mov	r1, r0
   dc76c:	d00b      	beq.n	dc786 <__lo0bits+0x22>
   dc76e:	07da      	lsls	r2, r3, #31
   dc770:	d424      	bmi.n	dc7bc <__lo0bits+0x58>
   dc772:	0798      	lsls	r0, r3, #30
   dc774:	bf49      	itett	mi
   dc776:	085b      	lsrmi	r3, r3, #1
   dc778:	089b      	lsrpl	r3, r3, #2
   dc77a:	2001      	movmi	r0, #1
   dc77c:	600b      	strmi	r3, [r1, #0]
   dc77e:	bf5c      	itt	pl
   dc780:	600b      	strpl	r3, [r1, #0]
   dc782:	2002      	movpl	r0, #2
   dc784:	4770      	bx	lr
   dc786:	b298      	uxth	r0, r3
   dc788:	b9b0      	cbnz	r0, dc7b8 <__lo0bits+0x54>
   dc78a:	0c1b      	lsrs	r3, r3, #16
   dc78c:	2010      	movs	r0, #16
   dc78e:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc792:	bf04      	itt	eq
   dc794:	0a1b      	lsreq	r3, r3, #8
   dc796:	3008      	addeq	r0, #8
   dc798:	071a      	lsls	r2, r3, #28
   dc79a:	bf04      	itt	eq
   dc79c:	091b      	lsreq	r3, r3, #4
   dc79e:	3004      	addeq	r0, #4
   dc7a0:	079a      	lsls	r2, r3, #30
   dc7a2:	bf04      	itt	eq
   dc7a4:	089b      	lsreq	r3, r3, #2
   dc7a6:	3002      	addeq	r0, #2
   dc7a8:	07da      	lsls	r2, r3, #31
   dc7aa:	d403      	bmi.n	dc7b4 <__lo0bits+0x50>
   dc7ac:	085b      	lsrs	r3, r3, #1
   dc7ae:	f100 0001 	add.w	r0, r0, #1
   dc7b2:	d005      	beq.n	dc7c0 <__lo0bits+0x5c>
   dc7b4:	600b      	str	r3, [r1, #0]
   dc7b6:	4770      	bx	lr
   dc7b8:	4610      	mov	r0, r2
   dc7ba:	e7e8      	b.n	dc78e <__lo0bits+0x2a>
   dc7bc:	2000      	movs	r0, #0
   dc7be:	4770      	bx	lr
   dc7c0:	2020      	movs	r0, #32
   dc7c2:	4770      	bx	lr

000dc7c4 <__i2b>:
   dc7c4:	b510      	push	{r4, lr}
   dc7c6:	460c      	mov	r4, r1
   dc7c8:	2101      	movs	r1, #1
   dc7ca:	f7ff fee4 	bl	dc596 <_Balloc>
   dc7ce:	2201      	movs	r2, #1
   dc7d0:	6144      	str	r4, [r0, #20]
   dc7d2:	6102      	str	r2, [r0, #16]
   dc7d4:	bd10      	pop	{r4, pc}

000dc7d6 <__multiply>:
   dc7d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7da:	4615      	mov	r5, r2
   dc7dc:	690a      	ldr	r2, [r1, #16]
   dc7de:	692b      	ldr	r3, [r5, #16]
   dc7e0:	429a      	cmp	r2, r3
   dc7e2:	bfb8      	it	lt
   dc7e4:	460b      	movlt	r3, r1
   dc7e6:	460c      	mov	r4, r1
   dc7e8:	bfbc      	itt	lt
   dc7ea:	462c      	movlt	r4, r5
   dc7ec:	461d      	movlt	r5, r3
   dc7ee:	6927      	ldr	r7, [r4, #16]
   dc7f0:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dc7f4:	68a3      	ldr	r3, [r4, #8]
   dc7f6:	6861      	ldr	r1, [r4, #4]
   dc7f8:	eb07 0609 	add.w	r6, r7, r9
   dc7fc:	42b3      	cmp	r3, r6
   dc7fe:	bfb8      	it	lt
   dc800:	3101      	addlt	r1, #1
   dc802:	b085      	sub	sp, #20
   dc804:	f7ff fec7 	bl	dc596 <_Balloc>
   dc808:	f100 0114 	add.w	r1, r0, #20
   dc80c:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dc810:	460b      	mov	r3, r1
   dc812:	2200      	movs	r2, #0
   dc814:	4543      	cmp	r3, r8
   dc816:	d31d      	bcc.n	dc854 <__multiply+0x7e>
   dc818:	f104 0314 	add.w	r3, r4, #20
   dc81c:	f105 0214 	add.w	r2, r5, #20
   dc820:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dc824:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dc828:	9302      	str	r3, [sp, #8]
   dc82a:	1b3b      	subs	r3, r7, r4
   dc82c:	3b15      	subs	r3, #21
   dc82e:	f023 0303 	bic.w	r3, r3, #3
   dc832:	3304      	adds	r3, #4
   dc834:	f104 0515 	add.w	r5, r4, #21
   dc838:	42af      	cmp	r7, r5
   dc83a:	bf38      	it	cc
   dc83c:	2304      	movcc	r3, #4
   dc83e:	9301      	str	r3, [sp, #4]
   dc840:	9b02      	ldr	r3, [sp, #8]
   dc842:	9203      	str	r2, [sp, #12]
   dc844:	4293      	cmp	r3, r2
   dc846:	d808      	bhi.n	dc85a <__multiply+0x84>
   dc848:	2e00      	cmp	r6, #0
   dc84a:	dc5a      	bgt.n	dc902 <__multiply+0x12c>
   dc84c:	6106      	str	r6, [r0, #16]
   dc84e:	b005      	add	sp, #20
   dc850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc854:	f843 2b04 	str.w	r2, [r3], #4
   dc858:	e7dc      	b.n	dc814 <__multiply+0x3e>
   dc85a:	f8b2 a000 	ldrh.w	sl, [r2]
   dc85e:	f1ba 0f00 	cmp.w	sl, #0
   dc862:	d024      	beq.n	dc8ae <__multiply+0xd8>
   dc864:	f104 0e14 	add.w	lr, r4, #20
   dc868:	4689      	mov	r9, r1
   dc86a:	f04f 0c00 	mov.w	ip, #0
   dc86e:	f85e 5b04 	ldr.w	r5, [lr], #4
   dc872:	f8d9 b000 	ldr.w	fp, [r9]
   dc876:	b2ab      	uxth	r3, r5
   dc878:	fa1f fb8b 	uxth.w	fp, fp
   dc87c:	fb0a b303 	mla	r3, sl, r3, fp
   dc880:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc884:	f8d9 5000 	ldr.w	r5, [r9]
   dc888:	4463      	add	r3, ip
   dc88a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc88e:	fb0a c50b 	mla	r5, sl, fp, ip
   dc892:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc896:	b29b      	uxth	r3, r3
   dc898:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc89c:	4577      	cmp	r7, lr
   dc89e:	f849 3b04 	str.w	r3, [r9], #4
   dc8a2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc8a6:	d8e2      	bhi.n	dc86e <__multiply+0x98>
   dc8a8:	9b01      	ldr	r3, [sp, #4]
   dc8aa:	f841 c003 	str.w	ip, [r1, r3]
   dc8ae:	9b03      	ldr	r3, [sp, #12]
   dc8b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc8b4:	3204      	adds	r2, #4
   dc8b6:	f1b9 0f00 	cmp.w	r9, #0
   dc8ba:	d020      	beq.n	dc8fe <__multiply+0x128>
   dc8bc:	680b      	ldr	r3, [r1, #0]
   dc8be:	f104 0c14 	add.w	ip, r4, #20
   dc8c2:	468e      	mov	lr, r1
   dc8c4:	f04f 0a00 	mov.w	sl, #0
   dc8c8:	f8bc 5000 	ldrh.w	r5, [ip]
   dc8cc:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc8d0:	fb09 b505 	mla	r5, r9, r5, fp
   dc8d4:	44aa      	add	sl, r5
   dc8d6:	b29b      	uxth	r3, r3
   dc8d8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc8dc:	f84e 3b04 	str.w	r3, [lr], #4
   dc8e0:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc8e4:	f8be 5000 	ldrh.w	r5, [lr]
   dc8e8:	0c1b      	lsrs	r3, r3, #16
   dc8ea:	fb09 5303 	mla	r3, r9, r3, r5
   dc8ee:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc8f2:	4567      	cmp	r7, ip
   dc8f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc8f8:	d8e6      	bhi.n	dc8c8 <__multiply+0xf2>
   dc8fa:	9d01      	ldr	r5, [sp, #4]
   dc8fc:	514b      	str	r3, [r1, r5]
   dc8fe:	3104      	adds	r1, #4
   dc900:	e79e      	b.n	dc840 <__multiply+0x6a>
   dc902:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc906:	2b00      	cmp	r3, #0
   dc908:	d1a0      	bne.n	dc84c <__multiply+0x76>
   dc90a:	3e01      	subs	r6, #1
   dc90c:	e79c      	b.n	dc848 <__multiply+0x72>
	...

000dc910 <__pow5mult>:
   dc910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc914:	4615      	mov	r5, r2
   dc916:	f012 0203 	ands.w	r2, r2, #3
   dc91a:	4606      	mov	r6, r0
   dc91c:	460f      	mov	r7, r1
   dc91e:	d007      	beq.n	dc930 <__pow5mult+0x20>
   dc920:	4c21      	ldr	r4, [pc, #132]	; (dc9a8 <__pow5mult+0x98>)
   dc922:	3a01      	subs	r2, #1
   dc924:	2300      	movs	r3, #0
   dc926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc92a:	f7ff fe7f 	bl	dc62c <__multadd>
   dc92e:	4607      	mov	r7, r0
   dc930:	10ad      	asrs	r5, r5, #2
   dc932:	d035      	beq.n	dc9a0 <__pow5mult+0x90>
   dc934:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc936:	b93c      	cbnz	r4, dc948 <__pow5mult+0x38>
   dc938:	2010      	movs	r0, #16
   dc93a:	f7fb fc93 	bl	d8264 <malloc>
   dc93e:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dc942:	6270      	str	r0, [r6, #36]	; 0x24
   dc944:	6004      	str	r4, [r0, #0]
   dc946:	60c4      	str	r4, [r0, #12]
   dc948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc94c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc950:	b94c      	cbnz	r4, dc966 <__pow5mult+0x56>
   dc952:	f240 2171 	movw	r1, #625	; 0x271
   dc956:	4630      	mov	r0, r6
   dc958:	f7ff ff34 	bl	dc7c4 <__i2b>
   dc95c:	2300      	movs	r3, #0
   dc95e:	f8c8 0008 	str.w	r0, [r8, #8]
   dc962:	4604      	mov	r4, r0
   dc964:	6003      	str	r3, [r0, #0]
   dc966:	f04f 0900 	mov.w	r9, #0
   dc96a:	07eb      	lsls	r3, r5, #31
   dc96c:	d50a      	bpl.n	dc984 <__pow5mult+0x74>
   dc96e:	4639      	mov	r1, r7
   dc970:	4622      	mov	r2, r4
   dc972:	4630      	mov	r0, r6
   dc974:	f7ff ff2f 	bl	dc7d6 <__multiply>
   dc978:	4639      	mov	r1, r7
   dc97a:	4680      	mov	r8, r0
   dc97c:	4630      	mov	r0, r6
   dc97e:	f7ff fe3e 	bl	dc5fe <_Bfree>
   dc982:	4647      	mov	r7, r8
   dc984:	106d      	asrs	r5, r5, #1
   dc986:	d00b      	beq.n	dc9a0 <__pow5mult+0x90>
   dc988:	6820      	ldr	r0, [r4, #0]
   dc98a:	b938      	cbnz	r0, dc99c <__pow5mult+0x8c>
   dc98c:	4622      	mov	r2, r4
   dc98e:	4621      	mov	r1, r4
   dc990:	4630      	mov	r0, r6
   dc992:	f7ff ff20 	bl	dc7d6 <__multiply>
   dc996:	6020      	str	r0, [r4, #0]
   dc998:	f8c0 9000 	str.w	r9, [r0]
   dc99c:	4604      	mov	r4, r0
   dc99e:	e7e4      	b.n	dc96a <__pow5mult+0x5a>
   dc9a0:	4638      	mov	r0, r7
   dc9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc9a6:	bf00      	nop
   dc9a8:	000de200 	.word	0x000de200

000dc9ac <__lshift>:
   dc9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc9b0:	460c      	mov	r4, r1
   dc9b2:	6849      	ldr	r1, [r1, #4]
   dc9b4:	6923      	ldr	r3, [r4, #16]
   dc9b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dc9ba:	68a3      	ldr	r3, [r4, #8]
   dc9bc:	4607      	mov	r7, r0
   dc9be:	4691      	mov	r9, r2
   dc9c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc9c4:	f108 0601 	add.w	r6, r8, #1
   dc9c8:	42b3      	cmp	r3, r6
   dc9ca:	db3f      	blt.n	dca4c <__lshift+0xa0>
   dc9cc:	4638      	mov	r0, r7
   dc9ce:	f7ff fde2 	bl	dc596 <_Balloc>
   dc9d2:	2300      	movs	r3, #0
   dc9d4:	4605      	mov	r5, r0
   dc9d6:	f100 0114 	add.w	r1, r0, #20
   dc9da:	f100 0210 	add.w	r2, r0, #16
   dc9de:	4618      	mov	r0, r3
   dc9e0:	4553      	cmp	r3, sl
   dc9e2:	db36      	blt.n	dca52 <__lshift+0xa6>
   dc9e4:	6920      	ldr	r0, [r4, #16]
   dc9e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dc9ea:	f104 0314 	add.w	r3, r4, #20
   dc9ee:	f019 091f 	ands.w	r9, r9, #31
   dc9f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dc9f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dc9fa:	d02e      	beq.n	dca5a <__lshift+0xae>
   dc9fc:	f1c9 0e20 	rsb	lr, r9, #32
   dca00:	468a      	mov	sl, r1
   dca02:	2200      	movs	r2, #0
   dca04:	6818      	ldr	r0, [r3, #0]
   dca06:	fa00 f009 	lsl.w	r0, r0, r9
   dca0a:	4302      	orrs	r2, r0
   dca0c:	f84a 2b04 	str.w	r2, [sl], #4
   dca10:	f853 2b04 	ldr.w	r2, [r3], #4
   dca14:	459c      	cmp	ip, r3
   dca16:	fa22 f20e 	lsr.w	r2, r2, lr
   dca1a:	d8f3      	bhi.n	dca04 <__lshift+0x58>
   dca1c:	ebac 0304 	sub.w	r3, ip, r4
   dca20:	3b15      	subs	r3, #21
   dca22:	f023 0303 	bic.w	r3, r3, #3
   dca26:	3304      	adds	r3, #4
   dca28:	f104 0015 	add.w	r0, r4, #21
   dca2c:	4560      	cmp	r0, ip
   dca2e:	bf88      	it	hi
   dca30:	2304      	movhi	r3, #4
   dca32:	50ca      	str	r2, [r1, r3]
   dca34:	b10a      	cbz	r2, dca3a <__lshift+0x8e>
   dca36:	f108 0602 	add.w	r6, r8, #2
   dca3a:	3e01      	subs	r6, #1
   dca3c:	4638      	mov	r0, r7
   dca3e:	612e      	str	r6, [r5, #16]
   dca40:	4621      	mov	r1, r4
   dca42:	f7ff fddc 	bl	dc5fe <_Bfree>
   dca46:	4628      	mov	r0, r5
   dca48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dca4c:	3101      	adds	r1, #1
   dca4e:	005b      	lsls	r3, r3, #1
   dca50:	e7ba      	b.n	dc9c8 <__lshift+0x1c>
   dca52:	f842 0f04 	str.w	r0, [r2, #4]!
   dca56:	3301      	adds	r3, #1
   dca58:	e7c2      	b.n	dc9e0 <__lshift+0x34>
   dca5a:	3904      	subs	r1, #4
   dca5c:	f853 2b04 	ldr.w	r2, [r3], #4
   dca60:	f841 2f04 	str.w	r2, [r1, #4]!
   dca64:	459c      	cmp	ip, r3
   dca66:	d8f9      	bhi.n	dca5c <__lshift+0xb0>
   dca68:	e7e7      	b.n	dca3a <__lshift+0x8e>

000dca6a <__mcmp>:
   dca6a:	b530      	push	{r4, r5, lr}
   dca6c:	6902      	ldr	r2, [r0, #16]
   dca6e:	690c      	ldr	r4, [r1, #16]
   dca70:	1b12      	subs	r2, r2, r4
   dca72:	d10e      	bne.n	dca92 <__mcmp+0x28>
   dca74:	f100 0314 	add.w	r3, r0, #20
   dca78:	3114      	adds	r1, #20
   dca7a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dca7e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dca82:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dca86:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dca8a:	42a5      	cmp	r5, r4
   dca8c:	d003      	beq.n	dca96 <__mcmp+0x2c>
   dca8e:	d305      	bcc.n	dca9c <__mcmp+0x32>
   dca90:	2201      	movs	r2, #1
   dca92:	4610      	mov	r0, r2
   dca94:	bd30      	pop	{r4, r5, pc}
   dca96:	4283      	cmp	r3, r0
   dca98:	d3f3      	bcc.n	dca82 <__mcmp+0x18>
   dca9a:	e7fa      	b.n	dca92 <__mcmp+0x28>
   dca9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dcaa0:	e7f7      	b.n	dca92 <__mcmp+0x28>

000dcaa2 <__mdiff>:
   dcaa2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcaa6:	460c      	mov	r4, r1
   dcaa8:	4606      	mov	r6, r0
   dcaaa:	4611      	mov	r1, r2
   dcaac:	4620      	mov	r0, r4
   dcaae:	4617      	mov	r7, r2
   dcab0:	f7ff ffdb 	bl	dca6a <__mcmp>
   dcab4:	1e05      	subs	r5, r0, #0
   dcab6:	d108      	bne.n	dcaca <__mdiff+0x28>
   dcab8:	4629      	mov	r1, r5
   dcaba:	4630      	mov	r0, r6
   dcabc:	f7ff fd6b 	bl	dc596 <_Balloc>
   dcac0:	2301      	movs	r3, #1
   dcac2:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dcac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcaca:	bfa4      	itt	ge
   dcacc:	463b      	movge	r3, r7
   dcace:	4627      	movge	r7, r4
   dcad0:	4630      	mov	r0, r6
   dcad2:	6879      	ldr	r1, [r7, #4]
   dcad4:	bfa6      	itte	ge
   dcad6:	461c      	movge	r4, r3
   dcad8:	2500      	movge	r5, #0
   dcada:	2501      	movlt	r5, #1
   dcadc:	f7ff fd5b 	bl	dc596 <_Balloc>
   dcae0:	693e      	ldr	r6, [r7, #16]
   dcae2:	60c5      	str	r5, [r0, #12]
   dcae4:	6925      	ldr	r5, [r4, #16]
   dcae6:	f107 0114 	add.w	r1, r7, #20
   dcaea:	f104 0914 	add.w	r9, r4, #20
   dcaee:	f100 0e14 	add.w	lr, r0, #20
   dcaf2:	f107 0210 	add.w	r2, r7, #16
   dcaf6:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dcafa:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dcafe:	46f2      	mov	sl, lr
   dcb00:	2700      	movs	r7, #0
   dcb02:	f859 3b04 	ldr.w	r3, [r9], #4
   dcb06:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dcb0a:	fa1f f883 	uxth.w	r8, r3
   dcb0e:	fa17 f78b 	uxtah	r7, r7, fp
   dcb12:	0c1b      	lsrs	r3, r3, #16
   dcb14:	eba7 0808 	sub.w	r8, r7, r8
   dcb18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dcb1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dcb20:	fa1f f888 	uxth.w	r8, r8
   dcb24:	141f      	asrs	r7, r3, #16
   dcb26:	454d      	cmp	r5, r9
   dcb28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dcb2c:	f84a 3b04 	str.w	r3, [sl], #4
   dcb30:	d8e7      	bhi.n	dcb02 <__mdiff+0x60>
   dcb32:	1b2b      	subs	r3, r5, r4
   dcb34:	3b15      	subs	r3, #21
   dcb36:	f023 0303 	bic.w	r3, r3, #3
   dcb3a:	3304      	adds	r3, #4
   dcb3c:	3415      	adds	r4, #21
   dcb3e:	42a5      	cmp	r5, r4
   dcb40:	bf38      	it	cc
   dcb42:	2304      	movcc	r3, #4
   dcb44:	4419      	add	r1, r3
   dcb46:	4473      	add	r3, lr
   dcb48:	469e      	mov	lr, r3
   dcb4a:	460d      	mov	r5, r1
   dcb4c:	4565      	cmp	r5, ip
   dcb4e:	d30e      	bcc.n	dcb6e <__mdiff+0xcc>
   dcb50:	f10c 0203 	add.w	r2, ip, #3
   dcb54:	1a52      	subs	r2, r2, r1
   dcb56:	f022 0203 	bic.w	r2, r2, #3
   dcb5a:	3903      	subs	r1, #3
   dcb5c:	458c      	cmp	ip, r1
   dcb5e:	bf38      	it	cc
   dcb60:	2200      	movcc	r2, #0
   dcb62:	441a      	add	r2, r3
   dcb64:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dcb68:	b17b      	cbz	r3, dcb8a <__mdiff+0xe8>
   dcb6a:	6106      	str	r6, [r0, #16]
   dcb6c:	e7ab      	b.n	dcac6 <__mdiff+0x24>
   dcb6e:	f855 8b04 	ldr.w	r8, [r5], #4
   dcb72:	fa17 f488 	uxtah	r4, r7, r8
   dcb76:	1422      	asrs	r2, r4, #16
   dcb78:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dcb7c:	b2a4      	uxth	r4, r4
   dcb7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dcb82:	f84e 4b04 	str.w	r4, [lr], #4
   dcb86:	1417      	asrs	r7, r2, #16
   dcb88:	e7e0      	b.n	dcb4c <__mdiff+0xaa>
   dcb8a:	3e01      	subs	r6, #1
   dcb8c:	e7ea      	b.n	dcb64 <__mdiff+0xc2>
	...

000dcb90 <__ulp>:
   dcb90:	b082      	sub	sp, #8
   dcb92:	ed8d 0b00 	vstr	d0, [sp]
   dcb96:	9b01      	ldr	r3, [sp, #4]
   dcb98:	4912      	ldr	r1, [pc, #72]	; (dcbe4 <__ulp+0x54>)
   dcb9a:	4019      	ands	r1, r3
   dcb9c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dcba0:	2900      	cmp	r1, #0
   dcba2:	dd05      	ble.n	dcbb0 <__ulp+0x20>
   dcba4:	2200      	movs	r2, #0
   dcba6:	460b      	mov	r3, r1
   dcba8:	ec43 2b10 	vmov	d0, r2, r3
   dcbac:	b002      	add	sp, #8
   dcbae:	4770      	bx	lr
   dcbb0:	4249      	negs	r1, r1
   dcbb2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dcbb6:	ea4f 5021 	mov.w	r0, r1, asr #20
   dcbba:	f04f 0200 	mov.w	r2, #0
   dcbbe:	f04f 0300 	mov.w	r3, #0
   dcbc2:	da04      	bge.n	dcbce <__ulp+0x3e>
   dcbc4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dcbc8:	fa41 f300 	asr.w	r3, r1, r0
   dcbcc:	e7ec      	b.n	dcba8 <__ulp+0x18>
   dcbce:	f1a0 0114 	sub.w	r1, r0, #20
   dcbd2:	291e      	cmp	r1, #30
   dcbd4:	bfda      	itte	le
   dcbd6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dcbda:	fa20 f101 	lsrle.w	r1, r0, r1
   dcbde:	2101      	movgt	r1, #1
   dcbe0:	460a      	mov	r2, r1
   dcbe2:	e7e1      	b.n	dcba8 <__ulp+0x18>
   dcbe4:	7ff00000 	.word	0x7ff00000

000dcbe8 <__b2d>:
   dcbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcbea:	6905      	ldr	r5, [r0, #16]
   dcbec:	f100 0714 	add.w	r7, r0, #20
   dcbf0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dcbf4:	1f2e      	subs	r6, r5, #4
   dcbf6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dcbfa:	4620      	mov	r0, r4
   dcbfc:	f7ff fd92 	bl	dc724 <__hi0bits>
   dcc00:	f1c0 0320 	rsb	r3, r0, #32
   dcc04:	280a      	cmp	r0, #10
   dcc06:	f8df c07c 	ldr.w	ip, [pc, #124]	; dcc84 <__b2d+0x9c>
   dcc0a:	600b      	str	r3, [r1, #0]
   dcc0c:	dc14      	bgt.n	dcc38 <__b2d+0x50>
   dcc0e:	f1c0 0e0b 	rsb	lr, r0, #11
   dcc12:	fa24 f10e 	lsr.w	r1, r4, lr
   dcc16:	42b7      	cmp	r7, r6
   dcc18:	ea41 030c 	orr.w	r3, r1, ip
   dcc1c:	bf34      	ite	cc
   dcc1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcc22:	2100      	movcs	r1, #0
   dcc24:	3015      	adds	r0, #21
   dcc26:	fa04 f000 	lsl.w	r0, r4, r0
   dcc2a:	fa21 f10e 	lsr.w	r1, r1, lr
   dcc2e:	ea40 0201 	orr.w	r2, r0, r1
   dcc32:	ec43 2b10 	vmov	d0, r2, r3
   dcc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dcc38:	42b7      	cmp	r7, r6
   dcc3a:	bf3a      	itte	cc
   dcc3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcc40:	f1a5 0608 	subcc.w	r6, r5, #8
   dcc44:	2100      	movcs	r1, #0
   dcc46:	380b      	subs	r0, #11
   dcc48:	d017      	beq.n	dcc7a <__b2d+0x92>
   dcc4a:	f1c0 0c20 	rsb	ip, r0, #32
   dcc4e:	fa04 f500 	lsl.w	r5, r4, r0
   dcc52:	42be      	cmp	r6, r7
   dcc54:	fa21 f40c 	lsr.w	r4, r1, ip
   dcc58:	ea45 0504 	orr.w	r5, r5, r4
   dcc5c:	bf8c      	ite	hi
   dcc5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dcc62:	2400      	movls	r4, #0
   dcc64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dcc68:	fa01 f000 	lsl.w	r0, r1, r0
   dcc6c:	fa24 f40c 	lsr.w	r4, r4, ip
   dcc70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcc74:	ea40 0204 	orr.w	r2, r0, r4
   dcc78:	e7db      	b.n	dcc32 <__b2d+0x4a>
   dcc7a:	ea44 030c 	orr.w	r3, r4, ip
   dcc7e:	460a      	mov	r2, r1
   dcc80:	e7d7      	b.n	dcc32 <__b2d+0x4a>
   dcc82:	bf00      	nop
   dcc84:	3ff00000 	.word	0x3ff00000

000dcc88 <__d2b>:
   dcc88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcc8c:	4689      	mov	r9, r1
   dcc8e:	2101      	movs	r1, #1
   dcc90:	ec57 6b10 	vmov	r6, r7, d0
   dcc94:	4690      	mov	r8, r2
   dcc96:	f7ff fc7e 	bl	dc596 <_Balloc>
   dcc9a:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dcc9e:	4604      	mov	r4, r0
   dcca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dcca4:	bb35      	cbnz	r5, dccf4 <__d2b+0x6c>
   dcca6:	2e00      	cmp	r6, #0
   dcca8:	9301      	str	r3, [sp, #4]
   dccaa:	d028      	beq.n	dccfe <__d2b+0x76>
   dccac:	4668      	mov	r0, sp
   dccae:	9600      	str	r6, [sp, #0]
   dccb0:	f7ff fd58 	bl	dc764 <__lo0bits>
   dccb4:	9900      	ldr	r1, [sp, #0]
   dccb6:	b300      	cbz	r0, dccfa <__d2b+0x72>
   dccb8:	9a01      	ldr	r2, [sp, #4]
   dccba:	f1c0 0320 	rsb	r3, r0, #32
   dccbe:	fa02 f303 	lsl.w	r3, r2, r3
   dccc2:	430b      	orrs	r3, r1
   dccc4:	40c2      	lsrs	r2, r0
   dccc6:	6163      	str	r3, [r4, #20]
   dccc8:	9201      	str	r2, [sp, #4]
   dccca:	9b01      	ldr	r3, [sp, #4]
   dcccc:	61a3      	str	r3, [r4, #24]
   dccce:	2b00      	cmp	r3, #0
   dccd0:	bf14      	ite	ne
   dccd2:	2202      	movne	r2, #2
   dccd4:	2201      	moveq	r2, #1
   dccd6:	6122      	str	r2, [r4, #16]
   dccd8:	b1d5      	cbz	r5, dcd10 <__d2b+0x88>
   dccda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dccde:	4405      	add	r5, r0
   dcce0:	f8c9 5000 	str.w	r5, [r9]
   dcce4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dcce8:	f8c8 0000 	str.w	r0, [r8]
   dccec:	4620      	mov	r0, r4
   dccee:	b003      	add	sp, #12
   dccf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dccf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dccf8:	e7d5      	b.n	dcca6 <__d2b+0x1e>
   dccfa:	6161      	str	r1, [r4, #20]
   dccfc:	e7e5      	b.n	dccca <__d2b+0x42>
   dccfe:	a801      	add	r0, sp, #4
   dcd00:	f7ff fd30 	bl	dc764 <__lo0bits>
   dcd04:	9b01      	ldr	r3, [sp, #4]
   dcd06:	6163      	str	r3, [r4, #20]
   dcd08:	2201      	movs	r2, #1
   dcd0a:	6122      	str	r2, [r4, #16]
   dcd0c:	3020      	adds	r0, #32
   dcd0e:	e7e3      	b.n	dccd8 <__d2b+0x50>
   dcd10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dcd14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dcd18:	f8c9 0000 	str.w	r0, [r9]
   dcd1c:	6918      	ldr	r0, [r3, #16]
   dcd1e:	f7ff fd01 	bl	dc724 <__hi0bits>
   dcd22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dcd26:	e7df      	b.n	dcce8 <__d2b+0x60>

000dcd28 <__ratio>:
   dcd28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcd2c:	4688      	mov	r8, r1
   dcd2e:	4669      	mov	r1, sp
   dcd30:	4681      	mov	r9, r0
   dcd32:	f7ff ff59 	bl	dcbe8 <__b2d>
   dcd36:	a901      	add	r1, sp, #4
   dcd38:	4640      	mov	r0, r8
   dcd3a:	ec55 4b10 	vmov	r4, r5, d0
   dcd3e:	f7ff ff53 	bl	dcbe8 <__b2d>
   dcd42:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dcd46:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dcd4a:	eba3 0c02 	sub.w	ip, r3, r2
   dcd4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   dcd52:	1a9b      	subs	r3, r3, r2
   dcd54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dcd58:	ec51 0b10 	vmov	r0, r1, d0
   dcd5c:	2b00      	cmp	r3, #0
   dcd5e:	bfd6      	itet	le
   dcd60:	460a      	movle	r2, r1
   dcd62:	462a      	movgt	r2, r5
   dcd64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dcd68:	468b      	mov	fp, r1
   dcd6a:	462f      	mov	r7, r5
   dcd6c:	bfd4      	ite	le
   dcd6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dcd72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dcd76:	4620      	mov	r0, r4
   dcd78:	ee10 2a10 	vmov	r2, s0
   dcd7c:	465b      	mov	r3, fp
   dcd7e:	4639      	mov	r1, r7
   dcd80:	f7fd fcd6 	bl	da730 <__aeabi_ddiv>
   dcd84:	ec41 0b10 	vmov	d0, r0, r1
   dcd88:	b003      	add	sp, #12
   dcd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcd8e <__copybits>:
   dcd8e:	3901      	subs	r1, #1
   dcd90:	b570      	push	{r4, r5, r6, lr}
   dcd92:	1149      	asrs	r1, r1, #5
   dcd94:	6914      	ldr	r4, [r2, #16]
   dcd96:	3101      	adds	r1, #1
   dcd98:	f102 0314 	add.w	r3, r2, #20
   dcd9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dcda0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dcda4:	1f05      	subs	r5, r0, #4
   dcda6:	42a3      	cmp	r3, r4
   dcda8:	d30c      	bcc.n	dcdc4 <__copybits+0x36>
   dcdaa:	1aa3      	subs	r3, r4, r2
   dcdac:	3b11      	subs	r3, #17
   dcdae:	f023 0303 	bic.w	r3, r3, #3
   dcdb2:	3211      	adds	r2, #17
   dcdb4:	42a2      	cmp	r2, r4
   dcdb6:	bf88      	it	hi
   dcdb8:	2300      	movhi	r3, #0
   dcdba:	4418      	add	r0, r3
   dcdbc:	2300      	movs	r3, #0
   dcdbe:	4288      	cmp	r0, r1
   dcdc0:	d305      	bcc.n	dcdce <__copybits+0x40>
   dcdc2:	bd70      	pop	{r4, r5, r6, pc}
   dcdc4:	f853 6b04 	ldr.w	r6, [r3], #4
   dcdc8:	f845 6f04 	str.w	r6, [r5, #4]!
   dcdcc:	e7eb      	b.n	dcda6 <__copybits+0x18>
   dcdce:	f840 3b04 	str.w	r3, [r0], #4
   dcdd2:	e7f4      	b.n	dcdbe <__copybits+0x30>

000dcdd4 <__any_on>:
   dcdd4:	f100 0214 	add.w	r2, r0, #20
   dcdd8:	6900      	ldr	r0, [r0, #16]
   dcdda:	114b      	asrs	r3, r1, #5
   dcddc:	4298      	cmp	r0, r3
   dcdde:	b510      	push	{r4, lr}
   dcde0:	db11      	blt.n	dce06 <__any_on+0x32>
   dcde2:	dd0a      	ble.n	dcdfa <__any_on+0x26>
   dcde4:	f011 011f 	ands.w	r1, r1, #31
   dcde8:	d007      	beq.n	dcdfa <__any_on+0x26>
   dcdea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcdee:	fa24 f001 	lsr.w	r0, r4, r1
   dcdf2:	fa00 f101 	lsl.w	r1, r0, r1
   dcdf6:	428c      	cmp	r4, r1
   dcdf8:	d10b      	bne.n	dce12 <__any_on+0x3e>
   dcdfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcdfe:	4293      	cmp	r3, r2
   dce00:	d803      	bhi.n	dce0a <__any_on+0x36>
   dce02:	2000      	movs	r0, #0
   dce04:	bd10      	pop	{r4, pc}
   dce06:	4603      	mov	r3, r0
   dce08:	e7f7      	b.n	dcdfa <__any_on+0x26>
   dce0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dce0e:	2900      	cmp	r1, #0
   dce10:	d0f5      	beq.n	dcdfe <__any_on+0x2a>
   dce12:	2001      	movs	r0, #1
   dce14:	e7f6      	b.n	dce04 <__any_on+0x30>

000dce16 <_calloc_r>:
   dce16:	b513      	push	{r0, r1, r4, lr}
   dce18:	434a      	muls	r2, r1
   dce1a:	4611      	mov	r1, r2
   dce1c:	9201      	str	r2, [sp, #4]
   dce1e:	f7fb fa59 	bl	d82d4 <_malloc_r>
   dce22:	4604      	mov	r4, r0
   dce24:	b118      	cbz	r0, dce2e <_calloc_r+0x18>
   dce26:	9a01      	ldr	r2, [sp, #4]
   dce28:	2100      	movs	r1, #0
   dce2a:	f7fe f888 	bl	daf3e <memset>
   dce2e:	4620      	mov	r0, r4
   dce30:	b002      	add	sp, #8
   dce32:	bd10      	pop	{r4, pc}
   dce34:	0000      	movs	r0, r0
	...

000dce38 <nan>:
   dce38:	ed9f 0b01 	vldr	d0, [pc, #4]	; dce40 <nan+0x8>
   dce3c:	4770      	bx	lr
   dce3e:	bf00      	nop
   dce40:	00000000 	.word	0x00000000
   dce44:	7ff80000 	.word	0x7ff80000

000dce48 <__ascii_wctomb>:
   dce48:	b149      	cbz	r1, dce5e <__ascii_wctomb+0x16>
   dce4a:	2aff      	cmp	r2, #255	; 0xff
   dce4c:	bf85      	ittet	hi
   dce4e:	238a      	movhi	r3, #138	; 0x8a
   dce50:	6003      	strhi	r3, [r0, #0]
   dce52:	700a      	strbls	r2, [r1, #0]
   dce54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dce58:	bf98      	it	ls
   dce5a:	2001      	movls	r0, #1
   dce5c:	4770      	bx	lr
   dce5e:	4608      	mov	r0, r1
   dce60:	4770      	bx	lr
	...

000dce64 <__aeabi_d2lz>:
   dce64:	b538      	push	{r3, r4, r5, lr}
   dce66:	2200      	movs	r2, #0
   dce68:	2300      	movs	r3, #0
   dce6a:	4604      	mov	r4, r0
   dce6c:	460d      	mov	r5, r1
   dce6e:	f7fd fda7 	bl	da9c0 <__aeabi_dcmplt>
   dce72:	b928      	cbnz	r0, dce80 <__aeabi_d2lz+0x1c>
   dce74:	4620      	mov	r0, r4
   dce76:	4629      	mov	r1, r5
   dce78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dce7c:	f7fd be8e 	b.w	dab9c <__aeabi_d2ulz>
   dce80:	4620      	mov	r0, r4
   dce82:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dce86:	f7fd fe89 	bl	dab9c <__aeabi_d2ulz>
   dce8a:	4240      	negs	r0, r0
   dce8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dce90:	bd38      	pop	{r3, r4, r5, pc}
   dce92:	bf00      	nop

000dce94 <dynalib_user>:
   dce94:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dcea4:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   dceb4:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dcec4:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dced4:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   dcee4:	4f4d 4544 7525 003e 2931 4120 746e 6e65     MODE%u>.1) Anten
   dcef4:	616e 5320 6174 7574 2073 2428 4750 4f54     na Status ($PGTO
   dcf04:	2950 3d00 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     P).=============
   dcf14:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dcf24:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dcf34:	3d3d 3d3d 3d3d 3d3d 003d 6f43 6d6d 6e61     =========.Comman
   dcf44:	2064 4449 203a 4100 746e 6e65 616e 5320     d ID: .Antenna S
   dcf54:	6174 7574 3a73 0020 2932 4720 6f6c 6162     tatus: .2) Globa
   dcf64:	206c 6f50 6973 6974 6e6f 6e69 2067 7953     l Positioning Sy
   dcf74:	7473 6d65 4620 7869 6465 4420 7461 2061     stem Fixed Data 
   dcf84:	2428 5047 4747 2941 5500 4354 5420 6d69     ($GPGGA).UTC Tim
   dcf94:	3a65 0020 614c 6974 7574 6564 203a 4e00     e: .Latitude: .N
   dcfa4:	726f 6874 532f 756f 6874 6e49 6964 6163     orth/SouthIndica
   dcfb4:	6f74 3a72 0020 6f4c 676e 7469 6475 3a65     tor: .Longitude:
   dcfc4:	0020 6145 7473 572f 7365 4974 646e 6369      .East/WestIndic
   dcfd4:	7461 726f 203a 5000 736f 7469 6f69 206e     ator: .Position 
   dcfe4:	6946 2078 6e49 6964 6163 6f74 3a72 0020     Fix Indicator: .
   dcff4:	6153 6574 6c6c 7469 7365 5520 6573 3a64     Satellites Used:
   dd004:	0020 6f48 6972 6f7a 746e 6c61 4420 6c69      .Horizontal Dil
   dd014:	7475 6f69 206e 666f 5020 6572 6963 6973     ution of Precisi
   dd024:	6e6f 203a 4100 746c 7469 6475 3a65 0020     on: .Altitude: .
   dd034:	6547 696f 6164 206c 6553 6170 6172 6974     Geoidal Separati
   dd044:	6e6f 203a 4100 6567 6f20 2066 6944 6666     on: .Age of Diff
   dd054:	202e 6f43 7272 3a2e 0020 6946 3a78 2000     . Corr.: .Fix:. 
   dd064:	0020 6543 6c6c 532d 6769 003a 614c 3a74      .Cell-Sig:.Lat:
   dd074:	4c00 6e6f 3a67 4300 7275 6572 746e 4620     .Long:.Current F
   dd084:	6c69 3a65 4200 7461 6574 7972 203a 2000     ile:.Battery: . 
   dd094:	0025 4453 4320 7261 2064 6966 656c 6420     %.SD Card file d
   dd0a4:	7665 6369 4965 2d44 7878 2078 706f 6e65     eviceID-xxx open
   dd0b4:	6620 6961 656c 0064 002c 6e49 7469 6169      failed.,.Initia
   dd0c4:	696c 697a 676e 2e2e 002e 6e49 7469 6169     lizing....Initia
   dd0d4:	696c 697a 676e 5300 4344 7261 5f64 6553     lizing.SDCard_Se
   dd0e4:	7574 0070 4453 6143 6472 4c20 676f 6567     tup.SDCard Logge
   dd0f4:	0072 4453 4320 7261 2064 6e49 7469 2d20     r.SD Card Init -
   dd104:	4f20 004b 4453 6143 6472 465f 6961 756c      OK.SDCard_Failu
   dd114:	6572 0021 4c41 5245 0054 4453 4320 7261     re!.ALERT.SD Car
   dd124:	2064 6e49 7469 4620 6961 656c 0064 002d     d Init Failed.-.
   dd134:	632e 7673 0000 0000                         .csv....

000dd13c <_ZTVN8particle11SPISettingsE>:
	...
   dd144:	4251 000d 40c9 000d 4161 000d               QB...@..aA..

000dd150 <_ZTV5Timer>:
	...
   dd158:	42d5 000d 431d 000d 418f 000d               .B...C...A..

000dd164 <_ZTV4File>:
	...
   dd16c:	415f 000d 416f 000d 421d 000d 4189 000d     _A..oA...B...A..
   dd17c:	40cb 000d 41e1 000d 41db 000d 41d5 000d     .@...A...A...A..

000dd18c <_ZL4font>:
   dd18c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dd19c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dd1ac:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dd1bc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dd1cc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dd1dc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dd1ec:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dd1fc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dd20c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dd21c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dd22c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dd23c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dd24c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dd25c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dd26c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dd27c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dd28c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dd29c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dd2ac:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dd2bc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dd2cc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dd2dc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dd2ec:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dd2fc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dd30c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dd31c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dd32c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dd33c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dd34c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dd35c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dd36c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dd37c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dd38c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dd39c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dd3ac:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dd3bc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dd3cc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dd3dc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dd3ec:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dd3fc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dd40c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dd41c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   dd42c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dd43c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dd44c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   dd45c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd46c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   dd47c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   dd48c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   dd49c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd4ac:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd4bc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd4cc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd4dc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd4ec:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd4fc:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   dd50c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   dd51c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   dd52c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   dd53c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   dd54c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   dd55c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   dd56c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   dd57c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   dd58c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   dd59c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   dd5ac:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   dd5bc:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   dd5cc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   dd5dc:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   dd5ec:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   dd5fc:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   dd60c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   dd61c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   dd62c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   dd63c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   dd64c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   dd65c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   dd66c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   dd67c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000dd68c <_ZTV12Adafruit_GFX>:
	...
   dd69c:	547d 000d 8f01 000d 40a5 000d 4e85 000d     }T.......@...N..
   dd6ac:	4e87 000d 4eb9 000d 4e95 000d 4ea7 000d     .N...N...N...N..
   dd6bc:	4dc9 000d 4e85 000d 50b1 000d 502b 000d     .M...N...P..+P..
   dd6cc:	4ed1 000d 4f0f 000d 4f49 000d 4f8f 000d     .N...O..IO...O..
   dd6dc:	502d 000d 4fab 000d                         -P...O..

000dd6e4 <_ZL12splash1_data>:
   dd6e4:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   dd6f4:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   dd704:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   dd714:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   dd724:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   dd734:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   dd74c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   dd75c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   dd76c:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   dd77c:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   dd78c:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   dd79c:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   dd7ac:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   dd7bc:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   dd7cc:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   dd7dc:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   dd7ec:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   dd7fc:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   dd80c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   dd81c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   dd82c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   dd83c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   dd84c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   dd85c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   dd874:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   dd88c:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   dd89c:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   dd8ac:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   dd8bc:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   dd8cc:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   dd8dc:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   dd8ec:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   dd8fc:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   dd90c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   dd91c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   dd92c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   dd93c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   dd94c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   dd95c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   dd96c:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   dd97c:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   dd98c:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   dd99c:	fdff 5b6b 6adb c0fd                         ..k[.j..

000dd9a4 <_ZL12splash2_data>:
   dd9a4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   dd9b4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   dd9c4:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   dd9e0:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   dd9f0:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   dda00:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   dda10:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   dda20:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   dda30:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   dda40:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   dda50:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   dda60:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   dda70:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   dda80:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   dda90:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   ddaa0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   ddab0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   ddac0:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   ddad0:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   ddae0:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   ddaf0:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   ddb00:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   ddb10:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   ddb20:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   ddb38:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   ddb48:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   ddb58:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   ddb68:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   ddb78:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000ddb84 <_ZTV16Adafruit_SSD1306>:
	...
   ddb8c:	558d 000d 55a5 000d 547d 000d 8f01 000d     .U...U..}T......
   ddb9c:	55b9 000d 4e85 000d 4e87 000d 4eb9 000d     .U...N...N...N..
   ddbac:	4e95 000d 4ea7 000d 4dc9 000d 4e85 000d     .N...N...M...N..
   ddbbc:	50b1 000d 5773 000d 5d07 000d 5cb9 000d     .P..sW...]...\..
   ddbcc:	4f49 000d 4f8f 000d 502d 000d 4fab 000d     IO...O..-P...O..

000ddbdc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   ddbdc:	8000 e0c0 f8f0 fefc                         ........

000ddbe4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   ddbe4:	0100 0703 1f0f 7f3f                         ......?.

000ddbec <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   ddbec:	d5ae a880                                   ....

000ddbf0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   ddbf0:	00d3 8d40                                   ..@.

000ddbf4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   ddbf4:	0020 c8a1                                    ...

000ddbf8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   ddbf8:	40db a6a4 af2e                              .@....

000ddbfe <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   ddbfe:	02da 8f81                                   ....

000ddc02 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   ddc02:	12da                                         ...

000ddc05 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   ddc05:	02da                                         ...

000ddc08 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   ddc08:	0022 21ff 2400 4d50 4b54 3532 2c31 3639     "..!.$PMTK251,96
   ddc18:	3030 312a 0037 5024 544d 324b 3032 352c     00*17.$PMTK220,5
   ddc28:	3030 2a30 4231 2400 4d50 4b54 3033 2c30     000*1B.$PMTK300,
   ddc38:	3031 3030 302c 302c 302c 302c 312a 0043     1000,0,0,0,0*1C.
   ddc48:	5024 544d 334b 3431 302c 312c 302c 312c     $PMTK314,0,1,0,1
   ddc58:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
   ddc68:	302c 302c 302c 302c 302c 302c 302c 322a     ,0,0,0,0,0,0,0*2
   ddc78:	0038 5024 544d 334b 3130 322c 322a 0045     8.$PMTK301,2*2E.
   ddc88:	5024 4347 444d 332c 2c33 2a31 4336 4200     $PGCMD,33,1*6C.B
   ddc98:	6675 6566 2072 764f 7265 6e75 203a 0027     uffer Overun: '.
   ddca8:	002a 0024                                   *.$.

000ddcac <CSWTCH.24>:
   ddcac:	0201 0403 0605 0807 0009 0000 0000 0000     ................
   ddcbc:	0b0a 0d0c 0f0e 4724 4750 4147 2400 5047     ......$GPGGA.$GP
   ddccc:	5347 0041 4724 4750 5653 2400 5047 4d52     GSA.$GPGSV.$GPRM
   ddcdc:	0043 4724 5650 4754 2400 4750 4f54 0050     C.$GPVTG.$PGTOP.

000ddcec <_ZTV3Gga>:
	...
   ddcf4:	6439 000d                                   9d..

000ddcf8 <_ZTV5Pgtop>:
	...
   ddd00:	640d 000d                                   .d..

000ddd04 <_ZTV16OledWingAdafruit>:
	...
   ddd0c:	7bb5 000d 7bd5 000d 547d 000d 8f01 000d     .{...{..}T......
   ddd1c:	55b9 000d 4e85 000d 4e87 000d 4eb9 000d     .U...N...N...N..
   ddd2c:	4e95 000d 4ea7 000d 4dc9 000d 4e85 000d     .N...N...M...N..
   ddd3c:	50b1 000d 5773 000d 5d07 000d 5cb9 000d     .P..sW...]...\..
   ddd4c:	4f49 000d 4f8f 000d 502d 000d 4fab 000d     IO...O..-P...O..

000ddd5c <_ZTVN5spark13CellularClassE>:
	...
   ddd64:	83bf 000d 83b5 000d 83ab 000d 8361 000d     ............a...
   ddd74:	839f 000d 8393 000d 8de1 000d 8de9 000d     ................
   ddd84:	8387 000d 837f 000d 8375 000d 836b 000d     ........u...k...
   ddd94:	8e19 000d                                   ....

000ddd98 <_ZTV14CellularSignal>:
	...
   ddda0:	846d 000d 8495 000d 846f 000d 84a5 000d     m.......o.......
   dddb0:	84d9 000d 8505 000d 8539 000d 8589 000d     ........9.......
   dddc0:	8473 000d 848f 000d fffc ffff 0000 0000     s...............
   dddd0:	85af 000d                                   ....

000dddd4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ddddc:	85cf 000d 85d5 000d 8613 000d 85e3 000d     ................
   dddec:	85d1 000d                                   ....

000dddf0 <_ZTVN5spark13EthernetClassE>:
	...
   dddf8:	8b8b 000d 8b81 000d 8b77 000d 8b6d 000d     ........w...m...
   dde08:	8b61 000d 8b55 000d 8de1 000d 8de9 000d     a...U...........
   dde18:	8b49 000d 8b41 000d 8b37 000d 8b2d 000d     I...A...7...-...
   dde28:	8e19 000d                                   ....

000dde2c <_ZTV7TwoWire>:
	...
   dde34:	8ba9 000d 8bf3 000d 8bcb 000d 8bab 000d     ................
   dde44:	8bd3 000d 8bdb 000d 8be3 000d 8beb 000d     ................

000dde54 <_ZTV9IPAddress>:
	...
   dde5c:	8cbd 000d 8cad 000d 8caf 000d 7061 0070     ............app.

000dde6c <_ZTVN5spark12NetworkClassE>:
	...
   dde74:	8da1 000d 8dab 000d 8db5 000d 8dbf 000d     ................
   dde84:	8dc9 000d 8dd5 000d 8de1 000d 8de9 000d     ................
   dde94:	8df1 000d 8dfd 000d 8e05 000d 8e0f 000d     ................
   ddea4:	8e19 000d 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000ddeb4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ddeb4:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   ddec4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   dded4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   ddee4:	0000 0000                                   ....

000ddee8 <_ZTV11USARTSerial>:
	...
   ddef0:	9bf1 000d 9c5f 000d 9c37 000d 8f01 000d     ...._...7.......
   ddf00:	9c07 000d 9c23 000d 9c15 000d 9c31 000d     ....#.......1...
   ddf10:	9bf3 000d 9bf9 000d                         ........

000ddf18 <_ZTV9USBSerial>:
	...
   ddf20:	9cfb 000d 9d63 000d 9d39 000d 8f01 000d     ....c...9.......
   ddf30:	9d2b 000d 9cfd 000d 9d0d 000d 9d5d 000d     +...........]...
   ddf40:	9d1d 000d 9cf5 000d                         ........

000ddf48 <_ZSt7nothrow>:
   ddf48:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   ddf58:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000ddf69 <day_name.6145>:
   ddf69:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddf79:	6972 6153                                    riSat

000ddf7e <mon_name.6146>:
   ddf7e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddf8e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddf9e:	4476 6365 6e69 7469 0079                    vDecinity.

000ddfa8 <fpi.7566>:
   ddfa8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddfb8:	0000 0000                                   ....

000ddfbc <fpinan.7602>:
   ddfbc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   ddfcc:	0000 0000                                   ....

000ddfd0 <tinytens>:
   ddfd0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ddfe0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ddff0:	6f43 64ac 0628 1168                         Co.d(.h.

000ddff8 <_ctype_>:
   ddff8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de008:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de018:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de028:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de038:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de048:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de058:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de068:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de078:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de0fc <_C_numeric_locale>:
   de0fc:	d0cc 000d df68 000d dd50 2003 4f50 4953     ....h...P.. POSI
   de10c:	0058 0000                                   X...

000de110 <__mprec_bigtens>:
   de110:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de120:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de130:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de138 <__mprec_tens>:
   de138:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de148:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de158:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de168:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de178:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de188:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de198:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de1a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de1b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de1c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de1d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de1e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de1f8:	9db4 79d9 7843 44ea                         ...yCx.D

000de200 <p05.7490>:
   de200:	0005 0000 0019 0000 007d 0000               ........}...

000de20c <link_const_variable_data_end>:
   de20c:	000d4c4d 	.word	0x000d4c4d
   de210:	000d8351 	.word	0x000d8351
   de214:	000d843d 	.word	0x000d843d
   de218:	000d8b95 	.word	0x000d8b95
   de21c:	000d8d91 	.word	0x000d8d91
   de220:	000d8eed 	.word	0x000d8eed
   de224:	000d91e9 	.word	0x000d91e9
   de228:	000d9885 	.word	0x000d9885
   de22c:	000d9bdd 	.word	0x000d9bdd
