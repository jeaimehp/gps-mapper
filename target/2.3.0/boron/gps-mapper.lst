
/Users/jhpowell/Documents/Particle/gps-mapper/target/2.3.0/boron/gps-mapper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a220  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000de240  000de240  0000e240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000de248  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003dcd8  000de24c  0001dcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000930  2003dec0  2003dec0  0002dec0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000de434  000de434  0001e434  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000de45c  000de45c  0001e45c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0028218a  00000000  00000000  0001e460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00026347  00000000  00000000  002a05ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004160f  00000000  00000000  002c6931  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000033e8  00000000  00000000  00307f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009fd0  00000000  00000000  0030b328  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004cced  00000000  00000000  003152f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00064a8d  00000000  00000000  00361fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001179dc  00000000  00000000  003c6a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009e6c  00000000  00000000  004de450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 ff7a 	bl	daf2a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 ff82 	bl	daf46 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcd8 	.word	0x2003dcd8
   d404c:	000de24c 	.word	0x000de24c
   d4050:	2003dec0 	.word	0x2003dec0
   d4054:	2003dec0 	.word	0x2003dec0
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 ff91 	bl	d9f88 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000de214 	.word	0x000de214
   d4080:	000de238 	.word	0x000de238

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bcdc 	b.w	d4a40 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9c7 	bl	d441c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 bf31 	b.w	d9ef8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b8e9 	b.w	d826c <malloc>

000d409a <_Znaj>:
   d409a:	f004 b8e7 	b.w	d826c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b8ed 	b.w	d827c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fff8 	bl	d80a0 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7d61 	.word	0x000d7d61

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ca:	7c03      	ldrb	r3, [r0, #16]
   d40cc:	f013 0308 	ands.w	r3, r3, #8
   d40d0:	bf1e      	ittt	ne
   d40d2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40d4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40d6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40d8:	2b00      	cmp	r3, #0
  }
   d40da:	bfac      	ite	ge
   d40dc:	4618      	movge	r0, r3
   d40de:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40e2:	4770      	bx	lr

000d40e4 <_Z23displayvoltage_button_Av>:
bool buttonB = false;
bool buttonC = false;


void displayvoltage_button_A (void) {
  buttonA = true;
   d40e4:	4b04      	ldr	r3, [pc, #16]	; (d40f8 <_Z23displayvoltage_button_Av+0x14>)
   d40e6:	2201      	movs	r2, #1
   d40e8:	701a      	strb	r2, [r3, #0]
  buttonB = false;
   d40ea:	4a04      	ldr	r2, [pc, #16]	; (d40fc <_Z23displayvoltage_button_Av+0x18>)
   d40ec:	2300      	movs	r3, #0
   d40ee:	7013      	strb	r3, [r2, #0]
  buttonC = false;
   d40f0:	4a03      	ldr	r2, [pc, #12]	; (d4100 <_Z23displayvoltage_button_Av+0x1c>)
   d40f2:	7013      	strb	r3, [r2, #0]
};
   d40f4:	4770      	bx	lr
   d40f6:	bf00      	nop
   d40f8:	2003dcd8 	.word	0x2003dcd8
   d40fc:	2003dfe8 	.word	0x2003dfe8
   d4100:	2003dfe9 	.word	0x2003dfe9

000d4104 <_Z23displayvoltage_button_Bv>:

void displayvoltage_button_B (void) {
  buttonA = false;
   d4104:	4a04      	ldr	r2, [pc, #16]	; (d4118 <_Z23displayvoltage_button_Bv+0x14>)
   d4106:	2300      	movs	r3, #0
   d4108:	7013      	strb	r3, [r2, #0]
  buttonB = true;
   d410a:	4a04      	ldr	r2, [pc, #16]	; (d411c <_Z23displayvoltage_button_Bv+0x18>)
   d410c:	2101      	movs	r1, #1
   d410e:	7011      	strb	r1, [r2, #0]
  buttonC = false;
   d4110:	4a03      	ldr	r2, [pc, #12]	; (d4120 <_Z23displayvoltage_button_Bv+0x1c>)
   d4112:	7013      	strb	r3, [r2, #0]
};
   d4114:	4770      	bx	lr
   d4116:	bf00      	nop
   d4118:	2003dcd8 	.word	0x2003dcd8
   d411c:	2003dfe8 	.word	0x2003dfe8
   d4120:	2003dfe9 	.word	0x2003dfe9

000d4124 <_Z23displayvoltage_button_Cv>:

void displayvoltage_button_C (void) {
  buttonA = false;
   d4124:	4a04      	ldr	r2, [pc, #16]	; (d4138 <_Z23displayvoltage_button_Cv+0x14>)
   d4126:	2300      	movs	r3, #0
   d4128:	7013      	strb	r3, [r2, #0]
  buttonB = false;
   d412a:	4a04      	ldr	r2, [pc, #16]	; (d413c <_Z23displayvoltage_button_Cv+0x18>)
   d412c:	7013      	strb	r3, [r2, #0]
  buttonC = true;
   d412e:	4b04      	ldr	r3, [pc, #16]	; (d4140 <_Z23displayvoltage_button_Cv+0x1c>)
   d4130:	2201      	movs	r2, #1
   d4132:	701a      	strb	r2, [r3, #0]
};
   d4134:	4770      	bx	lr
   d4136:	bf00      	nop
   d4138:	2003dcd8 	.word	0x2003dcd8
   d413c:	2003dfe8 	.word	0x2003dfe8
   d4140:	2003dfe9 	.word	0x2003dfe9

000d4144 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d4144:	6803      	ldr	r3, [r0, #0]
   d4146:	4718      	bx	r3

000d4148 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d4148:	2a01      	cmp	r2, #1
   d414a:	d003      	beq.n	d4154 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d414c:	2a02      	cmp	r2, #2
   d414e:	d003      	beq.n	d4158 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d4150:	2000      	movs	r0, #0
   d4152:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4154:	6001      	str	r1, [r0, #0]
	      break;
   d4156:	e7fb      	b.n	d4150 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d4158:	680b      	ldr	r3, [r1, #0]
   d415a:	6003      	str	r3, [r0, #0]
	}
   d415c:	e7f8      	b.n	d4150 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d415e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d415e:	4770      	bx	lr

000d4160 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4160:	b510      	push	{r4, lr}
  }
   d4162:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4164:	4604      	mov	r4, r0
  }
   d4166:	f005 fff9 	bl	da15c <_ZdlPvj>
   d416a:	4620      	mov	r0, r4
   d416c:	bd10      	pop	{r4, pc}

000d416e <_ZN4FileD0Ev>:
   d416e:	b510      	push	{r4, lr}
   d4170:	2134      	movs	r1, #52	; 0x34
   d4172:	4604      	mov	r4, r0
   d4174:	f005 fff2 	bl	da15c <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_Z12onSerialDatav>:

}

void onSerialData()
{
  _gps.onSerialData();
   d417c:	4801      	ldr	r0, [pc, #4]	; (d4184 <_Z12onSerialDatav+0x8>)
   d417e:	f001 bef9 	b.w	d5f74 <_ZN3Gps12onSerialDataEv>
   d4182:	bf00      	nop
   d4184:	2003ded0 	.word	0x2003ded0

000d4188 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4188:	3010      	adds	r0, #16
   d418a:	f002 bcc1 	b.w	d6b10 <_ZN7FatFile5writeEPKvj>

000d418e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d418e:	6943      	ldr	r3, [r0, #20]
   d4190:	b113      	cbz	r3, d4198 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4192:	6983      	ldr	r3, [r0, #24]
   d4194:	300c      	adds	r0, #12
   d4196:	4718      	bx	r3
            callback();
        }
    }
   d4198:	4770      	bx	lr

000d419a <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d419a:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d419c:	2100      	movs	r1, #0
   d419e:	4604      	mov	r4, r0
   d41a0:	4608      	mov	r0, r1
   d41a2:	f003 fd8d 	bl	d7cc0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41a6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41a8:	4620      	mov	r0, r4
   d41aa:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41ac:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41ae:	f003 fd9f 	bl	d7cf0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41b2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41b4:	b10c      	cbz	r4, d41ba <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41b6:	2301      	movs	r3, #1
   d41b8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41ba:	2100      	movs	r1, #0
   d41bc:	2001      	movs	r0, #1
   d41be:	f003 fd7f 	bl	d7cc0 <os_thread_scheduling>
            }
        }
        if (t) {
   d41c2:	b12c      	cbz	r4, d41d0 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41c4:	6823      	ldr	r3, [r4, #0]
   d41c6:	4620      	mov	r0, r4
   d41c8:	689b      	ldr	r3, [r3, #8]
   d41ca:	4798      	blx	r3
            t->running = false;
   d41cc:	2300      	movs	r3, #0
   d41ce:	7123      	strb	r3, [r4, #4]
        }
    }
   d41d0:	b002      	add	sp, #8
   d41d2:	bd10      	pop	{r4, pc}

000d41d4 <_ZN4File5flushEv>:
    FatFile::sync();
   d41d4:	3010      	adds	r0, #16
   d41d6:	f002 bc11 	b.w	d69fc <_ZN7FatFile4syncEv>

000d41da <_ZN4File4peekEv>:
    return FatFile::peek();
   d41da:	3010      	adds	r0, #16
   d41dc:	f002 bb2c 	b.w	d6838 <_ZN7FatFile4peekEv>

000d41e0 <_ZN4File4readEv>:
  int read() {
   d41e0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d41e2:	2201      	movs	r2, #1
   d41e4:	f10d 0107 	add.w	r1, sp, #7
   d41e8:	3010      	adds	r0, #16
   d41ea:	f002 fa77 	bl	d66dc <_ZN7FatFile4readEPvj>
   d41ee:	2801      	cmp	r0, #1
   d41f0:	bf0c      	ite	eq
   d41f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d41f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   d41fa:	b003      	add	sp, #12
   d41fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d4200:	b513      	push	{r0, r1, r4, lr}
   d4202:	4b05      	ldr	r3, [pc, #20]	; (d4218 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d4204:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4206:	f88d 3000 	strb.w	r3, [sp]
   d420a:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d420c:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d420e:	f004 fb1b 	bl	d8848 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d4212:	4620      	mov	r0, r4
   d4214:	b002      	add	sp, #8
   d4216:	bd10      	pop	{r4, pc}
   d4218:	2003decc 	.word	0x2003decc

000d421c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d421c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d421e:	2201      	movs	r2, #1
   d4220:	f88d 1007 	strb.w	r1, [sp, #7]
   d4224:	3010      	adds	r0, #16
   d4226:	f10d 0107 	add.w	r1, sp, #7
   d422a:	f002 fc71 	bl	d6b10 <_ZN7FatFile5writeEPKvj>
  }
   d422e:	b003      	add	sp, #12
   d4230:	f85d fb04 	ldr.w	pc, [sp], #4

000d4234 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4234:	b40e      	push	{r1, r2, r3}
   d4236:	b503      	push	{r0, r1, lr}
   d4238:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d423a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d423c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4240:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4242:	f004 ffa4 	bl	d918e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4246:	b002      	add	sp, #8
   d4248:	f85d eb04 	ldr.w	lr, [sp], #4
   d424c:	b003      	add	sp, #12
   d424e:	4770      	bx	lr

000d4250 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4250:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4256:	7922      	ldrb	r2, [r4, #4]
   d4258:	68a3      	ldr	r3, [r4, #8]
   d425a:	b132      	cbz	r2, d426a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d425c:	b9a3      	cbnz	r3, d4288 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d425e:	490b      	ldr	r1, [pc, #44]	; (d428c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4260:	b002      	add	sp, #8
   d4262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4266:	f004 be65 	b.w	d8f34 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d426a:	4a09      	ldr	r2, [pc, #36]	; (d4290 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d426c:	7b26      	ldrb	r6, [r4, #12]
   d426e:	4d09      	ldr	r5, [pc, #36]	; (d4294 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4270:	4909      	ldr	r1, [pc, #36]	; (d4298 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4272:	7b64      	ldrb	r4, [r4, #13]
   d4274:	2e01      	cmp	r6, #1
   d4276:	bf18      	it	ne
   d4278:	4629      	movne	r1, r5
   d427a:	e9cd 1400 	strd	r1, r4, [sp]
   d427e:	4907      	ldr	r1, [pc, #28]	; (d429c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4280:	f7ff ffd8 	bl	d4234 <_ZN5Print6printfEPKcz>
  }
   d4284:	b002      	add	sp, #8
   d4286:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4288:	4a05      	ldr	r2, [pc, #20]	; (d42a0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d428a:	e7ef      	b.n	d426c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d428c:	000dcec1 	.word	0x000dcec1
   d4290:	000ddf70 	.word	0x000ddf70
   d4294:	000dcebd 	.word	0x000dcebd
   d4298:	000dceb9 	.word	0x000dceb9
   d429c:	000dced7 	.word	0x000dced7
   d42a0:	000dceb0 	.word	0x000dceb0

000d42a4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42a4:	b510      	push	{r4, lr}
      if (_M_manager)
   d42a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42a8:	4604      	mov	r4, r0
      if (_M_manager)
   d42aa:	b113      	cbz	r3, d42b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42ac:	2203      	movs	r2, #3
   d42ae:	4601      	mov	r1, r0
   d42b0:	4798      	blx	r3
    }
   d42b2:	4620      	mov	r0, r4
   d42b4:	bd10      	pop	{r4, pc}

000d42b6 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d42b6:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42b8:	6880      	ldr	r0, [r0, #8]
   d42ba:	2300      	movs	r3, #0
   d42bc:	b138      	cbz	r0, d42ce <_ZN5Timer5_stopEjb+0x18>
   d42be:	e9cd 1300 	strd	r1, r3, [sp]
   d42c2:	2102      	movs	r1, #2
   d42c4:	f003 fd1c 	bl	d7d00 <os_timer_change>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
    }
   d42ce:	b003      	add	sp, #12
   d42d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42d4:	b538      	push	{r3, r4, r5, lr}
   d42d6:	4b10      	ldr	r3, [pc, #64]	; (d4318 <_ZN5TimerD1Ev+0x44>)
   d42d8:	6003      	str	r3, [r0, #0]
        if (handle) {
   d42da:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d42dc:	4604      	mov	r4, r0
        if (handle) {
   d42de:	b1a3      	cbz	r3, d430a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d42e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d42e4:	2200      	movs	r2, #0
   d42e6:	f7ff ffe6 	bl	d42b6 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d42ea:	68a0      	ldr	r0, [r4, #8]
   d42ec:	2100      	movs	r1, #0
   d42ee:	f003 fd27 	bl	d7d40 <os_timer_set_id>
            while (running) {
   d42f2:	7923      	ldrb	r3, [r4, #4]
   d42f4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42f8:	b113      	cbz	r3, d4300 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d42fa:	f003 fcd9 	bl	d7cb0 <os_thread_yield>
            while (running) {
   d42fe:	e7f8      	b.n	d42f2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4300:	68a0      	ldr	r0, [r4, #8]
   d4302:	4629      	mov	r1, r5
   d4304:	f003 fcec 	bl	d7ce0 <os_timer_destroy>
            handle = nullptr;
   d4308:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d430a:	f104 000c 	add.w	r0, r4, #12
   d430e:	f7ff ffc9 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
    }
   d4312:	4620      	mov	r0, r4
   d4314:	bd38      	pop	{r3, r4, r5, pc}
   d4316:	bf00      	nop
   d4318:	000dd160 	.word	0x000dd160

000d431c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d431c:	b510      	push	{r4, lr}
   d431e:	4604      	mov	r4, r0
    }
   d4320:	f7ff ffd8 	bl	d42d4 <_ZN5TimerD1Ev>
   d4324:	4620      	mov	r0, r4
   d4326:	211c      	movs	r1, #28
   d4328:	f005 ff18 	bl	da15c <_ZdlPvj>
   d432c:	4620      	mov	r0, r4
   d432e:	bd10      	pop	{r4, pc}

000d4330 <_ZN9NmeaCacheD1Ev>:
#define NMEA_MSGID_PGT      "$PGTOP"

#define NMEA_MSGID_LENGTH   6
#define NMEA_MAX_SENTENCE   6

class NmeaCache
   d4330:	b538      	push	{r3, r4, r5, lr}
   d4332:	4605      	mov	r5, r0
   d4334:	f100 0470 	add.w	r4, r0, #112	; 0x70
   d4338:	42ac      	cmp	r4, r5
   d433a:	d004      	beq.n	d4346 <_ZN9NmeaCacheD1Ev+0x16>
   d433c:	3c10      	subs	r4, #16
   d433e:	4620      	mov	r0, r4
   d4340:	f005 f890 	bl	d9464 <_ZN6StringD1Ev>
   d4344:	e7f8      	b.n	d4338 <_ZN9NmeaCacheD1Ev+0x8>
   d4346:	4620      	mov	r0, r4
   d4348:	bd38      	pop	{r3, r4, r5, pc}

000d434a <_ZN9NmeaCacheC1ERKS_>:
   d434a:	b570      	push	{r4, r5, r6, lr}
   d434c:	4605      	mov	r5, r0
   d434e:	460e      	mov	r6, r1
   d4350:	2400      	movs	r4, #0
   d4352:	1931      	adds	r1, r6, r4
   d4354:	1928      	adds	r0, r5, r4
   d4356:	3410      	adds	r4, #16
   d4358:	f005 f90f 	bl	d957a <_ZN6StringC1ERKS_>
   d435c:	2c70      	cmp	r4, #112	; 0x70
   d435e:	d1f8      	bne.n	d4352 <_ZN9NmeaCacheC1ERKS_+0x8>
   d4360:	4628      	mov	r0, r5
   d4362:	bd70      	pop	{r4, r5, r6, pc}

000d4364 <_Z11conv_coordsf>:
 {
 //Initialize the location.
 float f = in_coords;
 // Get the first two digits by turning f into an integer, then doing an integer divide by 100;
 // firsttowdigits should be 77 at this point.
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d4364:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 {
   d4368:	b5d0      	push	{r4, r6, r7, lr}
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d436a:	ee17 4a90 	vmov	r4, s15
   d436e:	2364      	movs	r3, #100	; 0x64
   d4370:	fb94 f4f3 	sdiv	r4, r4, r3
 float nexttwodigits = f - (float)(firsttwodigits*100);
   d4374:	4363      	muls	r3, r4
   d4376:	ee07 3a90 	vmov	s15, r3
   d437a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 float theFinalAnswer = (float)(firsttwodigits + nexttwodigits/60.0);
   d437e:	ee70 7a67 	vsub.f32	s15, s0, s15
   d4382:	ee17 0a90 	vmov	r0, s15
   d4386:	f006 f855 	bl	da434 <__aeabi_f2d>
   d438a:	4b0a      	ldr	r3, [pc, #40]	; (d43b4 <_Z11conv_coordsf+0x50>)
   d438c:	2200      	movs	r2, #0
   d438e:	f006 f9d3 	bl	da738 <__aeabi_ddiv>
   d4392:	4606      	mov	r6, r0
   d4394:	4620      	mov	r0, r4
   d4396:	460f      	mov	r7, r1
   d4398:	f006 f83a 	bl	da410 <__aeabi_i2d>
   d439c:	4602      	mov	r2, r0
   d439e:	460b      	mov	r3, r1
   d43a0:	4630      	mov	r0, r6
   d43a2:	4639      	mov	r1, r7
   d43a4:	f005 fee8 	bl	da178 <__adddf3>
   d43a8:	f006 fb94 	bl	daad4 <__aeabi_d2f>
 return theFinalAnswer;
 }
   d43ac:	ee00 0a10 	vmov	s0, r0
   d43b0:	bdd0      	pop	{r4, r6, r7, pc}
   d43b2:	bf00      	nop
   d43b4:	404e0000 	.word	0x404e0000

000d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d43b8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d43ba:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d43bc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d43be:	b17c      	cbz	r4, d43e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d43c0:	6863      	ldr	r3, [r4, #4]
   d43c2:	3b01      	subs	r3, #1
   d43c4:	6063      	str	r3, [r4, #4]
   d43c6:	b95b      	cbnz	r3, d43e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d43c8:	6823      	ldr	r3, [r4, #0]
   d43ca:	4620      	mov	r0, r4
   d43cc:	689b      	ldr	r3, [r3, #8]
   d43ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43d0:	68a3      	ldr	r3, [r4, #8]
   d43d2:	3b01      	subs	r3, #1
   d43d4:	60a3      	str	r3, [r4, #8]
   d43d6:	b91b      	cbnz	r3, d43e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d43d8:	6823      	ldr	r3, [r4, #0]
   d43da:	4620      	mov	r0, r4
   d43dc:	68db      	ldr	r3, [r3, #12]
   d43de:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d43e0:	4628      	mov	r0, r5
   d43e2:	bd38      	pop	{r3, r4, r5, pc}

000d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d43e4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d43e6:	4c0b      	ldr	r4, [pc, #44]	; (d4414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d43e8:	7821      	ldrb	r1, [r4, #0]
   d43ea:	f3bf 8f5b 	dmb	ish
   d43ee:	f011 0101 	ands.w	r1, r1, #1
   d43f2:	d10b      	bne.n	d440c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d43f4:	4620      	mov	r0, r4
   d43f6:	9101      	str	r1, [sp, #4]
   d43f8:	f7ff fe5e 	bl	d40b8 <__cxa_guard_acquire>
   d43fc:	9901      	ldr	r1, [sp, #4]
   d43fe:	b128      	cbz	r0, d440c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4400:	4805      	ldr	r0, [pc, #20]	; (d4418 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4402:	f004 ff01 	bl	d9208 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4406:	4620      	mov	r0, r4
   d4408:	f7ff fe5b 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d440c:	4802      	ldr	r0, [pc, #8]	; (d4418 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d440e:	b002      	add	sp, #8
   d4410:	bd10      	pop	{r4, pc}
   d4412:	bf00      	nop
   d4414:	2003dec0 	.word	0x2003dec0
   d4418:	2003dec4 	.word	0x2003dec4

000d441c <loop>:
{
   d441c:	b570      	push	{r4, r5, r6, lr}
   d441e:	b0e8      	sub	sp, #416	; 0x1a0
  Pgtop pgtop = Pgtop(_gps);
   d4420:	49cc      	ldr	r1, [pc, #816]	; (d4754 <loop+0x338>)
   d4422:	a83a      	add	r0, sp, #232	; 0xe8
   d4424:	f7ff ff91 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d4428:	a93a      	add	r1, sp, #232	; 0xe8
   d442a:	a812      	add	r0, sp, #72	; 0x48
   d442c:	f002 f86a 	bl	d6504 <_ZN5PgtopC1E9NmeaCache>
   d4430:	a83a      	add	r0, sp, #232	; 0xe8
   d4432:	f7ff ff7d 	bl	d4330 <_ZN9NmeaCacheD1Ev>
  if (pgtop.parse())
   d4436:	a812      	add	r0, sp, #72	; 0x48
   d4438:	f001 ffec 	bl	d6414 <_ZN5Pgtop5parseEv>
   d443c:	b360      	cbz	r0, d4498 <loop+0x7c>
    Serial.println("1) Antenna Status ($PGTOP)");
   d443e:	f005 fcbb 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4442:	49c5      	ldr	r1, [pc, #788]	; (d4758 <loop+0x33c>)
   d4444:	f004 fd89 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d4448:	f005 fcb6 	bl	d9db8 <_Z16_fetch_usbserialv>
   d444c:	49c3      	ldr	r1, [pc, #780]	; (d475c <loop+0x340>)
   d444e:	f004 fd84 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("Command ID: "); Serial.println(pgtop.commandId);
   d4452:	f005 fcb1 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4456:	49c2      	ldr	r1, [pc, #776]	; (d4760 <loop+0x344>)
   d4458:	f004 fd6c 	bl	d8f34 <_ZN5Print5printEPKc>
   d445c:	f005 fcac 	bl	d9db8 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4460:	220a      	movs	r2, #10
   d4462:	991c      	ldr	r1, [sp, #112]	; 0x70
   d4464:	4604      	mov	r4, r0
   d4466:	f004 fd82 	bl	d8f6e <_ZN5Print11printNumberEmh>
        n += println();
   d446a:	4620      	mov	r0, r4
   d446c:	f004 fd69 	bl	d8f42 <_ZN5Print7printlnEv>
    Serial.print("Antenna Status: "); Serial.println(pgtop.reference);
   d4470:	f005 fca2 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4474:	49bb      	ldr	r1, [pc, #748]	; (d4764 <loop+0x348>)
   d4476:	f004 fd5d 	bl	d8f34 <_ZN5Print5printEPKc>
   d447a:	f005 fc9d 	bl	d9db8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d447e:	991d      	ldr	r1, [sp, #116]	; 0x74
   d4480:	220a      	movs	r2, #10
   d4482:	4604      	mov	r4, r0
   d4484:	f004 fd73 	bl	d8f6e <_ZN5Print11printNumberEmh>
        n += println();
   d4488:	4620      	mov	r0, r4
   d448a:	f004 fd5a 	bl	d8f42 <_ZN5Print7printlnEv>
    Serial.println("");
   d448e:	f005 fc93 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4492:	49b5      	ldr	r1, [pc, #724]	; (d4768 <loop+0x34c>)
   d4494:	f004 fd61 	bl	d8f5a <_ZN5Print7printlnEPKc>
  Gga gga = Gga(_gps);
   d4498:	49ae      	ldr	r1, [pc, #696]	; (d4754 <loop+0x338>)
   d449a:	a81e      	add	r0, sp, #120	; 0x78
   d449c:	f7ff ff55 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d44a0:	a91e      	add	r1, sp, #120	; 0x78
   d44a2:	a83a      	add	r0, sp, #232	; 0xe8
   d44a4:	f002 f850 	bl	d6548 <_ZN3GgaC1E9NmeaCache>
   d44a8:	a81e      	add	r0, sp, #120	; 0x78
   d44aa:	f7ff ff41 	bl	d4330 <_ZN9NmeaCacheD1Ev>
  if (gga.parse())
   d44ae:	a83a      	add	r0, sp, #232	; 0xe8
   d44b0:	f001 ffc6 	bl	d6440 <_ZN3Gga5parseEv>
   d44b4:	2800      	cmp	r0, #0
   d44b6:	f000 81b3 	beq.w	d4820 <loop+0x404>
    Serial.println("2) Global Positioning System Fixed Data ($GPGGA)");
   d44ba:	f005 fc7d 	bl	d9db8 <_Z16_fetch_usbserialv>
   d44be:	49ab      	ldr	r1, [pc, #684]	; (d476c <loop+0x350>)
   d44c0:	f004 fd4b 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d44c4:	f005 fc78 	bl	d9db8 <_Z16_fetch_usbserialv>
   d44c8:	49a4      	ldr	r1, [pc, #656]	; (d475c <loop+0x340>)
   d44ca:	f004 fd46 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("UTC Time: "); Serial.println(gga.utcTime);
   d44ce:	f005 fc73 	bl	d9db8 <_Z16_fetch_usbserialv>
   d44d2:	49a7      	ldr	r1, [pc, #668]	; (d4770 <loop+0x354>)
   d44d4:	f004 fd2e 	bl	d8f34 <_ZN5Print5printEPKc>
   d44d8:	f005 fc6e 	bl	d9db8 <_Z16_fetch_usbserialv>
   d44dc:	9944      	ldr	r1, [sp, #272]	; 0x110
   d44de:	f004 fd3c 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("Latitude: "); Serial.println(gga.latitude);
   d44e2:	f005 fc69 	bl	d9db8 <_Z16_fetch_usbserialv>
   d44e6:	49a3      	ldr	r1, [pc, #652]	; (d4774 <loop+0x358>)
   d44e8:	f004 fd24 	bl	d8f34 <_ZN5Print5printEPKc>
   d44ec:	f005 fc64 	bl	d9db8 <_Z16_fetch_usbserialv>
   d44f0:	9948      	ldr	r1, [sp, #288]	; 0x120
   d44f2:	f004 fd32 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("North/SouthIndicator: "); Serial.println(gga.northSouthIndicator);
   d44f6:	f005 fc5f 	bl	d9db8 <_Z16_fetch_usbserialv>
   d44fa:	499f      	ldr	r1, [pc, #636]	; (d4778 <loop+0x35c>)
   d44fc:	f004 fd1a 	bl	d8f34 <_ZN5Print5printEPKc>
   d4500:	f005 fc5a 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4504:	994c      	ldr	r1, [sp, #304]	; 0x130
   d4506:	f004 fd28 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("Longitude: "); Serial.println(gga.longitude);
   d450a:	f005 fc55 	bl	d9db8 <_Z16_fetch_usbserialv>
   d450e:	499b      	ldr	r1, [pc, #620]	; (d477c <loop+0x360>)
   d4510:	f004 fd10 	bl	d8f34 <_ZN5Print5printEPKc>
   d4514:	f005 fc50 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4518:	9950      	ldr	r1, [sp, #320]	; 0x140
   d451a:	f004 fd1e 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("East/WestIndicator: "); Serial.println(gga.eastWestIndicator);
   d451e:	f005 fc4b 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4522:	4997      	ldr	r1, [pc, #604]	; (d4780 <loop+0x364>)
   d4524:	f004 fd06 	bl	d8f34 <_ZN5Print5printEPKc>
   d4528:	f005 fc46 	bl	d9db8 <_Z16_fetch_usbserialv>
   d452c:	9954      	ldr	r1, [sp, #336]	; 0x150
   d452e:	f004 fd14 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("Position Fix Indicator: "); Serial.println(gga.positionFixIndicator);
   d4532:	f005 fc41 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4536:	4993      	ldr	r1, [pc, #588]	; (d4784 <loop+0x368>)
   d4538:	f004 fcfc 	bl	d8f34 <_ZN5Print5printEPKc>
   d453c:	f005 fc3c 	bl	d9db8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4540:	220a      	movs	r2, #10
   d4542:	f89d 1160 	ldrb.w	r1, [sp, #352]	; 0x160
   d4546:	4604      	mov	r4, r0
   d4548:	f004 fd11 	bl	d8f6e <_ZN5Print11printNumberEmh>
        n += println();
   d454c:	4620      	mov	r0, r4
   d454e:	f004 fcf8 	bl	d8f42 <_ZN5Print7printlnEv>
    Serial.print("Satellites Used: "); Serial.println(gga.satellitesUsed);
   d4552:	f005 fc31 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4556:	498c      	ldr	r1, [pc, #560]	; (d4788 <loop+0x36c>)
   d4558:	f004 fcec 	bl	d8f34 <_ZN5Print5printEPKc>
   d455c:	f005 fc2c 	bl	d9db8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4560:	220a      	movs	r2, #10
   d4562:	f89d 1161 	ldrb.w	r1, [sp, #353]	; 0x161
   d4566:	4604      	mov	r4, r0
   d4568:	f004 fd01 	bl	d8f6e <_ZN5Print11printNumberEmh>
        n += println();
   d456c:	4620      	mov	r0, r4
   d456e:	f004 fce8 	bl	d8f42 <_ZN5Print7printlnEv>
    Serial.print("Horizontal Dilution of Precision: "); Serial.println(gga.hdop);
   d4572:	f005 fc21 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4576:	4985      	ldr	r1, [pc, #532]	; (d478c <loop+0x370>)
   d4578:	f004 fcdc 	bl	d8f34 <_ZN5Print5printEPKc>
   d457c:	f005 fc1c 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4580:	ed9d 0a59 	vldr	s0, [sp, #356]	; 0x164
   d4584:	2102      	movs	r1, #2
   d4586:	f004 fdf3 	bl	d9170 <_ZN5Print7printlnEfi>
    Serial.print("Altitude: "); Serial.print(gga.altitude); Serial.print(" "); Serial.println(gga.altitudeUnit);
   d458a:	f005 fc15 	bl	d9db8 <_Z16_fetch_usbserialv>
   d458e:	4980      	ldr	r1, [pc, #512]	; (d4790 <loop+0x374>)
   d4590:	f004 fcd0 	bl	d8f34 <_ZN5Print5printEPKc>
   d4594:	f005 fc10 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4598:	ed9d 0a5a 	vldr	s0, [sp, #360]	; 0x168
   d459c:	2102      	movs	r1, #2
   d459e:	f004 fdcd 	bl	d913c <_ZN5Print5printEfi>
   d45a2:	f005 fc09 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45a6:	497b      	ldr	r1, [pc, #492]	; (d4794 <loop+0x378>)
   d45a8:	f004 fcc4 	bl	d8f34 <_ZN5Print5printEPKc>
   d45ac:	f005 fc04 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45b0:	995b      	ldr	r1, [sp, #364]	; 0x16c
   d45b2:	f004 fcd2 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("Geoidal Separation: "); Serial.print(gga.geoidalSeparation); Serial.print(" "); Serial.println(gga.geoidalSeparationUnit);
   d45b6:	f005 fbff 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45ba:	4977      	ldr	r1, [pc, #476]	; (d4798 <loop+0x37c>)
   d45bc:	f004 fcba 	bl	d8f34 <_ZN5Print5printEPKc>
   d45c0:	f005 fbfa 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45c4:	ed9d 0a5f 	vldr	s0, [sp, #380]	; 0x17c
   d45c8:	2102      	movs	r1, #2
   d45ca:	f004 fdb7 	bl	d913c <_ZN5Print5printEfi>
   d45ce:	f005 fbf3 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45d2:	4970      	ldr	r1, [pc, #448]	; (d4794 <loop+0x378>)
   d45d4:	f004 fcae 	bl	d8f34 <_ZN5Print5printEPKc>
   d45d8:	f005 fbee 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45dc:	9960      	ldr	r1, [sp, #384]	; 0x180
   d45de:	f004 fcbc 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.print("Age of Diff. Corr.: "); Serial.println(gga.ageOfDiffCorr);
   d45e2:	f005 fbe9 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45e6:	496d      	ldr	r1, [pc, #436]	; (d479c <loop+0x380>)
   d45e8:	f004 fca4 	bl	d8f34 <_ZN5Print5printEPKc>
   d45ec:	f005 fbe4 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45f0:	9964      	ldr	r1, [sp, #400]	; 0x190
   d45f2:	f004 fcb2 	bl	d8f5a <_ZN5Print7printlnEPKc>
    Serial.println("");
   d45f6:	f005 fbdf 	bl	d9db8 <_Z16_fetch_usbserialv>
   d45fa:	495b      	ldr	r1, [pc, #364]	; (d4768 <loop+0x34c>)
   d45fc:	f004 fcad 	bl	d8f5a <_ZN5Print7printlnEPKc>
    CellularSignal sig = Cellular.RSSI();
   d4600:	4967      	ldr	r1, [pc, #412]	; (d47a0 <loop+0x384>)
   d4602:	a81e      	add	r0, sp, #120	; 0x78
   d4604:	f003 fee4 	bl	d83d0 <_ZN5spark13CellularClass4RSSIEv>
    String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d4608:	f005 faa3 	bl	d9b52 <_ZN9TimeClass3nowEv>
   d460c:	4b65      	ldr	r3, [pc, #404]	; (d47a4 <loop+0x388>)
   d460e:	4966      	ldr	r1, [pc, #408]	; (d47a8 <loop+0x38c>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	9300      	str	r3, [sp, #0]
   d4614:	4602      	mov	r2, r0
   d4616:	17c3      	asrs	r3, r0, #31
   d4618:	a802      	add	r0, sp, #8
   d461a:	f005 fa3b 	bl	d9a94 <_ZN9TimeClass6formatExPKc>
    if (buttonA) { 
   d461e:	4b63      	ldr	r3, [pc, #396]	; (d47ac <loop+0x390>)
   d4620:	781e      	ldrb	r6, [r3, #0]
   d4622:	2e00      	cmp	r6, #0
   d4624:	f000 812a 	beq.w	d487c <loop+0x460>
      display.clearDisplay();
   d4628:	4c61      	ldr	r4, [pc, #388]	; (d47b0 <loop+0x394>)
   d462a:	4620      	mov	r0, r4
   d462c:	f001 f92a 	bl	d5884 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d4630:	2101      	movs	r1, #1
   d4632:	4620      	mov	r0, r4
   d4634:	f000 ffa7 	bl	d5586 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4638:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d463c:	2200      	movs	r2, #0
   d463e:	e9c4 2304 	strd	r2, r3, [r4, #16]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4642:	495c      	ldr	r1, [pc, #368]	; (d47b4 <loop+0x398>)
   d4644:	a80e      	add	r0, sp, #56	; 0x38
   d4646:	f004 ff58 	bl	d94fa <_ZN6StringC1EPKc>
      display.println("Fix:" + String(gga.positionFixIndicator)+"  " + "Cell-Sig:" + int(sig.getStrength()) +"%");
   d464a:	220a      	movs	r2, #10
   d464c:	f89d 1160 	ldrb.w	r1, [sp, #352]	; 0x160
   d4650:	a80a      	add	r0, sp, #40	; 0x28
   d4652:	f004 ffc8 	bl	d95e6 <_ZN6StringC1Ehh>
   d4656:	a90a      	add	r1, sp, #40	; 0x28
   d4658:	a80e      	add	r0, sp, #56	; 0x38
   d465a:	f005 f82f 	bl	d96bc <_ZplRK15StringSumHelperRK6String>
   d465e:	4956      	ldr	r1, [pc, #344]	; (d47b8 <loop+0x39c>)
   d4660:	f005 f838 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d4664:	4955      	ldr	r1, [pc, #340]	; (d47bc <loop+0x3a0>)
   d4666:	f005 f835 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d466a:	4605      	mov	r5, r0
   d466c:	a81e      	add	r0, sp, #120	; 0x78
   d466e:	f003 ff1d 	bl	d84ac <_ZNK14CellularSignal11getStrengthEv>
   d4672:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d4676:	4628      	mov	r0, r5
   d4678:	ee17 1a90 	vmov	r1, s15
   d467c:	f005 f83f 	bl	d96fe <_ZplRK15StringSumHelperi>
   d4680:	494f      	ldr	r1, [pc, #316]	; (d47c0 <loop+0x3a4>)
   d4682:	f005 f827 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d4686:	6801      	ldr	r1, [r0, #0]
   d4688:	4620      	mov	r0, r4
   d468a:	f004 fc66 	bl	d8f5a <_ZN5Print7printlnEPKc>
   d468e:	a80a      	add	r0, sp, #40	; 0x28
   d4690:	f004 fee8 	bl	d9464 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4694:	a80e      	add	r0, sp, #56	; 0x38
   d4696:	f004 fee5 	bl	d9464 <_ZN6StringD1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d469a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   d469e:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d46a0:	4948      	ldr	r1, [pc, #288]	; (d47c4 <loop+0x3a8>)
   d46a2:	a80a      	add	r0, sp, #40	; 0x28
   d46a4:	f004 ff29 	bl	d94fa <_ZN6StringC1EPKc>
      display.println("Lat:" + String(gga.northSouthIndicator)+" "+String(conv_coords(gga.latitude.toFloat())));
   d46a8:	a94c      	add	r1, sp, #304	; 0x130
   d46aa:	a806      	add	r0, sp, #24
   d46ac:	f004 ff65 	bl	d957a <_ZN6StringC1ERKS_>
   d46b0:	a906      	add	r1, sp, #24
   d46b2:	a80a      	add	r0, sp, #40	; 0x28
   d46b4:	f005 f802 	bl	d96bc <_ZplRK15StringSumHelperRK6String>
   d46b8:	4936      	ldr	r1, [pc, #216]	; (d4794 <loop+0x378>)
   d46ba:	f005 f80b 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d46be:	4605      	mov	r5, r0
   d46c0:	a848      	add	r0, sp, #288	; 0x120
   d46c2:	f005 f8d1 	bl	d9868 <_ZNK6String7toFloatEv>
   d46c6:	f7ff fe4d 	bl	d4364 <_Z11conv_coordsf>
   d46ca:	2106      	movs	r1, #6
   d46cc:	a80e      	add	r0, sp, #56	; 0x38
   d46ce:	f004 ff9c 	bl	d960a <_ZN6StringC1Efi>
   d46d2:	a90e      	add	r1, sp, #56	; 0x38
   d46d4:	4628      	mov	r0, r5
   d46d6:	f004 fff1 	bl	d96bc <_ZplRK15StringSumHelperRK6String>
   d46da:	6801      	ldr	r1, [r0, #0]
   d46dc:	4620      	mov	r0, r4
   d46de:	f004 fc3c 	bl	d8f5a <_ZN5Print7printlnEPKc>
   d46e2:	a80e      	add	r0, sp, #56	; 0x38
   d46e4:	f004 febe 	bl	d9464 <_ZN6StringD1Ev>
   d46e8:	a806      	add	r0, sp, #24
   d46ea:	f004 febb 	bl	d9464 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46ee:	a80a      	add	r0, sp, #40	; 0x28
   d46f0:	f004 feb8 	bl	d9464 <_ZN6StringD1Ev>
   d46f4:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   d46f8:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d46fa:	4933      	ldr	r1, [pc, #204]	; (d47c8 <loop+0x3ac>)
   d46fc:	a80a      	add	r0, sp, #40	; 0x28
   d46fe:	f004 fefc 	bl	d94fa <_ZN6StringC1EPKc>
      display.println("Long:" + String(gga.eastWestIndicator) +" "+String(conv_coords(gga.longitude.toFloat())));
   d4702:	a954      	add	r1, sp, #336	; 0x150
   d4704:	a806      	add	r0, sp, #24
   d4706:	f004 ff38 	bl	d957a <_ZN6StringC1ERKS_>
   d470a:	a906      	add	r1, sp, #24
   d470c:	a80a      	add	r0, sp, #40	; 0x28
   d470e:	f004 ffd5 	bl	d96bc <_ZplRK15StringSumHelperRK6String>
   d4712:	4920      	ldr	r1, [pc, #128]	; (d4794 <loop+0x378>)
   d4714:	f004 ffde 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d4718:	4605      	mov	r5, r0
   d471a:	a850      	add	r0, sp, #320	; 0x140
   d471c:	f005 f8a4 	bl	d9868 <_ZNK6String7toFloatEv>
   d4720:	f7ff fe20 	bl	d4364 <_Z11conv_coordsf>
   d4724:	2106      	movs	r1, #6
   d4726:	a80e      	add	r0, sp, #56	; 0x38
   d4728:	f004 ff6f 	bl	d960a <_ZN6StringC1Efi>
   d472c:	a90e      	add	r1, sp, #56	; 0x38
   d472e:	4628      	mov	r0, r5
   d4730:	f004 ffc4 	bl	d96bc <_ZplRK15StringSumHelperRK6String>
   d4734:	6801      	ldr	r1, [r0, #0]
   d4736:	4620      	mov	r0, r4
   d4738:	f004 fc0f 	bl	d8f5a <_ZN5Print7printlnEPKc>
   d473c:	a80e      	add	r0, sp, #56	; 0x38
   d473e:	f004 fe91 	bl	d9464 <_ZN6StringD1Ev>
   d4742:	a806      	add	r0, sp, #24
   d4744:	f004 fe8e 	bl	d9464 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4748:	a80a      	add	r0, sp, #40	; 0x28
   d474a:	f004 fe8b 	bl	d9464 <_ZN6StringD1Ev>
      display.display();
   d474e:	4620      	mov	r0, r4
   d4750:	e03c      	b.n	d47cc <loop+0x3b0>
   d4752:	bf00      	nop
   d4754:	2003ded0 	.word	0x2003ded0
   d4758:	000dcef4 	.word	0x000dcef4
   d475c:	000dcf0f 	.word	0x000dcf0f
   d4760:	000dcf46 	.word	0x000dcf46
   d4764:	000dcf53 	.word	0x000dcf53
   d4768:	000ddf70 	.word	0x000ddf70
   d476c:	000dcf64 	.word	0x000dcf64
   d4770:	000dcf95 	.word	0x000dcf95
   d4774:	000dcfa0 	.word	0x000dcfa0
   d4778:	000dcfab 	.word	0x000dcfab
   d477c:	000dcfc2 	.word	0x000dcfc2
   d4780:	000dcfce 	.word	0x000dcfce
   d4784:	000dcfe3 	.word	0x000dcfe3
   d4788:	000dcffc 	.word	0x000dcffc
   d478c:	000dd00e 	.word	0x000dd00e
   d4790:	000dd031 	.word	0x000dd031
   d4794:	000dd06c 	.word	0x000dd06c
   d4798:	000dd03c 	.word	0x000dd03c
   d479c:	000dd051 	.word	0x000dd051
   d47a0:	2003e550 	.word	0x2003e550
   d47a4:	2003dce4 	.word	0x2003dce4
   d47a8:	2003e5b4 	.word	0x2003e5b4
   d47ac:	2003dcd8 	.word	0x2003dcd8
   d47b0:	2003dffc 	.word	0x2003dffc
   d47b4:	000dd066 	.word	0x000dd066
   d47b8:	000dd06b 	.word	0x000dd06b
   d47bc:	000dd06e 	.word	0x000dd06e
   d47c0:	000dd09c 	.word	0x000dd09c
   d47c4:	000dd078 	.word	0x000dd078
   d47c8:	000dd07d 	.word	0x000dd07d
      display.display();
   d47cc:	f001 fac6 	bl	d5d5c <_ZN16Adafruit_SSD13067displayEv>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d47d0:	f7ff fe08 	bl	d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d47d4:	2100      	movs	r1, #0
   d47d6:	f004 fd32 	bl	d923e <_ZN8SPIClass11setDataModeEh>
	if (gga.positionFixIndicator != 0){
   d47da:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
   d47de:	b1e3      	cbz	r3, d481a <loop+0x3fe>
	   if (millis() - lastmillis_pub >= pub_time_milli) {
   d47e0:	4d85      	ldr	r5, [pc, #532]	; (d49f8 <loop+0x5dc>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d47e2:	f003 facd 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
   d47e6:	682a      	ldr	r2, [r5, #0]
   d47e8:	1a80      	subs	r0, r0, r2
   d47ea:	4a84      	ldr	r2, [pc, #528]	; (d49fc <loop+0x5e0>)
   d47ec:	6812      	ldr	r2, [r2, #0]
   d47ee:	4290      	cmp	r0, r2
   d47f0:	d313      	bcc.n	d481a <loop+0x3fe>
    return open(m_cwd, path, oflag);
   d47f2:	4a83      	ldr	r2, [pc, #524]	; (d4a00 <loop+0x5e4>)
   d47f4:	4983      	ldr	r1, [pc, #524]	; (d4a04 <loop+0x5e8>)
   d47f6:	6812      	ldr	r2, [r2, #0]
   d47f8:	6809      	ldr	r1, [r1, #0]
   d47fa:	4883      	ldr	r0, [pc, #524]	; (d4a08 <loop+0x5ec>)
   d47fc:	f244 2302 	movw	r3, #16898	; 0x4202
   d4800:	f002 f939 	bl	d6a76 <_ZN7FatFile4openEPS_PKci>
	     if (!myFile.open(datafile_name, O_RDWR | O_CREAT | O_AT_END)) {
   d4804:	2800      	cmp	r0, #0
   d4806:	f040 80b2 	bne.w	d496e <loop+0x552>
            Serial.println("SD Card file deviceID-xxx open failed");
   d480a:	f005 fad5 	bl	d9db8 <_Z16_fetch_usbserialv>
   d480e:	497f      	ldr	r1, [pc, #508]	; (d4a0c <loop+0x5f0>)
   d4810:	f004 fba3 	bl	d8f5a <_ZN5Print7printlnEPKc>
   d4814:	f003 fab4 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
	    lastmillis_pub = millis();
   d4818:	6028      	str	r0, [r5, #0]
    String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d481a:	a802      	add	r0, sp, #8
   d481c:	f004 fe22 	bl	d9464 <_ZN6StringD1Ev>
  delay(1000);
   d4820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4824:	f003 fd7a 	bl	d831c <delay>
Checksum
<CR> <LF>                                       End of message termination

*/

class Gga : public Nmea
   d4828:	4b79      	ldr	r3, [pc, #484]	; (d4a10 <loop+0x5f4>)
   d482a:	933a      	str	r3, [sp, #232]	; 0xe8
   d482c:	a864      	add	r0, sp, #400	; 0x190
   d482e:	f004 fe19 	bl	d9464 <_ZN6StringD1Ev>
   d4832:	a860      	add	r0, sp, #384	; 0x180
   d4834:	f004 fe16 	bl	d9464 <_ZN6StringD1Ev>
   d4838:	a85b      	add	r0, sp, #364	; 0x16c
   d483a:	f004 fe13 	bl	d9464 <_ZN6StringD1Ev>
   d483e:	a854      	add	r0, sp, #336	; 0x150
   d4840:	f004 fe10 	bl	d9464 <_ZN6StringD1Ev>
   d4844:	a850      	add	r0, sp, #320	; 0x140
   d4846:	f004 fe0d 	bl	d9464 <_ZN6StringD1Ev>
   d484a:	a84c      	add	r0, sp, #304	; 0x130
   d484c:	f004 fe0a 	bl	d9464 <_ZN6StringD1Ev>
   d4850:	a848      	add	r0, sp, #288	; 0x120
   d4852:	f004 fe07 	bl	d9464 <_ZN6StringD1Ev>
   d4856:	a844      	add	r0, sp, #272	; 0x110
   d4858:	f004 fe04 	bl	d9464 <_ZN6StringD1Ev>
#define _NMEA_H

#include "application.h"
#include "NmeaCache.h"

class Nmea
   d485c:	a840      	add	r0, sp, #256	; 0x100
   d485e:	f004 fe01 	bl	d9464 <_ZN6StringD1Ev>
   d4862:	a83b      	add	r0, sp, #236	; 0xec
   d4864:	f004 fdfe 	bl	d9464 <_ZN6StringD1Ev>
class Pgtop : public Nmea
   d4868:	4b6a      	ldr	r3, [pc, #424]	; (d4a14 <loop+0x5f8>)
   d486a:	9312      	str	r3, [sp, #72]	; 0x48
   d486c:	a818      	add	r0, sp, #96	; 0x60
   d486e:	f004 fdf9 	bl	d9464 <_ZN6StringD1Ev>
   d4872:	a813      	add	r0, sp, #76	; 0x4c
   d4874:	f004 fdf6 	bl	d9464 <_ZN6StringD1Ev>
}
   d4878:	b068      	add	sp, #416	; 0x1a0
   d487a:	bd70      	pop	{r4, r5, r6, pc}
    else if (buttonB){
   d487c:	4b66      	ldr	r3, [pc, #408]	; (d4a18 <loop+0x5fc>)
   d487e:	781d      	ldrb	r5, [r3, #0]
   d4880:	b1cd      	cbz	r5, d48b6 <loop+0x49a>
      display.clearDisplay();
   d4882:	4c66      	ldr	r4, [pc, #408]	; (d4a1c <loop+0x600>)
   d4884:	4620      	mov	r0, r4
   d4886:	f000 fffd 	bl	d5884 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(2);
   d488a:	4620      	mov	r0, r4
   d488c:	2102      	movs	r1, #2
   d488e:	f000 fe7a 	bl	d5586 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4892:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4896:	6163      	str	r3, [r4, #20]
      display.println("Current File:");
   d4898:	4961      	ldr	r1, [pc, #388]	; (d4a20 <loop+0x604>)
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d489a:	6126      	str	r6, [r4, #16]
   d489c:	4620      	mov	r0, r4
   d489e:	f004 fb5c 	bl	d8f5a <_ZN5Print7printlnEPKc>
      display.setTextSize(1);
   d48a2:	4620      	mov	r0, r4
   d48a4:	2101      	movs	r1, #1
   d48a6:	f000 fe6e 	bl	d5586 <_ZN12Adafruit_GFX11setTextSizeEh>
        operator const char*() const { return c_str(); }
   d48aa:	4b55      	ldr	r3, [pc, #340]	; (d4a00 <loop+0x5e4>)
      display.println(datafile_name);
   d48ac:	4620      	mov	r0, r4
   d48ae:	6819      	ldr	r1, [r3, #0]
   d48b0:	f004 fb53 	bl	d8f5a <_ZN5Print7printlnEPKc>
   d48b4:	e74b      	b.n	d474e <loop+0x332>
    else if (buttonC){
   d48b6:	4b5b      	ldr	r3, [pc, #364]	; (d4a24 <loop+0x608>)
   d48b8:	781b      	ldrb	r3, [r3, #0]
   d48ba:	2b00      	cmp	r3, #0
   d48bc:	d088      	beq.n	d47d0 <loop+0x3b4>
      display.clearDisplay();
   d48be:	4c57      	ldr	r4, [pc, #348]	; (d4a1c <loop+0x600>)
   d48c0:	4620      	mov	r0, r4
   d48c2:	f000 ffdf 	bl	d5884 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d48c6:	2101      	movs	r1, #1
   d48c8:	4620      	mov	r0, r4
   d48ca:	f000 fe5c 	bl	d5586 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d48ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
      display.println(timeStamp);
   d48d2:	9902      	ldr	r1, [sp, #8]
   d48d4:	6163      	str	r3, [r4, #20]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d48d6:	6125      	str	r5, [r4, #16]
   d48d8:	4620      	mov	r0, r4
   d48da:	f004 fb3e 	bl	d8f5a <_ZN5Print7printlnEPKc>
   d48de:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
      display.print("Battery: ");
   d48e2:	4951      	ldr	r1, [pc, #324]	; (d4a28 <loop+0x60c>)
   d48e4:	6123      	str	r3, [r4, #16]
   d48e6:	4620      	mov	r0, r4
   d48e8:	f004 fb24 	bl	d8f34 <_ZN5Print5printEPKc>
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d48ec:	462a      	mov	r2, r5
   d48ee:	a90a      	add	r1, sp, #40	; 0x28
   d48f0:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d48f2:	950a      	str	r5, [sp, #40]	; 0x28
    const int ret = diag_get_source(id, &src, nullptr);
   d48f4:	f003 fbdc 	bl	d80b0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d48f8:	2800      	cmp	r0, #0
   d48fa:	d132      	bne.n	d4962 <loop+0x546>
        return ret;
    }
    return get(src, val);
   d48fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    SPARK_ASSERT(src && src->callback);
   d48fe:	b10c      	cbz	r4, d4904 <loop+0x4e8>
   d4900:	6923      	ldr	r3, [r4, #16]
   d4902:	b923      	cbnz	r3, d490e <loop+0x4f2>
   d4904:	4a49      	ldr	r2, [pc, #292]	; (d4a2c <loop+0x610>)
   d4906:	2100      	movs	r1, #0
   d4908:	200a      	movs	r0, #10
   d490a:	f003 fbc9 	bl	d80a0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d490e:	2300      	movs	r3, #0
   d4910:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   d4914:	230c      	movs	r3, #12
   d4916:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   d491a:	ad06      	add	r5, sp, #24
   d491c:	2304      	movs	r3, #4
   d491e:	950f      	str	r5, [sp, #60]	; 0x3c
   d4920:	9310      	str	r3, [sp, #64]	; 0x40
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4922:	6923      	ldr	r3, [r4, #16]
   d4924:	aa0e      	add	r2, sp, #56	; 0x38
   d4926:	2101      	movs	r1, #1
   d4928:	4620      	mov	r0, r4
   d492a:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d492c:	b9c8      	cbnz	r0, d4962 <loop+0x546>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d492e:	882b      	ldrh	r3, [r5, #0]
   d4930:	ee07 3a90 	vmov	s15, r3
   d4934:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
      display.print(int(System.batteryCharge()));
   d4938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d493c:	ee17 4a90 	vmov	r4, s15
        if (n < 0 && base == 10) {
   d4940:	2c00      	cmp	r4, #0
   d4942:	da11      	bge.n	d4968 <loop+0x54c>
            t = print('-');
   d4944:	212d      	movs	r1, #45	; 0x2d
   d4946:	4835      	ldr	r0, [pc, #212]	; (d4a1c <loop+0x600>)
   d4948:	f004 faf8 	bl	d8f3c <_ZN5Print5printEc>
            val = -n;
   d494c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d494e:	220a      	movs	r2, #10
   d4950:	4832      	ldr	r0, [pc, #200]	; (d4a1c <loop+0x600>)
   d4952:	f004 fb0c 	bl	d8f6e <_ZN5Print11printNumberEmh>
      display.println(" %");
   d4956:	4936      	ldr	r1, [pc, #216]	; (d4a30 <loop+0x614>)
   d4958:	4830      	ldr	r0, [pc, #192]	; (d4a1c <loop+0x600>)
   d495a:	f004 fafe 	bl	d8f5a <_ZN5Print7printlnEPKc>
      display.display();
   d495e:	482f      	ldr	r0, [pc, #188]	; (d4a1c <loop+0x600>)
   d4960:	e734      	b.n	d47cc <loop+0x3b0>
            return -1.0f;
   d4962:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4966:	e7e7      	b.n	d4938 <loop+0x51c>
            val = n;
   d4968:	ee17 1a90 	vmov	r1, s15
   d496c:	e7ef      	b.n	d494e <loop+0x532>
	StringSumHelper(const String &s) : String(s) {}
   d496e:	a902      	add	r1, sp, #8
   d4970:	a80a      	add	r0, sp, #40	; 0x28
   d4972:	f004 fe02 	bl	d957a <_ZN6StringC1ERKS_>
            myFile.println(String(timeStamp + ","+gga.northSouthIndicator+" "+conv_coords(gga.latitude.toFloat())+","+gga.eastWestIndicator+" "+conv_coords(gga.longitude.toFloat())+","+sig.getStrength()));
   d4976:	492f      	ldr	r1, [pc, #188]	; (d4a34 <loop+0x618>)
   d4978:	a80a      	add	r0, sp, #40	; 0x28
   d497a:	f004 feab 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d497e:	a94c      	add	r1, sp, #304	; 0x130
   d4980:	f004 fe9c 	bl	d96bc <_ZplRK15StringSumHelperRK6String>
   d4984:	492c      	ldr	r1, [pc, #176]	; (d4a38 <loop+0x61c>)
   d4986:	f004 fea5 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d498a:	4604      	mov	r4, r0
   d498c:	a848      	add	r0, sp, #288	; 0x120
   d498e:	f004 ff6b 	bl	d9868 <_ZNK6String7toFloatEv>
   d4992:	f7ff fce7 	bl	d4364 <_Z11conv_coordsf>
   d4996:	4620      	mov	r0, r4
   d4998:	f004 febb 	bl	d9712 <_ZplRK15StringSumHelperf>
   d499c:	4925      	ldr	r1, [pc, #148]	; (d4a34 <loop+0x618>)
   d499e:	f004 fe99 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d49a2:	a954      	add	r1, sp, #336	; 0x150
   d49a4:	f004 fe8a 	bl	d96bc <_ZplRK15StringSumHelperRK6String>
   d49a8:	4923      	ldr	r1, [pc, #140]	; (d4a38 <loop+0x61c>)
   d49aa:	f004 fe93 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d49ae:	4604      	mov	r4, r0
   d49b0:	a850      	add	r0, sp, #320	; 0x140
   d49b2:	f004 ff59 	bl	d9868 <_ZNK6String7toFloatEv>
   d49b6:	f7ff fcd5 	bl	d4364 <_Z11conv_coordsf>
   d49ba:	4620      	mov	r0, r4
   d49bc:	f004 fea9 	bl	d9712 <_ZplRK15StringSumHelperf>
   d49c0:	491c      	ldr	r1, [pc, #112]	; (d4a34 <loop+0x618>)
   d49c2:	f004 fe87 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d49c6:	4604      	mov	r4, r0
   d49c8:	a81e      	add	r0, sp, #120	; 0x78
   d49ca:	f003 fd6f 	bl	d84ac <_ZNK14CellularSignal11getStrengthEv>
   d49ce:	4620      	mov	r0, r4
   d49d0:	f004 fe9f 	bl	d9712 <_ZplRK15StringSumHelperf>
   d49d4:	4601      	mov	r1, r0
   d49d6:	a80e      	add	r0, sp, #56	; 0x38
   d49d8:	f004 fdcf 	bl	d957a <_ZN6StringC1ERKS_>
   d49dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   d49de:	4817      	ldr	r0, [pc, #92]	; (d4a3c <loop+0x620>)
   d49e0:	f004 fabb 	bl	d8f5a <_ZN5Print7printlnEPKc>
   d49e4:	a80e      	add	r0, sp, #56	; 0x38
   d49e6:	f004 fd3d 	bl	d9464 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d49ea:	a80a      	add	r0, sp, #40	; 0x28
   d49ec:	f004 fd3a 	bl	d9464 <_ZN6StringD1Ev>
            myFile.close();
   d49f0:	4805      	ldr	r0, [pc, #20]	; (d4a08 <loop+0x5ec>)
   d49f2:	f002 f839 	bl	d6a68 <_ZN7FatFile5closeEv>
   d49f6:	e70d      	b.n	d4814 <loop+0x3f8>
   d49f8:	2003e06c 	.word	0x2003e06c
   d49fc:	2003e0b4 	.word	0x2003e0b4
   d4a00:	2003dfec 	.word	0x2003dfec
   d4a04:	2003e540 	.word	0x2003e540
   d4a08:	2003e080 	.word	0x2003e080
   d4a0c:	000dd09e 	.word	0x000dd09e
   d4a10:	000ddcfc 	.word	0x000ddcfc
   d4a14:	000ddd08 	.word	0x000ddd08
   d4a18:	2003dfe8 	.word	0x2003dfe8
   d4a1c:	2003dffc 	.word	0x2003dffc
   d4a20:	000dd083 	.word	0x000dd083
   d4a24:	2003dfe9 	.word	0x2003dfe9
   d4a28:	000dd091 	.word	0x000dd091
   d4a2c:	000d7d61 	.word	0x000d7d61
   d4a30:	000dd09b 	.word	0x000dd09b
   d4a34:	000dd0c4 	.word	0x000dd0c4
   d4a38:	000dd06c 	.word	0x000dd06c
   d4a3c:	2003e070 	.word	0x2003e070

000d4a40 <setup>:
{
   d4a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  delay(2000);
   d4a42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
   d4a46:	b087      	sub	sp, #28
  display.setup();
   d4a48:	4c6e      	ldr	r4, [pc, #440]	; (d4c04 <setup+0x1c4>)
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4a4a:	4d6f      	ldr	r5, [pc, #444]	; (d4c08 <setup+0x1c8>)
  delay(2000);
   d4a4c:	f003 fc66 	bl	d831c <delay>
  Serial.begin();
   d4a50:	f005 f9b2 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4a54:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4a58:	f005 f9a2 	bl	d9da0 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   d4a5c:	f005 f9ac 	bl	d9db8 <_Z16_fetch_usbserialv>
   d4a60:	496a      	ldr	r1, [pc, #424]	; (d4c0c <setup+0x1cc>)
   d4a62:	f004 fa7a 	bl	d8f5a <_ZN5Print7printlnEPKc>
  display.setup();
   d4a66:	4620      	mov	r0, r4
   d4a68:	f003 f8f0 	bl	d7c4c <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	f000 ff09 	bl	d5884 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4a72:	4620      	mov	r0, r4
   d4a74:	f001 f972 	bl	d5d5c <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   d4a78:	2101      	movs	r1, #1
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	f000 fd83 	bl	d5586 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4a80:	2600      	movs	r6, #0
   d4a82:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4a86:	e9c4 6304 	strd	r6, r3, [r4, #16]
  display.println("Initializing...");
   d4a8a:	4960      	ldr	r1, [pc, #384]	; (d4c0c <setup+0x1cc>)
   d4a8c:	4620      	mov	r0, r4
   d4a8e:	f004 fa64 	bl	d8f5a <_ZN5Print7printlnEPKc>
  display.display();
   d4a92:	4620      	mov	r0, r4
   d4a94:	f001 f962 	bl	d5d5c <_ZN16Adafruit_SSD13067displayEv>
  _gps.begin(9600);
   d4a98:	485d      	ldr	r0, [pc, #372]	; (d4c10 <setup+0x1d0>)
   d4a9a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4a9e:	f001 fa2f 	bl	d5f00 <_ZN3Gps5beginEm>
   d4aa2:	4628      	mov	r0, r5
   d4aa4:	4632      	mov	r2, r6
   d4aa6:	4631      	mov	r1, r6
   d4aa8:	f7ff fc05 	bl	d42b6 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4aac:	68a8      	ldr	r0, [r5, #8]
   d4aae:	4625      	mov	r5, r4
   d4ab0:	b140      	cbz	r0, d4ac4 <setup+0x84>
   d4ab2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4ab6:	9300      	str	r3, [sp, #0]
   d4ab8:	9601      	str	r6, [sp, #4]
   d4aba:	4633      	mov	r3, r6
   d4abc:	4632      	mov	r2, r6
   d4abe:	4631      	mov	r1, r6
   d4ac0:	f003 f91e 	bl	d7d00 <os_timer_change>
   d4ac4:	f7ff fc8e 	bl	d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4ac8:	2100      	movs	r1, #0
   d4aca:	f004 fbb8 	bl	d923e <_ZN8SPIClass11setDataModeEh>
 Particle.publish("SDCard_Setup", "Initializing");
   d4ace:	4a51      	ldr	r2, [pc, #324]	; (d4c14 <setup+0x1d4>)
   d4ad0:	4951      	ldr	r1, [pc, #324]	; (d4c18 <setup+0x1d8>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4ad2:	4c52      	ldr	r4, [pc, #328]	; (d4c1c <setup+0x1dc>)
   d4ad4:	a802      	add	r0, sp, #8
   d4ad6:	f7ff fb93 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ada:	a803      	add	r0, sp, #12
   d4adc:	f7ff fc6c 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class SPISettings : public Printable {
   d4ae0:	4b4f      	ldr	r3, [pc, #316]	; (d4c20 <setup+0x1e0>)
   d4ae2:	9302      	str	r3, [sp, #8]
   d4ae4:	2300      	movs	r3, #0
   d4ae6:	f88d 300c 	strb.w	r3, [sp, #12]
   d4aea:	f504 678c 	add.w	r7, r4, #1120	; 0x460
   d4aee:	4b4d      	ldr	r3, [pc, #308]	; (d4c24 <setup+0x1e4>)
   d4af0:	9304      	str	r3, [sp, #16]
   d4af2:	2601      	movs	r6, #1
   d4af4:	ab02      	add	r3, sp, #8
   d4af6:	2205      	movs	r2, #5
   d4af8:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4afc:	4638      	mov	r0, r7
   d4afe:	f8ad 6014 	strh.w	r6, [sp, #20]
   d4b02:	f002 fe49 	bl	d7798 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d4b06:	2800      	cmp	r0, #0
   d4b08:	d05d      	beq.n	d4bc6 <setup+0x186>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4b0a:	6027      	str	r7, [r4, #0]
    vwd()->close();
   d4b0c:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   d4b10:	f001 ffaa 	bl	d6a68 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4b14:	4631      	mov	r1, r6
   d4b16:	4620      	mov	r0, r4
   d4b18:	f002 fcec 	bl	d74f4 <_ZN9FatVolume4initEh>
   d4b1c:	f204 463c 	addw	r6, r4, #1084	; 0x43c
   d4b20:	4601      	mov	r1, r0
   d4b22:	2800      	cmp	r0, #0
   d4b24:	d04a      	beq.n	d4bbc <setup+0x17c>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4b26:	493d      	ldr	r1, [pc, #244]	; (d4c1c <setup+0x1dc>)
   d4b28:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   d4b2c:	f001 fdbd 	bl	d66aa <_ZN7FatFile8openRootEP9FatVolume>
   d4b30:	2800      	cmp	r0, #0
   d4b32:	d048      	beq.n	d4bc6 <setup+0x186>
    if (!dir->isDir()) {
   d4b34:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4b38:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4b3c:	d043      	beq.n	d4bc6 <setup+0x186>
    m_cwd = dir;
   d4b3e:	4b3a      	ldr	r3, [pc, #232]	; (d4c28 <setup+0x1e8>)
            Particle.publish("SDCard Logger", "OK");
   d4b40:	4a3a      	ldr	r2, [pc, #232]	; (d4c2c <setup+0x1ec>)
   d4b42:	493b      	ldr	r1, [pc, #236]	; (d4c30 <setup+0x1f0>)
   d4b44:	601e      	str	r6, [r3, #0]
   d4b46:	a802      	add	r0, sp, #8
   d4b48:	f7ff fb5a 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4b4c:	a803      	add	r0, sp, #12
   d4b4e:	f7ff fc33 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4b52:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init - OK");
   d4b56:	4937      	ldr	r1, [pc, #220]	; (d4c34 <setup+0x1f4>)
   d4b58:	612b      	str	r3, [r5, #16]
   d4b5a:	482a      	ldr	r0, [pc, #168]	; (d4c04 <setup+0x1c4>)
   d4b5c:	f004 f9fd 	bl	d8f5a <_ZN5Print7printlnEPKc>
          display.display();
   d4b60:	4828      	ldr	r0, [pc, #160]	; (d4c04 <setup+0x1c4>)
   d4b62:	f001 f8fb 	bl	d5d5c <_ZN16Adafruit_SSD13067displayEv>
            delay(1000);
   d4b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4b6a:	f003 fbd7 	bl	d831c <delay>
    attachInterrupt(D4, displayvoltage_button_A, CHANGE);
   d4b6e:	2400      	movs	r4, #0
    pinMode(D4, INPUT_PULLUP);
   d4b70:	2102      	movs	r1, #2
   d4b72:	2004      	movs	r0, #4
   d4b74:	f005 fa78 	bl	da068 <pinMode>
    attachInterrupt(D4, displayvoltage_button_A, CHANGE);
   d4b78:	4622      	mov	r2, r4
   d4b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4b7e:	492e      	ldr	r1, [pc, #184]	; (d4c38 <setup+0x1f8>)
   d4b80:	9400      	str	r4, [sp, #0]
   d4b82:	2004      	movs	r0, #4
   d4b84:	f004 f86c 	bl	d8c60 <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(D3, INPUT_PULLUP);
   d4b88:	2102      	movs	r1, #2
   d4b8a:	2003      	movs	r0, #3
   d4b8c:	f005 fa6c 	bl	da068 <pinMode>
    attachInterrupt(D3, displayvoltage_button_B, CHANGE);
   d4b90:	4622      	mov	r2, r4
   d4b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4b96:	4929      	ldr	r1, [pc, #164]	; (d4c3c <setup+0x1fc>)
   d4b98:	9400      	str	r4, [sp, #0]
   d4b9a:	2003      	movs	r0, #3
   d4b9c:	f004 f860 	bl	d8c60 <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(D2, INPUT_PULLUP);
   d4ba0:	2102      	movs	r1, #2
   d4ba2:	4608      	mov	r0, r1
   d4ba4:	f005 fa60 	bl	da068 <pinMode>
    attachInterrupt(D2, displayvoltage_button_C, CHANGE);
   d4ba8:	4925      	ldr	r1, [pc, #148]	; (d4c40 <setup+0x200>)
   d4baa:	9400      	str	r4, [sp, #0]
   d4bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4bb0:	4622      	mov	r2, r4
   d4bb2:	2002      	movs	r0, #2
   d4bb4:	f004 f854 	bl	d8c60 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4bb8:	b007      	add	sp, #28
   d4bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (part ? init(part) : init(1) || init(0))
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	f002 fc99 	bl	d74f4 <_ZN9FatVolume4initEh>
   d4bc2:	2800      	cmp	r0, #0
   d4bc4:	d1af      	bne.n	d4b26 <setup+0xe6>
         Particle.publish("SDCard Logger", "Failed");
   d4bc6:	4a1f      	ldr	r2, [pc, #124]	; (d4c44 <setup+0x204>)
   d4bc8:	4919      	ldr	r1, [pc, #100]	; (d4c30 <setup+0x1f0>)
   d4bca:	a802      	add	r0, sp, #8
   d4bcc:	f7ff fb18 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4bd0:	a803      	add	r0, sp, #12
   d4bd2:	f7ff fbf1 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
         delay(1000);
   d4bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4bda:	f003 fb9f 	bl	d831c <delay>
         Particle.publish("ALERT", "SDCard_Failure!");
   d4bde:	4a1a      	ldr	r2, [pc, #104]	; (d4c48 <setup+0x208>)
   d4be0:	491a      	ldr	r1, [pc, #104]	; (d4c4c <setup+0x20c>)
   d4be2:	a802      	add	r0, sp, #8
   d4be4:	f7ff fb0c 	bl	d4200 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4be8:	a803      	add	r0, sp, #12
   d4bea:	f7ff fbe5 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bee:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init Failed");
   d4bf2:	4917      	ldr	r1, [pc, #92]	; (d4c50 <setup+0x210>)
   d4bf4:	612b      	str	r3, [r5, #16]
   d4bf6:	4803      	ldr	r0, [pc, #12]	; (d4c04 <setup+0x1c4>)
   d4bf8:	f004 f9af 	bl	d8f5a <_ZN5Print7printlnEPKc>
          display.display();
   d4bfc:	4801      	ldr	r0, [pc, #4]	; (d4c04 <setup+0x1c4>)
   d4bfe:	f001 f8ad 	bl	d5d5c <_ZN16Adafruit_SSD13067displayEv>
   d4c02:	e7b4      	b.n	d4b6e <setup+0x12e>
   d4c04:	2003dffc 	.word	0x2003dffc
   d4c08:	2003dfcc 	.word	0x2003dfcc
   d4c0c:	000dd0c6 	.word	0x000dd0c6
   d4c10:	2003ded0 	.word	0x2003ded0
   d4c14:	000dd0d6 	.word	0x000dd0d6
   d4c18:	000dd0e3 	.word	0x000dd0e3
   d4c1c:	2003e0b8 	.word	0x2003e0b8
   d4c20:	000dd14c 	.word	0x000dd14c
   d4c24:	02faf080 	.word	0x02faf080
   d4c28:	2003e540 	.word	0x2003e540
   d4c2c:	000dd10d 	.word	0x000dd10d
   d4c30:	000dd0f0 	.word	0x000dd0f0
   d4c34:	000dd0fe 	.word	0x000dd0fe
   d4c38:	000d40e5 	.word	0x000d40e5
   d4c3c:	000d4105 	.word	0x000d4105
   d4c40:	000d4125 	.word	0x000d4125
   d4c44:	000dd133 	.word	0x000dd133
   d4c48:	000dd110 	.word	0x000dd110
   d4c4c:	000dd120 	.word	0x000dd120
   d4c50:	000dd126 	.word	0x000dd126

000d4c54 <_GLOBAL__sub_I__gps>:
 }
   d4c54:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c56:	4b4b      	ldr	r3, [pc, #300]	; (d4d84 <_GLOBAL__sub_I__gps+0x130>)
   d4c58:	2400      	movs	r4, #0
   d4c5a:	b088      	sub	sp, #32
   d4c5c:	701c      	strb	r4, [r3, #0]
Gps _gps = Gps(&Serial1);
   d4c5e:	f005 f827 	bl	d9cb0 <_Z22__fetch_global_Serial1v>
   d4c62:	4601      	mov	r1, r0
   d4c64:	4848      	ldr	r0, [pc, #288]	; (d4d88 <_GLOBAL__sub_I__gps+0x134>)
   d4c66:	f001 f934 	bl	d5ed2 <_ZN3GpsC1EP11USARTSerial>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4c6a:	4b48      	ldr	r3, [pc, #288]	; (d4d8c <_GLOBAL__sub_I__gps+0x138>)
   d4c6c:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c6e:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4c70:	4b47      	ldr	r3, [pc, #284]	; (d4d90 <_GLOBAL__sub_I__gps+0x13c>)
   d4c72:	4a48      	ldr	r2, [pc, #288]	; (d4d94 <_GLOBAL__sub_I__gps+0x140>)
   d4c74:	601a      	str	r2, [r3, #0]
   d4c76:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c7a:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c7e:	ae02      	add	r6, sp, #8
   d4c80:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c84:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4c88:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4c8c:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4c90:	e882 0003 	stmia.w	r2, {r0, r1}
   d4c94:	4a40      	ldr	r2, [pc, #256]	; (d4d98 <_GLOBAL__sub_I__gps+0x144>)
   d4c96:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4c98:	699a      	ldr	r2, [r3, #24]
   d4c9a:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c9c:	4a3f      	ldr	r2, [pc, #252]	; (d4d9c <_GLOBAL__sub_I__gps+0x148>)
   d4c9e:	711c      	strb	r4, [r3, #4]
   d4ca0:	609c      	str	r4, [r3, #8]
   d4ca2:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4ca4:	f103 0008 	add.w	r0, r3, #8
   d4ca8:	4a3d      	ldr	r2, [pc, #244]	; (d4da0 <_GLOBAL__sub_I__gps+0x14c>)
      __a = _GLIBCXX_MOVE(__b);
   d4caa:	9406      	str	r4, [sp, #24]
   d4cac:	2101      	movs	r1, #1
   d4cae:	e9cd 4400 	strd	r4, r4, [sp]
   d4cb2:	f003 f80d 	bl	d7cd0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d4cb6:	4628      	mov	r0, r5
   d4cb8:	f7ff faf4 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
OledWingAdafruit display;
   d4cbc:	2107      	movs	r1, #7
   d4cbe:	4839      	ldr	r0, [pc, #228]	; (d4da4 <_GLOBAL__sub_I__gps+0x150>)
   d4cc0:	f002 ff96 	bl	d7bf0 <_ZN16OledWingAdafruitC1Ei>
    static String deviceID(void) { return spark_deviceID(); }
   d4cc4:	4938      	ldr	r1, [pc, #224]	; (d4da8 <_GLOBAL__sub_I__gps+0x154>)
   d4cc6:	4608      	mov	r0, r1
   d4cc8:	f003 fa50 	bl	d816c <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
   d4ccc:	4936      	ldr	r1, [pc, #216]	; (d4da8 <_GLOBAL__sub_I__gps+0x154>)
   d4cce:	4628      	mov	r0, r5
   d4cd0:	f004 fc53 	bl	d957a <_ZN6StringC1ERKS_>
String datafile_name = String(myID+"-"+Time.year()+Time.month()+Time.day()+Time.hour()+Time.minute()+".csv");
   d4cd4:	4935      	ldr	r1, [pc, #212]	; (d4dac <_GLOBAL__sub_I__gps+0x158>)
   d4cd6:	4628      	mov	r0, r5
   d4cd8:	f004 fcfc 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d4cdc:	4606      	mov	r6, r0
   d4cde:	f004 ff75 	bl	d9bcc <_ZN9TimeClass4yearEv>
   d4ce2:	4601      	mov	r1, r0
   d4ce4:	4630      	mov	r0, r6
   d4ce6:	f004 fd0a 	bl	d96fe <_ZplRK15StringSumHelperi>
   d4cea:	4606      	mov	r6, r0
   d4cec:	f004 ff66 	bl	d9bbc <_ZN9TimeClass5monthEv>
   d4cf0:	4601      	mov	r1, r0
   d4cf2:	4630      	mov	r0, r6
   d4cf4:	f004 fd03 	bl	d96fe <_ZplRK15StringSumHelperi>
   d4cf8:	4606      	mov	r6, r0
   d4cfa:	f004 ff53 	bl	d9ba4 <_ZN9TimeClass3dayEv>
   d4cfe:	4601      	mov	r1, r0
   d4d00:	4630      	mov	r0, r6
   d4d02:	f004 fcfc 	bl	d96fe <_ZplRK15StringSumHelperi>
   d4d06:	4606      	mov	r6, r0
   d4d08:	f004 ff34 	bl	d9b74 <_ZN9TimeClass4hourEv>
   d4d0c:	4601      	mov	r1, r0
   d4d0e:	4630      	mov	r0, r6
   d4d10:	f004 fcf5 	bl	d96fe <_ZplRK15StringSumHelperi>
   d4d14:	4606      	mov	r6, r0
   d4d16:	f004 ff39 	bl	d9b8c <_ZN9TimeClass6minuteEv>
   d4d1a:	4601      	mov	r1, r0
   d4d1c:	4630      	mov	r0, r6
   d4d1e:	f004 fcee 	bl	d96fe <_ZplRK15StringSumHelperi>
   d4d22:	4923      	ldr	r1, [pc, #140]	; (d4db0 <_GLOBAL__sub_I__gps+0x15c>)
   d4d24:	f004 fcd6 	bl	d96d4 <_ZplRK15StringSumHelperPKc>
   d4d28:	4601      	mov	r1, r0
   d4d2a:	4822      	ldr	r0, [pc, #136]	; (d4db4 <_GLOBAL__sub_I__gps+0x160>)
   d4d2c:	f004 fc25 	bl	d957a <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d4d30:	4628      	mov	r0, r5
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4d32:	4d21      	ldr	r5, [pc, #132]	; (d4db8 <_GLOBAL__sub_I__gps+0x164>)
   d4d34:	f004 fb96 	bl	d9464 <_ZN6StringD1Ev>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4d38:	2364      	movs	r3, #100	; 0x64
   d4d3a:	f885 3460 	strb.w	r3, [r5, #1120]	; 0x460
  {
   d4d3e:	4b1f      	ldr	r3, [pc, #124]	; (d4dbc <_GLOBAL__sub_I__gps+0x168>)
   d4d40:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   d4d44:	2301      	movs	r3, #1
   d4d46:	f885 3474 	strb.w	r3, [r5, #1140]	; 0x474
   d4d4a:	71ec      	strb	r4, [r5, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4d4c:	f8a5 443c 	strh.w	r4, [r5, #1084]	; 0x43c
   d4d50:	f885 446a 	strb.w	r4, [r5, #1130]	; 0x46a
   d4d54:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   d4d58:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   d4d5c:	f7ff fb42 	bl	d43e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4d60:	4a17      	ldr	r2, [pc, #92]	; (d4dc0 <_GLOBAL__sub_I__gps+0x16c>)
  File() {}
   d4d62:	4918      	ldr	r1, [pc, #96]	; (d4dc4 <_GLOBAL__sub_I__gps+0x170>)
   d4d64:	6011      	str	r1, [r2, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d6a:	6093      	str	r3, [r2, #8]
   d4d6c:	8214      	strh	r4, [r2, #16]
    Print() : write_error(0) {}
   d4d6e:	6054      	str	r4, [r2, #4]
int pub_time_milli = pub_time * 1000;
   d4d70:	4a15      	ldr	r2, [pc, #84]	; (d4dc8 <_GLOBAL__sub_I__gps+0x174>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4d72:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
   d4d76:	6812      	ldr	r2, [r2, #0]
   d4d78:	4353      	muls	r3, r2
   d4d7a:	4a14      	ldr	r2, [pc, #80]	; (d4dcc <_GLOBAL__sub_I__gps+0x178>)
   d4d7c:	6013      	str	r3, [r2, #0]
 }
   d4d7e:	b008      	add	sp, #32
   d4d80:	bd70      	pop	{r4, r5, r6, pc}
   d4d82:	bf00      	nop
   d4d84:	2003decc 	.word	0x2003decc
   d4d88:	2003ded0 	.word	0x2003ded0
   d4d8c:	000d417d 	.word	0x000d417d
   d4d90:	2003dfcc 	.word	0x2003dfcc
   d4d94:	000dd160 	.word	0x000dd160
   d4d98:	000d4149 	.word	0x000d4149
   d4d9c:	000d4145 	.word	0x000d4145
   d4da0:	000d419b 	.word	0x000d419b
   d4da4:	2003dffc 	.word	0x2003dffc
   d4da8:	2003e0a4 	.word	0x2003e0a4
   d4dac:	000dd13a 	.word	0x000dd13a
   d4db0:	000dd13c 	.word	0x000dd13c
   d4db4:	2003dfec 	.word	0x2003dfec
   d4db8:	2003e0b8 	.word	0x2003e0b8
   d4dbc:	000dd14c 	.word	0x000dd14c
   d4dc0:	2003e070 	.word	0x2003e070
   d4dc4:	000dd174 	.word	0x000dd174
   d4dc8:	2003dcdc 	.word	0x2003dcdc
   d4dcc:	2003e0b4 	.word	0x2003e0b4

000d4dd0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4dd4:	b085      	sub	sp, #20
   d4dd6:	461f      	mov	r7, r3
   d4dd8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4ddc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4de0:	eba8 0902 	sub.w	r9, r8, r2
   d4de4:	eba7 0a01 	sub.w	sl, r7, r1
   d4de8:	f1b9 0f00 	cmp.w	r9, #0
   d4dec:	bfb8      	it	lt
   d4dee:	f1c9 0900 	rsblt	r9, r9, #0
   d4df2:	f1ba 0f00 	cmp.w	sl, #0
   d4df6:	bfb8      	it	lt
   d4df8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4dfc:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4dfe:	4683      	mov	fp, r0
   d4e00:	460c      	mov	r4, r1
   d4e02:	4615      	mov	r5, r2
    if (steep) {
   d4e04:	dd04      	ble.n	d4e10 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4e06:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4e08:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4e0a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4e0c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4e0e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4e10:	42bc      	cmp	r4, r7
   d4e12:	dd05      	ble.n	d4e20 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4e14:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4e16:	4645      	mov	r5, r8
   d4e18:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4e1a:	4622      	mov	r2, r4
   d4e1c:	463c      	mov	r4, r7
   d4e1e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4e20:	1b3e      	subs	r6, r7, r4
   d4e22:	b2b2      	uxth	r2, r6
   d4e24:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4e26:	eba8 0205 	sub.w	r2, r8, r5
   d4e2a:	2a00      	cmp	r2, #0
   d4e2c:	bfb8      	it	lt
   d4e2e:	4252      	neglt	r2, r2
   d4e30:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4e32:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4e36:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4e3a:	4545      	cmp	r5, r8
   d4e3c:	bfb4      	ite	lt
   d4e3e:	2201      	movlt	r2, #1
   d4e40:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    int16_t err = dx / 2;
   d4e44:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4e46:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4e48:	42bc      	cmp	r4, r7
   d4e4a:	dc1c      	bgt.n	d4e86 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4e4c:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4e50:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4e52:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4e54:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4e58:	bfc7      	ittee	gt
   d4e5a:	4629      	movgt	r1, r5
   d4e5c:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4e5e:	462a      	movle	r2, r5
   d4e60:	4621      	movle	r1, r4
   d4e62:	4658      	mov	r0, fp
   d4e64:	47c0      	blx	r8
        }
        err -= dy;
   d4e66:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4e68:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4e6a:	1ab6      	subs	r6, r6, r2
   d4e6c:	b2b1      	uxth	r1, r6
   d4e6e:	b236      	sxth	r6, r6
        if (err < 0) {
   d4e70:	2e00      	cmp	r6, #0
   d4e72:	da05      	bge.n	d4e80 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4e74:	9a02      	ldr	r2, [sp, #8]
   d4e76:	4415      	add	r5, r2
            err += dx;
   d4e78:	9a00      	ldr	r2, [sp, #0]
   d4e7a:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4e7c:	b22d      	sxth	r5, r5
            err += dx;
   d4e7e:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4e80:	3401      	adds	r4, #1
   d4e82:	b224      	sxth	r4, r4
   d4e84:	e7e0      	b.n	d4e48 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4e86:	b005      	add	sp, #20
   d4e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4e8c <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4e8c:	4770      	bx	lr

000d4e8e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4e8e:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4e90:	6804      	ldr	r4, [r0, #0]
   d4e92:	6924      	ldr	r4, [r4, #16]
   d4e94:	46a4      	mov	ip, r4
}
   d4e96:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4e9a:	4760      	bx	ip

000d4e9c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4e9c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4e9e:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4ea0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4ea4:	9502      	str	r5, [sp, #8]
   d4ea6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4ea8:	46a4      	mov	ip, r4
}
   d4eaa:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4eac:	4760      	bx	ip

000d4eae <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4eae:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4eb0:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4eb2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4eb6:	9502      	str	r5, [sp, #8]
   d4eb8:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4eba:	46a4      	mov	ip, r4
}
   d4ebc:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4ebe:	4760      	bx	ip

000d4ec0 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4ec0:	b470      	push	{r4, r5, r6}
   d4ec2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4ec6:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4eca:	6804      	ldr	r4, [r0, #0]
   d4ecc:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4ed0:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4ed2:	46a4      	mov	ip, r4
}
   d4ed4:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4ed6:	4760      	bx	ip

000d4ed8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4edc:	461c      	mov	r4, r3
    startWrite();
   d4ede:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4ee0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4ee4:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4ee6:	4605      	mov	r5, r0
   d4ee8:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4eea:	3c01      	subs	r4, #1
   d4eec:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4eee:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4ef0:	b224      	sxth	r4, r4
    startWrite();
   d4ef2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4ef4:	682b      	ldr	r3, [r5, #0]
   d4ef6:	f8cd 8004 	str.w	r8, [sp, #4]
   d4efa:	9400      	str	r4, [sp, #0]
   d4efc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4efe:	4628      	mov	r0, r5
   d4f00:	463b      	mov	r3, r7
   d4f02:	4632      	mov	r2, r6
   d4f04:	4639      	mov	r1, r7
   d4f06:	47a0      	blx	r4
    endWrite();
   d4f08:	682b      	ldr	r3, [r5, #0]
   d4f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f0c:	4628      	mov	r0, r5
}
   d4f0e:	b002      	add	sp, #8
   d4f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4f14:	4718      	bx	r3

000d4f16 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4f1a:	461d      	mov	r5, r3
    startWrite();
   d4f1c:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4f1e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4f22:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4f24:	4604      	mov	r4, r0
   d4f26:	4617      	mov	r7, r2
   d4f28:	460e      	mov	r6, r1
    startWrite();
   d4f2a:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4f2c:	e9cd 7800 	strd	r7, r8, [sp]
   d4f30:	6822      	ldr	r2, [r4, #0]
   d4f32:	1e6b      	subs	r3, r5, #1
   d4f34:	4433      	add	r3, r6
   d4f36:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4f38:	4620      	mov	r0, r4
   d4f3a:	b21b      	sxth	r3, r3
   d4f3c:	463a      	mov	r2, r7
   d4f3e:	4631      	mov	r1, r6
   d4f40:	47a8      	blx	r5
    endWrite();
   d4f42:	6823      	ldr	r3, [r4, #0]
   d4f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f46:	4620      	mov	r0, r4
}
   d4f48:	b002      	add	sp, #8
   d4f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4f4e:	4718      	bx	r3

000d4f50 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4f54:	461e      	mov	r6, r3
    startWrite();
   d4f56:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4f58:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4f5c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4f5e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4f62:	460c      	mov	r4, r1
   d4f64:	4605      	mov	r5, r0
   d4f66:	4617      	mov	r7, r2
    startWrite();
   d4f68:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4f6a:	4426      	add	r6, r4
   d4f6c:	42b4      	cmp	r4, r6
   d4f6e:	682b      	ldr	r3, [r5, #0]
   d4f70:	da0b      	bge.n	d4f8a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4f72:	f8cd 8000 	str.w	r8, [sp]
   d4f76:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4f7a:	4621      	mov	r1, r4
   d4f7c:	464b      	mov	r3, r9
   d4f7e:	463a      	mov	r2, r7
   d4f80:	4628      	mov	r0, r5
   d4f82:	3401      	adds	r4, #1
   d4f84:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4f86:	b224      	sxth	r4, r4
   d4f88:	e7f0      	b.n	d4f6c <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f8c:	4628      	mov	r0, r5
}
   d4f8e:	b002      	add	sp, #8
   d4f90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4f94:	4718      	bx	r3

000d4f96 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4f96:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4f98:	6802      	ldr	r2, [r0, #0]
   d4f9a:	9101      	str	r1, [sp, #4]
   d4f9c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4fa0:	9100      	str	r1, [sp, #0]
   d4fa2:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4fa4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4fa8:	2200      	movs	r2, #0
   d4faa:	4611      	mov	r1, r2
   d4fac:	47a0      	blx	r4
}
   d4fae:	b002      	add	sp, #8
   d4fb0:	bd10      	pop	{r4, pc}

000d4fb2 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4fb2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4fb6:	461d      	mov	r5, r3
    startWrite();
   d4fb8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4fba:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4fbe:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4fc0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4fc4:	4604      	mov	r4, r0
   d4fc6:	460f      	mov	r7, r1
   d4fc8:	4616      	mov	r6, r2
    startWrite();
   d4fca:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4fcc:	6823      	ldr	r3, [r4, #0]
   d4fce:	f8cd 8000 	str.w	r8, [sp]
   d4fd2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4fd6:	4632      	mov	r2, r6
   d4fd8:	462b      	mov	r3, r5
   d4fda:	4639      	mov	r1, r7
   d4fdc:	4620      	mov	r0, r4
   d4fde:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4fe0:	6823      	ldr	r3, [r4, #0]
   d4fe2:	f8cd 8000 	str.w	r8, [sp]
   d4fe6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d4fea:	4432      	add	r2, r6
   d4fec:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4ff0:	4639      	mov	r1, r7
   d4ff2:	462b      	mov	r3, r5
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	b212      	sxth	r2, r2
   d4ff8:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4ffa:	6823      	ldr	r3, [r4, #0]
   d4ffc:	f8cd 8000 	str.w	r8, [sp]
   d5000:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5004:	4632      	mov	r2, r6
   d5006:	464b      	mov	r3, r9
   d5008:	4639      	mov	r1, r7
   d500a:	4620      	mov	r0, r4
   d500c:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d500e:	1e6b      	subs	r3, r5, #1
   d5010:	19d9      	adds	r1, r3, r7
   d5012:	6823      	ldr	r3, [r4, #0]
   d5014:	f8cd 8000 	str.w	r8, [sp]
   d5018:	6a1d      	ldr	r5, [r3, #32]
   d501a:	4620      	mov	r0, r4
   d501c:	464b      	mov	r3, r9
   d501e:	4632      	mov	r2, r6
   d5020:	b209      	sxth	r1, r1
   d5022:	47a8      	blx	r5
    endWrite();
   d5024:	6823      	ldr	r3, [r4, #0]
   d5026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5028:	4620      	mov	r0, r4
}
   d502a:	b002      	add	sp, #8
   d502c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5030:	4718      	bx	r3

000d5032 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d5032:	4770      	bx	lr

000d5034 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d5034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5038:	4299      	cmp	r1, r3
        uint16_t color) {
   d503a:	4616      	mov	r6, r2
   d503c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d5040:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5044:	6802      	ldr	r2, [r0, #0]
   d5046:	4680      	mov	r8, r0
   d5048:	460d      	mov	r5, r1
   d504a:	461c      	mov	r4, r3
    if(x0 == x1){
   d504c:	d113      	bne.n	d5076 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d504e:	42be      	cmp	r6, r7
   d5050:	bfc8      	it	gt
   d5052:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5054:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d5058:	bfc4      	itt	gt
   d505a:	463e      	movgt	r6, r7
   d505c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d505e:	1c7b      	adds	r3, r7, #1
   d5060:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d5062:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5064:	b21b      	sxth	r3, r3
   d5066:	4632      	mov	r2, r6
   d5068:	4629      	mov	r1, r5
   d506a:	4640      	mov	r0, r8
   d506c:	46a4      	mov	ip, r4
}
   d506e:	b003      	add	sp, #12
   d5070:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5074:	4760      	bx	ip
    } else if(y0 == y1){
   d5076:	42be      	cmp	r6, r7
   d5078:	d10a      	bne.n	d5090 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d507a:	4299      	cmp	r1, r3
   d507c:	bfc2      	ittt	gt
   d507e:	460b      	movgt	r3, r1
   d5080:	4625      	movgt	r5, r4
   d5082:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5084:	1c63      	adds	r3, r4, #1
   d5086:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d508a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d508c:	1b5b      	subs	r3, r3, r5
   d508e:	e7e9      	b.n	d5064 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5090:	6953      	ldr	r3, [r2, #20]
   d5092:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5094:	e9cd 7900 	strd	r7, r9, [sp]
   d5098:	f8d8 3000 	ldr.w	r3, [r8]
   d509c:	4640      	mov	r0, r8
   d509e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d50a0:	4632      	mov	r2, r6
   d50a2:	4623      	mov	r3, r4
   d50a4:	4629      	mov	r1, r5
   d50a6:	47b8      	blx	r7
        endWrite();
   d50a8:	f8d8 3000 	ldr.w	r3, [r8]
   d50ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50ae:	4640      	mov	r0, r8
}
   d50b0:	b003      	add	sp, #12
   d50b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d50b6:	4718      	bx	r3

000d50b8 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d50b8:	f001 0303 	and.w	r3, r1, #3
   d50bc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d50c0:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d50c2:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d50c4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d50c8:	bf59      	ittee	pl
   d50ca:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d50cc:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d50ce:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d50d0:	81c3      	strhmi	r3, [r0, #14]
}
   d50d2:	4770      	bx	lr

000d50d4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d50d4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d50d6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d50d8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d50da:	4a07      	ldr	r2, [pc, #28]	; (d50f8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d50dc:	4d07      	ldr	r5, [pc, #28]	; (d50fc <_ZN12Adafruit_GFXC1Ess+0x28>)
   d50de:	8101      	strh	r1, [r0, #8]
   d50e0:	2400      	movs	r4, #0
    _width    = WIDTH;
   d50e2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d50e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d50e8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d50ec:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d50ee:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d50f0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d50f2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d50f4:	6204      	str	r4, [r0, #32]
}
   d50f6:	bd30      	pop	{r4, r5, pc}
   d50f8:	01000101 	.word	0x01000101
   d50fc:	000dd69c 	.word	0x000dd69c

000d5100 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5104:	b089      	sub	sp, #36	; 0x24
   d5106:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d510a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d510c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d5110:	9304      	str	r3, [sp, #16]
   d5112:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d5116:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5118:	9305      	str	r3, [sp, #20]
   d511a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d511e:	4604      	mov	r4, r0
    startWrite();
   d5120:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5122:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d5126:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d512a:	bf48      	it	mi
   d512c:	f108 020e 	addmi.w	r2, r8, #14
   d5130:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d5134:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d5136:	4635      	mov	r5, r6
   d5138:	9b03      	ldr	r3, [sp, #12]
   d513a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d513c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d5140:	189a      	adds	r2, r3, r2
   d5142:	9b05      	ldr	r3, [sp, #20]
   d5144:	428b      	cmp	r3, r1
   d5146:	b212      	sxth	r2, r2
   d5148:	dd27      	ble.n	d519a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d514a:	9b04      	ldr	r3, [sp, #16]
   d514c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d514e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5152:	9306      	str	r3, [sp, #24]
   d5154:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d5158:	4580      	cmp	r8, r0
   d515a:	fa1f f189 	uxth.w	r1, r9
   d515e:	dd17      	ble.n	d5190 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5160:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5162:	bf05      	ittet	eq
   d5164:	9b06      	ldreq	r3, [sp, #24]
   d5166:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5168:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d516a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d516c:	bf18      	it	ne
   d516e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5170:	062b      	lsls	r3, r5, #24
   d5172:	d50a      	bpl.n	d518a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d5174:	9b02      	ldr	r3, [sp, #8]
   d5176:	6820      	ldr	r0, [r4, #0]
   d5178:	9207      	str	r2, [sp, #28]
   d517a:	4419      	add	r1, r3
   d517c:	6983      	ldr	r3, [r0, #24]
   d517e:	b209      	sxth	r1, r1
   d5180:	461f      	mov	r7, r3
   d5182:	4620      	mov	r0, r4
   d5184:	4653      	mov	r3, sl
   d5186:	47b8      	blx	r7
   d5188:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d518a:	f109 0901 	add.w	r9, r9, #1
   d518e:	e7e1      	b.n	d5154 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5190:	9b01      	ldr	r3, [sp, #4]
   d5192:	3301      	adds	r3, #1
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	445e      	add	r6, fp
   d5198:	e7ce      	b.n	d5138 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d519a:	6823      	ldr	r3, [r4, #0]
   d519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d519e:	4620      	mov	r0, r4
}
   d51a0:	b009      	add	sp, #36	; 0x24
   d51a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d51a6:	4718      	bx	r3

000d51a8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d51a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51ac:	ed2d 8b02 	vpush	{d8}
   d51b0:	b091      	sub	sp, #68	; 0x44
   d51b2:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d51b4:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d51b6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d51ba:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d51be:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d51c2:	9103      	str	r1, [sp, #12]
   d51c4:	461f      	mov	r7, r3
   d51c6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d51ca:	9304      	str	r3, [sp, #16]
   d51cc:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d51ce:	2a00      	cmp	r2, #0
   d51d0:	f040 80c5 	bne.w	d535e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d51d4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d51d8:	428b      	cmp	r3, r1
   d51da:	f340 814c 	ble.w	d5476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d51de:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d51e2:	42b3      	cmp	r3, r6
   d51e4:	f340 8147 	ble.w	d5476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d51e8:	2306      	movs	r3, #6
   d51ea:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d51ee:	2b00      	cmp	r3, #0
   d51f0:	f340 8141 	ble.w	d5476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d51f4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d51f8:	2b00      	cmp	r3, #0
   d51fa:	f340 813c 	ble.w	d5476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d51fe:	7f03      	ldrb	r3, [r0, #28]
   d5200:	b91b      	cbnz	r3, d520a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d5202:	2faf      	cmp	r7, #175	; 0xaf
   d5204:	bf84      	itt	hi
   d5206:	3701      	addhi	r7, #1
   d5208:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d520a:	f8db 3000 	ldr.w	r3, [fp]
   d520e:	4658      	mov	r0, fp
   d5210:	695b      	ldr	r3, [r3, #20]
   d5212:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5214:	2205      	movs	r2, #5
   d5216:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5218:	2200      	movs	r2, #0
   d521a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d521c:	4a98      	ldr	r2, [pc, #608]	; (d5480 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d521e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d5222:	18d3      	adds	r3, r2, r3
   d5224:	930c      	str	r3, [sp, #48]	; 0x30
   d5226:	b2b3      	uxth	r3, r6
   d5228:	9306      	str	r3, [sp, #24]
   d522a:	9a05      	ldr	r2, [sp, #20]
   d522c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d522e:	5c9b      	ldrb	r3, [r3, r2]
   d5230:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5232:	b2ab      	uxth	r3, r5
   d5234:	930b      	str	r3, [sp, #44]	; 0x2c
   d5236:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d523a:	9308      	str	r3, [sp, #32]
   d523c:	9b03      	ldr	r3, [sp, #12]
   d523e:	fb02 f905 	mul.w	r9, r2, r5
   d5242:	fa19 f983 	uxtah	r9, r9, r3
   d5246:	fa0f f389 	sxth.w	r3, r9
   d524a:	ee08 3a10 	vmov	s16, r3
   d524e:	2308      	movs	r3, #8
   d5250:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d5252:	9b03      	ldr	r3, [sp, #12]
   d5254:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5258:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d525c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d5260:	9a07      	ldr	r2, [sp, #28]
   d5262:	f8db 3000 	ldr.w	r3, [fp]
   d5266:	07d2      	lsls	r2, r2, #31
   d5268:	d552      	bpl.n	d5310 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d526a:	2d01      	cmp	r5, #1
   d526c:	fa1f f289 	uxth.w	r2, r9
   d5270:	d13e      	bne.n	d52f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d5272:	2c01      	cmp	r4, #1
   d5274:	d13c      	bne.n	d52f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d5276:	699b      	ldr	r3, [r3, #24]
   d5278:	9906      	ldr	r1, [sp, #24]
   d527a:	461f      	mov	r7, r3
   d527c:	9b04      	ldr	r3, [sp, #16]
   d527e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d5280:	b212      	sxth	r2, r2
   d5282:	4651      	mov	r1, sl
   d5284:	4658      	mov	r0, fp
   d5286:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5288:	f109 0301 	add.w	r3, r9, #1
   d528c:	fa4f f983 	sxtb.w	r9, r3
   d5290:	9b07      	ldr	r3, [sp, #28]
   d5292:	085b      	lsrs	r3, r3, #1
   d5294:	9307      	str	r3, [sp, #28]
   d5296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5298:	3b01      	subs	r3, #1
   d529a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d529e:	930a      	str	r3, [sp, #40]	; 0x28
   d52a0:	d1de      	bne.n	d5260 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d52a2:	9f05      	ldr	r7, [sp, #20]
   d52a4:	3701      	adds	r7, #1
   d52a6:	b27b      	sxtb	r3, r7
   d52a8:	9305      	str	r3, [sp, #20]
   d52aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d52ac:	3b01      	subs	r3, #1
   d52ae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d52b2:	9309      	str	r3, [sp, #36]	; 0x24
   d52b4:	d1b9      	bne.n	d522a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d52b6:	9b04      	ldr	r3, [sp, #16]
   d52b8:	4543      	cmp	r3, r8
   d52ba:	d00f      	beq.n	d52dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d52bc:	2d01      	cmp	r5, #1
   d52be:	f8db 3000 	ldr.w	r3, [fp]
   d52c2:	d13b      	bne.n	d533c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d52c4:	2c01      	cmp	r4, #1
   d52c6:	d139      	bne.n	d533c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d52c8:	9908      	ldr	r1, [sp, #32]
   d52ca:	f8cd 8000 	str.w	r8, [sp]
   d52ce:	3105      	adds	r1, #5
   d52d0:	6a1c      	ldr	r4, [r3, #32]
   d52d2:	4632      	mov	r2, r6
   d52d4:	2308      	movs	r3, #8
   d52d6:	b209      	sxth	r1, r1
   d52d8:	4658      	mov	r0, fp
   d52da:	47a0      	blx	r4
        endWrite();
   d52dc:	f8db 3000 	ldr.w	r3, [fp]
   d52e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52e2:	4658      	mov	r0, fp
}
   d52e4:	b011      	add	sp, #68	; 0x44
   d52e6:	ecbd 8b02 	vpop	{d8}
   d52ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d52ee:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d52f0:	9906      	ldr	r1, [sp, #24]
   d52f2:	fb14 f202 	smulbb	r2, r4, r2
   d52f6:	440a      	add	r2, r1
   d52f8:	9904      	ldr	r1, [sp, #16]
   d52fa:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d52fc:	9400      	str	r4, [sp, #0]
   d52fe:	69db      	ldr	r3, [r3, #28]
   d5300:	ee18 1a10 	vmov	r1, s16
   d5304:	461f      	mov	r7, r3
   d5306:	b212      	sxth	r2, r2
   d5308:	462b      	mov	r3, r5
   d530a:	4658      	mov	r0, fp
   d530c:	47b8      	blx	r7
   d530e:	e7bb      	b.n	d5288 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d5310:	9a04      	ldr	r2, [sp, #16]
   d5312:	4542      	cmp	r2, r8
   d5314:	d0b8      	beq.n	d5288 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d5316:	2d01      	cmp	r5, #1
   d5318:	fa1f f289 	uxth.w	r2, r9
   d531c:	d107      	bne.n	d532e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d531e:	2c01      	cmp	r4, #1
   d5320:	d105      	bne.n	d532e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d5322:	699b      	ldr	r3, [r3, #24]
   d5324:	9906      	ldr	r1, [sp, #24]
   d5326:	461f      	mov	r7, r3
   d5328:	440a      	add	r2, r1
   d532a:	4643      	mov	r3, r8
   d532c:	e7a8      	b.n	d5280 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d532e:	9906      	ldr	r1, [sp, #24]
   d5330:	f8cd 8004 	str.w	r8, [sp, #4]
   d5334:	fb14 f202 	smulbb	r2, r4, r2
   d5338:	440a      	add	r2, r1
   d533a:	e7df      	b.n	d52fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d533c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d533e:	f8cd 8004 	str.w	r8, [sp, #4]
   d5342:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d5346:	9a08      	ldr	r2, [sp, #32]
   d5348:	00e4      	lsls	r4, r4, #3
   d534a:	440a      	add	r2, r1
   d534c:	4611      	mov	r1, r2
   d534e:	9400      	str	r4, [sp, #0]
   d5350:	69dc      	ldr	r4, [r3, #28]
   d5352:	4632      	mov	r2, r6
   d5354:	462b      	mov	r3, r5
   d5356:	b209      	sxth	r1, r1
   d5358:	4658      	mov	r0, fp
   d535a:	47a0      	blx	r4
        endWrite();
   d535c:	e7be      	b.n	d52dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d535e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d5360:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d5362:	6812      	ldr	r2, [r2, #0]
   d5364:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5366:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d5368:	b2ff      	uxtb	r7, r7
   d536a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d536e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d5372:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5374:	789a      	ldrb	r2, [r3, #2]
   d5376:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d5378:	78da      	ldrb	r2, [r3, #3]
   d537a:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d537c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d537e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d5382:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5386:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d5388:	d801      	bhi.n	d538e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d538a:	2c01      	cmp	r4, #1
   d538c:	d957      	bls.n	d543e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d538e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d5392:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d5394:	fa0f f38a 	sxth.w	r3, sl
   d5398:	9307      	str	r3, [sp, #28]
        startWrite();
   d539a:	f8db 3000 	ldr.w	r3, [fp]
   d539e:	4658      	mov	r0, fp
   d53a0:	695b      	ldr	r3, [r3, #20]
   d53a2:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53a4:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d53a6:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53aa:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53ac:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d53b0:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d53b2:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53b4:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d53b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d53b8:	429f      	cmp	r7, r3
   d53ba:	d28f      	bcs.n	d52dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53bc:	9b07      	ldr	r3, [sp, #28]
   d53be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d53c0:	443b      	add	r3, r7
   d53c2:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d53c6:	2200      	movs	r2, #0
   d53c8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53cc:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53ce:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53d2:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53d6:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d53da:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d53dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d53de:	9905      	ldr	r1, [sp, #20]
   d53e0:	4291      	cmp	r1, r2
   d53e2:	d241      	bcs.n	d5468 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d53e4:	1c5a      	adds	r2, r3, #1
   d53e6:	b2d2      	uxtb	r2, r2
   d53e8:	075b      	lsls	r3, r3, #29
   d53ea:	920c      	str	r2, [sp, #48]	; 0x30
   d53ec:	d107      	bne.n	d53fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d53ee:	9b06      	ldr	r3, [sp, #24]
   d53f0:	9906      	ldr	r1, [sp, #24]
   d53f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d53f4:	3301      	adds	r3, #1
   d53f6:	b29b      	uxth	r3, r3
   d53f8:	f812 9001 	ldrb.w	r9, [r2, r1]
   d53fc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d53fe:	f019 0f80 	tst.w	r9, #128	; 0x80
   d5402:	d012      	beq.n	d542a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d5404:	2d01      	cmp	r5, #1
   d5406:	f8db 3000 	ldr.w	r3, [fp]
   d540a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d540e:	d11a      	bne.n	d5446 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d5410:	2c01      	cmp	r4, #1
   d5412:	d118      	bne.n	d5446 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d5416:	699b      	ldr	r3, [r3, #24]
   d5418:	4411      	add	r1, r2
   d541a:	9a05      	ldr	r2, [sp, #20]
   d541c:	4411      	add	r1, r2
   d541e:	461e      	mov	r6, r3
   d5420:	4652      	mov	r2, sl
   d5422:	9b04      	ldr	r3, [sp, #16]
   d5424:	b209      	sxth	r1, r1
   d5426:	4658      	mov	r0, fp
   d5428:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d542a:	9e05      	ldr	r6, [sp, #20]
   d542c:	3601      	adds	r6, #1
   d542e:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d5430:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d5434:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d5436:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d543a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d543c:	e7ce      	b.n	d53dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d543e:	2300      	movs	r3, #0
   d5440:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d5444:	e7a9      	b.n	d539a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5446:	9805      	ldr	r0, [sp, #20]
   d5448:	9a08      	ldr	r2, [sp, #32]
   d544a:	4402      	add	r2, r0
   d544c:	fb02 1105 	mla	r1, r2, r5, r1
   d5450:	9a04      	ldr	r2, [sp, #16]
   d5452:	e9cd 4200 	strd	r4, r2, [sp]
   d5456:	69db      	ldr	r3, [r3, #28]
   d5458:	ee18 2a10 	vmov	r2, s16
   d545c:	461e      	mov	r6, r3
   d545e:	b209      	sxth	r1, r1
   d5460:	462b      	mov	r3, r5
   d5462:	4658      	mov	r0, fp
   d5464:	47b0      	blx	r6
   d5466:	e7e0      	b.n	d542a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d5468:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d546a:	3701      	adds	r7, #1
   d546c:	4498      	add	r8, r3
   d546e:	fa5f f888 	uxtb.w	r8, r8
   d5472:	b2ff      	uxtb	r7, r7
   d5474:	e79f      	b.n	d53b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d5476:	b011      	add	sp, #68	; 0x44
   d5478:	ecbd 8b02 	vpop	{d8}
   d547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5480:	000dd194 	.word	0x000dd194

000d5484 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5484:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5486:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d5488:	b085      	sub	sp, #20
   d548a:	4604      	mov	r4, r0
   d548c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d548e:	2a00      	cmp	r2, #0
   d5490:	d134      	bne.n	d54fc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d5492:	290a      	cmp	r1, #10
   d5494:	d108      	bne.n	d54a8 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d5496:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5498:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d549a:	7e42      	ldrb	r2, [r0, #25]
   d549c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d54a0:	8263      	strh	r3, [r4, #18]
}
   d54a2:	2001      	movs	r0, #1
   d54a4:	b005      	add	sp, #20
   d54a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d54a8:	290d      	cmp	r1, #13
   d54aa:	d0fa      	beq.n	d54a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d54ac:	7ee1      	ldrb	r1, [r4, #27]
   d54ae:	7e00      	ldrb	r0, [r0, #24]
   d54b0:	7e65      	ldrb	r5, [r4, #25]
   d54b2:	b171      	cbz	r1, d54d2 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d54b4:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d54b8:	2106      	movs	r1, #6
   d54ba:	fb11 6100 	smlabb	r1, r1, r0, r6
   d54be:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d54c2:	42b1      	cmp	r1, r6
   d54c4:	bfc1      	itttt	gt
   d54c6:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d54ca:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d54cc:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d54d0:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d54d2:	8ae2      	ldrh	r2, [r4, #22]
   d54d4:	9201      	str	r2, [sp, #4]
   d54d6:	8aa2      	ldrh	r2, [r4, #20]
   d54d8:	9200      	str	r2, [sp, #0]
   d54da:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d54de:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d54e2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d54e6:	4620      	mov	r0, r4
   d54e8:	f7ff fe5e 	bl	d51a8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d54ec:	7e23      	ldrb	r3, [r4, #24]
   d54ee:	8a22      	ldrh	r2, [r4, #16]
   d54f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d54f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d54f8:	8223      	strh	r3, [r4, #16]
   d54fa:	e7d2      	b.n	d54a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d54fc:	290a      	cmp	r1, #10
   d54fe:	d107      	bne.n	d5510 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d5500:	2300      	movs	r3, #0
   d5502:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5504:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d5506:	7e41      	ldrb	r1, [r0, #25]
   d5508:	8a42      	ldrh	r2, [r0, #18]
   d550a:	fb01 2303 	mla	r3, r1, r3, r2
   d550e:	e7c7      	b.n	d54a0 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d5510:	290d      	cmp	r1, #13
   d5512:	d0c6      	beq.n	d54a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5514:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5516:	42a9      	cmp	r1, r5
   d5518:	d3c3      	bcc.n	d54a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d551a:	7a51      	ldrb	r1, [r2, #9]
   d551c:	4299      	cmp	r1, r3
   d551e:	d3c0      	bcc.n	d54a2 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d5520:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d5522:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d5524:	b2ed      	uxtb	r5, r5
   d5526:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d552a:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d552c:	b32f      	cbz	r7, d557a <_ZN12Adafruit_GFX5writeEh+0xf6>
   d552e:	78e9      	ldrb	r1, [r5, #3]
   d5530:	b319      	cbz	r1, d557a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d5532:	7ee1      	ldrb	r1, [r4, #27]
   d5534:	7e00      	ldrb	r0, [r0, #24]
   d5536:	7e66      	ldrb	r6, [r4, #25]
   d5538:	b191      	cbz	r1, d5560 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d553a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d553e:	4439      	add	r1, r7
   d5540:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d5544:	fb00 7101 	mla	r1, r0, r1, r7
   d5548:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d554c:	42b9      	cmp	r1, r7
   d554e:	dd07      	ble.n	d5560 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d5550:	2700      	movs	r7, #0
   d5552:	8227      	strh	r7, [r4, #16]
   d5554:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5558:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d555a:	fb02 1206 	mla	r2, r2, r6, r1
   d555e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5560:	8ae2      	ldrh	r2, [r4, #22]
   d5562:	9201      	str	r2, [sp, #4]
   d5564:	8aa2      	ldrh	r2, [r4, #20]
   d5566:	9200      	str	r2, [sp, #0]
   d5568:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d556c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5570:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5574:	4620      	mov	r0, r4
   d5576:	f7ff fe17 	bl	d51a8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d557a:	7929      	ldrb	r1, [r5, #4]
   d557c:	7e23      	ldrb	r3, [r4, #24]
   d557e:	8a22      	ldrh	r2, [r4, #16]
   d5580:	fb01 2303 	mla	r3, r1, r3, r2
   d5584:	e7b8      	b.n	d54f8 <_ZN12Adafruit_GFX5writeEh+0x74>

000d5586 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d5586:	2901      	cmp	r1, #1
   d5588:	bf38      	it	cc
   d558a:	2101      	movcc	r1, #1
   d558c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d558e:	7641      	strb	r1, [r0, #25]
}
   d5590:	4770      	bx	lr
	...

000d5594 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5594:	b510      	push	{r4, lr}
   d5596:	4b04      	ldr	r3, [pc, #16]	; (d55a8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d5598:	6003      	str	r3, [r0, #0]
   d559a:	4604      	mov	r4, r0
  if(buffer) {
   d559c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d559e:	b108      	cbz	r0, d55a4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d55a0:	f002 fe6c 	bl	d827c <free>
    buffer = NULL;
  }
}
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}
   d55a8:	000ddb94 	.word	0x000ddb94

000d55ac <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d55ac:	b510      	push	{r4, lr}
   d55ae:	4604      	mov	r4, r0
}
   d55b0:	f7ff fff0 	bl	d5594 <_ZN16Adafruit_SSD1306D1Ev>
   d55b4:	4620      	mov	r0, r4
   d55b6:	2150      	movs	r1, #80	; 0x50
   d55b8:	f004 fdd0 	bl	da15c <_ZdlPvj>
   d55bc:	4620      	mov	r0, r4
   d55be:	bd10      	pop	{r4, pc}

000d55c0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d55c0:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d55c2:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d55c4:	db4b      	blt.n	d565e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d55c6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d55ca:	428c      	cmp	r4, r1
   d55cc:	dd47      	ble.n	d565e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d55ce:	2a00      	cmp	r2, #0
   d55d0:	db45      	blt.n	d565e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d55d2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d55d6:	4294      	cmp	r4, r2
   d55d8:	dd41      	ble.n	d565e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d55da:	7e84      	ldrb	r4, [r0, #26]
   d55dc:	2c02      	cmp	r4, #2
   d55de:	d01f      	beq.n	d5620 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d55e0:	2c03      	cmp	r4, #3
   d55e2:	d026      	beq.n	d5632 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d55e4:	2c01      	cmp	r4, #1
   d55e6:	d104      	bne.n	d55f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d55e8:	8904      	ldrh	r4, [r0, #8]
   d55ea:	43d2      	mvns	r2, r2
   d55ec:	4414      	add	r4, r2
      break;
   d55ee:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d55f0:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d55f2:	2b01      	cmp	r3, #1
   d55f4:	d023      	beq.n	d563e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d55f6:	2b02      	cmp	r3, #2
   d55f8:	d032      	beq.n	d5660 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d55fa:	bb83      	cbnz	r3, d565e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d55fc:	2a00      	cmp	r2, #0
   d55fe:	4613      	mov	r3, r2
   d5600:	8904      	ldrh	r4, [r0, #8]
   d5602:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5604:	bfb8      	it	lt
   d5606:	1dd3      	addlt	r3, r2, #7
   d5608:	10db      	asrs	r3, r3, #3
   d560a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d560e:	f002 0207 	and.w	r2, r2, #7
   d5612:	2301      	movs	r3, #1
   d5614:	4093      	lsls	r3, r2
   d5616:	5c42      	ldrb	r2, [r0, r1]
   d5618:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d561c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d561e:	e01e      	b.n	d565e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d5620:	8904      	ldrh	r4, [r0, #8]
   d5622:	43c9      	mvns	r1, r1
   d5624:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d5626:	8944      	ldrh	r4, [r0, #10]
   d5628:	43d2      	mvns	r2, r2
   d562a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d562c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d562e:	b212      	sxth	r2, r2
      break;
   d5630:	e7df      	b.n	d55f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d5632:	8944      	ldrh	r4, [r0, #10]
   d5634:	43c9      	mvns	r1, r1
   d5636:	440c      	add	r4, r1
      break;
   d5638:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d563a:	b222      	sxth	r2, r4
      break;
   d563c:	e7d9      	b.n	d55f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d563e:	2a00      	cmp	r2, #0
   d5640:	8904      	ldrh	r4, [r0, #8]
   d5642:	4613      	mov	r3, r2
   d5644:	bfb8      	it	lt
   d5646:	1dd3      	addlt	r3, r2, #7
   d5648:	10db      	asrs	r3, r3, #3
   d564a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d564e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5650:	f002 0007 	and.w	r0, r2, #7
   d5654:	2201      	movs	r2, #1
   d5656:	4082      	lsls	r2, r0
   d5658:	5c58      	ldrb	r0, [r3, r1]
   d565a:	4302      	orrs	r2, r0
   d565c:	545a      	strb	r2, [r3, r1]
}
   d565e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5660:	2a00      	cmp	r2, #0
   d5662:	4613      	mov	r3, r2
   d5664:	8904      	ldrh	r4, [r0, #8]
   d5666:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5668:	bfb8      	it	lt
   d566a:	1dd3      	addlt	r3, r2, #7
   d566c:	10db      	asrs	r3, r3, #3
   d566e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5672:	f002 0207 	and.w	r2, r2, #7
   d5676:	2301      	movs	r3, #1
   d5678:	fa03 f202 	lsl.w	r2, r3, r2
   d567c:	5c43      	ldrb	r3, [r0, r1]
   d567e:	405a      	eors	r2, r3
   d5680:	e7cc      	b.n	d561c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d5682 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5682:	b510      	push	{r4, lr}
   d5684:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d5686:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d568a:	2101      	movs	r1, #1
   d568c:	b280      	uxth	r0, r0
   d568e:	f004 fcfc 	bl	da08a <digitalWrite>
   d5692:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5694:	b118      	cbz	r0, d569e <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d5696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d569a:	f003 bde3 	b.w	d9264 <_ZN8SPIClass14endTransactionEv>
}
   d569e:	bd10      	pop	{r4, pc}

000d56a0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d56a0:	b570      	push	{r4, r5, r6, lr}
   d56a2:	4604      	mov	r4, r0
   d56a4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d56a6:	2600      	movs	r6, #0
   d56a8:	f7ff fd14 	bl	d50d4 <_ZN12Adafruit_GFXC1Ess>
   d56ac:	4b11      	ldr	r3, [pc, #68]	; (d56f4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d56ae:	6023      	str	r3, [r4, #0]
   d56b0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d56b2:	b915      	cbnz	r5, d56ba <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d56b4:	f004 fd2e 	bl	da114 <_Z19__fetch_global_Wirev>
   d56b8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d56ba:	23ff      	movs	r3, #255	; 0xff
   d56bc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d56c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d56c4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d56c8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   d56cc:	4b0a      	ldr	r3, [pc, #40]	; (d56f8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d56ce:	63a3      	str	r3, [r4, #56]	; 0x38
   d56d0:	2301      	movs	r3, #1
   d56d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d56d6:	9b05      	ldr	r3, [sp, #20]
   d56d8:	64a3      	str	r3, [r4, #72]	; 0x48
   d56da:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d56de:	9b06      	ldr	r3, [sp, #24]
   d56e0:	86a2      	strh	r2, [r4, #52]	; 0x34
   d56e2:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d56e6:	6426      	str	r6, [r4, #64]	; 0x40
   d56e8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d56ec:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d56ee:	4620      	mov	r0, r4
   d56f0:	bd70      	pop	{r4, r5, r6, pc}
   d56f2:	bf00      	nop
   d56f4:	000ddb94 	.word	0x000ddb94
   d56f8:	000dd14c 	.word	0x000dd14c

000d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d56fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56fe:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5700:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5702:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5704:	b190      	cbz	r0, d572c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d5706:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d570a:	f003 fa9d 	bl	d8c48 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d570e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5710:	6803      	ldr	r3, [r0, #0]
   d5712:	2100      	movs	r1, #0
   d5714:	689b      	ldr	r3, [r3, #8]
   d5716:	4798      	blx	r3
    WIRE_WRITE(c);
   d5718:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d571a:	6803      	ldr	r3, [r0, #0]
   d571c:	4629      	mov	r1, r5
   d571e:	689b      	ldr	r3, [r3, #8]
   d5720:	4798      	blx	r3
    wire->endTransmission();
   d5722:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d5724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d5728:	f003 ba95 	b.w	d8c56 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d572c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5730:	4601      	mov	r1, r0
   d5732:	b298      	uxth	r0, r3
   d5734:	f004 fca9 	bl	da08a <digitalWrite>
  if(spi) {
   d5738:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d573a:	b120      	cbz	r0, d5746 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d573c:	4629      	mov	r1, r5
}
   d573e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d5742:	f003 be17 	b.w	d9374 <_ZN8SPIClass8transferEh>
   d5746:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5748:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d574a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d574e:	ea05 0107 	and.w	r1, r5, r7
   d5752:	b280      	uxth	r0, r0
   d5754:	f004 fc99 	bl	da08a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5758:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d575c:	2101      	movs	r1, #1
   d575e:	b280      	uxth	r0, r0
   d5760:	f004 fc93 	bl	da08a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5764:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5768:	2100      	movs	r1, #0
   d576a:	b280      	uxth	r0, r0
   d576c:	f004 fc8d 	bl	da08a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5770:	3e01      	subs	r6, #1
   d5772:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d5776:	d1e8      	bne.n	d574a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d5778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d577a <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d577a:	b538      	push	{r3, r4, r5, lr}
   d577c:	4604      	mov	r4, r0
  TRANSACTION_START
   d577e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5780:	460d      	mov	r5, r1
  TRANSACTION_START
   d5782:	b180      	cbz	r0, d57a6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d5784:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5786:	f003 fa51 	bl	d8c2c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d578a:	2d00      	cmp	r5, #0
   d578c:	4620      	mov	r0, r4
   d578e:	bf14      	ite	ne
   d5790:	21a7      	movne	r1, #167	; 0xa7
   d5792:	21a6      	moveq	r1, #166	; 0xa6
   d5794:	f7ff ffb2 	bl	d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d5798:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d579a:	b188      	cbz	r0, d57c0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d579c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d579e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d57a2:	f003 ba43 	b.w	d8c2c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d57a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d57a8:	b118      	cbz	r0, d57b2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d57aa:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d57ae:	f003 fd73 	bl	d9298 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d57b2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d57b6:	2100      	movs	r1, #0
   d57b8:	b280      	uxth	r0, r0
   d57ba:	f004 fc66 	bl	da08a <digitalWrite>
   d57be:	e7e4      	b.n	d578a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d57c0:	4620      	mov	r0, r4
}
   d57c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d57c6:	f7ff bf5c 	b.w	d5682 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d57ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d57ce:	4604      	mov	r4, r0
  if(wire) { // I2C
   d57d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d57d2:	460d      	mov	r5, r1
  if(wire) { // I2C
   d57d4:	188f      	adds	r7, r1, r2
   d57d6:	b340      	cbz	r0, d582a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d57d8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d57dc:	f003 fa34 	bl	d8c48 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d57e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57e2:	6803      	ldr	r3, [r0, #0]
   d57e4:	2100      	movs	r1, #0
   d57e6:	689b      	ldr	r3, [r3, #8]
   d57e8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d57ea:	2601      	movs	r6, #1
    while(n--) {
   d57ec:	42bd      	cmp	r5, r7
   d57ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57f0:	d017      	beq.n	d5822 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d57f2:	2e1f      	cmp	r6, #31
   d57f4:	d90c      	bls.n	d5810 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d57f6:	f003 fa2e 	bl	d8c56 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d57fa:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d57fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5800:	f003 fa22 	bl	d8c48 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5804:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5806:	6803      	ldr	r3, [r0, #0]
   d5808:	2100      	movs	r1, #0
   d580a:	689b      	ldr	r3, [r3, #8]
   d580c:	4798      	blx	r3
        bytesOut = 1;
   d580e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5810:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5812:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5816:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5818:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d581a:	689b      	ldr	r3, [r3, #8]
   d581c:	4798      	blx	r3
      bytesOut++;
   d581e:	b2f6      	uxtb	r6, r6
    while(n--) {
   d5820:	e7e4      	b.n	d57ec <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d5822:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d5826:	f003 ba16 	b.w	d8c56 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d582a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d582e:	4601      	mov	r1, r0
   d5830:	b298      	uxth	r0, r3
   d5832:	f004 fc2a 	bl	da08a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5836:	42af      	cmp	r7, r5
   d5838:	d022      	beq.n	d5880 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d583a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d583c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5840:	b118      	cbz	r0, d584a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d5842:	4649      	mov	r1, r9
   d5844:	f003 fd96 	bl	d9374 <_ZN8SPIClass8transferEh>
   d5848:	e7f5      	b.n	d5836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d584a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d584c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5850:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5854:	ea09 0108 	and.w	r1, r9, r8
   d5858:	b280      	uxth	r0, r0
   d585a:	f004 fc16 	bl	da08a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d585e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5862:	2101      	movs	r1, #1
   d5864:	b280      	uxth	r0, r0
   d5866:	f004 fc10 	bl	da08a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d586a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d586e:	2100      	movs	r1, #0
   d5870:	b280      	uxth	r0, r0
   d5872:	f004 fc0a 	bl	da08a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5876:	3e01      	subs	r6, #1
   d5878:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d587c:	d1e8      	bne.n	d5850 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d587e:	e7da      	b.n	d5836 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d5880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5884 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d5884:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5888:	1dda      	adds	r2, r3, #7
   d588a:	bf48      	it	mi
   d588c:	f103 020e 	addmi.w	r2, r3, #14
   d5890:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5894:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5896:	10d2      	asrs	r2, r2, #3
   d5898:	435a      	muls	r2, r3
   d589a:	2100      	movs	r1, #0
   d589c:	f005 bb53 	b.w	daf46 <memset>

000d58a0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d58a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d58a4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d58a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d58a8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d58ac:	4604      	mov	r4, r0
   d58ae:	460f      	mov	r7, r1
   d58b0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d58b2:	b1b3      	cbz	r3, d58e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d58b4:	4620      	mov	r0, r4
   d58b6:	f7ff ffe5 	bl	d5884 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d58ba:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d58be:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d58c2:	2820      	cmp	r0, #32
   d58c4:	dc1f      	bgt.n	d5906 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d58c6:	2320      	movs	r3, #32
   d58c8:	2201      	movs	r2, #1
   d58ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d58ce:	3820      	subs	r0, #32
   d58d0:	2373      	movs	r3, #115	; 0x73
   d58d2:	3973      	subs	r1, #115	; 0x73
   d58d4:	9300      	str	r3, [sp, #0]
   d58d6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d58da:	4b89      	ldr	r3, [pc, #548]	; (d5b00 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d58dc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d58e0:	e01f      	b.n	d5922 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d58e2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d58e6:	1dd8      	adds	r0, r3, #7
   d58e8:	bf48      	it	mi
   d58ea:	f103 000e 	addmi.w	r0, r3, #14
   d58ee:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d58f2:	10c0      	asrs	r0, r0, #3
   d58f4:	4358      	muls	r0, r3
   d58f6:	f002 fcb9 	bl	d826c <malloc>
   d58fa:	62e0      	str	r0, [r4, #44]	; 0x2c
   d58fc:	2800      	cmp	r0, #0
   d58fe:	d1d9      	bne.n	d58b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5900:	b004      	add	sp, #16
   d5902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5906:	2340      	movs	r3, #64	; 0x40
   d5908:	f04f 0c01 	mov.w	ip, #1
   d590c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5910:	2352      	movs	r3, #82	; 0x52
   d5912:	3840      	subs	r0, #64	; 0x40
   d5914:	3952      	subs	r1, #82	; 0x52
   d5916:	9300      	str	r3, [sp, #0]
   d5918:	4b7a      	ldr	r3, [pc, #488]	; (d5b04 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d591a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d591e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5922:	f340 024f 	sbfx	r2, r0, #1, #16
   d5926:	f341 014f 	sbfx	r1, r1, #1, #16
   d592a:	4620      	mov	r0, r4
   d592c:	f7ff fbe8 	bl	d5100 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5930:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d5932:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5936:	2800      	cmp	r0, #0
   d5938:	d078      	beq.n	d5a2c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d593a:	2d00      	cmp	r5, #0
   d593c:	d174      	bne.n	d5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d593e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5942:	2b20      	cmp	r3, #32
   d5944:	bf0c      	ite	eq
   d5946:	253c      	moveq	r5, #60	; 0x3c
   d5948:	253d      	movne	r5, #61	; 0x3d
   d594a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d594e:	f1b8 0f00 	cmp.w	r8, #0
   d5952:	d001      	beq.n	d5958 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5954:	f003 f96e 	bl	d8c34 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5958:	b1fe      	cbz	r6, d599a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d595a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d595e:	2800      	cmp	r0, #0
   d5960:	db1b      	blt.n	d599a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5962:	2101      	movs	r1, #1
   d5964:	b280      	uxth	r0, r0
   d5966:	f004 fb7f 	bl	da068 <pinMode>
    digitalWrite(rstPin, HIGH);
   d596a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d596e:	2101      	movs	r1, #1
   d5970:	b280      	uxth	r0, r0
   d5972:	f004 fb8a 	bl	da08a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5976:	2001      	movs	r0, #1
   d5978:	f002 fcd0 	bl	d831c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d597c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5980:	2100      	movs	r1, #0
   d5982:	b280      	uxth	r0, r0
   d5984:	f004 fb81 	bl	da08a <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5988:	200a      	movs	r0, #10
   d598a:	f002 fcc7 	bl	d831c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d598e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5992:	2101      	movs	r1, #1
   d5994:	b280      	uxth	r0, r0
   d5996:	f004 fb78 	bl	da08a <digitalWrite>
  TRANSACTION_START
   d599a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d599c:	2800      	cmp	r0, #0
   d599e:	d074      	beq.n	d5a8a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d59a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d59a2:	f003 f943 	bl	d8c2c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d59a6:	2204      	movs	r2, #4
   d59a8:	4957      	ldr	r1, [pc, #348]	; (d5b08 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d59aa:	4620      	mov	r0, r4
   d59ac:	f7ff ff0d 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d59b0:	7aa1      	ldrb	r1, [r4, #10]
   d59b2:	3901      	subs	r1, #1
   d59b4:	b2c9      	uxtb	r1, r1
   d59b6:	4620      	mov	r0, r4
   d59b8:	f7ff fea0 	bl	d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d59bc:	4953      	ldr	r1, [pc, #332]	; (d5b0c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d59be:	2204      	movs	r2, #4
   d59c0:	4620      	mov	r0, r4
   d59c2:	f7ff ff02 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d59c6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d59ca:	2b01      	cmp	r3, #1
   d59cc:	bf0c      	ite	eq
   d59ce:	2110      	moveq	r1, #16
   d59d0:	2114      	movne	r1, #20
   d59d2:	4620      	mov	r0, r4
   d59d4:	f7ff fe92 	bl	d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d59d8:	2204      	movs	r2, #4
   d59da:	494d      	ldr	r1, [pc, #308]	; (d5b10 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d59dc:	4620      	mov	r0, r4
   d59de:	f7ff fef4 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d59e2:	68a3      	ldr	r3, [r4, #8]
   d59e4:	4a4b      	ldr	r2, [pc, #300]	; (d5b14 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d59e6:	4293      	cmp	r3, r2
   d59e8:	d15c      	bne.n	d5aa4 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d59ea:	494b      	ldr	r1, [pc, #300]	; (d5b18 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d59ec:	2204      	movs	r2, #4
   d59ee:	4620      	mov	r0, r4
   d59f0:	f7ff feeb 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d59f4:	21d9      	movs	r1, #217	; 0xd9
   d59f6:	4620      	mov	r0, r4
   d59f8:	f7ff fe80 	bl	d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d59fc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5a00:	2b01      	cmp	r3, #1
   d5a02:	bf0c      	ite	eq
   d5a04:	2122      	moveq	r1, #34	; 0x22
   d5a06:	21f1      	movne	r1, #241	; 0xf1
   d5a08:	4620      	mov	r0, r4
   d5a0a:	f7ff fe77 	bl	d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5a0e:	4620      	mov	r0, r4
   d5a10:	4942      	ldr	r1, [pc, #264]	; (d5b1c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d5a12:	2206      	movs	r2, #6
   d5a14:	f7ff fed9 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5a18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5a1a:	2800      	cmp	r0, #0
   d5a1c:	d063      	beq.n	d5ae6 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5a1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5a20:	f003 f904 	bl	d8c2c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5a24:	2001      	movs	r0, #1
   d5a26:	e76b      	b.n	d5900 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5a28:	b26d      	sxtb	r5, r5
   d5a2a:	e78e      	b.n	d594a <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5a2c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5a30:	2101      	movs	r1, #1
   d5a32:	b280      	uxth	r0, r0
   d5a34:	f004 fb18 	bl	da068 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5a38:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5a3c:	2101      	movs	r1, #1
   d5a3e:	b280      	uxth	r0, r0
   d5a40:	f004 fb12 	bl	da068 <pinMode>
    SSD1306_DESELECT
   d5a44:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5a48:	2101      	movs	r1, #1
   d5a4a:	b280      	uxth	r0, r0
   d5a4c:	f004 fb1d 	bl	da08a <digitalWrite>
    if(spi) { // Hardware SPI
   d5a50:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5a52:	b13d      	cbz	r5, d5a64 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5a54:	f1b8 0f00 	cmp.w	r8, #0
   d5a58:	f43f af7e 	beq.w	d5958 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5a5c:	4628      	mov	r0, r5
   d5a5e:	f003 fbdd 	bl	d921c <_ZN8SPIClass5beginEv>
   d5a62:	e779      	b.n	d5958 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5a64:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5a68:	2101      	movs	r1, #1
   d5a6a:	b280      	uxth	r0, r0
   d5a6c:	f004 fafc 	bl	da068 <pinMode>
      pinMode(clkPin , OUTPUT);
   d5a70:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5a74:	2101      	movs	r1, #1
   d5a76:	b280      	uxth	r0, r0
   d5a78:	f004 faf6 	bl	da068 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5a7c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5a80:	4629      	mov	r1, r5
   d5a82:	b280      	uxth	r0, r0
   d5a84:	f004 fb01 	bl	da08a <digitalWrite>
   d5a88:	e766      	b.n	d5958 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5a8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5a8c:	b118      	cbz	r0, d5a96 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5a8e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5a92:	f003 fc01 	bl	d9298 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5a96:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5a9a:	2100      	movs	r1, #0
   d5a9c:	b280      	uxth	r0, r0
   d5a9e:	f004 faf4 	bl	da08a <digitalWrite>
   d5aa2:	e780      	b.n	d59a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5aa4:	4a1e      	ldr	r2, [pc, #120]	; (d5b20 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5aa6:	4293      	cmp	r3, r2
   d5aa8:	d10e      	bne.n	d5ac8 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5aaa:	491e      	ldr	r1, [pc, #120]	; (d5b24 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5aac:	2203      	movs	r2, #3
   d5aae:	4620      	mov	r0, r4
   d5ab0:	f7ff fe8b 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5ab4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5ab8:	2b01      	cmp	r3, #1
   d5aba:	bf0c      	ite	eq
   d5abc:	219f      	moveq	r1, #159	; 0x9f
   d5abe:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	f7ff fe1b 	bl	d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d5ac6:	e795      	b.n	d59f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5ac8:	4a17      	ldr	r2, [pc, #92]	; (d5b28 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5aca:	4293      	cmp	r3, r2
   d5acc:	d192      	bne.n	d59f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5ace:	4917      	ldr	r1, [pc, #92]	; (d5b2c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5ad0:	2203      	movs	r2, #3
   d5ad2:	4620      	mov	r0, r4
   d5ad4:	f7ff fe79 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5ad8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5adc:	2b01      	cmp	r3, #1
   d5ade:	bf0c      	ite	eq
   d5ae0:	2110      	moveq	r1, #16
   d5ae2:	21af      	movne	r1, #175	; 0xaf
   d5ae4:	e7ec      	b.n	d5ac0 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5ae6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5aea:	2101      	movs	r1, #1
   d5aec:	b280      	uxth	r0, r0
   d5aee:	f004 facc 	bl	da08a <digitalWrite>
   d5af2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5af4:	2800      	cmp	r0, #0
   d5af6:	d095      	beq.n	d5a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5af8:	f003 fbb4 	bl	d9264 <_ZN8SPIClass14endTransactionEv>
   d5afc:	e792      	b.n	d5a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5afe:	bf00      	nop
   d5b00:	000dd9ac 	.word	0x000dd9ac
   d5b04:	000dd6ec 	.word	0x000dd6ec
   d5b08:	000ddbf4 	.word	0x000ddbf4
   d5b0c:	000ddbf8 	.word	0x000ddbf8
   d5b10:	000ddbfc 	.word	0x000ddbfc
   d5b14:	00200080 	.word	0x00200080
   d5b18:	000ddc06 	.word	0x000ddc06
   d5b1c:	000ddc00 	.word	0x000ddc00
   d5b20:	00400080 	.word	0x00400080
   d5b24:	000ddc0a 	.word	0x000ddc0a
   d5b28:	00100060 	.word	0x00100060
   d5b2c:	000ddc0d 	.word	0x000ddc0d

000d5b30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5b30:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5b32:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5b34:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5b38:	db3d      	blt.n	d5bb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5b3a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5b3e:	4294      	cmp	r4, r2
   d5b40:	dd39      	ble.n	d5bb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5b42:	2900      	cmp	r1, #0
      w += x;
   d5b44:	bfbe      	ittt	lt
   d5b46:	185b      	addlt	r3, r3, r1
   d5b48:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5b4a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5b4c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5b50:	18ce      	adds	r6, r1, r3
   d5b52:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5b54:	bfc4      	itt	gt
   d5b56:	1a63      	subgt	r3, r4, r1
   d5b58:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5b5a:	2b00      	cmp	r3, #0
   d5b5c:	dd2b      	ble.n	d5bb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5b5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5b60:	10d6      	asrs	r6, r2, #3
   d5b62:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5b66:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5b68:	f002 0007 	and.w	r0, r2, #7
   d5b6c:	2201      	movs	r2, #1
   d5b6e:	4082      	lsls	r2, r0
      switch(color) {
   d5b70:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5b72:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5b74:	d016      	beq.n	d5ba4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5b76:	2d02      	cmp	r5, #2
   d5b78:	d00b      	beq.n	d5b92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5b7a:	b9e5      	cbnz	r5, d5bb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5b7c:	43d2      	mvns	r2, r2
   d5b7e:	b2d2      	uxtb	r2, r2
   d5b80:	440b      	add	r3, r1
   d5b82:	4299      	cmp	r1, r3
   d5b84:	d017      	beq.n	d5bb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5b86:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5b8a:	4010      	ands	r0, r2
   d5b8c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5b90:	e7f7      	b.n	d5b82 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5b92:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5b94:	4299      	cmp	r1, r3
   d5b96:	d00e      	beq.n	d5bb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5b98:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5b9c:	4050      	eors	r0, r2
   d5b9e:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5ba2:	e7f7      	b.n	d5b94 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5ba4:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5ba6:	4299      	cmp	r1, r3
   d5ba8:	d005      	beq.n	d5bb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5baa:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5bae:	4310      	orrs	r0, r2
   d5bb0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5bb4:	e7f7      	b.n	d5ba6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5bb6:	bd70      	pop	{r4, r5, r6, pc}

000d5bb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5bba:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5bbc:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5bc0:	db76      	blt.n	d5cb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5bc2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5bc6:	42a9      	cmp	r1, r5
   d5bc8:	da72      	bge.n	d5cb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5bca:	2a00      	cmp	r2, #0
      __h += __y;
   d5bcc:	bfbc      	itt	lt
   d5bce:	18d2      	addlt	r2, r2, r3
   d5bd0:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5bd2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5bd6:	bfb8      	it	lt
   d5bd8:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5bda:	18d7      	adds	r7, r2, r3
   d5bdc:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5bde:	bfc4      	itt	gt
   d5be0:	1aa3      	subgt	r3, r4, r2
   d5be2:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5be4:	2b00      	cmp	r3, #0
   d5be6:	dd63      	ble.n	d5cb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5be8:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5bec:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5bee:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5bf2:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5bf6:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5bf8:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5bfc:	d023      	beq.n	d5c46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5bfe:	f1c2 0208 	rsb	r2, r2, #8
   d5c02:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5c04:	4d2c      	ldr	r5, [pc, #176]	; (d5cb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5c06:	4293      	cmp	r3, r2
   d5c08:	bf3c      	itt	cc
   d5c0a:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5c0e:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5c12:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5c14:	bf3c      	itt	cc
   d5c16:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5c1a:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5c1e:	2e01      	cmp	r6, #1
   d5c20:	d007      	beq.n	d5c32 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5c22:	2e02      	cmp	r6, #2
   d5c24:	d02e      	beq.n	d5c84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5c26:	b94e      	cbnz	r6, d5c3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5c28:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5c2c:	ea2c 0505 	bic.w	r5, ip, r5
   d5c30:	e003      	b.n	d5c3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5c32:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5c36:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5c3a:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5c3c:	4293      	cmp	r3, r2
   d5c3e:	d337      	bcc.n	d5cb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5c40:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5c44:	440c      	add	r4, r1
        h -= mod;
   d5c46:	1a9a      	subs	r2, r3, r2
   d5c48:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5c4a:	2a07      	cmp	r2, #7
   d5c4c:	d90e      	bls.n	d5c6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5c4e:	2e02      	cmp	r6, #2
   d5c50:	d11d      	bne.n	d5c8e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5c52:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5c54:	7821      	ldrb	r1, [r4, #0]
   d5c56:	43c9      	mvns	r1, r1
   d5c58:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5c5a:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5c5c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5c60:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5c62:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5c64:	440c      	add	r4, r1
            } while(h >= 8);
   d5c66:	d8f5      	bhi.n	d5c54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5c68:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5c6c:	b302      	cbz	r2, d5cb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5c6e:	4b13      	ldr	r3, [pc, #76]	; (d5cbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5c70:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5c72:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5c74:	d019      	beq.n	d5caa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5c76:	2e02      	cmp	r6, #2
   d5c78:	d01b      	beq.n	d5cb2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5c7a:	b9ce      	cbnz	r6, d5cb0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5c7c:	7822      	ldrb	r2, [r4, #0]
   d5c7e:	ea22 0303 	bic.w	r3, r2, r3
   d5c82:	e014      	b.n	d5cae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5c84:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5c88:	ea85 050c 	eor.w	r5, r5, ip
   d5c8c:	e7d5      	b.n	d5c3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5c8e:	2e00      	cmp	r6, #0
   d5c90:	bf14      	ite	ne
   d5c92:	25ff      	movne	r5, #255	; 0xff
   d5c94:	2500      	moveq	r5, #0
   d5c96:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5c98:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5c9a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5c9c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5ca0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5ca2:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5ca4:	440c      	add	r4, r1
            } while(h >= 8);
   d5ca6:	d8f7      	bhi.n	d5c98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5ca8:	e7de      	b.n	d5c68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5caa:	7822      	ldrb	r2, [r4, #0]
   d5cac:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5cae:	7023      	strb	r3, [r4, #0]
}
   d5cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5cb2:	7822      	ldrb	r2, [r4, #0]
   d5cb4:	4053      	eors	r3, r2
   d5cb6:	e7fa      	b.n	d5cae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5cb8:	000ddbe4 	.word	0x000ddbe4
   d5cbc:	000ddbec 	.word	0x000ddbec

000d5cc0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5cc0:	b470      	push	{r4, r5, r6}
   d5cc2:	4614      	mov	r4, r2
  switch(rotation) {
   d5cc4:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5cc6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5cca:	2a02      	cmp	r2, #2
   d5ccc:	d00d      	beq.n	d5cea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5cce:	2a03      	cmp	r2, #3
   d5cd0:	d018      	beq.n	d5d04 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5cd2:	2a01      	cmp	r2, #1
   d5cd4:	d111      	bne.n	d5cfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5cd6:	8902      	ldrh	r2, [r0, #8]
   d5cd8:	43e4      	mvns	r4, r4
   d5cda:	4414      	add	r4, r2
   d5cdc:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5cde:	9603      	str	r6, [sp, #12]
   d5ce0:	460a      	mov	r2, r1
   d5ce2:	4621      	mov	r1, r4
}
   d5ce4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5ce6:	f7ff bf67 	b.w	d5bb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5cea:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5cec:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5cee:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5cf0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5cf2:	4414      	add	r4, r2
    x -= (w-1);
   d5cf4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5cf6:	b224      	sxth	r4, r4
    x -= (w-1);
   d5cf8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5cfa:	9603      	str	r6, [sp, #12]
   d5cfc:	4622      	mov	r2, r4
}
   d5cfe:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5d00:	f7ff bf16 	b.w	d5b30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5d04:	8945      	ldrh	r5, [r0, #10]
   d5d06:	4419      	add	r1, r3
   d5d08:	1a69      	subs	r1, r5, r1
   d5d0a:	b209      	sxth	r1, r1
    break;
   d5d0c:	e7e7      	b.n	d5cde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5d0e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5d0e:	b430      	push	{r4, r5}
   d5d10:	4614      	mov	r4, r2
  switch(rotation) {
   d5d12:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5d14:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5d18:	2a02      	cmp	r2, #2
   d5d1a:	d00d      	beq.n	d5d38 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5d1c:	2a03      	cmp	r2, #3
   d5d1e:	d018      	beq.n	d5d52 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5d20:	2a01      	cmp	r2, #1
   d5d22:	d111      	bne.n	d5d48 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5d24:	18e2      	adds	r2, r4, r3
   d5d26:	8904      	ldrh	r4, [r0, #8]
   d5d28:	1aa4      	subs	r4, r4, r2
   d5d2a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5d2c:	9502      	str	r5, [sp, #8]
   d5d2e:	460a      	mov	r2, r1
   d5d30:	4621      	mov	r1, r4
}
   d5d32:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5d34:	f7ff befc 	b.w	d5b30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5d38:	8902      	ldrh	r2, [r0, #8]
   d5d3a:	43c9      	mvns	r1, r1
   d5d3c:	4411      	add	r1, r2
    y -= (h-1);
   d5d3e:	18e2      	adds	r2, r4, r3
   d5d40:	8944      	ldrh	r4, [r0, #10]
   d5d42:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5d44:	b209      	sxth	r1, r1
    y -= (h-1);
   d5d46:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5d48:	9502      	str	r5, [sp, #8]
   d5d4a:	4622      	mov	r2, r4
}
   d5d4c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5d4e:	f7ff bf33 	b.w	d5bb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5d52:	8942      	ldrh	r2, [r0, #10]
   d5d54:	43c9      	mvns	r1, r1
   d5d56:	4411      	add	r1, r2
   d5d58:	b209      	sxth	r1, r1
    break;
   d5d5a:	e7e7      	b.n	d5d2c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5d5c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5d60:	4604      	mov	r4, r0
  TRANSACTION_START
   d5d62:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5d64:	2800      	cmp	r0, #0
   d5d66:	d042      	beq.n	d5dee <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5d68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5d6a:	f002 ff5f 	bl	d8c2c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5d6e:	4947      	ldr	r1, [pc, #284]	; (d5e8c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5d70:	2205      	movs	r2, #5
   d5d72:	4620      	mov	r0, r4
   d5d74:	f7ff fd29 	bl	d57ca <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5d78:	7a21      	ldrb	r1, [r4, #8]
   d5d7a:	3901      	subs	r1, #1
   d5d7c:	4620      	mov	r0, r4
   d5d7e:	b2c9      	uxtb	r1, r1
   d5d80:	f7ff fcbc 	bl	d56fc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5d84:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5d88:	1dde      	adds	r6, r3, #7
   d5d8a:	bf48      	it	mi
   d5d8c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5d90:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5d94:	8923      	ldrh	r3, [r4, #8]
   d5d96:	10f6      	asrs	r6, r6, #3
   d5d98:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5d9c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5da0:	2800      	cmp	r0, #0
   d5da2:	d03a      	beq.n	d5e1a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5da4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5da8:	f002 ff4e 	bl	d8c48 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5dac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dae:	6803      	ldr	r3, [r0, #0]
   d5db0:	2140      	movs	r1, #64	; 0x40
   d5db2:	689b      	ldr	r3, [r3, #8]
   d5db4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5db6:	2701      	movs	r7, #1
    while(count--) {
   d5db8:	42b5      	cmp	r5, r6
   d5dba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dbc:	d024      	beq.n	d5e08 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5dbe:	2f1f      	cmp	r7, #31
   d5dc0:	d90c      	bls.n	d5ddc <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5dc2:	f002 ff48 	bl	d8c56 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5dc6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5dca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dcc:	f002 ff3c 	bl	d8c48 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5dd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dd2:	6803      	ldr	r3, [r0, #0]
   d5dd4:	2140      	movs	r1, #64	; 0x40
   d5dd6:	689b      	ldr	r3, [r3, #8]
   d5dd8:	4798      	blx	r3
        bytesOut = 1;
   d5dda:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5ddc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dde:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5de2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5de4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5de6:	689b      	ldr	r3, [r3, #8]
   d5de8:	4798      	blx	r3
      bytesOut++;
   d5dea:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5dec:	e7e4      	b.n	d5db8 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5dee:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5df0:	b118      	cbz	r0, d5dfa <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5df2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5df6:	f003 fa4f 	bl	d9298 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5dfa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5dfe:	2100      	movs	r1, #0
   d5e00:	b280      	uxth	r0, r0
   d5e02:	f004 f942 	bl	da08a <digitalWrite>
   d5e06:	e7b2      	b.n	d5d6e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5e08:	f002 ff25 	bl	d8c56 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5e0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e0e:	b378      	cbz	r0, d5e70 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5e10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5e12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e16:	f002 bf09 	b.w	d8c2c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5e1a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5e1e:	2101      	movs	r1, #1
   d5e20:	b280      	uxth	r0, r0
   d5e22:	f004 f932 	bl	da08a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5e26:	42b5      	cmp	r5, r6
   d5e28:	d0f0      	beq.n	d5e0c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5e2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5e2c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5e30:	b118      	cbz	r0, d5e3a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5e32:	4649      	mov	r1, r9
   d5e34:	f003 fa9e 	bl	d9374 <_ZN8SPIClass8transferEh>
   d5e38:	e7f5      	b.n	d5e26 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5e3a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5e3c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5e40:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5e44:	ea09 0108 	and.w	r1, r9, r8
   d5e48:	b280      	uxth	r0, r0
   d5e4a:	f004 f91e 	bl	da08a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5e4e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5e52:	2101      	movs	r1, #1
   d5e54:	b280      	uxth	r0, r0
   d5e56:	f004 f918 	bl	da08a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5e5a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5e5e:	2100      	movs	r1, #0
   d5e60:	b280      	uxth	r0, r0
   d5e62:	f004 f912 	bl	da08a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5e66:	3f01      	subs	r7, #1
   d5e68:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5e6c:	d1e8      	bne.n	d5e40 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5e6e:	e7da      	b.n	d5e26 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5e70:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5e74:	2101      	movs	r1, #1
   d5e76:	b280      	uxth	r0, r0
   d5e78:	f004 f907 	bl	da08a <digitalWrite>
   d5e7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5e7e:	b118      	cbz	r0, d5e88 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5e80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5e84:	f003 b9ee 	b.w	d9264 <_ZN8SPIClass14endTransactionEv>
}
   d5e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5e8c:	000ddc10 	.word	0x000ddc10

000d5e90 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5e90:	2100      	movs	r1, #0
   d5e92:	220a      	movs	r2, #10
   d5e94:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5e98:	4770      	bx	lr

000d5e9a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5e9a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5e9c:	b510      	push	{r4, lr}
   d5e9e:	4604      	mov	r4, r0
    this->pin = pin;
   d5ea0:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5ea2:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5ea4:	b288      	uxth	r0, r1
   d5ea6:	f004 f909 	bl	da0bc <digitalRead>
   d5eaa:	b108      	cbz	r0, d5eb0 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5eac:	2303      	movs	r3, #3
   d5eae:	71a3      	strb	r3, [r4, #6]
   d5eb0:	f001 ff66 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5eb4:	6020      	str	r0, [r4, #0]
#endif
}
   d5eb6:	bd10      	pop	{r4, pc}

000d5eb8 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5eb8:	b538      	push	{r3, r4, r5, lr}
   d5eba:	460c      	mov	r4, r1
   d5ebc:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5ebe:	4611      	mov	r1, r2
   d5ec0:	b2a0      	uxth	r0, r4
   d5ec2:	f004 f8d1 	bl	da068 <pinMode>
  
  this->attach(pin);
   d5ec6:	4621      	mov	r1, r4
   d5ec8:	4628      	mov	r0, r5
}
   d5eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5ece:	f7ff bfe4 	b.w	d5e9a <_ZN8Debounce6attachEi>

000d5ed2 <_ZN3GpsC1EP11USARTSerial>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
   d5ed2:	b538      	push	{r3, r4, r5, lr}
   d5ed4:	4604      	mov	r4, r0
   d5ed6:	460d      	mov	r5, r1
   d5ed8:	f000 fa1c 	bl	d6314 <_ZN9NmeaCacheC1Ev>
   d5edc:	2300      	movs	r3, #0
   d5ede:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
{
    this->_serial = serial;
   d5ee2:	6725      	str	r5, [r4, #112]	; 0x70
Gps::Gps(USARTSerial* serial)
   d5ee4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
};
   d5ee8:	4620      	mov	r0, r4
   d5eea:	bd38      	pop	{r3, r4, r5, pc}

000d5eec <_ZN3Gps11sendCommandEPKc>:
{
    this->_serial->end();
}

void Gps::sendCommand(const char* data)
{
   d5eec:	b508      	push	{r3, lr}
    this->_serial->println(data);
   d5eee:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5ef0:	f003 f833 	bl	d8f5a <_ZN5Print7printlnEPKc>
    delay(250);
}
   d5ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(250);
   d5ef8:	20fa      	movs	r0, #250	; 0xfa
   d5efa:	f002 ba0f 	b.w	d831c <delay>
	...

000d5f00 <_ZN3Gps5beginEm>:
{
   d5f00:	b510      	push	{r4, lr}
   d5f02:	4604      	mov	r4, r0
    this->_serial->begin(baud);
   d5f04:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5f06:	f003 fecf 	bl	d9ca8 <_ZN11USARTSerial5beginEm>
    this->_serial->blockOnOverrun(true);
   d5f0a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d5f0c:	6803      	ldr	r3, [r0, #0]
   d5f0e:	2101      	movs	r1, #1
   d5f10:	6a1b      	ldr	r3, [r3, #32]
   d5f12:	4798      	blx	r3
    this->sendCommand(PMTK_SET_BAUD_9600);
   d5f14:	4620      	mov	r0, r4
   d5f16:	490c      	ldr	r1, [pc, #48]	; (d5f48 <_ZN3Gps5beginEm+0x48>)
   d5f18:	f7ff ffe8 	bl	d5eec <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	490b      	ldr	r1, [pc, #44]	; (d5f4c <_ZN3Gps5beginEm+0x4c>)
   d5f20:	f7ff ffe4 	bl	d5eec <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
   d5f24:	4620      	mov	r0, r4
   d5f26:	490a      	ldr	r1, [pc, #40]	; (d5f50 <_ZN3Gps5beginEm+0x50>)
   d5f28:	f7ff ffe0 	bl	d5eec <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	4909      	ldr	r1, [pc, #36]	; (d5f54 <_ZN3Gps5beginEm+0x54>)
   d5f30:	f7ff ffdc 	bl	d5eec <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_ENABLE_WAAS);
   d5f34:	4620      	mov	r0, r4
   d5f36:	4908      	ldr	r1, [pc, #32]	; (d5f58 <_ZN3Gps5beginEm+0x58>)
   d5f38:	f7ff ffd8 	bl	d5eec <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PGCMD_ANTENNA);
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	4907      	ldr	r1, [pc, #28]	; (d5f5c <_ZN3Gps5beginEm+0x5c>)
};
   d5f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->sendCommand(PGCMD_ANTENNA);
   d5f44:	f7ff bfd2 	b.w	d5eec <_ZN3Gps11sendCommandEPKc>
   d5f48:	000ddc15 	.word	0x000ddc15
   d5f4c:	000ddc26 	.word	0x000ddc26
   d5f50:	000ddc37 	.word	0x000ddc37
   d5f54:	000ddc50 	.word	0x000ddc50
   d5f58:	000ddc82 	.word	0x000ddc82
   d5f5c:	000ddc90 	.word	0x000ddc90

000d5f60 <_ZN3Gps11clearBufferEv>:
    }
}

void Gps::clearBuffer()
{
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5f60:	2300      	movs	r3, #0
    {
        this->_buffer[i] = 0;
   d5f62:	4619      	mov	r1, r3
   d5f64:	18c2      	adds	r2, r0, r3
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5f66:	3301      	adds	r3, #1
   d5f68:	2b80      	cmp	r3, #128	; 0x80
        this->_buffer[i] = 0;
   d5f6a:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5f6e:	d1f9      	bne.n	d5f64 <_ZN3Gps11clearBufferEv+0x4>
    }
}
   d5f70:	4770      	bx	lr
	...

000d5f74 <_ZN3Gps12onSerialDataEv>:
{
   d5f74:	b570      	push	{r4, r5, r6, lr}
   d5f76:	4604      	mov	r4, r0
    if (this->_serial->available())
   d5f78:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5f7a:	6803      	ldr	r3, [r0, #0]
{
   d5f7c:	b088      	sub	sp, #32
    if (this->_serial->available())
   d5f7e:	691b      	ldr	r3, [r3, #16]
   d5f80:	4798      	blx	r3
   d5f82:	b1e8      	cbz	r0, d5fc0 <_ZN3Gps12onSerialDataEv+0x4c>
        char c = this->_serial->read();
   d5f84:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d5f86:	6803      	ldr	r3, [r0, #0]
   d5f88:	695b      	ldr	r3, [r3, #20]
   d5f8a:	4798      	blx	r3
        if (!this->_synced && c == '$') this->_synced = true;
   d5f8c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
        char c = this->_serial->read();
   d5f90:	b2c0      	uxtb	r0, r0
        if (!this->_synced && c == '$') this->_synced = true;
   d5f92:	b923      	cbnz	r3, d5f9e <_ZN3Gps12onSerialDataEv+0x2a>
   d5f94:	2824      	cmp	r0, #36	; 0x24
   d5f96:	bf04      	itt	eq
   d5f98:	2301      	moveq	r3, #1
   d5f9a:	f884 30f8 	strbeq.w	r3, [r4, #248]	; 0xf8
        if (this->_synced)
   d5f9e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   d5fa2:	b16b      	cbz	r3, d5fc0 <_ZN3Gps12onSerialDataEv+0x4c>
            if (this->_bufferIndex > BUFFER_SIZE)
   d5fa4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d5fa8:	2b80      	cmp	r3, #128	; 0x80
   d5faa:	dd0b      	ble.n	d5fc4 <_ZN3Gps12onSerialDataEv+0x50>
                Serial.println("Buffer Overun: '");
   d5fac:	f003 ff04 	bl	d9db8 <_Z16_fetch_usbserialv>
   d5fb0:	4920      	ldr	r1, [pc, #128]	; (d6034 <_ZN3Gps12onSerialDataEv+0xc0>)
   d5fb2:	f002 ffd2 	bl	d8f5a <_ZN5Print7printlnEPKc>
                this->_bufferIndex = 0;
   d5fb6:	2300      	movs	r3, #0
   d5fb8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
                this->_synced = false;
   d5fbc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   d5fc0:	b008      	add	sp, #32
   d5fc2:	bd70      	pop	{r4, r5, r6, pc}
                this->_buffer[this->_bufferIndex] =  0;
   d5fc4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            else if (c == '\r')
   d5fc8:	280d      	cmp	r0, #13
                this->_buffer[this->_bufferIndex] =  0;
   d5fca:	4423      	add	r3, r4
            else if (c == '\r')
   d5fcc:	d108      	bne.n	d5fe0 <_ZN3Gps12onSerialDataEv+0x6c>
                this->_buffer[this->_bufferIndex] =  0;
   d5fce:	2200      	movs	r2, #0
   d5fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                this->_bufferIndex++;
   d5fd4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d5fd8:	3301      	adds	r3, #1
   d5fda:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
   d5fde:	e7ef      	b.n	d5fc0 <_ZN3Gps12onSerialDataEv+0x4c>
            else if (c == '\n')
   d5fe0:	280a      	cmp	r0, #10
   d5fe2:	d124      	bne.n	d602e <_ZN3Gps12onSerialDataEv+0xba>
                this->_buffer[this->_bufferIndex] =  0;
   d5fe4:	2600      	movs	r6, #0
   d5fe6:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
                String tempBuffer = String((char*)this->_buffer);
   d5fea:	f104 0174 	add.w	r1, r4, #116	; 0x74
   d5fee:	4668      	mov	r0, sp
   d5ff0:	f003 fa83 	bl	d94fa <_ZN6StringC1EPKc>
                uint8_t index = this->msgIdToIndex(tempBuffer);
   d5ff4:	4669      	mov	r1, sp
   d5ff6:	a804      	add	r0, sp, #16
   d5ff8:	f003 fabf 	bl	d957a <_ZN6StringC1ERKS_>
   d5ffc:	a904      	add	r1, sp, #16
   d5ffe:	4620      	mov	r0, r4
   d6000:	f000 f99a 	bl	d6338 <_ZN9NmeaCache12msgIdToIndexE6String>
   d6004:	4605      	mov	r5, r0
   d6006:	a804      	add	r0, sp, #16
   d6008:	f003 fa2c 	bl	d9464 <_ZN6StringD1Ev>
                this->data[index] = tempBuffer;
   d600c:	b228      	sxth	r0, r5
   d600e:	4669      	mov	r1, sp
   d6010:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   d6014:	f003 faa2 	bl	d955c <_ZN6StringaSERKS_>
                this->_bufferIndex = 0;
   d6018:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
                this->clearBuffer();
   d601c:	4620      	mov	r0, r4
                this->_synced = false;
   d601e:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
                this->clearBuffer();
   d6022:	f7ff ff9d 	bl	d5f60 <_ZN3Gps11clearBufferEv>
                String tempBuffer = String((char*)this->_buffer);
   d6026:	4668      	mov	r0, sp
   d6028:	f003 fa1c 	bl	d9464 <_ZN6StringD1Ev>
   d602c:	e7c8      	b.n	d5fc0 <_ZN3Gps12onSerialDataEv+0x4c>
                this->_buffer[this->_bufferIndex] = c;
   d602e:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
   d6032:	e7cf      	b.n	d5fd4 <_ZN3Gps12onSerialDataEv+0x60>
   d6034:	000ddc9f 	.word	0x000ddc9f

000d6038 <_ZN4NmeaC1E6Stringh9NmeaCache>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Nmea.h"

Nmea::Nmea(String messageId, uint8_t dataIndex, NmeaCache nmeaCache)
   d6038:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d603c:	4604      	mov	r4, r0
   d603e:	460f      	mov	r7, r1
   d6040:	f104 0814 	add.w	r8, r4, #20
   d6044:	490e      	ldr	r1, [pc, #56]	; (d6080 <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d6046:	4615      	mov	r5, r2
   d6048:	461e      	mov	r6, r3
   d604a:	f003 fa56 	bl	d94fa <_ZN6StringC1EPKc>
   d604e:	490c      	ldr	r1, [pc, #48]	; (d6080 <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d6050:	4640      	mov	r0, r8
   d6052:	f003 fa52 	bl	d94fa <_ZN6StringC1EPKc>
{
    // ***
    // *** Save the Message ID
    // ***
    this->_messageId = messageId;
   d6056:	4639      	mov	r1, r7
   d6058:	4620      	mov	r0, r4
   d605a:	f003 fa7f 	bl	d955c <_ZN6StringaSERKS_>
    this->_dataIndex = dataIndex;
    
    // ***
    // *** Make a copy of the data.
    // ***
    this->_data = String(nmeaCache.data[dataIndex]);
   d605e:	eb06 1105 	add.w	r1, r6, r5, lsl #4
    this->_dataIndex = dataIndex;
   d6062:	7425      	strb	r5, [r4, #16]
    this->_data = String(nmeaCache.data[dataIndex]);
   d6064:	4668      	mov	r0, sp
   d6066:	f003 fa88 	bl	d957a <_ZN6StringC1ERKS_>
   d606a:	4669      	mov	r1, sp
   d606c:	4640      	mov	r0, r8
   d606e:	f003 fa8f 	bl	d9590 <_ZN6StringaSEOS_>
   d6072:	4668      	mov	r0, sp
   d6074:	f003 f9f6 	bl	d9464 <_ZN6StringD1Ev>
}
   d6078:	4620      	mov	r0, r4
   d607a:	b004      	add	sp, #16
   d607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6080:	000ddf70 	.word	0x000ddf70

000d6084 <_ZN4Nmea15extractChecksumEv>:

    return returnValue;
}

uint16_t Nmea::extractChecksum()
{
   d6084:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6086:	b085      	sub	sp, #20
    uint16_t returnValue = 0;
    
    // ***
    // *** Get the position of the last * character.
    // ***
    uint8_t index = this->_data.lastIndexOf("*");
   d6088:	4919      	ldr	r1, [pc, #100]	; (d60f0 <_ZN4Nmea15extractChecksumEv+0x6c>)
{
   d608a:	4605      	mov	r5, r0
    uint8_t index = this->_data.lastIndexOf("*");
   d608c:	f100 0614 	add.w	r6, r0, #20
   d6090:	4668      	mov	r0, sp
   d6092:	f003 fa32 	bl	d94fa <_ZN6StringC1EPKc>
   d6096:	4669      	mov	r1, sp
   d6098:	4630      	mov	r0, r6
   d609a:	f003 fbb4 	bl	d9806 <_ZNK6String11lastIndexOfERKS_>
   d609e:	4604      	mov	r4, r0
   d60a0:	4668      	mov	r0, sp
   d60a2:	f003 f9df 	bl	d9464 <_ZN6StringD1Ev>
    
    // ***
    // *** Check that we have the character and that the string
    // *** is at least two characters longer than the position.
    // ***
    if (index != -1 && this->_data.length() >= (uint16_t)(index + 2))
   d60a6:	69eb      	ldr	r3, [r5, #28]
   d60a8:	b2e1      	uxtb	r1, r4
   d60aa:	1c8f      	adds	r7, r1, #2
   d60ac:	429f      	cmp	r7, r3
   d60ae:	d81d      	bhi.n	d60ec <_ZN4Nmea15extractChecksumEv+0x68>
    {
        char c1 = this->_data.charAt(index + 1);
   d60b0:	3101      	adds	r1, #1
   d60b2:	4630      	mov	r0, r6
   d60b4:	f003 fb71 	bl	d979a <_ZNK6String6charAtEj>
        char c2 = this->_data.charAt(index + 2);
   d60b8:	4639      	mov	r1, r7
        char c1 = this->_data.charAt(index + 1);
   d60ba:	4604      	mov	r4, r0
        char c2 = this->_data.charAt(index + 2);
   d60bc:	4630      	mov	r0, r6
   d60be:	f003 fb6c 	bl	d979a <_ZNK6String6charAtEj>
// ***
uint8_t Nmea::parseHex(char c) 
{
    uint8_t returnValue = 0;

    switch(c)
   d60c2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   d60c6:	b2db      	uxtb	r3, r3
   d60c8:	2b15      	cmp	r3, #21
   d60ca:	bf9c      	itt	ls
   d60cc:	4a09      	ldrls	r2, [pc, #36]	; (d60f4 <_ZN4Nmea15extractChecksumEv+0x70>)
   d60ce:	5cd3      	ldrbls	r3, [r2, r3]
   d60d0:	f1a0 0031 	sub.w	r0, r0, #49	; 0x31
        char c2 = this->_data.charAt(index + 2);
   d60d4:	bf88      	it	hi
   d60d6:	2300      	movhi	r3, #0
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d60d8:	011a      	lsls	r2, r3, #4
    switch(c)
   d60da:	b2c3      	uxtb	r3, r0
   d60dc:	2b15      	cmp	r3, #21
   d60de:	bf9a      	itte	ls
   d60e0:	4904      	ldrls	r1, [pc, #16]	; (d60f4 <_ZN4Nmea15extractChecksumEv+0x70>)
   d60e2:	5cc8      	ldrbls	r0, [r1, r3]
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d60e4:	2000      	movhi	r0, #0
   d60e6:	4410      	add	r0, r2
}
   d60e8:	b005      	add	sp, #20
   d60ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t returnValue = 0;
   d60ec:	2000      	movs	r0, #0
   d60ee:	e7fb      	b.n	d60e8 <_ZN4Nmea15extractChecksumEv+0x64>
   d60f0:	000ddcb0 	.word	0x000ddcb0
   d60f4:	000ddcb4 	.word	0x000ddcb4

000d60f8 <_ZN4Nmea17calculateChecksumEv>:
{
   d60f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60fa:	b085      	sub	sp, #20
    if (this->_data.startsWith("$"))
   d60fc:	4910      	ldr	r1, [pc, #64]	; (d6140 <_ZN4Nmea17calculateChecksumEv+0x48>)
   d60fe:	f100 0714 	add.w	r7, r0, #20
{
   d6102:	4606      	mov	r6, r0
    if (this->_data.startsWith("$"))
   d6104:	4668      	mov	r0, sp
   d6106:	f003 f9f8 	bl	d94fa <_ZN6StringC1EPKc>
   d610a:	4669      	mov	r1, sp
   d610c:	4638      	mov	r0, r7
   d610e:	f003 fb32 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d6112:	4604      	mov	r4, r0
   d6114:	4668      	mov	r0, sp
   d6116:	f003 f9a5 	bl	d9464 <_ZN6StringD1Ev>
   d611a:	b174      	cbz	r4, d613a <_ZN4Nmea17calculateChecksumEv+0x42>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d611c:	2501      	movs	r5, #1
    uint16_t returnValue = 0;
   d611e:	2400      	movs	r4, #0
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6120:	69f3      	ldr	r3, [r6, #28]
   d6122:	3b03      	subs	r3, #3
   d6124:	429d      	cmp	r5, r3
   d6126:	d208      	bcs.n	d613a <_ZN4Nmea17calculateChecksumEv+0x42>
            returnValue ^= this->_data.charAt(i);
   d6128:	4629      	mov	r1, r5
   d612a:	4638      	mov	r0, r7
   d612c:	f003 fb35 	bl	d979a <_ZNK6String6charAtEj>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6130:	3501      	adds	r5, #1
            returnValue ^= this->_data.charAt(i);
   d6132:	4044      	eors	r4, r0
   d6134:	b2a4      	uxth	r4, r4
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d6136:	b2ed      	uxtb	r5, r5
   d6138:	e7f2      	b.n	d6120 <_ZN4Nmea17calculateChecksumEv+0x28>
}
   d613a:	4620      	mov	r0, r4
   d613c:	b005      	add	sp, #20
   d613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6140:	000ddcb2 	.word	0x000ddcb2

000d6144 <_ZN4Nmea7isValidEv>:
{
   d6144:	b538      	push	{r3, r4, r5, lr}
    if (this->_data.startsWith(this->_messageId))
   d6146:	4601      	mov	r1, r0
{
   d6148:	4605      	mov	r5, r0
    if (this->_data.startsWith(this->_messageId))
   d614a:	3014      	adds	r0, #20
   d614c:	f003 fb13 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d6150:	b148      	cbz	r0, d6166 <_ZN4Nmea7isValidEv+0x22>
        uint16_t providedChecksum = this->extractChecksum();
   d6152:	4628      	mov	r0, r5
   d6154:	f7ff ff96 	bl	d6084 <_ZN4Nmea15extractChecksumEv>
   d6158:	4604      	mov	r4, r0
        uint16_t calculatedChecksum = this->calculateChecksum();
   d615a:	4628      	mov	r0, r5
   d615c:	f7ff ffcc 	bl	d60f8 <_ZN4Nmea17calculateChecksumEv>
        returnValue = (providedChecksum == calculatedChecksum);
   d6160:	1a23      	subs	r3, r4, r0
   d6162:	4258      	negs	r0, r3
   d6164:	4158      	adcs	r0, r3
}
   d6166:	bd38      	pop	{r3, r4, r5, pc}

000d6168 <_ZN4Nmea15getNextPositionEm>:

    return returnValue;
}

int32_t Nmea::getNextPosition(uint32_t from)
{
   d6168:	b510      	push	{r4, lr}
   d616a:	b086      	sub	sp, #24
   d616c:	4604      	mov	r4, r0
   d616e:	9101      	str	r1, [sp, #4]
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        returnValue = this->_data.indexOf(",", from);
   d6170:	a802      	add	r0, sp, #8
   d6172:	4908      	ldr	r1, [pc, #32]	; (d6194 <_ZN4Nmea15getNextPositionEm+0x2c>)
   d6174:	f003 f9c1 	bl	d94fa <_ZN6StringC1EPKc>
   d6178:	9a01      	ldr	r2, [sp, #4]
   d617a:	a902      	add	r1, sp, #8
   d617c:	f104 0014 	add.w	r0, r4, #20
   d6180:	f003 fb0d 	bl	d979e <_ZNK6String7indexOfERKS_j>
   d6184:	4604      	mov	r4, r0
   d6186:	a802      	add	r0, sp, #8
   d6188:	f003 f96c 	bl	d9464 <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d618c:	4620      	mov	r0, r4
   d618e:	b006      	add	sp, #24
   d6190:	bd10      	pop	{r4, pc}
   d6192:	bf00      	nop
   d6194:	000dd0c4 	.word	0x000dd0c4

000d6198 <_ZN4Nmea13getNextIsNullEm>:

bool Nmea::getNextIsNull(uint32_t from)
{
   d6198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        String nextChar = String(this->_data.charAt(from + 1));
   d619a:	3101      	adds	r1, #1
   d619c:	3014      	adds	r0, #20
   d619e:	f003 fafc 	bl	d979a <_ZNK6String6charAtEj>
   d61a2:	4601      	mov	r1, r0
   d61a4:	4668      	mov	r0, sp
   d61a6:	f003 fa0d 	bl	d95c4 <_ZN6StringC1Ec>
        returnValue = nextChar.equals(",");
   d61aa:	4906      	ldr	r1, [pc, #24]	; (d61c4 <_ZN4Nmea13getNextIsNullEm+0x2c>)
   d61ac:	4668      	mov	r0, sp
   d61ae:	f003 faba 	bl	d9726 <_ZNK6String6equalsEPKc>
   d61b2:	4604      	mov	r4, r0
        String nextChar = String(this->_data.charAt(from + 1));
   d61b4:	4668      	mov	r0, sp
   d61b6:	f003 f955 	bl	d9464 <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d61ba:	1e20      	subs	r0, r4, #0
   d61bc:	bf18      	it	ne
   d61be:	2001      	movne	r0, #1
   d61c0:	b004      	add	sp, #16
   d61c2:	bd10      	pop	{r4, pc}
   d61c4:	000dd0c4 	.word	0x000dd0c4

000d61c8 <_ZN4Nmea13getNextUint32EmPm>:

int32_t Nmea::getNextUint32(uint32_t from, uint32_t* value)
{
   d61c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d61ca:	2300      	movs	r3, #0
   d61cc:	6013      	str	r3, [r2, #0]
{
   d61ce:	4606      	mov	r6, r0
   d61d0:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d61d2:	f7ff ffc9 	bl	d6168 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d61d6:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d61d8:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d61da:	d104      	bne.n	d61e6 <_ZN4Nmea13getNextUint32EmPm+0x1e>
    int32_t returnValue = -1;
   d61dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d61e0:	4620      	mov	r0, r4
   d61e2:	b004      	add	sp, #16
   d61e4:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d61e6:	4601      	mov	r1, r0
   d61e8:	4630      	mov	r0, r6
   d61ea:	f7ff ffd5 	bl	d6198 <_ZN4Nmea13getNextIsNullEm>
   d61ee:	2800      	cmp	r0, #0
   d61f0:	d1f4      	bne.n	d61dc <_ZN4Nmea13getNextUint32EmPm+0x14>
        returnValue = index + 1;
   d61f2:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toInt();
   d61f4:	4622      	mov	r2, r4
   d61f6:	f106 0114 	add.w	r1, r6, #20
   d61fa:	4668      	mov	r0, sp
   d61fc:	f003 fb28 	bl	d9850 <_ZNK6String9substringEj>
   d6200:	4668      	mov	r0, sp
   d6202:	f003 fb2c 	bl	d985e <_ZNK6String5toIntEv>
   d6206:	6028      	str	r0, [r5, #0]
   d6208:	4668      	mov	r0, sp
   d620a:	f003 f92b 	bl	d9464 <_ZN6StringD1Ev>
    return returnValue;
   d620e:	e7e7      	b.n	d61e0 <_ZN4Nmea13getNextUint32EmPm+0x18>

000d6210 <_ZN4Nmea12getNextUint8EmPh>:

int32_t Nmea::getNextUint8(uint32_t from, uint8_t* value)
{
   d6210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d6212:	2300      	movs	r3, #0
   d6214:	7013      	strb	r3, [r2, #0]
{
   d6216:	4606      	mov	r6, r0
   d6218:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d621a:	f7ff ffa5 	bl	d6168 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d621e:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d6220:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d6222:	d104      	bne.n	d622e <_ZN4Nmea12getNextUint8EmPh+0x1e>
    int32_t returnValue = -1;
   d6224:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d6228:	4620      	mov	r0, r4
   d622a:	b004      	add	sp, #16
   d622c:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d622e:	4601      	mov	r1, r0
   d6230:	4630      	mov	r0, r6
   d6232:	f7ff ffb1 	bl	d6198 <_ZN4Nmea13getNextIsNullEm>
   d6236:	2800      	cmp	r0, #0
   d6238:	d1f4      	bne.n	d6224 <_ZN4Nmea12getNextUint8EmPh+0x14>
        returnValue = index + 1;
   d623a:	3401      	adds	r4, #1
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
   d623c:	4622      	mov	r2, r4
   d623e:	f106 0114 	add.w	r1, r6, #20
   d6242:	4668      	mov	r0, sp
   d6244:	f003 fb04 	bl	d9850 <_ZNK6String9substringEj>
   d6248:	4668      	mov	r0, sp
   d624a:	f003 fb08 	bl	d985e <_ZNK6String5toIntEv>
   d624e:	7028      	strb	r0, [r5, #0]
   d6250:	4668      	mov	r0, sp
   d6252:	f003 f907 	bl	d9464 <_ZN6StringD1Ev>
    return returnValue;
   d6256:	e7e7      	b.n	d6228 <_ZN4Nmea12getNextUint8EmPh+0x18>

000d6258 <_ZN4Nmea12getNextFloatEmPf>:

int32_t Nmea::getNextFloat(uint32_t from, float* value)
{
   d6258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d625a:	2300      	movs	r3, #0
   d625c:	6013      	str	r3, [r2, #0]
{
   d625e:	4606      	mov	r6, r0
   d6260:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d6262:	f7ff ff81 	bl	d6168 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d6266:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d6268:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d626a:	d104      	bne.n	d6276 <_ZN4Nmea12getNextFloatEmPf+0x1e>
    int32_t returnValue = -1;
   d626c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toFloat();
    }
    
    return returnValue;
}
   d6270:	4620      	mov	r0, r4
   d6272:	b004      	add	sp, #16
   d6274:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d6276:	4601      	mov	r1, r0
   d6278:	4630      	mov	r0, r6
   d627a:	f7ff ff8d 	bl	d6198 <_ZN4Nmea13getNextIsNullEm>
   d627e:	2800      	cmp	r0, #0
   d6280:	d1f4      	bne.n	d626c <_ZN4Nmea12getNextFloatEmPf+0x14>
        returnValue = index + 1;
   d6282:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toFloat();
   d6284:	4622      	mov	r2, r4
   d6286:	f106 0114 	add.w	r1, r6, #20
   d628a:	4668      	mov	r0, sp
   d628c:	f003 fae0 	bl	d9850 <_ZNK6String9substringEj>
   d6290:	4668      	mov	r0, sp
   d6292:	f003 fae9 	bl	d9868 <_ZNK6String7toFloatEv>
   d6296:	4668      	mov	r0, sp
   d6298:	ed85 0a00 	vstr	s0, [r5]
   d629c:	f003 f8e2 	bl	d9464 <_ZN6StringD1Ev>
    return returnValue;
   d62a0:	e7e6      	b.n	d6270 <_ZN4Nmea12getNextFloatEmPf+0x18>
	...

000d62a4 <_ZN4Nmea13getNextStringEmmP6String>:

int32_t Nmea::getNextString(uint32_t from, uint32_t length, String* value)
{
   d62a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d62a8:	4698      	mov	r8, r3
   d62aa:	460c      	mov	r4, r1
   d62ac:	4605      	mov	r5, r0
    int32_t returnValue = -1;
    *value = String("");
   d62ae:	4918      	ldr	r1, [pc, #96]	; (d6310 <_ZN4Nmea13getNextStringEmmP6String+0x6c>)
   d62b0:	4668      	mov	r0, sp
{
   d62b2:	4616      	mov	r6, r2
    *value = String("");
   d62b4:	f003 f921 	bl	d94fa <_ZN6StringC1EPKc>
   d62b8:	4669      	mov	r1, sp
   d62ba:	4640      	mov	r0, r8
   d62bc:	f003 f968 	bl	d9590 <_ZN6StringaSEOS_>
   d62c0:	4668      	mov	r0, sp
   d62c2:	f003 f8cf 	bl	d9464 <_ZN6StringD1Ev>

     // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d62c6:	4621      	mov	r1, r4
   d62c8:	4628      	mov	r0, r5
   d62ca:	f7ff ff4d 	bl	d6168 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d62ce:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d62d0:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d62d2:	d105      	bne.n	d62e0 <_ZN4Nmea13getNextStringEmmP6String+0x3c>
    int32_t returnValue = -1;
   d62d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = String(this->_data.substring(index + 1, index + 1 + length));
    }
    
    return returnValue;
   d62d8:	4638      	mov	r0, r7
   d62da:	b004      	add	sp, #16
   d62dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d62e0:	4601      	mov	r1, r0
   d62e2:	4628      	mov	r0, r5
   d62e4:	f7ff ff58 	bl	d6198 <_ZN4Nmea13getNextIsNullEm>
   d62e8:	2800      	cmp	r0, #0
   d62ea:	d1f3      	bne.n	d62d4 <_ZN4Nmea13getNextStringEmmP6String+0x30>
        returnValue = index + 1;
   d62ec:	1c67      	adds	r7, r4, #1
        *value = String(this->_data.substring(index + 1, index + 1 + length));
   d62ee:	3601      	adds	r6, #1
   d62f0:	1933      	adds	r3, r6, r4
   d62f2:	463a      	mov	r2, r7
   d62f4:	f105 0114 	add.w	r1, r5, #20
   d62f8:	4668      	mov	r0, sp
   d62fa:	f003 fa89 	bl	d9810 <_ZNK6String9substringEjj>
   d62fe:	4669      	mov	r1, sp
   d6300:	4640      	mov	r0, r8
   d6302:	f003 f945 	bl	d9590 <_ZN6StringaSEOS_>
   d6306:	4668      	mov	r0, sp
   d6308:	f003 f8ac 	bl	d9464 <_ZN6StringD1Ev>
    return returnValue;
   d630c:	e7e4      	b.n	d62d8 <_ZN4Nmea13getNextStringEmmP6String+0x34>
   d630e:	bf00      	nop
   d6310:	000ddf70 	.word	0x000ddf70

000d6314 <_ZN9NmeaCacheC1Ev>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "NmeaCache.h"

NmeaCache::NmeaCache()
   d6314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6316:	4f07      	ldr	r7, [pc, #28]	; (d6334 <_ZN9NmeaCacheC1Ev+0x20>)
   d6318:	4604      	mov	r4, r0
   d631a:	4605      	mov	r5, r0
   d631c:	f100 0670 	add.w	r6, r0, #112	; 0x70
   d6320:	4628      	mov	r0, r5
   d6322:	4639      	mov	r1, r7
   d6324:	3510      	adds	r5, #16
   d6326:	f003 f8e8 	bl	d94fa <_ZN6StringC1EPKc>
   d632a:	42ae      	cmp	r6, r5
   d632c:	d1f8      	bne.n	d6320 <_ZN9NmeaCacheC1Ev+0xc>
{
}
   d632e:	4620      	mov	r0, r4
   d6330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6332:	bf00      	nop
   d6334:	000ddf70 	.word	0x000ddf70

000d6338 <_ZN9NmeaCache12msgIdToIndexE6String>:

uint8_t NmeaCache::msgIdToIndex(String messageId)
{
   d6338:	b530      	push	{r4, r5, lr}
   d633a:	b085      	sub	sp, #20
   d633c:	460c      	mov	r4, r1
    uint8_t returnValue = 0;
    
    if (messageId.startsWith(NMEA_MSGID_GGA))
   d633e:	4668      	mov	r0, sp
   d6340:	492e      	ldr	r1, [pc, #184]	; (d63fc <_ZN9NmeaCache12msgIdToIndexE6String+0xc4>)
   d6342:	f003 f8da 	bl	d94fa <_ZN6StringC1EPKc>
   d6346:	4669      	mov	r1, sp
   d6348:	4620      	mov	r0, r4
   d634a:	f003 fa14 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d634e:	4605      	mov	r5, r0
   d6350:	4668      	mov	r0, sp
   d6352:	f003 f887 	bl	d9464 <_ZN6StringD1Ev>
   d6356:	2d00      	cmp	r5, #0
   d6358:	d146      	bne.n	d63e8 <_ZN9NmeaCache12msgIdToIndexE6String+0xb0>
    {
        returnValue = NMEA_INDEX_GGA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSA))
   d635a:	4929      	ldr	r1, [pc, #164]	; (d6400 <_ZN9NmeaCache12msgIdToIndexE6String+0xc8>)
   d635c:	4668      	mov	r0, sp
   d635e:	f003 f8cc 	bl	d94fa <_ZN6StringC1EPKc>
   d6362:	4669      	mov	r1, sp
   d6364:	4620      	mov	r0, r4
   d6366:	f003 fa06 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d636a:	4605      	mov	r5, r0
   d636c:	4668      	mov	r0, sp
   d636e:	f003 f879 	bl	d9464 <_ZN6StringD1Ev>
   d6372:	2d00      	cmp	r5, #0
   d6374:	d13a      	bne.n	d63ec <_ZN9NmeaCache12msgIdToIndexE6String+0xb4>
    {
        returnValue = NMEA_INDEX_GSA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSV))
   d6376:	4923      	ldr	r1, [pc, #140]	; (d6404 <_ZN9NmeaCache12msgIdToIndexE6String+0xcc>)
   d6378:	4668      	mov	r0, sp
   d637a:	f003 f8be 	bl	d94fa <_ZN6StringC1EPKc>
   d637e:	4669      	mov	r1, sp
   d6380:	4620      	mov	r0, r4
   d6382:	f003 f9f8 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d6386:	4605      	mov	r5, r0
   d6388:	4668      	mov	r0, sp
   d638a:	f003 f86b 	bl	d9464 <_ZN6StringD1Ev>
   d638e:	bb7d      	cbnz	r5, d63f0 <_ZN9NmeaCache12msgIdToIndexE6String+0xb8>
    {
        returnValue = NMEA_INDEX_GSV;
    }
    else if (messageId.startsWith(NMEA_MSGID_RMC))
   d6390:	491d      	ldr	r1, [pc, #116]	; (d6408 <_ZN9NmeaCache12msgIdToIndexE6String+0xd0>)
   d6392:	4668      	mov	r0, sp
   d6394:	f003 f8b1 	bl	d94fa <_ZN6StringC1EPKc>
   d6398:	4669      	mov	r1, sp
   d639a:	4620      	mov	r0, r4
   d639c:	f003 f9eb 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d63a0:	4605      	mov	r5, r0
   d63a2:	4668      	mov	r0, sp
   d63a4:	f003 f85e 	bl	d9464 <_ZN6StringD1Ev>
   d63a8:	bb25      	cbnz	r5, d63f4 <_ZN9NmeaCache12msgIdToIndexE6String+0xbc>
    {
        returnValue = NMEA_INDEX_RMC;
    }
    else if (messageId.startsWith(NMEA_MSGID_VTG))
   d63aa:	4918      	ldr	r1, [pc, #96]	; (d640c <_ZN9NmeaCache12msgIdToIndexE6String+0xd4>)
   d63ac:	4668      	mov	r0, sp
   d63ae:	f003 f8a4 	bl	d94fa <_ZN6StringC1EPKc>
   d63b2:	4669      	mov	r1, sp
   d63b4:	4620      	mov	r0, r4
   d63b6:	f003 f9de 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d63ba:	4605      	mov	r5, r0
   d63bc:	4668      	mov	r0, sp
   d63be:	f003 f851 	bl	d9464 <_ZN6StringD1Ev>
   d63c2:	b9cd      	cbnz	r5, d63f8 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    {
        returnValue = NMEA_INDEX_VTG;
    }
    else if (messageId.startsWith(NMEA_MSGID_PGT))
   d63c4:	4912      	ldr	r1, [pc, #72]	; (d6410 <_ZN9NmeaCache12msgIdToIndexE6String+0xd8>)
   d63c6:	4668      	mov	r0, sp
   d63c8:	f003 f897 	bl	d94fa <_ZN6StringC1EPKc>
   d63cc:	4669      	mov	r1, sp
   d63ce:	4620      	mov	r0, r4
   d63d0:	f003 f9d1 	bl	d9776 <_ZNK6String10startsWithERKS_>
   d63d4:	4604      	mov	r4, r0
   d63d6:	4668      	mov	r0, sp
   d63d8:	f003 f844 	bl	d9464 <_ZN6StringD1Ev>
   d63dc:	2c00      	cmp	r4, #0
    {
        returnValue = NMEA_INDEX_PGT;
   d63de:	bf18      	it	ne
   d63e0:	2406      	movne	r4, #6
    }
    
    return returnValue;
   d63e2:	4620      	mov	r0, r4
   d63e4:	b005      	add	sp, #20
   d63e6:	bd30      	pop	{r4, r5, pc}
        returnValue = NMEA_INDEX_GGA;
   d63e8:	2401      	movs	r4, #1
   d63ea:	e7fa      	b.n	d63e2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSA;
   d63ec:	2402      	movs	r4, #2
   d63ee:	e7f8      	b.n	d63e2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSV;
   d63f0:	2403      	movs	r4, #3
   d63f2:	e7f6      	b.n	d63e2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_RMC;
   d63f4:	2404      	movs	r4, #4
   d63f6:	e7f4      	b.n	d63e2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_VTG;
   d63f8:	2405      	movs	r4, #5
   d63fa:	e7f2      	b.n	d63e2 <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
   d63fc:	000ddcca 	.word	0x000ddcca
   d6400:	000ddcd1 	.word	0x000ddcd1
   d6404:	000ddcd8 	.word	0x000ddcd8
   d6408:	000ddcdf 	.word	0x000ddcdf
   d640c:	000ddce6 	.word	0x000ddce6
   d6410:	000ddced 	.word	0x000ddced

000d6414 <_ZN5Pgtop5parseEv>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
{
}

bool Pgtop::parse()
{
   d6414:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d6416:	1d06      	adds	r6, r0, #4
{
   d6418:	4604      	mov	r4, r0
    if (this->isValid())
   d641a:	4630      	mov	r0, r6
   d641c:	f7ff fe92 	bl	d6144 <_ZN4Nmea7isValidEv>
   d6420:	4605      	mov	r5, r0
   d6422:	b158      	cbz	r0, d643c <_ZN5Pgtop5parseEv+0x28>
    {
        // ***
        // *** Get the first field value (Command ID).
        // ***
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d6424:	f104 0228 	add.w	r2, r4, #40	; 0x28
   d6428:	2100      	movs	r1, #0
   d642a:	4630      	mov	r0, r6
   d642c:	f7ff fecc 	bl	d61c8 <_ZN4Nmea13getNextUint32EmPm>
        
        // ***
        // *** Get the next field value (Reference).
        // ***
        index = getNextUint32(index, &this->reference);
   d6430:	f104 022c 	add.w	r2, r4, #44	; 0x2c
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d6434:	4601      	mov	r1, r0
        index = getNextUint32(index, &this->reference);
   d6436:	4630      	mov	r0, r6
   d6438:	f7ff fec6 	bl	d61c8 <_ZN4Nmea13getNextUint32EmPm>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d643c:	4628      	mov	r0, r5
   d643e:	bd70      	pop	{r4, r5, r6, pc}

000d6440 <_ZN3Gga5parseEv>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
{
}

bool Gga::parse()
{
   d6440:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d6442:	1d05      	adds	r5, r0, #4
{
   d6444:	4604      	mov	r4, r0
    if (this->isValid())
   d6446:	4628      	mov	r0, r5
   d6448:	f7ff fe7c 	bl	d6144 <_ZN4Nmea7isValidEv>
   d644c:	4606      	mov	r6, r0
   d644e:	2800      	cmp	r0, #0
   d6450:	d055      	beq.n	d64fe <_ZN3Gga5parseEv+0xbe>
    {
        // ***
        // *** Get the first field value (UTC Time).
        // ***
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d6452:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d6456:	220a      	movs	r2, #10
   d6458:	2100      	movs	r1, #0
   d645a:	4628      	mov	r0, r5
   d645c:	f7ff ff22 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Latitude).
        // ***
        index = this->getNextString(index, 9,  &this->latitude);
   d6460:	f104 0338 	add.w	r3, r4, #56	; 0x38
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d6464:	4601      	mov	r1, r0
        index = this->getNextString(index, 9,  &this->latitude);
   d6466:	2209      	movs	r2, #9
   d6468:	4628      	mov	r0, r5
   d646a:	f7ff ff1b 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (North/South Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d646e:	f104 0348 	add.w	r3, r4, #72	; 0x48
        index = this->getNextString(index, 9,  &this->latitude);
   d6472:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d6474:	2201      	movs	r2, #1
   d6476:	4628      	mov	r0, r5
   d6478:	f7ff ff14 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Longitude).
        // ***
        index = this->getNextString(index, 10,  &this->longitude);
   d647c:	f104 0358 	add.w	r3, r4, #88	; 0x58
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d6480:	4601      	mov	r1, r0
        index = this->getNextString(index, 10,  &this->longitude);
   d6482:	220a      	movs	r2, #10
   d6484:	4628      	mov	r0, r5
   d6486:	f7ff ff0d 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d648a:	f104 0368 	add.w	r3, r4, #104	; 0x68
        index = this->getNextString(index, 10,  &this->longitude);
   d648e:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d6490:	2201      	movs	r2, #1
   d6492:	4628      	mov	r0, r5
   d6494:	f7ff ff06 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Position Fix Indicator).
        // ***
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d6498:	f104 0278 	add.w	r2, r4, #120	; 0x78
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d649c:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d649e:	4628      	mov	r0, r5
   d64a0:	f7ff feb6 	bl	d6210 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextUint8(index, &this->satellitesUsed);
   d64a4:	f104 0279 	add.w	r2, r4, #121	; 0x79
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d64a8:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->satellitesUsed);
   d64aa:	4628      	mov	r0, r5
   d64ac:	f7ff feb0 	bl	d6210 <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->hdop);
   d64b0:	f104 027c 	add.w	r2, r4, #124	; 0x7c
        index = this->getNextUint8(index, &this->satellitesUsed);
   d64b4:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->hdop);
   d64b6:	4628      	mov	r0, r5
   d64b8:	f7ff fece 	bl	d6258 <_ZN4Nmea12getNextFloatEmPf>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->altitude);
   d64bc:	f104 0280 	add.w	r2, r4, #128	; 0x80
        index = this->getNextFloat(index, &this->hdop);
   d64c0:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->altitude);
   d64c2:	4628      	mov	r0, r5
   d64c4:	f7ff fec8 	bl	d6258 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d64c8:	f104 0384 	add.w	r3, r4, #132	; 0x84
        index = this->getNextFloat(index, &this->altitude);
   d64cc:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d64ce:	2201      	movs	r2, #1
   d64d0:	4628      	mov	r0, r5
   d64d2:	f7ff fee7 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d64d6:	f104 0294 	add.w	r2, r4, #148	; 0x94
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d64da:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d64dc:	4628      	mov	r0, r5
   d64de:	f7ff febb 	bl	d6258 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d64e2:	f104 0398 	add.w	r3, r4, #152	; 0x98
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d64e6:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d64e8:	2201      	movs	r2, #1
   d64ea:	4628      	mov	r0, r5
   d64ec:	f7ff feda 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d64f0:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d64f4:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d64f6:	2201      	movs	r2, #1
   d64f8:	4628      	mov	r0, r5
   d64fa:	f7ff fed3 	bl	d62a4 <_ZN4Nmea13getNextStringEmmP6String>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d64fe:	4630      	mov	r0, r6
   d6500:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6504 <_ZN5PgtopC1E9NmeaCache>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
   d6504:	b530      	push	{r4, r5, lr}
   d6506:	b0a1      	sub	sp, #132	; 0x84
   d6508:	4604      	mov	r4, r0
   d650a:	460d      	mov	r5, r1
   d650c:	4668      	mov	r0, sp
   d650e:	490c      	ldr	r1, [pc, #48]	; (d6540 <_ZN5PgtopC1E9NmeaCache+0x3c>)
   d6510:	f002 fff3 	bl	d94fa <_ZN6StringC1EPKc>
   d6514:	4629      	mov	r1, r5
   d6516:	a804      	add	r0, sp, #16
   d6518:	f7fd ff17 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d651c:	ab04      	add	r3, sp, #16
   d651e:	2206      	movs	r2, #6
   d6520:	4669      	mov	r1, sp
   d6522:	1d20      	adds	r0, r4, #4
   d6524:	f7ff fd88 	bl	d6038 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d6528:	a804      	add	r0, sp, #16
   d652a:	f7fd ff01 	bl	d4330 <_ZN9NmeaCacheD1Ev>
   d652e:	4668      	mov	r0, sp
   d6530:	f002 ff98 	bl	d9464 <_ZN6StringD1Ev>
   d6534:	4b03      	ldr	r3, [pc, #12]	; (d6544 <_ZN5PgtopC1E9NmeaCache+0x40>)
   d6536:	6023      	str	r3, [r4, #0]
}
   d6538:	4620      	mov	r0, r4
   d653a:	b021      	add	sp, #132	; 0x84
   d653c:	bd30      	pop	{r4, r5, pc}
   d653e:	bf00      	nop
   d6540:	000ddced 	.word	0x000ddced
   d6544:	000ddd08 	.word	0x000ddd08

000d6548 <_ZN3GgaC1E9NmeaCache>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
   d6548:	b530      	push	{r4, r5, lr}
   d654a:	b0a1      	sub	sp, #132	; 0x84
   d654c:	4604      	mov	r4, r0
   d654e:	460d      	mov	r5, r1
   d6550:	4668      	mov	r0, sp
   d6552:	4920      	ldr	r1, [pc, #128]	; (d65d4 <_ZN3GgaC1E9NmeaCache+0x8c>)
   d6554:	f002 ffd1 	bl	d94fa <_ZN6StringC1EPKc>
   d6558:	4629      	mov	r1, r5
   d655a:	a804      	add	r0, sp, #16
   d655c:	f7fd fef5 	bl	d434a <_ZN9NmeaCacheC1ERKS_>
   d6560:	2201      	movs	r2, #1
   d6562:	ab04      	add	r3, sp, #16
   d6564:	4669      	mov	r1, sp
   d6566:	1d20      	adds	r0, r4, #4
   d6568:	f7ff fd66 	bl	d6038 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d656c:	a804      	add	r0, sp, #16
   d656e:	f7fd fedf 	bl	d4330 <_ZN9NmeaCacheD1Ev>
   d6572:	4668      	mov	r0, sp
   d6574:	4d18      	ldr	r5, [pc, #96]	; (d65d8 <_ZN3GgaC1E9NmeaCache+0x90>)
   d6576:	f002 ff75 	bl	d9464 <_ZN6StringD1Ev>
   d657a:	4620      	mov	r0, r4
   d657c:	4b17      	ldr	r3, [pc, #92]	; (d65dc <_ZN3GgaC1E9NmeaCache+0x94>)
   d657e:	f840 3b28 	str.w	r3, [r0], #40
   d6582:	4629      	mov	r1, r5
   d6584:	f002 ffb9 	bl	d94fa <_ZN6StringC1EPKc>
   d6588:	4629      	mov	r1, r5
   d658a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d658e:	f002 ffb4 	bl	d94fa <_ZN6StringC1EPKc>
   d6592:	4629      	mov	r1, r5
   d6594:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6598:	f002 ffaf 	bl	d94fa <_ZN6StringC1EPKc>
   d659c:	4629      	mov	r1, r5
   d659e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d65a2:	f002 ffaa 	bl	d94fa <_ZN6StringC1EPKc>
   d65a6:	4629      	mov	r1, r5
   d65a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d65ac:	f002 ffa5 	bl	d94fa <_ZN6StringC1EPKc>
   d65b0:	4629      	mov	r1, r5
   d65b2:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d65b6:	f002 ffa0 	bl	d94fa <_ZN6StringC1EPKc>
   d65ba:	4629      	mov	r1, r5
   d65bc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d65c0:	f002 ff9b 	bl	d94fa <_ZN6StringC1EPKc>
   d65c4:	4629      	mov	r1, r5
   d65c6:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d65ca:	f002 ff96 	bl	d94fa <_ZN6StringC1EPKc>
}
   d65ce:	4620      	mov	r0, r4
   d65d0:	b021      	add	sp, #132	; 0x84
   d65d2:	bd30      	pop	{r4, r5, pc}
   d65d4:	000ddcca 	.word	0x000ddcca
   d65d8:	000ddf70 	.word	0x000ddf70
   d65dc:	000ddcfc 	.word	0x000ddcfc

000d65e0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d65e0:	b510      	push	{r4, lr}
   d65e2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d65e4:	3024      	adds	r0, #36	; 0x24
   d65e6:	f000 fe77 	bl	d72d8 <_ZN8FatCache4syncEv>
   d65ea:	b128      	cbz	r0, d65f8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d65ec:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d65f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d65f4:	f000 be70 	b.w	d72d8 <_ZN8FatCache4syncEv>
  }
   d65f8:	bd10      	pop	{r4, pc}

000d65fa <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d65fa:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d65fc:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d65fe:	f043 0304 	orr.w	r3, r3, #4
   d6602:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6604:	f100 0210 	add.w	r2, r0, #16
   d6608:	6880      	ldr	r0, [r0, #8]
   d660a:	f000 bf1b 	b.w	d7444 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d6610 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d6610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6614:	7801      	ldrb	r1, [r0, #0]
   d6616:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d661a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d661c:	d003      	beq.n	d6626 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d661e:	2600      	movs	r6, #0
}
   d6620:	4630      	mov	r0, r6
   d6622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d6626:	6942      	ldr	r2, [r0, #20]
   d6628:	4b17      	ldr	r3, [pc, #92]	; (d6688 <_ZN7FatFile13addDirClusterEv+0x78>)
   d662a:	429a      	cmp	r2, r3
   d662c:	d2f7      	bcs.n	d661e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d662e:	f7ff ffe4 	bl	d65fa <_ZN7FatFile10addClusterEv>
   d6632:	4606      	mov	r6, r0
   d6634:	2800      	cmp	r0, #0
   d6636:	d0f2      	beq.n	d661e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6638:	6921      	ldr	r1, [r4, #16]
   d663a:	68a0      	ldr	r0, [r4, #8]
   d663c:	f000 fe97 	bl	d736e <_ZNK9FatVolume17clusterFirstBlockEm>
   d6640:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6642:	68a0      	ldr	r0, [r4, #8]
   d6644:	2205      	movs	r2, #5
   d6646:	4639      	mov	r1, r7
   d6648:	3024      	adds	r0, #36	; 0x24
   d664a:	f000 fe6d 	bl	d7328 <_ZN8FatCache4readEmh>
  if (!pc) {
   d664e:	4680      	mov	r8, r0
   d6650:	2800      	cmp	r0, #0
   d6652:	d0e4      	beq.n	d661e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d6654:	4629      	mov	r1, r5
   d6656:	f44f 7200 	mov.w	r2, #512	; 0x200
   d665a:	f004 fc74 	bl	daf46 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d665e:	2501      	movs	r5, #1
   d6660:	68a3      	ldr	r3, [r4, #8]
   d6662:	791a      	ldrb	r2, [r3, #4]
   d6664:	42aa      	cmp	r2, r5
   d6666:	d909      	bls.n	d667c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d6668:	6818      	ldr	r0, [r3, #0]
   d666a:	4642      	mov	r2, r8
   d666c:	19e9      	adds	r1, r5, r7
   d666e:	f001 f9c4 	bl	d79fa <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d6672:	2800      	cmp	r0, #0
   d6674:	d0d3      	beq.n	d661e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d6676:	3501      	adds	r5, #1
   d6678:	b2ed      	uxtb	r5, r5
   d667a:	e7f1      	b.n	d6660 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d667c:	6963      	ldr	r3, [r4, #20]
   d667e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d6682:	6163      	str	r3, [r4, #20]
  return true;
   d6684:	e7cc      	b.n	d6620 <_ZN7FatFile13addDirClusterEv+0x10>
   d6686:	bf00      	nop
   d6688:	001ffe00 	.word	0x001ffe00

000d668c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d668c:	b510      	push	{r4, lr}
   d668e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d6690:	6880      	ldr	r0, [r0, #8]
   d6692:	460a      	mov	r2, r1
   d6694:	3024      	adds	r0, #36	; 0x24
   d6696:	69a1      	ldr	r1, [r4, #24]
   d6698:	f000 fe46 	bl	d7328 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d669c:	b120      	cbz	r0, d66a8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d669e:	88a3      	ldrh	r3, [r4, #4]
   d66a0:	f003 030f 	and.w	r3, r3, #15
   d66a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d66a8:	bd10      	pop	{r4, pc}

000d66aa <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d66aa:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d66ac:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d66ae:	4605      	mov	r5, r0
   d66b0:	460e      	mov	r6, r1
  if (isOpen()) {
   d66b2:	b94c      	cbnz	r4, d66c8 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d66b4:	2224      	movs	r2, #36	; 0x24
   d66b6:	4621      	mov	r1, r4
   d66b8:	f004 fc45 	bl	daf46 <memset>

  m_vol = vol;
   d66bc:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d66be:	79f3      	ldrb	r3, [r6, #7]
   d66c0:	2b10      	cmp	r3, #16
   d66c2:	d003      	beq.n	d66cc <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d66c4:	2b20      	cmp	r3, #32
   d66c6:	d007      	beq.n	d66d8 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d66c8:	2000      	movs	r0, #0
   d66ca:	e004      	b.n	d66d6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d66cc:	2320      	movs	r3, #32
  m_flags = F_READ;
   d66ce:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d66d0:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d66d2:	70ac      	strb	r4, [r5, #2]
  return true;
   d66d4:	4620      	mov	r0, r4
}
   d66d6:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d66d8:	2340      	movs	r3, #64	; 0x40
   d66da:	e7f8      	b.n	d66ce <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d66dc <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d66dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d66e0:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d66e2:	4604      	mov	r4, r0
   d66e4:	4688      	mov	r8, r1
   d66e6:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d66e8:	2b00      	cmp	r3, #0
   d66ea:	d05d      	beq.n	d67a8 <_ZN7FatFile4readEPvj+0xcc>
   d66ec:	7882      	ldrb	r2, [r0, #2]
   d66ee:	07d1      	lsls	r1, r2, #31
   d66f0:	d55a      	bpl.n	d67a8 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d66f2:	071a      	lsls	r2, r3, #28
   d66f4:	d52d      	bpl.n	d6752 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d66f6:	69c3      	ldr	r3, [r0, #28]
   d66f8:	6942      	ldr	r2, [r0, #20]
   d66fa:	1a9b      	subs	r3, r3, r2
   d66fc:	429d      	cmp	r5, r3
   d66fe:	bf28      	it	cs
   d6700:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6702:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d6704:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6708:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d670c:	2e00      	cmp	r6, #0
   d670e:	f000 808f 	beq.w	d6830 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d6712:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d6714:	6963      	ldr	r3, [r4, #20]
   d6716:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6718:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d671a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d671e:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6722:	d51f      	bpl.n	d6764 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6724:	6a00      	ldr	r0, [r0, #32]
   d6726:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6728:	68a0      	ldr	r0, [r4, #8]
   d672a:	f1ba 0f00 	cmp.w	sl, #0
   d672e:	d142      	bne.n	d67b6 <_ZN7FatFile4readEPvj+0xda>
   d6730:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6734:	d33f      	bcc.n	d67b6 <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d6736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6738:	4299      	cmp	r1, r3
   d673a:	d03c      	beq.n	d67b6 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d673c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d6740:	d252      	bcs.n	d67e8 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d6742:	6800      	ldr	r0, [r0, #0]
   d6744:	4642      	mov	r2, r8
   d6746:	f001 f8cf 	bl	d78e8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d674a:	b368      	cbz	r0, d67a8 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d674c:	f44f 7700 	mov.w	r7, #512	; 0x200
   d6750:	e044      	b.n	d67dc <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d6752:	069b      	lsls	r3, r3, #26
   d6754:	d5d5      	bpl.n	d6702 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6756:	6883      	ldr	r3, [r0, #8]
   d6758:	891a      	ldrh	r2, [r3, #8]
   d675a:	6943      	ldr	r3, [r0, #20]
   d675c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d6760:	b29b      	uxth	r3, r3
   d6762:	e7cb      	b.n	d66fc <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6764:	f890 9005 	ldrb.w	r9, [r0, #5]
   d6768:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d676c:	f1ba 0f00 	cmp.w	sl, #0
   d6770:	d108      	bne.n	d6784 <_ZN7FatFile4readEPvj+0xa8>
   d6772:	f1b9 0f00 	cmp.w	r9, #0
   d6776:	d105      	bne.n	d6784 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d6778:	b95b      	cbnz	r3, d6792 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d677a:	0651      	lsls	r1, r2, #25
   d677c:	bf4c      	ite	mi
   d677e:	6a03      	ldrmi	r3, [r0, #32]
   d6780:	6a23      	ldrpl	r3, [r4, #32]
   d6782:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6784:	6921      	ldr	r1, [r4, #16]
   d6786:	68a0      	ldr	r0, [r4, #8]
   d6788:	f000 fdf1 	bl	d736e <_ZNK9FatVolume17clusterFirstBlockEm>
   d678c:	eb09 0100 	add.w	r1, r9, r0
   d6790:	e7ca      	b.n	d6728 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6792:	6921      	ldr	r1, [r4, #16]
   d6794:	465a      	mov	r2, fp
   d6796:	f000 fdf0 	bl	d737a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d679a:	2800      	cmp	r0, #0
   d679c:	db04      	blt.n	d67a8 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d679e:	d1f1      	bne.n	d6784 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d67a0:	7823      	ldrb	r3, [r4, #0]
   d67a2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d67a6:	d143      	bne.n	d6830 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d67a8:	7863      	ldrb	r3, [r4, #1]
   d67aa:	f043 0302 	orr.w	r3, r3, #2
   d67ae:	7063      	strb	r3, [r4, #1]
  return -1;
   d67b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d67b4:	e03d      	b.n	d6832 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d67b6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d67ba:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d67bc:	f04f 0200 	mov.w	r2, #0
   d67c0:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d67c4:	bf28      	it	cs
   d67c6:	4637      	movcs	r7, r6
   d67c8:	f000 fdae 	bl	d7328 <_ZN8FatCache4readEmh>
      if (!pc) {
   d67cc:	2800      	cmp	r0, #0
   d67ce:	d0eb      	beq.n	d67a8 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d67d0:	eb00 010a 	add.w	r1, r0, sl
   d67d4:	463a      	mov	r2, r7
   d67d6:	4640      	mov	r0, r8
   d67d8:	f004 fba7 	bl	daf2a <memcpy>
    m_curPosition += n;
   d67dc:	6963      	ldr	r3, [r4, #20]
   d67de:	443b      	add	r3, r7
    dst += n;
   d67e0:	44b8      	add	r8, r7
    m_curPosition += n;
   d67e2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d67e4:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d67e6:	e791      	b.n	d670c <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d67e8:	7822      	ldrb	r2, [r4, #0]
   d67ea:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d67ec:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d67f0:	d406      	bmi.n	d6800 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d67f2:	7902      	ldrb	r2, [r0, #4]
   d67f4:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d67f8:	b2d2      	uxtb	r2, r2
   d67fa:	4592      	cmp	sl, r2
   d67fc:	bf28      	it	cs
   d67fe:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6800:	4299      	cmp	r1, r3
      n = 512*nb;
   d6802:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6806:	d208      	bcs.n	d681a <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d6808:	68a0      	ldr	r0, [r4, #8]
   d680a:	4653      	mov	r3, sl
   d680c:	6800      	ldr	r0, [r0, #0]
   d680e:	4642      	mov	r2, r8
   d6810:	f001 f8b2 	bl	d7978 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6814:	2800      	cmp	r0, #0
   d6816:	d1e1      	bne.n	d67dc <_ZN7FatFile4readEPvj+0x100>
   d6818:	e7c6      	b.n	d67a8 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d681a:	4453      	add	r3, sl
   d681c:	428b      	cmp	r3, r1
   d681e:	d9f3      	bls.n	d6808 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d6820:	3024      	adds	r0, #36	; 0x24
   d6822:	9101      	str	r1, [sp, #4]
   d6824:	f000 fd58 	bl	d72d8 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d6828:	9901      	ldr	r1, [sp, #4]
   d682a:	2800      	cmp	r0, #0
   d682c:	d1ec      	bne.n	d6808 <_ZN7FatFile4readEPvj+0x12c>
   d682e:	e7bb      	b.n	d67a8 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d6830:	1ba8      	subs	r0, r5, r6
}
   d6832:	b003      	add	sp, #12
   d6834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6838 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d6838:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d683a:	2201      	movs	r2, #1
   d683c:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d6840:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d6844:	4604      	mov	r4, r0
   d6846:	f7ff ff49 	bl	d66dc <_ZN7FatFile4readEPvj>
   d684a:	2801      	cmp	r0, #1
   d684c:	bf0a      	itet	eq
   d684e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d6852:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d6856:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d685a:	b002      	add	sp, #8
   d685c:	bd70      	pop	{r4, r5, r6, pc}

000d685e <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d685e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6860:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d6862:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6866:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6868:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d686c:	d000      	beq.n	d6870 <_ZN7FatFile12readDirCacheEb+0x12>
   d686e:	b999      	cbnz	r1, d6898 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d6870:	2201      	movs	r2, #1
   d6872:	f10d 0107 	add.w	r1, sp, #7
   d6876:	4620      	mov	r0, r4
   d6878:	f7ff ff30 	bl	d66dc <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d687c:	b240      	sxtb	r0, r0
   d687e:	2801      	cmp	r0, #1
   d6880:	d002      	beq.n	d6888 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d6882:	2000      	movs	r0, #0
}
   d6884:	b003      	add	sp, #12
   d6886:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d6888:	6963      	ldr	r3, [r4, #20]
   d688a:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d688c:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d688e:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d6890:	3030      	adds	r0, #48	; 0x30
   d6892:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d6896:	e7f5      	b.n	d6884 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d6898:	3320      	adds	r3, #32
   d689a:	e7f7      	b.n	d688c <_ZN7FatFile12readDirCacheEb+0x2e>

000d689c <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d68a0:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d68a2:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d68a4:	4604      	mov	r4, r0
   d68a6:	460d      	mov	r5, r1
  if (!isOpen()) {
   d68a8:	b162      	cbz	r2, d68c4 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d68aa:	6940      	ldr	r0, [r0, #20]
   d68ac:	4288      	cmp	r0, r1
   d68ae:	d002      	beq.n	d68b6 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d68b0:	b919      	cbnz	r1, d68ba <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d68b2:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d68b4:	6165      	str	r5, [r4, #20]
    return true;
   d68b6:	2001      	movs	r0, #1
   d68b8:	e006      	b.n	d68c8 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d68ba:	0716      	lsls	r6, r2, #28
   d68bc:	d506      	bpl.n	d68cc <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d68be:	69e3      	ldr	r3, [r4, #28]
   d68c0:	428b      	cmp	r3, r1
   d68c2:	d20b      	bcs.n	d68dc <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d68c4:	6127      	str	r7, [r4, #16]
  return false;
   d68c6:	2000      	movs	r0, #0
}
   d68c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d68cc:	0691      	lsls	r1, r2, #26
   d68ce:	d505      	bpl.n	d68dc <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d68d0:	68a3      	ldr	r3, [r4, #8]
   d68d2:	891b      	ldrh	r3, [r3, #8]
   d68d4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d68d8:	d9ec      	bls.n	d68b4 <_ZN7FatFile7seekSetEm+0x18>
   d68da:	e7f3      	b.n	d68c4 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d68dc:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d68e0:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d68e4:	1e43      	subs	r3, r0, #1
   d68e6:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d68ea:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d68ec:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d68ee:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d68f0:	42b3      	cmp	r3, r6
   d68f2:	d800      	bhi.n	d68f6 <_ZN7FatFile7seekSetEm+0x5a>
   d68f4:	b998      	cbnz	r0, d691e <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d68f6:	0653      	lsls	r3, r2, #25
   d68f8:	bf4c      	ite	mi
   d68fa:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d68fe:	6a23      	ldrpl	r3, [r4, #32]
   d6900:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6902:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d6906:	2e00      	cmp	r6, #0
   d6908:	d0d4      	beq.n	d68b4 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d690a:	6921      	ldr	r1, [r4, #16]
   d690c:	68a0      	ldr	r0, [r4, #8]
   d690e:	4642      	mov	r2, r8
   d6910:	f000 fd33 	bl	d737a <_ZN9FatVolume6fatGetEmPm>
   d6914:	2800      	cmp	r0, #0
   d6916:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d691a:	dcf4      	bgt.n	d6906 <_ZN7FatFile7seekSetEm+0x6a>
   d691c:	e7d2      	b.n	d68c4 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d691e:	1af6      	subs	r6, r6, r3
   d6920:	e7ef      	b.n	d6902 <_ZN7FatFile7seekSetEm+0x66>

000d6922 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d6922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6924:	460f      	mov	r7, r1
   d6926:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d6928:	2100      	movs	r1, #0
   d692a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d692c:	4604      	mov	r4, r0
   d692e:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d6930:	f004 fb09 	bl	daf46 <memset>
  m_vol = dirFile->m_vol;
   d6934:	68b8      	ldr	r0, [r7, #8]
   d6936:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d6938:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d693a:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d693e:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d6942:	6a3b      	ldr	r3, [r7, #32]
   d6944:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6946:	0171      	lsls	r1, r6, #5
   d6948:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d694c:	7af3      	ldrb	r3, [r6, #11]
   d694e:	071f      	lsls	r7, r3, #28
   d6950:	d446      	bmi.n	d69e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d6952:	1843      	adds	r3, r0, r1
   d6954:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6958:	f003 0317 	and.w	r3, r3, #23
   d695c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d695e:	7af2      	ldrb	r2, [r6, #11]
   d6960:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d6964:	bf04      	itt	eq
   d6966:	f043 0308 	orreq.w	r3, r3, #8
   d696a:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d696c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6970:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d6972:	f005 0303 	and.w	r3, r5, #3
   d6976:	2b01      	cmp	r3, #1
   d6978:	d02c      	beq.n	d69d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d697a:	2b02      	cmp	r3, #2
   d697c:	d028      	beq.n	d69d0 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d697e:	bb7b      	cbnz	r3, d69e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d6980:	056a      	lsls	r2, r5, #21
   d6982:	d42d      	bmi.n	d69e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d6984:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d6986:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d6988:	78a2      	ldrb	r2, [r4, #2]
   d698a:	0793      	lsls	r3, r2, #30
   d698c:	d504      	bpl.n	d6998 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d698e:	7823      	ldrb	r3, [r4, #0]
   d6990:	06df      	lsls	r7, r3, #27
   d6992:	d425      	bmi.n	d69e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d6994:	07de      	lsls	r6, r3, #31
   d6996:	d423      	bmi.n	d69e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d6998:	11ab      	asrs	r3, r5, #6
   d699a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d699e:	f005 0608 	and.w	r6, r5, #8
   d69a2:	4333      	orrs	r3, r6
   d69a4:	4313      	orrs	r3, r2
   d69a6:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d69a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d69aa:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d69ac:	1843      	adds	r3, r0, r1
   d69ae:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d69b2:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d69b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d69ba:	056a      	lsls	r2, r5, #21
   d69bc:	d513      	bpl.n	d69e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d69be:	b959      	cbnz	r1, d69d8 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d69c0:	78a3      	ldrb	r3, [r4, #2]
   d69c2:	f043 0304 	orr.w	r3, r3, #4
   d69c6:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d69c8:	046b      	lsls	r3, r5, #17
   d69ca:	d410      	bmi.n	d69ee <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d69cc:	2001      	movs	r0, #1
}
   d69ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d69d0:	2303      	movs	r3, #3
   d69d2:	e7d8      	b.n	d6986 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d69d4:	2302      	movs	r3, #2
   d69d6:	e7d6      	b.n	d6986 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d69d8:	f000 fd6f 	bl	d74ba <_ZN9FatVolume9freeChainEm>
   d69dc:	2800      	cmp	r0, #0
   d69de:	d1ef      	bne.n	d69c0 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d69e0:	2000      	movs	r0, #0
   d69e2:	7020      	strb	r0, [r4, #0]
  return false;
   d69e4:	e7f3      	b.n	d69ce <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d69e6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d69e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d69ea:	61e3      	str	r3, [r4, #28]
   d69ec:	e7ec      	b.n	d69c8 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d69ee:	69e1      	ldr	r1, [r4, #28]
   d69f0:	4620      	mov	r0, r4
   d69f2:	f7ff ff53 	bl	d689c <_ZN7FatFile7seekSetEm>
   d69f6:	2800      	cmp	r0, #0
   d69f8:	d1e8      	bne.n	d69cc <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d69fa:	e7f1      	b.n	d69e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d69fc <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d69fc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d69fe:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d6a00:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6a02:	b90b      	cbnz	r3, d6a08 <_ZN7FatFile4syncEv+0xc>
    return true;
   d6a04:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d6a06:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6a08:	7883      	ldrb	r3, [r0, #2]
   d6a0a:	075a      	lsls	r2, r3, #29
   d6a0c:	d523      	bpl.n	d6a56 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d6a0e:	2101      	movs	r1, #1
   d6a10:	f7ff fe3c 	bl	d668c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6a14:	4605      	mov	r5, r0
   d6a16:	b928      	cbnz	r0, d6a24 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d6a18:	7863      	ldrb	r3, [r4, #1]
   d6a1a:	f043 0301 	orr.w	r3, r3, #1
   d6a1e:	7063      	strb	r3, [r4, #1]
  return false;
   d6a20:	2000      	movs	r0, #0
   d6a22:	e7f0      	b.n	d6a06 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6a24:	7803      	ldrb	r3, [r0, #0]
   d6a26:	2be5      	cmp	r3, #229	; 0xe5
   d6a28:	d0f6      	beq.n	d6a18 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d6a2a:	7823      	ldrb	r3, [r4, #0]
   d6a2c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d6a2e:	bf44      	itt	mi
   d6a30:	69e3      	ldrmi	r3, [r4, #28]
   d6a32:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6a34:	8c23      	ldrh	r3, [r4, #32]
   d6a36:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6a38:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6a3a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d6a3c:	4b09      	ldr	r3, [pc, #36]	; (d6a64 <_ZN7FatFile4syncEv+0x68>)
   d6a3e:	681b      	ldr	r3, [r3, #0]
   d6a40:	b12b      	cbz	r3, d6a4e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6a42:	f100 0116 	add.w	r1, r0, #22
   d6a46:	3018      	adds	r0, #24
   d6a48:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6a4a:	8b2b      	ldrh	r3, [r5, #24]
   d6a4c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d6a4e:	78a3      	ldrb	r3, [r4, #2]
   d6a50:	f023 0304 	bic.w	r3, r3, #4
   d6a54:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d6a56:	68a0      	ldr	r0, [r4, #8]
   d6a58:	f7ff fdc2 	bl	d65e0 <_ZN9FatVolume9cacheSyncEv>
   d6a5c:	2800      	cmp	r0, #0
   d6a5e:	d0db      	beq.n	d6a18 <_ZN7FatFile4syncEv+0x1c>
   d6a60:	e7d0      	b.n	d6a04 <_ZN7FatFile4syncEv+0x8>
   d6a62:	bf00      	nop
   d6a64:	2003e53c 	.word	0x2003e53c

000d6a68 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d6a68:	b510      	push	{r4, lr}
   d6a6a:	4604      	mov	r4, r0
  bool rtn = sync();
   d6a6c:	f7ff ffc6 	bl	d69fc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6a70:	2300      	movs	r3, #0
   d6a72:	7023      	strb	r3, [r4, #0]
}
   d6a74:	bd10      	pop	{r4, pc}

000d6a76 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6a76:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a78:	b093      	sub	sp, #76	; 0x4c
   d6a7a:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d6a7c:	2300      	movs	r3, #0
   d6a7e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d6a82:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6a84:	9201      	str	r2, [sp, #4]
   d6a86:	4606      	mov	r6, r0
   d6a88:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d6a8a:	b113      	cbz	r3, d6a92 <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d6a8c:	2000      	movs	r0, #0
}
   d6a8e:	b013      	add	sp, #76	; 0x4c
   d6a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d6a92:	780b      	ldrb	r3, [r1, #0]
   d6a94:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6a98:	d0f8      	beq.n	d6a8c <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d6a9a:	7813      	ldrb	r3, [r2, #0]
   d6a9c:	2b2f      	cmp	r3, #47	; 0x2f
   d6a9e:	d112      	bne.n	d6ac6 <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d6aa0:	9a01      	ldr	r2, [sp, #4]
   d6aa2:	7813      	ldrb	r3, [r2, #0]
   d6aa4:	2b2f      	cmp	r3, #47	; 0x2f
   d6aa6:	d102      	bne.n	d6aae <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d6aa8:	3201      	adds	r2, #1
   d6aaa:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d6aac:	e7f8      	b.n	d6aa0 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d6aae:	68a1      	ldr	r1, [r4, #8]
   d6ab0:	b91b      	cbnz	r3, d6aba <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d6ab2:	4630      	mov	r0, r6
   d6ab4:	f7ff fdf9 	bl	d66aa <_ZN7FatFile8openRootEP9FatVolume>
   d6ab8:	e7e9      	b.n	d6a8e <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6aba:	a809      	add	r0, sp, #36	; 0x24
   d6abc:	f7ff fdf5 	bl	d66aa <_ZN7FatFile8openRootEP9FatVolume>
   d6ac0:	2800      	cmp	r0, #0
   d6ac2:	d0e3      	beq.n	d6a8c <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d6ac4:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d6ac6:	9801      	ldr	r0, [sp, #4]
   d6ac8:	aa01      	add	r2, sp, #4
   d6aca:	a903      	add	r1, sp, #12
   d6acc:	f000 f8f6 	bl	d6cbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6ad0:	2800      	cmp	r0, #0
   d6ad2:	d0db      	beq.n	d6a8c <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d6ad4:	9b01      	ldr	r3, [sp, #4]
   d6ad6:	781b      	ldrb	r3, [r3, #0]
   d6ad8:	b19b      	cbz	r3, d6b02 <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6ada:	2300      	movs	r3, #0
   d6adc:	aa03      	add	r2, sp, #12
   d6ade:	4621      	mov	r1, r4
   d6ae0:	4630      	mov	r0, r6
   d6ae2:	f000 fa1f 	bl	d6f24 <_ZN7FatFile4openEPS_P7fname_ti>
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	d0d0      	beq.n	d6a8c <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d6aea:	4635      	mov	r5, r6
   d6aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6aee:	ac09      	add	r4, sp, #36	; 0x24
   d6af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6af6:	682b      	ldr	r3, [r5, #0]
   d6af8:	6023      	str	r3, [r4, #0]
    close();
   d6afa:	4630      	mov	r0, r6
   d6afc:	f7ff ffb4 	bl	d6a68 <_ZN7FatFile5closeEv>
  while (1) {
   d6b00:	e7e0      	b.n	d6ac4 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d6b02:	463b      	mov	r3, r7
   d6b04:	aa03      	add	r2, sp, #12
   d6b06:	4621      	mov	r1, r4
   d6b08:	4630      	mov	r0, r6
   d6b0a:	f000 fa0b 	bl	d6f24 <_ZN7FatFile4openEPS_P7fname_ti>
   d6b0e:	e7be      	b.n	d6a8e <_ZN7FatFile4openEPS_PKci+0x18>

000d6b10 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6b14:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d6b16:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6b18:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d6b1a:	4604      	mov	r4, r0
   d6b1c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6b1e:	d55b      	bpl.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
   d6b20:	7883      	ldrb	r3, [r0, #2]
   d6b22:	079a      	lsls	r2, r3, #30
   d6b24:	d558      	bpl.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6b26:	071b      	lsls	r3, r3, #28
   d6b28:	d451      	bmi.n	d6bce <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6b2a:	6963      	ldr	r3, [r4, #20]
   d6b2c:	43db      	mvns	r3, r3
   d6b2e:	42bb      	cmp	r3, r7
   d6b30:	d352      	bcc.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
   d6b32:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6b34:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d6b38:	6966      	ldr	r6, [r4, #20]
   d6b3a:	f1b8 0f00 	cmp.w	r8, #0
   d6b3e:	f000 8091 	beq.w	d6c64 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d6b42:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d6b44:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6b46:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6b4a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d6b4e:	d10e      	bne.n	d6b6e <_ZN7FatFile5writeEPKvj+0x5e>
   d6b50:	b96d      	cbnz	r5, d6b6e <_ZN7FatFile5writeEPKvj+0x5e>
   d6b52:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d6b54:	2900      	cmp	r1, #0
   d6b56:	d046      	beq.n	d6be6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6b58:	4652      	mov	r2, sl
   d6b5a:	f000 fc0e 	bl	d737a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6b5e:	2800      	cmp	r0, #0
   d6b60:	db3a      	blt.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d6b62:	d104      	bne.n	d6b6e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6b64:	4620      	mov	r0, r4
   d6b66:	f7ff fd48 	bl	d65fa <_ZN7FatFile10addClusterEv>
   d6b6a:	2800      	cmp	r0, #0
   d6b6c:	d034      	beq.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6b6e:	6921      	ldr	r1, [r4, #16]
   d6b70:	68a0      	ldr	r0, [r4, #8]
   d6b72:	f000 fbfc 	bl	d736e <_ZNK9FatVolume17clusterFirstBlockEm>
   d6b76:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6b78:	68a0      	ldr	r0, [r4, #8]
   d6b7a:	b915      	cbnz	r5, d6b82 <_ZN7FatFile5writeEPKvj+0x72>
   d6b7c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d6b80:	d23f      	bcs.n	d6c02 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d6b82:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d6b86:	4546      	cmp	r6, r8
   d6b88:	bf28      	it	cs
   d6b8a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6b8c:	2d00      	cmp	r5, #0
   d6b8e:	d136      	bne.n	d6bfe <_ZN7FatFile5writeEPKvj+0xee>
   d6b90:	6962      	ldr	r2, [r4, #20]
   d6b92:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d6b94:	429a      	cmp	r2, r3
   d6b96:	bf34      	ite	cc
   d6b98:	2201      	movcc	r2, #1
   d6b9a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d6b9c:	3024      	adds	r0, #36	; 0x24
   d6b9e:	f000 fbc3 	bl	d7328 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d6ba2:	b1c8      	cbz	r0, d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d6ba4:	4428      	add	r0, r5
   d6ba6:	4632      	mov	r2, r6
   d6ba8:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6baa:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d6bac:	f004 f9bd 	bl	daf2a <memcpy>
      if (512 == (n + blockOffset)) {
   d6bb0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d6bb4:	d104      	bne.n	d6bc0 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d6bb6:	68a0      	ldr	r0, [r4, #8]
   d6bb8:	3024      	adds	r0, #36	; 0x24
   d6bba:	f000 fb8d 	bl	d72d8 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6bbe:	b158      	cbz	r0, d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6bc0:	6963      	ldr	r3, [r4, #20]
   d6bc2:	4433      	add	r3, r6
   d6bc4:	6163      	str	r3, [r4, #20]
    src += n;
   d6bc6:	44b1      	add	r9, r6
    nToWrite -= n;
   d6bc8:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d6bcc:	e7b4      	b.n	d6b38 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d6bce:	69c1      	ldr	r1, [r0, #28]
   d6bd0:	f7ff fe64 	bl	d689c <_ZN7FatFile7seekSetEm>
   d6bd4:	2800      	cmp	r0, #0
   d6bd6:	d1a8      	bne.n	d6b2a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6bd8:	7863      	ldrb	r3, [r4, #1]
   d6bda:	f043 0301 	orr.w	r3, r3, #1
   d6bde:	7063      	strb	r3, [r4, #1]
  return -1;
   d6be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6be4:	e050      	b.n	d6c88 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d6be6:	6a23      	ldr	r3, [r4, #32]
   d6be8:	b93b      	cbnz	r3, d6bfa <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d6bea:	4620      	mov	r0, r4
   d6bec:	f7ff fd05 	bl	d65fa <_ZN7FatFile10addClusterEv>
   d6bf0:	2800      	cmp	r0, #0
   d6bf2:	d0f1      	beq.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d6bf4:	6923      	ldr	r3, [r4, #16]
   d6bf6:	6223      	str	r3, [r4, #32]
   d6bf8:	e7b9      	b.n	d6b6e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d6bfa:	6123      	str	r3, [r4, #16]
   d6bfc:	e7b7      	b.n	d6b6e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6bfe:	2201      	movs	r2, #1
   d6c00:	e7cc      	b.n	d6b9c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d6c02:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6c06:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d6c08:	d31b      	bcc.n	d6c42 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d6c0a:	f890 c004 	ldrb.w	ip, [r0, #4]
   d6c0e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d6c12:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d6c14:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d6c18:	4573      	cmp	r3, lr
   d6c1a:	bf28      	it	cs
   d6c1c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6c1e:	4291      	cmp	r1, r2
      n = 512*nb;
   d6c20:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6c24:	d307      	bcc.n	d6c36 <_ZN7FatFile5writeEPKvj+0x126>
   d6c26:	441a      	add	r2, r3
   d6c28:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d6c2a:	bf82      	ittt	hi
   d6c2c:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d6c30:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6c34:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6c36:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d6c38:	464a      	mov	r2, r9
   d6c3a:	6828      	ldr	r0, [r5, #0]
   d6c3c:	f000 ff53 	bl	d7ae6 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d6c40:	e7bd      	b.n	d6bbe <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d6c42:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d6c44:	bf02      	ittt	eq
   d6c46:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d6c4a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6c4e:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d6c50:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d6c52:	464a      	mov	r2, r9
   d6c54:	6818      	ldr	r0, [r3, #0]
   d6c56:	f000 fed0 	bl	d79fa <_ZN9SdSpiCard10writeBlockEmPKh>
   d6c5a:	2800      	cmp	r0, #0
   d6c5c:	d0bc      	beq.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d6c5e:	f44f 7600 	mov.w	r6, #512	; 0x200
   d6c62:	e7ad      	b.n	d6bc0 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d6c64:	69e2      	ldr	r2, [r4, #28]
   d6c66:	78a3      	ldrb	r3, [r4, #2]
   d6c68:	42b2      	cmp	r2, r6
   d6c6a:	d204      	bcs.n	d6c76 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d6c6c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d6c6e:	f043 0304 	orr.w	r3, r3, #4
   d6c72:	70a3      	strb	r3, [r4, #2]
   d6c74:	e003      	b.n	d6c7e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d6c76:	4a08      	ldr	r2, [pc, #32]	; (d6c98 <_ZN7FatFile5writeEPKvj+0x188>)
   d6c78:	6812      	ldr	r2, [r2, #0]
   d6c7a:	2a00      	cmp	r2, #0
   d6c7c:	d1f7      	bne.n	d6c6e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d6c7e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6c82:	2b00      	cmp	r3, #0
   d6c84:	db02      	blt.n	d6c8c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d6c86:	4638      	mov	r0, r7
}
   d6c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d6c8c:	4620      	mov	r0, r4
   d6c8e:	f7ff feb5 	bl	d69fc <_ZN7FatFile4syncEv>
   d6c92:	2800      	cmp	r0, #0
   d6c94:	d1f7      	bne.n	d6c86 <_ZN7FatFile5writeEPKvj+0x176>
   d6c96:	e79f      	b.n	d6bd8 <_ZN7FatFile5writeEPKvj+0xc8>
   d6c98:	2003e53c 	.word	0x2003e53c

000d6c9c <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6c9c:	1e41      	subs	r1, r0, #1
   d6c9e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d6ca2:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6ca4:	0842      	lsrs	r2, r0, #1
   d6ca6:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d6caa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6cae:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6cb2:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6cb4:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6cb6:	d1f5      	bne.n	d6ca4 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d6cb8:	4770      	bx	lr
	...

000d6cbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6cc0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6cc2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6cc6:	2b20      	cmp	r3, #32
   d6cc8:	d0fa      	beq.n	d6cc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6cca:	4d6b      	ldr	r5, [pc, #428]	; (d6e78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d6ccc:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d6cce:	2400      	movs	r4, #0
    c = path[len];
   d6cd0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d6cd2:	b1c3      	cbz	r3, d6d06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d6cd4:	2b2f      	cmp	r3, #47	; 0x2f
   d6cd6:	d016      	beq.n	d6d06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6cd8:	2b5c      	cmp	r3, #92	; 0x5c
   d6cda:	d102      	bne.n	d6ce2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6cdc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d6cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6ce2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d6ce6:	b2c0      	uxtb	r0, r0
   d6ce8:	281d      	cmp	r0, #29
   d6cea:	d803      	bhi.n	d6cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d6cec:	fa25 f000 	lsr.w	r0, r5, r0
   d6cf0:	07c0      	lsls	r0, r0, #31
   d6cf2:	d4f3      	bmi.n	d6cdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6cf4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d6cf8:	283c      	cmp	r0, #60	; 0x3c
   d6cfa:	d0ef      	beq.n	d6cdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6cfc:	3b20      	subs	r3, #32
   d6cfe:	2b5e      	cmp	r3, #94	; 0x5e
   d6d00:	d8ec      	bhi.n	d6cdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d6d02:	3401      	adds	r4, #1
    c = path[len];
   d6d04:	e7e4      	b.n	d6cd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d6d06:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d6d08:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6d0a:	4607      	mov	r7, r0
   d6d0c:	f810 5b01 	ldrb.w	r5, [r0], #1
   d6d10:	2d20      	cmp	r5, #32
   d6d12:	d0fa      	beq.n	d6d0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d6d14:	2d2f      	cmp	r5, #47	; 0x2f
   d6d16:	d0f8      	beq.n	d6d0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6d18:	6017      	str	r7, [r2, #0]
  while (len) {
   d6d1a:	b14c      	cbz	r4, d6d30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6d1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6d20:	2a2e      	cmp	r2, #46	; 0x2e
   d6d22:	d001      	beq.n	d6d28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d6d24:	2a20      	cmp	r2, #32
   d6d26:	d101      	bne.n	d6d2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d6d28:	3c01      	subs	r4, #1
  while (len) {
   d6d2a:	e7f6      	b.n	d6d1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6d2c:	2cff      	cmp	r4, #255	; 0xff
   d6d2e:	dcd5      	bgt.n	d6cdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d6d30:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d6d32:	f101 030d 	add.w	r3, r1, #13
   d6d36:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d6d3a:	2020      	movs	r0, #32
   d6d3c:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6d40:	4293      	cmp	r3, r2
   d6d42:	d1fb      	bne.n	d6d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6d44:	f04f 0800 	mov.w	r8, #0
   d6d48:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6d4c:	2b2e      	cmp	r3, #46	; 0x2e
   d6d4e:	d001      	beq.n	d6d54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6d50:	2b20      	cmp	r3, #32
   d6d52:	d102      	bne.n	d6d5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6d54:	f108 0801 	add.w	r8, r8, #1
   d6d58:	e7f6      	b.n	d6d48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d6d5a:	fab8 f088 	clz	r0, r8
   d6d5e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6d60:	1e65      	subs	r5, r4, #1
   d6d62:	1c6b      	adds	r3, r5, #1
   d6d64:	d002      	beq.n	d6d6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d6d66:	5d73      	ldrb	r3, [r6, r5]
   d6d68:	2b2e      	cmp	r3, #46	; 0x2e
   d6d6a:	d114      	bne.n	d6d96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6d6c:	f04f 0900 	mov.w	r9, #0
   d6d70:	2707      	movs	r7, #7
   d6d72:	464a      	mov	r2, r9
   d6d74:	46ca      	mov	sl, r9
   d6d76:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d6d7a:	45a0      	cmp	r8, r4
   d6d7c:	da69      	bge.n	d6e52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d6d7e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6d82:	2b20      	cmp	r3, #32
   d6d84:	d003      	beq.n	d6d8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d6d86:	2b2e      	cmp	r3, #46	; 0x2e
   d6d88:	d107      	bne.n	d6d9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6d8a:	45a8      	cmp	r8, r5
   d6d8c:	d012      	beq.n	d6db4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6d8e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6d90:	f108 0801 	add.w	r8, r8, #1
   d6d94:	e7f1      	b.n	d6d7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6d96:	3d01      	subs	r5, #1
   d6d98:	e7e3      	b.n	d6d62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d6d9a:	2b22      	cmp	r3, #34	; 0x22
   d6d9c:	d008      	beq.n	d6db0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d6d9e:	2b7c      	cmp	r3, #124	; 0x7c
   d6da0:	d006      	beq.n	d6db0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6da2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6da6:	f1bc 0f05 	cmp.w	ip, #5
   d6daa:	d80b      	bhi.n	d6dc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6dac:	2b2d      	cmp	r3, #45	; 0x2d
   d6dae:	d013      	beq.n	d6dd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6db0:	45a8      	cmp	r8, r5
   d6db2:	d15c      	bne.n	d6e6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d6db4:	2f0a      	cmp	r7, #10
   d6db6:	d04b      	beq.n	d6e50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6db8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6dba:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6dbc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6dbe:	f04f 0e10 	mov.w	lr, #16
   d6dc2:	e7e5      	b.n	d6d90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d6dc4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6dc8:	f1bc 0f05 	cmp.w	ip, #5
   d6dcc:	d9f0      	bls.n	d6db0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d6dce:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6dd2:	f1bc 0f02 	cmp.w	ip, #2
   d6dd6:	d9eb      	bls.n	d6db0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d6dd8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6ddc:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6de0:	d8e6      	bhi.n	d6db0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d6de2:	45a8      	cmp	r8, r5
   d6de4:	d0e6      	beq.n	d6db4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d6de6:	42ba      	cmp	r2, r7
   d6de8:	d830      	bhi.n	d6e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d6dea:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6dee:	f1bc 0f19 	cmp.w	ip, #25
   d6df2:	d81a      	bhi.n	d6e2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d6df4:	3b20      	subs	r3, #32
        lc |= bit;
   d6df6:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d6dfa:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6dfc:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d6e00:	f102 0c01 	add.w	ip, r2, #1
   d6e04:	fa5f fc8c 	uxtb.w	ip, ip
   d6e08:	440a      	add	r2, r1
      if (i < 7) {
   d6e0a:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d6e0e:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d6e10:	d801      	bhi.n	d6e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d6e12:	f881 c00c 	strb.w	ip, [r1, #12]
   d6e16:	4662      	mov	r2, ip
   d6e18:	e7ba      	b.n	d6d90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6e1a:	45a8      	cmp	r8, r5
   d6e1c:	dc18      	bgt.n	d6e50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6e1e:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6e20:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6e22:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6e24:	f04f 0e10 	mov.w	lr, #16
   d6e28:	e7b1      	b.n	d6d8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d6e2a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6e2e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6e32:	bf98      	it	ls
   d6e34:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d6e38:	e7e2      	b.n	d6e00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d6e3a:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6e3c:	2001      	movs	r0, #1
   d6e3e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6e40:	4419      	add	r1, r3
   d6e42:	237e      	movs	r3, #126	; 0x7e
   d6e44:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6e46:	2331      	movs	r3, #49	; 0x31
   d6e48:	738b      	strb	r3, [r1, #14]
   d6e4a:	e748      	b.n	d6cde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6e4c:	2f0a      	cmp	r7, #10
   d6e4e:	d1e4      	bne.n	d6e1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6e50:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d6e52:	7b4b      	ldrb	r3, [r1, #13]
   d6e54:	2b20      	cmp	r3, #32
   d6e56:	f43f af41 	beq.w	d6cdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d6e5a:	2800      	cmp	r0, #0
   d6e5c:	d0ed      	beq.n	d6e3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6e5e:	ea1a 0f09 	tst.w	sl, r9
   d6e62:	bf18      	it	ne
   d6e64:	f04f 0902 	movne.w	r9, #2
   d6e68:	f881 9000 	strb.w	r9, [r1]
   d6e6c:	e737      	b.n	d6cde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d6e6e:	42ba      	cmp	r2, r7
   d6e70:	d8ec      	bhi.n	d6e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d6e72:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6e74:	2000      	movs	r0, #0
   d6e76:	e7c3      	b.n	d6e00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6e78:	31000101 	.word	0x31000101

000d6e7c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6e80:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6e84:	4606      	mov	r6, r0
   d6e86:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6e88:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6e8a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6e8c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6e90:	6861      	ldr	r1, [r4, #4]
   d6e92:	68a2      	ldr	r2, [r4, #8]
   d6e94:	186b      	adds	r3, r5, r1
   d6e96:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6e98:	4411      	add	r1, r2
   d6e9a:	4291      	cmp	r1, r2
   d6e9c:	d006      	beq.n	d6eac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6e9e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6ea2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6ea6:	4043      	eors	r3, r0
   d6ea8:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6eaa:	e7f6      	b.n	d6e9a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6eac:	f1b9 0f03 	cmp.w	r9, #3
   d6eb0:	bf28      	it	cs
   d6eb2:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6eb6:	f109 0204 	add.w	r2, r9, #4
   d6eba:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6ebc:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ec0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ec2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ec4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ec6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ec8:	bf94      	ite	ls
   d6eca:	3130      	addls	r1, #48	; 0x30
   d6ecc:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ece:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6ed0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6ed2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ed6:	d1f1      	bne.n	d6ebc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d6ed8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d6edc:	2100      	movs	r1, #0
   d6ede:	735f      	strb	r7, [r3, #13]
   d6ee0:	4630      	mov	r0, r6
   d6ee2:	f7ff fcdb 	bl	d689c <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d6ee6:	2101      	movs	r1, #1
   d6ee8:	4630      	mov	r0, r6
   d6eea:	f7ff fcb8 	bl	d685e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6eee:	4601      	mov	r1, r0
   d6ef0:	b928      	cbnz	r0, d6efe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6ef2:	7870      	ldrb	r0, [r6, #1]
   d6ef4:	fab0 f080 	clz	r0, r0
   d6ef8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d6efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d6efe:	7803      	ldrb	r3, [r0, #0]
   d6f00:	b16b      	cbz	r3, d6f1e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6f02:	7ac3      	ldrb	r3, [r0, #11]
   d6f04:	071b      	lsls	r3, r3, #28
   d6f06:	d4ee      	bmi.n	d6ee6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6f08:	220b      	movs	r2, #11
   d6f0a:	4640      	mov	r0, r8
   d6f0c:	f003 ffff 	bl	daf0e <memcmp>
   d6f10:	2800      	cmp	r0, #0
   d6f12:	d1e8      	bne.n	d6ee6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d6f14:	3501      	adds	r5, #1
   d6f16:	b2ad      	uxth	r5, r5
   d6f18:	2d64      	cmp	r5, #100	; 0x64
   d6f1a:	d1b9      	bne.n	d6e90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6f1c:	e7ed      	b.n	d6efa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d6f1e:	2001      	movs	r0, #1
   d6f20:	e7eb      	b.n	d6efa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d6f24 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f28:	ed2d 8b02 	vpush	{d8}
   d6f2c:	b089      	sub	sp, #36	; 0x24
   d6f2e:	460d      	mov	r5, r1
   d6f30:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d6f32:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f34:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d6f36:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6f3a:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d6f3c:	d105      	bne.n	d6f4a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d6f3e:	2000      	movs	r0, #0
}
   d6f40:	b009      	add	sp, #36	; 0x24
   d6f42:	ecbd 8b02 	vpop	{d8}
   d6f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d6f4a:	9b06      	ldr	r3, [sp, #24]
   d6f4c:	781b      	ldrb	r3, [r3, #0]
   d6f4e:	2b00      	cmp	r3, #0
   d6f50:	d1f5      	bne.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d6f52:	6853      	ldr	r3, [r2, #4]
   d6f54:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6f56:	7813      	ldrb	r3, [r2, #0]
   d6f58:	0799      	lsls	r1, r3, #30
   d6f5a:	bf1c      	itt	ne
   d6f5c:	9b04      	ldrne	r3, [sp, #16]
   d6f5e:	f103 070c 	addne.w	r7, r3, #12
   d6f62:	f04f 0100 	mov.w	r1, #0
   d6f66:	bf18      	it	ne
   d6f68:	230d      	movne	r3, #13
   d6f6a:	4628      	mov	r0, r5
   d6f6c:	bf1d      	ittte	ne
   d6f6e:	fbb7 f7f3 	udivne	r7, r7, r3
   d6f72:	3701      	addne	r7, #1
   d6f74:	b2ff      	uxtbne	r7, r7
   d6f76:	2701      	moveq	r7, #1
   d6f78:	f7ff fc90 	bl	d689c <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6f7c:	f108 020d 	add.w	r2, r8, #13
  }
   d6f80:	2300      	movs	r3, #0
   d6f82:	ee08 2a10 	vmov	s16, r2
   d6f86:	469b      	mov	fp, r3
   d6f88:	461c      	mov	r4, r3
   d6f8a:	461e      	mov	r6, r3
   d6f8c:	9303      	str	r3, [sp, #12]
   d6f8e:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6f90:	696a      	ldr	r2, [r5, #20]
   d6f92:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6f94:	2101      	movs	r1, #1
   d6f96:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6f98:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6f9c:	f7ff fc5f 	bl	d685e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6fa0:	9b07      	ldr	r3, [sp, #28]
   d6fa2:	2800      	cmp	r0, #0
   d6fa4:	d16e      	bne.n	d7084 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d6fa6:	786b      	ldrb	r3, [r5, #1]
   d6fa8:	2b00      	cmp	r3, #0
   d6faa:	d1c8      	bne.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6fac:	9b05      	ldr	r3, [sp, #20]
   d6fae:	059a      	lsls	r2, r3, #22
   d6fb0:	d5c5      	bpl.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d6fb2:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d6fb6:	3b01      	subs	r3, #1
   d6fb8:	2b01      	cmp	r3, #1
   d6fba:	d8c0      	bhi.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d6fbc:	9b03      	ldr	r3, [sp, #12]
   d6fbe:	2c00      	cmp	r4, #0
   d6fc0:	bf08      	it	eq
   d6fc2:	464b      	moveq	r3, r9
   d6fc4:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d6fc6:	42bc      	cmp	r4, r7
   d6fc8:	f0c0 8103 	bcc.w	d71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d6fcc:	f1ba 0f00 	cmp.w	sl, #0
   d6fd0:	f040 811b 	bne.w	d720a <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6fd4:	9b03      	ldr	r3, [sp, #12]
   d6fd6:	4628      	mov	r0, r5
   d6fd8:	0159      	lsls	r1, r3, #5
   d6fda:	f7ff fc5f 	bl	d689c <_ZN7FatFile7seekSetEm>
   d6fde:	2800      	cmp	r0, #0
   d6fe0:	d0ad      	beq.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d6fe2:	3f01      	subs	r7, #1
   d6fe4:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6fe8:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6fea:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d6fee:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6ff0:	2e00      	cmp	r6, #0
   d6ff2:	f000 8121 	beq.w	d7238 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6ff6:	2100      	movs	r1, #0
   d6ff8:	4628      	mov	r0, r5
   d6ffa:	f7ff fc30 	bl	d685e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6ffe:	4604      	mov	r4, r0
   d7000:	2800      	cmp	r0, #0
   d7002:	d09c      	beq.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d7004:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d7006:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d700a:	4556      	cmp	r6, sl
   d700c:	f043 0301 	orr.w	r3, r3, #1
   d7010:	bf0c      	ite	eq
   d7012:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d7016:	46b3      	movne	fp, r6
   d7018:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d701c:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d7020:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d7022:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d7026:	f108 000d 	add.w	r0, r8, #13
   d702a:	f7ff fe37 	bl	d6c9c <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d702e:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d7032:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d7034:	f884 901a 	strb.w	r9, [r4, #26]
   d7038:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d703c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d7040:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d7042:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d7046:	fb02 f20b 	mul.w	r2, r2, fp
   d704a:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d704c:	9904      	ldr	r1, [sp, #16]
   d704e:	4291      	cmp	r1, r2
   d7050:	f240 80e3 	bls.w	d721a <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d7054:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d7058:	2b04      	cmp	r3, #4
   d705a:	fa5f fe83 	uxtb.w	lr, r3
   d705e:	f103 0001 	add.w	r0, r3, #1
   d7062:	f200 80e0 	bhi.w	d7226 <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d7066:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d706a:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d706e:	280d      	cmp	r0, #13
   d7070:	f102 0201 	add.w	r2, r2, #1
   d7074:	4603      	mov	r3, r0
   d7076:	d1e9      	bne.n	d704c <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d7078:	3e01      	subs	r6, #1
   d707a:	b2f6      	uxtb	r6, r6
   d707c:	e7b8      	b.n	d6ff0 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d707e:	f04f 0a01 	mov.w	sl, #1
   d7082:	e785      	b.n	d6f90 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d7084:	7802      	ldrb	r2, [r0, #0]
   d7086:	2ae5      	cmp	r2, #229	; 0xe5
   d7088:	d000      	beq.n	d708c <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d708a:	b97a      	cbnz	r2, d70ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d708c:	9903      	ldr	r1, [sp, #12]
   d708e:	2c00      	cmp	r4, #0
   d7090:	bf08      	it	eq
   d7092:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d7094:	42bc      	cmp	r4, r7
        freeFound++;
   d7096:	bf38      	it	cc
   d7098:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d709a:	9103      	str	r1, [sp, #12]
        freeFound++;
   d709c:	bf38      	it	cc
   d709e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d70a0:	2a00      	cmp	r2, #0
   d70a2:	d083      	beq.n	d6fac <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d70a4:	2ae5      	cmp	r2, #229	; 0xe5
   d70a6:	d104      	bne.n	d70b2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d70a8:	2600      	movs	r6, #0
   d70aa:	e771      	b.n	d6f90 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d70ac:	42bc      	cmp	r4, r7
   d70ae:	bf38      	it	cc
   d70b0:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d70b2:	2a2e      	cmp	r2, #46	; 0x2e
   d70b4:	d0f8      	beq.n	d70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d70b6:	7ac1      	ldrb	r1, [r0, #11]
   d70b8:	290f      	cmp	r1, #15
   d70ba:	d15d      	bne.n	d7178 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d70bc:	bb3e      	cbnz	r6, d710e <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d70be:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d70c2:	f43f af65 	beq.w	d6f90 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d70c6:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d70ca:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d70cc:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d70ce:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d70d2:	f04f 0e0d 	mov.w	lr, #13
   d70d6:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d70da:	9a04      	ldr	r2, [sp, #16]
   d70dc:	4572      	cmp	r2, lr
   d70de:	d9e3      	bls.n	d70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d70e0:	eba2 020e 	sub.w	r2, r2, lr
   d70e4:	9207      	str	r2, [sp, #28]
   d70e6:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d70ea:	f1bc 0f04 	cmp.w	ip, #4
   d70ee:	eb0c 090e 	add.w	r9, ip, lr
   d70f2:	fa5f f28c 	uxtb.w	r2, ip
   d70f6:	d814      	bhi.n	d7122 <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d70f8:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d70fc:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d7100:	9907      	ldr	r1, [sp, #28]
   d7102:	458c      	cmp	ip, r1
   d7104:	d11b      	bne.n	d713e <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d7106:	2a00      	cmp	r2, #0
   d7108:	bf18      	it	ne
   d710a:	2600      	movne	r6, #0
   d710c:	e740      	b.n	d6f90 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d710e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d7112:	fa5f fb8b 	uxtb.w	fp, fp
   d7116:	455a      	cmp	r2, fp
   d7118:	d1c6      	bne.n	d70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d711a:	7b42      	ldrb	r2, [r0, #13]
   d711c:	429a      	cmp	r2, r3
   d711e:	d0d6      	beq.n	d70ce <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d7120:	e7c2      	b.n	d70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d7122:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7124:	bf95      	itete	ls
   d7126:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d712a:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d712e:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d7132:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d7136:	bf94      	ite	ls
   d7138:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d713a:	8892      	ldrhhi	r2, [r2, #4]
   d713c:	e7e0      	b.n	d7100 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d713e:	2aff      	cmp	r2, #255	; 0xff
   d7140:	d8b2      	bhi.n	d70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d7142:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d7144:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d7148:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d714a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d714e:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d7152:	bf98      	it	ls
   d7154:	3220      	addls	r2, #32
   d7156:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d715a:	bf98      	it	ls
   d715c:	b2d2      	uxtbls	r2, r2
   d715e:	f1b9 0f19 	cmp.w	r9, #25
   d7162:	bf9c      	itt	ls
   d7164:	3120      	addls	r1, #32
   d7166:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d7168:	4291      	cmp	r1, r2
   d716a:	d19d      	bne.n	d70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d716c:	f10c 0c01 	add.w	ip, ip, #1
   d7170:	f1bc 0f0d 	cmp.w	ip, #13
   d7174:	d1b9      	bne.n	d70ea <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d7176:	e70b      	b.n	d6f90 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d7178:	070a      	lsls	r2, r1, #28
   d717a:	d495      	bmi.n	d70a8 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d717c:	b166      	cbz	r6, d7198 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d717e:	f1bb 0f01 	cmp.w	fp, #1
   d7182:	9303      	str	r3, [sp, #12]
   d7184:	f47f aedb 	bne.w	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d7188:	f7ff fd88 	bl	d6c9c <_ZN7FatFile11lfnChecksumEPh>
   d718c:	9b03      	ldr	r3, [sp, #12]
   d718e:	4298      	cmp	r0, r3
   d7190:	f47f aed5 	bne.w	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d7194:	46b2      	mov	sl, r6
   d7196:	e00f      	b.n	d71b8 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d7198:	ee18 1a10 	vmov	r1, s16
   d719c:	220b      	movs	r2, #11
   d719e:	9307      	str	r3, [sp, #28]
   d71a0:	f003 feb5 	bl	daf0e <memcmp>
   d71a4:	9b07      	ldr	r3, [sp, #28]
   d71a6:	2800      	cmp	r0, #0
   d71a8:	f47f aef2 	bne.w	d6f90 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d71ac:	f898 a000 	ldrb.w	sl, [r8]
   d71b0:	f01a 0a01 	ands.w	sl, sl, #1
   d71b4:	f47f af63 	bne.w	d707e <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d71b8:	9b05      	ldr	r3, [sp, #20]
   d71ba:	0519      	lsls	r1, r3, #20
   d71bc:	f53f aebf 	bmi.w	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d71c0:	9b05      	ldr	r3, [sp, #20]
   d71c2:	9806      	ldr	r0, [sp, #24]
   d71c4:	f8cd a000 	str.w	sl, [sp]
   d71c8:	464a      	mov	r2, r9
   d71ca:	4629      	mov	r1, r5
   d71cc:	f7ff fba9 	bl	d6922 <_ZN7FatFile15openCachedEntryEPS_tih>
   d71d0:	e6b6      	b.n	d6f40 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d71d2:	2100      	movs	r1, #0
   d71d4:	4628      	mov	r0, r5
   d71d6:	f7ff fb42 	bl	d685e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d71da:	b998      	cbnz	r0, d7204 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d71dc:	786b      	ldrb	r3, [r5, #1]
   d71de:	2b00      	cmp	r3, #0
   d71e0:	f47f aead 	bne.w	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d71e4:	4628      	mov	r0, r5
   d71e6:	f7ff fa13 	bl	d6610 <_ZN7FatFile13addDirClusterEv>
   d71ea:	2800      	cmp	r0, #0
   d71ec:	f43f aea7 	beq.w	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d71f0:	68ab      	ldr	r3, [r5, #8]
   d71f2:	791b      	ldrb	r3, [r3, #4]
   d71f4:	2b01      	cmp	r3, #1
   d71f6:	f63f aee9 	bhi.w	d6fcc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d71fa:	3410      	adds	r4, #16
   d71fc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d71fe:	42a7      	cmp	r7, r4
   d7200:	d8f0      	bhi.n	d71e4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d7202:	e6e3      	b.n	d6fcc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d7204:	3401      	adds	r4, #1
   d7206:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d7208:	e6dd      	b.n	d6fc6 <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d720a:	4641      	mov	r1, r8
   d720c:	4628      	mov	r0, r5
   d720e:	f7ff fe35 	bl	d6e7c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d7212:	2800      	cmp	r0, #0
   d7214:	f47f aede 	bne.w	d6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d7218:	e691      	b.n	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d721a:	bf14      	ite	ne
   d721c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d7220:	2100      	moveq	r1, #0
   d7222:	b289      	uxth	r1, r1
   d7224:	e718      	b.n	d7058 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d7226:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d722a:	bf94      	ite	ls
   d722c:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d7230:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d7234:	8099      	strh	r1, [r3, #4]
   d7236:	e71a      	b.n	d706e <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d7238:	4631      	mov	r1, r6
   d723a:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d723c:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d723e:	f7ff fb0e 	bl	d685e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d7242:	4604      	mov	r4, r0
   d7244:	2800      	cmp	r0, #0
   d7246:	f43f ae7a 	beq.w	d6f3e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d724a:	2220      	movs	r2, #32
   d724c:	4631      	mov	r1, r6
   d724e:	f003 fe7a 	bl	daf46 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d7252:	4643      	mov	r3, r8
   d7254:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d7258:	6022      	str	r2, [r4, #0]
   d725a:	685a      	ldr	r2, [r3, #4]
   d725c:	6062      	str	r2, [r4, #4]
   d725e:	891a      	ldrh	r2, [r3, #8]
   d7260:	8122      	strh	r2, [r4, #8]
   d7262:	7a9b      	ldrb	r3, [r3, #10]
   d7264:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d7266:	f898 3000 	ldrb.w	r3, [r8]
   d726a:	f003 0318 	and.w	r3, r3, #24
   d726e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d7270:	4b0f      	ldr	r3, [pc, #60]	; (d72b0 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d7272:	681b      	ldr	r3, [r3, #0]
   d7274:	b19b      	cbz	r3, d729e <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d7276:	f104 010e 	add.w	r1, r4, #14
   d727a:	f104 0010 	add.w	r0, r4, #16
   d727e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d7280:	8a23      	ldrh	r3, [r4, #16]
   d7282:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d7284:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d7286:	89e3      	ldrh	r3, [r4, #14]
   d7288:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d728a:	68aa      	ldr	r2, [r5, #8]
   d728c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d7290:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d7294:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d7298:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d729c:	e790      	b.n	d71c0 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d729e:	2321      	movs	r3, #33	; 0x21
   d72a0:	7423      	strb	r3, [r4, #16]
   d72a2:	2328      	movs	r3, #40	; 0x28
   d72a4:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d72a6:	2308      	movs	r3, #8
   d72a8:	73a6      	strb	r6, [r4, #14]
   d72aa:	73e3      	strb	r3, [r4, #15]
   d72ac:	e7e8      	b.n	d7280 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d72ae:	bf00      	nop
   d72b0:	2003e53c 	.word	0x2003e53c

000d72b4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d72b4:	b513      	push	{r0, r1, r4, lr}
   d72b6:	4604      	mov	r4, r0
    }
   d72b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d72ba:	b159      	cbz	r1, d72d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d72bc:	9101      	str	r1, [sp, #4]
   d72be:	f003 fe9e 	bl	daffe <strlen>
   d72c2:	6823      	ldr	r3, [r4, #0]
   d72c4:	9901      	ldr	r1, [sp, #4]
   d72c6:	68db      	ldr	r3, [r3, #12]
   d72c8:	4602      	mov	r2, r0
   d72ca:	4620      	mov	r0, r4
    }
   d72cc:	b002      	add	sp, #8
   d72ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d72d2:	4718      	bx	r3
    }
   d72d4:	b002      	add	sp, #8
   d72d6:	bd10      	pop	{r4, pc}

000d72d8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d72d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d72da:	7803      	ldrb	r3, [r0, #0]
   d72dc:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d72de:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d72e0:	d520      	bpl.n	d7324 <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d72e2:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d72e4:	6881      	ldr	r1, [r0, #8]
   d72e6:	f100 020c 	add.w	r2, r0, #12
   d72ea:	6818      	ldr	r0, [r3, #0]
   d72ec:	9201      	str	r2, [sp, #4]
   d72ee:	f000 fb84 	bl	d79fa <_ZN9SdSpiCard10writeBlockEmPKh>
   d72f2:	9a01      	ldr	r2, [sp, #4]
   d72f4:	4605      	mov	r5, r0
   d72f6:	b918      	cbnz	r0, d7300 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d72f8:	2500      	movs	r5, #0
}
   d72fa:	4628      	mov	r0, r5
   d72fc:	b003      	add	sp, #12
   d72fe:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d7300:	7823      	ldrb	r3, [r4, #0]
   d7302:	079b      	lsls	r3, r3, #30
   d7304:	d404      	bmi.n	d7310 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d7306:	7823      	ldrb	r3, [r4, #0]
   d7308:	f023 0301 	bic.w	r3, r3, #1
   d730c:	7023      	strb	r3, [r4, #0]
   d730e:	e7f4      	b.n	d72fa <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d7310:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d7314:	6919      	ldr	r1, [r3, #16]
   d7316:	4401      	add	r1, r0
   d7318:	6818      	ldr	r0, [r3, #0]
   d731a:	f000 fb6e 	bl	d79fa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d731e:	2800      	cmp	r0, #0
   d7320:	d1f1      	bne.n	d7306 <_ZN8FatCache4syncEv+0x2e>
   d7322:	e7e9      	b.n	d72f8 <_ZN8FatCache4syncEv+0x20>
  return true;
   d7324:	2501      	movs	r5, #1
   d7326:	e7e8      	b.n	d72fa <_ZN8FatCache4syncEv+0x22>

000d7328 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7328:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d732a:	6883      	ldr	r3, [r0, #8]
   d732c:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d732e:	4604      	mov	r4, r0
   d7330:	460e      	mov	r6, r1
   d7332:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7334:	d009      	beq.n	d734a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d7336:	f7ff ffcf 	bl	d72d8 <_ZN8FatCache4syncEv>
   d733a:	b908      	cbnz	r0, d7340 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d733c:	2000      	movs	r0, #0
}
   d733e:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d7340:	076b      	lsls	r3, r5, #29
   d7342:	d50a      	bpl.n	d735a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d7344:	2300      	movs	r3, #0
   d7346:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7348:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d734a:	7822      	ldrb	r2, [r4, #0]
   d734c:	f005 0503 	and.w	r5, r5, #3
   d7350:	4620      	mov	r0, r4
   d7352:	4315      	orrs	r5, r2
   d7354:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d7358:	e7f1      	b.n	d733e <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d735a:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d735c:	f104 020c 	add.w	r2, r4, #12
   d7360:	6818      	ldr	r0, [r3, #0]
   d7362:	4631      	mov	r1, r6
   d7364:	f000 fac0 	bl	d78e8 <_ZN9SdSpiCard9readBlockEmPh>
   d7368:	2800      	cmp	r0, #0
   d736a:	d1eb      	bne.n	d7344 <_ZN8FatCache4readEmh+0x1c>
   d736c:	e7e6      	b.n	d733c <_ZN8FatCache4readEmh+0x14>

000d736e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d736e:	7983      	ldrb	r3, [r0, #6]
   d7370:	6940      	ldr	r0, [r0, #20]
   d7372:	3902      	subs	r1, #2
   d7374:	4099      	lsls	r1, r3
}
   d7376:	4408      	add	r0, r1
   d7378:	4770      	bx	lr

000d737a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d737a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d737c:	b570      	push	{r4, r5, r6, lr}
   d737e:	4605      	mov	r5, r0
   d7380:	460c      	mov	r4, r1
   d7382:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d7384:	d802      	bhi.n	d738c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d7386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d738a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d738c:	69c3      	ldr	r3, [r0, #28]
   d738e:	428b      	cmp	r3, r1
   d7390:	d3f9      	bcc.n	d7386 <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d7392:	79c3      	ldrb	r3, [r0, #7]
   d7394:	2b20      	cmp	r3, #32
   d7396:	d116      	bne.n	d73c6 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d7398:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d739a:	2202      	movs	r2, #2
   d739c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d73a0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d73a4:	f7ff ffc0 	bl	d7328 <_ZN8FatCache4readEmh>
    if (!pc) {
   d73a8:	2800      	cmp	r0, #0
   d73aa:	d0ec      	beq.n	d7386 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d73ac:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d73b0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d73b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d73b8:	69ea      	ldr	r2, [r5, #28]
   d73ba:	429a      	cmp	r2, r3
  *value = next;
   d73bc:	bf26      	itte	cs
   d73be:	6033      	strcs	r3, [r6, #0]
  return 1;
   d73c0:	2001      	movcs	r0, #1
    return 0;
   d73c2:	2000      	movcc	r0, #0
   d73c4:	e7e1      	b.n	d738a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d73c6:	2b10      	cmp	r3, #16
   d73c8:	d1dd      	bne.n	d7386 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d73ca:	6983      	ldr	r3, [r0, #24]
   d73cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d73d0:	2202      	movs	r2, #2
   d73d2:	4419      	add	r1, r3
   d73d4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d73d8:	f7ff ffa6 	bl	d7328 <_ZN8FatCache4readEmh>
    if (!pc) {
   d73dc:	2800      	cmp	r0, #0
   d73de:	d0d2      	beq.n	d7386 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d73e0:	b2e4      	uxtb	r4, r4
   d73e2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d73e6:	e7e7      	b.n	d73b8 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d73e8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d73e8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d73ea:	b538      	push	{r3, r4, r5, lr}
   d73ec:	460c      	mov	r4, r1
   d73ee:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d73f0:	d801      	bhi.n	d73f6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d73f2:	2000      	movs	r0, #0
}
   d73f4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d73f6:	69c3      	ldr	r3, [r0, #28]
   d73f8:	428b      	cmp	r3, r1
   d73fa:	d3fa      	bcc.n	d73f2 <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d73fc:	79c3      	ldrb	r3, [r0, #7]
   d73fe:	2b20      	cmp	r3, #32
   d7400:	d10f      	bne.n	d7422 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d7402:	6981      	ldr	r1, [r0, #24]
   d7404:	2203      	movs	r2, #3
   d7406:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d740a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d740e:	f7ff ff8b 	bl	d7328 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7412:	2800      	cmp	r0, #0
   d7414:	d0ed      	beq.n	d73f2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d7416:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d741a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d741e:	2001      	movs	r0, #1
   d7420:	e7e8      	b.n	d73f4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d7422:	2b10      	cmp	r3, #16
   d7424:	d1e5      	bne.n	d73f2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d7426:	6983      	ldr	r3, [r0, #24]
   d7428:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d742c:	2203      	movs	r2, #3
   d742e:	4419      	add	r1, r3
   d7430:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7434:	f7ff ff78 	bl	d7328 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7438:	2800      	cmp	r0, #0
   d743a:	d0da      	beq.n	d73f2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d743c:	b2e4      	uxtb	r4, r4
   d743e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d7442:	e7ec      	b.n	d741e <_ZN9FatVolume6fatPutEmm+0x36>

000d7444 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d7448:	68c4      	ldr	r4, [r0, #12]
   d744a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d744c:	4605      	mov	r5, r0
   d744e:	460e      	mov	r6, r1
   d7450:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d7452:	d301      	bcc.n	d7458 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d7454:	2701      	movs	r7, #1
   d7456:	e001      	b.n	d745c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7458:	460c      	mov	r4, r1
    setStart = false;
   d745a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d745c:	69eb      	ldr	r3, [r5, #28]
    find++;
   d745e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d7460:	42a3      	cmp	r3, r4
   d7462:	d202      	bcs.n	d746a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d7464:	b9c7      	cbnz	r7, d7498 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d7466:	68ec      	ldr	r4, [r5, #12]
   d7468:	e7f4      	b.n	d7454 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d746a:	42a6      	cmp	r6, r4
   d746c:	d014      	beq.n	d7498 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d746e:	aa01      	add	r2, sp, #4
   d7470:	4621      	mov	r1, r4
   d7472:	4628      	mov	r0, r5
   d7474:	f7ff ff81 	bl	d737a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d7478:	2800      	cmp	r0, #0
   d747a:	db0d      	blt.n	d7498 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d747c:	d0ee      	beq.n	d745c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d747e:	9b01      	ldr	r3, [sp, #4]
   d7480:	2b00      	cmp	r3, #0
   d7482:	d1eb      	bne.n	d745c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d7484:	b107      	cbz	r7, d7488 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d7486:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d7488:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d748c:	4621      	mov	r1, r4
   d748e:	4628      	mov	r0, r5
   d7490:	f7ff ffaa 	bl	d73e8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d7494:	4607      	mov	r7, r0
   d7496:	b920      	cbnz	r0, d74a2 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d7498:	2700      	movs	r7, #0
}
   d749a:	4638      	mov	r0, r7
   d749c:	b002      	add	sp, #8
   d749e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d74a2:	b916      	cbnz	r6, d74aa <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d74a4:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d74a8:	e7f7      	b.n	d749a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d74aa:	4622      	mov	r2, r4
   d74ac:	4631      	mov	r1, r6
   d74ae:	4628      	mov	r0, r5
   d74b0:	f7ff ff9a 	bl	d73e8 <_ZN9FatVolume6fatPutEmm>
   d74b4:	2800      	cmp	r0, #0
   d74b6:	d1f5      	bne.n	d74a4 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d74b8:	e7ee      	b.n	d7498 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d74ba <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d74ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d74bc:	4605      	mov	r5, r0
   d74be:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d74c0:	aa01      	add	r2, sp, #4
   d74c2:	4621      	mov	r1, r4
   d74c4:	4628      	mov	r0, r5
   d74c6:	f7ff ff58 	bl	d737a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d74ca:	1e06      	subs	r6, r0, #0
   d74cc:	db10      	blt.n	d74f0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d74ce:	2200      	movs	r2, #0
   d74d0:	4621      	mov	r1, r4
   d74d2:	4628      	mov	r0, r5
   d74d4:	f7ff ff88 	bl	d73e8 <_ZN9FatVolume6fatPutEmm>
   d74d8:	b150      	cbz	r0, d74f0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d74da:	68eb      	ldr	r3, [r5, #12]
   d74dc:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d74de:	bf24      	itt	cs
   d74e0:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d74e4:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d74e6:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d74e8:	2e00      	cmp	r6, #0
   d74ea:	d1e9      	bne.n	d74c0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d74ec:	b002      	add	sp, #8
   d74ee:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d74f0:	2000      	movs	r0, #0
   d74f2:	e7fb      	b.n	d74ec <_ZN9FatVolume9freeChainEm+0x32>

000d74f4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d74f4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d74f6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d74f8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d74fa:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d74fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d7500:	4604      	mov	r4, r0
  m_fatType = 0;
   d7502:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d7504:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d7508:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d750a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d750e:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d7510:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d7514:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7518:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d751c:	460d      	mov	r5, r1
   d751e:	b1b9      	cbz	r1, d7550 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d7520:	2904      	cmp	r1, #4
   d7522:	d901      	bls.n	d7528 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7524:	2000      	movs	r0, #0
}
   d7526:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d7528:	4611      	mov	r1, r2
   d752a:	4630      	mov	r0, r6
   d752c:	f7ff fefc 	bl	d7328 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7530:	2800      	cmp	r0, #0
   d7532:	d0f7      	beq.n	d7524 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7534:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7538:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d753c:	065b      	lsls	r3, r3, #25
   d753e:	d1f1      	bne.n	d7524 <_ZN9FatVolume4initEh+0x30>
   d7540:	f105 011b 	add.w	r1, r5, #27
   d7544:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d7548:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d754c:	2d00      	cmp	r5, #0
   d754e:	d0e9      	beq.n	d7524 <_ZN9FatVolume4initEh+0x30>
   d7550:	2200      	movs	r2, #0
   d7552:	4629      	mov	r1, r5
   d7554:	4630      	mov	r0, r6
   d7556:	f7ff fee7 	bl	d7328 <_ZN8FatCache4readEmh>
  if (!pc) {
   d755a:	2800      	cmp	r0, #0
   d755c:	d0e2      	beq.n	d7524 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d755e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d7562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7566:	d1dd      	bne.n	d7524 <_ZN9FatVolume4initEh+0x30>
   d7568:	7c03      	ldrb	r3, [r0, #16]
   d756a:	2b02      	cmp	r3, #2
   d756c:	d1da      	bne.n	d7524 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d756e:	89c3      	ldrh	r3, [r0, #14]
   d7570:	2b00      	cmp	r3, #0
   d7572:	d0d7      	beq.n	d7524 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d7574:	7b41      	ldrb	r1, [r0, #13]
   d7576:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d7578:	1e4b      	subs	r3, r1, #1
   d757a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d757c:	2300      	movs	r3, #0
   d757e:	71a3      	strb	r3, [r4, #6]
   d7580:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d7582:	2301      	movs	r3, #1
   d7584:	4299      	cmp	r1, r3
   d7586:	d007      	beq.n	d7598 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d7588:	3e01      	subs	r6, #1
   d758a:	d0cb      	beq.n	d7524 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d758c:	79a2      	ldrb	r2, [r4, #6]
   d758e:	005b      	lsls	r3, r3, #1
   d7590:	3201      	adds	r2, #1
   d7592:	b2db      	uxtb	r3, r3
   d7594:	71a2      	strb	r2, [r4, #6]
   d7596:	e7f5      	b.n	d7584 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d7598:	8ac1      	ldrh	r1, [r0, #22]
   d759a:	b901      	cbnz	r1, d759e <_ZN9FatVolume4initEh+0xaa>
   d759c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d759e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d75a0:	89c3      	ldrh	r3, [r0, #14]
   d75a2:	442b      	add	r3, r5
   d75a4:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d75a6:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d75aa:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d75ac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d75b0:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d75b2:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d75b6:	0149      	lsls	r1, r1, #5
   d75b8:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d75bc:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d75c0:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d75c2:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d75c6:	b902      	cbnz	r2, d75ca <_ZN9FatVolume4initEh+0xd6>
   d75c8:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d75ca:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d75cc:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d75ce:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d75d0:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d75d2:	1c4b      	adds	r3, r1, #1
   d75d4:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d75d6:	f640 73f4 	movw	r3, #4084	; 0xff4
   d75da:	4299      	cmp	r1, r3
   d75dc:	d802      	bhi.n	d75e4 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d75de:	230c      	movs	r3, #12
   d75e0:	71e3      	strb	r3, [r4, #7]
   d75e2:	e79f      	b.n	d7524 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d75e4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d75e8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d75ea:	bf85      	ittet	hi
   d75ec:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d75ee:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d75f0:	2310      	movls	r3, #16
    m_fatType = 32;
   d75f2:	2320      	movhi	r3, #32
   d75f4:	71e3      	strb	r3, [r4, #7]
  return true;
   d75f6:	2001      	movs	r0, #1
   d75f8:	e795      	b.n	d7526 <_ZN9FatVolume4initEh+0x32>
	...

000d75fc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d75fc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d75fe:	4e0e      	ldr	r6, [pc, #56]	; (d7638 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7600:	460d      	mov	r5, r1
   d7602:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7604:	f000 fbb4 	bl	d7d70 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7608:	6833      	ldr	r3, [r6, #0]
   d760a:	1ac0      	subs	r0, r0, r3
   d760c:	4b0b      	ldr	r3, [pc, #44]	; (d763c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d760e:	4298      	cmp	r0, r3
   d7610:	d908      	bls.n	d7624 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7612:	f000 fbb5 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7616:	4b0a      	ldr	r3, [pc, #40]	; (d7640 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7618:	6018      	str	r0, [r3, #0]
    		spark_process();
   d761a:	f000 fd97 	bl	d814c <spark_process>
   d761e:	f000 fba7 	bl	d7d70 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d7622:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7624:	f000 fbac 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7628:	b280      	uxth	r0, r0
   d762a:	1b40      	subs	r0, r0, r5
}
   d762c:	42a0      	cmp	r0, r4
   d762e:	bfd4      	ite	le
   d7630:	2000      	movle	r0, #0
   d7632:	2001      	movgt	r0, #1
   d7634:	bd70      	pop	{r4, r5, r6, pc}
   d7636:	bf00      	nop
   d7638:	2003e544 	.word	0x2003e544
   d763c:	000186a0 	.word	0x000186a0
   d7640:	2003e738 	.word	0x2003e738

000d7644 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7644:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7646:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d7648:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d764a:	b94d      	cbnz	r5, d7660 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d764c:	6840      	ldr	r0, [r0, #4]
   d764e:	f000 fa6b 	bl	d7b28 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d7652:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7654:	4629      	mov	r1, r5
   d7656:	7d18      	ldrb	r0, [r3, #20]
   d7658:	f002 fd17 	bl	da08a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d765c:	2301      	movs	r3, #1
   d765e:	7223      	strb	r3, [r4, #8]
  }
}
   d7660:	bd38      	pop	{r3, r4, r5, pc}

000d7662 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d7662:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7664:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d7666:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7668:	b16b      	cbz	r3, d7686 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d766a:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d766c:	2101      	movs	r1, #1
   d766e:	7d18      	ldrb	r0, [r3, #20]
   d7670:	f002 fd0b 	bl	da08a <digitalWrite>
     m_spiDriver->send(data);
   d7674:	6860      	ldr	r0, [r4, #4]
   d7676:	21ff      	movs	r1, #255	; 0xff
   d7678:	f000 fa88 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d767c:	6860      	ldr	r0, [r4, #4]
   d767e:	f000 fa67 	bl	d7b50 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d7682:	2300      	movs	r3, #0
   d7684:	7223      	strb	r3, [r4, #8]
  }
}
   d7686:	bd10      	pop	{r4, pc}

000d7688 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d7688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d768a:	4604      	mov	r4, r0
   d768c:	460d      	mov	r5, r1
   d768e:	4616      	mov	r6, r2
   d7690:	f000 fb76 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d7694:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d7696:	6860      	ldr	r0, [r4, #4]
   d7698:	f000 fa5d 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d769c:	28ff      	cmp	r0, #255	; 0xff
   d769e:	7260      	strb	r0, [r4, #9]
   d76a0:	d10e      	bne.n	d76c0 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d76a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d76a6:	4639      	mov	r1, r7
   d76a8:	4620      	mov	r0, r4
   d76aa:	f7ff ffa7 	bl	d75fc <_ZN9SdSpiCard10isTimedOutEtt>
   d76ae:	2800      	cmp	r0, #0
   d76b0:	d0f1      	beq.n	d7696 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d76b2:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d76b4:	4620      	mov	r0, r4
   d76b6:	7023      	strb	r3, [r4, #0]
   d76b8:	f7ff ffd3 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d76bc:	2000      	movs	r0, #0
}
   d76be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d76c0:	28fe      	cmp	r0, #254	; 0xfe
   d76c2:	d001      	beq.n	d76c8 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d76c4:	2350      	movs	r3, #80	; 0x50
   d76c6:	e7f5      	b.n	d76b4 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d76c8:	6860      	ldr	r0, [r4, #4]
   d76ca:	4632      	mov	r2, r6
   d76cc:	4629      	mov	r1, r5
   d76ce:	f000 fa47 	bl	d7b60 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d76d2:	7260      	strb	r0, [r4, #9]
   d76d4:	b108      	cbz	r0, d76da <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d76d6:	2360      	movs	r3, #96	; 0x60
   d76d8:	e7ec      	b.n	d76b4 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d76da:	6860      	ldr	r0, [r4, #4]
   d76dc:	f000 fa3b 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
   d76e0:	6860      	ldr	r0, [r4, #4]
   d76e2:	f000 fa38 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
   d76e6:	2001      	movs	r0, #1
   d76e8:	e7e9      	b.n	d76be <_ZN9SdSpiCard8readDataEPhj+0x36>

000d76ea <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d76ea:	b570      	push	{r4, r5, r6, lr}
   d76ec:	4604      	mov	r4, r0
   d76ee:	460e      	mov	r6, r1
   d76f0:	f000 fb46 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
   d76f4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d76f6:	4632      	mov	r2, r6
   d76f8:	4629      	mov	r1, r5
   d76fa:	4620      	mov	r0, r4
   d76fc:	f7ff ff7e 	bl	d75fc <_ZN9SdSpiCard10isTimedOutEtt>
   d7700:	b930      	cbnz	r0, d7710 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d7702:	6860      	ldr	r0, [r4, #4]
   d7704:	f000 fa27 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7708:	28ff      	cmp	r0, #255	; 0xff
   d770a:	d1f4      	bne.n	d76f6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d770c:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d770e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d7710:	2000      	movs	r0, #0
   d7712:	e7fc      	b.n	d770e <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d7714 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d7716:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7718:	9201      	str	r2, [sp, #4]
   d771a:	4604      	mov	r4, r0
   d771c:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d771e:	b90b      	cbnz	r3, d7724 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d7720:	f7ff ff90 	bl	d7644 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d7724:	b125      	cbz	r5, d7730 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d7726:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d772a:	4620      	mov	r0, r4
   d772c:	f7ff ffdd 	bl	d76ea <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d7730:	6860      	ldr	r0, [r4, #4]
   d7732:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7736:	f000 fa29 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
   d773a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d773c:	af01      	add	r7, sp, #4
   d773e:	5db9      	ldrb	r1, [r7, r6]
   d7740:	6860      	ldr	r0, [r4, #4]
   d7742:	f000 fa23 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d7746:	3e01      	subs	r6, #1
   d7748:	d2f9      	bcs.n	d773e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d774a:	2d00      	cmp	r5, #0
   d774c:	6860      	ldr	r0, [r4, #4]
   d774e:	bf0c      	ite	eq
   d7750:	2195      	moveq	r1, #149	; 0x95
   d7752:	2187      	movne	r1, #135	; 0x87
   d7754:	f000 fa1a 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7758:	6860      	ldr	r0, [r4, #4]
   d775a:	f000 f9fc 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
   d775e:	250b      	movs	r5, #11
   d7760:	6860      	ldr	r0, [r4, #4]
   d7762:	f000 f9f8 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7766:	0603      	lsls	r3, r0, #24
   d7768:	7260      	strb	r0, [r4, #9]
   d776a:	d503      	bpl.n	d7774 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d776c:	3d01      	subs	r5, #1
   d776e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7772:	d1f5      	bne.n	d7760 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d7774:	b003      	add	sp, #12
   d7776:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7778 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d7778:	b570      	push	{r4, r5, r6, lr}
   d777a:	4604      	mov	r4, r0
   d777c:	460d      	mov	r5, r1
   d777e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d7780:	2137      	movs	r1, #55	; 0x37
   d7782:	2200      	movs	r2, #0
   d7784:	f7ff ffc6 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d7788:	4632      	mov	r2, r6
   d778a:	4629      	mov	r1, r5
   d778c:	4620      	mov	r0, r4
  }
   d778e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d7792:	f7ff bfbf 	b.w	d7714 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d7798 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d7798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d779c:	2500      	movs	r5, #0
   d779e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d77a0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d77a2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d77a4:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d77a6:	4604      	mov	r4, r0
   d77a8:	4690      	mov	r8, r2
   d77aa:	461e      	mov	r6, r3
   d77ac:	f000 fae8 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d77b0:	4641      	mov	r1, r8
   d77b2:	4607      	mov	r7, r0
   d77b4:	6860      	ldr	r0, [r4, #4]
   d77b6:	f000 f9bb 	bl	d7b30 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d77ba:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d77bc:	4a49      	ldr	r2, [pc, #292]	; (d78e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d77be:	721d      	strb	r5, [r3, #8]
   d77c0:	2501      	movs	r5, #1
   d77c2:	60da      	str	r2, [r3, #12]
   d77c4:	821d      	strh	r5, [r3, #16]
  spiStart();
   d77c6:	4620      	mov	r0, r4
   d77c8:	f7ff ff3c 	bl	d7644 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d77cc:	6863      	ldr	r3, [r4, #4]
   d77ce:	4629      	mov	r1, r5
   d77d0:	7d18      	ldrb	r0, [r3, #20]
   d77d2:	f002 fc5a 	bl	da08a <digitalWrite>
   d77d6:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d77d8:	6860      	ldr	r0, [r4, #4]
   d77da:	21ff      	movs	r1, #255	; 0xff
   d77dc:	3d01      	subs	r5, #1
   d77de:	f000 f9d5 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d77e2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d77e6:	d1f7      	bne.n	d77d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d77e8:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d77ea:	4629      	mov	r1, r5
   d77ec:	7d18      	ldrb	r0, [r3, #20]
   d77ee:	f002 fc4c 	bl	da08a <digitalWrite>
  }
   d77f2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d77f4:	2200      	movs	r2, #0
   d77f6:	4611      	mov	r1, r2
   d77f8:	4620      	mov	r0, r4
   d77fa:	f7ff ff8b 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d77fe:	2801      	cmp	r0, #1
   d7800:	4680      	mov	r8, r0
   d7802:	d018      	beq.n	d7836 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d7804:	3d01      	subs	r5, #1
   d7806:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d780a:	d107      	bne.n	d781c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d780c:	2320      	movs	r3, #32
  spiStop();
   d780e:	4620      	mov	r0, r4
   d7810:	7023      	strb	r3, [r4, #0]
   d7812:	f7ff ff26 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7816:	2000      	movs	r0, #0
}
   d7818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d781c:	6860      	ldr	r0, [r4, #4]
   d781e:	21fd      	movs	r1, #253	; 0xfd
   d7820:	f000 f9b4 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
   d7824:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d7828:	6860      	ldr	r0, [r4, #4]
   d782a:	f000 f994 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d782e:	f1b8 0801 	subs.w	r8, r8, #1
   d7832:	d1f9      	bne.n	d7828 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d7834:	e7de      	b.n	d77f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7836:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d783a:	2108      	movs	r1, #8
   d783c:	4620      	mov	r0, r4
   d783e:	f7ff ff69 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d7842:	2805      	cmp	r0, #5
   d7844:	d114      	bne.n	d7870 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d7846:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d784a:	2500      	movs	r5, #0
   d784c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d784e:	462a      	mov	r2, r5
   d7850:	2129      	movs	r1, #41	; 0x29
   d7852:	4620      	mov	r0, r4
   d7854:	f7ff ff90 	bl	d7778 <_ZN9SdSpiCard8cardAcmdEhm>
   d7858:	4602      	mov	r2, r0
   d785a:	b1d8      	cbz	r0, d7894 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d785c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d7860:	4639      	mov	r1, r7
   d7862:	4620      	mov	r0, r4
   d7864:	f7ff feca 	bl	d75fc <_ZN9SdSpiCard10isTimedOutEtt>
   d7868:	2800      	cmp	r0, #0
   d786a:	d0f0      	beq.n	d784e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d786c:	2343      	movs	r3, #67	; 0x43
   d786e:	e7ce      	b.n	d780e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d7870:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d7872:	6860      	ldr	r0, [r4, #4]
   d7874:	f000 f96f 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
   d7878:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d787a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d787e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d7880:	d1f7      	bne.n	d7872 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d7882:	28aa      	cmp	r0, #170	; 0xaa
   d7884:	d104      	bne.n	d7890 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d7886:	2302      	movs	r3, #2
   d7888:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d788a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d788e:	e7dd      	b.n	d784c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d7890:	2325      	movs	r3, #37	; 0x25
   d7892:	e7bc      	b.n	d780e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d7894:	7aa3      	ldrb	r3, [r4, #10]
   d7896:	2b02      	cmp	r3, #2
   d7898:	d118      	bne.n	d78cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d789a:	213a      	movs	r1, #58	; 0x3a
   d789c:	4620      	mov	r0, r4
   d789e:	f7ff ff39 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d78a2:	b108      	cbz	r0, d78a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d78a4:	2337      	movs	r3, #55	; 0x37
   d78a6:	e7b2      	b.n	d780e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d78a8:	6860      	ldr	r0, [r4, #4]
   d78aa:	f000 f954 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d78ae:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d78b2:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d78b4:	bf04      	itt	eq
   d78b6:	2303      	moveq	r3, #3
   d78b8:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d78ba:	6860      	ldr	r0, [r4, #4]
   d78bc:	f000 f94b 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
   d78c0:	6860      	ldr	r0, [r4, #4]
   d78c2:	f000 f948 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
   d78c6:	6860      	ldr	r0, [r4, #4]
   d78c8:	f000 f945 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d78cc:	4620      	mov	r0, r4
   d78ce:	f7ff fec8 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d78d2:	6863      	ldr	r3, [r4, #4]
   d78d4:	7930      	ldrb	r0, [r6, #4]
   d78d6:	68b1      	ldr	r1, [r6, #8]
   d78d8:	89b2      	ldrh	r2, [r6, #12]
   d78da:	821a      	strh	r2, [r3, #16]
   d78dc:	7218      	strb	r0, [r3, #8]
   d78de:	60d9      	str	r1, [r3, #12]
  return true;
   d78e0:	2001      	movs	r0, #1
   d78e2:	e799      	b.n	d7818 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d78e4:	0003d090 	.word	0x0003d090

000d78e8 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78e8:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d78ea:	7a83      	ldrb	r3, [r0, #10]
   d78ec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d78ee:	bf18      	it	ne
   d78f0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78f2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d78f4:	460a      	mov	r2, r1
   d78f6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d78f8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d78fa:	f7ff ff0b 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d78fe:	b130      	cbz	r0, d790e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d7900:	2330      	movs	r3, #48	; 0x30
   d7902:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7904:	4620      	mov	r0, r4
   d7906:	f7ff feac 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d790a:	2500      	movs	r5, #0
   d790c:	e00b      	b.n	d7926 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d790e:	4629      	mov	r1, r5
   d7910:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7914:	4620      	mov	r0, r4
   d7916:	f7ff feb7 	bl	d7688 <_ZN9SdSpiCard8readDataEPhj>
   d791a:	4605      	mov	r5, r0
   d791c:	2800      	cmp	r0, #0
   d791e:	d0f1      	beq.n	d7904 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d7920:	4620      	mov	r0, r4
   d7922:	f7ff fe9e 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
}
   d7926:	4628      	mov	r0, r5
   d7928:	bd38      	pop	{r3, r4, r5, pc}

000d792a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d792a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d792c:	7a83      	ldrb	r3, [r0, #10]
   d792e:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7930:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7932:	bf18      	it	ne
   d7934:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d7936:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7938:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d793a:	f7ff feeb 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d793e:	b130      	cbz	r0, d794e <_ZN9SdSpiCard9readStartEm+0x24>
   d7940:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d7942:	4620      	mov	r0, r4
   d7944:	7023      	strb	r3, [r4, #0]
   d7946:	f7ff fe8c 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d794a:	2000      	movs	r0, #0
}
   d794c:	bd10      	pop	{r4, pc}
  return true;
   d794e:	2001      	movs	r0, #1
   d7950:	e7fc      	b.n	d794c <_ZN9SdSpiCard9readStartEm+0x22>

000d7952 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d7952:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7954:	2200      	movs	r2, #0
   d7956:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d7958:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d795a:	f7ff fedb 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d795e:	b130      	cbz	r0, d796e <_ZN9SdSpiCard8readStopEv+0x1c>
   d7960:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d7962:	4620      	mov	r0, r4
   d7964:	7023      	strb	r3, [r4, #0]
   d7966:	f7ff fe7c 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d796a:	2000      	movs	r0, #0
}
   d796c:	bd10      	pop	{r4, pc}
  spiStop();
   d796e:	4620      	mov	r0, r4
   d7970:	f7ff fe77 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d7974:	2001      	movs	r0, #1
   d7976:	e7f9      	b.n	d796c <_ZN9SdSpiCard8readStopEv+0x1a>

000d7978 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d7978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d797a:	4604      	mov	r4, r0
   d797c:	4616      	mov	r6, r2
   d797e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d7980:	f7ff ffd3 	bl	d792a <_ZN9SdSpiCard9readStartEm>
   d7984:	b168      	cbz	r0, d79a2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d7986:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d7988:	b2ab      	uxth	r3, r5
   d798a:	429f      	cmp	r7, r3
   d798c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d7990:	d909      	bls.n	d79a6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d7992:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7996:	4620      	mov	r0, r4
   d7998:	f7ff fe76 	bl	d7688 <_ZN9SdSpiCard8readDataEPhj>
   d799c:	3501      	adds	r5, #1
   d799e:	2800      	cmp	r0, #0
   d79a0:	d1f2      	bne.n	d7988 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d79a2:	2000      	movs	r0, #0
   d79a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d79a6:	4620      	mov	r0, r4
}
   d79a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d79ac:	f7ff bfd1 	b.w	d7952 <_ZN9SdSpiCard8readStopEv>

000d79b0 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d79b0:	b538      	push	{r3, r4, r5, lr}
   d79b2:	4604      	mov	r4, r0
   d79b4:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d79b6:	6840      	ldr	r0, [r0, #4]
   d79b8:	f000 f8e8 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d79bc:	f44f 7200 	mov.w	r2, #512	; 0x200
   d79c0:	6860      	ldr	r0, [r4, #4]
   d79c2:	4629      	mov	r1, r5
   d79c4:	f000 f8e6 	bl	d7b94 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d79c8:	6860      	ldr	r0, [r4, #4]
   d79ca:	21ff      	movs	r1, #255	; 0xff
   d79cc:	f000 f8de 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
   d79d0:	6860      	ldr	r0, [r4, #4]
   d79d2:	21ff      	movs	r1, #255	; 0xff
   d79d4:	f000 f8da 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d79d8:	6860      	ldr	r0, [r4, #4]
   d79da:	f000 f8bc 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d79de:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d79e0:	f000 001f 	and.w	r0, r0, #31
   d79e4:	2805      	cmp	r0, #5
   d79e6:	d006      	beq.n	d79f6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d79e8:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d79ea:	4620      	mov	r0, r4
   d79ec:	7023      	strb	r3, [r4, #0]
   d79ee:	f7ff fe38 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d79f2:	2000      	movs	r0, #0
}
   d79f4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d79f6:	2001      	movs	r0, #1
   d79f8:	e7fc      	b.n	d79f4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d79fa <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d79fa:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d79fc:	7a83      	ldrb	r3, [r0, #10]
   d79fe:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d7a00:	bf18      	it	ne
   d7a02:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a04:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d7a06:	460a      	mov	r2, r1
   d7a08:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7a0a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d7a0c:	f7ff fe82 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d7a10:	4606      	mov	r6, r0
   d7a12:	b130      	cbz	r0, d7a22 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d7a14:	2332      	movs	r3, #50	; 0x32
   d7a16:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7a18:	4620      	mov	r0, r4
   d7a1a:	f7ff fe22 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a1e:	2500      	movs	r5, #0
   d7a20:	e01f      	b.n	d7a62 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d7a22:	462a      	mov	r2, r5
   d7a24:	21fe      	movs	r1, #254	; 0xfe
   d7a26:	4620      	mov	r0, r4
   d7a28:	f7ff ffc2 	bl	d79b0 <_ZN9SdSpiCard9writeDataEhPKh>
   d7a2c:	2800      	cmp	r0, #0
   d7a2e:	d0f3      	beq.n	d7a18 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a30:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7a34:	4620      	mov	r0, r4
   d7a36:	f7ff fe58 	bl	d76ea <_ZN9SdSpiCard11waitNotBusyEt>
   d7a3a:	4605      	mov	r5, r0
   d7a3c:	b908      	cbnz	r0, d7a42 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d7a3e:	235a      	movs	r3, #90	; 0x5a
   d7a40:	e7e9      	b.n	d7a16 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d7a42:	4632      	mov	r2, r6
   d7a44:	210d      	movs	r1, #13
   d7a46:	4620      	mov	r0, r4
   d7a48:	f7ff fe64 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d7a4c:	b108      	cbz	r0, d7a52 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d7a4e:	2329      	movs	r3, #41	; 0x29
   d7a50:	e7e1      	b.n	d7a16 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d7a52:	6860      	ldr	r0, [r4, #4]
   d7a54:	f000 f87f 	bl	d7b56 <_ZN14SdSpiAltDriver7receiveEv>
   d7a58:	2800      	cmp	r0, #0
   d7a5a:	d1f8      	bne.n	d7a4e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d7a5c:	4620      	mov	r0, r4
   d7a5e:	f7ff fe00 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
}
   d7a62:	4628      	mov	r0, r5
   d7a64:	bd70      	pop	{r4, r5, r6, pc}

000d7a66 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a66:	b513      	push	{r0, r1, r4, lr}
   d7a68:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d7a6e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7a70:	f7ff fe3b 	bl	d76ea <_ZN9SdSpiCard11waitNotBusyEt>
   d7a74:	9a01      	ldr	r2, [sp, #4]
   d7a76:	b930      	cbnz	r0, d7a86 <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d7a78:	235b      	movs	r3, #91	; 0x5b
   d7a7a:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7a7c:	4620      	mov	r0, r4
   d7a7e:	f7ff fdf0 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7a82:	2000      	movs	r0, #0
   d7a84:	e005      	b.n	d7a92 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d7a86:	21fc      	movs	r1, #252	; 0xfc
   d7a88:	4620      	mov	r0, r4
   d7a8a:	f7ff ff91 	bl	d79b0 <_ZN9SdSpiCard9writeDataEhPKh>
   d7a8e:	2800      	cmp	r0, #0
   d7a90:	d0f4      	beq.n	d7a7c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d7a92:	b002      	add	sp, #8
   d7a94:	bd10      	pop	{r4, pc}

000d7a96 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a96:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7a98:	7a83      	ldrb	r3, [r0, #10]
   d7a9a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7a9c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7a9e:	bf18      	it	ne
   d7aa0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d7aa2:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7aa4:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d7aa6:	f7ff fe35 	bl	d7714 <_ZN9SdSpiCard11cardCommandEhm>
   d7aaa:	b130      	cbz	r0, d7aba <_ZN9SdSpiCard10writeStartEm+0x24>
   d7aac:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7aae:	4620      	mov	r0, r4
   d7ab0:	7023      	strb	r3, [r4, #0]
   d7ab2:	f7ff fdd6 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7ab6:	2000      	movs	r0, #0
}
   d7ab8:	bd10      	pop	{r4, pc}
  return true;
   d7aba:	2001      	movs	r0, #1
   d7abc:	e7fc      	b.n	d7ab8 <_ZN9SdSpiCard10writeStartEm+0x22>

000d7abe <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7abe:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ac0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d7ac4:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7ac6:	f7ff fe10 	bl	d76ea <_ZN9SdSpiCard11waitNotBusyEt>
   d7aca:	4605      	mov	r5, r0
   d7acc:	b930      	cbnz	r0, d7adc <_ZN9SdSpiCard9writeStopEv+0x1e>
   d7ace:	2356      	movs	r3, #86	; 0x56
   d7ad0:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d7ad2:	4620      	mov	r0, r4
   d7ad4:	f7ff fdc5 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7ad8:	4628      	mov	r0, r5
   d7ada:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d7adc:	6860      	ldr	r0, [r4, #4]
   d7ade:	21fd      	movs	r1, #253	; 0xfd
   d7ae0:	f000 f854 	bl	d7b8c <_ZN14SdSpiAltDriver4sendEh>
   d7ae4:	e7f5      	b.n	d7ad2 <_ZN9SdSpiCard9writeStopEv+0x14>

000d7ae6 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ae8:	4604      	mov	r4, r0
   d7aea:	4616      	mov	r6, r2
   d7aec:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7aee:	f7ff ffd2 	bl	d7a96 <_ZN9SdSpiCard10writeStartEm>
   d7af2:	b170      	cbz	r0, d7b12 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7af4:	2500      	movs	r5, #0
   d7af6:	42bd      	cmp	r5, r7
   d7af8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d7afc:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d7afe:	d004      	beq.n	d7b0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7b00:	f7ff ffb1 	bl	d7a66 <_ZN9SdSpiCard9writeDataEPKh>
   d7b04:	b128      	cbz	r0, d7b12 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7b06:	3501      	adds	r5, #1
   d7b08:	e7f5      	b.n	d7af6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d7b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d7b0e:	f7ff bfd6 	b.w	d7abe <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d7b12:	4620      	mov	r0, r4
   d7b14:	f7ff fda5 	bl	d7662 <_ZN9SdSpiCard7spiStopEv>
}
   d7b18:	2000      	movs	r0, #0
   d7b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b1c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7b1c:	4b01      	ldr	r3, [pc, #4]	; (d7b24 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7b1e:	2201      	movs	r2, #1
   d7b20:	701a      	strb	r2, [r3, #0]
}
   d7b22:	4770      	bx	lr
   d7b24:	2003e548 	.word	0x2003e548

000d7b28 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7b28:	1d01      	adds	r1, r0, #4
   d7b2a:	6800      	ldr	r0, [r0, #0]
   d7b2c:	f001 bbb4 	b.w	d9298 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7b30 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7b30:	b510      	push	{r4, lr}
   d7b32:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7b34:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7b36:	6800      	ldr	r0, [r0, #0]
   d7b38:	f001 fb70 	bl	d921c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7b3c:	7d20      	ldrb	r0, [r4, #20]
   d7b3e:	2101      	movs	r1, #1
   d7b40:	f002 fa92 	bl	da068 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7b44:	7d20      	ldrb	r0, [r4, #20]
   d7b46:	2101      	movs	r1, #1
}
   d7b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d7b4c:	f002 ba9d 	b.w	da08a <digitalWrite>

000d7b50 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7b50:	6800      	ldr	r0, [r0, #0]
   d7b52:	f001 bb87 	b.w	d9264 <_ZN8SPIClass14endTransactionEv>

000d7b56 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7b56:	6800      	ldr	r0, [r0, #0]
   d7b58:	21ff      	movs	r1, #255	; 0xff
   d7b5a:	f001 bc0b 	b.w	d9374 <_ZN8SPIClass8transferEh>
	...

000d7b60 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b62:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b64:	4a07      	ldr	r2, [pc, #28]	; (d7b84 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7b66:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7b68:	2500      	movs	r5, #0
   d7b6a:	4c07      	ldr	r4, [pc, #28]	; (d7b88 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b6c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7b6e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7b70:	460a      	mov	r2, r1
   d7b72:	4629      	mov	r1, r5
   d7b74:	f001 fc04 	bl	d9380 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7b78:	7823      	ldrb	r3, [r4, #0]
   d7b7a:	2b00      	cmp	r3, #0
   d7b7c:	d0fc      	beq.n	d7b78 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7b7e:	2000      	movs	r0, #0
   d7b80:	b003      	add	sp, #12
   d7b82:	bd30      	pop	{r4, r5, pc}
   d7b84:	000d7b1d 	.word	0x000d7b1d
   d7b88:	2003e548 	.word	0x2003e548

000d7b8c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7b8c:	6800      	ldr	r0, [r0, #0]
   d7b8e:	f001 bbf1 	b.w	d9374 <_ZN8SPIClass8transferEh>
	...

000d7b94 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d7b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7b96:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7b98:	4a06      	ldr	r2, [pc, #24]	; (d7bb4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7b9a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7b9c:	2500      	movs	r5, #0
   d7b9e:	4c06      	ldr	r4, [pc, #24]	; (d7bb8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7ba0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7ba2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7ba4:	462a      	mov	r2, r5
   d7ba6:	f001 fbeb 	bl	d9380 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d7baa:	7823      	ldrb	r3, [r4, #0]
   d7bac:	2b00      	cmp	r3, #0
   d7bae:	d0fc      	beq.n	d7baa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7bb0:	b003      	add	sp, #12
   d7bb2:	bd30      	pop	{r4, r5, pc}
   d7bb4:	000d7b1d 	.word	0x000d7b1d
   d7bb8:	2003e548 	.word	0x2003e548

000d7bbc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d7bbc:	b510      	push	{r4, lr}
   d7bbe:	4b06      	ldr	r3, [pc, #24]	; (d7bd8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d7bc0:	6003      	str	r3, [r0, #0]
   d7bc2:	4604      	mov	r4, r0
	if (mutex) {
   d7bc4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d7bc6:	b108      	cbz	r0, d7bcc <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d7bc8:	f000 f8aa 	bl	d7d20 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d7bcc:	4620      	mov	r0, r4
   d7bce:	f7fd fce1 	bl	d5594 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d7bd2:	4620      	mov	r0, r4
   d7bd4:	bd10      	pop	{r4, pc}
   d7bd6:	bf00      	nop
   d7bd8:	000ddd14 	.word	0x000ddd14

000d7bdc <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d7bdc:	b510      	push	{r4, lr}
   d7bde:	4604      	mov	r4, r0
}
   d7be0:	f7ff ffec 	bl	d7bbc <_ZN16OledWingAdafruitD1Ev>
   d7be4:	4620      	mov	r0, r4
   d7be6:	2170      	movs	r1, #112	; 0x70
   d7be8:	f002 fab8 	bl	da15c <_ZdlPvj>
   d7bec:	4620      	mov	r0, r4
   d7bee:	bd10      	pop	{r4, pc}

000d7bf0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d7bf0:	b530      	push	{r4, r5, lr}
   d7bf2:	b085      	sub	sp, #20
   d7bf4:	4604      	mov	r4, r0
   d7bf6:	460d      	mov	r5, r1
   d7bf8:	f002 fa8c 	bl	da114 <_Z19__fetch_global_Wirev>
   d7bfc:	4a10      	ldr	r2, [pc, #64]	; (d7c40 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d7bfe:	4911      	ldr	r1, [pc, #68]	; (d7c44 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d7c00:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d7c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7c08:	2180      	movs	r1, #128	; 0x80
   d7c0a:	4603      	mov	r3, r0
   d7c0c:	9200      	str	r2, [sp, #0]
   d7c0e:	4620      	mov	r0, r4
   d7c10:	2220      	movs	r2, #32
   d7c12:	f7fd fd45 	bl	d56a0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d7c16:	4b0c      	ldr	r3, [pc, #48]	; (d7c48 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d7c18:	6023      	str	r3, [r4, #0]
   d7c1a:	2300      	movs	r3, #0
   d7c1c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d7c20:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7c24:	f7fe f934 	bl	d5e90 <_ZN8DebounceC1Ev>
   d7c28:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7c2c:	f7fe f930 	bl	d5e90 <_ZN8DebounceC1Ev>
   d7c30:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7c34:	f7fe f92c 	bl	d5e90 <_ZN8DebounceC1Ev>
}
   d7c38:	4620      	mov	r0, r4
   d7c3a:	b005      	add	sp, #20
   d7c3c:	bd30      	pop	{r4, r5, pc}
   d7c3e:	bf00      	nop
   d7c40:	00061a80 	.word	0x00061a80
   d7c44:	000186a0 	.word	0x000186a0
   d7c48:	000ddd14 	.word	0x000ddd14

000d7c4c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d7c4c:	b513      	push	{r0, r1, r4, lr}
   d7c4e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d7c50:	3050      	adds	r0, #80	; 0x50
   d7c52:	f000 f85d 	bl	d7d10 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d7c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7c58:	07d9      	lsls	r1, r3, #31
   d7c5a:	d505      	bpl.n	d7c68 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d7c5c:	2202      	movs	r2, #2
   d7c5e:	2104      	movs	r1, #4
   d7c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7c64:	f7fe f928 	bl	d5eb8 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d7c68:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7c6a:	079a      	lsls	r2, r3, #30
   d7c6c:	d505      	bpl.n	d7c7a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d7c6e:	2200      	movs	r2, #0
   d7c70:	2103      	movs	r1, #3
   d7c72:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7c76:	f7fe f91f 	bl	d5eb8 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d7c7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7c7c:	075b      	lsls	r3, r3, #29
   d7c7e:	d505      	bpl.n	d7c8c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d7c80:	2202      	movs	r2, #2
   d7c82:	4611      	mov	r1, r2
   d7c84:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7c88:	f7fe f916 	bl	d5eb8 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d7c8c:	2301      	movs	r3, #1
   d7c8e:	9300      	str	r3, [sp, #0]
   d7c90:	223c      	movs	r2, #60	; 0x3c
   d7c92:	2102      	movs	r1, #2
   d7c94:	4620      	mov	r0, r4
   d7c96:	f7fd fe03 	bl	d58a0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d7c9a:	b002      	add	sp, #8
   d7c9c:	bd10      	pop	{r4, pc}
	...

000d7ca0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7ca0:	b508      	push	{r3, lr}
   d7ca2:	4b02      	ldr	r3, [pc, #8]	; (d7cac <cellular_signal+0xc>)
   d7ca4:	681b      	ldr	r3, [r3, #0]
   d7ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ca8:	9301      	str	r3, [sp, #4]
   d7caa:	bd08      	pop	{r3, pc}
   d7cac:	00030274 	.word	0x00030274

000d7cb0 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7cb0:	b508      	push	{r3, lr}
   d7cb2:	4b02      	ldr	r3, [pc, #8]	; (d7cbc <os_thread_yield+0xc>)
   d7cb4:	681b      	ldr	r3, [r3, #0]
   d7cb6:	68db      	ldr	r3, [r3, #12]
   d7cb8:	9301      	str	r3, [sp, #4]
   d7cba:	bd08      	pop	{r3, pc}
   d7cbc:	00030248 	.word	0x00030248

000d7cc0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7cc0:	b508      	push	{r3, lr}
   d7cc2:	4b02      	ldr	r3, [pc, #8]	; (d7ccc <os_thread_scheduling+0xc>)
   d7cc4:	681b      	ldr	r3, [r3, #0]
   d7cc6:	69db      	ldr	r3, [r3, #28]
   d7cc8:	9301      	str	r3, [sp, #4]
   d7cca:	bd08      	pop	{r3, pc}
   d7ccc:	00030248 	.word	0x00030248

000d7cd0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7cd0:	b508      	push	{r3, lr}
   d7cd2:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <os_timer_create+0xc>)
   d7cd4:	681b      	ldr	r3, [r3, #0]
   d7cd6:	6a1b      	ldr	r3, [r3, #32]
   d7cd8:	9301      	str	r3, [sp, #4]
   d7cda:	bd08      	pop	{r3, pc}
   d7cdc:	00030248 	.word	0x00030248

000d7ce0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7ce0:	b508      	push	{r3, lr}
   d7ce2:	4b02      	ldr	r3, [pc, #8]	; (d7cec <os_timer_destroy+0xc>)
   d7ce4:	681b      	ldr	r3, [r3, #0]
   d7ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ce8:	9301      	str	r3, [sp, #4]
   d7cea:	bd08      	pop	{r3, pc}
   d7cec:	00030248 	.word	0x00030248

000d7cf0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7cf0:	b508      	push	{r3, lr}
   d7cf2:	4b02      	ldr	r3, [pc, #8]	; (d7cfc <os_timer_get_id+0xc>)
   d7cf4:	681b      	ldr	r3, [r3, #0]
   d7cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7cf8:	9301      	str	r3, [sp, #4]
   d7cfa:	bd08      	pop	{r3, pc}
   d7cfc:	00030248 	.word	0x00030248

000d7d00 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7d00:	b508      	push	{r3, lr}
   d7d02:	4b02      	ldr	r3, [pc, #8]	; (d7d0c <os_timer_change+0xc>)
   d7d04:	681b      	ldr	r3, [r3, #0]
   d7d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7d08:	9301      	str	r3, [sp, #4]
   d7d0a:	bd08      	pop	{r3, pc}
   d7d0c:	00030248 	.word	0x00030248

000d7d10 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7d10:	b508      	push	{r3, lr}
   d7d12:	4b02      	ldr	r3, [pc, #8]	; (d7d1c <os_mutex_create+0xc>)
   d7d14:	681b      	ldr	r3, [r3, #0]
   d7d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d18:	9301      	str	r3, [sp, #4]
   d7d1a:	bd08      	pop	{r3, pc}
   d7d1c:	00030248 	.word	0x00030248

000d7d20 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d7d20:	b508      	push	{r3, lr}
   d7d22:	4b02      	ldr	r3, [pc, #8]	; (d7d2c <os_mutex_destroy+0xc>)
   d7d24:	681b      	ldr	r3, [r3, #0]
   d7d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7d28:	9301      	str	r3, [sp, #4]
   d7d2a:	bd08      	pop	{r3, pc}
   d7d2c:	00030248 	.word	0x00030248

000d7d30 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7d30:	b508      	push	{r3, lr}
   d7d32:	4b02      	ldr	r3, [pc, #8]	; (d7d3c <os_mutex_recursive_create+0xc>)
   d7d34:	681b      	ldr	r3, [r3, #0]
   d7d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d38:	9301      	str	r3, [sp, #4]
   d7d3a:	bd08      	pop	{r3, pc}
   d7d3c:	00030248 	.word	0x00030248

000d7d40 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7d40:	b508      	push	{r3, lr}
   d7d42:	4b02      	ldr	r3, [pc, #8]	; (d7d4c <os_timer_set_id+0xc>)
   d7d44:	681b      	ldr	r3, [r3, #0]
   d7d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7d48:	9301      	str	r3, [sp, #4]
   d7d4a:	bd08      	pop	{r3, pc}
   d7d4c:	00030248 	.word	0x00030248

000d7d50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7d50:	b508      	push	{r3, lr}
   d7d52:	4b02      	ldr	r3, [pc, #8]	; (d7d5c <HAL_RNG_GetRandomNumber+0xc>)
   d7d54:	681b      	ldr	r3, [r3, #0]
   d7d56:	685b      	ldr	r3, [r3, #4]
   d7d58:	9301      	str	r3, [sp, #4]
   d7d5a:	bd08      	pop	{r3, pc}
   d7d5c:	00030218 	.word	0x00030218

000d7d60 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7d60:	b508      	push	{r3, lr}
   d7d62:	4b02      	ldr	r3, [pc, #8]	; (d7d6c <HAL_Delay_Microseconds+0xc>)
   d7d64:	681b      	ldr	r3, [r3, #0]
   d7d66:	68db      	ldr	r3, [r3, #12]
   d7d68:	9301      	str	r3, [sp, #4]
   d7d6a:	bd08      	pop	{r3, pc}
   d7d6c:	00030218 	.word	0x00030218

000d7d70 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7d70:	b508      	push	{r3, lr}
   d7d72:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7d74:	681b      	ldr	r3, [r3, #0]
   d7d76:	691b      	ldr	r3, [r3, #16]
   d7d78:	9301      	str	r3, [sp, #4]
   d7d7a:	bd08      	pop	{r3, pc}
   d7d7c:	00030218 	.word	0x00030218

000d7d80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d80:	b508      	push	{r3, lr}
   d7d82:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d84:	681b      	ldr	r3, [r3, #0]
   d7d86:	695b      	ldr	r3, [r3, #20]
   d7d88:	9301      	str	r3, [sp, #4]
   d7d8a:	bd08      	pop	{r3, pc}
   d7d8c:	00030218 	.word	0x00030218

000d7d90 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7d90:	b508      	push	{r3, lr}
   d7d92:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <hal_rtc_time_is_valid+0xc>)
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d98:	9301      	str	r3, [sp, #4]
   d7d9a:	bd08      	pop	{r3, pc}
   d7d9c:	00030218 	.word	0x00030218

000d7da0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7da0:	b508      	push	{r3, lr}
   d7da2:	4b02      	ldr	r3, [pc, #8]	; (d7dac <hal_rtc_get_time+0xc>)
   d7da4:	681b      	ldr	r3, [r3, #0]
   d7da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	bd08      	pop	{r3, pc}
   d7dac:	00030218 	.word	0x00030218

000d7db0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7db0:	b508      	push	{r3, lr}
   d7db2:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <HAL_Pin_Mode+0xc>)
   d7db4:	681b      	ldr	r3, [r3, #0]
   d7db6:	689b      	ldr	r3, [r3, #8]
   d7db8:	9301      	str	r3, [sp, #4]
   d7dba:	bd08      	pop	{r3, pc}
   d7dbc:	0003022c 	.word	0x0003022c

000d7dc0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b02      	ldr	r3, [pc, #8]	; (d7dcc <HAL_Get_Pin_Mode+0xc>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	68db      	ldr	r3, [r3, #12]
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	bd08      	pop	{r3, pc}
   d7dcc:	0003022c 	.word	0x0003022c

000d7dd0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7dd0:	b508      	push	{r3, lr}
   d7dd2:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <HAL_GPIO_Write+0xc>)
   d7dd4:	681b      	ldr	r3, [r3, #0]
   d7dd6:	691b      	ldr	r3, [r3, #16]
   d7dd8:	9301      	str	r3, [sp, #4]
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	0003022c 	.word	0x0003022c

000d7de0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7de0:	b508      	push	{r3, lr}
   d7de2:	4b02      	ldr	r3, [pc, #8]	; (d7dec <HAL_GPIO_Read+0xc>)
   d7de4:	681b      	ldr	r3, [r3, #0]
   d7de6:	695b      	ldr	r3, [r3, #20]
   d7de8:	9301      	str	r3, [sp, #4]
   d7dea:	bd08      	pop	{r3, pc}
   d7dec:	0003022c 	.word	0x0003022c

000d7df0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7df0:	b508      	push	{r3, lr}
   d7df2:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <HAL_Interrupts_Attach+0xc>)
   d7df4:	681b      	ldr	r3, [r3, #0]
   d7df6:	699b      	ldr	r3, [r3, #24]
   d7df8:	9301      	str	r3, [sp, #4]
   d7dfa:	bd08      	pop	{r3, pc}
   d7dfc:	0003022c 	.word	0x0003022c

000d7e00 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7e00:	b508      	push	{r3, lr}
   d7e02:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <HAL_Interrupts_Detach+0xc>)
   d7e04:	681b      	ldr	r3, [r3, #0]
   d7e06:	69db      	ldr	r3, [r3, #28]
   d7e08:	9301      	str	r3, [sp, #4]
   d7e0a:	bd08      	pop	{r3, pc}
   d7e0c:	0003022c 	.word	0x0003022c

000d7e10 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7e10:	b508      	push	{r3, lr}
   d7e12:	4b02      	ldr	r3, [pc, #8]	; (d7e1c <hal_i2c_set_speed+0xc>)
   d7e14:	681b      	ldr	r3, [r3, #0]
   d7e16:	681b      	ldr	r3, [r3, #0]
   d7e18:	9301      	str	r3, [sp, #4]
   d7e1a:	bd08      	pop	{r3, pc}
   d7e1c:	00030228 	.word	0x00030228

000d7e20 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7e20:	b508      	push	{r3, lr}
   d7e22:	4b02      	ldr	r3, [pc, #8]	; (d7e2c <hal_i2c_begin+0xc>)
   d7e24:	681b      	ldr	r3, [r3, #0]
   d7e26:	68db      	ldr	r3, [r3, #12]
   d7e28:	9301      	str	r3, [sp, #4]
   d7e2a:	bd08      	pop	{r3, pc}
   d7e2c:	00030228 	.word	0x00030228

000d7e30 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7e30:	b508      	push	{r3, lr}
   d7e32:	4b02      	ldr	r3, [pc, #8]	; (d7e3c <hal_i2c_begin_transmission+0xc>)
   d7e34:	681b      	ldr	r3, [r3, #0]
   d7e36:	699b      	ldr	r3, [r3, #24]
   d7e38:	9301      	str	r3, [sp, #4]
   d7e3a:	bd08      	pop	{r3, pc}
   d7e3c:	00030228 	.word	0x00030228

000d7e40 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7e40:	b508      	push	{r3, lr}
   d7e42:	4b02      	ldr	r3, [pc, #8]	; (d7e4c <hal_i2c_end_transmission+0xc>)
   d7e44:	681b      	ldr	r3, [r3, #0]
   d7e46:	69db      	ldr	r3, [r3, #28]
   d7e48:	9301      	str	r3, [sp, #4]
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	00030228 	.word	0x00030228

000d7e50 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <hal_i2c_write+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	6a1b      	ldr	r3, [r3, #32]
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	00030228 	.word	0x00030228

000d7e60 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <hal_i2c_available+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	00030228 	.word	0x00030228

000d7e70 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <hal_i2c_read+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	00030228 	.word	0x00030228

000d7e80 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <hal_i2c_peek+0xc>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e88:	9301      	str	r3, [sp, #4]
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	00030228 	.word	0x00030228

000d7e90 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7e90:	b508      	push	{r3, lr}
   d7e92:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <hal_i2c_flush+0xc>)
   d7e94:	681b      	ldr	r3, [r3, #0]
   d7e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e98:	9301      	str	r3, [sp, #4]
   d7e9a:	bd08      	pop	{r3, pc}
   d7e9c:	00030228 	.word	0x00030228

000d7ea0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7ea0:	b508      	push	{r3, lr}
   d7ea2:	4b02      	ldr	r3, [pc, #8]	; (d7eac <hal_i2c_is_enabled+0xc>)
   d7ea4:	681b      	ldr	r3, [r3, #0]
   d7ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7ea8:	9301      	str	r3, [sp, #4]
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	00030228 	.word	0x00030228

000d7eb0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7eb0:	b508      	push	{r3, lr}
   d7eb2:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <hal_i2c_init+0xc>)
   d7eb4:	681b      	ldr	r3, [r3, #0]
   d7eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7eb8:	9301      	str	r3, [sp, #4]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	00030228 	.word	0x00030228

000d7ec0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7ec0:	b508      	push	{r3, lr}
   d7ec2:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <inet_inet_ntop+0xc>)
   d7ec4:	681b      	ldr	r3, [r3, #0]
   d7ec6:	695b      	ldr	r3, [r3, #20]
   d7ec8:	9301      	str	r3, [sp, #4]
   d7eca:	bd08      	pop	{r3, pc}
   d7ecc:	00030264 	.word	0x00030264

000d7ed0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7ed0:	b508      	push	{r3, lr}
   d7ed2:	4b02      	ldr	r3, [pc, #8]	; (d7edc <netdb_freeaddrinfo+0xc>)
   d7ed4:	681b      	ldr	r3, [r3, #0]
   d7ed6:	689b      	ldr	r3, [r3, #8]
   d7ed8:	9301      	str	r3, [sp, #4]
   d7eda:	bd08      	pop	{r3, pc}
   d7edc:	00030268 	.word	0x00030268

000d7ee0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7ee0:	b508      	push	{r3, lr}
   d7ee2:	4b02      	ldr	r3, [pc, #8]	; (d7eec <netdb_getaddrinfo+0xc>)
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	68db      	ldr	r3, [r3, #12]
   d7ee8:	9301      	str	r3, [sp, #4]
   d7eea:	bd08      	pop	{r3, pc}
   d7eec:	00030268 	.word	0x00030268

000d7ef0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7ef0:	b508      	push	{r3, lr}
   d7ef2:	4b02      	ldr	r3, [pc, #8]	; (d7efc <hal_spi_begin+0xc>)
   d7ef4:	681b      	ldr	r3, [r3, #0]
   d7ef6:	681b      	ldr	r3, [r3, #0]
   d7ef8:	9301      	str	r3, [sp, #4]
   d7efa:	bd08      	pop	{r3, pc}
   d7efc:	00030230 	.word	0x00030230

000d7f00 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d7f00:	b508      	push	{r3, lr}
   d7f02:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <hal_spi_set_data_mode+0xc>)
   d7f04:	681b      	ldr	r3, [r3, #0]
   d7f06:	68db      	ldr	r3, [r3, #12]
   d7f08:	9301      	str	r3, [sp, #4]
   d7f0a:	bd08      	pop	{r3, pc}
   d7f0c:	00030230 	.word	0x00030230

000d7f10 <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7f10:	b508      	push	{r3, lr}
   d7f12:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <hal_spi_transfer+0xc>)
   d7f14:	681b      	ldr	r3, [r3, #0]
   d7f16:	695b      	ldr	r3, [r3, #20]
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	bd08      	pop	{r3, pc}
   d7f1c:	00030230 	.word	0x00030230

000d7f20 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <hal_spi_init+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	69db      	ldr	r3, [r3, #28]
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030230 	.word	0x00030230

000d7f30 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <hal_spi_is_enabled+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	6a1b      	ldr	r3, [r3, #32]
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	00030230 	.word	0x00030230

000d7f40 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <hal_spi_info+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	00030230 	.word	0x00030230

000d7f50 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <hal_spi_transfer_dma+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	00030230 	.word	0x00030230

000d7f60 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <hal_spi_transfer_dma_status+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	00030230 	.word	0x00030230

000d7f70 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <hal_spi_set_settings+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	00030230 	.word	0x00030230

000d7f80 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <hal_spi_acquire+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	00030230 	.word	0x00030230

000d7f90 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <hal_spi_release+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	00030230 	.word	0x00030230

000d7fa0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <hal_usart_init+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	681b      	ldr	r3, [r3, #0]
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	0003023c 	.word	0x0003023c

000d7fb0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <hal_usart_write+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	68db      	ldr	r3, [r3, #12]
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	0003023c 	.word	0x0003023c

000d7fc0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <hal_usart_available+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	691b      	ldr	r3, [r3, #16]
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	0003023c 	.word	0x0003023c

000d7fd0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <hal_usart_read+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	695b      	ldr	r3, [r3, #20]
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	0003023c 	.word	0x0003023c

000d7fe0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <hal_usart_peek+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	699b      	ldr	r3, [r3, #24]
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	0003023c 	.word	0x0003023c

000d7ff0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <hal_usart_flush+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	69db      	ldr	r3, [r3, #28]
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	0003023c 	.word	0x0003023c

000d8000 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <hal_usart_is_enabled+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	6a1b      	ldr	r3, [r3, #32]
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	0003023c 	.word	0x0003023c

000d8010 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <hal_usart_available_data_for_write+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	0003023c 	.word	0x0003023c

000d8020 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <hal_usart_begin_config+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	0003023c 	.word	0x0003023c

000d8030 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <HAL_USB_USART_Init+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	681b      	ldr	r3, [r3, #0]
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	0003024c 	.word	0x0003024c

000d8040 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b02      	ldr	r3, [pc, #8]	; (d804c <HAL_USB_USART_Begin+0xc>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	685b      	ldr	r3, [r3, #4]
   d8048:	9301      	str	r3, [sp, #4]
   d804a:	bd08      	pop	{r3, pc}
   d804c:	0003024c 	.word	0x0003024c

000d8050 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8050:	b508      	push	{r3, lr}
   d8052:	4b02      	ldr	r3, [pc, #8]	; (d805c <HAL_USB_USART_Available_Data+0xc>)
   d8054:	681b      	ldr	r3, [r3, #0]
   d8056:	691b      	ldr	r3, [r3, #16]
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	bd08      	pop	{r3, pc}
   d805c:	0003024c 	.word	0x0003024c

000d8060 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8060:	b508      	push	{r3, lr}
   d8062:	4b02      	ldr	r3, [pc, #8]	; (d806c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8064:	681b      	ldr	r3, [r3, #0]
   d8066:	695b      	ldr	r3, [r3, #20]
   d8068:	9301      	str	r3, [sp, #4]
   d806a:	bd08      	pop	{r3, pc}
   d806c:	0003024c 	.word	0x0003024c

000d8070 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8070:	b508      	push	{r3, lr}
   d8072:	4b02      	ldr	r3, [pc, #8]	; (d807c <HAL_USB_USART_Receive_Data+0xc>)
   d8074:	681b      	ldr	r3, [r3, #0]
   d8076:	699b      	ldr	r3, [r3, #24]
   d8078:	9301      	str	r3, [sp, #4]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	0003024c 	.word	0x0003024c

000d8080 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8080:	b508      	push	{r3, lr}
   d8082:	4b02      	ldr	r3, [pc, #8]	; (d808c <HAL_USB_USART_Send_Data+0xc>)
   d8084:	681b      	ldr	r3, [r3, #0]
   d8086:	69db      	ldr	r3, [r3, #28]
   d8088:	9301      	str	r3, [sp, #4]
   d808a:	bd08      	pop	{r3, pc}
   d808c:	0003024c 	.word	0x0003024c

000d8090 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8090:	b508      	push	{r3, lr}
   d8092:	4b02      	ldr	r3, [pc, #8]	; (d809c <HAL_USB_USART_Flush_Data+0xc>)
   d8094:	681b      	ldr	r3, [r3, #0]
   d8096:	6a1b      	ldr	r3, [r3, #32]
   d8098:	9301      	str	r3, [sp, #4]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	0003024c 	.word	0x0003024c

000d80a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d80a0:	b508      	push	{r3, lr}
   d80a2:	4b02      	ldr	r3, [pc, #8]	; (d80ac <panic_+0xc>)
   d80a4:	681b      	ldr	r3, [r3, #0]
   d80a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d80a8:	9301      	str	r3, [sp, #4]
   d80aa:	bd08      	pop	{r3, pc}
   d80ac:	00030260 	.word	0x00030260

000d80b0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d80b0:	b508      	push	{r3, lr}
   d80b2:	4b03      	ldr	r3, [pc, #12]	; (d80c0 <diag_get_source+0x10>)
   d80b4:	681b      	ldr	r3, [r3, #0]
   d80b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d80ba:	9301      	str	r3, [sp, #4]
   d80bc:	bd08      	pop	{r3, pc}
   d80be:	0000      	.short	0x0000
   d80c0:	00030260 	.word	0x00030260

000d80c4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d80c4:	b508      	push	{r3, lr}
   d80c6:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <system_mode+0xc>)
   d80c8:	681b      	ldr	r3, [r3, #0]
   d80ca:	681b      	ldr	r3, [r3, #0]
   d80cc:	9301      	str	r3, [sp, #4]
   d80ce:	bd08      	pop	{r3, pc}
   d80d0:	00030220 	.word	0x00030220

000d80d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d80d4:	b508      	push	{r3, lr}
   d80d6:	4b02      	ldr	r3, [pc, #8]	; (d80e0 <set_system_mode+0xc>)
   d80d8:	681b      	ldr	r3, [r3, #0]
   d80da:	685b      	ldr	r3, [r3, #4]
   d80dc:	9301      	str	r3, [sp, #4]
   d80de:	bd08      	pop	{r3, pc}
   d80e0:	00030220 	.word	0x00030220

000d80e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d80e4:	b508      	push	{r3, lr}
   d80e6:	4b02      	ldr	r3, [pc, #8]	; (d80f0 <system_delay_ms+0xc>)
   d80e8:	681b      	ldr	r3, [r3, #0]
   d80ea:	695b      	ldr	r3, [r3, #20]
   d80ec:	9301      	str	r3, [sp, #4]
   d80ee:	bd08      	pop	{r3, pc}
   d80f0:	00030220 	.word	0x00030220

000d80f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d80f4:	b508      	push	{r3, lr}
   d80f6:	4b02      	ldr	r3, [pc, #8]	; (d8100 <application_thread_current+0xc>)
   d80f8:	681b      	ldr	r3, [r3, #0]
   d80fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d80fc:	9301      	str	r3, [sp, #4]
   d80fe:	bd08      	pop	{r3, pc}
   d8100:	00030220 	.word	0x00030220

000d8104 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8104:	b508      	push	{r3, lr}
   d8106:	4b02      	ldr	r3, [pc, #8]	; (d8110 <application_thread_invoke+0xc>)
   d8108:	681b      	ldr	r3, [r3, #0]
   d810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d810c:	9301      	str	r3, [sp, #4]
   d810e:	bd08      	pop	{r3, pc}
   d8110:	00030220 	.word	0x00030220

000d8114 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8114:	b508      	push	{r3, lr}
   d8116:	4b02      	ldr	r3, [pc, #8]	; (d8120 <system_thread_get_state+0xc>)
   d8118:	681b      	ldr	r3, [r3, #0]
   d811a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d811c:	9301      	str	r3, [sp, #4]
   d811e:	bd08      	pop	{r3, pc}
   d8120:	00030220 	.word	0x00030220

000d8124 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8124:	b508      	push	{r3, lr}
   d8126:	4b03      	ldr	r3, [pc, #12]	; (d8134 <system_ctrl_set_app_request_handler+0x10>)
   d8128:	681b      	ldr	r3, [r3, #0]
   d812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d812e:	9301      	str	r3, [sp, #4]
   d8130:	bd08      	pop	{r3, pc}
   d8132:	0000      	.short	0x0000
   d8134:	00030220 	.word	0x00030220

000d8138 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8138:	b508      	push	{r3, lr}
   d813a:	4b03      	ldr	r3, [pc, #12]	; (d8148 <system_ctrl_set_result+0x10>)
   d813c:	681b      	ldr	r3, [r3, #0]
   d813e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8142:	9301      	str	r3, [sp, #4]
   d8144:	bd08      	pop	{r3, pc}
   d8146:	0000      	.short	0x0000
   d8148:	00030220 	.word	0x00030220

000d814c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d814c:	b508      	push	{r3, lr}
   d814e:	4b02      	ldr	r3, [pc, #8]	; (d8158 <spark_process+0xc>)
   d8150:	681b      	ldr	r3, [r3, #0]
   d8152:	689b      	ldr	r3, [r3, #8]
   d8154:	9301      	str	r3, [sp, #4]
   d8156:	bd08      	pop	{r3, pc}
   d8158:	00030244 	.word	0x00030244

000d815c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d815c:	b508      	push	{r3, lr}
   d815e:	4b02      	ldr	r3, [pc, #8]	; (d8168 <spark_cloud_flag_connected+0xc>)
   d8160:	681b      	ldr	r3, [r3, #0]
   d8162:	695b      	ldr	r3, [r3, #20]
   d8164:	9301      	str	r3, [sp, #4]
   d8166:	bd08      	pop	{r3, pc}
   d8168:	00030244 	.word	0x00030244

000d816c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d816c:	b508      	push	{r3, lr}
   d816e:	4b02      	ldr	r3, [pc, #8]	; (d8178 <spark_deviceID+0xc>)
   d8170:	681b      	ldr	r3, [r3, #0]
   d8172:	69db      	ldr	r3, [r3, #28]
   d8174:	9301      	str	r3, [sp, #4]
   d8176:	bd08      	pop	{r3, pc}
   d8178:	00030244 	.word	0x00030244

000d817c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d817c:	b508      	push	{r3, lr}
   d817e:	4b02      	ldr	r3, [pc, #8]	; (d8188 <spark_send_event+0xc>)
   d8180:	681b      	ldr	r3, [r3, #0]
   d8182:	6a1b      	ldr	r3, [r3, #32]
   d8184:	9301      	str	r3, [sp, #4]
   d8186:	bd08      	pop	{r3, pc}
   d8188:	00030244 	.word	0x00030244

000d818c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d818c:	b508      	push	{r3, lr}
   d818e:	4b02      	ldr	r3, [pc, #8]	; (d8198 <spark_sync_time_pending+0xc>)
   d8190:	681b      	ldr	r3, [r3, #0]
   d8192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	bd08      	pop	{r3, pc}
   d8198:	00030244 	.word	0x00030244

000d819c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	00030244 	.word	0x00030244

000d81ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <network_connect+0xc>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	685b      	ldr	r3, [r3, #4]
   d81b4:	9301      	str	r3, [sp, #4]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	00030240 	.word	0x00030240

000d81bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d81bc:	b508      	push	{r3, lr}
   d81be:	4b02      	ldr	r3, [pc, #8]	; (d81c8 <network_connecting+0xc>)
   d81c0:	681b      	ldr	r3, [r3, #0]
   d81c2:	689b      	ldr	r3, [r3, #8]
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	bd08      	pop	{r3, pc}
   d81c8:	00030240 	.word	0x00030240

000d81cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <network_disconnect+0xc>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	68db      	ldr	r3, [r3, #12]
   d81d4:	9301      	str	r3, [sp, #4]
   d81d6:	bd08      	pop	{r3, pc}
   d81d8:	00030240 	.word	0x00030240

000d81dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <network_ready+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	691b      	ldr	r3, [r3, #16]
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	00030240 	.word	0x00030240

000d81ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <network_on+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	695b      	ldr	r3, [r3, #20]
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	00030240 	.word	0x00030240

000d81fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <network_off+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	699b      	ldr	r3, [r3, #24]
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	00030240 	.word	0x00030240

000d820c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <network_listen+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	69db      	ldr	r3, [r3, #28]
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	00030240 	.word	0x00030240

000d821c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <network_listening+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6a1b      	ldr	r3, [r3, #32]
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030240 	.word	0x00030240

000d822c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <network_set_listen_timeout+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	00030240 	.word	0x00030240

000d823c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <network_get_listen_timeout+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030240 	.word	0x00030240

000d824c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <network_is_on+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030240 	.word	0x00030240

000d825c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <network_is_off+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030240 	.word	0x00030240

000d826c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <malloc+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	681b      	ldr	r3, [r3, #0]
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	0003021c 	.word	0x0003021c

000d827c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <free+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	685b      	ldr	r3, [r3, #4]
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	0003021c 	.word	0x0003021c

000d828c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <realloc+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	689b      	ldr	r3, [r3, #8]
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	0003021c 	.word	0x0003021c

000d829c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <siprintf+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	691b      	ldr	r3, [r3, #16]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	0003021c 	.word	0x0003021c

000d82ac <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <snprintf+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	69db      	ldr	r3, [r3, #28]
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	0003021c 	.word	0x0003021c

000d82bc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <vsnprintf+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	0003021c 	.word	0x0003021c

000d82cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <abort+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	0003021c 	.word	0x0003021c

000d82dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <_malloc_r+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	0003021c 	.word	0x0003021c

000d82ec <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <newlib_impure_ptr_callback+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	0003021c 	.word	0x0003021c

000d82fc <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <strftime+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	0003021c 	.word	0x0003021c

000d830c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <localtime_r+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	0003021c 	.word	0x0003021c

000d831c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d831c:	2100      	movs	r1, #0
   d831e:	f7ff bee1 	b.w	d80e4 <system_delay_ms>

000d8322 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8322:	b510      	push	{r4, lr}
      if (_M_empty())
   d8324:	6883      	ldr	r3, [r0, #8]
   d8326:	4604      	mov	r4, r0
   d8328:	b90b      	cbnz	r3, d832e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d832a:	f001 ff1b 	bl	da164 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d832e:	68c3      	ldr	r3, [r0, #12]
   d8330:	4798      	blx	r3
      if (_M_manager)
   d8332:	68a3      	ldr	r3, [r4, #8]
   d8334:	b11b      	cbz	r3, d833e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8336:	2203      	movs	r2, #3
   d8338:	4621      	mov	r1, r4
   d833a:	4620      	mov	r0, r4
   d833c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d833e:	4620      	mov	r0, r4
   d8340:	2110      	movs	r1, #16
}
   d8342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8346:	f001 bf09 	b.w	da15c <_ZdlPvj>

000d834a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d834a:	680b      	ldr	r3, [r1, #0]
   d834c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d834e:	b113      	cbz	r3, d8356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8350:	685a      	ldr	r2, [r3, #4]
   d8352:	3201      	adds	r2, #1
   d8354:	605a      	str	r2, [r3, #4]
      }
   d8356:	4770      	bx	lr

000d8358 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8358:	4802      	ldr	r0, [pc, #8]	; (d8364 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d835a:	2300      	movs	r3, #0
   d835c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d835e:	f7ff bce7 	b.w	d7d30 <os_mutex_recursive_create>
   d8362:	bf00      	nop
   d8364:	2003e54c 	.word	0x2003e54c

000d8368 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8368:	2200      	movs	r2, #0
   d836a:	6840      	ldr	r0, [r0, #4]
   d836c:	4611      	mov	r1, r2
   d836e:	f7ff bf35 	b.w	d81dc <network_ready>

000d8372 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8372:	2200      	movs	r2, #0
   d8374:	6840      	ldr	r0, [r0, #4]
   d8376:	4611      	mov	r1, r2
   d8378:	f7ff bf50 	b.w	d821c <network_listening>

000d837c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d837c:	2200      	movs	r2, #0
   d837e:	6840      	ldr	r0, [r0, #4]
   d8380:	4611      	mov	r1, r2
   d8382:	f7ff bf5b 	b.w	d823c <network_get_listen_timeout>

000d8386 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8386:	6840      	ldr	r0, [r0, #4]
   d8388:	2200      	movs	r2, #0
   d838a:	f7ff bf4f 	b.w	d822c <network_set_listen_timeout>

000d838e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d838e:	6840      	ldr	r0, [r0, #4]
   d8390:	2200      	movs	r2, #0
   d8392:	f081 0101 	eor.w	r1, r1, #1
   d8396:	f7ff bf39 	b.w	d820c <network_listen>

000d839a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d839a:	2300      	movs	r3, #0
   d839c:	6840      	ldr	r0, [r0, #4]
   d839e:	461a      	mov	r2, r3
   d83a0:	4619      	mov	r1, r3
   d83a2:	f7ff bf2b 	b.w	d81fc <network_off>

000d83a6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d83a6:	2300      	movs	r3, #0
   d83a8:	6840      	ldr	r0, [r0, #4]
   d83aa:	461a      	mov	r2, r3
   d83ac:	4619      	mov	r1, r3
   d83ae:	f7ff bf1d 	b.w	d81ec <network_on>

000d83b2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d83b2:	2200      	movs	r2, #0
   d83b4:	6840      	ldr	r0, [r0, #4]
   d83b6:	4611      	mov	r1, r2
   d83b8:	f7ff bf00 	b.w	d81bc <network_connecting>

000d83bc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83bc:	6840      	ldr	r0, [r0, #4]
   d83be:	2200      	movs	r2, #0
   d83c0:	2102      	movs	r1, #2
   d83c2:	f7ff bf03 	b.w	d81cc <network_disconnect>

000d83c6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d83c6:	2300      	movs	r3, #0
   d83c8:	6840      	ldr	r0, [r0, #4]
   d83ca:	461a      	mov	r2, r3
   d83cc:	f7ff beee 	b.w	d81ac <network_connect>

000d83d0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d83d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d83d2:	4b1b      	ldr	r3, [pc, #108]	; (d8440 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d83d4:	6003      	str	r3, [r0, #0]
   d83d6:	2500      	movs	r5, #0
   d83d8:	460f      	mov	r7, r1
   d83da:	3330      	adds	r3, #48	; 0x30
   d83dc:	2618      	movs	r6, #24
   d83de:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d83e2:	b089      	sub	sp, #36	; 0x24
   d83e4:	6043      	str	r3, [r0, #4]
   d83e6:	4632      	mov	r2, r6
   d83e8:	4629      	mov	r1, r5
   d83ea:	4604      	mov	r4, r0
   d83ec:	3010      	adds	r0, #16
   d83ee:	f002 fdaa 	bl	daf46 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d83f2:	6878      	ldr	r0, [r7, #4]
   d83f4:	462a      	mov	r2, r5
   d83f6:	4629      	mov	r1, r5
   d83f8:	f7ff fef0 	bl	d81dc <network_ready>
   d83fc:	b918      	cbnz	r0, d8406 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d83fe:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d8400:	4620      	mov	r0, r4
   d8402:	b009      	add	sp, #36	; 0x24
   d8404:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d8406:	4629      	mov	r1, r5
   d8408:	4632      	mov	r2, r6
   d840a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d840c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d8410:	f002 fd99 	bl	daf46 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8414:	a902      	add	r1, sp, #8
   d8416:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8418:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d841c:	f7ff fc40 	bl	d7ca0 <cellular_signal>
   d8420:	b110      	cbz	r0, d8428 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d8422:	2301      	movs	r3, #1
   d8424:	60a3      	str	r3, [r4, #8]
            return sig;
   d8426:	e7eb      	b.n	d8400 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8428:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d842a:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d842c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d842e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8430:	b90b      	cbnz	r3, d8436 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d8432:	2302      	movs	r3, #2
   d8434:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d8436:	a902      	add	r1, sp, #8
   d8438:	4620      	mov	r0, r4
   d843a:	f000 f8c0 	bl	d85be <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d843e:	e7df      	b.n	d8400 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d8440:	000ddda8 	.word	0x000ddda8

000d8444 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8444:	4b08      	ldr	r3, [pc, #32]	; (d8468 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8446:	b510      	push	{r4, lr}
   d8448:	2428      	movs	r4, #40	; 0x28
   d844a:	4622      	mov	r2, r4
   d844c:	4618      	mov	r0, r3
   d844e:	2100      	movs	r1, #0
   d8450:	f002 fd79 	bl	daf46 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8454:	4b05      	ldr	r3, [pc, #20]	; (d846c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8456:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d845c:	6042      	str	r2, [r0, #4]
   d845e:	2204      	movs	r2, #4
   d8460:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8462:	4a03      	ldr	r2, [pc, #12]	; (d8470 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8464:	601a      	str	r2, [r3, #0]
   d8466:	bd10      	pop	{r4, pc}
   d8468:	2003e558 	.word	0x2003e558
   d846c:	2003e550 	.word	0x2003e550
   d8470:	000ddd6c 	.word	0x000ddd6c

000d8474 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8474:	4770      	bx	lr

000d8476 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8476:	7d00      	ldrb	r0, [r0, #20]
   d8478:	4770      	bx	lr

000d847a <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d847a:	7d03      	ldrb	r3, [r0, #20]
   d847c:	b14b      	cbz	r3, d8492 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d847e:	6983      	ldr	r3, [r0, #24]
   d8480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8484:	d005      	beq.n	d8492 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d8486:	6a00      	ldr	r0, [r0, #32]
   d8488:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d848c:	bf18      	it	ne
   d848e:	2001      	movne	r0, #1
   d8490:	4770      	bx	lr
   d8492:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d8494:	4770      	bx	lr

000d8496 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d8496:	6803      	ldr	r3, [r0, #0]
   d8498:	6a1b      	ldr	r3, [r3, #32]
   d849a:	4718      	bx	r3

000d849c <_ZN14CellularSignalD0Ev>:
   d849c:	b510      	push	{r4, lr}
   d849e:	2128      	movs	r1, #40	; 0x28
   d84a0:	4604      	mov	r4, r0
   d84a2:	f001 fe5b 	bl	da15c <_ZdlPvj>
   d84a6:	4620      	mov	r0, r4
   d84a8:	bd10      	pop	{r4, pc}
	...

000d84ac <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d84ac:	7d03      	ldrb	r3, [r0, #20]
   d84ae:	b17b      	cbz	r3, d84d0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d84b0:	69c3      	ldr	r3, [r0, #28]
   d84b2:	2b00      	cmp	r3, #0
   d84b4:	db0c      	blt.n	d84d0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d84b6:	ee07 3a90 	vmov	s15, r3
   d84ba:	ed9f 7a07 	vldr	s14, [pc, #28]	; d84d8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d84be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d84c2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d84c6:	eddf 7a05 	vldr	s15, [pc, #20]	; d84dc <_ZNK14CellularSignal11getStrengthEv+0x30>
   d84ca:	ee20 0a27 	vmul.f32	s0, s0, s15
   d84ce:	4770      	bx	lr
    return -1.0f;
   d84d0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d84d4:	4770      	bx	lr
   d84d6:	bf00      	nop
   d84d8:	477fff00 	.word	0x477fff00
   d84dc:	42c80000 	.word	0x42c80000

000d84e0 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d84e0:	7d03      	ldrb	r3, [r0, #20]
   d84e2:	b163      	cbz	r3, d84fe <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d84e4:	6983      	ldr	r3, [r0, #24]
   d84e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d84ea:	d008      	beq.n	d84fe <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d84ec:	ee07 3a90 	vmov	s15, r3
   d84f0:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8504 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d84f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d84f8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d84fc:	4770      	bx	lr
    return 0.0f;
   d84fe:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8508 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d8502:	4770      	bx	lr
   d8504:	42c80000 	.word	0x42c80000
   d8508:	00000000 	.word	0x00000000

000d850c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d850c:	7d03      	ldrb	r3, [r0, #20]
   d850e:	b17b      	cbz	r3, d8530 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8510:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d8512:	2b00      	cmp	r3, #0
   d8514:	db0c      	blt.n	d8530 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8516:	ee07 3a90 	vmov	s15, r3
   d851a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8538 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d851e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8522:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8526:	eddf 7a05 	vldr	s15, [pc, #20]	; d853c <_ZNK14CellularSignal10getQualityEv+0x30>
   d852a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d852e:	4770      	bx	lr
    return -1.0f;
   d8530:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8534:	4770      	bx	lr
   d8536:	bf00      	nop
   d8538:	477fff00 	.word	0x477fff00
   d853c:	42c80000 	.word	0x42c80000

000d8540 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8540:	7d03      	ldrb	r3, [r0, #20]
   d8542:	b163      	cbz	r3, d855e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d8544:	6a03      	ldr	r3, [r0, #32]
   d8546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d854a:	d008      	beq.n	d855e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d854c:	ee07 3a90 	vmov	s15, r3
   d8550:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8564 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8558:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d855c:	4770      	bx	lr
    return 0.0f;
   d855e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8568 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8562:	4770      	bx	lr
   d8564:	42c80000 	.word	0x42c80000
   d8568:	00000000 	.word	0x00000000

000d856c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d856c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d856e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8570:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d8572:	da0a      	bge.n	d858a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8574:	212d      	movs	r1, #45	; 0x2d
   d8576:	f000 fce1 	bl	d8f3c <_ZN5Print5printEc>
            val = -n;
   d857a:	4261      	negs	r1, r4
            t = print('-');
   d857c:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d857e:	220a      	movs	r2, #10
   d8580:	4630      	mov	r0, r6
   d8582:	f000 fcf4 	bl	d8f6e <_ZN5Print11printNumberEmh>
    }
}
   d8586:	4428      	add	r0, r5
   d8588:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d858a:	4621      	mov	r1, r4
        size_t t = 0;
   d858c:	2500      	movs	r5, #0
   d858e:	e7f6      	b.n	d857e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8590 <_ZNK14CellularSignal7printToER5Print>:
{
   d8590:	b570      	push	{r4, r5, r6, lr}
   d8592:	460c      	mov	r4, r1
   d8594:	4605      	mov	r5, r0
   d8596:	6881      	ldr	r1, [r0, #8]
   d8598:	4620      	mov	r0, r4
   d859a:	f7ff ffe7 	bl	d856c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d859e:	212c      	movs	r1, #44	; 0x2c
   d85a0:	4606      	mov	r6, r0
   d85a2:	4620      	mov	r0, r4
   d85a4:	f000 fcca 	bl	d8f3c <_ZN5Print5printEc>
   d85a8:	68e9      	ldr	r1, [r5, #12]
   d85aa:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d85ac:	4620      	mov	r0, r4
   d85ae:	f7ff ffdd 	bl	d856c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d85b2:	4430      	add	r0, r6
   d85b4:	bd70      	pop	{r4, r5, r6, pc}

000d85b6 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d85b6:	f1a0 0004 	sub.w	r0, r0, #4
   d85ba:	f7ff bfe9 	b.w	d8590 <_ZNK14CellularSignal7printToER5Print>

000d85be <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d85be:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d85c0:	460d      	mov	r5, r1
   d85c2:	f100 0410 	add.w	r4, r0, #16
   d85c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d85c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d85ca:	e895 0003 	ldmia.w	r5, {r0, r1}
   d85ce:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d85d2:	2001      	movs	r0, #1
   d85d4:	bd30      	pop	{r4, r5, pc}

000d85d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85d6:	4770      	bx	lr

000d85d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d85d8:	2000      	movs	r0, #0
   d85da:	4770      	bx	lr

000d85dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d85dc:	b510      	push	{r4, lr}
   d85de:	2110      	movs	r1, #16
   d85e0:	4604      	mov	r4, r0
   d85e2:	f001 fdbb 	bl	da15c <_ZdlPvj>
   d85e6:	4620      	mov	r0, r4
   d85e8:	bd10      	pop	{r4, pc}

000d85ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d85ea:	b508      	push	{r3, lr}
      { delete this; }
   d85ec:	f7ff fff6 	bl	d85dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d85f0:	bd08      	pop	{r3, pc}

000d85f2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d85f2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d85f4:	2200      	movs	r2, #0
   d85f6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d85fa:	6002      	str	r2, [r0, #0]
   d85fc:	8084      	strh	r4, [r0, #4]
   d85fe:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8600:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8602:	680c      	ldr	r4, [r1, #0]
   d8604:	8085      	strh	r5, [r0, #4]
   d8606:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8608:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d860a:	bd30      	pop	{r4, r5, pc}

000d860c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d860c:	b510      	push	{r4, lr}
   d860e:	4604      	mov	r4, r0
    free((void*)msg_);
   d8610:	6800      	ldr	r0, [r0, #0]
   d8612:	f7ff fe33 	bl	d827c <free>
}
   d8616:	4620      	mov	r0, r4
   d8618:	bd10      	pop	{r4, pc}

000d861a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d861a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d861c:	68c4      	ldr	r4, [r0, #12]
   d861e:	b1f4      	cbz	r4, d865e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8620:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8622:	2b02      	cmp	r3, #2
   d8624:	d103      	bne.n	d862e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8626:	f104 000c 	add.w	r0, r4, #12
   d862a:	f7ff ffef 	bl	d860c <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d862e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8630:	b135      	cbz	r5, d8640 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d8632:	4628      	mov	r0, r5
   d8634:	f7fb fe36 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
   d8638:	2110      	movs	r1, #16
   d863a:	4628      	mov	r0, r5
   d863c:	f001 fd8e 	bl	da15c <_ZdlPvj>
   d8640:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d8642:	b135      	cbz	r5, d8652 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d8644:	4628      	mov	r0, r5
   d8646:	f7fb fe2d 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
   d864a:	2110      	movs	r1, #16
   d864c:	4628      	mov	r0, r5
   d864e:	f001 fd85 	bl	da15c <_ZdlPvj>
   d8652:	4620      	mov	r0, r4
   d8654:	2114      	movs	r1, #20
   d8656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d865a:	f001 bd7f 	b.w	da15c <_ZdlPvj>
   d865e:	bd38      	pop	{r3, r4, r5, pc}

000d8660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8660:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8662:	460e      	mov	r6, r1
   d8664:	4604      	mov	r4, r0
   d8666:	f856 3b04 	ldr.w	r3, [r6], #4
   d866a:	9300      	str	r3, [sp, #0]
   d866c:	460d      	mov	r5, r1
   d866e:	a801      	add	r0, sp, #4
   d8670:	4631      	mov	r1, r6
   d8672:	f7ff fe6a 	bl	d834a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8676:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8678:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d867a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d867c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d867e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8680:	2300      	movs	r3, #0
   d8682:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8684:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8686:	f7fb fe97 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d868a:	4630      	mov	r0, r6
   d868c:	f7fb fe94 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8690:	4628      	mov	r0, r5
   d8692:	2108      	movs	r1, #8
   d8694:	f001 fd62 	bl	da15c <_ZdlPvj>
        return p;
    }
   d8698:	4620      	mov	r0, r4
   d869a:	b002      	add	sp, #8
   d869c:	bd70      	pop	{r4, r5, r6, pc}

000d869e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d869e:	b513      	push	{r0, r1, r4, lr}
   d86a0:	460b      	mov	r3, r1
   d86a2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d86a4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d86a8:	466c      	mov	r4, sp
   d86aa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d86ae:	e893 0003 	ldmia.w	r3, {r0, r1}
   d86b2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d86b6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d86ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d86be:	b002      	add	sp, #8
   d86c0:	bd10      	pop	{r4, pc}

000d86c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d86c2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d86c4:	b510      	push	{r4, lr}
      if (_M_empty())
   d86c6:	b90a      	cbnz	r2, d86cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d86c8:	f001 fd4c 	bl	da164 <_ZSt25__throw_bad_function_callv>
    }
   d86cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d86d0:	68c3      	ldr	r3, [r0, #12]
   d86d2:	4718      	bx	r3

000d86d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d86d4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d86d6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d86d8:	f100 0110 	add.w	r1, r0, #16
   d86dc:	f7ff fff1 	bl	d86c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d86e0:	bd08      	pop	{r3, pc}

000d86e2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d86e2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d86e4:	b510      	push	{r4, lr}
      if (_M_empty())
   d86e6:	b90a      	cbnz	r2, d86ec <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d86e8:	f001 fd3c 	bl	da164 <_ZSt25__throw_bad_function_callv>
    }
   d86ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d86f0:	68c3      	ldr	r3, [r0, #12]
   d86f2:	4718      	bx	r3

000d86f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d86f4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d86f6:	6800      	ldr	r0, [r0, #0]
   d86f8:	f100 0110 	add.w	r1, r0, #16
   d86fc:	f7ff fff1 	bl	d86e2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8700:	bd08      	pop	{r3, pc}
	...

000d8704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8704:	b538      	push	{r3, r4, r5, lr}
   d8706:	2300      	movs	r3, #0
   d8708:	4604      	mov	r4, r0
   d870a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d870c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d870e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8710:	f7fb fcc1 	bl	d4096 <_Znwj>
   d8714:	b128      	cbz	r0, d8722 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8716:	2301      	movs	r3, #1
   d8718:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d871c:	4b02      	ldr	r3, [pc, #8]	; (d8728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d871e:	6003      	str	r3, [r0, #0]
   d8720:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8722:	6020      	str	r0, [r4, #0]
	}
   d8724:	4620      	mov	r0, r4
   d8726:	bd38      	pop	{r3, r4, r5, pc}
   d8728:	000ddde4 	.word	0x000ddde4

000d872c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d872c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d872e:	2300      	movs	r3, #0
   d8730:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8732:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8734:	4604      	mov	r4, r0
   d8736:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8738:	b12b      	cbz	r3, d8746 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d873a:	2202      	movs	r2, #2
   d873c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d873e:	68eb      	ldr	r3, [r5, #12]
   d8740:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8742:	68ab      	ldr	r3, [r5, #8]
   d8744:	60a3      	str	r3, [r4, #8]
    }
   d8746:	4620      	mov	r0, r4
   d8748:	bd38      	pop	{r3, r4, r5, pc}
	...

000d874c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d874c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d874e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8750:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8752:	4668      	mov	r0, sp
   d8754:	f7ff ff4d 	bl	d85f2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8758:	f04f 0302 	mov.w	r3, #2
   d875c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8760:	2a00      	cmp	r2, #0
   d8762:	d103      	bne.n	d876c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8764:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8768:	2900      	cmp	r1, #0
   d876a:	d1f7      	bne.n	d875c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d876c:	d125      	bne.n	d87ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d876e:	f104 050c 	add.w	r5, r4, #12
   d8772:	4669      	mov	r1, sp
   d8774:	4628      	mov	r0, r5
   d8776:	f7ff ff3c 	bl	d85f2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d877a:	f3bf 8f5b 	dmb	ish
   d877e:	2301      	movs	r3, #1
   d8780:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8782:	2000      	movs	r0, #0
   d8784:	f104 0308 	add.w	r3, r4, #8
   d8788:	f3bf 8f5b 	dmb	ish
   d878c:	e853 6f00 	ldrex	r6, [r3]
   d8790:	e843 0200 	strex	r2, r0, [r3]
   d8794:	2a00      	cmp	r2, #0
   d8796:	d1f9      	bne.n	d878c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8798:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d879c:	b16e      	cbz	r6, d87ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d879e:	f7ff fca9 	bl	d80f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d87a2:	b178      	cbz	r0, d87c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d87a4:	4629      	mov	r1, r5
   d87a6:	4630      	mov	r0, r6
   d87a8:	f7ff ff8b 	bl	d86c2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d87ac:	4630      	mov	r0, r6
   d87ae:	f7fb fd79 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d87b2:	2110      	movs	r1, #16
   d87b4:	4630      	mov	r0, r6
   d87b6:	f001 fcd1 	bl	da15c <_ZdlPvj>
        p_->setError(std::move(error));
   d87ba:	4668      	mov	r0, sp
   d87bc:	f7ff ff26 	bl	d860c <_ZN8particle5ErrorD1Ev>
    }
   d87c0:	b009      	add	sp, #36	; 0x24
   d87c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d87c4:	4631      	mov	r1, r6
   d87c6:	a802      	add	r0, sp, #8
   d87c8:	f7ff ffb0 	bl	d872c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d87cc:	68e0      	ldr	r0, [r4, #12]
   d87ce:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d87d2:	b108      	cbz	r0, d87d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d87d4:	f002 fbf6 	bl	dafc4 <strdup>
        type_(type) {
   d87d8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d87da:	2010      	movs	r0, #16
   d87dc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d87e0:	f7fb fc59 	bl	d4096 <_Znwj>
   d87e4:	4605      	mov	r5, r0
   d87e6:	b1e8      	cbz	r0, d8824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d87e8:	2700      	movs	r7, #0
   d87ea:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d87ec:	2018      	movs	r0, #24
   d87ee:	f7fb fc52 	bl	d4096 <_Znwj>
   d87f2:	4604      	mov	r4, r0
   d87f4:	b188      	cbz	r0, d881a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d87f6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d87f8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d87fa:	a802      	add	r0, sp, #8
   d87fc:	f7ff ff4f 	bl	d869e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8800:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8802:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8804:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8806:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8808:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d880a:	a906      	add	r1, sp, #24
   d880c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d880e:	60e3      	str	r3, [r4, #12]
   d8810:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8814:	9205      	str	r2, [sp, #20]
   d8816:	f7ff feec 	bl	d85f2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d881a:	4b08      	ldr	r3, [pc, #32]	; (d883c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d881c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d881e:	4b08      	ldr	r3, [pc, #32]	; (d8840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8820:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8822:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8824:	a806      	add	r0, sp, #24
   d8826:	f7ff fef1 	bl	d860c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d882a:	a802      	add	r0, sp, #8
   d882c:	f7fb fd3a 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8830:	2200      	movs	r2, #0
   d8832:	4629      	mov	r1, r5
   d8834:	4803      	ldr	r0, [pc, #12]	; (d8844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8836:	f7ff fc65 	bl	d8104 <application_thread_invoke>
   d883a:	e7b7      	b.n	d87ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d883c:	000d86d5 	.word	0x000d86d5
   d8840:	000d896d 	.word	0x000d896d
   d8844:	000d8323 	.word	0x000d8323

000d8848 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d884c:	b08a      	sub	sp, #40	; 0x28
   d884e:	4605      	mov	r5, r0
   d8850:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8854:	460c      	mov	r4, r1
   d8856:	4617      	mov	r7, r2
   d8858:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d885a:	f7ff fc7f 	bl	d815c <spark_cloud_flag_connected>
   d885e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8860:	4682      	mov	sl, r0
   d8862:	bb38      	cbnz	r0, d88b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8864:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8868:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d886a:	a905      	add	r1, sp, #20
   d886c:	4630      	mov	r0, r6
   d886e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8872:	f7ff febe 	bl	d85f2 <_ZN8particle5ErrorC1EOS0_>
   d8876:	2014      	movs	r0, #20
   d8878:	f7fb fc0d 	bl	d4096 <_Znwj>
   d887c:	4604      	mov	r4, r0
   d887e:	b148      	cbz	r0, d8894 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8880:	2302      	movs	r3, #2
   d8882:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8884:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8886:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d888a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d888c:	4631      	mov	r1, r6
   d888e:	300c      	adds	r0, #12
   d8890:	f7ff feaf 	bl	d85f2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8894:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8896:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8898:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d889c:	f7ff ff32 	bl	d8704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d88a0:	4630      	mov	r0, r6
   d88a2:	f7ff feb3 	bl	d860c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d88a6:	a805      	add	r0, sp, #20
   d88a8:	f7ff feb0 	bl	d860c <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d88ac:	4628      	mov	r0, r5
   d88ae:	b00a      	add	sp, #40	; 0x28
   d88b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d88b4:	230c      	movs	r3, #12
   d88b6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d88ba:	2014      	movs	r0, #20
   d88bc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d88c0:	9307      	str	r3, [sp, #28]
   d88c2:	f7fb fbe8 	bl	d4096 <_Znwj>
   d88c6:	4601      	mov	r1, r0
   d88c8:	b128      	cbz	r0, d88d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d88ca:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d88ce:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d88d2:	f880 a001 	strb.w	sl, [r0, #1]
   d88d6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d88d8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d88da:	f7ff ff13 	bl	d8704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d88de:	4b22      	ldr	r3, [pc, #136]	; (d8968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d88e0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d88e2:	2008      	movs	r0, #8
   d88e4:	f7fb fbd7 	bl	d4096 <_Znwj>
   d88e8:	4682      	mov	sl, r0
   d88ea:	b128      	cbz	r0, d88f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d88ec:	9b03      	ldr	r3, [sp, #12]
   d88ee:	f840 3b04 	str.w	r3, [r0], #4
   d88f2:	a904      	add	r1, sp, #16
   d88f4:	f7ff fd29 	bl	d834a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d88f8:	9600      	str	r6, [sp, #0]
   d88fa:	fa5f f389 	uxtb.w	r3, r9
   d88fe:	4642      	mov	r2, r8
   d8900:	4639      	mov	r1, r7
   d8902:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8904:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8908:	f7ff fc38 	bl	d817c <spark_send_event>
   d890c:	b9b8      	cbnz	r0, d893e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d890e:	9b03      	ldr	r3, [sp, #12]
   d8910:	785b      	ldrb	r3, [r3, #1]
   d8912:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8916:	b993      	cbnz	r3, d893e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8918:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d891c:	a905      	add	r1, sp, #20
   d891e:	a803      	add	r0, sp, #12
   d8920:	9205      	str	r2, [sp, #20]
   d8922:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8926:	f7ff ff11 	bl	d874c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d892a:	a805      	add	r0, sp, #20
   d892c:	f7ff fe6e 	bl	d860c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8930:	a805      	add	r0, sp, #20
   d8932:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8934:	f7ff fe94 	bl	d8660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8938:	a806      	add	r0, sp, #24
   d893a:	f7fb fd3d 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d893e:	9b03      	ldr	r3, [sp, #12]
   d8940:	9305      	str	r3, [sp, #20]
   d8942:	a904      	add	r1, sp, #16
   d8944:	a806      	add	r0, sp, #24
   d8946:	f7ff fd00 	bl	d834a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d894a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d894c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d894e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8950:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8952:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8954:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8956:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8958:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d895a:	f7fb fd2d 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d895e:	a804      	add	r0, sp, #16
   d8960:	f7fb fd2a 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8964:	e7a2      	b.n	d88ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8966:	bf00      	nop
   d8968:	000d8a31 	.word	0x000d8a31

000d896c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d896c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d896e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8970:	4605      	mov	r5, r0
	  switch (__op)
   d8972:	d007      	beq.n	d8984 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8974:	2a03      	cmp	r2, #3
   d8976:	d018      	beq.n	d89aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8978:	2a01      	cmp	r2, #1
   d897a:	d101      	bne.n	d8980 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d897c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d897e:	6003      	str	r3, [r0, #0]
	}
   d8980:	2000      	movs	r0, #0
   d8982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8984:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8986:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8988:	f7fb fb85 	bl	d4096 <_Znwj>
   d898c:	4604      	mov	r4, r0
   d898e:	b150      	cbz	r0, d89a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8990:	4631      	mov	r1, r6
   d8992:	f7ff fecb 	bl	d872c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8996:	6930      	ldr	r0, [r6, #16]
   d8998:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d899c:	b108      	cbz	r0, d89a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d899e:	f002 fb11 	bl	dafc4 <strdup>
        type_(type) {
   d89a2:	6120      	str	r0, [r4, #16]
   d89a4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d89a6:	602c      	str	r4, [r5, #0]
	}
   d89a8:	e7ea      	b.n	d8980 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d89aa:	6804      	ldr	r4, [r0, #0]
   d89ac:	2c00      	cmp	r4, #0
   d89ae:	d0e7      	beq.n	d8980 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d89b0:	f104 0010 	add.w	r0, r4, #16
   d89b4:	f7ff fe2a 	bl	d860c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d89b8:	4620      	mov	r0, r4
   d89ba:	f7fb fc73 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d89be:	2118      	movs	r1, #24
   d89c0:	4620      	mov	r0, r4
   d89c2:	f001 fbcb 	bl	da15c <_ZdlPvj>
   d89c6:	e7db      	b.n	d8980 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d89c8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d89c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d89ca:	2300      	movs	r3, #0
   d89cc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d89ce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d89d0:	4604      	mov	r4, r0
   d89d2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d89d4:	b12b      	cbz	r3, d89e2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d89d6:	2202      	movs	r2, #2
   d89d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d89da:	68eb      	ldr	r3, [r5, #12]
   d89dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d89de:	68ab      	ldr	r3, [r5, #8]
   d89e0:	60a3      	str	r3, [r4, #8]
    }
   d89e2:	4620      	mov	r0, r4
   d89e4:	bd38      	pop	{r3, r4, r5, pc}

000d89e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d89e6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d89e8:	b570      	push	{r4, r5, r6, lr}
   d89ea:	4604      	mov	r4, r0
	  switch (__op)
   d89ec:	d007      	beq.n	d89fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d89ee:	2a03      	cmp	r2, #3
   d89f0:	d012      	beq.n	d8a18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d89f2:	2a01      	cmp	r2, #1
   d89f4:	d101      	bne.n	d89fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d89f6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d89f8:	6003      	str	r3, [r0, #0]
	}
   d89fa:	2000      	movs	r0, #0
   d89fc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d89fe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8a00:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a02:	f7fb fb48 	bl	d4096 <_Znwj>
   d8a06:	4605      	mov	r5, r0
   d8a08:	b120      	cbz	r0, d8a14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8a0a:	4631      	mov	r1, r6
   d8a0c:	f7ff ffdc 	bl	d89c8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8a10:	7c33      	ldrb	r3, [r6, #16]
   d8a12:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8a14:	6025      	str	r5, [r4, #0]
	}
   d8a16:	e7f0      	b.n	d89fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a18:	6804      	ldr	r4, [r0, #0]
   d8a1a:	2c00      	cmp	r4, #0
   d8a1c:	d0ed      	beq.n	d89fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8a1e:	4620      	mov	r0, r4
   d8a20:	f7fb fc40 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a24:	2114      	movs	r1, #20
   d8a26:	4620      	mov	r0, r4
   d8a28:	f001 fb98 	bl	da15c <_ZdlPvj>
   d8a2c:	e7e5      	b.n	d89fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8a30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8a32:	b089      	sub	sp, #36	; 0x24
   d8a34:	4604      	mov	r4, r0
   d8a36:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8a38:	a801      	add	r0, sp, #4
   d8a3a:	4611      	mov	r1, r2
   d8a3c:	f7ff fe10 	bl	d8660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8a40:	b1a4      	cbz	r4, d8a6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8a42:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a44:	b11d      	cbz	r5, d8a4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8a46:	4628      	mov	r0, r5
   d8a48:	f002 fabc 	bl	dafc4 <strdup>
   d8a4c:	4605      	mov	r5, r0
   d8a4e:	a801      	add	r0, sp, #4
   d8a50:	a903      	add	r1, sp, #12
        type_(type) {
   d8a52:	9503      	str	r5, [sp, #12]
   d8a54:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8a58:	f7ff fe78 	bl	d874c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8a5c:	a803      	add	r0, sp, #12
   d8a5e:	f7ff fdd5 	bl	d860c <_ZN8particle5ErrorD1Ev>
   d8a62:	a802      	add	r0, sp, #8
   d8a64:	f7fb fca8 	bl	d43b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8a68:	b009      	add	sp, #36	; 0x24
   d8a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8a6c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8a6e:	2301      	movs	r3, #1
   d8a70:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8a74:	2a00      	cmp	r2, #0
   d8a76:	d103      	bne.n	d8a80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8a78:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8a7c:	2900      	cmp	r1, #0
   d8a7e:	d1f7      	bne.n	d8a70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8a80:	d1ef      	bne.n	d8a62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8a82:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8a84:	f3bf 8f5b 	dmb	ish
   d8a88:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8a8a:	1d2b      	adds	r3, r5, #4
   d8a8c:	f3bf 8f5b 	dmb	ish
   d8a90:	e853 6f00 	ldrex	r6, [r3]
   d8a94:	e843 4200 	strex	r2, r4, [r3]
   d8a98:	2a00      	cmp	r2, #0
   d8a9a:	d1f9      	bne.n	d8a90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8a9c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8aa0:	2e00      	cmp	r6, #0
   d8aa2:	d0de      	beq.n	d8a62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8aa4:	4620      	mov	r0, r4
   d8aa6:	f7ff fb25 	bl	d80f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8aaa:	4607      	mov	r7, r0
   d8aac:	b160      	cbz	r0, d8ac8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8aae:	f105 010c 	add.w	r1, r5, #12
   d8ab2:	4630      	mov	r0, r6
   d8ab4:	f7ff fe15 	bl	d86e2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8ab8:	4630      	mov	r0, r6
   d8aba:	f7fb fbf3 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8abe:	2110      	movs	r1, #16
   d8ac0:	4630      	mov	r0, r6
   d8ac2:	f001 fb4b 	bl	da15c <_ZdlPvj>
   d8ac6:	e7cc      	b.n	d8a62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8ac8:	4631      	mov	r1, r6
   d8aca:	a803      	add	r0, sp, #12
   d8acc:	f7ff ff7c 	bl	d89c8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8ad0:	7b2b      	ldrb	r3, [r5, #12]
   d8ad2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8ad6:	2010      	movs	r0, #16
   d8ad8:	f7fb fadd 	bl	d4096 <_Znwj>
   d8adc:	4605      	mov	r5, r0
   d8ade:	b1d0      	cbz	r0, d8b16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8ae0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ae2:	2014      	movs	r0, #20
   d8ae4:	f7fb fad7 	bl	d4096 <_Znwj>
   d8ae8:	4604      	mov	r4, r0
   d8aea:	b178      	cbz	r0, d8b0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8aec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8aee:	4601      	mov	r1, r0
   d8af0:	a803      	add	r0, sp, #12
   d8af2:	f7ff fdd4 	bl	d869e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8af6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8af8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8afa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8afc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8afe:	9205      	str	r2, [sp, #20]
   d8b00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b02:	60e3      	str	r3, [r4, #12]
   d8b04:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8b08:	9206      	str	r2, [sp, #24]
   d8b0a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8b0c:	4b06      	ldr	r3, [pc, #24]	; (d8b28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8b0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8b10:	4b06      	ldr	r3, [pc, #24]	; (d8b2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b12:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8b14:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8b16:	a803      	add	r0, sp, #12
   d8b18:	f7fb fbc4 	bl	d42a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8b1c:	2200      	movs	r2, #0
   d8b1e:	4629      	mov	r1, r5
   d8b20:	4803      	ldr	r0, [pc, #12]	; (d8b30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8b22:	f7ff faef 	bl	d8104 <application_thread_invoke>
   d8b26:	e7c7      	b.n	d8ab8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8b28:	000d86f5 	.word	0x000d86f5
   d8b2c:	000d89e7 	.word	0x000d89e7
   d8b30:	000d8323 	.word	0x000d8323

000d8b34 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8b34:	2200      	movs	r2, #0
   d8b36:	6840      	ldr	r0, [r0, #4]
   d8b38:	4611      	mov	r1, r2
   d8b3a:	f7ff bb6f 	b.w	d821c <network_listening>

000d8b3e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8b3e:	2200      	movs	r2, #0
   d8b40:	6840      	ldr	r0, [r0, #4]
   d8b42:	4611      	mov	r1, r2
   d8b44:	f7ff bb7a 	b.w	d823c <network_get_listen_timeout>

000d8b48 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8b48:	6840      	ldr	r0, [r0, #4]
   d8b4a:	2200      	movs	r2, #0
   d8b4c:	f7ff bb6e 	b.w	d822c <network_set_listen_timeout>

000d8b50 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8b50:	6840      	ldr	r0, [r0, #4]
   d8b52:	2200      	movs	r2, #0
   d8b54:	f081 0101 	eor.w	r1, r1, #1
   d8b58:	f7ff bb58 	b.w	d820c <network_listen>

000d8b5c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8b5c:	2300      	movs	r3, #0
   d8b5e:	6840      	ldr	r0, [r0, #4]
   d8b60:	461a      	mov	r2, r3
   d8b62:	4619      	mov	r1, r3
   d8b64:	f7ff bb4a 	b.w	d81fc <network_off>

000d8b68 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8b68:	2300      	movs	r3, #0
   d8b6a:	6840      	ldr	r0, [r0, #4]
   d8b6c:	461a      	mov	r2, r3
   d8b6e:	4619      	mov	r1, r3
   d8b70:	f7ff bb3c 	b.w	d81ec <network_on>

000d8b74 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8b74:	2200      	movs	r2, #0
   d8b76:	6840      	ldr	r0, [r0, #4]
   d8b78:	4611      	mov	r1, r2
   d8b7a:	f7ff bb2f 	b.w	d81dc <network_ready>

000d8b7e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8b7e:	2200      	movs	r2, #0
   d8b80:	6840      	ldr	r0, [r0, #4]
   d8b82:	4611      	mov	r1, r2
   d8b84:	f7ff bb1a 	b.w	d81bc <network_connecting>

000d8b88 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8b88:	6840      	ldr	r0, [r0, #4]
   d8b8a:	2200      	movs	r2, #0
   d8b8c:	2102      	movs	r1, #2
   d8b8e:	f7ff bb1d 	b.w	d81cc <network_disconnect>

000d8b92 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8b92:	2300      	movs	r3, #0
   d8b94:	6840      	ldr	r0, [r0, #4]
   d8b96:	461a      	mov	r2, r3
   d8b98:	f7ff bb08 	b.w	d81ac <network_connect>

000d8b9c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8b9c:	4b02      	ldr	r3, [pc, #8]	; (d8ba8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8b9e:	2203      	movs	r2, #3
   d8ba0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8ba2:	4a02      	ldr	r2, [pc, #8]	; (d8bac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8ba4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8ba6:	4770      	bx	lr
   d8ba8:	2003e580 	.word	0x2003e580
   d8bac:	000dde00 	.word	0x000dde00

000d8bb0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8bb0:	4770      	bx	lr

000d8bb2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bb4:	4606      	mov	r6, r0
   d8bb6:	4615      	mov	r5, r2
   d8bb8:	460c      	mov	r4, r1
   d8bba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8bbc:	42bc      	cmp	r4, r7
   d8bbe:	d006      	beq.n	d8bce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8bc0:	6833      	ldr	r3, [r6, #0]
   d8bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8bc6:	689b      	ldr	r3, [r3, #8]
   d8bc8:	4630      	mov	r0, r6
   d8bca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8bcc:	e7f6      	b.n	d8bbc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8bce:	4628      	mov	r0, r5
   d8bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8bd2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8bd2:	7c00      	ldrb	r0, [r0, #16]
   d8bd4:	2200      	movs	r2, #0
   d8bd6:	f7ff b93b 	b.w	d7e50 <hal_i2c_write>

000d8bda <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8bda:	7c00      	ldrb	r0, [r0, #16]
   d8bdc:	2100      	movs	r1, #0
   d8bde:	f7ff b93f 	b.w	d7e60 <hal_i2c_available>

000d8be2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8be2:	7c00      	ldrb	r0, [r0, #16]
   d8be4:	2100      	movs	r1, #0
   d8be6:	f7ff b943 	b.w	d7e70 <hal_i2c_read>

000d8bea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8bea:	7c00      	ldrb	r0, [r0, #16]
   d8bec:	2100      	movs	r1, #0
   d8bee:	f7ff b947 	b.w	d7e80 <hal_i2c_peek>

000d8bf2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8bf2:	7c00      	ldrb	r0, [r0, #16]
   d8bf4:	2100      	movs	r1, #0
   d8bf6:	f7ff b94b 	b.w	d7e90 <hal_i2c_flush>

000d8bfa <_ZN7TwoWireD0Ev>:
   d8bfa:	b510      	push	{r4, lr}
   d8bfc:	2114      	movs	r1, #20
   d8bfe:	4604      	mov	r4, r0
   d8c00:	f001 faac 	bl	da15c <_ZdlPvj>
   d8c04:	4620      	mov	r0, r4
   d8c06:	bd10      	pop	{r4, pc}

000d8c08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8c08:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8c0e:	4604      	mov	r4, r0
   d8c10:	4608      	mov	r0, r1
   d8c12:	2100      	movs	r1, #0
   d8c14:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8c18:	4b03      	ldr	r3, [pc, #12]	; (d8c28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8c1a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8c1c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8c1e:	4611      	mov	r1, r2
   d8c20:	f7ff f946 	bl	d7eb0 <hal_i2c_init>
}
   d8c24:	4620      	mov	r0, r4
   d8c26:	bd10      	pop	{r4, pc}
   d8c28:	000dde3c 	.word	0x000dde3c

000d8c2c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d8c2c:	7c00      	ldrb	r0, [r0, #16]
   d8c2e:	2200      	movs	r2, #0
   d8c30:	f7ff b8ee 	b.w	d7e10 <hal_i2c_set_speed>

000d8c34 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8c34:	2300      	movs	r3, #0
   d8c36:	7c00      	ldrb	r0, [r0, #16]
   d8c38:	461a      	mov	r2, r3
   d8c3a:	4619      	mov	r1, r3
   d8c3c:	f7ff b8f0 	b.w	d7e20 <hal_i2c_begin>

000d8c40 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8c40:	7c00      	ldrb	r0, [r0, #16]
   d8c42:	2200      	movs	r2, #0
   d8c44:	f7ff b8f4 	b.w	d7e30 <hal_i2c_begin_transmission>

000d8c48 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8c48:	b2c9      	uxtb	r1, r1
   d8c4a:	f7ff bff9 	b.w	d8c40 <_ZN7TwoWire17beginTransmissionEh>

000d8c4e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8c4e:	7c00      	ldrb	r0, [r0, #16]
   d8c50:	2200      	movs	r2, #0
   d8c52:	f7ff b8f5 	b.w	d7e40 <hal_i2c_end_transmission>

000d8c56 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8c56:	2101      	movs	r1, #1
   d8c58:	f7ff bff9 	b.w	d8c4e <_ZN7TwoWire15endTransmissionEh>

000d8c5c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8c5c:	4700      	bx	r0
	...

000d8c60 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8c64:	2400      	movs	r4, #0
{
   d8c66:	461d      	mov	r5, r3
   d8c68:	460f      	mov	r7, r1
   d8c6a:	4690      	mov	r8, r2
   d8c6c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8c6e:	f7ff f8c7 	bl	d7e00 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8c72:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8c74:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8c78:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8c7c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8c80:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8c84:	bfa2      	ittt	ge
   d8c86:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8c8a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8c8e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8c90:	4907      	ldr	r1, [pc, #28]	; (d8cb0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8c92:	9400      	str	r4, [sp, #0]
   d8c94:	4643      	mov	r3, r8
   d8c96:	463a      	mov	r2, r7
   d8c98:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8c9a:	bfa8      	it	ge
   d8c9c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8ca0:	f7ff f8a6 	bl	d7df0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8ca4:	fab0 f080 	clz	r0, r0
   d8ca8:	0940      	lsrs	r0, r0, #5
   d8caa:	b004      	add	sp, #16
   d8cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8cb0:	000d8c5d 	.word	0x000d8c5d

000d8cb4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8cb4:	4770      	bx	lr

000d8cb6 <_ZN9IPAddressD0Ev>:
   d8cb6:	b510      	push	{r4, lr}
   d8cb8:	2118      	movs	r1, #24
   d8cba:	4604      	mov	r4, r0
   d8cbc:	f001 fa4e 	bl	da15c <_ZdlPvj>
   d8cc0:	4620      	mov	r0, r4
   d8cc2:	bd10      	pop	{r4, pc}

000d8cc4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8cc6:	7d03      	ldrb	r3, [r0, #20]
   d8cc8:	2b06      	cmp	r3, #6
{
   d8cca:	b08d      	sub	sp, #52	; 0x34
   d8ccc:	460e      	mov	r6, r1
   d8cce:	f100 0704 	add.w	r7, r0, #4
   d8cd2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8cd6:	d012      	beq.n	d8cfe <_ZNK9IPAddress7printToER5Print+0x3a>
   d8cd8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8cdc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8ce0:	220a      	movs	r2, #10
   d8ce2:	4630      	mov	r0, r6
   d8ce4:	f000 f943 	bl	d8f6e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8ce8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8cea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8cec:	d019      	beq.n	d8d22 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8cee:	2c00      	cmp	r4, #0
   d8cf0:	d0f4      	beq.n	d8cdc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8cf2:	212e      	movs	r1, #46	; 0x2e
   d8cf4:	4630      	mov	r0, r6
   d8cf6:	f000 f921 	bl	d8f3c <_ZN5Print5printEc>
   d8cfa:	4404      	add	r4, r0
   d8cfc:	e7ee      	b.n	d8cdc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8cfe:	232f      	movs	r3, #47	; 0x2f
   d8d00:	466a      	mov	r2, sp
   d8d02:	4639      	mov	r1, r7
   d8d04:	200a      	movs	r0, #10
		buf[0] = 0;
   d8d06:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8d0a:	f7ff f8d9 	bl	d7ec0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8d0e:	4668      	mov	r0, sp
   d8d10:	f002 f975 	bl	daffe <strlen>
   d8d14:	6833      	ldr	r3, [r6, #0]
   d8d16:	4602      	mov	r2, r0
   d8d18:	68db      	ldr	r3, [r3, #12]
   d8d1a:	4669      	mov	r1, sp
   d8d1c:	4630      	mov	r0, r6
   d8d1e:	4798      	blx	r3
   d8d20:	4604      	mov	r4, r0
    }
    return n;
}
   d8d22:	4620      	mov	r0, r4
   d8d24:	b00d      	add	sp, #52	; 0x34
   d8d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8d28 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8d28:	b510      	push	{r4, lr}
   d8d2a:	4b05      	ldr	r3, [pc, #20]	; (d8d40 <_ZN9IPAddressC1Ev+0x18>)
   d8d2c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8d2e:	2211      	movs	r2, #17
   d8d30:	f840 3b04 	str.w	r3, [r0], #4
   d8d34:	2100      	movs	r1, #0
   d8d36:	f002 f906 	bl	daf46 <memset>
}
   d8d3a:	4620      	mov	r0, r4
   d8d3c:	bd10      	pop	{r4, pc}
   d8d3e:	bf00      	nop
   d8d40:	000dde64 	.word	0x000dde64

000d8d44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8d44:	4603      	mov	r3, r0
   d8d46:	4a07      	ldr	r2, [pc, #28]	; (d8d64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8d48:	b510      	push	{r4, lr}
   d8d4a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8d4e:	f101 0210 	add.w	r2, r1, #16
   d8d52:	f851 4b04 	ldr.w	r4, [r1], #4
   d8d56:	f843 4b04 	str.w	r4, [r3], #4
   d8d5a:	4291      	cmp	r1, r2
   d8d5c:	d1f9      	bne.n	d8d52 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8d5e:	780a      	ldrb	r2, [r1, #0]
   d8d60:	701a      	strb	r2, [r3, #0]
}
   d8d62:	bd10      	pop	{r4, pc}
   d8d64:	000dde64 	.word	0x000dde64

000d8d68 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8d68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8d6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8d6e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8d72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8d76:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8d7a:	2304      	movs	r3, #4
   d8d7c:	6041      	str	r1, [r0, #4]
   d8d7e:	7503      	strb	r3, [r0, #20]
}
   d8d80:	bd10      	pop	{r4, pc}

000d8d82 <_ZN9IPAddressaSEPKh>:
{
   d8d82:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8d84:	78cb      	ldrb	r3, [r1, #3]
   d8d86:	9300      	str	r3, [sp, #0]
   d8d88:	788b      	ldrb	r3, [r1, #2]
   d8d8a:	784a      	ldrb	r2, [r1, #1]
   d8d8c:	7809      	ldrb	r1, [r1, #0]
   d8d8e:	f7ff ffeb 	bl	d8d68 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8d92:	b002      	add	sp, #8
   d8d94:	bd10      	pop	{r4, pc}
	...

000d8d98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8d98:	4b01      	ldr	r3, [pc, #4]	; (d8da0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8d9a:	4a02      	ldr	r2, [pc, #8]	; (d8da4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8d9c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8d9e:	4770      	bx	lr
   d8da0:	2003e588 	.word	0x2003e588
   d8da4:	000dde70 	.word	0x000dde70

000d8da8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8da8:	2300      	movs	r3, #0
   d8daa:	6840      	ldr	r0, [r0, #4]
   d8dac:	461a      	mov	r2, r3
   d8dae:	f7ff b9fd 	b.w	d81ac <network_connect>

000d8db2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8db2:	6840      	ldr	r0, [r0, #4]
   d8db4:	2200      	movs	r2, #0
   d8db6:	2102      	movs	r1, #2
   d8db8:	f7ff ba08 	b.w	d81cc <network_disconnect>

000d8dbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8dbc:	2200      	movs	r2, #0
   d8dbe:	6840      	ldr	r0, [r0, #4]
   d8dc0:	4611      	mov	r1, r2
   d8dc2:	f7ff b9fb 	b.w	d81bc <network_connecting>

000d8dc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8dc6:	2200      	movs	r2, #0
   d8dc8:	6840      	ldr	r0, [r0, #4]
   d8dca:	4611      	mov	r1, r2
   d8dcc:	f7ff ba06 	b.w	d81dc <network_ready>

000d8dd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8dd0:	2300      	movs	r3, #0
   d8dd2:	6840      	ldr	r0, [r0, #4]
   d8dd4:	461a      	mov	r2, r3
   d8dd6:	4619      	mov	r1, r3
   d8dd8:	f7ff ba08 	b.w	d81ec <network_on>

000d8ddc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8ddc:	2300      	movs	r3, #0
   d8dde:	6840      	ldr	r0, [r0, #4]
   d8de0:	461a      	mov	r2, r3
   d8de2:	4619      	mov	r1, r3
   d8de4:	f7ff ba0a 	b.w	d81fc <network_off>

000d8de8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8de8:	6840      	ldr	r0, [r0, #4]
   d8dea:	2100      	movs	r1, #0
   d8dec:	f7ff ba2e 	b.w	d824c <network_is_on>

000d8df0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8df0:	6840      	ldr	r0, [r0, #4]
   d8df2:	2100      	movs	r1, #0
   d8df4:	f7ff ba32 	b.w	d825c <network_is_off>

000d8df8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8df8:	6840      	ldr	r0, [r0, #4]
   d8dfa:	2200      	movs	r2, #0
   d8dfc:	f081 0101 	eor.w	r1, r1, #1
   d8e00:	f7ff ba04 	b.w	d820c <network_listen>

000d8e04 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8e04:	6840      	ldr	r0, [r0, #4]
   d8e06:	2200      	movs	r2, #0
   d8e08:	f7ff ba10 	b.w	d822c <network_set_listen_timeout>

000d8e0c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8e0c:	2200      	movs	r2, #0
   d8e0e:	6840      	ldr	r0, [r0, #4]
   d8e10:	4611      	mov	r1, r2
   d8e12:	f7ff ba13 	b.w	d823c <network_get_listen_timeout>

000d8e16 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8e16:	2200      	movs	r2, #0
   d8e18:	6840      	ldr	r0, [r0, #4]
   d8e1a:	4611      	mov	r1, r2
   d8e1c:	f7ff b9fe 	b.w	d821c <network_listening>

000d8e20 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8e24:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8e26:	b095      	sub	sp, #84	; 0x54
   d8e28:	4616      	mov	r6, r2
   d8e2a:	460d      	mov	r5, r1
   d8e2c:	4607      	mov	r7, r0
    IPAddress addr;
   d8e2e:	f7ff ff7b 	bl	d8d28 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8e32:	4621      	mov	r1, r4
   d8e34:	2218      	movs	r2, #24
   d8e36:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8e38:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8e3a:	f002 f884 	bl	daf46 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8e3e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8e40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8e44:	4621      	mov	r1, r4
   d8e46:	466b      	mov	r3, sp
   d8e48:	aa0c      	add	r2, sp, #48	; 0x30
   d8e4a:	4630      	mov	r0, r6
   d8e4c:	f7ff f848 	bl	d7ee0 <netdb_getaddrinfo>
    if (!r) {
   d8e50:	4604      	mov	r4, r0
   d8e52:	2800      	cmp	r0, #0
   d8e54:	d146      	bne.n	d8ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8e56:	4602      	mov	r2, r0
   d8e58:	2101      	movs	r1, #1
   d8e5a:	6868      	ldr	r0, [r5, #4]
   d8e5c:	f7ff f9be 	bl	d81dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8e60:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8e62:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8e64:	4622      	mov	r2, r4
   d8e66:	6868      	ldr	r0, [r5, #4]
   d8e68:	f7ff f9b8 	bl	d81dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e6c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8e6e:	4681      	mov	r9, r0
        bool ok = false;
   d8e70:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e72:	2e00      	cmp	r6, #0
   d8e74:	d036      	beq.n	d8ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8e76:	2900      	cmp	r1, #0
   d8e78:	d134      	bne.n	d8ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8e7a:	6873      	ldr	r3, [r6, #4]
   d8e7c:	2b02      	cmp	r3, #2
   d8e7e:	d003      	beq.n	d8e88 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8e80:	2b0a      	cmp	r3, #10
   d8e82:	d00b      	beq.n	d8e9c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8e84:	69f6      	ldr	r6, [r6, #28]
   d8e86:	e7f4      	b.n	d8e72 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8e88:	f1b8 0f00 	cmp.w	r8, #0
   d8e8c:	d004      	beq.n	d8e98 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8e8e:	6971      	ldr	r1, [r6, #20]
   d8e90:	4638      	mov	r0, r7
   d8e92:	3104      	adds	r1, #4
   d8e94:	f7ff ff75 	bl	d8d82 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8e98:	4641      	mov	r1, r8
   d8e9a:	e7f3      	b.n	d8e84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8e9c:	f1b9 0f00 	cmp.w	r9, #0
   d8ea0:	d101      	bne.n	d8ea6 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8ea2:	4649      	mov	r1, r9
   d8ea4:	e7ee      	b.n	d8e84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8ea6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8ea8:	2210      	movs	r2, #16
   d8eaa:	a801      	add	r0, sp, #4
   d8eac:	f002 f84b 	bl	daf46 <memset>
                    a.v = 6;
   d8eb0:	2306      	movs	r3, #6
   d8eb2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8eb6:	ad01      	add	r5, sp, #4
   d8eb8:	f104 0308 	add.w	r3, r4, #8
   d8ebc:	3418      	adds	r4, #24
   d8ebe:	6818      	ldr	r0, [r3, #0]
   d8ec0:	6859      	ldr	r1, [r3, #4]
   d8ec2:	462a      	mov	r2, r5
   d8ec4:	c203      	stmia	r2!, {r0, r1}
   d8ec6:	3308      	adds	r3, #8
   d8ec8:	42a3      	cmp	r3, r4
   d8eca:	4615      	mov	r5, r2
   d8ecc:	d1f7      	bne.n	d8ebe <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8ece:	a901      	add	r1, sp, #4
   d8ed0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8ed2:	ad07      	add	r5, sp, #28
   d8ed4:	f7ff ff36 	bl	d8d44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8eda:	1d3c      	adds	r4, r7, #4
   d8edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ede:	682b      	ldr	r3, [r5, #0]
   d8ee0:	7023      	strb	r3, [r4, #0]
   d8ee2:	e7de      	b.n	d8ea2 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8ee4:	9800      	ldr	r0, [sp, #0]
   d8ee6:	f7fe fff3 	bl	d7ed0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8eea:	4638      	mov	r0, r7
   d8eec:	b015      	add	sp, #84	; 0x54
   d8eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8ef4:	4b02      	ldr	r3, [pc, #8]	; (d8f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8ef6:	4a03      	ldr	r2, [pc, #12]	; (d8f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8ef8:	601a      	str	r2, [r3, #0]
   d8efa:	2200      	movs	r2, #0
   d8efc:	605a      	str	r2, [r3, #4]

} // spark
   d8efe:	4770      	bx	lr
   d8f00:	2003e58c 	.word	0x2003e58c
   d8f04:	000dde7c 	.word	0x000dde7c

000d8f08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f0a:	4606      	mov	r6, r0
   d8f0c:	460d      	mov	r5, r1
  size_t n = 0;
   d8f0e:	188f      	adds	r7, r1, r2
   d8f10:	2400      	movs	r4, #0
  while (size--) {
   d8f12:	42bd      	cmp	r5, r7
   d8f14:	d00c      	beq.n	d8f30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8f16:	6833      	ldr	r3, [r6, #0]
   d8f18:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8f1c:	689b      	ldr	r3, [r3, #8]
   d8f1e:	4630      	mov	r0, r6
   d8f20:	4798      	blx	r3
     if (chunk>=0)
   d8f22:	1e03      	subs	r3, r0, #0
   d8f24:	db01      	blt.n	d8f2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8f26:	441c      	add	r4, r3
  while (size--) {
   d8f28:	e7f3      	b.n	d8f12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8f2a:	2c00      	cmp	r4, #0
   d8f2c:	bf08      	it	eq
   d8f2e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8f30:	4620      	mov	r0, r4
   d8f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8f34 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8f34:	b508      	push	{r3, lr}
  return write(str);
   d8f36:	f7fe f9bd 	bl	d72b4 <_ZN5Print5writeEPKc>
}
   d8f3a:	bd08      	pop	{r3, pc}

000d8f3c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8f3c:	6803      	ldr	r3, [r0, #0]
   d8f3e:	689b      	ldr	r3, [r3, #8]
   d8f40:	4718      	bx	r3

000d8f42 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8f42:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8f44:	210d      	movs	r1, #13
{
   d8f46:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8f48:	f7ff fff8 	bl	d8f3c <_ZN5Print5printEc>
  n += print('\n');
   d8f4c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8f4e:	4604      	mov	r4, r0
  n += print('\n');
   d8f50:	4628      	mov	r0, r5
   d8f52:	f7ff fff3 	bl	d8f3c <_ZN5Print5printEc>
  return n;
}
   d8f56:	4420      	add	r0, r4
   d8f58:	bd38      	pop	{r3, r4, r5, pc}

000d8f5a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8f5a:	b538      	push	{r3, r4, r5, lr}
   d8f5c:	4605      	mov	r5, r0
  return write(str);
   d8f5e:	f7fe f9a9 	bl	d72b4 <_ZN5Print5writeEPKc>
   d8f62:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8f64:	4628      	mov	r0, r5
   d8f66:	f7ff ffec 	bl	d8f42 <_ZN5Print7printlnEv>
  return n;
}
   d8f6a:	4420      	add	r0, r4
   d8f6c:	bd38      	pop	{r3, r4, r5, pc}

000d8f6e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8f6e:	b530      	push	{r4, r5, lr}
   d8f70:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8f72:	2300      	movs	r3, #0
   d8f74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8f78:	2a01      	cmp	r2, #1
   d8f7a:	bf98      	it	ls
   d8f7c:	220a      	movls	r2, #10
   d8f7e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8f80:	460d      	mov	r5, r1
   d8f82:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8f86:	fb01 5312 	mls	r3, r1, r2, r5
   d8f8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8f8e:	2b09      	cmp	r3, #9
   d8f90:	bf94      	ite	ls
   d8f92:	3330      	addls	r3, #48	; 0x30
   d8f94:	3337      	addhi	r3, #55	; 0x37
   d8f96:	b2db      	uxtb	r3, r3
  } while(n);
   d8f98:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8f9a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8f9e:	d9ef      	bls.n	d8f80 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8fa0:	4621      	mov	r1, r4
   d8fa2:	f7fe f987 	bl	d72b4 <_ZN5Print5writeEPKc>
}
   d8fa6:	b00b      	add	sp, #44	; 0x2c
   d8fa8:	bd30      	pop	{r4, r5, pc}
	...

000d8fac <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fb0:	ec55 4b10 	vmov	r4, r5, d0
   d8fb4:	4606      	mov	r6, r0
   d8fb6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8fb8:	ee10 2a10 	vmov	r2, s0
   d8fbc:	ee10 0a10 	vmov	r0, s0
   d8fc0:	462b      	mov	r3, r5
   d8fc2:	4629      	mov	r1, r5
   d8fc4:	f001 fd28 	bl	daa18 <__aeabi_dcmpun>
   d8fc8:	b140      	cbz	r0, d8fdc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d8fca:	4953      	ldr	r1, [pc, #332]	; (d9118 <_ZN5Print10printFloatEdh+0x16c>)
   d8fcc:	4630      	mov	r0, r6
   d8fce:	f7fe f971 	bl	d72b4 <_ZN5Print5writeEPKc>
   d8fd2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8fd4:	4650      	mov	r0, sl
   d8fd6:	b003      	add	sp, #12
   d8fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8fdc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8fe0:	4b4e      	ldr	r3, [pc, #312]	; (d911c <_ZN5Print10printFloatEdh+0x170>)
   d8fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8fe6:	4620      	mov	r0, r4
   d8fe8:	4649      	mov	r1, r9
   d8fea:	f001 fd15 	bl	daa18 <__aeabi_dcmpun>
   d8fee:	b948      	cbnz	r0, d9004 <_ZN5Print10printFloatEdh+0x58>
   d8ff0:	4b4a      	ldr	r3, [pc, #296]	; (d911c <_ZN5Print10printFloatEdh+0x170>)
   d8ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8ff6:	4620      	mov	r0, r4
   d8ff8:	4649      	mov	r1, r9
   d8ffa:	f001 fcef 	bl	da9dc <__aeabi_dcmple>
   d8ffe:	b908      	cbnz	r0, d9004 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d9000:	4947      	ldr	r1, [pc, #284]	; (d9120 <_ZN5Print10printFloatEdh+0x174>)
   d9002:	e7e3      	b.n	d8fcc <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d9004:	4b47      	ldr	r3, [pc, #284]	; (d9124 <_ZN5Print10printFloatEdh+0x178>)
   d9006:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d900a:	4620      	mov	r0, r4
   d900c:	4629      	mov	r1, r5
   d900e:	f001 fcf9 	bl	daa04 <__aeabi_dcmpgt>
   d9012:	b108      	cbz	r0, d9018 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d9014:	4944      	ldr	r1, [pc, #272]	; (d9128 <_ZN5Print10printFloatEdh+0x17c>)
   d9016:	e7d9      	b.n	d8fcc <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d9018:	4b44      	ldr	r3, [pc, #272]	; (d912c <_ZN5Print10printFloatEdh+0x180>)
   d901a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d901e:	4620      	mov	r0, r4
   d9020:	4629      	mov	r1, r5
   d9022:	f001 fcd1 	bl	da9c8 <__aeabi_dcmplt>
   d9026:	2800      	cmp	r0, #0
   d9028:	d1f4      	bne.n	d9014 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d902a:	2200      	movs	r2, #0
   d902c:	2300      	movs	r3, #0
   d902e:	4620      	mov	r0, r4
   d9030:	4629      	mov	r1, r5
   d9032:	f001 fcc9 	bl	da9c8 <__aeabi_dcmplt>
   d9036:	b1d0      	cbz	r0, d906e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d9038:	212d      	movs	r1, #45	; 0x2d
   d903a:	4630      	mov	r0, r6
   d903c:	f7ff ff7e 	bl	d8f3c <_ZN5Print5printEc>
     number = -number;
   d9040:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d9044:	4682      	mov	sl, r0
     number = -number;
   d9046:	461d      	mov	r5, r3
  double rounding = 0.5;
   d9048:	4939      	ldr	r1, [pc, #228]	; (d9130 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d904a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d9138 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d904e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d9052:	2000      	movs	r0, #0
    rounding /= 10.0;
   d9054:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d9058:	fa5f f38b 	uxtb.w	r3, fp
   d905c:	429f      	cmp	r7, r3
   d905e:	d908      	bls.n	d9072 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d9060:	4642      	mov	r2, r8
   d9062:	464b      	mov	r3, r9
   d9064:	f001 fb68 	bl	da738 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d9068:	f10b 0b01 	add.w	fp, fp, #1
   d906c:	e7f4      	b.n	d9058 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d906e:	4682      	mov	sl, r0
   d9070:	e7ea      	b.n	d9048 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d9072:	4622      	mov	r2, r4
   d9074:	462b      	mov	r3, r5
   d9076:	f001 f87f 	bl	da178 <__adddf3>
   d907a:	460d      	mov	r5, r1
   d907c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d907e:	f001 fd09 	bl	daa94 <__aeabi_d2uiz>
   d9082:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d9084:	f001 f9b4 	bl	da3f0 <__aeabi_ui2d>
   d9088:	4602      	mov	r2, r0
   d908a:	460b      	mov	r3, r1
   d908c:	4620      	mov	r0, r4
   d908e:	4629      	mov	r1, r5
   d9090:	f001 f870 	bl	da174 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d9094:	220a      	movs	r2, #10
   d9096:	4604      	mov	r4, r0
   d9098:	460d      	mov	r5, r1
   d909a:	4630      	mov	r0, r6
   d909c:	4641      	mov	r1, r8
   d909e:	f7ff ff66 	bl	d8f6e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d90a2:	4482      	add	sl, r0
  if (digits > 0) {
   d90a4:	b127      	cbz	r7, d90b0 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d90a6:	4923      	ldr	r1, [pc, #140]	; (d9134 <_ZN5Print10printFloatEdh+0x188>)
   d90a8:	4630      	mov	r0, r6
   d90aa:	f7fe f903 	bl	d72b4 <_ZN5Print5writeEPKc>
    n += print(".");
   d90ae:	4482      	add	sl, r0
    remainder *= 10.0;
   d90b0:	f8df 9084 	ldr.w	r9, [pc, #132]	; d9138 <_ZN5Print10printFloatEdh+0x18c>
   d90b4:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d90b8:	3f01      	subs	r7, #1
   d90ba:	b2ff      	uxtb	r7, r7
   d90bc:	2fff      	cmp	r7, #255	; 0xff
   d90be:	d089      	beq.n	d8fd4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d90c0:	4642      	mov	r2, r8
   d90c2:	464b      	mov	r3, r9
   d90c4:	4620      	mov	r0, r4
   d90c6:	4629      	mov	r1, r5
   d90c8:	f001 fa0c 	bl	da4e4 <__aeabi_dmul>
   d90cc:	4604      	mov	r4, r0
   d90ce:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d90d0:	f001 fcb8 	bl	daa44 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d90d4:	f1b0 0b00 	subs.w	fp, r0, #0
   d90d8:	da1a      	bge.n	d9110 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d90da:	212d      	movs	r1, #45	; 0x2d
   d90dc:	4630      	mov	r0, r6
   d90de:	f7ff ff2d 	bl	d8f3c <_ZN5Print5printEc>
            val = -n;
   d90e2:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d90e6:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d90e8:	220a      	movs	r2, #10
   d90ea:	4630      	mov	r0, r6
   d90ec:	9301      	str	r3, [sp, #4]
   d90ee:	f7ff ff3e 	bl	d8f6e <_ZN5Print11printNumberEmh>
   d90f2:	9b01      	ldr	r3, [sp, #4]
   d90f4:	4418      	add	r0, r3
    n += print(toPrint);
   d90f6:	4482      	add	sl, r0
    remainder -= toPrint;
   d90f8:	4658      	mov	r0, fp
   d90fa:	f001 f989 	bl	da410 <__aeabi_i2d>
   d90fe:	4602      	mov	r2, r0
   d9100:	460b      	mov	r3, r1
   d9102:	4620      	mov	r0, r4
   d9104:	4629      	mov	r1, r5
   d9106:	f001 f835 	bl	da174 <__aeabi_dsub>
   d910a:	4604      	mov	r4, r0
   d910c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d910e:	e7d3      	b.n	d90b8 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d9110:	4659      	mov	r1, fp
        size_t t = 0;
   d9112:	2300      	movs	r3, #0
   d9114:	e7e8      	b.n	d90e8 <_ZN5Print10printFloatEdh+0x13c>
   d9116:	bf00      	nop
   d9118:	000ddeb0 	.word	0x000ddeb0
   d911c:	7fefffff 	.word	0x7fefffff
   d9120:	000ddeb4 	.word	0x000ddeb4
   d9124:	41efffff 	.word	0x41efffff
   d9128:	000ddeb8 	.word	0x000ddeb8
   d912c:	c1efffff 	.word	0xc1efffff
   d9130:	3fe00000 	.word	0x3fe00000
   d9134:	000dd0d4 	.word	0x000dd0d4
   d9138:	40240000 	.word	0x40240000

000d913c <_ZN5Print5printEfi>:
{
   d913c:	b538      	push	{r3, r4, r5, lr}
   d913e:	4604      	mov	r4, r0
   d9140:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d9144:	b2cd      	uxtb	r5, r1
   d9146:	f001 f975 	bl	da434 <__aeabi_f2d>
   d914a:	ec41 0b10 	vmov	d0, r0, r1
   d914e:	4629      	mov	r1, r5
   d9150:	4620      	mov	r0, r4
}
   d9152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d9156:	f7ff bf29 	b.w	d8fac <_ZN5Print10printFloatEdh>

000d915a <_ZN5Print7printlnEdi>:
{
   d915a:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d915c:	b2c9      	uxtb	r1, r1
{
   d915e:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d9160:	f7ff ff24 	bl	d8fac <_ZN5Print10printFloatEdh>
   d9164:	4604      	mov	r4, r0
  n += println();
   d9166:	4628      	mov	r0, r5
   d9168:	f7ff feeb 	bl	d8f42 <_ZN5Print7printlnEv>
}
   d916c:	4420      	add	r0, r4
   d916e:	bd38      	pop	{r3, r4, r5, pc}

000d9170 <_ZN5Print7printlnEfi>:
{
   d9170:	b538      	push	{r3, r4, r5, lr}
   d9172:	4604      	mov	r4, r0
   d9174:	ee10 0a10 	vmov	r0, s0
   d9178:	460d      	mov	r5, r1
    return println((double)num, digits);
   d917a:	f001 f95b 	bl	da434 <__aeabi_f2d>
   d917e:	ec41 0b10 	vmov	d0, r0, r1
   d9182:	4629      	mov	r1, r5
   d9184:	4620      	mov	r0, r4
}
   d9186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d918a:	f7ff bfe6 	b.w	d915a <_ZN5Print7printlnEdi>

000d918e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d918e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9192:	b086      	sub	sp, #24
   d9194:	af00      	add	r7, sp, #0
   d9196:	4605      	mov	r5, r0
   d9198:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d919a:	1d38      	adds	r0, r7, #4
   d919c:	2114      	movs	r1, #20
{
   d919e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d91a0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d91a2:	f7ff f88b 	bl	d82bc <vsnprintf>

    if (n<bufsize)
   d91a6:	2813      	cmp	r0, #19
   d91a8:	d80e      	bhi.n	d91c8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d91aa:	1d39      	adds	r1, r7, #4
   d91ac:	4628      	mov	r0, r5
   d91ae:	f7fe f881 	bl	d72b4 <_ZN5Print5writeEPKc>
   d91b2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d91b4:	b11e      	cbz	r6, d91be <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d91b6:	4628      	mov	r0, r5
   d91b8:	f7ff fec3 	bl	d8f42 <_ZN5Print7printlnEv>
   d91bc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d91be:	4620      	mov	r0, r4
   d91c0:	3718      	adds	r7, #24
   d91c2:	46bd      	mov	sp, r7
   d91c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d91c8:	f100 0308 	add.w	r3, r0, #8
   d91cc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d91d0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d91d2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d91d6:	4622      	mov	r2, r4
   d91d8:	1c41      	adds	r1, r0, #1
   d91da:	683b      	ldr	r3, [r7, #0]
   d91dc:	4668      	mov	r0, sp
   d91de:	f7ff f86d 	bl	d82bc <vsnprintf>
  return write(str);
   d91e2:	4669      	mov	r1, sp
   d91e4:	4628      	mov	r0, r5
   d91e6:	f7fe f865 	bl	d72b4 <_ZN5Print5writeEPKc>
   d91ea:	4604      	mov	r4, r0
   d91ec:	46c5      	mov	sp, r8
   d91ee:	e7e1      	b.n	d91b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d91f0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d91f0:	4b01      	ldr	r3, [pc, #4]	; (d91f8 <_GLOBAL__sub_I_RGB+0x8>)
   d91f2:	2200      	movs	r2, #0
   d91f4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d91f6:	4770      	bx	lr
   d91f8:	2003e594 	.word	0x2003e594

000d91fc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d91fc:	2100      	movs	r1, #0
   d91fe:	f7fe bebf 	b.w	d7f80 <hal_spi_acquire>

000d9202 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9202:	2100      	movs	r1, #0
   d9204:	f7fe bec4 	b.w	d7f90 <hal_spi_release>

000d9208 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9208:	b510      	push	{r4, lr}
   d920a:	4604      	mov	r4, r0
   d920c:	4608      	mov	r0, r1
{
    _spi = spi;
   d920e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9210:	f7fe fe86 	bl	d7f20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9214:	2300      	movs	r3, #0
   d9216:	6063      	str	r3, [r4, #4]
}
   d9218:	4620      	mov	r0, r4
   d921a:	bd10      	pop	{r4, pc}

000d921c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d921c:	b510      	push	{r4, lr}
   d921e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9220:	7800      	ldrb	r0, [r0, #0]
   d9222:	f7ff ffeb 	bl	d91fc <_ZN8SPIClass4lockEv.isra.0>
   d9226:	b948      	cbnz	r0, d923c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9228:	7820      	ldrb	r0, [r4, #0]
   d922a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d922e:	f7fe fe5f 	bl	d7ef0 <hal_spi_begin>
        unlock();
   d9232:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9238:	f7ff bfe3 	b.w	d9202 <_ZN8SPIClass6unlockEv.isra.0>
}
   d923c:	bd10      	pop	{r4, pc}

000d923e <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d923e:	b513      	push	{r0, r1, r4, lr}
   d9240:	4604      	mov	r4, r0
    if (!lock())
   d9242:	7800      	ldrb	r0, [r0, #0]
{
   d9244:	9101      	str	r1, [sp, #4]
    if (!lock())
   d9246:	f7ff ffd9 	bl	d91fc <_ZN8SPIClass4lockEv.isra.0>
   d924a:	9901      	ldr	r1, [sp, #4]
   d924c:	b940      	cbnz	r0, d9260 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d924e:	7820      	ldrb	r0, [r4, #0]
   d9250:	f7fe fe56 	bl	d7f00 <hal_spi_set_data_mode>
        unlock();
   d9254:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9256:	b002      	add	sp, #8
   d9258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d925c:	f7ff bfd1 	b.w	d9202 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9260:	b002      	add	sp, #8
   d9262:	bd10      	pop	{r4, pc}

000d9264 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9264:	7800      	ldrb	r0, [r0, #0]
   d9266:	f7ff bfcc 	b.w	d9202 <_ZN8SPIClass6unlockEv.isra.0>
	...

000d926c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d926c:	0840      	lsrs	r0, r0, #1
{
   d926e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9270:	6018      	str	r0, [r3, #0]
   d9272:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9274:	6818      	ldr	r0, [r3, #0]
   d9276:	4288      	cmp	r0, r1
   d9278:	b2e5      	uxtb	r5, r4
   d927a:	d906      	bls.n	d928a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d927c:	3401      	adds	r4, #1
   d927e:	2c08      	cmp	r4, #8
   d9280:	d002      	beq.n	d9288 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9282:	0840      	lsrs	r0, r0, #1
   d9284:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9286:	e7f5      	b.n	d9274 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9288:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d928a:	4b02      	ldr	r3, [pc, #8]	; (d9294 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d928c:	5d5b      	ldrb	r3, [r3, r5]
   d928e:	7013      	strb	r3, [r2, #0]
}
   d9290:	bd30      	pop	{r4, r5, pc}
   d9292:	bf00      	nop
   d9294:	000ddebc 	.word	0x000ddebc

000d9298 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d929c:	4606      	mov	r6, r0
   d929e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d92a0:	7800      	ldrb	r0, [r0, #0]
{
   d92a2:	460c      	mov	r4, r1
    CHECK(lock());
   d92a4:	f7ff ffaa 	bl	d91fc <_ZN8SPIClass4lockEv.isra.0>
   d92a8:	2800      	cmp	r0, #0
   d92aa:	db1b      	blt.n	d92e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d92ac:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d92ae:	2214      	movs	r2, #20
   d92b0:	2100      	movs	r1, #0
   d92b2:	a809      	add	r0, sp, #36	; 0x24
   d92b4:	f001 fe47 	bl	daf46 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d92b8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d92ba:	2200      	movs	r2, #0
   d92bc:	a909      	add	r1, sp, #36	; 0x24
   d92be:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d92c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d92c4:	f7fe fe3c 	bl	d7f40 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d92c8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d92cc:	b113      	cbz	r3, d92d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d92ce:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d92d2:	b155      	cbz	r5, d92ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d92d4:	2700      	movs	r7, #0
   d92d6:	46b9      	mov	r9, r7
   d92d8:	46b8      	mov	r8, r7
   d92da:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d92dc:	7923      	ldrb	r3, [r4, #4]
   d92de:	b15d      	cbz	r5, d92f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d92e0:	b1c3      	cbz	r3, d9314 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d92e2:	2000      	movs	r0, #0
}
   d92e4:	b00f      	add	sp, #60	; 0x3c
   d92e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d92ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d92ee:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d92f2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d92f6:	e7f1      	b.n	d92dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d92f8:	2b00      	cmp	r3, #0
   d92fa:	d135      	bne.n	d9368 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d92fc:	68a3      	ldr	r3, [r4, #8]
   d92fe:	4543      	cmp	r3, r8
   d9300:	d108      	bne.n	d9314 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9302:	f88d 9020 	strb.w	r9, [sp, #32]
   d9306:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d930a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d930e:	89a3      	ldrh	r3, [r4, #12]
   d9310:	429a      	cmp	r2, r3
   d9312:	d0e6      	beq.n	d92e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9314:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9316:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d9318:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d931c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d931e:	ab04      	add	r3, sp, #16
   d9320:	f10d 020f 	add.w	r2, sp, #15
   d9324:	f7ff ffa2 	bl	d926c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9328:	7921      	ldrb	r1, [r4, #4]
   d932a:	b985      	cbnz	r5, d934e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d932c:	b989      	cbnz	r1, d9352 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d932e:	68a3      	ldr	r3, [r4, #8]
   d9330:	4543      	cmp	r3, r8
   d9332:	d30e      	bcc.n	d9352 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9334:	f88d 9020 	strb.w	r9, [sp, #32]
   d9338:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d933c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9340:	89a3      	ldrh	r3, [r4, #12]
   d9342:	429a      	cmp	r2, r3
   d9344:	d105      	bne.n	d9352 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9346:	9b04      	ldr	r3, [sp, #16]
   d9348:	4543      	cmp	r3, r8
   d934a:	d102      	bne.n	d9352 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d934c:	e7c9      	b.n	d92e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d934e:	2900      	cmp	r1, #0
   d9350:	d1f9      	bne.n	d9346 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9352:	2300      	movs	r3, #0
   d9354:	9301      	str	r3, [sp, #4]
   d9356:	7b63      	ldrb	r3, [r4, #13]
   d9358:	9300      	str	r3, [sp, #0]
   d935a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d935e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9360:	7830      	ldrb	r0, [r6, #0]
   d9362:	f7fe fe05 	bl	d7f70 <hal_spi_set_settings>
   d9366:	e7bc      	b.n	d92e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9368:	e9cd 5500 	strd	r5, r5, [sp]
   d936c:	462b      	mov	r3, r5
   d936e:	462a      	mov	r2, r5
   d9370:	2101      	movs	r1, #1
   d9372:	e7f5      	b.n	d9360 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9374 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9374:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9376:	7800      	ldrb	r0, [r0, #0]
   d9378:	f7fe fdca 	bl	d7f10 <hal_spi_transfer>
}
   d937c:	b2c0      	uxtb	r0, r0
   d937e:	bd08      	pop	{r3, pc}

000d9380 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9380:	b530      	push	{r4, r5, lr}
   d9382:	b087      	sub	sp, #28
   d9384:	4604      	mov	r4, r0
   d9386:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9388:	9500      	str	r5, [sp, #0]
   d938a:	7800      	ldrb	r0, [r0, #0]
   d938c:	f7fe fde0 	bl	d7f50 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d9390:	b93d      	cbnz	r5, d93a2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d9392:	7820      	ldrb	r0, [r4, #0]
   d9394:	a902      	add	r1, sp, #8
   d9396:	f7fe fde3 	bl	d7f60 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d939a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d939e:	07db      	lsls	r3, r3, #31
   d93a0:	d4f7      	bmi.n	d9392 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d93a2:	b007      	add	sp, #28
   d93a4:	bd30      	pop	{r4, r5, pc}
	...

000d93a8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d93a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93ac:	ec57 6b10 	vmov	r6, r7, d0
   d93b0:	4680      	mov	r8, r0
   d93b2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d93b4:	ee10 0a10 	vmov	r0, s0
   d93b8:	2200      	movs	r2, #0
   d93ba:	2300      	movs	r3, #0
   d93bc:	4639      	mov	r1, r7
   d93be:	f001 fb03 	bl	da9c8 <__aeabi_dcmplt>
   d93c2:	b128      	cbz	r0, d93d0 <_Z4dtoadhPc+0x28>
        val = -val;
   d93c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d93c8:	461f      	mov	r7, r3
        *sout++ = '-';
   d93ca:	232d      	movs	r3, #45	; 0x2d
   d93cc:	f804 3b01 	strb.w	r3, [r4], #1
   d93d0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d93d2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d93d6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d93d8:	b2d9      	uxtb	r1, r3
   d93da:	4588      	cmp	r8, r1
   d93dc:	d903      	bls.n	d93e6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d93de:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d93e2:	3301      	adds	r3, #1
   d93e4:	e7f8      	b.n	d93d8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d93e6:	4648      	mov	r0, r9
   d93e8:	f001 f812 	bl	da410 <__aeabi_i2d>
   d93ec:	4632      	mov	r2, r6
   d93ee:	463b      	mov	r3, r7
   d93f0:	f001 f878 	bl	da4e4 <__aeabi_dmul>
   d93f4:	4606      	mov	r6, r0
   d93f6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d93f8:	f001 fbd4 	bl	daba4 <__aeabi_d2ulz>
   d93fc:	4605      	mov	r5, r0
   d93fe:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d9400:	f001 f83a 	bl	da478 <__aeabi_ul2d>
   d9404:	4602      	mov	r2, r0
   d9406:	460b      	mov	r3, r1
   d9408:	4630      	mov	r0, r6
   d940a:	4639      	mov	r1, r7
   d940c:	f000 feb2 	bl	da174 <__aeabi_dsub>
   d9410:	4b13      	ldr	r3, [pc, #76]	; (d9460 <_Z4dtoadhPc+0xb8>)
   d9412:	2200      	movs	r2, #0
   d9414:	f001 faec 	bl	da9f0 <__aeabi_dcmpge>
   d9418:	b110      	cbz	r0, d9420 <_Z4dtoadhPc+0x78>
        fixed++;
   d941a:	3501      	adds	r5, #1
   d941c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9420:	464a      	mov	r2, r9
   d9422:	4628      	mov	r0, r5
   d9424:	17d3      	asrs	r3, r2, #31
   d9426:	4651      	mov	r1, sl
   d9428:	f001 fba4 	bl	dab74 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d942c:	2301      	movs	r3, #1
   d942e:	4615      	mov	r5, r2
   d9430:	4621      	mov	r1, r4
   d9432:	220a      	movs	r2, #10
   d9434:	f000 fcf7 	bl	d9e26 <ultoa>
    if (prec) {
   d9438:	f1b8 0f00 	cmp.w	r8, #0
   d943c:	d00d      	beq.n	d945a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d943e:	4620      	mov	r0, r4
   d9440:	f001 fddd 	bl	daffe <strlen>
        *sout++ = '.';
   d9444:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d9446:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d9448:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d944a:	220a      	movs	r2, #10
   d944c:	4643      	mov	r3, r8
   d944e:	4628      	mov	r0, r5
   d9450:	3101      	adds	r1, #1
    }
}
   d9452:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d9456:	f000 bce6 	b.w	d9e26 <ultoa>
}
   d945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d945e:	bf00      	nop
   d9460:	3fe00000 	.word	0x3fe00000

000d9464 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9464:	b510      	push	{r4, lr}
   d9466:	4604      	mov	r4, r0
{
	free(buffer);
   d9468:	6800      	ldr	r0, [r0, #0]
   d946a:	f7fe ff07 	bl	d827c <free>
}
   d946e:	4620      	mov	r0, r4
   d9470:	bd10      	pop	{r4, pc}

000d9472 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9472:	b510      	push	{r4, lr}
   d9474:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9476:	6800      	ldr	r0, [r0, #0]
   d9478:	b108      	cbz	r0, d947e <_ZN6String10invalidateEv+0xc>
   d947a:	f7fe feff 	bl	d827c <free>
	buffer = NULL;
   d947e:	2300      	movs	r3, #0
	capacity = len = 0;
   d9480:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9484:	6023      	str	r3, [r4, #0]
}
   d9486:	bd10      	pop	{r4, pc}

000d9488 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9488:	b538      	push	{r3, r4, r5, lr}
   d948a:	4604      	mov	r4, r0
   d948c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d948e:	6800      	ldr	r0, [r0, #0]
   d9490:	3101      	adds	r1, #1
   d9492:	f7fe fefb 	bl	d828c <realloc>
	if (newbuffer) {
   d9496:	b110      	cbz	r0, d949e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9498:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d949c:	2001      	movs	r0, #1
	}
	return 0;
}
   d949e:	bd38      	pop	{r3, r4, r5, pc}

000d94a0 <_ZN6String7reserveEj>:
{
   d94a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d94a2:	6803      	ldr	r3, [r0, #0]
{
   d94a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d94a6:	b123      	cbz	r3, d94b2 <_ZN6String7reserveEj+0x12>
   d94a8:	6843      	ldr	r3, [r0, #4]
   d94aa:	428b      	cmp	r3, r1
   d94ac:	d301      	bcc.n	d94b2 <_ZN6String7reserveEj+0x12>
   d94ae:	2001      	movs	r0, #1
}
   d94b0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d94b2:	4620      	mov	r0, r4
   d94b4:	f7ff ffe8 	bl	d9488 <_ZN6String12changeBufferEj>
   d94b8:	2800      	cmp	r0, #0
   d94ba:	d0f9      	beq.n	d94b0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d94bc:	68a3      	ldr	r3, [r4, #8]
   d94be:	2b00      	cmp	r3, #0
   d94c0:	d1f5      	bne.n	d94ae <_ZN6String7reserveEj+0xe>
   d94c2:	6822      	ldr	r2, [r4, #0]
   d94c4:	7013      	strb	r3, [r2, #0]
   d94c6:	e7f2      	b.n	d94ae <_ZN6String7reserveEj+0xe>

000d94c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d94c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d94ca:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d94cc:	4611      	mov	r1, r2
   d94ce:	9201      	str	r2, [sp, #4]
{
   d94d0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d94d2:	f7ff ffe5 	bl	d94a0 <_ZN6String7reserveEj>
   d94d6:	9a01      	ldr	r2, [sp, #4]
   d94d8:	b928      	cbnz	r0, d94e6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d94da:	4620      	mov	r0, r4
   d94dc:	f7ff ffc9 	bl	d9472 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d94e0:	4620      	mov	r0, r4
   d94e2:	b003      	add	sp, #12
   d94e4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d94e6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d94e8:	4629      	mov	r1, r5
   d94ea:	6820      	ldr	r0, [r4, #0]
   d94ec:	f001 fd1d 	bl	daf2a <memcpy>
	buffer[len] = 0;
   d94f0:	6822      	ldr	r2, [r4, #0]
   d94f2:	68a3      	ldr	r3, [r4, #8]
   d94f4:	2100      	movs	r1, #0
   d94f6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d94f8:	e7f2      	b.n	d94e0 <_ZN6String4copyEPKcj+0x18>

000d94fa <_ZN6StringC1EPKc>:
	buffer = NULL;
   d94fa:	2300      	movs	r3, #0
String::String(const char *cstr)
   d94fc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d94fe:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9502:	4604      	mov	r4, r0
	len = 0;
   d9504:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9506:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9508:	b141      	cbz	r1, d951c <_ZN6StringC1EPKc+0x22>
   d950a:	4608      	mov	r0, r1
   d950c:	9101      	str	r1, [sp, #4]
   d950e:	f001 fd76 	bl	daffe <strlen>
   d9512:	9901      	ldr	r1, [sp, #4]
   d9514:	4602      	mov	r2, r0
   d9516:	4620      	mov	r0, r4
   d9518:	f7ff ffd6 	bl	d94c8 <_ZN6String4copyEPKcj>
}
   d951c:	4620      	mov	r0, r4
   d951e:	b002      	add	sp, #8
   d9520:	bd10      	pop	{r4, pc}

000d9522 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9522:	b538      	push	{r3, r4, r5, lr}
   d9524:	4605      	mov	r5, r0
	if (buffer) {
   d9526:	6800      	ldr	r0, [r0, #0]
{
   d9528:	460c      	mov	r4, r1
	if (buffer) {
   d952a:	b168      	cbz	r0, d9548 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d952c:	686a      	ldr	r2, [r5, #4]
   d952e:	688b      	ldr	r3, [r1, #8]
   d9530:	429a      	cmp	r2, r3
   d9532:	d307      	bcc.n	d9544 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9534:	6809      	ldr	r1, [r1, #0]
   d9536:	f001 fd3d 	bl	dafb4 <strcpy>
			len = rhs.len;
   d953a:	68a3      	ldr	r3, [r4, #8]
   d953c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d953e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9540:	60a3      	str	r3, [r4, #8]
}
   d9542:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9544:	f7fe fe9a 	bl	d827c <free>
	buffer = rhs.buffer;
   d9548:	6823      	ldr	r3, [r4, #0]
   d954a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d954c:	6863      	ldr	r3, [r4, #4]
   d954e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9550:	68a3      	ldr	r3, [r4, #8]
   d9552:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9554:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9556:	e9c4 3300 	strd	r3, r3, [r4]
   d955a:	e7f1      	b.n	d9540 <_ZN6String4moveERS_+0x1e>

000d955c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d955c:	4288      	cmp	r0, r1
{
   d955e:	b510      	push	{r4, lr}
   d9560:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9562:	d005      	beq.n	d9570 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9564:	680b      	ldr	r3, [r1, #0]
   d9566:	b12b      	cbz	r3, d9574 <_ZN6StringaSERKS_+0x18>
   d9568:	688a      	ldr	r2, [r1, #8]
   d956a:	4619      	mov	r1, r3
   d956c:	f7ff ffac 	bl	d94c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9570:	4620      	mov	r0, r4
   d9572:	bd10      	pop	{r4, pc}
	else invalidate();
   d9574:	f7ff ff7d 	bl	d9472 <_ZN6String10invalidateEv>
   d9578:	e7fa      	b.n	d9570 <_ZN6StringaSERKS_+0x14>

000d957a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d957a:	b510      	push	{r4, lr}
	buffer = NULL;
   d957c:	2300      	movs	r3, #0
String::String(const String &value)
   d957e:	4604      	mov	r4, r0
	capacity = 0;
   d9580:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9584:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9586:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9588:	f7ff ffe8 	bl	d955c <_ZN6StringaSERKS_>
}
   d958c:	4620      	mov	r0, r4
   d958e:	bd10      	pop	{r4, pc}

000d9590 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9590:	4288      	cmp	r0, r1
{
   d9592:	b510      	push	{r4, lr}
   d9594:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9596:	d001      	beq.n	d959c <_ZN6StringaSEOS_+0xc>
   d9598:	f7ff ffc3 	bl	d9522 <_ZN6String4moveERS_>
	return *this;
}
   d959c:	4620      	mov	r0, r4
   d959e:	bd10      	pop	{r4, pc}

000d95a0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d95a0:	b513      	push	{r0, r1, r4, lr}
   d95a2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d95a4:	b159      	cbz	r1, d95be <_ZN6StringaSEPKc+0x1e>
   d95a6:	4608      	mov	r0, r1
   d95a8:	9101      	str	r1, [sp, #4]
   d95aa:	f001 fd28 	bl	daffe <strlen>
   d95ae:	9901      	ldr	r1, [sp, #4]
   d95b0:	4602      	mov	r2, r0
   d95b2:	4620      	mov	r0, r4
   d95b4:	f7ff ff88 	bl	d94c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d95b8:	4620      	mov	r0, r4
   d95ba:	b002      	add	sp, #8
   d95bc:	bd10      	pop	{r4, pc}
	else invalidate();
   d95be:	f7ff ff58 	bl	d9472 <_ZN6String10invalidateEv>
   d95c2:	e7f9      	b.n	d95b8 <_ZN6StringaSEPKc+0x18>

000d95c4 <_ZN6StringC1Ec>:
String::String(char c)
   d95c4:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d95c6:	2300      	movs	r3, #0
	buf[0] = c;
   d95c8:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d95cc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d95d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d95d2:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d95d4:	a901      	add	r1, sp, #4
String::String(char c)
   d95d6:	4604      	mov	r4, r0
	buf[1] = 0;
   d95d8:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d95dc:	f7ff ffe0 	bl	d95a0 <_ZN6StringaSEPKc>
}
   d95e0:	4620      	mov	r0, r4
   d95e2:	b002      	add	sp, #8
   d95e4:	bd10      	pop	{r4, pc}

000d95e6 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   d95e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d95e8:	4604      	mov	r4, r0
	buffer = NULL;
   d95ea:	2300      	movs	r3, #0
	capacity = 0;
   d95ec:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d95f0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d95f2:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   d95f4:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d95f6:	a901      	add	r1, sp, #4
   d95f8:	f000 fc56 	bl	d9ea8 <utoa>
	*this = buf;
   d95fc:	a901      	add	r1, sp, #4
   d95fe:	4620      	mov	r0, r4
   d9600:	f7ff ffce 	bl	d95a0 <_ZN6StringaSEPKc>
}
   d9604:	4620      	mov	r0, r4
   d9606:	b004      	add	sp, #16
   d9608:	bd10      	pop	{r4, pc}

000d960a <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d960a:	b530      	push	{r4, r5, lr}
   d960c:	4604      	mov	r4, r0
	buffer = NULL;
   d960e:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d9610:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d9612:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9616:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9618:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d961a:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d961e:	b2cd      	uxtb	r5, r1
   d9620:	f000 ff08 	bl	da434 <__aeabi_f2d>
   d9624:	ec41 0b10 	vmov	d0, r0, r1
   d9628:	a901      	add	r1, sp, #4
   d962a:	4628      	mov	r0, r5
   d962c:	f7ff febc 	bl	d93a8 <_Z4dtoadhPc>
        *this = buf;
   d9630:	a901      	add	r1, sp, #4
   d9632:	4620      	mov	r0, r4
   d9634:	f7ff ffb4 	bl	d95a0 <_ZN6StringaSEPKc>
}
   d9638:	4620      	mov	r0, r4
   d963a:	b00b      	add	sp, #44	; 0x2c
   d963c:	bd30      	pop	{r4, r5, pc}

000d963e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d963e:	b570      	push	{r4, r5, r6, lr}
   d9640:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9642:	460e      	mov	r6, r1
   d9644:	b909      	cbnz	r1, d964a <_ZN6String6concatEPKcj+0xc>
   d9646:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9648:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d964a:	b16a      	cbz	r2, d9668 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d964c:	6884      	ldr	r4, [r0, #8]
   d964e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9650:	4621      	mov	r1, r4
   d9652:	f7ff ff25 	bl	d94a0 <_ZN6String7reserveEj>
   d9656:	2800      	cmp	r0, #0
   d9658:	d0f5      	beq.n	d9646 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d965a:	6828      	ldr	r0, [r5, #0]
   d965c:	68ab      	ldr	r3, [r5, #8]
   d965e:	4631      	mov	r1, r6
   d9660:	4418      	add	r0, r3
   d9662:	f001 fca7 	bl	dafb4 <strcpy>
	len = newlen;
   d9666:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9668:	2001      	movs	r0, #1
   d966a:	e7ed      	b.n	d9648 <_ZN6String6concatEPKcj+0xa>

000d966c <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d966c:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   d966e:	220a      	movs	r2, #10
{
   d9670:	4604      	mov	r4, r0
   d9672:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   d9674:	4669      	mov	r1, sp
   d9676:	f000 fc01 	bl	d9e7c <itoa>
	return concat(buf, strlen(buf));
   d967a:	4668      	mov	r0, sp
   d967c:	f001 fcbf 	bl	daffe <strlen>
   d9680:	4669      	mov	r1, sp
   d9682:	4602      	mov	r2, r0
   d9684:	4620      	mov	r0, r4
   d9686:	f7ff ffda 	bl	d963e <_ZN6String6concatEPKcj>
}
   d968a:	b002      	add	sp, #8
   d968c:	bd10      	pop	{r4, pc}

000d968e <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
   d968e:	b510      	push	{r4, lr}
   d9690:	4604      	mov	r4, r0
   d9692:	b086      	sub	sp, #24
   d9694:	ee10 0a10 	vmov	r0, s0
	char buf[20];
	dtoa(num, 6, buf);
   d9698:	f000 fecc 	bl	da434 <__aeabi_f2d>
   d969c:	ec41 0b10 	vmov	d0, r0, r1
   d96a0:	a901      	add	r1, sp, #4
   d96a2:	2006      	movs	r0, #6
   d96a4:	f7ff fe80 	bl	d93a8 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
   d96a8:	a801      	add	r0, sp, #4
   d96aa:	f001 fca8 	bl	daffe <strlen>
   d96ae:	a901      	add	r1, sp, #4
   d96b0:	4602      	mov	r2, r0
   d96b2:	4620      	mov	r0, r4
   d96b4:	f7ff ffc3 	bl	d963e <_ZN6String6concatEPKcj>
}
   d96b8:	b006      	add	sp, #24
   d96ba:	bd10      	pop	{r4, pc}

000d96bc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d96bc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d96be:	688a      	ldr	r2, [r1, #8]
   d96c0:	6809      	ldr	r1, [r1, #0]
{
   d96c2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d96c4:	f7ff ffbb 	bl	d963e <_ZN6String6concatEPKcj>
   d96c8:	b910      	cbnz	r0, d96d0 <_ZplRK15StringSumHelperRK6String+0x14>
   d96ca:	4620      	mov	r0, r4
   d96cc:	f7ff fed1 	bl	d9472 <_ZN6String10invalidateEv>
	return a;
}
   d96d0:	4620      	mov	r0, r4
   d96d2:	bd10      	pop	{r4, pc}

000d96d4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d96d4:	b513      	push	{r0, r1, r4, lr}
   d96d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d96d8:	b929      	cbnz	r1, d96e6 <_ZplRK15StringSumHelperPKc+0x12>
   d96da:	4620      	mov	r0, r4
   d96dc:	f7ff fec9 	bl	d9472 <_ZN6String10invalidateEv>
	return a;
}
   d96e0:	4620      	mov	r0, r4
   d96e2:	b002      	add	sp, #8
   d96e4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d96e6:	4608      	mov	r0, r1
   d96e8:	9101      	str	r1, [sp, #4]
   d96ea:	f001 fc88 	bl	daffe <strlen>
   d96ee:	9901      	ldr	r1, [sp, #4]
   d96f0:	4602      	mov	r2, r0
   d96f2:	4620      	mov	r0, r4
   d96f4:	f7ff ffa3 	bl	d963e <_ZN6String6concatEPKcj>
   d96f8:	2800      	cmp	r0, #0
   d96fa:	d0ee      	beq.n	d96da <_ZplRK15StringSumHelperPKc+0x6>
   d96fc:	e7f0      	b.n	d96e0 <_ZplRK15StringSumHelperPKc+0xc>

000d96fe <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   d96fe:	b510      	push	{r4, lr}
   d9700:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d9702:	f7ff ffb3 	bl	d966c <_ZN6String6concatEi>
   d9706:	b910      	cbnz	r0, d970e <_ZplRK15StringSumHelperi+0x10>
   d9708:	4620      	mov	r0, r4
   d970a:	f7ff feb2 	bl	d9472 <_ZN6String10invalidateEv>
	return a;
}
   d970e:	4620      	mov	r0, r4
   d9710:	bd10      	pop	{r4, pc}

000d9712 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
   d9712:	b510      	push	{r4, lr}
   d9714:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d9716:	f7ff ffba 	bl	d968e <_ZN6String6concatEf>
   d971a:	b910      	cbnz	r0, d9722 <_ZplRK15StringSumHelperf+0x10>
   d971c:	4620      	mov	r0, r4
   d971e:	f7ff fea8 	bl	d9472 <_ZN6String10invalidateEv>
	return a;
}
   d9722:	4620      	mov	r0, r4
   d9724:	bd10      	pop	{r4, pc}

000d9726 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9726:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9728:	6882      	ldr	r2, [r0, #8]
   d972a:	b93a      	cbnz	r2, d973c <_ZNK6String6equalsEPKc+0x16>
   d972c:	b121      	cbz	r1, d9738 <_ZNK6String6equalsEPKc+0x12>
   d972e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d9730:	fab0 f080 	clz	r0, r0
   d9734:	0940      	lsrs	r0, r0, #5
   d9736:	e000      	b.n	d973a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9738:	2001      	movs	r0, #1
}
   d973a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d973c:	6800      	ldr	r0, [r0, #0]
   d973e:	b909      	cbnz	r1, d9744 <_ZNK6String6equalsEPKc+0x1e>
   d9740:	7800      	ldrb	r0, [r0, #0]
   d9742:	e7f5      	b.n	d9730 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d9744:	f001 fc2c 	bl	dafa0 <strcmp>
   d9748:	e7f2      	b.n	d9730 <_ZNK6String6equalsEPKc+0xa>

000d974a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d974a:	b510      	push	{r4, lr}
   d974c:	4613      	mov	r3, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d974e:	6884      	ldr	r4, [r0, #8]
   d9750:	688a      	ldr	r2, [r1, #8]
   d9752:	1aa4      	subs	r4, r4, r2
   d9754:	429c      	cmp	r4, r3
   d9756:	d30a      	bcc.n	d976e <_ZNK6String10startsWithERKS_j+0x24>
   d9758:	6800      	ldr	r0, [r0, #0]
   d975a:	b138      	cbz	r0, d976c <_ZNK6String10startsWithERKS_j+0x22>
   d975c:	6809      	ldr	r1, [r1, #0]
   d975e:	b141      	cbz	r1, d9772 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d9760:	4418      	add	r0, r3
   d9762:	f001 fc54 	bl	db00e <strncmp>
   d9766:	fab0 f080 	clz	r0, r0
   d976a:	0940      	lsrs	r0, r0, #5
}
   d976c:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d976e:	2000      	movs	r0, #0
   d9770:	e7fc      	b.n	d976c <_ZNK6String10startsWithERKS_j+0x22>
   d9772:	4608      	mov	r0, r1
   d9774:	e7fa      	b.n	d976c <_ZNK6String10startsWithERKS_j+0x22>

000d9776 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
   d9776:	6882      	ldr	r2, [r0, #8]
   d9778:	688b      	ldr	r3, [r1, #8]
   d977a:	429a      	cmp	r2, r3
   d977c:	d302      	bcc.n	d9784 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d977e:	2200      	movs	r2, #0
   d9780:	f7ff bfe3 	b.w	d974a <_ZNK6String10startsWithERKS_j>
}
   d9784:	2000      	movs	r0, #0
   d9786:	4770      	bx	lr

000d9788 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d9788:	6883      	ldr	r3, [r0, #8]
   d978a:	428b      	cmp	r3, r1
   d978c:	d903      	bls.n	d9796 <_ZNK6StringixEj+0xe>
   d978e:	6800      	ldr	r0, [r0, #0]
   d9790:	b110      	cbz	r0, d9798 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d9792:	5c40      	ldrb	r0, [r0, r1]
   d9794:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   d9796:	2000      	movs	r0, #0
}
   d9798:	4770      	bx	lr

000d979a <_ZNK6String6charAtEj>:
	return operator[](loc);
   d979a:	f7ff bff5 	b.w	d9788 <_ZNK6StringixEj>

000d979e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d979e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d97a0:	6883      	ldr	r3, [r0, #8]
   d97a2:	4293      	cmp	r3, r2
   d97a4:	d907      	bls.n	d97b6 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d97a6:	6804      	ldr	r4, [r0, #0]
   d97a8:	6809      	ldr	r1, [r1, #0]
   d97aa:	18a0      	adds	r0, r4, r2
   d97ac:	f001 fc54 	bl	db058 <strstr>
	if (found == NULL) return -1;
   d97b0:	b108      	cbz	r0, d97b6 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d97b2:	1b00      	subs	r0, r0, r4
}
   d97b4:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d97b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d97ba:	e7fb      	b.n	d97b4 <_ZNK6String7indexOfERKS_j+0x16>

000d97bc <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d97bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d97c0:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d97c2:	688a      	ldr	r2, [r1, #8]
{
   d97c4:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d97c6:	b1ca      	cbz	r2, d97fc <_ZNK6String11lastIndexOfERKS_j+0x40>
   d97c8:	6883      	ldr	r3, [r0, #8]
   d97ca:	b1bb      	cbz	r3, d97fc <_ZNK6String11lastIndexOfERKS_j+0x40>
   d97cc:	429a      	cmp	r2, r3
   d97ce:	d815      	bhi.n	d97fc <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97d0:	6807      	ldr	r7, [r0, #0]
	if (fromIndex >= len) fromIndex = len - 1;
   d97d2:	42ab      	cmp	r3, r5
   d97d4:	bf98      	it	ls
   d97d6:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97da:	4638      	mov	r0, r7
	int found = -1;
   d97dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97e0:	eb07 0805 	add.w	r8, r7, r5
   d97e4:	4540      	cmp	r0, r8
   d97e6:	d80b      	bhi.n	d9800 <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
   d97e8:	6831      	ldr	r1, [r6, #0]
   d97ea:	f001 fc35 	bl	db058 <strstr>
		if (!p) break;
   d97ee:	b138      	cbz	r0, d9800 <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d97f0:	1bc3      	subs	r3, r0, r7
   d97f2:	42ab      	cmp	r3, r5
   d97f4:	bf98      	it	ls
   d97f6:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d97f8:	3001      	adds	r0, #1
   d97fa:	e7f3      	b.n	d97e4 <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d97fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}
	return found;
}
   d9800:	4620      	mov	r0, r4
   d9802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9806 <_ZNK6String11lastIndexOfERKS_>:
	return lastIndexOf(s2, len - s2.len);
   d9806:	6882      	ldr	r2, [r0, #8]
   d9808:	688b      	ldr	r3, [r1, #8]
   d980a:	1ad2      	subs	r2, r2, r3
   d980c:	f7ff bfd6 	b.w	d97bc <_ZNK6String11lastIndexOfERKS_j>

000d9810 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d9810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d9812:	429a      	cmp	r2, r3
{
   d9814:	460f      	mov	r7, r1
   d9816:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d9818:	490c      	ldr	r1, [pc, #48]	; (d984c <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d981a:	bf88      	it	hi
   d981c:	4613      	movhi	r3, r2
{
   d981e:	4614      	mov	r4, r2
   d9820:	4606      	mov	r6, r0
	if (left > right) {
   d9822:	bf84      	itt	hi
   d9824:	462c      	movhi	r4, r5
   d9826:	461d      	movhi	r5, r3
	String out;
   d9828:	f7ff fe67 	bl	d94fa <_ZN6StringC1EPKc>
	if (left > len) return out;
   d982c:	68ba      	ldr	r2, [r7, #8]
   d982e:	42a2      	cmp	r2, r4
   d9830:	d30a      	bcc.n	d9848 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d9832:	6839      	ldr	r1, [r7, #0]
   d9834:	42aa      	cmp	r2, r5
   d9836:	bf94      	ite	ls
   d9838:	ebc4 0202 	rsbls	r2, r4, r2
   d983c:	ebc4 0205 	rsbhi	r2, r4, r5
   d9840:	4421      	add	r1, r4
   d9842:	4630      	mov	r0, r6
   d9844:	f7ff fe40 	bl	d94c8 <_ZN6String4copyEPKcj>
	return out;
}
   d9848:	4630      	mov	r0, r6
   d984a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d984c:	000ddf70 	.word	0x000ddf70

000d9850 <_ZNK6String9substringEj>:
{
   d9850:	b510      	push	{r4, lr}
   d9852:	4604      	mov	r4, r0
	return substring(left, len);
   d9854:	688b      	ldr	r3, [r1, #8]
   d9856:	f7ff ffdb 	bl	d9810 <_ZNK6String9substringEjj>
}
   d985a:	4620      	mov	r0, r4
   d985c:	bd10      	pop	{r4, pc}

000d985e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d985e:	6800      	ldr	r0, [r0, #0]
   d9860:	b108      	cbz	r0, d9866 <_ZNK6String5toIntEv+0x8>
   d9862:	f001 bb50 	b.w	daf06 <atol>
	return 0;
}
   d9866:	4770      	bx	lr

000d9868 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   d9868:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d986a:	6800      	ldr	r0, [r0, #0]
   d986c:	b140      	cbz	r0, d9880 <_ZNK6String7toFloatEv+0x18>
   d986e:	f001 fb47 	bl	daf00 <atof>
   d9872:	ec51 0b10 	vmov	r0, r1, d0
   d9876:	f001 f92d 	bl	daad4 <__aeabi_d2f>
   d987a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d987e:	bd08      	pop	{r3, pc}
	return 0;
   d9880:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9888 <_ZNK6String7toFloatEv+0x20>
   d9884:	e7fb      	b.n	d987e <_ZNK6String7toFloatEv+0x16>
   d9886:	bf00      	nop
   d9888:	00000000 	.word	0x00000000

000d988c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d988c:	4b05      	ldr	r3, [pc, #20]	; (d98a4 <_GLOBAL__sub_I_System+0x18>)
   d988e:	2202      	movs	r2, #2
   d9890:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9892:	4b05      	ldr	r3, [pc, #20]	; (d98a8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d9894:	4a05      	ldr	r2, [pc, #20]	; (d98ac <_GLOBAL__sub_I_System+0x20>)
   d9896:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d9898:	2000      	movs	r0, #0
   d989a:	6018      	str	r0, [r3, #0]
   d989c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d989e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d98a0:	f7fe bc18 	b.w	d80d4 <set_system_mode>
   d98a4:	2003e5b0 	.word	0x2003e5b0
   d98a8:	2003e5a4 	.word	0x2003e5a4
   d98ac:	ffff0000 	.word	0xffff0000

000d98b0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d98b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d98b4:	4a15      	ldr	r2, [pc, #84]	; (d990c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d98b6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d9918 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d98ba:	e9d2 3200 	ldrd	r3, r2, [r2]
   d98be:	18c0      	adds	r0, r0, r3
   d98c0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d98c4:	4a12      	ldr	r2, [pc, #72]	; (d9910 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d98c6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d98ca:	18c6      	adds	r6, r0, r3
   d98cc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d98d0:	e9d8 2300 	ldrd	r2, r3, [r8]
   d98d4:	42bb      	cmp	r3, r7
   d98d6:	bf08      	it	eq
   d98d8:	42b2      	cmpeq	r2, r6
{
   d98da:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d98dc:	d013      	beq.n	d9906 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d98de:	a903      	add	r1, sp, #12
   d98e0:	4668      	mov	r0, sp
   d98e2:	e9cd 6700 	strd	r6, r7, [sp]
   d98e6:	f7fe fd11 	bl	d830c <localtime_r>
	calendar_time.tm_year += 1900;
   d98ea:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d98ec:	4d09      	ldr	r5, [pc, #36]	; (d9914 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d98ee:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d98f2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d98f4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d98f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d98f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d98fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d98fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d98fe:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9902:	6823      	ldr	r3, [r4, #0]
   d9904:	602b      	str	r3, [r5, #0]
    }
}
   d9906:	b00c      	add	sp, #48	; 0x30
   d9908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d990c:	2003e5e8 	.word	0x2003e5e8
   d9910:	2003e5e0 	.word	0x2003e5e0
   d9914:	2003e5bc 	.word	0x2003e5bc
   d9918:	2003e5f0 	.word	0x2003e5f0

000d991c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d991c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d991e:	2000      	movs	r0, #0
   d9920:	f7fe fc34 	bl	d818c <spark_sync_time_pending>
   d9924:	b128      	cbz	r0, d9932 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9926:	f7fe fc19 	bl	d815c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d992a:	f080 0001 	eor.w	r0, r0, #1
   d992e:	b2c0      	uxtb	r0, r0
    }
   d9930:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d9932:	2001      	movs	r0, #1
   d9934:	e7fc      	b.n	d9930 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d9938 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d9938:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d993a:	f7ff ffb9 	bl	d98b0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d993e:	4b02      	ldr	r3, [pc, #8]	; (d9948 <_ZN9TimeClass5monthEx+0x10>)
   d9940:	6918      	ldr	r0, [r3, #16]
}
   d9942:	3001      	adds	r0, #1
   d9944:	bd08      	pop	{r3, pc}
   d9946:	bf00      	nop
   d9948:	2003e5bc 	.word	0x2003e5bc

000d994c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d994c:	b530      	push	{r4, r5, lr}
   d994e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d9950:	4818      	ldr	r0, [pc, #96]	; (d99b4 <_ZN9TimeClass7timeStrEx+0x68>)
   d9952:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9956:	1852      	adds	r2, r2, r1
   d9958:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d995c:	4816      	ldr	r0, [pc, #88]	; (d99b8 <_ZN9TimeClass7timeStrEx+0x6c>)
   d995e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9962:	1852      	adds	r2, r2, r1
{
   d9964:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9966:	eb40 0303 	adc.w	r3, r0, r3
   d996a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d996e:	2224      	movs	r2, #36	; 0x24
   d9970:	eb0d 0002 	add.w	r0, sp, r2
   d9974:	2100      	movs	r1, #0
   d9976:	f001 fae6 	bl	daf46 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d997a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d997c:	a909      	add	r1, sp, #36	; 0x24
   d997e:	4668      	mov	r0, sp
   d9980:	f7fe fcc4 	bl	d830c <localtime_r>
    char ascstr[26] = {};
   d9984:	2216      	movs	r2, #22
   d9986:	4629      	mov	r1, r5
   d9988:	a803      	add	r0, sp, #12
   d998a:	9502      	str	r5, [sp, #8]
   d998c:	f001 fadb 	bl	daf46 <memset>
    asctime_r(&calendar_time, ascstr);
   d9990:	a902      	add	r1, sp, #8
   d9992:	a809      	add	r0, sp, #36	; 0x24
   d9994:	f001 fa88 	bl	daea8 <asctime_r>
    int len = strlen(ascstr);
   d9998:	a802      	add	r0, sp, #8
   d999a:	f001 fb30 	bl	daffe <strlen>
    ascstr[len-1] = 0; // remove final newline
   d999e:	ab12      	add	r3, sp, #72	; 0x48
   d99a0:	4418      	add	r0, r3
    return String(ascstr);
   d99a2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d99a4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d99a8:	4620      	mov	r0, r4
   d99aa:	f7ff fda6 	bl	d94fa <_ZN6StringC1EPKc>
}
   d99ae:	4620      	mov	r0, r4
   d99b0:	b013      	add	sp, #76	; 0x4c
   d99b2:	bd30      	pop	{r4, r5, pc}
   d99b4:	2003e5e8 	.word	0x2003e5e8
   d99b8:	2003e5e0 	.word	0x2003e5e0

000d99bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d99bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99c0:	b0a5      	sub	sp, #148	; 0x94
   d99c2:	4607      	mov	r7, r0
   d99c4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d99c6:	a814      	add	r0, sp, #80	; 0x50
{
   d99c8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d99ca:	223f      	movs	r2, #63	; 0x3f
{
   d99cc:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d99ce:	f001 fb30 	bl	db032 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d99d2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d99d4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d99d6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d99da:	f001 fb10 	bl	daffe <strlen>
   d99de:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d99e0:	bb5d      	cbnz	r5, d9a3a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d99e2:	492a      	ldr	r1, [pc, #168]	; (d9a8c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d99e4:	a803      	add	r0, sp, #12
   d99e6:	f001 fae5 	bl	dafb4 <strcpy>
   d99ea:	ae14      	add	r6, sp, #80	; 0x50
{
   d99ec:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d99ee:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d99f2:	45ab      	cmp	fp, r5
   d99f4:	d936      	bls.n	d9a64 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d99f6:	46b1      	mov	r9, r6
   d99f8:	f105 0a01 	add.w	sl, r5, #1
   d99fc:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9a00:	2b25      	cmp	r3, #37	; 0x25
   d9a02:	d117      	bne.n	d9a34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d9a04:	7873      	ldrb	r3, [r6, #1]
   d9a06:	2b7a      	cmp	r3, #122	; 0x7a
   d9a08:	d114      	bne.n	d9a34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9a0a:	a803      	add	r0, sp, #12
   d9a0c:	f001 faf7 	bl	daffe <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9a10:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d9a12:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9a14:	1828      	adds	r0, r5, r0
   d9a16:	4418      	add	r0, r3
   d9a18:	ebab 0205 	sub.w	r2, fp, r5
   d9a1c:	1cb1      	adds	r1, r6, #2
   d9a1e:	f001 fa84 	bl	daf2a <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d9a22:	4622      	mov	r2, r4
   d9a24:	a903      	add	r1, sp, #12
   d9a26:	4630      	mov	r0, r6
   d9a28:	f001 fa7f 	bl	daf2a <memcpy>
            len = strlen(format_str);
   d9a2c:	a814      	add	r0, sp, #80	; 0x50
   d9a2e:	f001 fae6 	bl	daffe <strlen>
   d9a32:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d9a34:	464e      	mov	r6, r9
   d9a36:	4655      	mov	r5, sl
   d9a38:	e7d9      	b.n	d99ee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9a3a:	213c      	movs	r1, #60	; 0x3c
   d9a3c:	fb95 f3f1 	sdiv	r3, r5, r1
   d9a40:	2b00      	cmp	r3, #0
   d9a42:	bfb8      	it	lt
   d9a44:	425b      	neglt	r3, r3
   d9a46:	fbb3 f2f1 	udiv	r2, r3, r1
   d9a4a:	fb01 3312 	mls	r3, r1, r2, r3
   d9a4e:	9300      	str	r3, [sp, #0]
   d9a50:	4a0f      	ldr	r2, [pc, #60]	; (d9a90 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d9a52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9a56:	2110      	movs	r1, #16
   d9a58:	a803      	add	r0, sp, #12
   d9a5a:	fb95 f3f3 	sdiv	r3, r5, r3
   d9a5e:	f7fe fc25 	bl	d82ac <snprintf>
   d9a62:	e7c2      	b.n	d99ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9a64:	2100      	movs	r1, #0
   d9a66:	222e      	movs	r2, #46	; 0x2e
   d9a68:	a808      	add	r0, sp, #32
   d9a6a:	9107      	str	r1, [sp, #28]
   d9a6c:	f001 fa6b 	bl	daf46 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9a70:	4643      	mov	r3, r8
   d9a72:	aa14      	add	r2, sp, #80	; 0x50
   d9a74:	2132      	movs	r1, #50	; 0x32
   d9a76:	a807      	add	r0, sp, #28
   d9a78:	f7fe fc40 	bl	d82fc <strftime>
    return String(buf);
   d9a7c:	a907      	add	r1, sp, #28
   d9a7e:	4638      	mov	r0, r7
   d9a80:	f7ff fd3b 	bl	d94fa <_ZN6StringC1EPKc>
}
   d9a84:	4638      	mov	r0, r7
   d9a86:	b025      	add	sp, #148	; 0x94
   d9a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a8c:	000ddec4 	.word	0x000ddec4
   d9a90:	000ddec6 	.word	0x000ddec6

000d9a94 <_ZN9TimeClass6formatExPKc>:
{
   d9a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9a96:	b08d      	sub	sp, #52	; 0x34
   d9a98:	e9cd 2300 	strd	r2, r3, [sp]
   d9a9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9a9e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9aa0:	b915      	cbnz	r5, d9aa8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9aa2:	4b19      	ldr	r3, [pc, #100]	; (d9b08 <_ZN9TimeClass6formatExPKc+0x74>)
   d9aa4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9aa6:	b12d      	cbz	r5, d9ab4 <_ZN9TimeClass6formatExPKc+0x20>
   d9aa8:	4b18      	ldr	r3, [pc, #96]	; (d9b0c <_ZN9TimeClass6formatExPKc+0x78>)
   d9aaa:	4628      	mov	r0, r5
   d9aac:	6819      	ldr	r1, [r3, #0]
   d9aae:	f001 fa77 	bl	dafa0 <strcmp>
   d9ab2:	b938      	cbnz	r0, d9ac4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9ab4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9ab8:	4620      	mov	r0, r4
   d9aba:	f7ff ff47 	bl	d994c <_ZN9TimeClass7timeStrEx>
}
   d9abe:	4620      	mov	r0, r4
   d9ac0:	b00d      	add	sp, #52	; 0x34
   d9ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9ac4:	4e12      	ldr	r6, [pc, #72]	; (d9b10 <_ZN9TimeClass6formatExPKc+0x7c>)
   d9ac6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9ac8:	4f12      	ldr	r7, [pc, #72]	; (d9b14 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d9aca:	e9d6 3200 	ldrd	r3, r2, [r6]
   d9ace:	185b      	adds	r3, r3, r1
   d9ad0:	9901      	ldr	r1, [sp, #4]
   d9ad2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d9ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
   d9ada:	181b      	adds	r3, r3, r0
   d9adc:	eb41 0202 	adc.w	r2, r1, r2
   d9ae0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d9ae4:	2100      	movs	r1, #0
   d9ae6:	2224      	movs	r2, #36	; 0x24
   d9ae8:	a803      	add	r0, sp, #12
   d9aea:	f001 fa2c 	bl	daf46 <memset>
    localtime_r(&t, &calendar_time);
   d9aee:	a903      	add	r1, sp, #12
   d9af0:	4668      	mov	r0, sp
   d9af2:	f7fe fc0b 	bl	d830c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9af6:	6832      	ldr	r2, [r6, #0]
   d9af8:	683b      	ldr	r3, [r7, #0]
   d9afa:	a903      	add	r1, sp, #12
   d9afc:	4413      	add	r3, r2
   d9afe:	4620      	mov	r0, r4
   d9b00:	462a      	mov	r2, r5
   d9b02:	f7ff ff5b 	bl	d99bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d9b06:	e7da      	b.n	d9abe <_ZN9TimeClass6formatExPKc+0x2a>
   d9b08:	2003e5b8 	.word	0x2003e5b8
   d9b0c:	2003dce0 	.word	0x2003dce0
   d9b10:	2003e5e8 	.word	0x2003e5e8
   d9b14:	2003e5e0 	.word	0x2003e5e0

000d9b18 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9b18:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9b1a:	2000      	movs	r0, #0
   d9b1c:	f7fe f938 	bl	d7d90 <hal_rtc_time_is_valid>
    if (rtcstate)
   d9b20:	4604      	mov	r4, r0
   d9b22:	b9a0      	cbnz	r0, d9b4e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d9b24:	f7fe face 	bl	d80c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9b28:	2801      	cmp	r0, #1
   d9b2a:	d110      	bne.n	d9b4e <_ZN9TimeClass7isValidEv+0x36>
   d9b2c:	4620      	mov	r0, r4
   d9b2e:	f7fe faf1 	bl	d8114 <system_thread_get_state>
   d9b32:	b960      	cbnz	r0, d9b4e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d9b34:	f7ff fef2 	bl	d991c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9b38:	b910      	cbnz	r0, d9b40 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9b3a:	f7fe fb07 	bl	d814c <spark_process>
        while (_while() && !_condition()) {
   d9b3e:	e7f9      	b.n	d9b34 <_ZN9TimeClass7isValidEv+0x1c>
   d9b40:	f7ff feec 	bl	d991c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d9b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9b48:	2000      	movs	r0, #0
   d9b4a:	f7fe b921 	b.w	d7d90 <hal_rtc_time_is_valid>
}
   d9b4e:	4620      	mov	r0, r4
   d9b50:	bd10      	pop	{r4, pc}

000d9b52 <_ZN9TimeClass3nowEv>:
{
   d9b52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d9b54:	f7ff ffe0 	bl	d9b18 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9b58:	2210      	movs	r2, #16
   d9b5a:	2100      	movs	r1, #0
   d9b5c:	4668      	mov	r0, sp
   d9b5e:	f001 f9f2 	bl	daf46 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9b62:	2100      	movs	r1, #0
   d9b64:	4668      	mov	r0, sp
   d9b66:	f7fe f91b 	bl	d7da0 <hal_rtc_get_time>
}
   d9b6a:	9800      	ldr	r0, [sp, #0]
   d9b6c:	b005      	add	sp, #20
   d9b6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9b74 <_ZN9TimeClass4hourEv>:
{
   d9b74:	b508      	push	{r3, lr}
	return hour(now());
   d9b76:	f7ff ffec 	bl	d9b52 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9b7a:	17c1      	asrs	r1, r0, #31
   d9b7c:	f7ff fe98 	bl	d98b0 <_ZL22Refresh_UnixTime_Cachex>
}
   d9b80:	4b01      	ldr	r3, [pc, #4]	; (d9b88 <_ZN9TimeClass4hourEv+0x14>)
   d9b82:	6898      	ldr	r0, [r3, #8]
   d9b84:	bd08      	pop	{r3, pc}
   d9b86:	bf00      	nop
   d9b88:	2003e5bc 	.word	0x2003e5bc

000d9b8c <_ZN9TimeClass6minuteEv>:
{
   d9b8c:	b508      	push	{r3, lr}
	return minute(now());
   d9b8e:	f7ff ffe0 	bl	d9b52 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9b92:	17c1      	asrs	r1, r0, #31
   d9b94:	f7ff fe8c 	bl	d98b0 <_ZL22Refresh_UnixTime_Cachex>
}
   d9b98:	4b01      	ldr	r3, [pc, #4]	; (d9ba0 <_ZN9TimeClass6minuteEv+0x14>)
   d9b9a:	6858      	ldr	r0, [r3, #4]
   d9b9c:	bd08      	pop	{r3, pc}
   d9b9e:	bf00      	nop
   d9ba0:	2003e5bc 	.word	0x2003e5bc

000d9ba4 <_ZN9TimeClass3dayEv>:
{
   d9ba4:	b508      	push	{r3, lr}
	return day(now());
   d9ba6:	f7ff ffd4 	bl	d9b52 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9baa:	17c1      	asrs	r1, r0, #31
   d9bac:	f7ff fe80 	bl	d98b0 <_ZL22Refresh_UnixTime_Cachex>
}
   d9bb0:	4b01      	ldr	r3, [pc, #4]	; (d9bb8 <_ZN9TimeClass3dayEv+0x14>)
   d9bb2:	68d8      	ldr	r0, [r3, #12]
   d9bb4:	bd08      	pop	{r3, pc}
   d9bb6:	bf00      	nop
   d9bb8:	2003e5bc 	.word	0x2003e5bc

000d9bbc <_ZN9TimeClass5monthEv>:
{
   d9bbc:	b508      	push	{r3, lr}
	return month(now());
   d9bbe:	f7ff ffc8 	bl	d9b52 <_ZN9TimeClass3nowEv>
}
   d9bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9bc6:	17c1      	asrs	r1, r0, #31
   d9bc8:	f7ff beb6 	b.w	d9938 <_ZN9TimeClass5monthEx>

000d9bcc <_ZN9TimeClass4yearEv>:
{
   d9bcc:	b508      	push	{r3, lr}
	return year(now());
   d9bce:	f7ff ffc0 	bl	d9b52 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9bd2:	17c1      	asrs	r1, r0, #31
   d9bd4:	f7ff fe6c 	bl	d98b0 <_ZL22Refresh_UnixTime_Cachex>
}
   d9bd8:	4b01      	ldr	r3, [pc, #4]	; (d9be0 <_ZN9TimeClass4yearEv+0x14>)
   d9bda:	6958      	ldr	r0, [r3, #20]
   d9bdc:	bd08      	pop	{r3, pc}
   d9bde:	bf00      	nop
   d9be0:	2003e5bc 	.word	0x2003e5bc

000d9be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9be4:	4b02      	ldr	r3, [pc, #8]	; (d9bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9be6:	681a      	ldr	r2, [r3, #0]
   d9be8:	4b02      	ldr	r3, [pc, #8]	; (d9bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9bea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d9bec:	4770      	bx	lr
   d9bee:	bf00      	nop
   d9bf0:	2003dce0 	.word	0x2003dce0
   d9bf4:	2003e5b8 	.word	0x2003e5b8

000d9bf8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9bf8:	4770      	bx	lr

000d9bfa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9bfa:	7441      	strb	r1, [r0, #17]
}
   d9bfc:	4770      	bx	lr

000d9bfe <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9bfe:	4770      	bx	lr

000d9c00 <_ZN11USARTSerial17availableForWriteEv>:
{
   d9c00:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9c02:	7c00      	ldrb	r0, [r0, #16]
   d9c04:	f7fe fa04 	bl	d8010 <hal_usart_available_data_for_write>
}
   d9c08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c0c:	bd08      	pop	{r3, pc}

000d9c0e <_ZN11USARTSerial9availableEv>:
{
   d9c0e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9c10:	7c00      	ldrb	r0, [r0, #16]
   d9c12:	f7fe f9d5 	bl	d7fc0 <hal_usart_available>
}
   d9c16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9c1a:	bd08      	pop	{r3, pc}

000d9c1c <_ZN11USARTSerial4peekEv>:
{
   d9c1c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9c1e:	7c00      	ldrb	r0, [r0, #16]
   d9c20:	f7fe f9de 	bl	d7fe0 <hal_usart_peek>
}
   d9c24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9c28:	bd08      	pop	{r3, pc}

000d9c2a <_ZN11USARTSerial4readEv>:
{
   d9c2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9c2c:	7c00      	ldrb	r0, [r0, #16]
   d9c2e:	f7fe f9cf 	bl	d7fd0 <hal_usart_read>
}
   d9c32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9c36:	bd08      	pop	{r3, pc}

000d9c38 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d9c38:	7c00      	ldrb	r0, [r0, #16]
   d9c3a:	f7fe b9d9 	b.w	d7ff0 <hal_usart_flush>

000d9c3e <_ZN11USARTSerial5writeEh>:
{
   d9c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9c40:	7c45      	ldrb	r5, [r0, #17]
{
   d9c42:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9c44:	b12d      	cbz	r5, d9c52 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d9c46:	7c20      	ldrb	r0, [r4, #16]
}
   d9c48:	b003      	add	sp, #12
   d9c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9c4e:	f7fe b9af 	b.w	d7fb0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9c52:	7c00      	ldrb	r0, [r0, #16]
   d9c54:	9101      	str	r1, [sp, #4]
   d9c56:	f7fe f9db 	bl	d8010 <hal_usart_available_data_for_write>
   d9c5a:	2800      	cmp	r0, #0
   d9c5c:	9901      	ldr	r1, [sp, #4]
   d9c5e:	dcf2      	bgt.n	d9c46 <_ZN11USARTSerial5writeEh+0x8>
}
   d9c60:	4628      	mov	r0, r5
   d9c62:	b003      	add	sp, #12
   d9c64:	bd30      	pop	{r4, r5, pc}

000d9c66 <_ZN11USARTSerialD0Ev>:
   d9c66:	b510      	push	{r4, lr}
   d9c68:	2114      	movs	r1, #20
   d9c6a:	4604      	mov	r4, r0
   d9c6c:	f000 fa76 	bl	da15c <_ZdlPvj>
   d9c70:	4620      	mov	r0, r4
   d9c72:	bd10      	pop	{r4, pc}

000d9c74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9c74:	b510      	push	{r4, lr}
   d9c76:	f04f 0c00 	mov.w	ip, #0
   d9c7a:	4604      	mov	r4, r0
   d9c7c:	4608      	mov	r0, r1
   d9c7e:	4611      	mov	r1, r2
   d9c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9c84:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9c88:	4a04      	ldr	r2, [pc, #16]	; (d9c9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9c8a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9c8c:	2201      	movs	r2, #1
  _serial = serial;
   d9c8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9c90:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9c92:	461a      	mov	r2, r3
   d9c94:	f7fe f984 	bl	d7fa0 <hal_usart_init>
}
   d9c98:	4620      	mov	r0, r4
   d9c9a:	bd10      	pop	{r4, pc}
   d9c9c:	000ddef8 	.word	0x000ddef8

000d9ca0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d9ca0:	7c00      	ldrb	r0, [r0, #16]
   d9ca2:	2300      	movs	r3, #0
   d9ca4:	f7fe b9bc 	b.w	d8020 <hal_usart_begin_config>

000d9ca8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d9ca8:	2200      	movs	r2, #0
   d9caa:	f7ff bff9 	b.w	d9ca0 <_ZN11USARTSerial5beginEmm>
	...

000d9cb0 <_Z22__fetch_global_Serial1v>:
{
   d9cb0:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9cb2:	4c0d      	ldr	r4, [pc, #52]	; (d9ce8 <_Z22__fetch_global_Serial1v+0x38>)
   d9cb4:	7821      	ldrb	r1, [r4, #0]
   d9cb6:	f3bf 8f5b 	dmb	ish
   d9cba:	f011 0101 	ands.w	r1, r1, #1
   d9cbe:	d110      	bne.n	d9ce2 <_Z22__fetch_global_Serial1v+0x32>
   d9cc0:	4620      	mov	r0, r4
   d9cc2:	9101      	str	r1, [sp, #4]
   d9cc4:	f7fa f9f8 	bl	d40b8 <__cxa_guard_acquire>
   d9cc8:	9901      	ldr	r1, [sp, #4]
   d9cca:	b150      	cbz	r0, d9ce2 <_Z22__fetch_global_Serial1v+0x32>
   d9ccc:	4b07      	ldr	r3, [pc, #28]	; (d9cec <_Z22__fetch_global_Serial1v+0x3c>)
   d9cce:	4a08      	ldr	r2, [pc, #32]	; (d9cf0 <_Z22__fetch_global_Serial1v+0x40>)
   d9cd0:	4808      	ldr	r0, [pc, #32]	; (d9cf4 <_Z22__fetch_global_Serial1v+0x44>)
   d9cd2:	f7ff ffcf 	bl	d9c74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9cd6:	4620      	mov	r0, r4
   d9cd8:	f7fa f9f3 	bl	d40c2 <__cxa_guard_release>
   d9cdc:	4806      	ldr	r0, [pc, #24]	; (d9cf8 <_Z22__fetch_global_Serial1v+0x48>)
   d9cde:	f001 f909 	bl	daef4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9ce2:	4804      	ldr	r0, [pc, #16]	; (d9cf4 <_Z22__fetch_global_Serial1v+0x44>)
   d9ce4:	b002      	add	sp, #8
   d9ce6:	bd10      	pop	{r4, pc}
   d9ce8:	2003e5f8 	.word	0x2003e5f8
   d9cec:	2003e680 	.word	0x2003e680
   d9cf0:	2003e5fc 	.word	0x2003e5fc
   d9cf4:	2003e704 	.word	0x2003e704
   d9cf8:	000d9bff 	.word	0x000d9bff

000d9cfc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9cfc:	7441      	strb	r1, [r0, #17]
}
   d9cfe:	4770      	bx	lr

000d9d00 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9d00:	4770      	bx	lr

000d9d02 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9d02:	4770      	bx	lr

000d9d04 <_ZN9USBSerial4readEv>:
{
   d9d04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9d06:	2100      	movs	r1, #0
   d9d08:	7c00      	ldrb	r0, [r0, #16]
   d9d0a:	f7fe f9b1 	bl	d8070 <HAL_USB_USART_Receive_Data>
}
   d9d0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d12:	bd08      	pop	{r3, pc}

000d9d14 <_ZN9USBSerial4peekEv>:
{
   d9d14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9d16:	2101      	movs	r1, #1
   d9d18:	7c00      	ldrb	r0, [r0, #16]
   d9d1a:	f7fe f9a9 	bl	d8070 <HAL_USB_USART_Receive_Data>
}
   d9d1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9d22:	bd08      	pop	{r3, pc}

000d9d24 <_ZN9USBSerial17availableForWriteEv>:
{
   d9d24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9d26:	7c00      	ldrb	r0, [r0, #16]
   d9d28:	f7fe f99a 	bl	d8060 <HAL_USB_USART_Available_Data_For_Write>
}
   d9d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d30:	bd08      	pop	{r3, pc}

000d9d32 <_ZN9USBSerial9availableEv>:
{
   d9d32:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9d34:	7c00      	ldrb	r0, [r0, #16]
   d9d36:	f7fe f98b 	bl	d8050 <HAL_USB_USART_Available_Data>
}
   d9d3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d3e:	bd08      	pop	{r3, pc}

000d9d40 <_ZN9USBSerial5writeEh>:
{
   d9d40:	b513      	push	{r0, r1, r4, lr}
   d9d42:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d44:	7c00      	ldrb	r0, [r0, #16]
{
   d9d46:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d48:	f7fe f98a 	bl	d8060 <HAL_USB_USART_Available_Data_For_Write>
   d9d4c:	2800      	cmp	r0, #0
   d9d4e:	9901      	ldr	r1, [sp, #4]
   d9d50:	dc01      	bgt.n	d9d56 <_ZN9USBSerial5writeEh+0x16>
   d9d52:	7c60      	ldrb	r0, [r4, #17]
   d9d54:	b120      	cbz	r0, d9d60 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9d56:	7c20      	ldrb	r0, [r4, #16]
   d9d58:	f7fe f992 	bl	d8080 <HAL_USB_USART_Send_Data>
   d9d5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9d60:	b002      	add	sp, #8
   d9d62:	bd10      	pop	{r4, pc}

000d9d64 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9d64:	7c00      	ldrb	r0, [r0, #16]
   d9d66:	f7fe b993 	b.w	d8090 <HAL_USB_USART_Flush_Data>

000d9d6a <_ZN9USBSerialD0Ev>:
   d9d6a:	b510      	push	{r4, lr}
   d9d6c:	2114      	movs	r1, #20
   d9d6e:	4604      	mov	r4, r0
   d9d70:	f000 f9f4 	bl	da15c <_ZdlPvj>
   d9d74:	4620      	mov	r0, r4
   d9d76:	bd10      	pop	{r4, pc}

000d9d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d78:	b510      	push	{r4, lr}
   d9d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9d7e:	4604      	mov	r4, r0
   d9d80:	4608      	mov	r0, r1
   d9d82:	2100      	movs	r1, #0
   d9d84:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9d88:	4b04      	ldr	r3, [pc, #16]	; (d9d9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9d8a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9d8c:	2301      	movs	r3, #1
  _serial = serial;
   d9d8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9d90:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9d92:	4611      	mov	r1, r2
   d9d94:	f7fe f94c 	bl	d8030 <HAL_USB_USART_Init>
}
   d9d98:	4620      	mov	r0, r4
   d9d9a:	bd10      	pop	{r4, pc}
   d9d9c:	000ddf28 	.word	0x000ddf28

000d9da0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9da0:	7c00      	ldrb	r0, [r0, #16]
   d9da2:	2200      	movs	r2, #0
   d9da4:	f7fe b94c 	b.w	d8040 <HAL_USB_USART_Begin>

000d9da8 <_Z19acquireSerialBufferv>:
{
   d9da8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9daa:	2214      	movs	r2, #20
{
   d9dac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9dae:	2100      	movs	r1, #0
   d9db0:	f001 f8c9 	bl	daf46 <memset>
}
   d9db4:	4620      	mov	r0, r4
   d9db6:	bd10      	pop	{r4, pc}

000d9db8 <_Z16_fetch_usbserialv>:
{
   d9db8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9dba:	4c0f      	ldr	r4, [pc, #60]	; (d9df8 <_Z16_fetch_usbserialv+0x40>)
{
   d9dbc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9dbe:	a803      	add	r0, sp, #12
   d9dc0:	f7ff fff2 	bl	d9da8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9dc4:	7821      	ldrb	r1, [r4, #0]
   d9dc6:	f3bf 8f5b 	dmb	ish
   d9dca:	f011 0101 	ands.w	r1, r1, #1
   d9dce:	d10f      	bne.n	d9df0 <_Z16_fetch_usbserialv+0x38>
   d9dd0:	4620      	mov	r0, r4
   d9dd2:	9101      	str	r1, [sp, #4]
   d9dd4:	f7fa f970 	bl	d40b8 <__cxa_guard_acquire>
   d9dd8:	9901      	ldr	r1, [sp, #4]
   d9dda:	b148      	cbz	r0, d9df0 <_Z16_fetch_usbserialv+0x38>
   d9ddc:	aa03      	add	r2, sp, #12
   d9dde:	4807      	ldr	r0, [pc, #28]	; (d9dfc <_Z16_fetch_usbserialv+0x44>)
   d9de0:	f7ff ffca 	bl	d9d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9de4:	4620      	mov	r0, r4
   d9de6:	f7fa f96c 	bl	d40c2 <__cxa_guard_release>
   d9dea:	4805      	ldr	r0, [pc, #20]	; (d9e00 <_Z16_fetch_usbserialv+0x48>)
   d9dec:	f001 f882 	bl	daef4 <atexit>
	return _usbserial;
}
   d9df0:	4802      	ldr	r0, [pc, #8]	; (d9dfc <_Z16_fetch_usbserialv+0x44>)
   d9df2:	b008      	add	sp, #32
   d9df4:	bd10      	pop	{r4, pc}
   d9df6:	bf00      	nop
   d9df8:	2003e718 	.word	0x2003e718
   d9dfc:	2003e71c 	.word	0x2003e71c
   d9e00:	000d9d01 	.word	0x000d9d01

000d9e04 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9e04:	b510      	push	{r4, lr}
   d9e06:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9e08:	f001 f8f9 	bl	daffe <strlen>
   d9e0c:	3801      	subs	r0, #1
   d9e0e:	1823      	adds	r3, r4, r0
   d9e10:	4620      	mov	r0, r4
	while(i<j){
   d9e12:	4283      	cmp	r3, r0
   d9e14:	d906      	bls.n	d9e24 <_Z11str_reversePc+0x20>
		c = *i;
   d9e16:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9e18:	7819      	ldrb	r1, [r3, #0]
   d9e1a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9e1e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d9e22:	e7f6      	b.n	d9e12 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d9e24:	bd10      	pop	{r4, pc}

000d9e26 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9e26:	b570      	push	{r4, r5, r6, lr}
   d9e28:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9e2a:	1e91      	subs	r1, r2, #2
   d9e2c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9e2e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9e30:	d822      	bhi.n	d9e78 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d9e32:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d9e34:	b16d      	cbz	r5, d9e52 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9e36:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d9e3a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d9e3e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9e40:	2d09      	cmp	r5, #9
                *ptr += '0';
   d9e42:	bf94      	ite	ls
   d9e44:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9e46:	3157      	addhi	r1, #87	; 0x57
   d9e48:	b2c9      	uxtb	r1, r1
   d9e4a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d9e4e:	4635      	mov	r5, r6
	while(a){
   d9e50:	e7f0      	b.n	d9e34 <ultoa+0xe>
   d9e52:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d9e54:	4423      	add	r3, r4
            *ptr++ = '0';
   d9e56:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d9e58:	4293      	cmp	r3, r2
   d9e5a:	d902      	bls.n	d9e62 <ultoa+0x3c>
            *ptr++ = '0';
   d9e5c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d9e60:	e7fa      	b.n	d9e58 <ultoa+0x32>
   d9e62:	1a1a      	subs	r2, r3, r0
   d9e64:	4283      	cmp	r3, r0
   d9e66:	bf38      	it	cc
   d9e68:	2200      	movcc	r2, #0

	*ptr = '\0';
   d9e6a:	2300      	movs	r3, #0
   d9e6c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d9e6e:	4620      	mov	r0, r4
   d9e70:	f7ff ffc8 	bl	d9e04 <_Z11str_reversePc>
	return buffer;
   d9e74:	4620      	mov	r0, r4
}
   d9e76:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d9e78:	2000      	movs	r0, #0
   d9e7a:	e7fc      	b.n	d9e76 <ultoa+0x50>

000d9e7c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9e7c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9e7e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9e80:	460c      	mov	r4, r1
   d9e82:	4615      	mov	r5, r2
	if(a<0){
   d9e84:	da0e      	bge.n	d9ea4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d9e8a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9e8e:	bf14      	ite	ne
   d9e90:	4258      	negne	r0, r3
   d9e92:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9e94:	2301      	movs	r3, #1
		*buffer = '-';
   d9e96:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d9e98:	462a      	mov	r2, r5
   d9e9a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d9e9c:	f7ff ffc3 	bl	d9e26 <ultoa>
	}
	return buffer;
}
   d9ea0:	4620      	mov	r0, r4
   d9ea2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d9ea4:	2301      	movs	r3, #1
   d9ea6:	e7f9      	b.n	d9e9c <itoa+0x20>

000d9ea8 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9ea8:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9eaa:	2301      	movs	r3, #1
   d9eac:	f7ff ffbb 	bl	d9e26 <ultoa>
}
   d9eb0:	bd08      	pop	{r3, pc}
	...

000d9eb4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9eb4:	4b01      	ldr	r3, [pc, #4]	; (d9ebc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9eb6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9eb8:	4770      	bx	lr
   d9eba:	bf00      	nop
   d9ebc:	2003dce8 	.word	0x2003dce8

000d9ec0 <serialEventRun>:
{
   d9ec0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9ec2:	4b0b      	ldr	r3, [pc, #44]	; (d9ef0 <serialEventRun+0x30>)
   d9ec4:	b143      	cbz	r3, d9ed8 <serialEventRun+0x18>
   d9ec6:	f7ff ff77 	bl	d9db8 <_Z16_fetch_usbserialv>
   d9eca:	6803      	ldr	r3, [r0, #0]
   d9ecc:	691b      	ldr	r3, [r3, #16]
   d9ece:	4798      	blx	r3
   d9ed0:	2800      	cmp	r0, #0
   d9ed2:	dd01      	ble.n	d9ed8 <serialEventRun+0x18>
        serialEvent();
   d9ed4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9ed8:	4b06      	ldr	r3, [pc, #24]	; (d9ef4 <serialEventRun+0x34>)
   d9eda:	b143      	cbz	r3, d9eee <serialEventRun+0x2e>
   d9edc:	f7ff fee8 	bl	d9cb0 <_Z22__fetch_global_Serial1v>
   d9ee0:	6803      	ldr	r3, [r0, #0]
   d9ee2:	691b      	ldr	r3, [r3, #16]
   d9ee4:	4798      	blx	r3
   d9ee6:	2800      	cmp	r0, #0
   d9ee8:	dd01      	ble.n	d9eee <serialEventRun+0x2e>
        serialEvent1();
   d9eea:	f3af 8000 	nop.w
}
   d9eee:	bd08      	pop	{r3, pc}
	...

000d9ef8 <_post_loop>:
{
   d9ef8:	b508      	push	{r3, lr}
	serialEventRun();
   d9efa:	f7ff ffe1 	bl	d9ec0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9efe:	f7fd ff3f 	bl	d7d80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9f02:	4b01      	ldr	r3, [pc, #4]	; (d9f08 <_post_loop+0x10>)
   d9f04:	6018      	str	r0, [r3, #0]
}
   d9f06:	bd08      	pop	{r3, pc}
   d9f08:	2003e738 	.word	0x2003e738

000d9f0c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9f0c:	4805      	ldr	r0, [pc, #20]	; (d9f24 <_Z33system_initialize_user_backup_ramv+0x18>)
   d9f0e:	4a06      	ldr	r2, [pc, #24]	; (d9f28 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d9f10:	4906      	ldr	r1, [pc, #24]	; (d9f2c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d9f12:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9f14:	1a12      	subs	r2, r2, r0
   d9f16:	f001 f808 	bl	daf2a <memcpy>
    __backup_sram_signature = signature;
   d9f1a:	4b05      	ldr	r3, [pc, #20]	; (d9f30 <_Z33system_initialize_user_backup_ramv+0x24>)
   d9f1c:	4a05      	ldr	r2, [pc, #20]	; (d9f34 <_Z33system_initialize_user_backup_ramv+0x28>)
   d9f1e:	601a      	str	r2, [r3, #0]
}
   d9f20:	bd08      	pop	{r3, pc}
   d9f22:	bf00      	nop
   d9f24:	2003f400 	.word	0x2003f400
   d9f28:	2003f404 	.word	0x2003f404
   d9f2c:	000de248 	.word	0x000de248
   d9f30:	2003f400 	.word	0x2003f400
   d9f34:	9a271c1e 	.word	0x9a271c1e

000d9f38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9f38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9f3a:	2300      	movs	r3, #0
   d9f3c:	9300      	str	r3, [sp, #0]
   d9f3e:	461a      	mov	r2, r3
   d9f40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9f44:	f7fe f8f8 	bl	d8138 <system_ctrl_set_result>
}
   d9f48:	b003      	add	sp, #12
   d9f4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9f50 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9f50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9f52:	8843      	ldrh	r3, [r0, #2]
   d9f54:	2b0a      	cmp	r3, #10
   d9f56:	d008      	beq.n	d9f6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9f58:	2b50      	cmp	r3, #80	; 0x50
   d9f5a:	d10b      	bne.n	d9f74 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9f5c:	4b09      	ldr	r3, [pc, #36]	; (d9f84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9f5e:	681b      	ldr	r3, [r3, #0]
   d9f60:	b14b      	cbz	r3, d9f76 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9f62:	b003      	add	sp, #12
   d9f64:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9f68:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9f6a:	f7ff ffe5 	bl	d9f38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9f6e:	b003      	add	sp, #12
   d9f70:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9f74:	2300      	movs	r3, #0
   d9f76:	9300      	str	r3, [sp, #0]
   d9f78:	461a      	mov	r2, r3
   d9f7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9f7e:	f7fe f8db 	bl	d8138 <system_ctrl_set_result>
}
   d9f82:	e7f4      	b.n	d9f6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9f84:	2003e734 	.word	0x2003e734

000d9f88 <module_user_init_hook>:
{
   d9f88:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9f8a:	4812      	ldr	r0, [pc, #72]	; (d9fd4 <module_user_init_hook+0x4c>)
   d9f8c:	2100      	movs	r1, #0
   d9f8e:	f7fe f9ad 	bl	d82ec <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d9f92:	4b11      	ldr	r3, [pc, #68]	; (d9fd8 <module_user_init_hook+0x50>)
   d9f94:	681a      	ldr	r2, [r3, #0]
   d9f96:	4b11      	ldr	r3, [pc, #68]	; (d9fdc <module_user_init_hook+0x54>)
   d9f98:	429a      	cmp	r2, r3
   d9f9a:	4b11      	ldr	r3, [pc, #68]	; (d9fe0 <module_user_init_hook+0x58>)
   d9f9c:	bf0c      	ite	eq
   d9f9e:	2201      	moveq	r2, #1
   d9fa0:	2200      	movne	r2, #0
   d9fa2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9fa4:	d001      	beq.n	d9faa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d9fa6:	f7ff ffb1 	bl	d9f0c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9faa:	f7fd fed1 	bl	d7d50 <HAL_RNG_GetRandomNumber>
   d9fae:	4604      	mov	r4, r0
    srand(seed);
   d9fb0:	f000 ffd2 	bl	daf58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9fb4:	4b0b      	ldr	r3, [pc, #44]	; (d9fe4 <module_user_init_hook+0x5c>)
   d9fb6:	b113      	cbz	r3, d9fbe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d9fb8:	4620      	mov	r0, r4
   d9fba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9fbe:	2100      	movs	r1, #0
   d9fc0:	4808      	ldr	r0, [pc, #32]	; (d9fe4 <module_user_init_hook+0x5c>)
   d9fc2:	f7fe f8eb 	bl	d819c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9fca:	4807      	ldr	r0, [pc, #28]	; (d9fe8 <module_user_init_hook+0x60>)
   d9fcc:	2100      	movs	r1, #0
   d9fce:	f7fe b8a9 	b.w	d8124 <system_ctrl_set_app_request_handler>
   d9fd2:	bf00      	nop
   d9fd4:	000d9eb5 	.word	0x000d9eb5
   d9fd8:	2003f400 	.word	0x2003f400
   d9fdc:	9a271c1e 	.word	0x9a271c1e
   d9fe0:	2003e730 	.word	0x2003e730
   d9fe4:	00000000 	.word	0x00000000
   d9fe8:	000d9f51 	.word	0x000d9f51

000d9fec <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9fec:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9fee:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9ff0:	d902      	bls.n	d9ff8 <pinAvailable+0xc>
    return false;
   d9ff2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9ff4:	b002      	add	sp, #8
   d9ff6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9ff8:	f1a0 030b 	sub.w	r3, r0, #11
   d9ffc:	2b02      	cmp	r3, #2
   d9ffe:	d81a      	bhi.n	da036 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da000:	4c17      	ldr	r4, [pc, #92]	; (da060 <pinAvailable+0x74>)
   da002:	7821      	ldrb	r1, [r4, #0]
   da004:	f3bf 8f5b 	dmb	ish
   da008:	f011 0101 	ands.w	r1, r1, #1
   da00c:	d10b      	bne.n	da026 <pinAvailable+0x3a>
   da00e:	4620      	mov	r0, r4
   da010:	9101      	str	r1, [sp, #4]
   da012:	f7fa f851 	bl	d40b8 <__cxa_guard_acquire>
   da016:	9901      	ldr	r1, [sp, #4]
   da018:	b128      	cbz	r0, da026 <pinAvailable+0x3a>
   da01a:	4812      	ldr	r0, [pc, #72]	; (da064 <pinAvailable+0x78>)
   da01c:	f7ff f8f4 	bl	d9208 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da020:	4620      	mov	r0, r4
   da022:	f7fa f84e 	bl	d40c2 <__cxa_guard_release>
   da026:	4b0f      	ldr	r3, [pc, #60]	; (da064 <pinAvailable+0x78>)
   da028:	7818      	ldrb	r0, [r3, #0]
   da02a:	f7fd ff81 	bl	d7f30 <hal_spi_is_enabled>
   da02e:	2800      	cmp	r0, #0
   da030:	d1df      	bne.n	d9ff2 <pinAvailable+0x6>
  return true; // 'pin' is available
   da032:	2001      	movs	r0, #1
   da034:	e7de      	b.n	d9ff4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da036:	2801      	cmp	r0, #1
   da038:	d809      	bhi.n	da04e <pinAvailable+0x62>
   da03a:	f000 f86b 	bl	da114 <_Z19__fetch_global_Wirev>
   da03e:	2100      	movs	r1, #0
   da040:	7c00      	ldrb	r0, [r0, #16]
   da042:	f7fd ff2d 	bl	d7ea0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da046:	f080 0001 	eor.w	r0, r0, #1
   da04a:	b2c0      	uxtb	r0, r0
   da04c:	e7d2      	b.n	d9ff4 <pinAvailable+0x8>
   da04e:	3809      	subs	r0, #9
   da050:	2801      	cmp	r0, #1
   da052:	d8ee      	bhi.n	da032 <pinAvailable+0x46>
   da054:	f7ff fe2c 	bl	d9cb0 <_Z22__fetch_global_Serial1v>
   da058:	7c00      	ldrb	r0, [r0, #16]
   da05a:	f7fd ffd1 	bl	d8000 <hal_usart_is_enabled>
   da05e:	e7f2      	b.n	da046 <pinAvailable+0x5a>
   da060:	2003dec0 	.word	0x2003dec0
   da064:	2003dec4 	.word	0x2003dec4

000da068 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da068:	2823      	cmp	r0, #35	; 0x23
{
   da06a:	b538      	push	{r3, r4, r5, lr}
   da06c:	4604      	mov	r4, r0
   da06e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da070:	d80a      	bhi.n	da088 <pinMode+0x20>
   da072:	29ff      	cmp	r1, #255	; 0xff
   da074:	d008      	beq.n	da088 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da076:	f7ff ffb9 	bl	d9fec <pinAvailable>
   da07a:	b128      	cbz	r0, da088 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da07c:	4629      	mov	r1, r5
   da07e:	4620      	mov	r0, r4
}
   da080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da084:	f7fd be94 	b.w	d7db0 <HAL_Pin_Mode>
}
   da088:	bd38      	pop	{r3, r4, r5, pc}

000da08a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da08a:	b538      	push	{r3, r4, r5, lr}
   da08c:	4604      	mov	r4, r0
   da08e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da090:	f7fd fe96 	bl	d7dc0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da094:	28ff      	cmp	r0, #255	; 0xff
   da096:	d010      	beq.n	da0ba <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da098:	2806      	cmp	r0, #6
   da09a:	d804      	bhi.n	da0a6 <digitalWrite+0x1c>
   da09c:	234d      	movs	r3, #77	; 0x4d
   da09e:	fa23 f000 	lsr.w	r0, r3, r0
   da0a2:	07c3      	lsls	r3, r0, #31
   da0a4:	d409      	bmi.n	da0ba <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da0a6:	4620      	mov	r0, r4
   da0a8:	f7ff ffa0 	bl	d9fec <pinAvailable>
   da0ac:	b128      	cbz	r0, da0ba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da0ae:	4629      	mov	r1, r5
   da0b0:	4620      	mov	r0, r4
}
   da0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da0b6:	f7fd be8b 	b.w	d7dd0 <HAL_GPIO_Write>
}
   da0ba:	bd38      	pop	{r3, r4, r5, pc}

000da0bc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da0bc:	b510      	push	{r4, lr}
   da0be:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da0c0:	f7fd fe7e 	bl	d7dc0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da0c4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da0c6:	b2db      	uxtb	r3, r3
   da0c8:	2b01      	cmp	r3, #1
   da0ca:	d908      	bls.n	da0de <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da0cc:	4620      	mov	r0, r4
   da0ce:	f7ff ff8d 	bl	d9fec <pinAvailable>
   da0d2:	b120      	cbz	r0, da0de <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da0d4:	4620      	mov	r0, r4
}
   da0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da0da:	f7fd be81 	b.w	d7de0 <HAL_GPIO_Read>
}
   da0de:	2000      	movs	r0, #0
   da0e0:	bd10      	pop	{r4, pc}

000da0e2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da0e2:	4770      	bx	lr

000da0e4 <_Z17acquireWireBufferv>:
{
   da0e4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da0e6:	2300      	movs	r3, #0
   da0e8:	2520      	movs	r5, #32
   da0ea:	8043      	strh	r3, [r0, #2]
   da0ec:	2314      	movs	r3, #20
{
   da0ee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da0f0:	8003      	strh	r3, [r0, #0]
   da0f2:	6085      	str	r5, [r0, #8]
   da0f4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0f6:	4906      	ldr	r1, [pc, #24]	; (da110 <_Z17acquireWireBufferv+0x2c>)
   da0f8:	4628      	mov	r0, r5
   da0fa:	f000 f831 	bl	da160 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da0fe:	4904      	ldr	r1, [pc, #16]	; (da110 <_Z17acquireWireBufferv+0x2c>)
	};
   da100:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da102:	4628      	mov	r0, r5
   da104:	f000 f82c 	bl	da160 <_ZnajRKSt9nothrow_t>
	};
   da108:	60e0      	str	r0, [r4, #12]
}
   da10a:	4620      	mov	r0, r4
   da10c:	bd38      	pop	{r3, r4, r5, pc}
   da10e:	bf00      	nop
   da110:	000ddf50 	.word	0x000ddf50

000da114 <_Z19__fetch_global_Wirev>:
{
   da114:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da116:	4d0e      	ldr	r5, [pc, #56]	; (da150 <_Z19__fetch_global_Wirev+0x3c>)
   da118:	7829      	ldrb	r1, [r5, #0]
   da11a:	f3bf 8f5b 	dmb	ish
   da11e:	f011 0401 	ands.w	r4, r1, #1
{
   da122:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da124:	d111      	bne.n	da14a <_Z19__fetch_global_Wirev+0x36>
   da126:	4628      	mov	r0, r5
   da128:	f7f9 ffc6 	bl	d40b8 <__cxa_guard_acquire>
   da12c:	b168      	cbz	r0, da14a <_Z19__fetch_global_Wirev+0x36>
   da12e:	a801      	add	r0, sp, #4
   da130:	f7ff ffd8 	bl	da0e4 <_Z17acquireWireBufferv>
   da134:	aa01      	add	r2, sp, #4
   da136:	4621      	mov	r1, r4
   da138:	4806      	ldr	r0, [pc, #24]	; (da154 <_Z19__fetch_global_Wirev+0x40>)
   da13a:	f7fe fd65 	bl	d8c08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da13e:	4628      	mov	r0, r5
   da140:	f7f9 ffbf 	bl	d40c2 <__cxa_guard_release>
   da144:	4804      	ldr	r0, [pc, #16]	; (da158 <_Z19__fetch_global_Wirev+0x44>)
   da146:	f000 fed5 	bl	daef4 <atexit>
	return wire;
}
   da14a:	4802      	ldr	r0, [pc, #8]	; (da154 <_Z19__fetch_global_Wirev+0x40>)
   da14c:	b007      	add	sp, #28
   da14e:	bd30      	pop	{r4, r5, pc}
   da150:	2003e73c 	.word	0x2003e73c
   da154:	2003e740 	.word	0x2003e740
   da158:	000da0e3 	.word	0x000da0e3

000da15c <_ZdlPvj>:
   da15c:	f7f9 bf9f 	b.w	d409e <_ZdlPv>

000da160 <_ZnajRKSt9nothrow_t>:
   da160:	f7f9 bf9b 	b.w	d409a <_Znaj>

000da164 <_ZSt25__throw_bad_function_callv>:
   da164:	b508      	push	{r3, lr}
   da166:	f7fe f8b1 	bl	d82cc <abort>
	...

000da16c <__aeabi_drsub>:
   da16c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da170:	e002      	b.n	da178 <__adddf3>
   da172:	bf00      	nop

000da174 <__aeabi_dsub>:
   da174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da178 <__adddf3>:
   da178:	b530      	push	{r4, r5, lr}
   da17a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da17e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da182:	ea94 0f05 	teq	r4, r5
   da186:	bf08      	it	eq
   da188:	ea90 0f02 	teqeq	r0, r2
   da18c:	bf1f      	itttt	ne
   da18e:	ea54 0c00 	orrsne.w	ip, r4, r0
   da192:	ea55 0c02 	orrsne.w	ip, r5, r2
   da196:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da19a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da19e:	f000 80e2 	beq.w	da366 <__adddf3+0x1ee>
   da1a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da1a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da1aa:	bfb8      	it	lt
   da1ac:	426d      	neglt	r5, r5
   da1ae:	dd0c      	ble.n	da1ca <__adddf3+0x52>
   da1b0:	442c      	add	r4, r5
   da1b2:	ea80 0202 	eor.w	r2, r0, r2
   da1b6:	ea81 0303 	eor.w	r3, r1, r3
   da1ba:	ea82 0000 	eor.w	r0, r2, r0
   da1be:	ea83 0101 	eor.w	r1, r3, r1
   da1c2:	ea80 0202 	eor.w	r2, r0, r2
   da1c6:	ea81 0303 	eor.w	r3, r1, r3
   da1ca:	2d36      	cmp	r5, #54	; 0x36
   da1cc:	bf88      	it	hi
   da1ce:	bd30      	pophi	{r4, r5, pc}
   da1d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da1d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da1d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da1dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da1e0:	d002      	beq.n	da1e8 <__adddf3+0x70>
   da1e2:	4240      	negs	r0, r0
   da1e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da1e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da1ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da1f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da1f4:	d002      	beq.n	da1fc <__adddf3+0x84>
   da1f6:	4252      	negs	r2, r2
   da1f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da1fc:	ea94 0f05 	teq	r4, r5
   da200:	f000 80a7 	beq.w	da352 <__adddf3+0x1da>
   da204:	f1a4 0401 	sub.w	r4, r4, #1
   da208:	f1d5 0e20 	rsbs	lr, r5, #32
   da20c:	db0d      	blt.n	da22a <__adddf3+0xb2>
   da20e:	fa02 fc0e 	lsl.w	ip, r2, lr
   da212:	fa22 f205 	lsr.w	r2, r2, r5
   da216:	1880      	adds	r0, r0, r2
   da218:	f141 0100 	adc.w	r1, r1, #0
   da21c:	fa03 f20e 	lsl.w	r2, r3, lr
   da220:	1880      	adds	r0, r0, r2
   da222:	fa43 f305 	asr.w	r3, r3, r5
   da226:	4159      	adcs	r1, r3
   da228:	e00e      	b.n	da248 <__adddf3+0xd0>
   da22a:	f1a5 0520 	sub.w	r5, r5, #32
   da22e:	f10e 0e20 	add.w	lr, lr, #32
   da232:	2a01      	cmp	r2, #1
   da234:	fa03 fc0e 	lsl.w	ip, r3, lr
   da238:	bf28      	it	cs
   da23a:	f04c 0c02 	orrcs.w	ip, ip, #2
   da23e:	fa43 f305 	asr.w	r3, r3, r5
   da242:	18c0      	adds	r0, r0, r3
   da244:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da24c:	d507      	bpl.n	da25e <__adddf3+0xe6>
   da24e:	f04f 0e00 	mov.w	lr, #0
   da252:	f1dc 0c00 	rsbs	ip, ip, #0
   da256:	eb7e 0000 	sbcs.w	r0, lr, r0
   da25a:	eb6e 0101 	sbc.w	r1, lr, r1
   da25e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da262:	d31b      	bcc.n	da29c <__adddf3+0x124>
   da264:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da268:	d30c      	bcc.n	da284 <__adddf3+0x10c>
   da26a:	0849      	lsrs	r1, r1, #1
   da26c:	ea5f 0030 	movs.w	r0, r0, rrx
   da270:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da274:	f104 0401 	add.w	r4, r4, #1
   da278:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da27c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da280:	f080 809a 	bcs.w	da3b8 <__adddf3+0x240>
   da284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da288:	bf08      	it	eq
   da28a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da28e:	f150 0000 	adcs.w	r0, r0, #0
   da292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da296:	ea41 0105 	orr.w	r1, r1, r5
   da29a:	bd30      	pop	{r4, r5, pc}
   da29c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da2a0:	4140      	adcs	r0, r0
   da2a2:	eb41 0101 	adc.w	r1, r1, r1
   da2a6:	3c01      	subs	r4, #1
   da2a8:	bf28      	it	cs
   da2aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da2ae:	d2e9      	bcs.n	da284 <__adddf3+0x10c>
   da2b0:	f091 0f00 	teq	r1, #0
   da2b4:	bf04      	itt	eq
   da2b6:	4601      	moveq	r1, r0
   da2b8:	2000      	moveq	r0, #0
   da2ba:	fab1 f381 	clz	r3, r1
   da2be:	bf08      	it	eq
   da2c0:	3320      	addeq	r3, #32
   da2c2:	f1a3 030b 	sub.w	r3, r3, #11
   da2c6:	f1b3 0220 	subs.w	r2, r3, #32
   da2ca:	da0c      	bge.n	da2e6 <__adddf3+0x16e>
   da2cc:	320c      	adds	r2, #12
   da2ce:	dd08      	ble.n	da2e2 <__adddf3+0x16a>
   da2d0:	f102 0c14 	add.w	ip, r2, #20
   da2d4:	f1c2 020c 	rsb	r2, r2, #12
   da2d8:	fa01 f00c 	lsl.w	r0, r1, ip
   da2dc:	fa21 f102 	lsr.w	r1, r1, r2
   da2e0:	e00c      	b.n	da2fc <__adddf3+0x184>
   da2e2:	f102 0214 	add.w	r2, r2, #20
   da2e6:	bfd8      	it	le
   da2e8:	f1c2 0c20 	rsble	ip, r2, #32
   da2ec:	fa01 f102 	lsl.w	r1, r1, r2
   da2f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   da2f4:	bfdc      	itt	le
   da2f6:	ea41 010c 	orrle.w	r1, r1, ip
   da2fa:	4090      	lslle	r0, r2
   da2fc:	1ae4      	subs	r4, r4, r3
   da2fe:	bfa2      	ittt	ge
   da300:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da304:	4329      	orrge	r1, r5
   da306:	bd30      	popge	{r4, r5, pc}
   da308:	ea6f 0404 	mvn.w	r4, r4
   da30c:	3c1f      	subs	r4, #31
   da30e:	da1c      	bge.n	da34a <__adddf3+0x1d2>
   da310:	340c      	adds	r4, #12
   da312:	dc0e      	bgt.n	da332 <__adddf3+0x1ba>
   da314:	f104 0414 	add.w	r4, r4, #20
   da318:	f1c4 0220 	rsb	r2, r4, #32
   da31c:	fa20 f004 	lsr.w	r0, r0, r4
   da320:	fa01 f302 	lsl.w	r3, r1, r2
   da324:	ea40 0003 	orr.w	r0, r0, r3
   da328:	fa21 f304 	lsr.w	r3, r1, r4
   da32c:	ea45 0103 	orr.w	r1, r5, r3
   da330:	bd30      	pop	{r4, r5, pc}
   da332:	f1c4 040c 	rsb	r4, r4, #12
   da336:	f1c4 0220 	rsb	r2, r4, #32
   da33a:	fa20 f002 	lsr.w	r0, r0, r2
   da33e:	fa01 f304 	lsl.w	r3, r1, r4
   da342:	ea40 0003 	orr.w	r0, r0, r3
   da346:	4629      	mov	r1, r5
   da348:	bd30      	pop	{r4, r5, pc}
   da34a:	fa21 f004 	lsr.w	r0, r1, r4
   da34e:	4629      	mov	r1, r5
   da350:	bd30      	pop	{r4, r5, pc}
   da352:	f094 0f00 	teq	r4, #0
   da356:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da35a:	bf06      	itte	eq
   da35c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da360:	3401      	addeq	r4, #1
   da362:	3d01      	subne	r5, #1
   da364:	e74e      	b.n	da204 <__adddf3+0x8c>
   da366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da36a:	bf18      	it	ne
   da36c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da370:	d029      	beq.n	da3c6 <__adddf3+0x24e>
   da372:	ea94 0f05 	teq	r4, r5
   da376:	bf08      	it	eq
   da378:	ea90 0f02 	teqeq	r0, r2
   da37c:	d005      	beq.n	da38a <__adddf3+0x212>
   da37e:	ea54 0c00 	orrs.w	ip, r4, r0
   da382:	bf04      	itt	eq
   da384:	4619      	moveq	r1, r3
   da386:	4610      	moveq	r0, r2
   da388:	bd30      	pop	{r4, r5, pc}
   da38a:	ea91 0f03 	teq	r1, r3
   da38e:	bf1e      	ittt	ne
   da390:	2100      	movne	r1, #0
   da392:	2000      	movne	r0, #0
   da394:	bd30      	popne	{r4, r5, pc}
   da396:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da39a:	d105      	bne.n	da3a8 <__adddf3+0x230>
   da39c:	0040      	lsls	r0, r0, #1
   da39e:	4149      	adcs	r1, r1
   da3a0:	bf28      	it	cs
   da3a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da3a6:	bd30      	pop	{r4, r5, pc}
   da3a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da3ac:	bf3c      	itt	cc
   da3ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da3b2:	bd30      	popcc	{r4, r5, pc}
   da3b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da3b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da3bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da3c0:	f04f 0000 	mov.w	r0, #0
   da3c4:	bd30      	pop	{r4, r5, pc}
   da3c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da3ca:	bf1a      	itte	ne
   da3cc:	4619      	movne	r1, r3
   da3ce:	4610      	movne	r0, r2
   da3d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da3d4:	bf1c      	itt	ne
   da3d6:	460b      	movne	r3, r1
   da3d8:	4602      	movne	r2, r0
   da3da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da3de:	bf06      	itte	eq
   da3e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da3e4:	ea91 0f03 	teqeq	r1, r3
   da3e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da3ec:	bd30      	pop	{r4, r5, pc}
   da3ee:	bf00      	nop

000da3f0 <__aeabi_ui2d>:
   da3f0:	f090 0f00 	teq	r0, #0
   da3f4:	bf04      	itt	eq
   da3f6:	2100      	moveq	r1, #0
   da3f8:	4770      	bxeq	lr
   da3fa:	b530      	push	{r4, r5, lr}
   da3fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da400:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da404:	f04f 0500 	mov.w	r5, #0
   da408:	f04f 0100 	mov.w	r1, #0
   da40c:	e750      	b.n	da2b0 <__adddf3+0x138>
   da40e:	bf00      	nop

000da410 <__aeabi_i2d>:
   da410:	f090 0f00 	teq	r0, #0
   da414:	bf04      	itt	eq
   da416:	2100      	moveq	r1, #0
   da418:	4770      	bxeq	lr
   da41a:	b530      	push	{r4, r5, lr}
   da41c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da420:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da424:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da428:	bf48      	it	mi
   da42a:	4240      	negmi	r0, r0
   da42c:	f04f 0100 	mov.w	r1, #0
   da430:	e73e      	b.n	da2b0 <__adddf3+0x138>
   da432:	bf00      	nop

000da434 <__aeabi_f2d>:
   da434:	0042      	lsls	r2, r0, #1
   da436:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da43a:	ea4f 0131 	mov.w	r1, r1, rrx
   da43e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da442:	bf1f      	itttt	ne
   da444:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da44c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da450:	4770      	bxne	lr
   da452:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da456:	bf08      	it	eq
   da458:	4770      	bxeq	lr
   da45a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da45e:	bf04      	itt	eq
   da460:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da464:	4770      	bxeq	lr
   da466:	b530      	push	{r4, r5, lr}
   da468:	f44f 7460 	mov.w	r4, #896	; 0x380
   da46c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da474:	e71c      	b.n	da2b0 <__adddf3+0x138>
   da476:	bf00      	nop

000da478 <__aeabi_ul2d>:
   da478:	ea50 0201 	orrs.w	r2, r0, r1
   da47c:	bf08      	it	eq
   da47e:	4770      	bxeq	lr
   da480:	b530      	push	{r4, r5, lr}
   da482:	f04f 0500 	mov.w	r5, #0
   da486:	e00a      	b.n	da49e <__aeabi_l2d+0x16>

000da488 <__aeabi_l2d>:
   da488:	ea50 0201 	orrs.w	r2, r0, r1
   da48c:	bf08      	it	eq
   da48e:	4770      	bxeq	lr
   da490:	b530      	push	{r4, r5, lr}
   da492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da496:	d502      	bpl.n	da49e <__aeabi_l2d+0x16>
   da498:	4240      	negs	r0, r0
   da49a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da49e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da4a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da4a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da4aa:	f43f aed8 	beq.w	da25e <__adddf3+0xe6>
   da4ae:	f04f 0203 	mov.w	r2, #3
   da4b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da4b6:	bf18      	it	ne
   da4b8:	3203      	addne	r2, #3
   da4ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da4be:	bf18      	it	ne
   da4c0:	3203      	addne	r2, #3
   da4c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da4c6:	f1c2 0320 	rsb	r3, r2, #32
   da4ca:	fa00 fc03 	lsl.w	ip, r0, r3
   da4ce:	fa20 f002 	lsr.w	r0, r0, r2
   da4d2:	fa01 fe03 	lsl.w	lr, r1, r3
   da4d6:	ea40 000e 	orr.w	r0, r0, lr
   da4da:	fa21 f102 	lsr.w	r1, r1, r2
   da4de:	4414      	add	r4, r2
   da4e0:	e6bd      	b.n	da25e <__adddf3+0xe6>
   da4e2:	bf00      	nop

000da4e4 <__aeabi_dmul>:
   da4e4:	b570      	push	{r4, r5, r6, lr}
   da4e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da4ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da4ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da4f2:	bf1d      	ittte	ne
   da4f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da4f8:	ea94 0f0c 	teqne	r4, ip
   da4fc:	ea95 0f0c 	teqne	r5, ip
   da500:	f000 f8de 	bleq	da6c0 <__aeabi_dmul+0x1dc>
   da504:	442c      	add	r4, r5
   da506:	ea81 0603 	eor.w	r6, r1, r3
   da50a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da50e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da516:	bf18      	it	ne
   da518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da51c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da524:	d038      	beq.n	da598 <__aeabi_dmul+0xb4>
   da526:	fba0 ce02 	umull	ip, lr, r0, r2
   da52a:	f04f 0500 	mov.w	r5, #0
   da52e:	fbe1 e502 	umlal	lr, r5, r1, r2
   da532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da536:	fbe0 e503 	umlal	lr, r5, r0, r3
   da53a:	f04f 0600 	mov.w	r6, #0
   da53e:	fbe1 5603 	umlal	r5, r6, r1, r3
   da542:	f09c 0f00 	teq	ip, #0
   da546:	bf18      	it	ne
   da548:	f04e 0e01 	orrne.w	lr, lr, #1
   da54c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da558:	d204      	bcs.n	da564 <__aeabi_dmul+0x80>
   da55a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da55e:	416d      	adcs	r5, r5
   da560:	eb46 0606 	adc.w	r6, r6, r6
   da564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da56c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da57c:	bf88      	it	hi
   da57e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da582:	d81e      	bhi.n	da5c2 <__aeabi_dmul+0xde>
   da584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da588:	bf08      	it	eq
   da58a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da58e:	f150 0000 	adcs.w	r0, r0, #0
   da592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da596:	bd70      	pop	{r4, r5, r6, pc}
   da598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da59c:	ea46 0101 	orr.w	r1, r6, r1
   da5a0:	ea40 0002 	orr.w	r0, r0, r2
   da5a4:	ea81 0103 	eor.w	r1, r1, r3
   da5a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da5ac:	bfc2      	ittt	gt
   da5ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   da5b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da5b6:	bd70      	popgt	{r4, r5, r6, pc}
   da5b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da5bc:	f04f 0e00 	mov.w	lr, #0
   da5c0:	3c01      	subs	r4, #1
   da5c2:	f300 80ab 	bgt.w	da71c <__aeabi_dmul+0x238>
   da5c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da5ca:	bfde      	ittt	le
   da5cc:	2000      	movle	r0, #0
   da5ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da5d2:	bd70      	pople	{r4, r5, r6, pc}
   da5d4:	f1c4 0400 	rsb	r4, r4, #0
   da5d8:	3c20      	subs	r4, #32
   da5da:	da35      	bge.n	da648 <__aeabi_dmul+0x164>
   da5dc:	340c      	adds	r4, #12
   da5de:	dc1b      	bgt.n	da618 <__aeabi_dmul+0x134>
   da5e0:	f104 0414 	add.w	r4, r4, #20
   da5e4:	f1c4 0520 	rsb	r5, r4, #32
   da5e8:	fa00 f305 	lsl.w	r3, r0, r5
   da5ec:	fa20 f004 	lsr.w	r0, r0, r4
   da5f0:	fa01 f205 	lsl.w	r2, r1, r5
   da5f4:	ea40 0002 	orr.w	r0, r0, r2
   da5f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da5fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da604:	fa21 f604 	lsr.w	r6, r1, r4
   da608:	eb42 0106 	adc.w	r1, r2, r6
   da60c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da610:	bf08      	it	eq
   da612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da616:	bd70      	pop	{r4, r5, r6, pc}
   da618:	f1c4 040c 	rsb	r4, r4, #12
   da61c:	f1c4 0520 	rsb	r5, r4, #32
   da620:	fa00 f304 	lsl.w	r3, r0, r4
   da624:	fa20 f005 	lsr.w	r0, r0, r5
   da628:	fa01 f204 	lsl.w	r2, r1, r4
   da62c:	ea40 0002 	orr.w	r0, r0, r2
   da630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da638:	f141 0100 	adc.w	r1, r1, #0
   da63c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da640:	bf08      	it	eq
   da642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da646:	bd70      	pop	{r4, r5, r6, pc}
   da648:	f1c4 0520 	rsb	r5, r4, #32
   da64c:	fa00 f205 	lsl.w	r2, r0, r5
   da650:	ea4e 0e02 	orr.w	lr, lr, r2
   da654:	fa20 f304 	lsr.w	r3, r0, r4
   da658:	fa01 f205 	lsl.w	r2, r1, r5
   da65c:	ea43 0302 	orr.w	r3, r3, r2
   da660:	fa21 f004 	lsr.w	r0, r1, r4
   da664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da668:	fa21 f204 	lsr.w	r2, r1, r4
   da66c:	ea20 0002 	bic.w	r0, r0, r2
   da670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da678:	bf08      	it	eq
   da67a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da67e:	bd70      	pop	{r4, r5, r6, pc}
   da680:	f094 0f00 	teq	r4, #0
   da684:	d10f      	bne.n	da6a6 <__aeabi_dmul+0x1c2>
   da686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da68a:	0040      	lsls	r0, r0, #1
   da68c:	eb41 0101 	adc.w	r1, r1, r1
   da690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da694:	bf08      	it	eq
   da696:	3c01      	subeq	r4, #1
   da698:	d0f7      	beq.n	da68a <__aeabi_dmul+0x1a6>
   da69a:	ea41 0106 	orr.w	r1, r1, r6
   da69e:	f095 0f00 	teq	r5, #0
   da6a2:	bf18      	it	ne
   da6a4:	4770      	bxne	lr
   da6a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da6aa:	0052      	lsls	r2, r2, #1
   da6ac:	eb43 0303 	adc.w	r3, r3, r3
   da6b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da6b4:	bf08      	it	eq
   da6b6:	3d01      	subeq	r5, #1
   da6b8:	d0f7      	beq.n	da6aa <__aeabi_dmul+0x1c6>
   da6ba:	ea43 0306 	orr.w	r3, r3, r6
   da6be:	4770      	bx	lr
   da6c0:	ea94 0f0c 	teq	r4, ip
   da6c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da6c8:	bf18      	it	ne
   da6ca:	ea95 0f0c 	teqne	r5, ip
   da6ce:	d00c      	beq.n	da6ea <__aeabi_dmul+0x206>
   da6d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da6d4:	bf18      	it	ne
   da6d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da6da:	d1d1      	bne.n	da680 <__aeabi_dmul+0x19c>
   da6dc:	ea81 0103 	eor.w	r1, r1, r3
   da6e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da6e4:	f04f 0000 	mov.w	r0, #0
   da6e8:	bd70      	pop	{r4, r5, r6, pc}
   da6ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da6ee:	bf06      	itte	eq
   da6f0:	4610      	moveq	r0, r2
   da6f2:	4619      	moveq	r1, r3
   da6f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da6f8:	d019      	beq.n	da72e <__aeabi_dmul+0x24a>
   da6fa:	ea94 0f0c 	teq	r4, ip
   da6fe:	d102      	bne.n	da706 <__aeabi_dmul+0x222>
   da700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da704:	d113      	bne.n	da72e <__aeabi_dmul+0x24a>
   da706:	ea95 0f0c 	teq	r5, ip
   da70a:	d105      	bne.n	da718 <__aeabi_dmul+0x234>
   da70c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da710:	bf1c      	itt	ne
   da712:	4610      	movne	r0, r2
   da714:	4619      	movne	r1, r3
   da716:	d10a      	bne.n	da72e <__aeabi_dmul+0x24a>
   da718:	ea81 0103 	eor.w	r1, r1, r3
   da71c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da728:	f04f 0000 	mov.w	r0, #0
   da72c:	bd70      	pop	{r4, r5, r6, pc}
   da72e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da736:	bd70      	pop	{r4, r5, r6, pc}

000da738 <__aeabi_ddiv>:
   da738:	b570      	push	{r4, r5, r6, lr}
   da73a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da73e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da746:	bf1d      	ittte	ne
   da748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da74c:	ea94 0f0c 	teqne	r4, ip
   da750:	ea95 0f0c 	teqne	r5, ip
   da754:	f000 f8a7 	bleq	da8a6 <__aeabi_ddiv+0x16e>
   da758:	eba4 0405 	sub.w	r4, r4, r5
   da75c:	ea81 0e03 	eor.w	lr, r1, r3
   da760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da764:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da768:	f000 8088 	beq.w	da87c <__aeabi_ddiv+0x144>
   da76c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da77c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da788:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da78c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da790:	429d      	cmp	r5, r3
   da792:	bf08      	it	eq
   da794:	4296      	cmpeq	r6, r2
   da796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da79a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da79e:	d202      	bcs.n	da7a6 <__aeabi_ddiv+0x6e>
   da7a0:	085b      	lsrs	r3, r3, #1
   da7a2:	ea4f 0232 	mov.w	r2, r2, rrx
   da7a6:	1ab6      	subs	r6, r6, r2
   da7a8:	eb65 0503 	sbc.w	r5, r5, r3
   da7ac:	085b      	lsrs	r3, r3, #1
   da7ae:	ea4f 0232 	mov.w	r2, r2, rrx
   da7b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da7b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da7ba:	ebb6 0e02 	subs.w	lr, r6, r2
   da7be:	eb75 0e03 	sbcs.w	lr, r5, r3
   da7c2:	bf22      	ittt	cs
   da7c4:	1ab6      	subcs	r6, r6, r2
   da7c6:	4675      	movcs	r5, lr
   da7c8:	ea40 000c 	orrcs.w	r0, r0, ip
   da7cc:	085b      	lsrs	r3, r3, #1
   da7ce:	ea4f 0232 	mov.w	r2, r2, rrx
   da7d2:	ebb6 0e02 	subs.w	lr, r6, r2
   da7d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da7da:	bf22      	ittt	cs
   da7dc:	1ab6      	subcs	r6, r6, r2
   da7de:	4675      	movcs	r5, lr
   da7e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da7e4:	085b      	lsrs	r3, r3, #1
   da7e6:	ea4f 0232 	mov.w	r2, r2, rrx
   da7ea:	ebb6 0e02 	subs.w	lr, r6, r2
   da7ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   da7f2:	bf22      	ittt	cs
   da7f4:	1ab6      	subcs	r6, r6, r2
   da7f6:	4675      	movcs	r5, lr
   da7f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da7fc:	085b      	lsrs	r3, r3, #1
   da7fe:	ea4f 0232 	mov.w	r2, r2, rrx
   da802:	ebb6 0e02 	subs.w	lr, r6, r2
   da806:	eb75 0e03 	sbcs.w	lr, r5, r3
   da80a:	bf22      	ittt	cs
   da80c:	1ab6      	subcs	r6, r6, r2
   da80e:	4675      	movcs	r5, lr
   da810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da814:	ea55 0e06 	orrs.w	lr, r5, r6
   da818:	d018      	beq.n	da84c <__aeabi_ddiv+0x114>
   da81a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da81e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da822:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da82a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da82e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da836:	d1c0      	bne.n	da7ba <__aeabi_ddiv+0x82>
   da838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da83c:	d10b      	bne.n	da856 <__aeabi_ddiv+0x11e>
   da83e:	ea41 0100 	orr.w	r1, r1, r0
   da842:	f04f 0000 	mov.w	r0, #0
   da846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da84a:	e7b6      	b.n	da7ba <__aeabi_ddiv+0x82>
   da84c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da850:	bf04      	itt	eq
   da852:	4301      	orreq	r1, r0
   da854:	2000      	moveq	r0, #0
   da856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da85a:	bf88      	it	hi
   da85c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da860:	f63f aeaf 	bhi.w	da5c2 <__aeabi_dmul+0xde>
   da864:	ebb5 0c03 	subs.w	ip, r5, r3
   da868:	bf04      	itt	eq
   da86a:	ebb6 0c02 	subseq.w	ip, r6, r2
   da86e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da872:	f150 0000 	adcs.w	r0, r0, #0
   da876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da87a:	bd70      	pop	{r4, r5, r6, pc}
   da87c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da888:	bfc2      	ittt	gt
   da88a:	ebd4 050c 	rsbsgt	r5, r4, ip
   da88e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da892:	bd70      	popgt	{r4, r5, r6, pc}
   da894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da898:	f04f 0e00 	mov.w	lr, #0
   da89c:	3c01      	subs	r4, #1
   da89e:	e690      	b.n	da5c2 <__aeabi_dmul+0xde>
   da8a0:	ea45 0e06 	orr.w	lr, r5, r6
   da8a4:	e68d      	b.n	da5c2 <__aeabi_dmul+0xde>
   da8a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da8aa:	ea94 0f0c 	teq	r4, ip
   da8ae:	bf08      	it	eq
   da8b0:	ea95 0f0c 	teqeq	r5, ip
   da8b4:	f43f af3b 	beq.w	da72e <__aeabi_dmul+0x24a>
   da8b8:	ea94 0f0c 	teq	r4, ip
   da8bc:	d10a      	bne.n	da8d4 <__aeabi_ddiv+0x19c>
   da8be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da8c2:	f47f af34 	bne.w	da72e <__aeabi_dmul+0x24a>
   da8c6:	ea95 0f0c 	teq	r5, ip
   da8ca:	f47f af25 	bne.w	da718 <__aeabi_dmul+0x234>
   da8ce:	4610      	mov	r0, r2
   da8d0:	4619      	mov	r1, r3
   da8d2:	e72c      	b.n	da72e <__aeabi_dmul+0x24a>
   da8d4:	ea95 0f0c 	teq	r5, ip
   da8d8:	d106      	bne.n	da8e8 <__aeabi_ddiv+0x1b0>
   da8da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da8de:	f43f aefd 	beq.w	da6dc <__aeabi_dmul+0x1f8>
   da8e2:	4610      	mov	r0, r2
   da8e4:	4619      	mov	r1, r3
   da8e6:	e722      	b.n	da72e <__aeabi_dmul+0x24a>
   da8e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da8ec:	bf18      	it	ne
   da8ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da8f2:	f47f aec5 	bne.w	da680 <__aeabi_dmul+0x19c>
   da8f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da8fa:	f47f af0d 	bne.w	da718 <__aeabi_dmul+0x234>
   da8fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da902:	f47f aeeb 	bne.w	da6dc <__aeabi_dmul+0x1f8>
   da906:	e712      	b.n	da72e <__aeabi_dmul+0x24a>

000da908 <__gedf2>:
   da908:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da90c:	e006      	b.n	da91c <__cmpdf2+0x4>
   da90e:	bf00      	nop

000da910 <__ledf2>:
   da910:	f04f 0c01 	mov.w	ip, #1
   da914:	e002      	b.n	da91c <__cmpdf2+0x4>
   da916:	bf00      	nop

000da918 <__cmpdf2>:
   da918:	f04f 0c01 	mov.w	ip, #1
   da91c:	f84d cd04 	str.w	ip, [sp, #-4]!
   da920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da928:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da92c:	bf18      	it	ne
   da92e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da932:	d01b      	beq.n	da96c <__cmpdf2+0x54>
   da934:	b001      	add	sp, #4
   da936:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da93a:	bf0c      	ite	eq
   da93c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da940:	ea91 0f03 	teqne	r1, r3
   da944:	bf02      	ittt	eq
   da946:	ea90 0f02 	teqeq	r0, r2
   da94a:	2000      	moveq	r0, #0
   da94c:	4770      	bxeq	lr
   da94e:	f110 0f00 	cmn.w	r0, #0
   da952:	ea91 0f03 	teq	r1, r3
   da956:	bf58      	it	pl
   da958:	4299      	cmppl	r1, r3
   da95a:	bf08      	it	eq
   da95c:	4290      	cmpeq	r0, r2
   da95e:	bf2c      	ite	cs
   da960:	17d8      	asrcs	r0, r3, #31
   da962:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da966:	f040 0001 	orr.w	r0, r0, #1
   da96a:	4770      	bx	lr
   da96c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da974:	d102      	bne.n	da97c <__cmpdf2+0x64>
   da976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da97a:	d107      	bne.n	da98c <__cmpdf2+0x74>
   da97c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da984:	d1d6      	bne.n	da934 <__cmpdf2+0x1c>
   da986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da98a:	d0d3      	beq.n	da934 <__cmpdf2+0x1c>
   da98c:	f85d 0b04 	ldr.w	r0, [sp], #4
   da990:	4770      	bx	lr
   da992:	bf00      	nop

000da994 <__aeabi_cdrcmple>:
   da994:	4684      	mov	ip, r0
   da996:	4610      	mov	r0, r2
   da998:	4662      	mov	r2, ip
   da99a:	468c      	mov	ip, r1
   da99c:	4619      	mov	r1, r3
   da99e:	4663      	mov	r3, ip
   da9a0:	e000      	b.n	da9a4 <__aeabi_cdcmpeq>
   da9a2:	bf00      	nop

000da9a4 <__aeabi_cdcmpeq>:
   da9a4:	b501      	push	{r0, lr}
   da9a6:	f7ff ffb7 	bl	da918 <__cmpdf2>
   da9aa:	2800      	cmp	r0, #0
   da9ac:	bf48      	it	mi
   da9ae:	f110 0f00 	cmnmi.w	r0, #0
   da9b2:	bd01      	pop	{r0, pc}

000da9b4 <__aeabi_dcmpeq>:
   da9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9b8:	f7ff fff4 	bl	da9a4 <__aeabi_cdcmpeq>
   da9bc:	bf0c      	ite	eq
   da9be:	2001      	moveq	r0, #1
   da9c0:	2000      	movne	r0, #0
   da9c2:	f85d fb08 	ldr.w	pc, [sp], #8
   da9c6:	bf00      	nop

000da9c8 <__aeabi_dcmplt>:
   da9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9cc:	f7ff ffea 	bl	da9a4 <__aeabi_cdcmpeq>
   da9d0:	bf34      	ite	cc
   da9d2:	2001      	movcc	r0, #1
   da9d4:	2000      	movcs	r0, #0
   da9d6:	f85d fb08 	ldr.w	pc, [sp], #8
   da9da:	bf00      	nop

000da9dc <__aeabi_dcmple>:
   da9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9e0:	f7ff ffe0 	bl	da9a4 <__aeabi_cdcmpeq>
   da9e4:	bf94      	ite	ls
   da9e6:	2001      	movls	r0, #1
   da9e8:	2000      	movhi	r0, #0
   da9ea:	f85d fb08 	ldr.w	pc, [sp], #8
   da9ee:	bf00      	nop

000da9f0 <__aeabi_dcmpge>:
   da9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   da9f4:	f7ff ffce 	bl	da994 <__aeabi_cdrcmple>
   da9f8:	bf94      	ite	ls
   da9fa:	2001      	movls	r0, #1
   da9fc:	2000      	movhi	r0, #0
   da9fe:	f85d fb08 	ldr.w	pc, [sp], #8
   daa02:	bf00      	nop

000daa04 <__aeabi_dcmpgt>:
   daa04:	f84d ed08 	str.w	lr, [sp, #-8]!
   daa08:	f7ff ffc4 	bl	da994 <__aeabi_cdrcmple>
   daa0c:	bf34      	ite	cc
   daa0e:	2001      	movcc	r0, #1
   daa10:	2000      	movcs	r0, #0
   daa12:	f85d fb08 	ldr.w	pc, [sp], #8
   daa16:	bf00      	nop

000daa18 <__aeabi_dcmpun>:
   daa18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   daa1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa20:	d102      	bne.n	daa28 <__aeabi_dcmpun+0x10>
   daa22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   daa26:	d10a      	bne.n	daa3e <__aeabi_dcmpun+0x26>
   daa28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   daa2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   daa30:	d102      	bne.n	daa38 <__aeabi_dcmpun+0x20>
   daa32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   daa36:	d102      	bne.n	daa3e <__aeabi_dcmpun+0x26>
   daa38:	f04f 0000 	mov.w	r0, #0
   daa3c:	4770      	bx	lr
   daa3e:	f04f 0001 	mov.w	r0, #1
   daa42:	4770      	bx	lr

000daa44 <__aeabi_d2iz>:
   daa44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   daa48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   daa4c:	d215      	bcs.n	daa7a <__aeabi_d2iz+0x36>
   daa4e:	d511      	bpl.n	daa74 <__aeabi_d2iz+0x30>
   daa50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   daa54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   daa58:	d912      	bls.n	daa80 <__aeabi_d2iz+0x3c>
   daa5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   daa5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   daa62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   daa66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   daa6a:	fa23 f002 	lsr.w	r0, r3, r2
   daa6e:	bf18      	it	ne
   daa70:	4240      	negne	r0, r0
   daa72:	4770      	bx	lr
   daa74:	f04f 0000 	mov.w	r0, #0
   daa78:	4770      	bx	lr
   daa7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   daa7e:	d105      	bne.n	daa8c <__aeabi_d2iz+0x48>
   daa80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   daa84:	bf08      	it	eq
   daa86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   daa8a:	4770      	bx	lr
   daa8c:	f04f 0000 	mov.w	r0, #0
   daa90:	4770      	bx	lr
   daa92:	bf00      	nop

000daa94 <__aeabi_d2uiz>:
   daa94:	004a      	lsls	r2, r1, #1
   daa96:	d211      	bcs.n	daabc <__aeabi_d2uiz+0x28>
   daa98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   daa9c:	d211      	bcs.n	daac2 <__aeabi_d2uiz+0x2e>
   daa9e:	d50d      	bpl.n	daabc <__aeabi_d2uiz+0x28>
   daaa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   daaa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   daaa8:	d40e      	bmi.n	daac8 <__aeabi_d2uiz+0x34>
   daaaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   daaae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   daab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   daab6:	fa23 f002 	lsr.w	r0, r3, r2
   daaba:	4770      	bx	lr
   daabc:	f04f 0000 	mov.w	r0, #0
   daac0:	4770      	bx	lr
   daac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   daac6:	d102      	bne.n	daace <__aeabi_d2uiz+0x3a>
   daac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   daacc:	4770      	bx	lr
   daace:	f04f 0000 	mov.w	r0, #0
   daad2:	4770      	bx	lr

000daad4 <__aeabi_d2f>:
   daad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   daad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   daadc:	bf24      	itt	cs
   daade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   daae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   daae6:	d90d      	bls.n	dab04 <__aeabi_d2f+0x30>
   daae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   daaec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   daaf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   daaf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   daaf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   daafc:	bf08      	it	eq
   daafe:	f020 0001 	biceq.w	r0, r0, #1
   dab02:	4770      	bx	lr
   dab04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dab08:	d121      	bne.n	dab4e <__aeabi_d2f+0x7a>
   dab0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dab0e:	bfbc      	itt	lt
   dab10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dab14:	4770      	bxlt	lr
   dab16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dab1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dab1e:	f1c2 0218 	rsb	r2, r2, #24
   dab22:	f1c2 0c20 	rsb	ip, r2, #32
   dab26:	fa10 f30c 	lsls.w	r3, r0, ip
   dab2a:	fa20 f002 	lsr.w	r0, r0, r2
   dab2e:	bf18      	it	ne
   dab30:	f040 0001 	orrne.w	r0, r0, #1
   dab34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dab38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dab3c:	fa03 fc0c 	lsl.w	ip, r3, ip
   dab40:	ea40 000c 	orr.w	r0, r0, ip
   dab44:	fa23 f302 	lsr.w	r3, r3, r2
   dab48:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dab4c:	e7cc      	b.n	daae8 <__aeabi_d2f+0x14>
   dab4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dab52:	d107      	bne.n	dab64 <__aeabi_d2f+0x90>
   dab54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dab58:	bf1e      	ittt	ne
   dab5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dab5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dab62:	4770      	bxne	lr
   dab64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dab68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dab6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dab70:	4770      	bx	lr
   dab72:	bf00      	nop

000dab74 <__aeabi_uldivmod>:
   dab74:	b953      	cbnz	r3, dab8c <__aeabi_uldivmod+0x18>
   dab76:	b94a      	cbnz	r2, dab8c <__aeabi_uldivmod+0x18>
   dab78:	2900      	cmp	r1, #0
   dab7a:	bf08      	it	eq
   dab7c:	2800      	cmpeq	r0, #0
   dab7e:	bf1c      	itt	ne
   dab80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   dab84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   dab88:	f000 b98c 	b.w	daea4 <__aeabi_idiv0>
   dab8c:	f1ad 0c08 	sub.w	ip, sp, #8
   dab90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dab94:	f000 f824 	bl	dabe0 <__udivmoddi4>
   dab98:	f8dd e004 	ldr.w	lr, [sp, #4]
   dab9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   daba0:	b004      	add	sp, #16
   daba2:	4770      	bx	lr

000daba4 <__aeabi_d2ulz>:
   daba4:	b5d0      	push	{r4, r6, r7, lr}
   daba6:	4b0c      	ldr	r3, [pc, #48]	; (dabd8 <__aeabi_d2ulz+0x34>)
   daba8:	2200      	movs	r2, #0
   dabaa:	4606      	mov	r6, r0
   dabac:	460f      	mov	r7, r1
   dabae:	f7ff fc99 	bl	da4e4 <__aeabi_dmul>
   dabb2:	f7ff ff6f 	bl	daa94 <__aeabi_d2uiz>
   dabb6:	4604      	mov	r4, r0
   dabb8:	f7ff fc1a 	bl	da3f0 <__aeabi_ui2d>
   dabbc:	4b07      	ldr	r3, [pc, #28]	; (dabdc <__aeabi_d2ulz+0x38>)
   dabbe:	2200      	movs	r2, #0
   dabc0:	f7ff fc90 	bl	da4e4 <__aeabi_dmul>
   dabc4:	4602      	mov	r2, r0
   dabc6:	460b      	mov	r3, r1
   dabc8:	4630      	mov	r0, r6
   dabca:	4639      	mov	r1, r7
   dabcc:	f7ff fad2 	bl	da174 <__aeabi_dsub>
   dabd0:	f7ff ff60 	bl	daa94 <__aeabi_d2uiz>
   dabd4:	4621      	mov	r1, r4
   dabd6:	bdd0      	pop	{r4, r6, r7, pc}
   dabd8:	3df00000 	.word	0x3df00000
   dabdc:	41f00000 	.word	0x41f00000

000dabe0 <__udivmoddi4>:
   dabe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dabe4:	9d08      	ldr	r5, [sp, #32]
   dabe6:	4604      	mov	r4, r0
   dabe8:	468c      	mov	ip, r1
   dabea:	2b00      	cmp	r3, #0
   dabec:	f040 8083 	bne.w	dacf6 <__udivmoddi4+0x116>
   dabf0:	428a      	cmp	r2, r1
   dabf2:	4617      	mov	r7, r2
   dabf4:	d947      	bls.n	dac86 <__udivmoddi4+0xa6>
   dabf6:	fab2 f282 	clz	r2, r2
   dabfa:	b142      	cbz	r2, dac0e <__udivmoddi4+0x2e>
   dabfc:	f1c2 0020 	rsb	r0, r2, #32
   dac00:	fa24 f000 	lsr.w	r0, r4, r0
   dac04:	4091      	lsls	r1, r2
   dac06:	4097      	lsls	r7, r2
   dac08:	ea40 0c01 	orr.w	ip, r0, r1
   dac0c:	4094      	lsls	r4, r2
   dac0e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dac12:	0c23      	lsrs	r3, r4, #16
   dac14:	fbbc f6f8 	udiv	r6, ip, r8
   dac18:	fa1f fe87 	uxth.w	lr, r7
   dac1c:	fb08 c116 	mls	r1, r8, r6, ip
   dac20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dac24:	fb06 f10e 	mul.w	r1, r6, lr
   dac28:	4299      	cmp	r1, r3
   dac2a:	d909      	bls.n	dac40 <__udivmoddi4+0x60>
   dac2c:	18fb      	adds	r3, r7, r3
   dac2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   dac32:	f080 8119 	bcs.w	dae68 <__udivmoddi4+0x288>
   dac36:	4299      	cmp	r1, r3
   dac38:	f240 8116 	bls.w	dae68 <__udivmoddi4+0x288>
   dac3c:	3e02      	subs	r6, #2
   dac3e:	443b      	add	r3, r7
   dac40:	1a5b      	subs	r3, r3, r1
   dac42:	b2a4      	uxth	r4, r4
   dac44:	fbb3 f0f8 	udiv	r0, r3, r8
   dac48:	fb08 3310 	mls	r3, r8, r0, r3
   dac4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dac50:	fb00 fe0e 	mul.w	lr, r0, lr
   dac54:	45a6      	cmp	lr, r4
   dac56:	d909      	bls.n	dac6c <__udivmoddi4+0x8c>
   dac58:	193c      	adds	r4, r7, r4
   dac5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dac5e:	f080 8105 	bcs.w	dae6c <__udivmoddi4+0x28c>
   dac62:	45a6      	cmp	lr, r4
   dac64:	f240 8102 	bls.w	dae6c <__udivmoddi4+0x28c>
   dac68:	3802      	subs	r0, #2
   dac6a:	443c      	add	r4, r7
   dac6c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dac70:	eba4 040e 	sub.w	r4, r4, lr
   dac74:	2600      	movs	r6, #0
   dac76:	b11d      	cbz	r5, dac80 <__udivmoddi4+0xa0>
   dac78:	40d4      	lsrs	r4, r2
   dac7a:	2300      	movs	r3, #0
   dac7c:	e9c5 4300 	strd	r4, r3, [r5]
   dac80:	4631      	mov	r1, r6
   dac82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dac86:	b902      	cbnz	r2, dac8a <__udivmoddi4+0xaa>
   dac88:	deff      	udf	#255	; 0xff
   dac8a:	fab2 f282 	clz	r2, r2
   dac8e:	2a00      	cmp	r2, #0
   dac90:	d150      	bne.n	dad34 <__udivmoddi4+0x154>
   dac92:	1bcb      	subs	r3, r1, r7
   dac94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dac98:	fa1f f887 	uxth.w	r8, r7
   dac9c:	2601      	movs	r6, #1
   dac9e:	fbb3 fcfe 	udiv	ip, r3, lr
   daca2:	0c21      	lsrs	r1, r4, #16
   daca4:	fb0e 331c 	mls	r3, lr, ip, r3
   daca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dacac:	fb08 f30c 	mul.w	r3, r8, ip
   dacb0:	428b      	cmp	r3, r1
   dacb2:	d907      	bls.n	dacc4 <__udivmoddi4+0xe4>
   dacb4:	1879      	adds	r1, r7, r1
   dacb6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dacba:	d202      	bcs.n	dacc2 <__udivmoddi4+0xe2>
   dacbc:	428b      	cmp	r3, r1
   dacbe:	f200 80e9 	bhi.w	dae94 <__udivmoddi4+0x2b4>
   dacc2:	4684      	mov	ip, r0
   dacc4:	1ac9      	subs	r1, r1, r3
   dacc6:	b2a3      	uxth	r3, r4
   dacc8:	fbb1 f0fe 	udiv	r0, r1, lr
   daccc:	fb0e 1110 	mls	r1, lr, r0, r1
   dacd0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dacd4:	fb08 f800 	mul.w	r8, r8, r0
   dacd8:	45a0      	cmp	r8, r4
   dacda:	d907      	bls.n	dacec <__udivmoddi4+0x10c>
   dacdc:	193c      	adds	r4, r7, r4
   dacde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dace2:	d202      	bcs.n	dacea <__udivmoddi4+0x10a>
   dace4:	45a0      	cmp	r8, r4
   dace6:	f200 80d9 	bhi.w	dae9c <__udivmoddi4+0x2bc>
   dacea:	4618      	mov	r0, r3
   dacec:	eba4 0408 	sub.w	r4, r4, r8
   dacf0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dacf4:	e7bf      	b.n	dac76 <__udivmoddi4+0x96>
   dacf6:	428b      	cmp	r3, r1
   dacf8:	d909      	bls.n	dad0e <__udivmoddi4+0x12e>
   dacfa:	2d00      	cmp	r5, #0
   dacfc:	f000 80b1 	beq.w	dae62 <__udivmoddi4+0x282>
   dad00:	2600      	movs	r6, #0
   dad02:	e9c5 0100 	strd	r0, r1, [r5]
   dad06:	4630      	mov	r0, r6
   dad08:	4631      	mov	r1, r6
   dad0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dad0e:	fab3 f683 	clz	r6, r3
   dad12:	2e00      	cmp	r6, #0
   dad14:	d14a      	bne.n	dadac <__udivmoddi4+0x1cc>
   dad16:	428b      	cmp	r3, r1
   dad18:	d302      	bcc.n	dad20 <__udivmoddi4+0x140>
   dad1a:	4282      	cmp	r2, r0
   dad1c:	f200 80b8 	bhi.w	dae90 <__udivmoddi4+0x2b0>
   dad20:	1a84      	subs	r4, r0, r2
   dad22:	eb61 0103 	sbc.w	r1, r1, r3
   dad26:	2001      	movs	r0, #1
   dad28:	468c      	mov	ip, r1
   dad2a:	2d00      	cmp	r5, #0
   dad2c:	d0a8      	beq.n	dac80 <__udivmoddi4+0xa0>
   dad2e:	e9c5 4c00 	strd	r4, ip, [r5]
   dad32:	e7a5      	b.n	dac80 <__udivmoddi4+0xa0>
   dad34:	f1c2 0320 	rsb	r3, r2, #32
   dad38:	fa20 f603 	lsr.w	r6, r0, r3
   dad3c:	4097      	lsls	r7, r2
   dad3e:	fa01 f002 	lsl.w	r0, r1, r2
   dad42:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dad46:	40d9      	lsrs	r1, r3
   dad48:	4330      	orrs	r0, r6
   dad4a:	0c03      	lsrs	r3, r0, #16
   dad4c:	fbb1 f6fe 	udiv	r6, r1, lr
   dad50:	fa1f f887 	uxth.w	r8, r7
   dad54:	fb0e 1116 	mls	r1, lr, r6, r1
   dad58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dad5c:	fb06 f108 	mul.w	r1, r6, r8
   dad60:	4299      	cmp	r1, r3
   dad62:	fa04 f402 	lsl.w	r4, r4, r2
   dad66:	d909      	bls.n	dad7c <__udivmoddi4+0x19c>
   dad68:	18fb      	adds	r3, r7, r3
   dad6a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dad6e:	f080 808d 	bcs.w	dae8c <__udivmoddi4+0x2ac>
   dad72:	4299      	cmp	r1, r3
   dad74:	f240 808a 	bls.w	dae8c <__udivmoddi4+0x2ac>
   dad78:	3e02      	subs	r6, #2
   dad7a:	443b      	add	r3, r7
   dad7c:	1a5b      	subs	r3, r3, r1
   dad7e:	b281      	uxth	r1, r0
   dad80:	fbb3 f0fe 	udiv	r0, r3, lr
   dad84:	fb0e 3310 	mls	r3, lr, r0, r3
   dad88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dad8c:	fb00 f308 	mul.w	r3, r0, r8
   dad90:	428b      	cmp	r3, r1
   dad92:	d907      	bls.n	dada4 <__udivmoddi4+0x1c4>
   dad94:	1879      	adds	r1, r7, r1
   dad96:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dad9a:	d273      	bcs.n	dae84 <__udivmoddi4+0x2a4>
   dad9c:	428b      	cmp	r3, r1
   dad9e:	d971      	bls.n	dae84 <__udivmoddi4+0x2a4>
   dada0:	3802      	subs	r0, #2
   dada2:	4439      	add	r1, r7
   dada4:	1acb      	subs	r3, r1, r3
   dada6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dadaa:	e778      	b.n	dac9e <__udivmoddi4+0xbe>
   dadac:	f1c6 0c20 	rsb	ip, r6, #32
   dadb0:	fa03 f406 	lsl.w	r4, r3, r6
   dadb4:	fa22 f30c 	lsr.w	r3, r2, ip
   dadb8:	431c      	orrs	r4, r3
   dadba:	fa20 f70c 	lsr.w	r7, r0, ip
   dadbe:	fa01 f306 	lsl.w	r3, r1, r6
   dadc2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dadc6:	fa21 f10c 	lsr.w	r1, r1, ip
   dadca:	431f      	orrs	r7, r3
   dadcc:	0c3b      	lsrs	r3, r7, #16
   dadce:	fbb1 f9fe 	udiv	r9, r1, lr
   dadd2:	fa1f f884 	uxth.w	r8, r4
   dadd6:	fb0e 1119 	mls	r1, lr, r9, r1
   dadda:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dadde:	fb09 fa08 	mul.w	sl, r9, r8
   dade2:	458a      	cmp	sl, r1
   dade4:	fa02 f206 	lsl.w	r2, r2, r6
   dade8:	fa00 f306 	lsl.w	r3, r0, r6
   dadec:	d908      	bls.n	dae00 <__udivmoddi4+0x220>
   dadee:	1861      	adds	r1, r4, r1
   dadf0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dadf4:	d248      	bcs.n	dae88 <__udivmoddi4+0x2a8>
   dadf6:	458a      	cmp	sl, r1
   dadf8:	d946      	bls.n	dae88 <__udivmoddi4+0x2a8>
   dadfa:	f1a9 0902 	sub.w	r9, r9, #2
   dadfe:	4421      	add	r1, r4
   dae00:	eba1 010a 	sub.w	r1, r1, sl
   dae04:	b2bf      	uxth	r7, r7
   dae06:	fbb1 f0fe 	udiv	r0, r1, lr
   dae0a:	fb0e 1110 	mls	r1, lr, r0, r1
   dae0e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dae12:	fb00 f808 	mul.w	r8, r0, r8
   dae16:	45b8      	cmp	r8, r7
   dae18:	d907      	bls.n	dae2a <__udivmoddi4+0x24a>
   dae1a:	19e7      	adds	r7, r4, r7
   dae1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dae20:	d22e      	bcs.n	dae80 <__udivmoddi4+0x2a0>
   dae22:	45b8      	cmp	r8, r7
   dae24:	d92c      	bls.n	dae80 <__udivmoddi4+0x2a0>
   dae26:	3802      	subs	r0, #2
   dae28:	4427      	add	r7, r4
   dae2a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dae2e:	eba7 0708 	sub.w	r7, r7, r8
   dae32:	fba0 8902 	umull	r8, r9, r0, r2
   dae36:	454f      	cmp	r7, r9
   dae38:	46c6      	mov	lr, r8
   dae3a:	4649      	mov	r1, r9
   dae3c:	d31a      	bcc.n	dae74 <__udivmoddi4+0x294>
   dae3e:	d017      	beq.n	dae70 <__udivmoddi4+0x290>
   dae40:	b15d      	cbz	r5, dae5a <__udivmoddi4+0x27a>
   dae42:	ebb3 020e 	subs.w	r2, r3, lr
   dae46:	eb67 0701 	sbc.w	r7, r7, r1
   dae4a:	fa07 fc0c 	lsl.w	ip, r7, ip
   dae4e:	40f2      	lsrs	r2, r6
   dae50:	ea4c 0202 	orr.w	r2, ip, r2
   dae54:	40f7      	lsrs	r7, r6
   dae56:	e9c5 2700 	strd	r2, r7, [r5]
   dae5a:	2600      	movs	r6, #0
   dae5c:	4631      	mov	r1, r6
   dae5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dae62:	462e      	mov	r6, r5
   dae64:	4628      	mov	r0, r5
   dae66:	e70b      	b.n	dac80 <__udivmoddi4+0xa0>
   dae68:	4606      	mov	r6, r0
   dae6a:	e6e9      	b.n	dac40 <__udivmoddi4+0x60>
   dae6c:	4618      	mov	r0, r3
   dae6e:	e6fd      	b.n	dac6c <__udivmoddi4+0x8c>
   dae70:	4543      	cmp	r3, r8
   dae72:	d2e5      	bcs.n	dae40 <__udivmoddi4+0x260>
   dae74:	ebb8 0e02 	subs.w	lr, r8, r2
   dae78:	eb69 0104 	sbc.w	r1, r9, r4
   dae7c:	3801      	subs	r0, #1
   dae7e:	e7df      	b.n	dae40 <__udivmoddi4+0x260>
   dae80:	4608      	mov	r0, r1
   dae82:	e7d2      	b.n	dae2a <__udivmoddi4+0x24a>
   dae84:	4660      	mov	r0, ip
   dae86:	e78d      	b.n	dada4 <__udivmoddi4+0x1c4>
   dae88:	4681      	mov	r9, r0
   dae8a:	e7b9      	b.n	dae00 <__udivmoddi4+0x220>
   dae8c:	4666      	mov	r6, ip
   dae8e:	e775      	b.n	dad7c <__udivmoddi4+0x19c>
   dae90:	4630      	mov	r0, r6
   dae92:	e74a      	b.n	dad2a <__udivmoddi4+0x14a>
   dae94:	f1ac 0c02 	sub.w	ip, ip, #2
   dae98:	4439      	add	r1, r7
   dae9a:	e713      	b.n	dacc4 <__udivmoddi4+0xe4>
   dae9c:	3802      	subs	r0, #2
   dae9e:	443c      	add	r4, r7
   daea0:	e724      	b.n	dacec <__udivmoddi4+0x10c>
   daea2:	bf00      	nop

000daea4 <__aeabi_idiv0>:
   daea4:	4770      	bx	lr
   daea6:	bf00      	nop

000daea8 <asctime_r>:
   daea8:	b510      	push	{r4, lr}
   daeaa:	460c      	mov	r4, r1
   daeac:	6941      	ldr	r1, [r0, #20]
   daeae:	6903      	ldr	r3, [r0, #16]
   daeb0:	6982      	ldr	r2, [r0, #24]
   daeb2:	b086      	sub	sp, #24
   daeb4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   daeb8:	9104      	str	r1, [sp, #16]
   daeba:	6801      	ldr	r1, [r0, #0]
   daebc:	9103      	str	r1, [sp, #12]
   daebe:	6841      	ldr	r1, [r0, #4]
   daec0:	9102      	str	r1, [sp, #8]
   daec2:	6881      	ldr	r1, [r0, #8]
   daec4:	9101      	str	r1, [sp, #4]
   daec6:	68c1      	ldr	r1, [r0, #12]
   daec8:	9100      	str	r1, [sp, #0]
   daeca:	4907      	ldr	r1, [pc, #28]	; (daee8 <asctime_r+0x40>)
   daecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   daed0:	440b      	add	r3, r1
   daed2:	4906      	ldr	r1, [pc, #24]	; (daeec <asctime_r+0x44>)
   daed4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   daed8:	440a      	add	r2, r1
   daeda:	4620      	mov	r0, r4
   daedc:	4904      	ldr	r1, [pc, #16]	; (daef0 <asctime_r+0x48>)
   daede:	f7fd f9dd 	bl	d829c <siprintf>
   daee2:	4620      	mov	r0, r4
   daee4:	b006      	add	sp, #24
   daee6:	bd10      	pop	{r4, pc}
   daee8:	000ddf86 	.word	0x000ddf86
   daeec:	000ddf71 	.word	0x000ddf71
   daef0:	000ddf51 	.word	0x000ddf51

000daef4 <atexit>:
   daef4:	2300      	movs	r3, #0
   daef6:	4601      	mov	r1, r0
   daef8:	461a      	mov	r2, r3
   daefa:	4618      	mov	r0, r3
   daefc:	f000 bf7a 	b.w	dbdf4 <__register_exitproc>

000daf00 <atof>:
   daf00:	2100      	movs	r1, #0
   daf02:	f000 bee7 	b.w	dbcd4 <strtod>

000daf06 <atol>:
   daf06:	220a      	movs	r2, #10
   daf08:	2100      	movs	r1, #0
   daf0a:	f000 bf69 	b.w	dbde0 <strtol>

000daf0e <memcmp>:
   daf0e:	b530      	push	{r4, r5, lr}
   daf10:	3901      	subs	r1, #1
   daf12:	2400      	movs	r4, #0
   daf14:	42a2      	cmp	r2, r4
   daf16:	d101      	bne.n	daf1c <memcmp+0xe>
   daf18:	2000      	movs	r0, #0
   daf1a:	e005      	b.n	daf28 <memcmp+0x1a>
   daf1c:	5d03      	ldrb	r3, [r0, r4]
   daf1e:	3401      	adds	r4, #1
   daf20:	5d0d      	ldrb	r5, [r1, r4]
   daf22:	42ab      	cmp	r3, r5
   daf24:	d0f6      	beq.n	daf14 <memcmp+0x6>
   daf26:	1b58      	subs	r0, r3, r5
   daf28:	bd30      	pop	{r4, r5, pc}

000daf2a <memcpy>:
   daf2a:	440a      	add	r2, r1
   daf2c:	4291      	cmp	r1, r2
   daf2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   daf32:	d100      	bne.n	daf36 <memcpy+0xc>
   daf34:	4770      	bx	lr
   daf36:	b510      	push	{r4, lr}
   daf38:	f811 4b01 	ldrb.w	r4, [r1], #1
   daf3c:	f803 4f01 	strb.w	r4, [r3, #1]!
   daf40:	4291      	cmp	r1, r2
   daf42:	d1f9      	bne.n	daf38 <memcpy+0xe>
   daf44:	bd10      	pop	{r4, pc}

000daf46 <memset>:
   daf46:	4402      	add	r2, r0
   daf48:	4603      	mov	r3, r0
   daf4a:	4293      	cmp	r3, r2
   daf4c:	d100      	bne.n	daf50 <memset+0xa>
   daf4e:	4770      	bx	lr
   daf50:	f803 1b01 	strb.w	r1, [r3], #1
   daf54:	e7f9      	b.n	daf4a <memset+0x4>
	...

000daf58 <srand>:
   daf58:	b538      	push	{r3, r4, r5, lr}
   daf5a:	4b0d      	ldr	r3, [pc, #52]	; (daf90 <srand+0x38>)
   daf5c:	681d      	ldr	r5, [r3, #0]
   daf5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   daf60:	4604      	mov	r4, r0
   daf62:	b97b      	cbnz	r3, daf84 <srand+0x2c>
   daf64:	2018      	movs	r0, #24
   daf66:	f7fd f981 	bl	d826c <malloc>
   daf6a:	4a0a      	ldr	r2, [pc, #40]	; (daf94 <srand+0x3c>)
   daf6c:	4b0a      	ldr	r3, [pc, #40]	; (daf98 <srand+0x40>)
   daf6e:	63a8      	str	r0, [r5, #56]	; 0x38
   daf70:	e9c0 2300 	strd	r2, r3, [r0]
   daf74:	4b09      	ldr	r3, [pc, #36]	; (daf9c <srand+0x44>)
   daf76:	6083      	str	r3, [r0, #8]
   daf78:	230b      	movs	r3, #11
   daf7a:	8183      	strh	r3, [r0, #12]
   daf7c:	2201      	movs	r2, #1
   daf7e:	2300      	movs	r3, #0
   daf80:	e9c0 2304 	strd	r2, r3, [r0, #16]
   daf84:	6bab      	ldr	r3, [r5, #56]	; 0x38
   daf86:	2200      	movs	r2, #0
   daf88:	611c      	str	r4, [r3, #16]
   daf8a:	615a      	str	r2, [r3, #20]
   daf8c:	bd38      	pop	{r3, r4, r5, pc}
   daf8e:	bf00      	nop
   daf90:	2003dce8 	.word	0x2003dce8
   daf94:	abcd330e 	.word	0xabcd330e
   daf98:	e66d1234 	.word	0xe66d1234
   daf9c:	0005deec 	.word	0x0005deec

000dafa0 <strcmp>:
   dafa0:	f810 2b01 	ldrb.w	r2, [r0], #1
   dafa4:	f811 3b01 	ldrb.w	r3, [r1], #1
   dafa8:	2a01      	cmp	r2, #1
   dafaa:	bf28      	it	cs
   dafac:	429a      	cmpcs	r2, r3
   dafae:	d0f7      	beq.n	dafa0 <strcmp>
   dafb0:	1ad0      	subs	r0, r2, r3
   dafb2:	4770      	bx	lr

000dafb4 <strcpy>:
   dafb4:	4603      	mov	r3, r0
   dafb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   dafba:	f803 2b01 	strb.w	r2, [r3], #1
   dafbe:	2a00      	cmp	r2, #0
   dafc0:	d1f9      	bne.n	dafb6 <strcpy+0x2>
   dafc2:	4770      	bx	lr

000dafc4 <strdup>:
   dafc4:	4b02      	ldr	r3, [pc, #8]	; (dafd0 <strdup+0xc>)
   dafc6:	4601      	mov	r1, r0
   dafc8:	6818      	ldr	r0, [r3, #0]
   dafca:	f000 b803 	b.w	dafd4 <_strdup_r>
   dafce:	bf00      	nop
   dafd0:	2003dce8 	.word	0x2003dce8

000dafd4 <_strdup_r>:
   dafd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dafd6:	4604      	mov	r4, r0
   dafd8:	4608      	mov	r0, r1
   dafda:	460d      	mov	r5, r1
   dafdc:	f000 f80f 	bl	daffe <strlen>
   dafe0:	1c42      	adds	r2, r0, #1
   dafe2:	4611      	mov	r1, r2
   dafe4:	4620      	mov	r0, r4
   dafe6:	9201      	str	r2, [sp, #4]
   dafe8:	f7fd f978 	bl	d82dc <_malloc_r>
   dafec:	4604      	mov	r4, r0
   dafee:	b118      	cbz	r0, daff8 <_strdup_r+0x24>
   daff0:	9a01      	ldr	r2, [sp, #4]
   daff2:	4629      	mov	r1, r5
   daff4:	f7ff ff99 	bl	daf2a <memcpy>
   daff8:	4620      	mov	r0, r4
   daffa:	b003      	add	sp, #12
   daffc:	bd30      	pop	{r4, r5, pc}

000daffe <strlen>:
   daffe:	4603      	mov	r3, r0
   db000:	f813 2b01 	ldrb.w	r2, [r3], #1
   db004:	2a00      	cmp	r2, #0
   db006:	d1fb      	bne.n	db000 <strlen+0x2>
   db008:	1a18      	subs	r0, r3, r0
   db00a:	3801      	subs	r0, #1
   db00c:	4770      	bx	lr

000db00e <strncmp>:
   db00e:	b510      	push	{r4, lr}
   db010:	b16a      	cbz	r2, db02e <strncmp+0x20>
   db012:	3901      	subs	r1, #1
   db014:	1884      	adds	r4, r0, r2
   db016:	f810 3b01 	ldrb.w	r3, [r0], #1
   db01a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db01e:	4293      	cmp	r3, r2
   db020:	d103      	bne.n	db02a <strncmp+0x1c>
   db022:	42a0      	cmp	r0, r4
   db024:	d001      	beq.n	db02a <strncmp+0x1c>
   db026:	2b00      	cmp	r3, #0
   db028:	d1f5      	bne.n	db016 <strncmp+0x8>
   db02a:	1a98      	subs	r0, r3, r2
   db02c:	bd10      	pop	{r4, pc}
   db02e:	4610      	mov	r0, r2
   db030:	e7fc      	b.n	db02c <strncmp+0x1e>

000db032 <strncpy>:
   db032:	b510      	push	{r4, lr}
   db034:	3901      	subs	r1, #1
   db036:	4603      	mov	r3, r0
   db038:	b132      	cbz	r2, db048 <strncpy+0x16>
   db03a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db03e:	f803 4b01 	strb.w	r4, [r3], #1
   db042:	3a01      	subs	r2, #1
   db044:	2c00      	cmp	r4, #0
   db046:	d1f7      	bne.n	db038 <strncpy+0x6>
   db048:	441a      	add	r2, r3
   db04a:	2100      	movs	r1, #0
   db04c:	4293      	cmp	r3, r2
   db04e:	d100      	bne.n	db052 <strncpy+0x20>
   db050:	bd10      	pop	{r4, pc}
   db052:	f803 1b01 	strb.w	r1, [r3], #1
   db056:	e7f9      	b.n	db04c <strncpy+0x1a>

000db058 <strstr>:
   db058:	b5f0      	push	{r4, r5, r6, r7, lr}
   db05a:	780c      	ldrb	r4, [r1, #0]
   db05c:	b164      	cbz	r4, db078 <strstr+0x20>
   db05e:	4603      	mov	r3, r0
   db060:	781a      	ldrb	r2, [r3, #0]
   db062:	4618      	mov	r0, r3
   db064:	1c5e      	adds	r6, r3, #1
   db066:	b90a      	cbnz	r2, db06c <strstr+0x14>
   db068:	4610      	mov	r0, r2
   db06a:	e005      	b.n	db078 <strstr+0x20>
   db06c:	4294      	cmp	r4, r2
   db06e:	d108      	bne.n	db082 <strstr+0x2a>
   db070:	460d      	mov	r5, r1
   db072:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   db076:	b902      	cbnz	r2, db07a <strstr+0x22>
   db078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db07a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   db07e:	4297      	cmp	r7, r2
   db080:	d0f7      	beq.n	db072 <strstr+0x1a>
   db082:	4633      	mov	r3, r6
   db084:	e7ec      	b.n	db060 <strstr+0x8>

000db086 <sulp>:
   db086:	b570      	push	{r4, r5, r6, lr}
   db088:	4604      	mov	r4, r0
   db08a:	460d      	mov	r5, r1
   db08c:	ec45 4b10 	vmov	d0, r4, r5
   db090:	4616      	mov	r6, r2
   db092:	f001 fd81 	bl	dcb98 <__ulp>
   db096:	ec51 0b10 	vmov	r0, r1, d0
   db09a:	b17e      	cbz	r6, db0bc <sulp+0x36>
   db09c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   db0a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db0a4:	2b00      	cmp	r3, #0
   db0a6:	dd09      	ble.n	db0bc <sulp+0x36>
   db0a8:	051b      	lsls	r3, r3, #20
   db0aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   db0ae:	2400      	movs	r4, #0
   db0b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   db0b4:	4622      	mov	r2, r4
   db0b6:	462b      	mov	r3, r5
   db0b8:	f7ff fa14 	bl	da4e4 <__aeabi_dmul>
   db0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000db0c0 <_strtod_l>:
   db0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db0c4:	b0a3      	sub	sp, #140	; 0x8c
   db0c6:	461f      	mov	r7, r3
   db0c8:	2300      	movs	r3, #0
   db0ca:	931e      	str	r3, [sp, #120]	; 0x78
   db0cc:	4ba4      	ldr	r3, [pc, #656]	; (db360 <_strtod_l+0x2a0>)
   db0ce:	9219      	str	r2, [sp, #100]	; 0x64
   db0d0:	681b      	ldr	r3, [r3, #0]
   db0d2:	9307      	str	r3, [sp, #28]
   db0d4:	4604      	mov	r4, r0
   db0d6:	4618      	mov	r0, r3
   db0d8:	4688      	mov	r8, r1
   db0da:	f7ff ff90 	bl	daffe <strlen>
   db0de:	f04f 0a00 	mov.w	sl, #0
   db0e2:	4605      	mov	r5, r0
   db0e4:	f04f 0b00 	mov.w	fp, #0
   db0e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db0ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db0ee:	781a      	ldrb	r2, [r3, #0]
   db0f0:	2a2b      	cmp	r2, #43	; 0x2b
   db0f2:	d04c      	beq.n	db18e <_strtod_l+0xce>
   db0f4:	d839      	bhi.n	db16a <_strtod_l+0xaa>
   db0f6:	2a0d      	cmp	r2, #13
   db0f8:	d832      	bhi.n	db160 <_strtod_l+0xa0>
   db0fa:	2a08      	cmp	r2, #8
   db0fc:	d832      	bhi.n	db164 <_strtod_l+0xa4>
   db0fe:	2a00      	cmp	r2, #0
   db100:	d03c      	beq.n	db17c <_strtod_l+0xbc>
   db102:	2300      	movs	r3, #0
   db104:	930e      	str	r3, [sp, #56]	; 0x38
   db106:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   db108:	7833      	ldrb	r3, [r6, #0]
   db10a:	2b30      	cmp	r3, #48	; 0x30
   db10c:	f040 80b4 	bne.w	db278 <_strtod_l+0x1b8>
   db110:	7873      	ldrb	r3, [r6, #1]
   db112:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db116:	2b58      	cmp	r3, #88	; 0x58
   db118:	d16c      	bne.n	db1f4 <_strtod_l+0x134>
   db11a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db11c:	9301      	str	r3, [sp, #4]
   db11e:	ab1e      	add	r3, sp, #120	; 0x78
   db120:	9702      	str	r7, [sp, #8]
   db122:	9300      	str	r3, [sp, #0]
   db124:	4a8f      	ldr	r2, [pc, #572]	; (db364 <_strtod_l+0x2a4>)
   db126:	ab1f      	add	r3, sp, #124	; 0x7c
   db128:	a91d      	add	r1, sp, #116	; 0x74
   db12a:	4620      	mov	r0, r4
   db12c:	f000 ff2c 	bl	dbf88 <__gethex>
   db130:	f010 0707 	ands.w	r7, r0, #7
   db134:	4605      	mov	r5, r0
   db136:	d005      	beq.n	db144 <_strtod_l+0x84>
   db138:	2f06      	cmp	r7, #6
   db13a:	d12a      	bne.n	db192 <_strtod_l+0xd2>
   db13c:	3601      	adds	r6, #1
   db13e:	2300      	movs	r3, #0
   db140:	961d      	str	r6, [sp, #116]	; 0x74
   db142:	930e      	str	r3, [sp, #56]	; 0x38
   db144:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db146:	2b00      	cmp	r3, #0
   db148:	f040 8596 	bne.w	dbc78 <_strtod_l+0xbb8>
   db14c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   db14e:	b1db      	cbz	r3, db188 <_strtod_l+0xc8>
   db150:	4652      	mov	r2, sl
   db152:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   db156:	ec43 2b10 	vmov	d0, r2, r3
   db15a:	b023      	add	sp, #140	; 0x8c
   db15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db160:	2a20      	cmp	r2, #32
   db162:	d1ce      	bne.n	db102 <_strtod_l+0x42>
   db164:	3301      	adds	r3, #1
   db166:	931d      	str	r3, [sp, #116]	; 0x74
   db168:	e7c0      	b.n	db0ec <_strtod_l+0x2c>
   db16a:	2a2d      	cmp	r2, #45	; 0x2d
   db16c:	d1c9      	bne.n	db102 <_strtod_l+0x42>
   db16e:	2201      	movs	r2, #1
   db170:	920e      	str	r2, [sp, #56]	; 0x38
   db172:	1c5a      	adds	r2, r3, #1
   db174:	921d      	str	r2, [sp, #116]	; 0x74
   db176:	785b      	ldrb	r3, [r3, #1]
   db178:	2b00      	cmp	r3, #0
   db17a:	d1c4      	bne.n	db106 <_strtod_l+0x46>
   db17c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   db17e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db182:	2b00      	cmp	r3, #0
   db184:	f040 8576 	bne.w	dbc74 <_strtod_l+0xbb4>
   db188:	4652      	mov	r2, sl
   db18a:	465b      	mov	r3, fp
   db18c:	e7e3      	b.n	db156 <_strtod_l+0x96>
   db18e:	2200      	movs	r2, #0
   db190:	e7ee      	b.n	db170 <_strtod_l+0xb0>
   db192:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db194:	b13a      	cbz	r2, db1a6 <_strtod_l+0xe6>
   db196:	2135      	movs	r1, #53	; 0x35
   db198:	a820      	add	r0, sp, #128	; 0x80
   db19a:	f001 fdfc 	bl	dcd96 <__copybits>
   db19e:	991e      	ldr	r1, [sp, #120]	; 0x78
   db1a0:	4620      	mov	r0, r4
   db1a2:	f001 fa30 	bl	dc606 <_Bfree>
   db1a6:	3f01      	subs	r7, #1
   db1a8:	2f05      	cmp	r7, #5
   db1aa:	d807      	bhi.n	db1bc <_strtod_l+0xfc>
   db1ac:	e8df f007 	tbb	[pc, r7]
   db1b0:	1d180b0e 	.word	0x1d180b0e
   db1b4:	030e      	.short	0x030e
   db1b6:	f04f 0b00 	mov.w	fp, #0
   db1ba:	46da      	mov	sl, fp
   db1bc:	0728      	lsls	r0, r5, #28
   db1be:	d5c1      	bpl.n	db144 <_strtod_l+0x84>
   db1c0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   db1c4:	e7be      	b.n	db144 <_strtod_l+0x84>
   db1c6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   db1ca:	e7f7      	b.n	db1bc <_strtod_l+0xfc>
   db1cc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   db1d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   db1d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   db1d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   db1da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   db1de:	e7ed      	b.n	db1bc <_strtod_l+0xfc>
   db1e0:	f8df b184 	ldr.w	fp, [pc, #388]	; db368 <_strtod_l+0x2a8>
   db1e4:	f04f 0a00 	mov.w	sl, #0
   db1e8:	e7e8      	b.n	db1bc <_strtod_l+0xfc>
   db1ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   db1ee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db1f2:	e7e3      	b.n	db1bc <_strtod_l+0xfc>
   db1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db1f6:	1c5a      	adds	r2, r3, #1
   db1f8:	921d      	str	r2, [sp, #116]	; 0x74
   db1fa:	785b      	ldrb	r3, [r3, #1]
   db1fc:	2b30      	cmp	r3, #48	; 0x30
   db1fe:	d0f9      	beq.n	db1f4 <_strtod_l+0x134>
   db200:	2b00      	cmp	r3, #0
   db202:	d09f      	beq.n	db144 <_strtod_l+0x84>
   db204:	2301      	movs	r3, #1
   db206:	f04f 0900 	mov.w	r9, #0
   db20a:	9304      	str	r3, [sp, #16]
   db20c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db20e:	930a      	str	r3, [sp, #40]	; 0x28
   db210:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   db214:	464f      	mov	r7, r9
   db216:	220a      	movs	r2, #10
   db218:	981d      	ldr	r0, [sp, #116]	; 0x74
   db21a:	7806      	ldrb	r6, [r0, #0]
   db21c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   db220:	b2d9      	uxtb	r1, r3
   db222:	2909      	cmp	r1, #9
   db224:	d92a      	bls.n	db27c <_strtod_l+0x1bc>
   db226:	9907      	ldr	r1, [sp, #28]
   db228:	462a      	mov	r2, r5
   db22a:	f7ff fef0 	bl	db00e <strncmp>
   db22e:	b398      	cbz	r0, db298 <_strtod_l+0x1d8>
   db230:	2000      	movs	r0, #0
   db232:	4633      	mov	r3, r6
   db234:	463d      	mov	r5, r7
   db236:	9007      	str	r0, [sp, #28]
   db238:	4602      	mov	r2, r0
   db23a:	2b65      	cmp	r3, #101	; 0x65
   db23c:	d001      	beq.n	db242 <_strtod_l+0x182>
   db23e:	2b45      	cmp	r3, #69	; 0x45
   db240:	d118      	bne.n	db274 <_strtod_l+0x1b4>
   db242:	b91d      	cbnz	r5, db24c <_strtod_l+0x18c>
   db244:	9b04      	ldr	r3, [sp, #16]
   db246:	4303      	orrs	r3, r0
   db248:	d098      	beq.n	db17c <_strtod_l+0xbc>
   db24a:	2500      	movs	r5, #0
   db24c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   db250:	f108 0301 	add.w	r3, r8, #1
   db254:	931d      	str	r3, [sp, #116]	; 0x74
   db256:	f898 3001 	ldrb.w	r3, [r8, #1]
   db25a:	2b2b      	cmp	r3, #43	; 0x2b
   db25c:	d075      	beq.n	db34a <_strtod_l+0x28a>
   db25e:	2b2d      	cmp	r3, #45	; 0x2d
   db260:	d07b      	beq.n	db35a <_strtod_l+0x29a>
   db262:	f04f 0c00 	mov.w	ip, #0
   db266:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db26a:	2909      	cmp	r1, #9
   db26c:	f240 8082 	bls.w	db374 <_strtod_l+0x2b4>
   db270:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db274:	2600      	movs	r6, #0
   db276:	e09d      	b.n	db3b4 <_strtod_l+0x2f4>
   db278:	2300      	movs	r3, #0
   db27a:	e7c4      	b.n	db206 <_strtod_l+0x146>
   db27c:	2f08      	cmp	r7, #8
   db27e:	bfd8      	it	le
   db280:	9909      	ldrle	r1, [sp, #36]	; 0x24
   db282:	f100 0001 	add.w	r0, r0, #1
   db286:	bfda      	itte	le
   db288:	fb02 3301 	mlale	r3, r2, r1, r3
   db28c:	9309      	strle	r3, [sp, #36]	; 0x24
   db28e:	fb02 3909 	mlagt	r9, r2, r9, r3
   db292:	3701      	adds	r7, #1
   db294:	901d      	str	r0, [sp, #116]	; 0x74
   db296:	e7bf      	b.n	db218 <_strtod_l+0x158>
   db298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db29a:	195a      	adds	r2, r3, r5
   db29c:	921d      	str	r2, [sp, #116]	; 0x74
   db29e:	5d5b      	ldrb	r3, [r3, r5]
   db2a0:	2f00      	cmp	r7, #0
   db2a2:	d037      	beq.n	db314 <_strtod_l+0x254>
   db2a4:	9007      	str	r0, [sp, #28]
   db2a6:	463d      	mov	r5, r7
   db2a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   db2ac:	2a09      	cmp	r2, #9
   db2ae:	d912      	bls.n	db2d6 <_strtod_l+0x216>
   db2b0:	2201      	movs	r2, #1
   db2b2:	e7c2      	b.n	db23a <_strtod_l+0x17a>
   db2b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db2b6:	1c5a      	adds	r2, r3, #1
   db2b8:	921d      	str	r2, [sp, #116]	; 0x74
   db2ba:	785b      	ldrb	r3, [r3, #1]
   db2bc:	3001      	adds	r0, #1
   db2be:	2b30      	cmp	r3, #48	; 0x30
   db2c0:	d0f8      	beq.n	db2b4 <_strtod_l+0x1f4>
   db2c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db2c6:	2a08      	cmp	r2, #8
   db2c8:	f200 84db 	bhi.w	dbc82 <_strtod_l+0xbc2>
   db2cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   db2ce:	9007      	str	r0, [sp, #28]
   db2d0:	2000      	movs	r0, #0
   db2d2:	920a      	str	r2, [sp, #40]	; 0x28
   db2d4:	4605      	mov	r5, r0
   db2d6:	3b30      	subs	r3, #48	; 0x30
   db2d8:	f100 0201 	add.w	r2, r0, #1
   db2dc:	d014      	beq.n	db308 <_strtod_l+0x248>
   db2de:	9907      	ldr	r1, [sp, #28]
   db2e0:	4411      	add	r1, r2
   db2e2:	9107      	str	r1, [sp, #28]
   db2e4:	462a      	mov	r2, r5
   db2e6:	eb00 0e05 	add.w	lr, r0, r5
   db2ea:	210a      	movs	r1, #10
   db2ec:	4572      	cmp	r2, lr
   db2ee:	d113      	bne.n	db318 <_strtod_l+0x258>
   db2f0:	182a      	adds	r2, r5, r0
   db2f2:	2a08      	cmp	r2, #8
   db2f4:	f105 0501 	add.w	r5, r5, #1
   db2f8:	4405      	add	r5, r0
   db2fa:	dc1c      	bgt.n	db336 <_strtod_l+0x276>
   db2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   db2fe:	220a      	movs	r2, #10
   db300:	fb02 3301 	mla	r3, r2, r1, r3
   db304:	9309      	str	r3, [sp, #36]	; 0x24
   db306:	2200      	movs	r2, #0
   db308:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db30a:	1c59      	adds	r1, r3, #1
   db30c:	911d      	str	r1, [sp, #116]	; 0x74
   db30e:	785b      	ldrb	r3, [r3, #1]
   db310:	4610      	mov	r0, r2
   db312:	e7c9      	b.n	db2a8 <_strtod_l+0x1e8>
   db314:	4638      	mov	r0, r7
   db316:	e7d2      	b.n	db2be <_strtod_l+0x1fe>
   db318:	2a08      	cmp	r2, #8
   db31a:	dc04      	bgt.n	db326 <_strtod_l+0x266>
   db31c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   db31e:	434e      	muls	r6, r1
   db320:	9609      	str	r6, [sp, #36]	; 0x24
   db322:	3201      	adds	r2, #1
   db324:	e7e2      	b.n	db2ec <_strtod_l+0x22c>
   db326:	f102 0c01 	add.w	ip, r2, #1
   db32a:	f1bc 0f10 	cmp.w	ip, #16
   db32e:	bfd8      	it	le
   db330:	fb01 f909 	mulle.w	r9, r1, r9
   db334:	e7f5      	b.n	db322 <_strtod_l+0x262>
   db336:	2d10      	cmp	r5, #16
   db338:	bfdc      	itt	le
   db33a:	220a      	movle	r2, #10
   db33c:	fb02 3909 	mlale	r9, r2, r9, r3
   db340:	e7e1      	b.n	db306 <_strtod_l+0x246>
   db342:	2300      	movs	r3, #0
   db344:	9307      	str	r3, [sp, #28]
   db346:	2201      	movs	r2, #1
   db348:	e77c      	b.n	db244 <_strtod_l+0x184>
   db34a:	f04f 0c00 	mov.w	ip, #0
   db34e:	f108 0302 	add.w	r3, r8, #2
   db352:	931d      	str	r3, [sp, #116]	; 0x74
   db354:	f898 3002 	ldrb.w	r3, [r8, #2]
   db358:	e785      	b.n	db266 <_strtod_l+0x1a6>
   db35a:	f04f 0c01 	mov.w	ip, #1
   db35e:	e7f6      	b.n	db34e <_strtod_l+0x28e>
   db360:	000de104 	.word	0x000de104
   db364:	000ddfb0 	.word	0x000ddfb0
   db368:	7ff00000 	.word	0x7ff00000
   db36c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db36e:	1c59      	adds	r1, r3, #1
   db370:	911d      	str	r1, [sp, #116]	; 0x74
   db372:	785b      	ldrb	r3, [r3, #1]
   db374:	2b30      	cmp	r3, #48	; 0x30
   db376:	d0f9      	beq.n	db36c <_strtod_l+0x2ac>
   db378:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   db37c:	2908      	cmp	r1, #8
   db37e:	f63f af79 	bhi.w	db274 <_strtod_l+0x1b4>
   db382:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db386:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db388:	9308      	str	r3, [sp, #32]
   db38a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db38c:	1c59      	adds	r1, r3, #1
   db38e:	911d      	str	r1, [sp, #116]	; 0x74
   db390:	785b      	ldrb	r3, [r3, #1]
   db392:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db396:	2e09      	cmp	r6, #9
   db398:	d937      	bls.n	db40a <_strtod_l+0x34a>
   db39a:	9e08      	ldr	r6, [sp, #32]
   db39c:	1b89      	subs	r1, r1, r6
   db39e:	2908      	cmp	r1, #8
   db3a0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   db3a4:	dc02      	bgt.n	db3ac <_strtod_l+0x2ec>
   db3a6:	4576      	cmp	r6, lr
   db3a8:	bfa8      	it	ge
   db3aa:	4676      	movge	r6, lr
   db3ac:	f1bc 0f00 	cmp.w	ip, #0
   db3b0:	d000      	beq.n	db3b4 <_strtod_l+0x2f4>
   db3b2:	4276      	negs	r6, r6
   db3b4:	2d00      	cmp	r5, #0
   db3b6:	d14f      	bne.n	db458 <_strtod_l+0x398>
   db3b8:	9904      	ldr	r1, [sp, #16]
   db3ba:	4301      	orrs	r1, r0
   db3bc:	f47f aec2 	bne.w	db144 <_strtod_l+0x84>
   db3c0:	2a00      	cmp	r2, #0
   db3c2:	f47f aedb 	bne.w	db17c <_strtod_l+0xbc>
   db3c6:	2b69      	cmp	r3, #105	; 0x69
   db3c8:	d027      	beq.n	db41a <_strtod_l+0x35a>
   db3ca:	dc24      	bgt.n	db416 <_strtod_l+0x356>
   db3cc:	2b49      	cmp	r3, #73	; 0x49
   db3ce:	d024      	beq.n	db41a <_strtod_l+0x35a>
   db3d0:	2b4e      	cmp	r3, #78	; 0x4e
   db3d2:	f47f aed3 	bne.w	db17c <_strtod_l+0xbc>
   db3d6:	499e      	ldr	r1, [pc, #632]	; (db650 <_strtod_l+0x590>)
   db3d8:	a81d      	add	r0, sp, #116	; 0x74
   db3da:	f001 f81b 	bl	dc414 <__match>
   db3de:	2800      	cmp	r0, #0
   db3e0:	f43f aecc 	beq.w	db17c <_strtod_l+0xbc>
   db3e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db3e6:	781b      	ldrb	r3, [r3, #0]
   db3e8:	2b28      	cmp	r3, #40	; 0x28
   db3ea:	d12d      	bne.n	db448 <_strtod_l+0x388>
   db3ec:	4999      	ldr	r1, [pc, #612]	; (db654 <_strtod_l+0x594>)
   db3ee:	aa20      	add	r2, sp, #128	; 0x80
   db3f0:	a81d      	add	r0, sp, #116	; 0x74
   db3f2:	f001 f823 	bl	dc43c <__hexnan>
   db3f6:	2805      	cmp	r0, #5
   db3f8:	d126      	bne.n	db448 <_strtod_l+0x388>
   db3fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   db3fc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   db400:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db404:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db408:	e69c      	b.n	db144 <_strtod_l+0x84>
   db40a:	210a      	movs	r1, #10
   db40c:	fb01 3e0e 	mla	lr, r1, lr, r3
   db410:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db414:	e7b9      	b.n	db38a <_strtod_l+0x2ca>
   db416:	2b6e      	cmp	r3, #110	; 0x6e
   db418:	e7db      	b.n	db3d2 <_strtod_l+0x312>
   db41a:	498f      	ldr	r1, [pc, #572]	; (db658 <_strtod_l+0x598>)
   db41c:	a81d      	add	r0, sp, #116	; 0x74
   db41e:	f000 fff9 	bl	dc414 <__match>
   db422:	2800      	cmp	r0, #0
   db424:	f43f aeaa 	beq.w	db17c <_strtod_l+0xbc>
   db428:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db42a:	498c      	ldr	r1, [pc, #560]	; (db65c <_strtod_l+0x59c>)
   db42c:	3b01      	subs	r3, #1
   db42e:	a81d      	add	r0, sp, #116	; 0x74
   db430:	931d      	str	r3, [sp, #116]	; 0x74
   db432:	f000 ffef 	bl	dc414 <__match>
   db436:	b910      	cbnz	r0, db43e <_strtod_l+0x37e>
   db438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db43a:	3301      	adds	r3, #1
   db43c:	931d      	str	r3, [sp, #116]	; 0x74
   db43e:	f8df b22c 	ldr.w	fp, [pc, #556]	; db66c <_strtod_l+0x5ac>
   db442:	f04f 0a00 	mov.w	sl, #0
   db446:	e67d      	b.n	db144 <_strtod_l+0x84>
   db448:	4885      	ldr	r0, [pc, #532]	; (db660 <_strtod_l+0x5a0>)
   db44a:	f001 fcf9 	bl	dce40 <nan>
   db44e:	ed8d 0b04 	vstr	d0, [sp, #16]
   db452:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   db456:	e675      	b.n	db144 <_strtod_l+0x84>
   db458:	9b07      	ldr	r3, [sp, #28]
   db45a:	9809      	ldr	r0, [sp, #36]	; 0x24
   db45c:	1af3      	subs	r3, r6, r3
   db45e:	2f00      	cmp	r7, #0
   db460:	bf08      	it	eq
   db462:	462f      	moveq	r7, r5
   db464:	2d10      	cmp	r5, #16
   db466:	9308      	str	r3, [sp, #32]
   db468:	46a8      	mov	r8, r5
   db46a:	bfa8      	it	ge
   db46c:	f04f 0810 	movge.w	r8, #16
   db470:	f7fe ffbe 	bl	da3f0 <__aeabi_ui2d>
   db474:	2d09      	cmp	r5, #9
   db476:	4682      	mov	sl, r0
   db478:	468b      	mov	fp, r1
   db47a:	dd13      	ble.n	db4a4 <_strtod_l+0x3e4>
   db47c:	4b79      	ldr	r3, [pc, #484]	; (db664 <_strtod_l+0x5a4>)
   db47e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   db482:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db486:	f7ff f82d 	bl	da4e4 <__aeabi_dmul>
   db48a:	4682      	mov	sl, r0
   db48c:	4648      	mov	r0, r9
   db48e:	468b      	mov	fp, r1
   db490:	f7fe ffae 	bl	da3f0 <__aeabi_ui2d>
   db494:	4602      	mov	r2, r0
   db496:	460b      	mov	r3, r1
   db498:	4650      	mov	r0, sl
   db49a:	4659      	mov	r1, fp
   db49c:	f7fe fe6c 	bl	da178 <__adddf3>
   db4a0:	4682      	mov	sl, r0
   db4a2:	468b      	mov	fp, r1
   db4a4:	2d0f      	cmp	r5, #15
   db4a6:	dc38      	bgt.n	db51a <_strtod_l+0x45a>
   db4a8:	9b08      	ldr	r3, [sp, #32]
   db4aa:	2b00      	cmp	r3, #0
   db4ac:	f43f ae4a 	beq.w	db144 <_strtod_l+0x84>
   db4b0:	dd24      	ble.n	db4fc <_strtod_l+0x43c>
   db4b2:	2b16      	cmp	r3, #22
   db4b4:	dc0b      	bgt.n	db4ce <_strtod_l+0x40e>
   db4b6:	4d6b      	ldr	r5, [pc, #428]	; (db664 <_strtod_l+0x5a4>)
   db4b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   db4bc:	e9d5 0100 	ldrd	r0, r1, [r5]
   db4c0:	4652      	mov	r2, sl
   db4c2:	465b      	mov	r3, fp
   db4c4:	f7ff f80e 	bl	da4e4 <__aeabi_dmul>
   db4c8:	4682      	mov	sl, r0
   db4ca:	468b      	mov	fp, r1
   db4cc:	e63a      	b.n	db144 <_strtod_l+0x84>
   db4ce:	9a08      	ldr	r2, [sp, #32]
   db4d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db4d4:	4293      	cmp	r3, r2
   db4d6:	db20      	blt.n	db51a <_strtod_l+0x45a>
   db4d8:	4c62      	ldr	r4, [pc, #392]	; (db664 <_strtod_l+0x5a4>)
   db4da:	f1c5 050f 	rsb	r5, r5, #15
   db4de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db4e2:	4652      	mov	r2, sl
   db4e4:	465b      	mov	r3, fp
   db4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   db4ea:	f7fe fffb 	bl	da4e4 <__aeabi_dmul>
   db4ee:	9b08      	ldr	r3, [sp, #32]
   db4f0:	1b5d      	subs	r5, r3, r5
   db4f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db4f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   db4fa:	e7e3      	b.n	db4c4 <_strtod_l+0x404>
   db4fc:	9b08      	ldr	r3, [sp, #32]
   db4fe:	3316      	adds	r3, #22
   db500:	db0b      	blt.n	db51a <_strtod_l+0x45a>
   db502:	9b07      	ldr	r3, [sp, #28]
   db504:	4a57      	ldr	r2, [pc, #348]	; (db664 <_strtod_l+0x5a4>)
   db506:	1b9e      	subs	r6, r3, r6
   db508:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   db50c:	e9d6 2300 	ldrd	r2, r3, [r6]
   db510:	4650      	mov	r0, sl
   db512:	4659      	mov	r1, fp
   db514:	f7ff f910 	bl	da738 <__aeabi_ddiv>
   db518:	e7d6      	b.n	db4c8 <_strtod_l+0x408>
   db51a:	9b08      	ldr	r3, [sp, #32]
   db51c:	eba5 0808 	sub.w	r8, r5, r8
   db520:	4498      	add	r8, r3
   db522:	f1b8 0f00 	cmp.w	r8, #0
   db526:	dd71      	ble.n	db60c <_strtod_l+0x54c>
   db528:	f018 030f 	ands.w	r3, r8, #15
   db52c:	d00a      	beq.n	db544 <_strtod_l+0x484>
   db52e:	494d      	ldr	r1, [pc, #308]	; (db664 <_strtod_l+0x5a4>)
   db530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   db534:	4652      	mov	r2, sl
   db536:	465b      	mov	r3, fp
   db538:	e9d1 0100 	ldrd	r0, r1, [r1]
   db53c:	f7fe ffd2 	bl	da4e4 <__aeabi_dmul>
   db540:	4682      	mov	sl, r0
   db542:	468b      	mov	fp, r1
   db544:	f038 080f 	bics.w	r8, r8, #15
   db548:	d04d      	beq.n	db5e6 <_strtod_l+0x526>
   db54a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   db54e:	dd22      	ble.n	db596 <_strtod_l+0x4d6>
   db550:	2500      	movs	r5, #0
   db552:	462e      	mov	r6, r5
   db554:	9509      	str	r5, [sp, #36]	; 0x24
   db556:	9507      	str	r5, [sp, #28]
   db558:	2322      	movs	r3, #34	; 0x22
   db55a:	f8df b110 	ldr.w	fp, [pc, #272]	; db66c <_strtod_l+0x5ac>
   db55e:	6023      	str	r3, [r4, #0]
   db560:	f04f 0a00 	mov.w	sl, #0
   db564:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db566:	2b00      	cmp	r3, #0
   db568:	f43f adec 	beq.w	db144 <_strtod_l+0x84>
   db56c:	991e      	ldr	r1, [sp, #120]	; 0x78
   db56e:	4620      	mov	r0, r4
   db570:	f001 f849 	bl	dc606 <_Bfree>
   db574:	9907      	ldr	r1, [sp, #28]
   db576:	4620      	mov	r0, r4
   db578:	f001 f845 	bl	dc606 <_Bfree>
   db57c:	4631      	mov	r1, r6
   db57e:	4620      	mov	r0, r4
   db580:	f001 f841 	bl	dc606 <_Bfree>
   db584:	9909      	ldr	r1, [sp, #36]	; 0x24
   db586:	4620      	mov	r0, r4
   db588:	f001 f83d 	bl	dc606 <_Bfree>
   db58c:	4629      	mov	r1, r5
   db58e:	4620      	mov	r0, r4
   db590:	f001 f839 	bl	dc606 <_Bfree>
   db594:	e5d6      	b.n	db144 <_strtod_l+0x84>
   db596:	2300      	movs	r3, #0
   db598:	ea4f 1828 	mov.w	r8, r8, asr #4
   db59c:	4650      	mov	r0, sl
   db59e:	4659      	mov	r1, fp
   db5a0:	4699      	mov	r9, r3
   db5a2:	f1b8 0f01 	cmp.w	r8, #1
   db5a6:	dc21      	bgt.n	db5ec <_strtod_l+0x52c>
   db5a8:	b10b      	cbz	r3, db5ae <_strtod_l+0x4ee>
   db5aa:	4682      	mov	sl, r0
   db5ac:	468b      	mov	fp, r1
   db5ae:	4b2e      	ldr	r3, [pc, #184]	; (db668 <_strtod_l+0x5a8>)
   db5b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db5b4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   db5b8:	4652      	mov	r2, sl
   db5ba:	465b      	mov	r3, fp
   db5bc:	e9d9 0100 	ldrd	r0, r1, [r9]
   db5c0:	f7fe ff90 	bl	da4e4 <__aeabi_dmul>
   db5c4:	4b29      	ldr	r3, [pc, #164]	; (db66c <_strtod_l+0x5ac>)
   db5c6:	460a      	mov	r2, r1
   db5c8:	400b      	ands	r3, r1
   db5ca:	4929      	ldr	r1, [pc, #164]	; (db670 <_strtod_l+0x5b0>)
   db5cc:	428b      	cmp	r3, r1
   db5ce:	4682      	mov	sl, r0
   db5d0:	d8be      	bhi.n	db550 <_strtod_l+0x490>
   db5d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db5d6:	428b      	cmp	r3, r1
   db5d8:	bf86      	itte	hi
   db5da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; db674 <_strtod_l+0x5b4>
   db5de:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db5e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db5e6:	2300      	movs	r3, #0
   db5e8:	9304      	str	r3, [sp, #16]
   db5ea:	e081      	b.n	db6f0 <_strtod_l+0x630>
   db5ec:	f018 0f01 	tst.w	r8, #1
   db5f0:	d007      	beq.n	db602 <_strtod_l+0x542>
   db5f2:	4b1d      	ldr	r3, [pc, #116]	; (db668 <_strtod_l+0x5a8>)
   db5f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   db5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   db5fc:	f7fe ff72 	bl	da4e4 <__aeabi_dmul>
   db600:	2301      	movs	r3, #1
   db602:	f109 0901 	add.w	r9, r9, #1
   db606:	ea4f 0868 	mov.w	r8, r8, asr #1
   db60a:	e7ca      	b.n	db5a2 <_strtod_l+0x4e2>
   db60c:	d0eb      	beq.n	db5e6 <_strtod_l+0x526>
   db60e:	f1c8 0800 	rsb	r8, r8, #0
   db612:	f018 020f 	ands.w	r2, r8, #15
   db616:	d00a      	beq.n	db62e <_strtod_l+0x56e>
   db618:	4b12      	ldr	r3, [pc, #72]	; (db664 <_strtod_l+0x5a4>)
   db61a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db61e:	4650      	mov	r0, sl
   db620:	4659      	mov	r1, fp
   db622:	e9d3 2300 	ldrd	r2, r3, [r3]
   db626:	f7ff f887 	bl	da738 <__aeabi_ddiv>
   db62a:	4682      	mov	sl, r0
   db62c:	468b      	mov	fp, r1
   db62e:	ea5f 1828 	movs.w	r8, r8, asr #4
   db632:	d0d8      	beq.n	db5e6 <_strtod_l+0x526>
   db634:	f1b8 0f1f 	cmp.w	r8, #31
   db638:	dd1e      	ble.n	db678 <_strtod_l+0x5b8>
   db63a:	2500      	movs	r5, #0
   db63c:	462e      	mov	r6, r5
   db63e:	9509      	str	r5, [sp, #36]	; 0x24
   db640:	9507      	str	r5, [sp, #28]
   db642:	2322      	movs	r3, #34	; 0x22
   db644:	f04f 0a00 	mov.w	sl, #0
   db648:	f04f 0b00 	mov.w	fp, #0
   db64c:	6023      	str	r3, [r4, #0]
   db64e:	e789      	b.n	db564 <_strtod_l+0x4a4>
   db650:	000ddeb1 	.word	0x000ddeb1
   db654:	000ddfc4 	.word	0x000ddfc4
   db658:	000ddeb5 	.word	0x000ddeb5
   db65c:	000ddfaa 	.word	0x000ddfaa
   db660:	000ddf70 	.word	0x000ddf70
   db664:	000de140 	.word	0x000de140
   db668:	000de118 	.word	0x000de118
   db66c:	7ff00000 	.word	0x7ff00000
   db670:	7ca00000 	.word	0x7ca00000
   db674:	7fefffff 	.word	0x7fefffff
   db678:	f018 0310 	ands.w	r3, r8, #16
   db67c:	bf18      	it	ne
   db67e:	236a      	movne	r3, #106	; 0x6a
   db680:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dba38 <_strtod_l+0x978>
   db684:	9304      	str	r3, [sp, #16]
   db686:	4650      	mov	r0, sl
   db688:	4659      	mov	r1, fp
   db68a:	2300      	movs	r3, #0
   db68c:	f018 0f01 	tst.w	r8, #1
   db690:	d004      	beq.n	db69c <_strtod_l+0x5dc>
   db692:	e9d9 2300 	ldrd	r2, r3, [r9]
   db696:	f7fe ff25 	bl	da4e4 <__aeabi_dmul>
   db69a:	2301      	movs	r3, #1
   db69c:	ea5f 0868 	movs.w	r8, r8, asr #1
   db6a0:	f109 0908 	add.w	r9, r9, #8
   db6a4:	d1f2      	bne.n	db68c <_strtod_l+0x5cc>
   db6a6:	b10b      	cbz	r3, db6ac <_strtod_l+0x5ec>
   db6a8:	4682      	mov	sl, r0
   db6aa:	468b      	mov	fp, r1
   db6ac:	9b04      	ldr	r3, [sp, #16]
   db6ae:	b1bb      	cbz	r3, db6e0 <_strtod_l+0x620>
   db6b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db6b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db6b8:	2b00      	cmp	r3, #0
   db6ba:	4659      	mov	r1, fp
   db6bc:	dd10      	ble.n	db6e0 <_strtod_l+0x620>
   db6be:	2b1f      	cmp	r3, #31
   db6c0:	f340 8128 	ble.w	db914 <_strtod_l+0x854>
   db6c4:	2b34      	cmp	r3, #52	; 0x34
   db6c6:	bfde      	ittt	le
   db6c8:	3b20      	suble	r3, #32
   db6ca:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db6ce:	fa02 f303 	lslle.w	r3, r2, r3
   db6d2:	f04f 0a00 	mov.w	sl, #0
   db6d6:	bfcc      	ite	gt
   db6d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db6dc:	ea03 0b01 	andle.w	fp, r3, r1
   db6e0:	2200      	movs	r2, #0
   db6e2:	2300      	movs	r3, #0
   db6e4:	4650      	mov	r0, sl
   db6e6:	4659      	mov	r1, fp
   db6e8:	f7ff f964 	bl	da9b4 <__aeabi_dcmpeq>
   db6ec:	2800      	cmp	r0, #0
   db6ee:	d1a4      	bne.n	db63a <_strtod_l+0x57a>
   db6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db6f2:	9300      	str	r3, [sp, #0]
   db6f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   db6f6:	462b      	mov	r3, r5
   db6f8:	463a      	mov	r2, r7
   db6fa:	4620      	mov	r0, r4
   db6fc:	f000 ffd8 	bl	dc6b0 <__s2b>
   db700:	9009      	str	r0, [sp, #36]	; 0x24
   db702:	2800      	cmp	r0, #0
   db704:	f43f af24 	beq.w	db550 <_strtod_l+0x490>
   db708:	9b07      	ldr	r3, [sp, #28]
   db70a:	1b9e      	subs	r6, r3, r6
   db70c:	9b08      	ldr	r3, [sp, #32]
   db70e:	2b00      	cmp	r3, #0
   db710:	bfb4      	ite	lt
   db712:	4633      	movlt	r3, r6
   db714:	2300      	movge	r3, #0
   db716:	9310      	str	r3, [sp, #64]	; 0x40
   db718:	9b08      	ldr	r3, [sp, #32]
   db71a:	2500      	movs	r5, #0
   db71c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   db720:	9318      	str	r3, [sp, #96]	; 0x60
   db722:	462e      	mov	r6, r5
   db724:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db726:	4620      	mov	r0, r4
   db728:	6859      	ldr	r1, [r3, #4]
   db72a:	f000 ff38 	bl	dc59e <_Balloc>
   db72e:	9007      	str	r0, [sp, #28]
   db730:	2800      	cmp	r0, #0
   db732:	f43f af11 	beq.w	db558 <_strtod_l+0x498>
   db736:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db738:	691a      	ldr	r2, [r3, #16]
   db73a:	3202      	adds	r2, #2
   db73c:	f103 010c 	add.w	r1, r3, #12
   db740:	0092      	lsls	r2, r2, #2
   db742:	300c      	adds	r0, #12
   db744:	f7ff fbf1 	bl	daf2a <memcpy>
   db748:	ec4b ab10 	vmov	d0, sl, fp
   db74c:	aa20      	add	r2, sp, #128	; 0x80
   db74e:	a91f      	add	r1, sp, #124	; 0x7c
   db750:	4620      	mov	r0, r4
   db752:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   db756:	f001 fa9b 	bl	dcc90 <__d2b>
   db75a:	901e      	str	r0, [sp, #120]	; 0x78
   db75c:	2800      	cmp	r0, #0
   db75e:	f43f aefb 	beq.w	db558 <_strtod_l+0x498>
   db762:	2101      	movs	r1, #1
   db764:	4620      	mov	r0, r4
   db766:	f001 f831 	bl	dc7cc <__i2b>
   db76a:	4606      	mov	r6, r0
   db76c:	2800      	cmp	r0, #0
   db76e:	f43f aef3 	beq.w	db558 <_strtod_l+0x498>
   db772:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db774:	9904      	ldr	r1, [sp, #16]
   db776:	2b00      	cmp	r3, #0
   db778:	bfab      	itete	ge
   db77a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db77c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db77e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db780:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db784:	bfac      	ite	ge
   db786:	eb03 0902 	addge.w	r9, r3, r2
   db78a:	1ad7      	sublt	r7, r2, r3
   db78c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db78e:	eba3 0801 	sub.w	r8, r3, r1
   db792:	4490      	add	r8, r2
   db794:	4ba3      	ldr	r3, [pc, #652]	; (dba24 <_strtod_l+0x964>)
   db796:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db79a:	4598      	cmp	r8, r3
   db79c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db7a0:	f280 80cc 	bge.w	db93c <_strtod_l+0x87c>
   db7a4:	eba3 0308 	sub.w	r3, r3, r8
   db7a8:	2b1f      	cmp	r3, #31
   db7aa:	eba2 0203 	sub.w	r2, r2, r3
   db7ae:	f04f 0101 	mov.w	r1, #1
   db7b2:	f300 80b6 	bgt.w	db922 <_strtod_l+0x862>
   db7b6:	fa01 f303 	lsl.w	r3, r1, r3
   db7ba:	9311      	str	r3, [sp, #68]	; 0x44
   db7bc:	2300      	movs	r3, #0
   db7be:	930c      	str	r3, [sp, #48]	; 0x30
   db7c0:	eb09 0802 	add.w	r8, r9, r2
   db7c4:	9b04      	ldr	r3, [sp, #16]
   db7c6:	45c1      	cmp	r9, r8
   db7c8:	4417      	add	r7, r2
   db7ca:	441f      	add	r7, r3
   db7cc:	464b      	mov	r3, r9
   db7ce:	bfa8      	it	ge
   db7d0:	4643      	movge	r3, r8
   db7d2:	42bb      	cmp	r3, r7
   db7d4:	bfa8      	it	ge
   db7d6:	463b      	movge	r3, r7
   db7d8:	2b00      	cmp	r3, #0
   db7da:	bfc2      	ittt	gt
   db7dc:	eba8 0803 	subgt.w	r8, r8, r3
   db7e0:	1aff      	subgt	r7, r7, r3
   db7e2:	eba9 0903 	subgt.w	r9, r9, r3
   db7e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db7e8:	2b00      	cmp	r3, #0
   db7ea:	dd17      	ble.n	db81c <_strtod_l+0x75c>
   db7ec:	4631      	mov	r1, r6
   db7ee:	461a      	mov	r2, r3
   db7f0:	4620      	mov	r0, r4
   db7f2:	f001 f891 	bl	dc918 <__pow5mult>
   db7f6:	4606      	mov	r6, r0
   db7f8:	2800      	cmp	r0, #0
   db7fa:	f43f aead 	beq.w	db558 <_strtod_l+0x498>
   db7fe:	4601      	mov	r1, r0
   db800:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db802:	4620      	mov	r0, r4
   db804:	f000 ffeb 	bl	dc7de <__multiply>
   db808:	900f      	str	r0, [sp, #60]	; 0x3c
   db80a:	2800      	cmp	r0, #0
   db80c:	f43f aea4 	beq.w	db558 <_strtod_l+0x498>
   db810:	991e      	ldr	r1, [sp, #120]	; 0x78
   db812:	4620      	mov	r0, r4
   db814:	f000 fef7 	bl	dc606 <_Bfree>
   db818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db81a:	931e      	str	r3, [sp, #120]	; 0x78
   db81c:	f1b8 0f00 	cmp.w	r8, #0
   db820:	f300 8091 	bgt.w	db946 <_strtod_l+0x886>
   db824:	9b08      	ldr	r3, [sp, #32]
   db826:	2b00      	cmp	r3, #0
   db828:	dd08      	ble.n	db83c <_strtod_l+0x77c>
   db82a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db82c:	9907      	ldr	r1, [sp, #28]
   db82e:	4620      	mov	r0, r4
   db830:	f001 f872 	bl	dc918 <__pow5mult>
   db834:	9007      	str	r0, [sp, #28]
   db836:	2800      	cmp	r0, #0
   db838:	f43f ae8e 	beq.w	db558 <_strtod_l+0x498>
   db83c:	2f00      	cmp	r7, #0
   db83e:	dd08      	ble.n	db852 <_strtod_l+0x792>
   db840:	9907      	ldr	r1, [sp, #28]
   db842:	463a      	mov	r2, r7
   db844:	4620      	mov	r0, r4
   db846:	f001 f8b5 	bl	dc9b4 <__lshift>
   db84a:	9007      	str	r0, [sp, #28]
   db84c:	2800      	cmp	r0, #0
   db84e:	f43f ae83 	beq.w	db558 <_strtod_l+0x498>
   db852:	f1b9 0f00 	cmp.w	r9, #0
   db856:	dd08      	ble.n	db86a <_strtod_l+0x7aa>
   db858:	4631      	mov	r1, r6
   db85a:	464a      	mov	r2, r9
   db85c:	4620      	mov	r0, r4
   db85e:	f001 f8a9 	bl	dc9b4 <__lshift>
   db862:	4606      	mov	r6, r0
   db864:	2800      	cmp	r0, #0
   db866:	f43f ae77 	beq.w	db558 <_strtod_l+0x498>
   db86a:	9a07      	ldr	r2, [sp, #28]
   db86c:	991e      	ldr	r1, [sp, #120]	; 0x78
   db86e:	4620      	mov	r0, r4
   db870:	f001 f91b 	bl	dcaaa <__mdiff>
   db874:	4605      	mov	r5, r0
   db876:	2800      	cmp	r0, #0
   db878:	f43f ae6e 	beq.w	db558 <_strtod_l+0x498>
   db87c:	68c3      	ldr	r3, [r0, #12]
   db87e:	930f      	str	r3, [sp, #60]	; 0x3c
   db880:	2300      	movs	r3, #0
   db882:	60c3      	str	r3, [r0, #12]
   db884:	4631      	mov	r1, r6
   db886:	f001 f8f4 	bl	dca72 <__mcmp>
   db88a:	2800      	cmp	r0, #0
   db88c:	da65      	bge.n	db95a <_strtod_l+0x89a>
   db88e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db890:	ea53 030a 	orrs.w	r3, r3, sl
   db894:	f040 8087 	bne.w	db9a6 <_strtod_l+0x8e6>
   db898:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db89c:	2b00      	cmp	r3, #0
   db89e:	f040 8082 	bne.w	db9a6 <_strtod_l+0x8e6>
   db8a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db8a6:	0d1b      	lsrs	r3, r3, #20
   db8a8:	051b      	lsls	r3, r3, #20
   db8aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db8ae:	d97a      	bls.n	db9a6 <_strtod_l+0x8e6>
   db8b0:	696b      	ldr	r3, [r5, #20]
   db8b2:	b913      	cbnz	r3, db8ba <_strtod_l+0x7fa>
   db8b4:	692b      	ldr	r3, [r5, #16]
   db8b6:	2b01      	cmp	r3, #1
   db8b8:	dd75      	ble.n	db9a6 <_strtod_l+0x8e6>
   db8ba:	4629      	mov	r1, r5
   db8bc:	2201      	movs	r2, #1
   db8be:	4620      	mov	r0, r4
   db8c0:	f001 f878 	bl	dc9b4 <__lshift>
   db8c4:	4631      	mov	r1, r6
   db8c6:	4605      	mov	r5, r0
   db8c8:	f001 f8d3 	bl	dca72 <__mcmp>
   db8cc:	2800      	cmp	r0, #0
   db8ce:	dd6a      	ble.n	db9a6 <_strtod_l+0x8e6>
   db8d0:	9904      	ldr	r1, [sp, #16]
   db8d2:	4a55      	ldr	r2, [pc, #340]	; (dba28 <_strtod_l+0x968>)
   db8d4:	465b      	mov	r3, fp
   db8d6:	2900      	cmp	r1, #0
   db8d8:	f000 8085 	beq.w	db9e6 <_strtod_l+0x926>
   db8dc:	ea02 010b 	and.w	r1, r2, fp
   db8e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db8e4:	dc7f      	bgt.n	db9e6 <_strtod_l+0x926>
   db8e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db8ea:	f77f aeaa 	ble.w	db642 <_strtod_l+0x582>
   db8ee:	4a4f      	ldr	r2, [pc, #316]	; (dba2c <_strtod_l+0x96c>)
   db8f0:	2300      	movs	r3, #0
   db8f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db8f6:	4650      	mov	r0, sl
   db8f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db8fc:	4659      	mov	r1, fp
   db8fe:	f7fe fdf1 	bl	da4e4 <__aeabi_dmul>
   db902:	460b      	mov	r3, r1
   db904:	4303      	orrs	r3, r0
   db906:	bf08      	it	eq
   db908:	2322      	moveq	r3, #34	; 0x22
   db90a:	4682      	mov	sl, r0
   db90c:	468b      	mov	fp, r1
   db90e:	bf08      	it	eq
   db910:	6023      	streq	r3, [r4, #0]
   db912:	e62b      	b.n	db56c <_strtod_l+0x4ac>
   db914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db918:	fa02 f303 	lsl.w	r3, r2, r3
   db91c:	ea03 0a0a 	and.w	sl, r3, sl
   db920:	e6de      	b.n	db6e0 <_strtod_l+0x620>
   db922:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   db926:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   db92a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   db92e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   db932:	fa01 f308 	lsl.w	r3, r1, r8
   db936:	930c      	str	r3, [sp, #48]	; 0x30
   db938:	9111      	str	r1, [sp, #68]	; 0x44
   db93a:	e741      	b.n	db7c0 <_strtod_l+0x700>
   db93c:	2300      	movs	r3, #0
   db93e:	930c      	str	r3, [sp, #48]	; 0x30
   db940:	2301      	movs	r3, #1
   db942:	9311      	str	r3, [sp, #68]	; 0x44
   db944:	e73c      	b.n	db7c0 <_strtod_l+0x700>
   db946:	991e      	ldr	r1, [sp, #120]	; 0x78
   db948:	4642      	mov	r2, r8
   db94a:	4620      	mov	r0, r4
   db94c:	f001 f832 	bl	dc9b4 <__lshift>
   db950:	901e      	str	r0, [sp, #120]	; 0x78
   db952:	2800      	cmp	r0, #0
   db954:	f47f af66 	bne.w	db824 <_strtod_l+0x764>
   db958:	e5fe      	b.n	db558 <_strtod_l+0x498>
   db95a:	465f      	mov	r7, fp
   db95c:	d16e      	bne.n	dba3c <_strtod_l+0x97c>
   db95e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db960:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db964:	b342      	cbz	r2, db9b8 <_strtod_l+0x8f8>
   db966:	4a32      	ldr	r2, [pc, #200]	; (dba30 <_strtod_l+0x970>)
   db968:	4293      	cmp	r3, r2
   db96a:	d128      	bne.n	db9be <_strtod_l+0x8fe>
   db96c:	9b04      	ldr	r3, [sp, #16]
   db96e:	4650      	mov	r0, sl
   db970:	b1eb      	cbz	r3, db9ae <_strtod_l+0x8ee>
   db972:	4a2d      	ldr	r2, [pc, #180]	; (dba28 <_strtod_l+0x968>)
   db974:	403a      	ands	r2, r7
   db976:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   db97a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   db97e:	d819      	bhi.n	db9b4 <_strtod_l+0x8f4>
   db980:	0d12      	lsrs	r2, r2, #20
   db982:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   db986:	fa01 f303 	lsl.w	r3, r1, r3
   db98a:	4298      	cmp	r0, r3
   db98c:	d117      	bne.n	db9be <_strtod_l+0x8fe>
   db98e:	4b29      	ldr	r3, [pc, #164]	; (dba34 <_strtod_l+0x974>)
   db990:	429f      	cmp	r7, r3
   db992:	d102      	bne.n	db99a <_strtod_l+0x8da>
   db994:	3001      	adds	r0, #1
   db996:	f43f addf 	beq.w	db558 <_strtod_l+0x498>
   db99a:	4b23      	ldr	r3, [pc, #140]	; (dba28 <_strtod_l+0x968>)
   db99c:	403b      	ands	r3, r7
   db99e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db9a2:	f04f 0a00 	mov.w	sl, #0
   db9a6:	9b04      	ldr	r3, [sp, #16]
   db9a8:	2b00      	cmp	r3, #0
   db9aa:	d1a0      	bne.n	db8ee <_strtod_l+0x82e>
   db9ac:	e5de      	b.n	db56c <_strtod_l+0x4ac>
   db9ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db9b2:	e7ea      	b.n	db98a <_strtod_l+0x8ca>
   db9b4:	460b      	mov	r3, r1
   db9b6:	e7e8      	b.n	db98a <_strtod_l+0x8ca>
   db9b8:	ea53 030a 	orrs.w	r3, r3, sl
   db9bc:	d088      	beq.n	db8d0 <_strtod_l+0x810>
   db9be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db9c0:	b1db      	cbz	r3, db9fa <_strtod_l+0x93a>
   db9c2:	423b      	tst	r3, r7
   db9c4:	d0ef      	beq.n	db9a6 <_strtod_l+0x8e6>
   db9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db9c8:	9a04      	ldr	r2, [sp, #16]
   db9ca:	4650      	mov	r0, sl
   db9cc:	4659      	mov	r1, fp
   db9ce:	b1c3      	cbz	r3, dba02 <_strtod_l+0x942>
   db9d0:	f7ff fb59 	bl	db086 <sulp>
   db9d4:	4602      	mov	r2, r0
   db9d6:	460b      	mov	r3, r1
   db9d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db9dc:	f7fe fbcc 	bl	da178 <__adddf3>
   db9e0:	4682      	mov	sl, r0
   db9e2:	468b      	mov	fp, r1
   db9e4:	e7df      	b.n	db9a6 <_strtod_l+0x8e6>
   db9e6:	4013      	ands	r3, r2
   db9e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db9ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db9f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db9f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db9f8:	e7d5      	b.n	db9a6 <_strtod_l+0x8e6>
   db9fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db9fc:	ea13 0f0a 	tst.w	r3, sl
   dba00:	e7e0      	b.n	db9c4 <_strtod_l+0x904>
   dba02:	f7ff fb40 	bl	db086 <sulp>
   dba06:	4602      	mov	r2, r0
   dba08:	460b      	mov	r3, r1
   dba0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dba0e:	f7fe fbb1 	bl	da174 <__aeabi_dsub>
   dba12:	2200      	movs	r2, #0
   dba14:	2300      	movs	r3, #0
   dba16:	4682      	mov	sl, r0
   dba18:	468b      	mov	fp, r1
   dba1a:	f7fe ffcb 	bl	da9b4 <__aeabi_dcmpeq>
   dba1e:	2800      	cmp	r0, #0
   dba20:	d0c1      	beq.n	db9a6 <_strtod_l+0x8e6>
   dba22:	e60e      	b.n	db642 <_strtod_l+0x582>
   dba24:	fffffc02 	.word	0xfffffc02
   dba28:	7ff00000 	.word	0x7ff00000
   dba2c:	39500000 	.word	0x39500000
   dba30:	000fffff 	.word	0x000fffff
   dba34:	7fefffff 	.word	0x7fefffff
   dba38:	000ddfd8 	.word	0x000ddfd8
   dba3c:	4631      	mov	r1, r6
   dba3e:	4628      	mov	r0, r5
   dba40:	f001 f976 	bl	dcd30 <__ratio>
   dba44:	ec59 8b10 	vmov	r8, r9, d0
   dba48:	ee10 0a10 	vmov	r0, s0
   dba4c:	2200      	movs	r2, #0
   dba4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dba52:	4649      	mov	r1, r9
   dba54:	f7fe ffc2 	bl	da9dc <__aeabi_dcmple>
   dba58:	2800      	cmp	r0, #0
   dba5a:	d07c      	beq.n	dbb56 <_strtod_l+0xa96>
   dba5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dba5e:	2b00      	cmp	r3, #0
   dba60:	d04c      	beq.n	dbafc <_strtod_l+0xa3c>
   dba62:	4b95      	ldr	r3, [pc, #596]	; (dbcb8 <_strtod_l+0xbf8>)
   dba64:	2200      	movs	r2, #0
   dba66:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dba6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; dbcb8 <_strtod_l+0xbf8>
   dba6e:	f04f 0800 	mov.w	r8, #0
   dba72:	4b92      	ldr	r3, [pc, #584]	; (dbcbc <_strtod_l+0xbfc>)
   dba74:	403b      	ands	r3, r7
   dba76:	9311      	str	r3, [sp, #68]	; 0x44
   dba78:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dba7a:	4b91      	ldr	r3, [pc, #580]	; (dbcc0 <_strtod_l+0xc00>)
   dba7c:	429a      	cmp	r2, r3
   dba7e:	f040 80b2 	bne.w	dbbe6 <_strtod_l+0xb26>
   dba82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dba86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dba8a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dba8e:	ec4b ab10 	vmov	d0, sl, fp
   dba92:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dba96:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dba9a:	f001 f87d 	bl	dcb98 <__ulp>
   dba9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbaa2:	ec53 2b10 	vmov	r2, r3, d0
   dbaa6:	f7fe fd1d 	bl	da4e4 <__aeabi_dmul>
   dbaaa:	4652      	mov	r2, sl
   dbaac:	465b      	mov	r3, fp
   dbaae:	f7fe fb63 	bl	da178 <__adddf3>
   dbab2:	460b      	mov	r3, r1
   dbab4:	4981      	ldr	r1, [pc, #516]	; (dbcbc <_strtod_l+0xbfc>)
   dbab6:	4a83      	ldr	r2, [pc, #524]	; (dbcc4 <_strtod_l+0xc04>)
   dbab8:	4019      	ands	r1, r3
   dbaba:	4291      	cmp	r1, r2
   dbabc:	4682      	mov	sl, r0
   dbabe:	d95e      	bls.n	dbb7e <_strtod_l+0xabe>
   dbac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dbac2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dbac6:	4293      	cmp	r3, r2
   dbac8:	d103      	bne.n	dbad2 <_strtod_l+0xa12>
   dbaca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbacc:	3301      	adds	r3, #1
   dbace:	f43f ad43 	beq.w	db558 <_strtod_l+0x498>
   dbad2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dbcd0 <_strtod_l+0xc10>
   dbad6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dbada:	991e      	ldr	r1, [sp, #120]	; 0x78
   dbadc:	4620      	mov	r0, r4
   dbade:	f000 fd92 	bl	dc606 <_Bfree>
   dbae2:	9907      	ldr	r1, [sp, #28]
   dbae4:	4620      	mov	r0, r4
   dbae6:	f000 fd8e 	bl	dc606 <_Bfree>
   dbaea:	4631      	mov	r1, r6
   dbaec:	4620      	mov	r0, r4
   dbaee:	f000 fd8a 	bl	dc606 <_Bfree>
   dbaf2:	4629      	mov	r1, r5
   dbaf4:	4620      	mov	r0, r4
   dbaf6:	f000 fd86 	bl	dc606 <_Bfree>
   dbafa:	e613      	b.n	db724 <_strtod_l+0x664>
   dbafc:	f1ba 0f00 	cmp.w	sl, #0
   dbb00:	d11b      	bne.n	dbb3a <_strtod_l+0xa7a>
   dbb02:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbb06:	b9f3      	cbnz	r3, dbb46 <_strtod_l+0xa86>
   dbb08:	4b6b      	ldr	r3, [pc, #428]	; (dbcb8 <_strtod_l+0xbf8>)
   dbb0a:	2200      	movs	r2, #0
   dbb0c:	4640      	mov	r0, r8
   dbb0e:	4649      	mov	r1, r9
   dbb10:	f7fe ff5a 	bl	da9c8 <__aeabi_dcmplt>
   dbb14:	b9d0      	cbnz	r0, dbb4c <_strtod_l+0xa8c>
   dbb16:	4640      	mov	r0, r8
   dbb18:	4649      	mov	r1, r9
   dbb1a:	4b6b      	ldr	r3, [pc, #428]	; (dbcc8 <_strtod_l+0xc08>)
   dbb1c:	2200      	movs	r2, #0
   dbb1e:	f7fe fce1 	bl	da4e4 <__aeabi_dmul>
   dbb22:	4680      	mov	r8, r0
   dbb24:	4689      	mov	r9, r1
   dbb26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dbb2a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dbb2e:	931b      	str	r3, [sp, #108]	; 0x6c
   dbb30:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dbb34:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dbb38:	e79b      	b.n	dba72 <_strtod_l+0x9b2>
   dbb3a:	f1ba 0f01 	cmp.w	sl, #1
   dbb3e:	d102      	bne.n	dbb46 <_strtod_l+0xa86>
   dbb40:	2f00      	cmp	r7, #0
   dbb42:	f43f ad7e 	beq.w	db642 <_strtod_l+0x582>
   dbb46:	4b61      	ldr	r3, [pc, #388]	; (dbccc <_strtod_l+0xc0c>)
   dbb48:	2200      	movs	r2, #0
   dbb4a:	e78c      	b.n	dba66 <_strtod_l+0x9a6>
   dbb4c:	f8df 9178 	ldr.w	r9, [pc, #376]	; dbcc8 <_strtod_l+0xc08>
   dbb50:	f04f 0800 	mov.w	r8, #0
   dbb54:	e7e7      	b.n	dbb26 <_strtod_l+0xa66>
   dbb56:	4b5c      	ldr	r3, [pc, #368]	; (dbcc8 <_strtod_l+0xc08>)
   dbb58:	4640      	mov	r0, r8
   dbb5a:	4649      	mov	r1, r9
   dbb5c:	2200      	movs	r2, #0
   dbb5e:	f7fe fcc1 	bl	da4e4 <__aeabi_dmul>
   dbb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbb64:	4680      	mov	r8, r0
   dbb66:	4689      	mov	r9, r1
   dbb68:	b933      	cbnz	r3, dbb78 <_strtod_l+0xab8>
   dbb6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbb6e:	9012      	str	r0, [sp, #72]	; 0x48
   dbb70:	9313      	str	r3, [sp, #76]	; 0x4c
   dbb72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dbb76:	e7dd      	b.n	dbb34 <_strtod_l+0xa74>
   dbb78:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dbb7c:	e7f9      	b.n	dbb72 <_strtod_l+0xab2>
   dbb7e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dbb82:	9b04      	ldr	r3, [sp, #16]
   dbb84:	2b00      	cmp	r3, #0
   dbb86:	d1a8      	bne.n	dbada <_strtod_l+0xa1a>
   dbb88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dbb8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbb8e:	0d1b      	lsrs	r3, r3, #20
   dbb90:	051b      	lsls	r3, r3, #20
   dbb92:	429a      	cmp	r2, r3
   dbb94:	d1a1      	bne.n	dbada <_strtod_l+0xa1a>
   dbb96:	4640      	mov	r0, r8
   dbb98:	4649      	mov	r1, r9
   dbb9a:	f001 f967 	bl	dce6c <__aeabi_d2lz>
   dbb9e:	f7fe fc73 	bl	da488 <__aeabi_l2d>
   dbba2:	4602      	mov	r2, r0
   dbba4:	460b      	mov	r3, r1
   dbba6:	4640      	mov	r0, r8
   dbba8:	4649      	mov	r1, r9
   dbbaa:	f7fe fae3 	bl	da174 <__aeabi_dsub>
   dbbae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dbbb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dbbb4:	ea43 030a 	orr.w	r3, r3, sl
   dbbb8:	4313      	orrs	r3, r2
   dbbba:	4680      	mov	r8, r0
   dbbbc:	4689      	mov	r9, r1
   dbbbe:	d053      	beq.n	dbc68 <_strtod_l+0xba8>
   dbbc0:	a335      	add	r3, pc, #212	; (adr r3, dbc98 <_strtod_l+0xbd8>)
   dbbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbc6:	f7fe feff 	bl	da9c8 <__aeabi_dcmplt>
   dbbca:	2800      	cmp	r0, #0
   dbbcc:	f47f acce 	bne.w	db56c <_strtod_l+0x4ac>
   dbbd0:	a333      	add	r3, pc, #204	; (adr r3, dbca0 <_strtod_l+0xbe0>)
   dbbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbd6:	4640      	mov	r0, r8
   dbbd8:	4649      	mov	r1, r9
   dbbda:	f7fe ff13 	bl	daa04 <__aeabi_dcmpgt>
   dbbde:	2800      	cmp	r0, #0
   dbbe0:	f43f af7b 	beq.w	dbada <_strtod_l+0xa1a>
   dbbe4:	e4c2      	b.n	db56c <_strtod_l+0x4ac>
   dbbe6:	9b04      	ldr	r3, [sp, #16]
   dbbe8:	b333      	cbz	r3, dbc38 <_strtod_l+0xb78>
   dbbea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dbbec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dbbf0:	d822      	bhi.n	dbc38 <_strtod_l+0xb78>
   dbbf2:	a32d      	add	r3, pc, #180	; (adr r3, dbca8 <_strtod_l+0xbe8>)
   dbbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbf8:	4640      	mov	r0, r8
   dbbfa:	4649      	mov	r1, r9
   dbbfc:	f7fe feee 	bl	da9dc <__aeabi_dcmple>
   dbc00:	b1a0      	cbz	r0, dbc2c <_strtod_l+0xb6c>
   dbc02:	4649      	mov	r1, r9
   dbc04:	4640      	mov	r0, r8
   dbc06:	f7fe ff45 	bl	daa94 <__aeabi_d2uiz>
   dbc0a:	2801      	cmp	r0, #1
   dbc0c:	bf38      	it	cc
   dbc0e:	2001      	movcc	r0, #1
   dbc10:	f7fe fbee 	bl	da3f0 <__aeabi_ui2d>
   dbc14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dbc16:	4680      	mov	r8, r0
   dbc18:	4689      	mov	r9, r1
   dbc1a:	bb13      	cbnz	r3, dbc62 <_strtod_l+0xba2>
   dbc1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dbc20:	9014      	str	r0, [sp, #80]	; 0x50
   dbc22:	9315      	str	r3, [sp, #84]	; 0x54
   dbc24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dbc28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dbc2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dbc2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dbc30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dbc34:	1a9b      	subs	r3, r3, r2
   dbc36:	930d      	str	r3, [sp, #52]	; 0x34
   dbc38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbc3c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dbc40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dbc44:	f000 ffa8 	bl	dcb98 <__ulp>
   dbc48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dbc4c:	ec53 2b10 	vmov	r2, r3, d0
   dbc50:	f7fe fc48 	bl	da4e4 <__aeabi_dmul>
   dbc54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dbc58:	f7fe fa8e 	bl	da178 <__adddf3>
   dbc5c:	4682      	mov	sl, r0
   dbc5e:	468b      	mov	fp, r1
   dbc60:	e78f      	b.n	dbb82 <_strtod_l+0xac2>
   dbc62:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dbc66:	e7dd      	b.n	dbc24 <_strtod_l+0xb64>
   dbc68:	a311      	add	r3, pc, #68	; (adr r3, dbcb0 <_strtod_l+0xbf0>)
   dbc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc6e:	f7fe feab 	bl	da9c8 <__aeabi_dcmplt>
   dbc72:	e7b4      	b.n	dbbde <_strtod_l+0xb1e>
   dbc74:	2300      	movs	r3, #0
   dbc76:	930e      	str	r3, [sp, #56]	; 0x38
   dbc78:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dbc7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dbc7c:	6013      	str	r3, [r2, #0]
   dbc7e:	f7ff ba65 	b.w	db14c <_strtod_l+0x8c>
   dbc82:	2b65      	cmp	r3, #101	; 0x65
   dbc84:	f43f ab5d 	beq.w	db342 <_strtod_l+0x282>
   dbc88:	2b45      	cmp	r3, #69	; 0x45
   dbc8a:	f43f ab5a 	beq.w	db342 <_strtod_l+0x282>
   dbc8e:	2201      	movs	r2, #1
   dbc90:	f7ff bb92 	b.w	db3b8 <_strtod_l+0x2f8>
   dbc94:	f3af 8000 	nop.w
   dbc98:	94a03595 	.word	0x94a03595
   dbc9c:	3fdfffff 	.word	0x3fdfffff
   dbca0:	35afe535 	.word	0x35afe535
   dbca4:	3fe00000 	.word	0x3fe00000
   dbca8:	ffc00000 	.word	0xffc00000
   dbcac:	41dfffff 	.word	0x41dfffff
   dbcb0:	94a03595 	.word	0x94a03595
   dbcb4:	3fcfffff 	.word	0x3fcfffff
   dbcb8:	3ff00000 	.word	0x3ff00000
   dbcbc:	7ff00000 	.word	0x7ff00000
   dbcc0:	7fe00000 	.word	0x7fe00000
   dbcc4:	7c9fffff 	.word	0x7c9fffff
   dbcc8:	3fe00000 	.word	0x3fe00000
   dbccc:	bff00000 	.word	0xbff00000
   dbcd0:	7fefffff 	.word	0x7fefffff

000dbcd4 <strtod>:
   dbcd4:	460a      	mov	r2, r1
   dbcd6:	4601      	mov	r1, r0
   dbcd8:	4802      	ldr	r0, [pc, #8]	; (dbce4 <strtod+0x10>)
   dbcda:	4b03      	ldr	r3, [pc, #12]	; (dbce8 <strtod+0x14>)
   dbcdc:	6800      	ldr	r0, [r0, #0]
   dbcde:	f7ff b9ef 	b.w	db0c0 <_strtod_l>
   dbce2:	bf00      	nop
   dbce4:	2003dce8 	.word	0x2003dce8
   dbce8:	2003dd54 	.word	0x2003dd54

000dbcec <_strtol_l.isra.0>:
   dbcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbcf0:	4e3a      	ldr	r6, [pc, #232]	; (dbddc <_strtol_l.isra.0+0xf0>)
   dbcf2:	4686      	mov	lr, r0
   dbcf4:	468c      	mov	ip, r1
   dbcf6:	4660      	mov	r0, ip
   dbcf8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbcfc:	5da5      	ldrb	r5, [r4, r6]
   dbcfe:	f015 0508 	ands.w	r5, r5, #8
   dbd02:	d1f8      	bne.n	dbcf6 <_strtol_l.isra.0+0xa>
   dbd04:	2c2d      	cmp	r4, #45	; 0x2d
   dbd06:	d133      	bne.n	dbd70 <_strtol_l.isra.0+0x84>
   dbd08:	f89c 4000 	ldrb.w	r4, [ip]
   dbd0c:	f04f 0801 	mov.w	r8, #1
   dbd10:	f100 0c02 	add.w	ip, r0, #2
   dbd14:	2b00      	cmp	r3, #0
   dbd16:	d05c      	beq.n	dbdd2 <_strtol_l.isra.0+0xe6>
   dbd18:	2b10      	cmp	r3, #16
   dbd1a:	d10c      	bne.n	dbd36 <_strtol_l.isra.0+0x4a>
   dbd1c:	2c30      	cmp	r4, #48	; 0x30
   dbd1e:	d10a      	bne.n	dbd36 <_strtol_l.isra.0+0x4a>
   dbd20:	f89c 0000 	ldrb.w	r0, [ip]
   dbd24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbd28:	2858      	cmp	r0, #88	; 0x58
   dbd2a:	d14d      	bne.n	dbdc8 <_strtol_l.isra.0+0xdc>
   dbd2c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dbd30:	2310      	movs	r3, #16
   dbd32:	f10c 0c02 	add.w	ip, ip, #2
   dbd36:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dbd3a:	3f01      	subs	r7, #1
   dbd3c:	2600      	movs	r6, #0
   dbd3e:	fbb7 f9f3 	udiv	r9, r7, r3
   dbd42:	4630      	mov	r0, r6
   dbd44:	fb03 7a19 	mls	sl, r3, r9, r7
   dbd48:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dbd4c:	2d09      	cmp	r5, #9
   dbd4e:	d818      	bhi.n	dbd82 <_strtol_l.isra.0+0x96>
   dbd50:	462c      	mov	r4, r5
   dbd52:	42a3      	cmp	r3, r4
   dbd54:	dd24      	ble.n	dbda0 <_strtol_l.isra.0+0xb4>
   dbd56:	1c75      	adds	r5, r6, #1
   dbd58:	d007      	beq.n	dbd6a <_strtol_l.isra.0+0x7e>
   dbd5a:	4581      	cmp	r9, r0
   dbd5c:	d31d      	bcc.n	dbd9a <_strtol_l.isra.0+0xae>
   dbd5e:	d101      	bne.n	dbd64 <_strtol_l.isra.0+0x78>
   dbd60:	45a2      	cmp	sl, r4
   dbd62:	db1a      	blt.n	dbd9a <_strtol_l.isra.0+0xae>
   dbd64:	fb00 4003 	mla	r0, r0, r3, r4
   dbd68:	2601      	movs	r6, #1
   dbd6a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbd6e:	e7eb      	b.n	dbd48 <_strtol_l.isra.0+0x5c>
   dbd70:	2c2b      	cmp	r4, #43	; 0x2b
   dbd72:	bf08      	it	eq
   dbd74:	f89c 4000 	ldrbeq.w	r4, [ip]
   dbd78:	46a8      	mov	r8, r5
   dbd7a:	bf08      	it	eq
   dbd7c:	f100 0c02 	addeq.w	ip, r0, #2
   dbd80:	e7c8      	b.n	dbd14 <_strtol_l.isra.0+0x28>
   dbd82:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dbd86:	2d19      	cmp	r5, #25
   dbd88:	d801      	bhi.n	dbd8e <_strtol_l.isra.0+0xa2>
   dbd8a:	3c37      	subs	r4, #55	; 0x37
   dbd8c:	e7e1      	b.n	dbd52 <_strtol_l.isra.0+0x66>
   dbd8e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dbd92:	2d19      	cmp	r5, #25
   dbd94:	d804      	bhi.n	dbda0 <_strtol_l.isra.0+0xb4>
   dbd96:	3c57      	subs	r4, #87	; 0x57
   dbd98:	e7db      	b.n	dbd52 <_strtol_l.isra.0+0x66>
   dbd9a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbd9e:	e7e4      	b.n	dbd6a <_strtol_l.isra.0+0x7e>
   dbda0:	1c73      	adds	r3, r6, #1
   dbda2:	d106      	bne.n	dbdb2 <_strtol_l.isra.0+0xc6>
   dbda4:	2322      	movs	r3, #34	; 0x22
   dbda6:	f8ce 3000 	str.w	r3, [lr]
   dbdaa:	4638      	mov	r0, r7
   dbdac:	b942      	cbnz	r2, dbdc0 <_strtol_l.isra.0+0xd4>
   dbdae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbdb2:	f1b8 0f00 	cmp.w	r8, #0
   dbdb6:	d000      	beq.n	dbdba <_strtol_l.isra.0+0xce>
   dbdb8:	4240      	negs	r0, r0
   dbdba:	2a00      	cmp	r2, #0
   dbdbc:	d0f7      	beq.n	dbdae <_strtol_l.isra.0+0xc2>
   dbdbe:	b10e      	cbz	r6, dbdc4 <_strtol_l.isra.0+0xd8>
   dbdc0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dbdc4:	6011      	str	r1, [r2, #0]
   dbdc6:	e7f2      	b.n	dbdae <_strtol_l.isra.0+0xc2>
   dbdc8:	2430      	movs	r4, #48	; 0x30
   dbdca:	2b00      	cmp	r3, #0
   dbdcc:	d1b3      	bne.n	dbd36 <_strtol_l.isra.0+0x4a>
   dbdce:	2308      	movs	r3, #8
   dbdd0:	e7b1      	b.n	dbd36 <_strtol_l.isra.0+0x4a>
   dbdd2:	2c30      	cmp	r4, #48	; 0x30
   dbdd4:	d0a4      	beq.n	dbd20 <_strtol_l.isra.0+0x34>
   dbdd6:	230a      	movs	r3, #10
   dbdd8:	e7ad      	b.n	dbd36 <_strtol_l.isra.0+0x4a>
   dbdda:	bf00      	nop
   dbddc:	000de001 	.word	0x000de001

000dbde0 <strtol>:
   dbde0:	4613      	mov	r3, r2
   dbde2:	460a      	mov	r2, r1
   dbde4:	4601      	mov	r1, r0
   dbde6:	4802      	ldr	r0, [pc, #8]	; (dbdf0 <strtol+0x10>)
   dbde8:	6800      	ldr	r0, [r0, #0]
   dbdea:	f7ff bf7f 	b.w	dbcec <_strtol_l.isra.0>
   dbdee:	bf00      	nop
   dbdf0:	2003dce8 	.word	0x2003dce8

000dbdf4 <__register_exitproc>:
   dbdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbdf8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dbeb4 <__register_exitproc+0xc0>
   dbdfc:	4606      	mov	r6, r0
   dbdfe:	f8d8 0000 	ldr.w	r0, [r8]
   dbe02:	461f      	mov	r7, r3
   dbe04:	460d      	mov	r5, r1
   dbe06:	4691      	mov	r9, r2
   dbe08:	f000 fbb4 	bl	dc574 <__retarget_lock_acquire_recursive>
   dbe0c:	4b25      	ldr	r3, [pc, #148]	; (dbea4 <__register_exitproc+0xb0>)
   dbe0e:	681c      	ldr	r4, [r3, #0]
   dbe10:	b934      	cbnz	r4, dbe20 <__register_exitproc+0x2c>
   dbe12:	4c25      	ldr	r4, [pc, #148]	; (dbea8 <__register_exitproc+0xb4>)
   dbe14:	601c      	str	r4, [r3, #0]
   dbe16:	4b25      	ldr	r3, [pc, #148]	; (dbeac <__register_exitproc+0xb8>)
   dbe18:	b113      	cbz	r3, dbe20 <__register_exitproc+0x2c>
   dbe1a:	681b      	ldr	r3, [r3, #0]
   dbe1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dbe20:	6863      	ldr	r3, [r4, #4]
   dbe22:	2b1f      	cmp	r3, #31
   dbe24:	dd07      	ble.n	dbe36 <__register_exitproc+0x42>
   dbe26:	f8d8 0000 	ldr.w	r0, [r8]
   dbe2a:	f000 fba5 	bl	dc578 <__retarget_lock_release_recursive>
   dbe2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbe32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbe36:	b34e      	cbz	r6, dbe8c <__register_exitproc+0x98>
   dbe38:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dbe3c:	b988      	cbnz	r0, dbe62 <__register_exitproc+0x6e>
   dbe3e:	4b1c      	ldr	r3, [pc, #112]	; (dbeb0 <__register_exitproc+0xbc>)
   dbe40:	b923      	cbnz	r3, dbe4c <__register_exitproc+0x58>
   dbe42:	f8d8 0000 	ldr.w	r0, [r8]
   dbe46:	f000 fb96 	bl	dc576 <__retarget_lock_release>
   dbe4a:	e7f0      	b.n	dbe2e <__register_exitproc+0x3a>
   dbe4c:	f44f 7084 	mov.w	r0, #264	; 0x108
   dbe50:	f7fc fa0c 	bl	d826c <malloc>
   dbe54:	2800      	cmp	r0, #0
   dbe56:	d0f4      	beq.n	dbe42 <__register_exitproc+0x4e>
   dbe58:	2300      	movs	r3, #0
   dbe5a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dbe5e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dbe62:	6863      	ldr	r3, [r4, #4]
   dbe64:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dbe68:	2201      	movs	r2, #1
   dbe6a:	409a      	lsls	r2, r3
   dbe6c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dbe70:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dbe74:	4313      	orrs	r3, r2
   dbe76:	2e02      	cmp	r6, #2
   dbe78:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dbe7c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dbe80:	bf02      	ittt	eq
   dbe82:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dbe86:	431a      	orreq	r2, r3
   dbe88:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dbe8c:	6863      	ldr	r3, [r4, #4]
   dbe8e:	f8d8 0000 	ldr.w	r0, [r8]
   dbe92:	1c5a      	adds	r2, r3, #1
   dbe94:	3302      	adds	r3, #2
   dbe96:	6062      	str	r2, [r4, #4]
   dbe98:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dbe9c:	f000 fb6c 	bl	dc578 <__retarget_lock_release_recursive>
   dbea0:	2000      	movs	r0, #0
   dbea2:	e7c6      	b.n	dbe32 <__register_exitproc+0x3e>
   dbea4:	2003e7e0 	.word	0x2003e7e0
   dbea8:	2003e754 	.word	0x2003e754
   dbeac:	00000000 	.word	0x00000000
   dbeb0:	000d826d 	.word	0x000d826d
   dbeb4:	2003dd4c 	.word	0x2003dd4c

000dbeb8 <rshift>:
   dbeb8:	6903      	ldr	r3, [r0, #16]
   dbeba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dbebe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbec2:	ea4f 1261 	mov.w	r2, r1, asr #5
   dbec6:	f100 0414 	add.w	r4, r0, #20
   dbeca:	dd45      	ble.n	dbf58 <rshift+0xa0>
   dbecc:	f011 011f 	ands.w	r1, r1, #31
   dbed0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dbed4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dbed8:	d10c      	bne.n	dbef4 <rshift+0x3c>
   dbeda:	f100 0710 	add.w	r7, r0, #16
   dbede:	4629      	mov	r1, r5
   dbee0:	42b1      	cmp	r1, r6
   dbee2:	d334      	bcc.n	dbf4e <rshift+0x96>
   dbee4:	1a9b      	subs	r3, r3, r2
   dbee6:	009b      	lsls	r3, r3, #2
   dbee8:	1eea      	subs	r2, r5, #3
   dbeea:	4296      	cmp	r6, r2
   dbeec:	bf38      	it	cc
   dbeee:	2300      	movcc	r3, #0
   dbef0:	4423      	add	r3, r4
   dbef2:	e015      	b.n	dbf20 <rshift+0x68>
   dbef4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dbef8:	f1c1 0820 	rsb	r8, r1, #32
   dbefc:	40cf      	lsrs	r7, r1
   dbefe:	f105 0e04 	add.w	lr, r5, #4
   dbf02:	46a1      	mov	r9, r4
   dbf04:	4576      	cmp	r6, lr
   dbf06:	46f4      	mov	ip, lr
   dbf08:	d815      	bhi.n	dbf36 <rshift+0x7e>
   dbf0a:	1a9b      	subs	r3, r3, r2
   dbf0c:	009a      	lsls	r2, r3, #2
   dbf0e:	3a04      	subs	r2, #4
   dbf10:	3501      	adds	r5, #1
   dbf12:	42ae      	cmp	r6, r5
   dbf14:	bf38      	it	cc
   dbf16:	2200      	movcc	r2, #0
   dbf18:	18a3      	adds	r3, r4, r2
   dbf1a:	50a7      	str	r7, [r4, r2]
   dbf1c:	b107      	cbz	r7, dbf20 <rshift+0x68>
   dbf1e:	3304      	adds	r3, #4
   dbf20:	1b1a      	subs	r2, r3, r4
   dbf22:	42a3      	cmp	r3, r4
   dbf24:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dbf28:	bf08      	it	eq
   dbf2a:	2300      	moveq	r3, #0
   dbf2c:	6102      	str	r2, [r0, #16]
   dbf2e:	bf08      	it	eq
   dbf30:	6143      	streq	r3, [r0, #20]
   dbf32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dbf36:	f8dc c000 	ldr.w	ip, [ip]
   dbf3a:	fa0c fc08 	lsl.w	ip, ip, r8
   dbf3e:	ea4c 0707 	orr.w	r7, ip, r7
   dbf42:	f849 7b04 	str.w	r7, [r9], #4
   dbf46:	f85e 7b04 	ldr.w	r7, [lr], #4
   dbf4a:	40cf      	lsrs	r7, r1
   dbf4c:	e7da      	b.n	dbf04 <rshift+0x4c>
   dbf4e:	f851 cb04 	ldr.w	ip, [r1], #4
   dbf52:	f847 cf04 	str.w	ip, [r7, #4]!
   dbf56:	e7c3      	b.n	dbee0 <rshift+0x28>
   dbf58:	4623      	mov	r3, r4
   dbf5a:	e7e1      	b.n	dbf20 <rshift+0x68>

000dbf5c <__hexdig_fun>:
   dbf5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbf60:	2b09      	cmp	r3, #9
   dbf62:	d802      	bhi.n	dbf6a <__hexdig_fun+0xe>
   dbf64:	3820      	subs	r0, #32
   dbf66:	b2c0      	uxtb	r0, r0
   dbf68:	4770      	bx	lr
   dbf6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dbf6e:	2b05      	cmp	r3, #5
   dbf70:	d801      	bhi.n	dbf76 <__hexdig_fun+0x1a>
   dbf72:	3847      	subs	r0, #71	; 0x47
   dbf74:	e7f7      	b.n	dbf66 <__hexdig_fun+0xa>
   dbf76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dbf7a:	2b05      	cmp	r3, #5
   dbf7c:	d801      	bhi.n	dbf82 <__hexdig_fun+0x26>
   dbf7e:	3827      	subs	r0, #39	; 0x27
   dbf80:	e7f1      	b.n	dbf66 <__hexdig_fun+0xa>
   dbf82:	2000      	movs	r0, #0
   dbf84:	4770      	bx	lr
	...

000dbf88 <__gethex>:
   dbf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf8c:	ed2d 8b02 	vpush	{d8}
   dbf90:	b089      	sub	sp, #36	; 0x24
   dbf92:	ee08 0a10 	vmov	s16, r0
   dbf96:	9304      	str	r3, [sp, #16]
   dbf98:	4bbc      	ldr	r3, [pc, #752]	; (dc28c <__gethex+0x304>)
   dbf9a:	681b      	ldr	r3, [r3, #0]
   dbf9c:	9301      	str	r3, [sp, #4]
   dbf9e:	4618      	mov	r0, r3
   dbfa0:	468b      	mov	fp, r1
   dbfa2:	4690      	mov	r8, r2
   dbfa4:	f7ff f82b 	bl	daffe <strlen>
   dbfa8:	9b01      	ldr	r3, [sp, #4]
   dbfaa:	f8db 2000 	ldr.w	r2, [fp]
   dbfae:	4403      	add	r3, r0
   dbfb0:	4682      	mov	sl, r0
   dbfb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dbfb6:	9305      	str	r3, [sp, #20]
   dbfb8:	1c93      	adds	r3, r2, #2
   dbfba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dbfbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dbfc2:	32fe      	adds	r2, #254	; 0xfe
   dbfc4:	18d1      	adds	r1, r2, r3
   dbfc6:	461f      	mov	r7, r3
   dbfc8:	f813 0b01 	ldrb.w	r0, [r3], #1
   dbfcc:	9100      	str	r1, [sp, #0]
   dbfce:	2830      	cmp	r0, #48	; 0x30
   dbfd0:	d0f8      	beq.n	dbfc4 <__gethex+0x3c>
   dbfd2:	f7ff ffc3 	bl	dbf5c <__hexdig_fun>
   dbfd6:	4604      	mov	r4, r0
   dbfd8:	2800      	cmp	r0, #0
   dbfda:	d13a      	bne.n	dc052 <__gethex+0xca>
   dbfdc:	9901      	ldr	r1, [sp, #4]
   dbfde:	4652      	mov	r2, sl
   dbfe0:	4638      	mov	r0, r7
   dbfe2:	f7ff f814 	bl	db00e <strncmp>
   dbfe6:	4605      	mov	r5, r0
   dbfe8:	2800      	cmp	r0, #0
   dbfea:	d168      	bne.n	dc0be <__gethex+0x136>
   dbfec:	f817 000a 	ldrb.w	r0, [r7, sl]
   dbff0:	eb07 060a 	add.w	r6, r7, sl
   dbff4:	f7ff ffb2 	bl	dbf5c <__hexdig_fun>
   dbff8:	2800      	cmp	r0, #0
   dbffa:	d062      	beq.n	dc0c2 <__gethex+0x13a>
   dbffc:	4633      	mov	r3, r6
   dbffe:	7818      	ldrb	r0, [r3, #0]
   dc000:	2830      	cmp	r0, #48	; 0x30
   dc002:	461f      	mov	r7, r3
   dc004:	f103 0301 	add.w	r3, r3, #1
   dc008:	d0f9      	beq.n	dbffe <__gethex+0x76>
   dc00a:	f7ff ffa7 	bl	dbf5c <__hexdig_fun>
   dc00e:	2301      	movs	r3, #1
   dc010:	fab0 f480 	clz	r4, r0
   dc014:	0964      	lsrs	r4, r4, #5
   dc016:	4635      	mov	r5, r6
   dc018:	9300      	str	r3, [sp, #0]
   dc01a:	463a      	mov	r2, r7
   dc01c:	4616      	mov	r6, r2
   dc01e:	3201      	adds	r2, #1
   dc020:	7830      	ldrb	r0, [r6, #0]
   dc022:	f7ff ff9b 	bl	dbf5c <__hexdig_fun>
   dc026:	2800      	cmp	r0, #0
   dc028:	d1f8      	bne.n	dc01c <__gethex+0x94>
   dc02a:	9901      	ldr	r1, [sp, #4]
   dc02c:	4652      	mov	r2, sl
   dc02e:	4630      	mov	r0, r6
   dc030:	f7fe ffed 	bl	db00e <strncmp>
   dc034:	b980      	cbnz	r0, dc058 <__gethex+0xd0>
   dc036:	b94d      	cbnz	r5, dc04c <__gethex+0xc4>
   dc038:	eb06 050a 	add.w	r5, r6, sl
   dc03c:	462a      	mov	r2, r5
   dc03e:	4616      	mov	r6, r2
   dc040:	3201      	adds	r2, #1
   dc042:	7830      	ldrb	r0, [r6, #0]
   dc044:	f7ff ff8a 	bl	dbf5c <__hexdig_fun>
   dc048:	2800      	cmp	r0, #0
   dc04a:	d1f8      	bne.n	dc03e <__gethex+0xb6>
   dc04c:	1bad      	subs	r5, r5, r6
   dc04e:	00ad      	lsls	r5, r5, #2
   dc050:	e004      	b.n	dc05c <__gethex+0xd4>
   dc052:	2400      	movs	r4, #0
   dc054:	4625      	mov	r5, r4
   dc056:	e7e0      	b.n	dc01a <__gethex+0x92>
   dc058:	2d00      	cmp	r5, #0
   dc05a:	d1f7      	bne.n	dc04c <__gethex+0xc4>
   dc05c:	7833      	ldrb	r3, [r6, #0]
   dc05e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc062:	2b50      	cmp	r3, #80	; 0x50
   dc064:	d13b      	bne.n	dc0de <__gethex+0x156>
   dc066:	7873      	ldrb	r3, [r6, #1]
   dc068:	2b2b      	cmp	r3, #43	; 0x2b
   dc06a:	d02c      	beq.n	dc0c6 <__gethex+0x13e>
   dc06c:	2b2d      	cmp	r3, #45	; 0x2d
   dc06e:	d02e      	beq.n	dc0ce <__gethex+0x146>
   dc070:	1c71      	adds	r1, r6, #1
   dc072:	f04f 0900 	mov.w	r9, #0
   dc076:	7808      	ldrb	r0, [r1, #0]
   dc078:	f7ff ff70 	bl	dbf5c <__hexdig_fun>
   dc07c:	1e43      	subs	r3, r0, #1
   dc07e:	b2db      	uxtb	r3, r3
   dc080:	2b18      	cmp	r3, #24
   dc082:	d82c      	bhi.n	dc0de <__gethex+0x156>
   dc084:	f1a0 0210 	sub.w	r2, r0, #16
   dc088:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dc08c:	f7ff ff66 	bl	dbf5c <__hexdig_fun>
   dc090:	1e43      	subs	r3, r0, #1
   dc092:	b2db      	uxtb	r3, r3
   dc094:	2b18      	cmp	r3, #24
   dc096:	d91d      	bls.n	dc0d4 <__gethex+0x14c>
   dc098:	f1b9 0f00 	cmp.w	r9, #0
   dc09c:	d000      	beq.n	dc0a0 <__gethex+0x118>
   dc09e:	4252      	negs	r2, r2
   dc0a0:	4415      	add	r5, r2
   dc0a2:	f8cb 1000 	str.w	r1, [fp]
   dc0a6:	b1e4      	cbz	r4, dc0e2 <__gethex+0x15a>
   dc0a8:	9b00      	ldr	r3, [sp, #0]
   dc0aa:	2b00      	cmp	r3, #0
   dc0ac:	bf14      	ite	ne
   dc0ae:	2700      	movne	r7, #0
   dc0b0:	2706      	moveq	r7, #6
   dc0b2:	4638      	mov	r0, r7
   dc0b4:	b009      	add	sp, #36	; 0x24
   dc0b6:	ecbd 8b02 	vpop	{d8}
   dc0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc0be:	463e      	mov	r6, r7
   dc0c0:	4625      	mov	r5, r4
   dc0c2:	2401      	movs	r4, #1
   dc0c4:	e7ca      	b.n	dc05c <__gethex+0xd4>
   dc0c6:	f04f 0900 	mov.w	r9, #0
   dc0ca:	1cb1      	adds	r1, r6, #2
   dc0cc:	e7d3      	b.n	dc076 <__gethex+0xee>
   dc0ce:	f04f 0901 	mov.w	r9, #1
   dc0d2:	e7fa      	b.n	dc0ca <__gethex+0x142>
   dc0d4:	230a      	movs	r3, #10
   dc0d6:	fb03 0202 	mla	r2, r3, r2, r0
   dc0da:	3a10      	subs	r2, #16
   dc0dc:	e7d4      	b.n	dc088 <__gethex+0x100>
   dc0de:	4631      	mov	r1, r6
   dc0e0:	e7df      	b.n	dc0a2 <__gethex+0x11a>
   dc0e2:	1bf3      	subs	r3, r6, r7
   dc0e4:	3b01      	subs	r3, #1
   dc0e6:	4621      	mov	r1, r4
   dc0e8:	2b07      	cmp	r3, #7
   dc0ea:	dc52      	bgt.n	dc192 <__gethex+0x20a>
   dc0ec:	ee18 0a10 	vmov	r0, s16
   dc0f0:	f000 fa55 	bl	dc59e <_Balloc>
   dc0f4:	f04f 0b00 	mov.w	fp, #0
   dc0f8:	f100 0914 	add.w	r9, r0, #20
   dc0fc:	f1ca 0301 	rsb	r3, sl, #1
   dc100:	4604      	mov	r4, r0
   dc102:	f8cd 9008 	str.w	r9, [sp, #8]
   dc106:	f8cd b000 	str.w	fp, [sp]
   dc10a:	9306      	str	r3, [sp, #24]
   dc10c:	42b7      	cmp	r7, r6
   dc10e:	d343      	bcc.n	dc198 <__gethex+0x210>
   dc110:	9802      	ldr	r0, [sp, #8]
   dc112:	9b00      	ldr	r3, [sp, #0]
   dc114:	f840 3b04 	str.w	r3, [r0], #4
   dc118:	eba0 0009 	sub.w	r0, r0, r9
   dc11c:	1080      	asrs	r0, r0, #2
   dc11e:	0146      	lsls	r6, r0, #5
   dc120:	6120      	str	r0, [r4, #16]
   dc122:	4618      	mov	r0, r3
   dc124:	f000 fb02 	bl	dc72c <__hi0bits>
   dc128:	1a30      	subs	r0, r6, r0
   dc12a:	f8d8 6000 	ldr.w	r6, [r8]
   dc12e:	42b0      	cmp	r0, r6
   dc130:	dd66      	ble.n	dc200 <__gethex+0x278>
   dc132:	1b87      	subs	r7, r0, r6
   dc134:	4639      	mov	r1, r7
   dc136:	4620      	mov	r0, r4
   dc138:	f000 fe50 	bl	dcddc <__any_on>
   dc13c:	4682      	mov	sl, r0
   dc13e:	b1a8      	cbz	r0, dc16c <__gethex+0x1e4>
   dc140:	1e7b      	subs	r3, r7, #1
   dc142:	1159      	asrs	r1, r3, #5
   dc144:	f003 021f 	and.w	r2, r3, #31
   dc148:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dc14c:	f04f 0a01 	mov.w	sl, #1
   dc150:	fa0a f202 	lsl.w	r2, sl, r2
   dc154:	420a      	tst	r2, r1
   dc156:	d009      	beq.n	dc16c <__gethex+0x1e4>
   dc158:	4553      	cmp	r3, sl
   dc15a:	dd05      	ble.n	dc168 <__gethex+0x1e0>
   dc15c:	1eb9      	subs	r1, r7, #2
   dc15e:	4620      	mov	r0, r4
   dc160:	f000 fe3c 	bl	dcddc <__any_on>
   dc164:	2800      	cmp	r0, #0
   dc166:	d148      	bne.n	dc1fa <__gethex+0x272>
   dc168:	f04f 0a02 	mov.w	sl, #2
   dc16c:	4639      	mov	r1, r7
   dc16e:	4620      	mov	r0, r4
   dc170:	f7ff fea2 	bl	dbeb8 <rshift>
   dc174:	443d      	add	r5, r7
   dc176:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc17a:	42ab      	cmp	r3, r5
   dc17c:	da4f      	bge.n	dc21e <__gethex+0x296>
   dc17e:	ee18 0a10 	vmov	r0, s16
   dc182:	4621      	mov	r1, r4
   dc184:	f000 fa3f 	bl	dc606 <_Bfree>
   dc188:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc18a:	2300      	movs	r3, #0
   dc18c:	6013      	str	r3, [r2, #0]
   dc18e:	27a3      	movs	r7, #163	; 0xa3
   dc190:	e78f      	b.n	dc0b2 <__gethex+0x12a>
   dc192:	3101      	adds	r1, #1
   dc194:	105b      	asrs	r3, r3, #1
   dc196:	e7a7      	b.n	dc0e8 <__gethex+0x160>
   dc198:	1e73      	subs	r3, r6, #1
   dc19a:	9a05      	ldr	r2, [sp, #20]
   dc19c:	9303      	str	r3, [sp, #12]
   dc19e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dc1a2:	4293      	cmp	r3, r2
   dc1a4:	d019      	beq.n	dc1da <__gethex+0x252>
   dc1a6:	f1bb 0f20 	cmp.w	fp, #32
   dc1aa:	d107      	bne.n	dc1bc <__gethex+0x234>
   dc1ac:	9b02      	ldr	r3, [sp, #8]
   dc1ae:	9a00      	ldr	r2, [sp, #0]
   dc1b0:	f843 2b04 	str.w	r2, [r3], #4
   dc1b4:	9302      	str	r3, [sp, #8]
   dc1b6:	2300      	movs	r3, #0
   dc1b8:	9300      	str	r3, [sp, #0]
   dc1ba:	469b      	mov	fp, r3
   dc1bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dc1c0:	f7ff fecc 	bl	dbf5c <__hexdig_fun>
   dc1c4:	9b00      	ldr	r3, [sp, #0]
   dc1c6:	f000 000f 	and.w	r0, r0, #15
   dc1ca:	fa00 f00b 	lsl.w	r0, r0, fp
   dc1ce:	4303      	orrs	r3, r0
   dc1d0:	9300      	str	r3, [sp, #0]
   dc1d2:	f10b 0b04 	add.w	fp, fp, #4
   dc1d6:	9b03      	ldr	r3, [sp, #12]
   dc1d8:	e00d      	b.n	dc1f6 <__gethex+0x26e>
   dc1da:	9b03      	ldr	r3, [sp, #12]
   dc1dc:	9a06      	ldr	r2, [sp, #24]
   dc1de:	4413      	add	r3, r2
   dc1e0:	42bb      	cmp	r3, r7
   dc1e2:	d3e0      	bcc.n	dc1a6 <__gethex+0x21e>
   dc1e4:	4618      	mov	r0, r3
   dc1e6:	9901      	ldr	r1, [sp, #4]
   dc1e8:	9307      	str	r3, [sp, #28]
   dc1ea:	4652      	mov	r2, sl
   dc1ec:	f7fe ff0f 	bl	db00e <strncmp>
   dc1f0:	9b07      	ldr	r3, [sp, #28]
   dc1f2:	2800      	cmp	r0, #0
   dc1f4:	d1d7      	bne.n	dc1a6 <__gethex+0x21e>
   dc1f6:	461e      	mov	r6, r3
   dc1f8:	e788      	b.n	dc10c <__gethex+0x184>
   dc1fa:	f04f 0a03 	mov.w	sl, #3
   dc1fe:	e7b5      	b.n	dc16c <__gethex+0x1e4>
   dc200:	da0a      	bge.n	dc218 <__gethex+0x290>
   dc202:	1a37      	subs	r7, r6, r0
   dc204:	4621      	mov	r1, r4
   dc206:	ee18 0a10 	vmov	r0, s16
   dc20a:	463a      	mov	r2, r7
   dc20c:	f000 fbd2 	bl	dc9b4 <__lshift>
   dc210:	1bed      	subs	r5, r5, r7
   dc212:	4604      	mov	r4, r0
   dc214:	f100 0914 	add.w	r9, r0, #20
   dc218:	f04f 0a00 	mov.w	sl, #0
   dc21c:	e7ab      	b.n	dc176 <__gethex+0x1ee>
   dc21e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dc222:	42a8      	cmp	r0, r5
   dc224:	dd6d      	ble.n	dc302 <__gethex+0x37a>
   dc226:	1b45      	subs	r5, r0, r5
   dc228:	42ae      	cmp	r6, r5
   dc22a:	dc31      	bgt.n	dc290 <__gethex+0x308>
   dc22c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc230:	2b02      	cmp	r3, #2
   dc232:	d023      	beq.n	dc27c <__gethex+0x2f4>
   dc234:	2b03      	cmp	r3, #3
   dc236:	d025      	beq.n	dc284 <__gethex+0x2fc>
   dc238:	2b01      	cmp	r3, #1
   dc23a:	d115      	bne.n	dc268 <__gethex+0x2e0>
   dc23c:	42ae      	cmp	r6, r5
   dc23e:	d113      	bne.n	dc268 <__gethex+0x2e0>
   dc240:	2e01      	cmp	r6, #1
   dc242:	d10b      	bne.n	dc25c <__gethex+0x2d4>
   dc244:	9a04      	ldr	r2, [sp, #16]
   dc246:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dc24a:	6013      	str	r3, [r2, #0]
   dc24c:	2301      	movs	r3, #1
   dc24e:	6123      	str	r3, [r4, #16]
   dc250:	f8c9 3000 	str.w	r3, [r9]
   dc254:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc256:	2762      	movs	r7, #98	; 0x62
   dc258:	601c      	str	r4, [r3, #0]
   dc25a:	e72a      	b.n	dc0b2 <__gethex+0x12a>
   dc25c:	1e71      	subs	r1, r6, #1
   dc25e:	4620      	mov	r0, r4
   dc260:	f000 fdbc 	bl	dcddc <__any_on>
   dc264:	2800      	cmp	r0, #0
   dc266:	d1ed      	bne.n	dc244 <__gethex+0x2bc>
   dc268:	ee18 0a10 	vmov	r0, s16
   dc26c:	4621      	mov	r1, r4
   dc26e:	f000 f9ca 	bl	dc606 <_Bfree>
   dc272:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc274:	2300      	movs	r3, #0
   dc276:	6013      	str	r3, [r2, #0]
   dc278:	2750      	movs	r7, #80	; 0x50
   dc27a:	e71a      	b.n	dc0b2 <__gethex+0x12a>
   dc27c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc27e:	2b00      	cmp	r3, #0
   dc280:	d1f2      	bne.n	dc268 <__gethex+0x2e0>
   dc282:	e7df      	b.n	dc244 <__gethex+0x2bc>
   dc284:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc286:	2b00      	cmp	r3, #0
   dc288:	d1dc      	bne.n	dc244 <__gethex+0x2bc>
   dc28a:	e7ed      	b.n	dc268 <__gethex+0x2e0>
   dc28c:	000de104 	.word	0x000de104
   dc290:	1e6f      	subs	r7, r5, #1
   dc292:	f1ba 0f00 	cmp.w	sl, #0
   dc296:	d131      	bne.n	dc2fc <__gethex+0x374>
   dc298:	b127      	cbz	r7, dc2a4 <__gethex+0x31c>
   dc29a:	4639      	mov	r1, r7
   dc29c:	4620      	mov	r0, r4
   dc29e:	f000 fd9d 	bl	dcddc <__any_on>
   dc2a2:	4682      	mov	sl, r0
   dc2a4:	117b      	asrs	r3, r7, #5
   dc2a6:	2101      	movs	r1, #1
   dc2a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dc2ac:	f007 071f 	and.w	r7, r7, #31
   dc2b0:	fa01 f707 	lsl.w	r7, r1, r7
   dc2b4:	421f      	tst	r7, r3
   dc2b6:	4629      	mov	r1, r5
   dc2b8:	4620      	mov	r0, r4
   dc2ba:	bf18      	it	ne
   dc2bc:	f04a 0a02 	orrne.w	sl, sl, #2
   dc2c0:	1b76      	subs	r6, r6, r5
   dc2c2:	f7ff fdf9 	bl	dbeb8 <rshift>
   dc2c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dc2ca:	2702      	movs	r7, #2
   dc2cc:	f1ba 0f00 	cmp.w	sl, #0
   dc2d0:	d048      	beq.n	dc364 <__gethex+0x3dc>
   dc2d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc2d6:	2b02      	cmp	r3, #2
   dc2d8:	d015      	beq.n	dc306 <__gethex+0x37e>
   dc2da:	2b03      	cmp	r3, #3
   dc2dc:	d017      	beq.n	dc30e <__gethex+0x386>
   dc2de:	2b01      	cmp	r3, #1
   dc2e0:	d109      	bne.n	dc2f6 <__gethex+0x36e>
   dc2e2:	f01a 0f02 	tst.w	sl, #2
   dc2e6:	d006      	beq.n	dc2f6 <__gethex+0x36e>
   dc2e8:	f8d9 0000 	ldr.w	r0, [r9]
   dc2ec:	ea4a 0a00 	orr.w	sl, sl, r0
   dc2f0:	f01a 0f01 	tst.w	sl, #1
   dc2f4:	d10e      	bne.n	dc314 <__gethex+0x38c>
   dc2f6:	f047 0710 	orr.w	r7, r7, #16
   dc2fa:	e033      	b.n	dc364 <__gethex+0x3dc>
   dc2fc:	f04f 0a01 	mov.w	sl, #1
   dc300:	e7d0      	b.n	dc2a4 <__gethex+0x31c>
   dc302:	2701      	movs	r7, #1
   dc304:	e7e2      	b.n	dc2cc <__gethex+0x344>
   dc306:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc308:	f1c3 0301 	rsb	r3, r3, #1
   dc30c:	9315      	str	r3, [sp, #84]	; 0x54
   dc30e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc310:	2b00      	cmp	r3, #0
   dc312:	d0f0      	beq.n	dc2f6 <__gethex+0x36e>
   dc314:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc318:	f104 0314 	add.w	r3, r4, #20
   dc31c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dc320:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dc324:	f04f 0c00 	mov.w	ip, #0
   dc328:	4618      	mov	r0, r3
   dc32a:	f853 2b04 	ldr.w	r2, [r3], #4
   dc32e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc332:	d01c      	beq.n	dc36e <__gethex+0x3e6>
   dc334:	3201      	adds	r2, #1
   dc336:	6002      	str	r2, [r0, #0]
   dc338:	2f02      	cmp	r7, #2
   dc33a:	f104 0314 	add.w	r3, r4, #20
   dc33e:	d13a      	bne.n	dc3b6 <__gethex+0x42e>
   dc340:	f8d8 2000 	ldr.w	r2, [r8]
   dc344:	3a01      	subs	r2, #1
   dc346:	42b2      	cmp	r2, r6
   dc348:	d10a      	bne.n	dc360 <__gethex+0x3d8>
   dc34a:	1171      	asrs	r1, r6, #5
   dc34c:	2201      	movs	r2, #1
   dc34e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dc352:	f006 061f 	and.w	r6, r6, #31
   dc356:	fa02 f606 	lsl.w	r6, r2, r6
   dc35a:	421e      	tst	r6, r3
   dc35c:	bf18      	it	ne
   dc35e:	4617      	movne	r7, r2
   dc360:	f047 0720 	orr.w	r7, r7, #32
   dc364:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc366:	601c      	str	r4, [r3, #0]
   dc368:	9b04      	ldr	r3, [sp, #16]
   dc36a:	601d      	str	r5, [r3, #0]
   dc36c:	e6a1      	b.n	dc0b2 <__gethex+0x12a>
   dc36e:	4299      	cmp	r1, r3
   dc370:	f843 cc04 	str.w	ip, [r3, #-4]
   dc374:	d8d8      	bhi.n	dc328 <__gethex+0x3a0>
   dc376:	68a3      	ldr	r3, [r4, #8]
   dc378:	4599      	cmp	r9, r3
   dc37a:	db14      	blt.n	dc3a6 <__gethex+0x41e>
   dc37c:	6861      	ldr	r1, [r4, #4]
   dc37e:	ee18 0a10 	vmov	r0, s16
   dc382:	3101      	adds	r1, #1
   dc384:	f000 f90b 	bl	dc59e <_Balloc>
   dc388:	6922      	ldr	r2, [r4, #16]
   dc38a:	3202      	adds	r2, #2
   dc38c:	f104 010c 	add.w	r1, r4, #12
   dc390:	4682      	mov	sl, r0
   dc392:	0092      	lsls	r2, r2, #2
   dc394:	300c      	adds	r0, #12
   dc396:	f7fe fdc8 	bl	daf2a <memcpy>
   dc39a:	4621      	mov	r1, r4
   dc39c:	ee18 0a10 	vmov	r0, s16
   dc3a0:	f000 f931 	bl	dc606 <_Bfree>
   dc3a4:	4654      	mov	r4, sl
   dc3a6:	6923      	ldr	r3, [r4, #16]
   dc3a8:	1c5a      	adds	r2, r3, #1
   dc3aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dc3ae:	6122      	str	r2, [r4, #16]
   dc3b0:	2201      	movs	r2, #1
   dc3b2:	615a      	str	r2, [r3, #20]
   dc3b4:	e7c0      	b.n	dc338 <__gethex+0x3b0>
   dc3b6:	6922      	ldr	r2, [r4, #16]
   dc3b8:	454a      	cmp	r2, r9
   dc3ba:	dd0b      	ble.n	dc3d4 <__gethex+0x44c>
   dc3bc:	2101      	movs	r1, #1
   dc3be:	4620      	mov	r0, r4
   dc3c0:	f7ff fd7a 	bl	dbeb8 <rshift>
   dc3c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc3c8:	3501      	adds	r5, #1
   dc3ca:	42ab      	cmp	r3, r5
   dc3cc:	f6ff aed7 	blt.w	dc17e <__gethex+0x1f6>
   dc3d0:	2701      	movs	r7, #1
   dc3d2:	e7c5      	b.n	dc360 <__gethex+0x3d8>
   dc3d4:	f016 061f 	ands.w	r6, r6, #31
   dc3d8:	d0fa      	beq.n	dc3d0 <__gethex+0x448>
   dc3da:	449b      	add	fp, r3
   dc3dc:	f1c6 0620 	rsb	r6, r6, #32
   dc3e0:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dc3e4:	f000 f9a2 	bl	dc72c <__hi0bits>
   dc3e8:	42b0      	cmp	r0, r6
   dc3ea:	dbe7      	blt.n	dc3bc <__gethex+0x434>
   dc3ec:	e7f0      	b.n	dc3d0 <__gethex+0x448>
   dc3ee:	bf00      	nop

000dc3f0 <L_shift>:
   dc3f0:	f1c2 0208 	rsb	r2, r2, #8
   dc3f4:	0092      	lsls	r2, r2, #2
   dc3f6:	b570      	push	{r4, r5, r6, lr}
   dc3f8:	f1c2 0620 	rsb	r6, r2, #32
   dc3fc:	6843      	ldr	r3, [r0, #4]
   dc3fe:	6804      	ldr	r4, [r0, #0]
   dc400:	fa03 f506 	lsl.w	r5, r3, r6
   dc404:	432c      	orrs	r4, r5
   dc406:	40d3      	lsrs	r3, r2
   dc408:	6004      	str	r4, [r0, #0]
   dc40a:	f840 3f04 	str.w	r3, [r0, #4]!
   dc40e:	4288      	cmp	r0, r1
   dc410:	d3f4      	bcc.n	dc3fc <L_shift+0xc>
   dc412:	bd70      	pop	{r4, r5, r6, pc}

000dc414 <__match>:
   dc414:	b530      	push	{r4, r5, lr}
   dc416:	6803      	ldr	r3, [r0, #0]
   dc418:	3301      	adds	r3, #1
   dc41a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc41e:	b914      	cbnz	r4, dc426 <__match+0x12>
   dc420:	6003      	str	r3, [r0, #0]
   dc422:	2001      	movs	r0, #1
   dc424:	bd30      	pop	{r4, r5, pc}
   dc426:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc42a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc42e:	2d19      	cmp	r5, #25
   dc430:	bf98      	it	ls
   dc432:	3220      	addls	r2, #32
   dc434:	42a2      	cmp	r2, r4
   dc436:	d0f0      	beq.n	dc41a <__match+0x6>
   dc438:	2000      	movs	r0, #0
   dc43a:	e7f3      	b.n	dc424 <__match+0x10>

000dc43c <__hexnan>:
   dc43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc440:	680b      	ldr	r3, [r1, #0]
   dc442:	6801      	ldr	r1, [r0, #0]
   dc444:	115e      	asrs	r6, r3, #5
   dc446:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc44a:	f013 031f 	ands.w	r3, r3, #31
   dc44e:	b087      	sub	sp, #28
   dc450:	bf18      	it	ne
   dc452:	3604      	addne	r6, #4
   dc454:	2500      	movs	r5, #0
   dc456:	1f37      	subs	r7, r6, #4
   dc458:	4682      	mov	sl, r0
   dc45a:	4690      	mov	r8, r2
   dc45c:	9301      	str	r3, [sp, #4]
   dc45e:	f846 5c04 	str.w	r5, [r6, #-4]
   dc462:	46b9      	mov	r9, r7
   dc464:	463c      	mov	r4, r7
   dc466:	9502      	str	r5, [sp, #8]
   dc468:	46ab      	mov	fp, r5
   dc46a:	784a      	ldrb	r2, [r1, #1]
   dc46c:	1c4b      	adds	r3, r1, #1
   dc46e:	9303      	str	r3, [sp, #12]
   dc470:	b342      	cbz	r2, dc4c4 <__hexnan+0x88>
   dc472:	4610      	mov	r0, r2
   dc474:	9105      	str	r1, [sp, #20]
   dc476:	9204      	str	r2, [sp, #16]
   dc478:	f7ff fd70 	bl	dbf5c <__hexdig_fun>
   dc47c:	2800      	cmp	r0, #0
   dc47e:	d14f      	bne.n	dc520 <__hexnan+0xe4>
   dc480:	9a04      	ldr	r2, [sp, #16]
   dc482:	9905      	ldr	r1, [sp, #20]
   dc484:	2a20      	cmp	r2, #32
   dc486:	d818      	bhi.n	dc4ba <__hexnan+0x7e>
   dc488:	9b02      	ldr	r3, [sp, #8]
   dc48a:	459b      	cmp	fp, r3
   dc48c:	dd13      	ble.n	dc4b6 <__hexnan+0x7a>
   dc48e:	454c      	cmp	r4, r9
   dc490:	d206      	bcs.n	dc4a0 <__hexnan+0x64>
   dc492:	2d07      	cmp	r5, #7
   dc494:	dc04      	bgt.n	dc4a0 <__hexnan+0x64>
   dc496:	462a      	mov	r2, r5
   dc498:	4649      	mov	r1, r9
   dc49a:	4620      	mov	r0, r4
   dc49c:	f7ff ffa8 	bl	dc3f0 <L_shift>
   dc4a0:	4544      	cmp	r4, r8
   dc4a2:	d950      	bls.n	dc546 <__hexnan+0x10a>
   dc4a4:	2300      	movs	r3, #0
   dc4a6:	f1a4 0904 	sub.w	r9, r4, #4
   dc4aa:	f844 3c04 	str.w	r3, [r4, #-4]
   dc4ae:	f8cd b008 	str.w	fp, [sp, #8]
   dc4b2:	464c      	mov	r4, r9
   dc4b4:	461d      	mov	r5, r3
   dc4b6:	9903      	ldr	r1, [sp, #12]
   dc4b8:	e7d7      	b.n	dc46a <__hexnan+0x2e>
   dc4ba:	2a29      	cmp	r2, #41	; 0x29
   dc4bc:	d156      	bne.n	dc56c <__hexnan+0x130>
   dc4be:	3102      	adds	r1, #2
   dc4c0:	f8ca 1000 	str.w	r1, [sl]
   dc4c4:	f1bb 0f00 	cmp.w	fp, #0
   dc4c8:	d050      	beq.n	dc56c <__hexnan+0x130>
   dc4ca:	454c      	cmp	r4, r9
   dc4cc:	d206      	bcs.n	dc4dc <__hexnan+0xa0>
   dc4ce:	2d07      	cmp	r5, #7
   dc4d0:	dc04      	bgt.n	dc4dc <__hexnan+0xa0>
   dc4d2:	462a      	mov	r2, r5
   dc4d4:	4649      	mov	r1, r9
   dc4d6:	4620      	mov	r0, r4
   dc4d8:	f7ff ff8a 	bl	dc3f0 <L_shift>
   dc4dc:	4544      	cmp	r4, r8
   dc4de:	d934      	bls.n	dc54a <__hexnan+0x10e>
   dc4e0:	f1a8 0204 	sub.w	r2, r8, #4
   dc4e4:	4623      	mov	r3, r4
   dc4e6:	f853 1b04 	ldr.w	r1, [r3], #4
   dc4ea:	f842 1f04 	str.w	r1, [r2, #4]!
   dc4ee:	429f      	cmp	r7, r3
   dc4f0:	d2f9      	bcs.n	dc4e6 <__hexnan+0xaa>
   dc4f2:	1b3b      	subs	r3, r7, r4
   dc4f4:	f023 0303 	bic.w	r3, r3, #3
   dc4f8:	3304      	adds	r3, #4
   dc4fa:	3401      	adds	r4, #1
   dc4fc:	3e03      	subs	r6, #3
   dc4fe:	42b4      	cmp	r4, r6
   dc500:	bf88      	it	hi
   dc502:	2304      	movhi	r3, #4
   dc504:	4443      	add	r3, r8
   dc506:	2200      	movs	r2, #0
   dc508:	f843 2b04 	str.w	r2, [r3], #4
   dc50c:	429f      	cmp	r7, r3
   dc50e:	d2fb      	bcs.n	dc508 <__hexnan+0xcc>
   dc510:	683b      	ldr	r3, [r7, #0]
   dc512:	b91b      	cbnz	r3, dc51c <__hexnan+0xe0>
   dc514:	4547      	cmp	r7, r8
   dc516:	d127      	bne.n	dc568 <__hexnan+0x12c>
   dc518:	2301      	movs	r3, #1
   dc51a:	603b      	str	r3, [r7, #0]
   dc51c:	2005      	movs	r0, #5
   dc51e:	e026      	b.n	dc56e <__hexnan+0x132>
   dc520:	3501      	adds	r5, #1
   dc522:	2d08      	cmp	r5, #8
   dc524:	f10b 0b01 	add.w	fp, fp, #1
   dc528:	dd06      	ble.n	dc538 <__hexnan+0xfc>
   dc52a:	4544      	cmp	r4, r8
   dc52c:	d9c3      	bls.n	dc4b6 <__hexnan+0x7a>
   dc52e:	2300      	movs	r3, #0
   dc530:	f844 3c04 	str.w	r3, [r4, #-4]
   dc534:	2501      	movs	r5, #1
   dc536:	3c04      	subs	r4, #4
   dc538:	6822      	ldr	r2, [r4, #0]
   dc53a:	f000 000f 	and.w	r0, r0, #15
   dc53e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dc542:	6022      	str	r2, [r4, #0]
   dc544:	e7b7      	b.n	dc4b6 <__hexnan+0x7a>
   dc546:	2508      	movs	r5, #8
   dc548:	e7b5      	b.n	dc4b6 <__hexnan+0x7a>
   dc54a:	9b01      	ldr	r3, [sp, #4]
   dc54c:	2b00      	cmp	r3, #0
   dc54e:	d0df      	beq.n	dc510 <__hexnan+0xd4>
   dc550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc554:	f1c3 0320 	rsb	r3, r3, #32
   dc558:	fa22 f303 	lsr.w	r3, r2, r3
   dc55c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc560:	401a      	ands	r2, r3
   dc562:	f846 2c04 	str.w	r2, [r6, #-4]
   dc566:	e7d3      	b.n	dc510 <__hexnan+0xd4>
   dc568:	3f04      	subs	r7, #4
   dc56a:	e7d1      	b.n	dc510 <__hexnan+0xd4>
   dc56c:	2004      	movs	r0, #4
   dc56e:	b007      	add	sp, #28
   dc570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc574 <__retarget_lock_acquire_recursive>:
   dc574:	4770      	bx	lr

000dc576 <__retarget_lock_release>:
   dc576:	4770      	bx	lr

000dc578 <__retarget_lock_release_recursive>:
   dc578:	4770      	bx	lr

000dc57a <__ascii_mbtowc>:
   dc57a:	b082      	sub	sp, #8
   dc57c:	b901      	cbnz	r1, dc580 <__ascii_mbtowc+0x6>
   dc57e:	a901      	add	r1, sp, #4
   dc580:	b142      	cbz	r2, dc594 <__ascii_mbtowc+0x1a>
   dc582:	b14b      	cbz	r3, dc598 <__ascii_mbtowc+0x1e>
   dc584:	7813      	ldrb	r3, [r2, #0]
   dc586:	600b      	str	r3, [r1, #0]
   dc588:	7812      	ldrb	r2, [r2, #0]
   dc58a:	1e10      	subs	r0, r2, #0
   dc58c:	bf18      	it	ne
   dc58e:	2001      	movne	r0, #1
   dc590:	b002      	add	sp, #8
   dc592:	4770      	bx	lr
   dc594:	4610      	mov	r0, r2
   dc596:	e7fb      	b.n	dc590 <__ascii_mbtowc+0x16>
   dc598:	f06f 0001 	mvn.w	r0, #1
   dc59c:	e7f8      	b.n	dc590 <__ascii_mbtowc+0x16>

000dc59e <_Balloc>:
   dc59e:	b570      	push	{r4, r5, r6, lr}
   dc5a0:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc5a2:	4604      	mov	r4, r0
   dc5a4:	460d      	mov	r5, r1
   dc5a6:	b93e      	cbnz	r6, dc5b8 <_Balloc+0x1a>
   dc5a8:	2010      	movs	r0, #16
   dc5aa:	f7fb fe5f 	bl	d826c <malloc>
   dc5ae:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc5b2:	6260      	str	r0, [r4, #36]	; 0x24
   dc5b4:	6006      	str	r6, [r0, #0]
   dc5b6:	60c6      	str	r6, [r0, #12]
   dc5b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dc5ba:	68f3      	ldr	r3, [r6, #12]
   dc5bc:	b183      	cbz	r3, dc5e0 <_Balloc+0x42>
   dc5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc5c0:	68db      	ldr	r3, [r3, #12]
   dc5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dc5c6:	b9b8      	cbnz	r0, dc5f8 <_Balloc+0x5a>
   dc5c8:	2101      	movs	r1, #1
   dc5ca:	fa01 f605 	lsl.w	r6, r1, r5
   dc5ce:	1d72      	adds	r2, r6, #5
   dc5d0:	0092      	lsls	r2, r2, #2
   dc5d2:	4620      	mov	r0, r4
   dc5d4:	f000 fc23 	bl	dce1e <_calloc_r>
   dc5d8:	b160      	cbz	r0, dc5f4 <_Balloc+0x56>
   dc5da:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dc5de:	e00e      	b.n	dc5fe <_Balloc+0x60>
   dc5e0:	2221      	movs	r2, #33	; 0x21
   dc5e2:	2104      	movs	r1, #4
   dc5e4:	4620      	mov	r0, r4
   dc5e6:	f000 fc1a 	bl	dce1e <_calloc_r>
   dc5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc5ec:	60f0      	str	r0, [r6, #12]
   dc5ee:	68db      	ldr	r3, [r3, #12]
   dc5f0:	2b00      	cmp	r3, #0
   dc5f2:	d1e4      	bne.n	dc5be <_Balloc+0x20>
   dc5f4:	2000      	movs	r0, #0
   dc5f6:	bd70      	pop	{r4, r5, r6, pc}
   dc5f8:	6802      	ldr	r2, [r0, #0]
   dc5fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dc5fe:	2300      	movs	r3, #0
   dc600:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dc604:	e7f7      	b.n	dc5f6 <_Balloc+0x58>

000dc606 <_Bfree>:
   dc606:	b570      	push	{r4, r5, r6, lr}
   dc608:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc60a:	4605      	mov	r5, r0
   dc60c:	460c      	mov	r4, r1
   dc60e:	b93e      	cbnz	r6, dc620 <_Bfree+0x1a>
   dc610:	2010      	movs	r0, #16
   dc612:	f7fb fe2b 	bl	d826c <malloc>
   dc616:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc61a:	6268      	str	r0, [r5, #36]	; 0x24
   dc61c:	6006      	str	r6, [r0, #0]
   dc61e:	60c6      	str	r6, [r0, #12]
   dc620:	b13c      	cbz	r4, dc632 <_Bfree+0x2c>
   dc622:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dc624:	6862      	ldr	r2, [r4, #4]
   dc626:	68db      	ldr	r3, [r3, #12]
   dc628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc62c:	6021      	str	r1, [r4, #0]
   dc62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dc632:	bd70      	pop	{r4, r5, r6, pc}

000dc634 <__multadd>:
   dc634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc638:	690e      	ldr	r6, [r1, #16]
   dc63a:	4607      	mov	r7, r0
   dc63c:	4698      	mov	r8, r3
   dc63e:	460c      	mov	r4, r1
   dc640:	f101 0014 	add.w	r0, r1, #20
   dc644:	2300      	movs	r3, #0
   dc646:	6805      	ldr	r5, [r0, #0]
   dc648:	b2a9      	uxth	r1, r5
   dc64a:	fb02 8101 	mla	r1, r2, r1, r8
   dc64e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dc652:	0c2d      	lsrs	r5, r5, #16
   dc654:	fb02 c505 	mla	r5, r2, r5, ip
   dc658:	b289      	uxth	r1, r1
   dc65a:	3301      	adds	r3, #1
   dc65c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dc660:	429e      	cmp	r6, r3
   dc662:	f840 1b04 	str.w	r1, [r0], #4
   dc666:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dc66a:	dcec      	bgt.n	dc646 <__multadd+0x12>
   dc66c:	f1b8 0f00 	cmp.w	r8, #0
   dc670:	d01b      	beq.n	dc6aa <__multadd+0x76>
   dc672:	68a3      	ldr	r3, [r4, #8]
   dc674:	42b3      	cmp	r3, r6
   dc676:	dc12      	bgt.n	dc69e <__multadd+0x6a>
   dc678:	6861      	ldr	r1, [r4, #4]
   dc67a:	4638      	mov	r0, r7
   dc67c:	3101      	adds	r1, #1
   dc67e:	f7ff ff8e 	bl	dc59e <_Balloc>
   dc682:	6922      	ldr	r2, [r4, #16]
   dc684:	3202      	adds	r2, #2
   dc686:	f104 010c 	add.w	r1, r4, #12
   dc68a:	4605      	mov	r5, r0
   dc68c:	0092      	lsls	r2, r2, #2
   dc68e:	300c      	adds	r0, #12
   dc690:	f7fe fc4b 	bl	daf2a <memcpy>
   dc694:	4621      	mov	r1, r4
   dc696:	4638      	mov	r0, r7
   dc698:	f7ff ffb5 	bl	dc606 <_Bfree>
   dc69c:	462c      	mov	r4, r5
   dc69e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dc6a2:	3601      	adds	r6, #1
   dc6a4:	f8c3 8014 	str.w	r8, [r3, #20]
   dc6a8:	6126      	str	r6, [r4, #16]
   dc6aa:	4620      	mov	r0, r4
   dc6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc6b0 <__s2b>:
   dc6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc6b4:	460c      	mov	r4, r1
   dc6b6:	4615      	mov	r5, r2
   dc6b8:	461f      	mov	r7, r3
   dc6ba:	2209      	movs	r2, #9
   dc6bc:	3308      	adds	r3, #8
   dc6be:	4606      	mov	r6, r0
   dc6c0:	fb93 f3f2 	sdiv	r3, r3, r2
   dc6c4:	2100      	movs	r1, #0
   dc6c6:	2201      	movs	r2, #1
   dc6c8:	429a      	cmp	r2, r3
   dc6ca:	db20      	blt.n	dc70e <__s2b+0x5e>
   dc6cc:	4630      	mov	r0, r6
   dc6ce:	f7ff ff66 	bl	dc59e <_Balloc>
   dc6d2:	9b08      	ldr	r3, [sp, #32]
   dc6d4:	6143      	str	r3, [r0, #20]
   dc6d6:	2d09      	cmp	r5, #9
   dc6d8:	f04f 0301 	mov.w	r3, #1
   dc6dc:	6103      	str	r3, [r0, #16]
   dc6de:	dd19      	ble.n	dc714 <__s2b+0x64>
   dc6e0:	f104 0909 	add.w	r9, r4, #9
   dc6e4:	46c8      	mov	r8, r9
   dc6e6:	442c      	add	r4, r5
   dc6e8:	f818 3b01 	ldrb.w	r3, [r8], #1
   dc6ec:	4601      	mov	r1, r0
   dc6ee:	3b30      	subs	r3, #48	; 0x30
   dc6f0:	220a      	movs	r2, #10
   dc6f2:	4630      	mov	r0, r6
   dc6f4:	f7ff ff9e 	bl	dc634 <__multadd>
   dc6f8:	45a0      	cmp	r8, r4
   dc6fa:	d1f5      	bne.n	dc6e8 <__s2b+0x38>
   dc6fc:	f1a5 0408 	sub.w	r4, r5, #8
   dc700:	444c      	add	r4, r9
   dc702:	1b2d      	subs	r5, r5, r4
   dc704:	1963      	adds	r3, r4, r5
   dc706:	42bb      	cmp	r3, r7
   dc708:	db07      	blt.n	dc71a <__s2b+0x6a>
   dc70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc70e:	0052      	lsls	r2, r2, #1
   dc710:	3101      	adds	r1, #1
   dc712:	e7d9      	b.n	dc6c8 <__s2b+0x18>
   dc714:	340a      	adds	r4, #10
   dc716:	2509      	movs	r5, #9
   dc718:	e7f3      	b.n	dc702 <__s2b+0x52>
   dc71a:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc71e:	4601      	mov	r1, r0
   dc720:	3b30      	subs	r3, #48	; 0x30
   dc722:	220a      	movs	r2, #10
   dc724:	4630      	mov	r0, r6
   dc726:	f7ff ff85 	bl	dc634 <__multadd>
   dc72a:	e7eb      	b.n	dc704 <__s2b+0x54>

000dc72c <__hi0bits>:
   dc72c:	0c03      	lsrs	r3, r0, #16
   dc72e:	041b      	lsls	r3, r3, #16
   dc730:	b9d3      	cbnz	r3, dc768 <__hi0bits+0x3c>
   dc732:	0400      	lsls	r0, r0, #16
   dc734:	2310      	movs	r3, #16
   dc736:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc73a:	bf04      	itt	eq
   dc73c:	0200      	lsleq	r0, r0, #8
   dc73e:	3308      	addeq	r3, #8
   dc740:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc744:	bf04      	itt	eq
   dc746:	0100      	lsleq	r0, r0, #4
   dc748:	3304      	addeq	r3, #4
   dc74a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc74e:	bf04      	itt	eq
   dc750:	0080      	lsleq	r0, r0, #2
   dc752:	3302      	addeq	r3, #2
   dc754:	2800      	cmp	r0, #0
   dc756:	db05      	blt.n	dc764 <__hi0bits+0x38>
   dc758:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dc75c:	f103 0301 	add.w	r3, r3, #1
   dc760:	bf08      	it	eq
   dc762:	2320      	moveq	r3, #32
   dc764:	4618      	mov	r0, r3
   dc766:	4770      	bx	lr
   dc768:	2300      	movs	r3, #0
   dc76a:	e7e4      	b.n	dc736 <__hi0bits+0xa>

000dc76c <__lo0bits>:
   dc76c:	6803      	ldr	r3, [r0, #0]
   dc76e:	f013 0207 	ands.w	r2, r3, #7
   dc772:	4601      	mov	r1, r0
   dc774:	d00b      	beq.n	dc78e <__lo0bits+0x22>
   dc776:	07da      	lsls	r2, r3, #31
   dc778:	d424      	bmi.n	dc7c4 <__lo0bits+0x58>
   dc77a:	0798      	lsls	r0, r3, #30
   dc77c:	bf49      	itett	mi
   dc77e:	085b      	lsrmi	r3, r3, #1
   dc780:	089b      	lsrpl	r3, r3, #2
   dc782:	2001      	movmi	r0, #1
   dc784:	600b      	strmi	r3, [r1, #0]
   dc786:	bf5c      	itt	pl
   dc788:	600b      	strpl	r3, [r1, #0]
   dc78a:	2002      	movpl	r0, #2
   dc78c:	4770      	bx	lr
   dc78e:	b298      	uxth	r0, r3
   dc790:	b9b0      	cbnz	r0, dc7c0 <__lo0bits+0x54>
   dc792:	0c1b      	lsrs	r3, r3, #16
   dc794:	2010      	movs	r0, #16
   dc796:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc79a:	bf04      	itt	eq
   dc79c:	0a1b      	lsreq	r3, r3, #8
   dc79e:	3008      	addeq	r0, #8
   dc7a0:	071a      	lsls	r2, r3, #28
   dc7a2:	bf04      	itt	eq
   dc7a4:	091b      	lsreq	r3, r3, #4
   dc7a6:	3004      	addeq	r0, #4
   dc7a8:	079a      	lsls	r2, r3, #30
   dc7aa:	bf04      	itt	eq
   dc7ac:	089b      	lsreq	r3, r3, #2
   dc7ae:	3002      	addeq	r0, #2
   dc7b0:	07da      	lsls	r2, r3, #31
   dc7b2:	d403      	bmi.n	dc7bc <__lo0bits+0x50>
   dc7b4:	085b      	lsrs	r3, r3, #1
   dc7b6:	f100 0001 	add.w	r0, r0, #1
   dc7ba:	d005      	beq.n	dc7c8 <__lo0bits+0x5c>
   dc7bc:	600b      	str	r3, [r1, #0]
   dc7be:	4770      	bx	lr
   dc7c0:	4610      	mov	r0, r2
   dc7c2:	e7e8      	b.n	dc796 <__lo0bits+0x2a>
   dc7c4:	2000      	movs	r0, #0
   dc7c6:	4770      	bx	lr
   dc7c8:	2020      	movs	r0, #32
   dc7ca:	4770      	bx	lr

000dc7cc <__i2b>:
   dc7cc:	b510      	push	{r4, lr}
   dc7ce:	460c      	mov	r4, r1
   dc7d0:	2101      	movs	r1, #1
   dc7d2:	f7ff fee4 	bl	dc59e <_Balloc>
   dc7d6:	2201      	movs	r2, #1
   dc7d8:	6144      	str	r4, [r0, #20]
   dc7da:	6102      	str	r2, [r0, #16]
   dc7dc:	bd10      	pop	{r4, pc}

000dc7de <__multiply>:
   dc7de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc7e2:	4615      	mov	r5, r2
   dc7e4:	690a      	ldr	r2, [r1, #16]
   dc7e6:	692b      	ldr	r3, [r5, #16]
   dc7e8:	429a      	cmp	r2, r3
   dc7ea:	bfb8      	it	lt
   dc7ec:	460b      	movlt	r3, r1
   dc7ee:	460c      	mov	r4, r1
   dc7f0:	bfbc      	itt	lt
   dc7f2:	462c      	movlt	r4, r5
   dc7f4:	461d      	movlt	r5, r3
   dc7f6:	6927      	ldr	r7, [r4, #16]
   dc7f8:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dc7fc:	68a3      	ldr	r3, [r4, #8]
   dc7fe:	6861      	ldr	r1, [r4, #4]
   dc800:	eb07 0609 	add.w	r6, r7, r9
   dc804:	42b3      	cmp	r3, r6
   dc806:	bfb8      	it	lt
   dc808:	3101      	addlt	r1, #1
   dc80a:	b085      	sub	sp, #20
   dc80c:	f7ff fec7 	bl	dc59e <_Balloc>
   dc810:	f100 0114 	add.w	r1, r0, #20
   dc814:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dc818:	460b      	mov	r3, r1
   dc81a:	2200      	movs	r2, #0
   dc81c:	4543      	cmp	r3, r8
   dc81e:	d31d      	bcc.n	dc85c <__multiply+0x7e>
   dc820:	f104 0314 	add.w	r3, r4, #20
   dc824:	f105 0214 	add.w	r2, r5, #20
   dc828:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dc82c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dc830:	9302      	str	r3, [sp, #8]
   dc832:	1b3b      	subs	r3, r7, r4
   dc834:	3b15      	subs	r3, #21
   dc836:	f023 0303 	bic.w	r3, r3, #3
   dc83a:	3304      	adds	r3, #4
   dc83c:	f104 0515 	add.w	r5, r4, #21
   dc840:	42af      	cmp	r7, r5
   dc842:	bf38      	it	cc
   dc844:	2304      	movcc	r3, #4
   dc846:	9301      	str	r3, [sp, #4]
   dc848:	9b02      	ldr	r3, [sp, #8]
   dc84a:	9203      	str	r2, [sp, #12]
   dc84c:	4293      	cmp	r3, r2
   dc84e:	d808      	bhi.n	dc862 <__multiply+0x84>
   dc850:	2e00      	cmp	r6, #0
   dc852:	dc5a      	bgt.n	dc90a <__multiply+0x12c>
   dc854:	6106      	str	r6, [r0, #16]
   dc856:	b005      	add	sp, #20
   dc858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc85c:	f843 2b04 	str.w	r2, [r3], #4
   dc860:	e7dc      	b.n	dc81c <__multiply+0x3e>
   dc862:	f8b2 a000 	ldrh.w	sl, [r2]
   dc866:	f1ba 0f00 	cmp.w	sl, #0
   dc86a:	d024      	beq.n	dc8b6 <__multiply+0xd8>
   dc86c:	f104 0e14 	add.w	lr, r4, #20
   dc870:	4689      	mov	r9, r1
   dc872:	f04f 0c00 	mov.w	ip, #0
   dc876:	f85e 5b04 	ldr.w	r5, [lr], #4
   dc87a:	f8d9 b000 	ldr.w	fp, [r9]
   dc87e:	b2ab      	uxth	r3, r5
   dc880:	fa1f fb8b 	uxth.w	fp, fp
   dc884:	fb0a b303 	mla	r3, sl, r3, fp
   dc888:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc88c:	f8d9 5000 	ldr.w	r5, [r9]
   dc890:	4463      	add	r3, ip
   dc892:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc896:	fb0a c50b 	mla	r5, sl, fp, ip
   dc89a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc89e:	b29b      	uxth	r3, r3
   dc8a0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc8a4:	4577      	cmp	r7, lr
   dc8a6:	f849 3b04 	str.w	r3, [r9], #4
   dc8aa:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc8ae:	d8e2      	bhi.n	dc876 <__multiply+0x98>
   dc8b0:	9b01      	ldr	r3, [sp, #4]
   dc8b2:	f841 c003 	str.w	ip, [r1, r3]
   dc8b6:	9b03      	ldr	r3, [sp, #12]
   dc8b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc8bc:	3204      	adds	r2, #4
   dc8be:	f1b9 0f00 	cmp.w	r9, #0
   dc8c2:	d020      	beq.n	dc906 <__multiply+0x128>
   dc8c4:	680b      	ldr	r3, [r1, #0]
   dc8c6:	f104 0c14 	add.w	ip, r4, #20
   dc8ca:	468e      	mov	lr, r1
   dc8cc:	f04f 0a00 	mov.w	sl, #0
   dc8d0:	f8bc 5000 	ldrh.w	r5, [ip]
   dc8d4:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc8d8:	fb09 b505 	mla	r5, r9, r5, fp
   dc8dc:	44aa      	add	sl, r5
   dc8de:	b29b      	uxth	r3, r3
   dc8e0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc8e4:	f84e 3b04 	str.w	r3, [lr], #4
   dc8e8:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc8ec:	f8be 5000 	ldrh.w	r5, [lr]
   dc8f0:	0c1b      	lsrs	r3, r3, #16
   dc8f2:	fb09 5303 	mla	r3, r9, r3, r5
   dc8f6:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc8fa:	4567      	cmp	r7, ip
   dc8fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc900:	d8e6      	bhi.n	dc8d0 <__multiply+0xf2>
   dc902:	9d01      	ldr	r5, [sp, #4]
   dc904:	514b      	str	r3, [r1, r5]
   dc906:	3104      	adds	r1, #4
   dc908:	e79e      	b.n	dc848 <__multiply+0x6a>
   dc90a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc90e:	2b00      	cmp	r3, #0
   dc910:	d1a0      	bne.n	dc854 <__multiply+0x76>
   dc912:	3e01      	subs	r6, #1
   dc914:	e79c      	b.n	dc850 <__multiply+0x72>
	...

000dc918 <__pow5mult>:
   dc918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc91c:	4615      	mov	r5, r2
   dc91e:	f012 0203 	ands.w	r2, r2, #3
   dc922:	4606      	mov	r6, r0
   dc924:	460f      	mov	r7, r1
   dc926:	d007      	beq.n	dc938 <__pow5mult+0x20>
   dc928:	4c21      	ldr	r4, [pc, #132]	; (dc9b0 <__pow5mult+0x98>)
   dc92a:	3a01      	subs	r2, #1
   dc92c:	2300      	movs	r3, #0
   dc92e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc932:	f7ff fe7f 	bl	dc634 <__multadd>
   dc936:	4607      	mov	r7, r0
   dc938:	10ad      	asrs	r5, r5, #2
   dc93a:	d035      	beq.n	dc9a8 <__pow5mult+0x90>
   dc93c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc93e:	b93c      	cbnz	r4, dc950 <__pow5mult+0x38>
   dc940:	2010      	movs	r0, #16
   dc942:	f7fb fc93 	bl	d826c <malloc>
   dc946:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dc94a:	6270      	str	r0, [r6, #36]	; 0x24
   dc94c:	6004      	str	r4, [r0, #0]
   dc94e:	60c4      	str	r4, [r0, #12]
   dc950:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc954:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc958:	b94c      	cbnz	r4, dc96e <__pow5mult+0x56>
   dc95a:	f240 2171 	movw	r1, #625	; 0x271
   dc95e:	4630      	mov	r0, r6
   dc960:	f7ff ff34 	bl	dc7cc <__i2b>
   dc964:	2300      	movs	r3, #0
   dc966:	f8c8 0008 	str.w	r0, [r8, #8]
   dc96a:	4604      	mov	r4, r0
   dc96c:	6003      	str	r3, [r0, #0]
   dc96e:	f04f 0900 	mov.w	r9, #0
   dc972:	07eb      	lsls	r3, r5, #31
   dc974:	d50a      	bpl.n	dc98c <__pow5mult+0x74>
   dc976:	4639      	mov	r1, r7
   dc978:	4622      	mov	r2, r4
   dc97a:	4630      	mov	r0, r6
   dc97c:	f7ff ff2f 	bl	dc7de <__multiply>
   dc980:	4639      	mov	r1, r7
   dc982:	4680      	mov	r8, r0
   dc984:	4630      	mov	r0, r6
   dc986:	f7ff fe3e 	bl	dc606 <_Bfree>
   dc98a:	4647      	mov	r7, r8
   dc98c:	106d      	asrs	r5, r5, #1
   dc98e:	d00b      	beq.n	dc9a8 <__pow5mult+0x90>
   dc990:	6820      	ldr	r0, [r4, #0]
   dc992:	b938      	cbnz	r0, dc9a4 <__pow5mult+0x8c>
   dc994:	4622      	mov	r2, r4
   dc996:	4621      	mov	r1, r4
   dc998:	4630      	mov	r0, r6
   dc99a:	f7ff ff20 	bl	dc7de <__multiply>
   dc99e:	6020      	str	r0, [r4, #0]
   dc9a0:	f8c0 9000 	str.w	r9, [r0]
   dc9a4:	4604      	mov	r4, r0
   dc9a6:	e7e4      	b.n	dc972 <__pow5mult+0x5a>
   dc9a8:	4638      	mov	r0, r7
   dc9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc9ae:	bf00      	nop
   dc9b0:	000de208 	.word	0x000de208

000dc9b4 <__lshift>:
   dc9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc9b8:	460c      	mov	r4, r1
   dc9ba:	6849      	ldr	r1, [r1, #4]
   dc9bc:	6923      	ldr	r3, [r4, #16]
   dc9be:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dc9c2:	68a3      	ldr	r3, [r4, #8]
   dc9c4:	4607      	mov	r7, r0
   dc9c6:	4691      	mov	r9, r2
   dc9c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc9cc:	f108 0601 	add.w	r6, r8, #1
   dc9d0:	42b3      	cmp	r3, r6
   dc9d2:	db3f      	blt.n	dca54 <__lshift+0xa0>
   dc9d4:	4638      	mov	r0, r7
   dc9d6:	f7ff fde2 	bl	dc59e <_Balloc>
   dc9da:	2300      	movs	r3, #0
   dc9dc:	4605      	mov	r5, r0
   dc9de:	f100 0114 	add.w	r1, r0, #20
   dc9e2:	f100 0210 	add.w	r2, r0, #16
   dc9e6:	4618      	mov	r0, r3
   dc9e8:	4553      	cmp	r3, sl
   dc9ea:	db36      	blt.n	dca5a <__lshift+0xa6>
   dc9ec:	6920      	ldr	r0, [r4, #16]
   dc9ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dc9f2:	f104 0314 	add.w	r3, r4, #20
   dc9f6:	f019 091f 	ands.w	r9, r9, #31
   dc9fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dc9fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dca02:	d02e      	beq.n	dca62 <__lshift+0xae>
   dca04:	f1c9 0e20 	rsb	lr, r9, #32
   dca08:	468a      	mov	sl, r1
   dca0a:	2200      	movs	r2, #0
   dca0c:	6818      	ldr	r0, [r3, #0]
   dca0e:	fa00 f009 	lsl.w	r0, r0, r9
   dca12:	4302      	orrs	r2, r0
   dca14:	f84a 2b04 	str.w	r2, [sl], #4
   dca18:	f853 2b04 	ldr.w	r2, [r3], #4
   dca1c:	459c      	cmp	ip, r3
   dca1e:	fa22 f20e 	lsr.w	r2, r2, lr
   dca22:	d8f3      	bhi.n	dca0c <__lshift+0x58>
   dca24:	ebac 0304 	sub.w	r3, ip, r4
   dca28:	3b15      	subs	r3, #21
   dca2a:	f023 0303 	bic.w	r3, r3, #3
   dca2e:	3304      	adds	r3, #4
   dca30:	f104 0015 	add.w	r0, r4, #21
   dca34:	4560      	cmp	r0, ip
   dca36:	bf88      	it	hi
   dca38:	2304      	movhi	r3, #4
   dca3a:	50ca      	str	r2, [r1, r3]
   dca3c:	b10a      	cbz	r2, dca42 <__lshift+0x8e>
   dca3e:	f108 0602 	add.w	r6, r8, #2
   dca42:	3e01      	subs	r6, #1
   dca44:	4638      	mov	r0, r7
   dca46:	612e      	str	r6, [r5, #16]
   dca48:	4621      	mov	r1, r4
   dca4a:	f7ff fddc 	bl	dc606 <_Bfree>
   dca4e:	4628      	mov	r0, r5
   dca50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dca54:	3101      	adds	r1, #1
   dca56:	005b      	lsls	r3, r3, #1
   dca58:	e7ba      	b.n	dc9d0 <__lshift+0x1c>
   dca5a:	f842 0f04 	str.w	r0, [r2, #4]!
   dca5e:	3301      	adds	r3, #1
   dca60:	e7c2      	b.n	dc9e8 <__lshift+0x34>
   dca62:	3904      	subs	r1, #4
   dca64:	f853 2b04 	ldr.w	r2, [r3], #4
   dca68:	f841 2f04 	str.w	r2, [r1, #4]!
   dca6c:	459c      	cmp	ip, r3
   dca6e:	d8f9      	bhi.n	dca64 <__lshift+0xb0>
   dca70:	e7e7      	b.n	dca42 <__lshift+0x8e>

000dca72 <__mcmp>:
   dca72:	b530      	push	{r4, r5, lr}
   dca74:	6902      	ldr	r2, [r0, #16]
   dca76:	690c      	ldr	r4, [r1, #16]
   dca78:	1b12      	subs	r2, r2, r4
   dca7a:	d10e      	bne.n	dca9a <__mcmp+0x28>
   dca7c:	f100 0314 	add.w	r3, r0, #20
   dca80:	3114      	adds	r1, #20
   dca82:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dca86:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dca8a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dca8e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dca92:	42a5      	cmp	r5, r4
   dca94:	d003      	beq.n	dca9e <__mcmp+0x2c>
   dca96:	d305      	bcc.n	dcaa4 <__mcmp+0x32>
   dca98:	2201      	movs	r2, #1
   dca9a:	4610      	mov	r0, r2
   dca9c:	bd30      	pop	{r4, r5, pc}
   dca9e:	4283      	cmp	r3, r0
   dcaa0:	d3f3      	bcc.n	dca8a <__mcmp+0x18>
   dcaa2:	e7fa      	b.n	dca9a <__mcmp+0x28>
   dcaa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dcaa8:	e7f7      	b.n	dca9a <__mcmp+0x28>

000dcaaa <__mdiff>:
   dcaaa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcaae:	460c      	mov	r4, r1
   dcab0:	4606      	mov	r6, r0
   dcab2:	4611      	mov	r1, r2
   dcab4:	4620      	mov	r0, r4
   dcab6:	4617      	mov	r7, r2
   dcab8:	f7ff ffdb 	bl	dca72 <__mcmp>
   dcabc:	1e05      	subs	r5, r0, #0
   dcabe:	d108      	bne.n	dcad2 <__mdiff+0x28>
   dcac0:	4629      	mov	r1, r5
   dcac2:	4630      	mov	r0, r6
   dcac4:	f7ff fd6b 	bl	dc59e <_Balloc>
   dcac8:	2301      	movs	r3, #1
   dcaca:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dcace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcad2:	bfa4      	itt	ge
   dcad4:	463b      	movge	r3, r7
   dcad6:	4627      	movge	r7, r4
   dcad8:	4630      	mov	r0, r6
   dcada:	6879      	ldr	r1, [r7, #4]
   dcadc:	bfa6      	itte	ge
   dcade:	461c      	movge	r4, r3
   dcae0:	2500      	movge	r5, #0
   dcae2:	2501      	movlt	r5, #1
   dcae4:	f7ff fd5b 	bl	dc59e <_Balloc>
   dcae8:	693e      	ldr	r6, [r7, #16]
   dcaea:	60c5      	str	r5, [r0, #12]
   dcaec:	6925      	ldr	r5, [r4, #16]
   dcaee:	f107 0114 	add.w	r1, r7, #20
   dcaf2:	f104 0914 	add.w	r9, r4, #20
   dcaf6:	f100 0e14 	add.w	lr, r0, #20
   dcafa:	f107 0210 	add.w	r2, r7, #16
   dcafe:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dcb02:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dcb06:	46f2      	mov	sl, lr
   dcb08:	2700      	movs	r7, #0
   dcb0a:	f859 3b04 	ldr.w	r3, [r9], #4
   dcb0e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dcb12:	fa1f f883 	uxth.w	r8, r3
   dcb16:	fa17 f78b 	uxtah	r7, r7, fp
   dcb1a:	0c1b      	lsrs	r3, r3, #16
   dcb1c:	eba7 0808 	sub.w	r8, r7, r8
   dcb20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dcb24:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dcb28:	fa1f f888 	uxth.w	r8, r8
   dcb2c:	141f      	asrs	r7, r3, #16
   dcb2e:	454d      	cmp	r5, r9
   dcb30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dcb34:	f84a 3b04 	str.w	r3, [sl], #4
   dcb38:	d8e7      	bhi.n	dcb0a <__mdiff+0x60>
   dcb3a:	1b2b      	subs	r3, r5, r4
   dcb3c:	3b15      	subs	r3, #21
   dcb3e:	f023 0303 	bic.w	r3, r3, #3
   dcb42:	3304      	adds	r3, #4
   dcb44:	3415      	adds	r4, #21
   dcb46:	42a5      	cmp	r5, r4
   dcb48:	bf38      	it	cc
   dcb4a:	2304      	movcc	r3, #4
   dcb4c:	4419      	add	r1, r3
   dcb4e:	4473      	add	r3, lr
   dcb50:	469e      	mov	lr, r3
   dcb52:	460d      	mov	r5, r1
   dcb54:	4565      	cmp	r5, ip
   dcb56:	d30e      	bcc.n	dcb76 <__mdiff+0xcc>
   dcb58:	f10c 0203 	add.w	r2, ip, #3
   dcb5c:	1a52      	subs	r2, r2, r1
   dcb5e:	f022 0203 	bic.w	r2, r2, #3
   dcb62:	3903      	subs	r1, #3
   dcb64:	458c      	cmp	ip, r1
   dcb66:	bf38      	it	cc
   dcb68:	2200      	movcc	r2, #0
   dcb6a:	441a      	add	r2, r3
   dcb6c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dcb70:	b17b      	cbz	r3, dcb92 <__mdiff+0xe8>
   dcb72:	6106      	str	r6, [r0, #16]
   dcb74:	e7ab      	b.n	dcace <__mdiff+0x24>
   dcb76:	f855 8b04 	ldr.w	r8, [r5], #4
   dcb7a:	fa17 f488 	uxtah	r4, r7, r8
   dcb7e:	1422      	asrs	r2, r4, #16
   dcb80:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dcb84:	b2a4      	uxth	r4, r4
   dcb86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dcb8a:	f84e 4b04 	str.w	r4, [lr], #4
   dcb8e:	1417      	asrs	r7, r2, #16
   dcb90:	e7e0      	b.n	dcb54 <__mdiff+0xaa>
   dcb92:	3e01      	subs	r6, #1
   dcb94:	e7ea      	b.n	dcb6c <__mdiff+0xc2>
	...

000dcb98 <__ulp>:
   dcb98:	b082      	sub	sp, #8
   dcb9a:	ed8d 0b00 	vstr	d0, [sp]
   dcb9e:	9b01      	ldr	r3, [sp, #4]
   dcba0:	4912      	ldr	r1, [pc, #72]	; (dcbec <__ulp+0x54>)
   dcba2:	4019      	ands	r1, r3
   dcba4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dcba8:	2900      	cmp	r1, #0
   dcbaa:	dd05      	ble.n	dcbb8 <__ulp+0x20>
   dcbac:	2200      	movs	r2, #0
   dcbae:	460b      	mov	r3, r1
   dcbb0:	ec43 2b10 	vmov	d0, r2, r3
   dcbb4:	b002      	add	sp, #8
   dcbb6:	4770      	bx	lr
   dcbb8:	4249      	negs	r1, r1
   dcbba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dcbbe:	ea4f 5021 	mov.w	r0, r1, asr #20
   dcbc2:	f04f 0200 	mov.w	r2, #0
   dcbc6:	f04f 0300 	mov.w	r3, #0
   dcbca:	da04      	bge.n	dcbd6 <__ulp+0x3e>
   dcbcc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dcbd0:	fa41 f300 	asr.w	r3, r1, r0
   dcbd4:	e7ec      	b.n	dcbb0 <__ulp+0x18>
   dcbd6:	f1a0 0114 	sub.w	r1, r0, #20
   dcbda:	291e      	cmp	r1, #30
   dcbdc:	bfda      	itte	le
   dcbde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dcbe2:	fa20 f101 	lsrle.w	r1, r0, r1
   dcbe6:	2101      	movgt	r1, #1
   dcbe8:	460a      	mov	r2, r1
   dcbea:	e7e1      	b.n	dcbb0 <__ulp+0x18>
   dcbec:	7ff00000 	.word	0x7ff00000

000dcbf0 <__b2d>:
   dcbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcbf2:	6905      	ldr	r5, [r0, #16]
   dcbf4:	f100 0714 	add.w	r7, r0, #20
   dcbf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dcbfc:	1f2e      	subs	r6, r5, #4
   dcbfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dcc02:	4620      	mov	r0, r4
   dcc04:	f7ff fd92 	bl	dc72c <__hi0bits>
   dcc08:	f1c0 0320 	rsb	r3, r0, #32
   dcc0c:	280a      	cmp	r0, #10
   dcc0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; dcc8c <__b2d+0x9c>
   dcc12:	600b      	str	r3, [r1, #0]
   dcc14:	dc14      	bgt.n	dcc40 <__b2d+0x50>
   dcc16:	f1c0 0e0b 	rsb	lr, r0, #11
   dcc1a:	fa24 f10e 	lsr.w	r1, r4, lr
   dcc1e:	42b7      	cmp	r7, r6
   dcc20:	ea41 030c 	orr.w	r3, r1, ip
   dcc24:	bf34      	ite	cc
   dcc26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcc2a:	2100      	movcs	r1, #0
   dcc2c:	3015      	adds	r0, #21
   dcc2e:	fa04 f000 	lsl.w	r0, r4, r0
   dcc32:	fa21 f10e 	lsr.w	r1, r1, lr
   dcc36:	ea40 0201 	orr.w	r2, r0, r1
   dcc3a:	ec43 2b10 	vmov	d0, r2, r3
   dcc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dcc40:	42b7      	cmp	r7, r6
   dcc42:	bf3a      	itte	cc
   dcc44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dcc48:	f1a5 0608 	subcc.w	r6, r5, #8
   dcc4c:	2100      	movcs	r1, #0
   dcc4e:	380b      	subs	r0, #11
   dcc50:	d017      	beq.n	dcc82 <__b2d+0x92>
   dcc52:	f1c0 0c20 	rsb	ip, r0, #32
   dcc56:	fa04 f500 	lsl.w	r5, r4, r0
   dcc5a:	42be      	cmp	r6, r7
   dcc5c:	fa21 f40c 	lsr.w	r4, r1, ip
   dcc60:	ea45 0504 	orr.w	r5, r5, r4
   dcc64:	bf8c      	ite	hi
   dcc66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dcc6a:	2400      	movls	r4, #0
   dcc6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dcc70:	fa01 f000 	lsl.w	r0, r1, r0
   dcc74:	fa24 f40c 	lsr.w	r4, r4, ip
   dcc78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dcc7c:	ea40 0204 	orr.w	r2, r0, r4
   dcc80:	e7db      	b.n	dcc3a <__b2d+0x4a>
   dcc82:	ea44 030c 	orr.w	r3, r4, ip
   dcc86:	460a      	mov	r2, r1
   dcc88:	e7d7      	b.n	dcc3a <__b2d+0x4a>
   dcc8a:	bf00      	nop
   dcc8c:	3ff00000 	.word	0x3ff00000

000dcc90 <__d2b>:
   dcc90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcc94:	4689      	mov	r9, r1
   dcc96:	2101      	movs	r1, #1
   dcc98:	ec57 6b10 	vmov	r6, r7, d0
   dcc9c:	4690      	mov	r8, r2
   dcc9e:	f7ff fc7e 	bl	dc59e <_Balloc>
   dcca2:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dcca6:	4604      	mov	r4, r0
   dcca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dccac:	bb35      	cbnz	r5, dccfc <__d2b+0x6c>
   dccae:	2e00      	cmp	r6, #0
   dccb0:	9301      	str	r3, [sp, #4]
   dccb2:	d028      	beq.n	dcd06 <__d2b+0x76>
   dccb4:	4668      	mov	r0, sp
   dccb6:	9600      	str	r6, [sp, #0]
   dccb8:	f7ff fd58 	bl	dc76c <__lo0bits>
   dccbc:	9900      	ldr	r1, [sp, #0]
   dccbe:	b300      	cbz	r0, dcd02 <__d2b+0x72>
   dccc0:	9a01      	ldr	r2, [sp, #4]
   dccc2:	f1c0 0320 	rsb	r3, r0, #32
   dccc6:	fa02 f303 	lsl.w	r3, r2, r3
   dccca:	430b      	orrs	r3, r1
   dcccc:	40c2      	lsrs	r2, r0
   dccce:	6163      	str	r3, [r4, #20]
   dccd0:	9201      	str	r2, [sp, #4]
   dccd2:	9b01      	ldr	r3, [sp, #4]
   dccd4:	61a3      	str	r3, [r4, #24]
   dccd6:	2b00      	cmp	r3, #0
   dccd8:	bf14      	ite	ne
   dccda:	2202      	movne	r2, #2
   dccdc:	2201      	moveq	r2, #1
   dccde:	6122      	str	r2, [r4, #16]
   dcce0:	b1d5      	cbz	r5, dcd18 <__d2b+0x88>
   dcce2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dcce6:	4405      	add	r5, r0
   dcce8:	f8c9 5000 	str.w	r5, [r9]
   dccec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dccf0:	f8c8 0000 	str.w	r0, [r8]
   dccf4:	4620      	mov	r0, r4
   dccf6:	b003      	add	sp, #12
   dccf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dccfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcd00:	e7d5      	b.n	dccae <__d2b+0x1e>
   dcd02:	6161      	str	r1, [r4, #20]
   dcd04:	e7e5      	b.n	dccd2 <__d2b+0x42>
   dcd06:	a801      	add	r0, sp, #4
   dcd08:	f7ff fd30 	bl	dc76c <__lo0bits>
   dcd0c:	9b01      	ldr	r3, [sp, #4]
   dcd0e:	6163      	str	r3, [r4, #20]
   dcd10:	2201      	movs	r2, #1
   dcd12:	6122      	str	r2, [r4, #16]
   dcd14:	3020      	adds	r0, #32
   dcd16:	e7e3      	b.n	dcce0 <__d2b+0x50>
   dcd18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dcd1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dcd20:	f8c9 0000 	str.w	r0, [r9]
   dcd24:	6918      	ldr	r0, [r3, #16]
   dcd26:	f7ff fd01 	bl	dc72c <__hi0bits>
   dcd2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dcd2e:	e7df      	b.n	dccf0 <__d2b+0x60>

000dcd30 <__ratio>:
   dcd30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcd34:	4688      	mov	r8, r1
   dcd36:	4669      	mov	r1, sp
   dcd38:	4681      	mov	r9, r0
   dcd3a:	f7ff ff59 	bl	dcbf0 <__b2d>
   dcd3e:	a901      	add	r1, sp, #4
   dcd40:	4640      	mov	r0, r8
   dcd42:	ec55 4b10 	vmov	r4, r5, d0
   dcd46:	f7ff ff53 	bl	dcbf0 <__b2d>
   dcd4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dcd4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dcd52:	eba3 0c02 	sub.w	ip, r3, r2
   dcd56:	e9dd 3200 	ldrd	r3, r2, [sp]
   dcd5a:	1a9b      	subs	r3, r3, r2
   dcd5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dcd60:	ec51 0b10 	vmov	r0, r1, d0
   dcd64:	2b00      	cmp	r3, #0
   dcd66:	bfd6      	itet	le
   dcd68:	460a      	movle	r2, r1
   dcd6a:	462a      	movgt	r2, r5
   dcd6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dcd70:	468b      	mov	fp, r1
   dcd72:	462f      	mov	r7, r5
   dcd74:	bfd4      	ite	le
   dcd76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dcd7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dcd7e:	4620      	mov	r0, r4
   dcd80:	ee10 2a10 	vmov	r2, s0
   dcd84:	465b      	mov	r3, fp
   dcd86:	4639      	mov	r1, r7
   dcd88:	f7fd fcd6 	bl	da738 <__aeabi_ddiv>
   dcd8c:	ec41 0b10 	vmov	d0, r0, r1
   dcd90:	b003      	add	sp, #12
   dcd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcd96 <__copybits>:
   dcd96:	3901      	subs	r1, #1
   dcd98:	b570      	push	{r4, r5, r6, lr}
   dcd9a:	1149      	asrs	r1, r1, #5
   dcd9c:	6914      	ldr	r4, [r2, #16]
   dcd9e:	3101      	adds	r1, #1
   dcda0:	f102 0314 	add.w	r3, r2, #20
   dcda4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dcda8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dcdac:	1f05      	subs	r5, r0, #4
   dcdae:	42a3      	cmp	r3, r4
   dcdb0:	d30c      	bcc.n	dcdcc <__copybits+0x36>
   dcdb2:	1aa3      	subs	r3, r4, r2
   dcdb4:	3b11      	subs	r3, #17
   dcdb6:	f023 0303 	bic.w	r3, r3, #3
   dcdba:	3211      	adds	r2, #17
   dcdbc:	42a2      	cmp	r2, r4
   dcdbe:	bf88      	it	hi
   dcdc0:	2300      	movhi	r3, #0
   dcdc2:	4418      	add	r0, r3
   dcdc4:	2300      	movs	r3, #0
   dcdc6:	4288      	cmp	r0, r1
   dcdc8:	d305      	bcc.n	dcdd6 <__copybits+0x40>
   dcdca:	bd70      	pop	{r4, r5, r6, pc}
   dcdcc:	f853 6b04 	ldr.w	r6, [r3], #4
   dcdd0:	f845 6f04 	str.w	r6, [r5, #4]!
   dcdd4:	e7eb      	b.n	dcdae <__copybits+0x18>
   dcdd6:	f840 3b04 	str.w	r3, [r0], #4
   dcdda:	e7f4      	b.n	dcdc6 <__copybits+0x30>

000dcddc <__any_on>:
   dcddc:	f100 0214 	add.w	r2, r0, #20
   dcde0:	6900      	ldr	r0, [r0, #16]
   dcde2:	114b      	asrs	r3, r1, #5
   dcde4:	4298      	cmp	r0, r3
   dcde6:	b510      	push	{r4, lr}
   dcde8:	db11      	blt.n	dce0e <__any_on+0x32>
   dcdea:	dd0a      	ble.n	dce02 <__any_on+0x26>
   dcdec:	f011 011f 	ands.w	r1, r1, #31
   dcdf0:	d007      	beq.n	dce02 <__any_on+0x26>
   dcdf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcdf6:	fa24 f001 	lsr.w	r0, r4, r1
   dcdfa:	fa00 f101 	lsl.w	r1, r0, r1
   dcdfe:	428c      	cmp	r4, r1
   dce00:	d10b      	bne.n	dce1a <__any_on+0x3e>
   dce02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dce06:	4293      	cmp	r3, r2
   dce08:	d803      	bhi.n	dce12 <__any_on+0x36>
   dce0a:	2000      	movs	r0, #0
   dce0c:	bd10      	pop	{r4, pc}
   dce0e:	4603      	mov	r3, r0
   dce10:	e7f7      	b.n	dce02 <__any_on+0x26>
   dce12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dce16:	2900      	cmp	r1, #0
   dce18:	d0f5      	beq.n	dce06 <__any_on+0x2a>
   dce1a:	2001      	movs	r0, #1
   dce1c:	e7f6      	b.n	dce0c <__any_on+0x30>

000dce1e <_calloc_r>:
   dce1e:	b513      	push	{r0, r1, r4, lr}
   dce20:	434a      	muls	r2, r1
   dce22:	4611      	mov	r1, r2
   dce24:	9201      	str	r2, [sp, #4]
   dce26:	f7fb fa59 	bl	d82dc <_malloc_r>
   dce2a:	4604      	mov	r4, r0
   dce2c:	b118      	cbz	r0, dce36 <_calloc_r+0x18>
   dce2e:	9a01      	ldr	r2, [sp, #4]
   dce30:	2100      	movs	r1, #0
   dce32:	f7fe f888 	bl	daf46 <memset>
   dce36:	4620      	mov	r0, r4
   dce38:	b002      	add	sp, #8
   dce3a:	bd10      	pop	{r4, pc}
   dce3c:	0000      	movs	r0, r0
	...

000dce40 <nan>:
   dce40:	ed9f 0b01 	vldr	d0, [pc, #4]	; dce48 <nan+0x8>
   dce44:	4770      	bx	lr
   dce46:	bf00      	nop
   dce48:	00000000 	.word	0x00000000
   dce4c:	7ff80000 	.word	0x7ff80000

000dce50 <__ascii_wctomb>:
   dce50:	b149      	cbz	r1, dce66 <__ascii_wctomb+0x16>
   dce52:	2aff      	cmp	r2, #255	; 0xff
   dce54:	bf85      	ittet	hi
   dce56:	238a      	movhi	r3, #138	; 0x8a
   dce58:	6003      	strhi	r3, [r0, #0]
   dce5a:	700a      	strbls	r2, [r1, #0]
   dce5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dce60:	bf98      	it	ls
   dce62:	2001      	movls	r0, #1
   dce64:	4770      	bx	lr
   dce66:	4608      	mov	r0, r1
   dce68:	4770      	bx	lr
	...

000dce6c <__aeabi_d2lz>:
   dce6c:	b538      	push	{r3, r4, r5, lr}
   dce6e:	2200      	movs	r2, #0
   dce70:	2300      	movs	r3, #0
   dce72:	4604      	mov	r4, r0
   dce74:	460d      	mov	r5, r1
   dce76:	f7fd fda7 	bl	da9c8 <__aeabi_dcmplt>
   dce7a:	b928      	cbnz	r0, dce88 <__aeabi_d2lz+0x1c>
   dce7c:	4620      	mov	r0, r4
   dce7e:	4629      	mov	r1, r5
   dce80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dce84:	f7fd be8e 	b.w	daba4 <__aeabi_d2ulz>
   dce88:	4620      	mov	r0, r4
   dce8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dce8e:	f7fd fe89 	bl	daba4 <__aeabi_d2ulz>
   dce92:	4240      	negs	r0, r0
   dce94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dce98:	bd38      	pop	{r3, r4, r5, pc}
   dce9a:	bf00      	nop

000dce9c <dynalib_user>:
   dce9c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dceac:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   dcebc:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dcecc:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dcedc:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   dceec:	4f4d 4544 7525 003e 2931 4120 746e 6e65     MODE%u>.1) Anten
   dcefc:	616e 5320 6174 7574 2073 2428 4750 4f54     na Status ($PGTO
   dcf0c:	2950 3d00 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     P).=============
   dcf1c:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dcf2c:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dcf3c:	3d3d 3d3d 3d3d 3d3d 003d 6f43 6d6d 6e61     =========.Comman
   dcf4c:	2064 4449 203a 4100 746e 6e65 616e 5320     d ID: .Antenna S
   dcf5c:	6174 7574 3a73 0020 2932 4720 6f6c 6162     tatus: .2) Globa
   dcf6c:	206c 6f50 6973 6974 6e6f 6e69 2067 7953     l Positioning Sy
   dcf7c:	7473 6d65 4620 7869 6465 4420 7461 2061     stem Fixed Data 
   dcf8c:	2428 5047 4747 2941 5500 4354 5420 6d69     ($GPGGA).UTC Tim
   dcf9c:	3a65 0020 614c 6974 7574 6564 203a 4e00     e: .Latitude: .N
   dcfac:	726f 6874 532f 756f 6874 6e49 6964 6163     orth/SouthIndica
   dcfbc:	6f74 3a72 0020 6f4c 676e 7469 6475 3a65     tor: .Longitude:
   dcfcc:	0020 6145 7473 572f 7365 4974 646e 6369      .East/WestIndic
   dcfdc:	7461 726f 203a 5000 736f 7469 6f69 206e     ator: .Position 
   dcfec:	6946 2078 6e49 6964 6163 6f74 3a72 0020     Fix Indicator: .
   dcffc:	6153 6574 6c6c 7469 7365 5520 6573 3a64     Satellites Used:
   dd00c:	0020 6f48 6972 6f7a 746e 6c61 4420 6c69      .Horizontal Dil
   dd01c:	7475 6f69 206e 666f 5020 6572 6963 6973     ution of Precisi
   dd02c:	6e6f 203a 4100 746c 7469 6475 3a65 0020     on: .Altitude: .
   dd03c:	6547 696f 6164 206c 6553 6170 6172 6974     Geoidal Separati
   dd04c:	6e6f 203a 4100 6567 6f20 2066 6944 6666     on: .Age of Diff
   dd05c:	202e 6f43 7272 3a2e 0020 6946 3a78 2000     . Corr.: .Fix:. 
   dd06c:	0020 6543 6c6c 532d 6769 003a 614c 3a74      .Cell-Sig:.Lat:
   dd07c:	4c00 6e6f 3a67 4300 7275 6572 746e 4620     .Long:.Current F
   dd08c:	6c69 3a65 4200 7461 6574 7972 203a 2000     ile:.Battery: . 
   dd09c:	0025 4453 4320 7261 2064 6966 656c 6420     %.SD Card file d
   dd0ac:	7665 6369 4965 2d44 7878 2078 706f 6e65     eviceID-xxx open
   dd0bc:	6620 6961 656c 0064 002c 6e49 7469 6169      failed.,.Initia
   dd0cc:	696c 697a 676e 2e2e 002e 6e49 7469 6169     lizing....Initia
   dd0dc:	696c 697a 676e 5300 4344 7261 5f64 6553     lizing.SDCard_Se
   dd0ec:	7574 0070 4453 6143 6472 4c20 676f 6567     tup.SDCard Logge
   dd0fc:	0072 4453 4320 7261 2064 6e49 7469 2d20     r.SD Card Init -
   dd10c:	4f20 004b 4453 6143 6472 465f 6961 756c      OK.SDCard_Failu
   dd11c:	6572 0021 4c41 5245 0054 4453 4320 7261     re!.ALERT.SD Car
   dd12c:	2064 6e49 7469 4620 6961 656c 0064 002d     d Init Failed.-.
   dd13c:	632e 7673 0000 0000                         .csv....

000dd144 <_ZTVN8particle11SPISettingsE>:
	...
   dd14c:	4251 000d 40c9 000d 4161 000d               QB...@..aA..

000dd158 <_ZTV5Timer>:
	...
   dd160:	42d5 000d 431d 000d 418f 000d               .B...C...A..

000dd16c <_ZTV4File>:
	...
   dd174:	415f 000d 416f 000d 421d 000d 4189 000d     _A..oA...B...A..
   dd184:	40cb 000d 41e1 000d 41db 000d 41d5 000d     .@...A...A...A..

000dd194 <_ZL4font>:
   dd194:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dd1a4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dd1b4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dd1c4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dd1d4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dd1e4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dd1f4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dd204:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dd214:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dd224:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dd234:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dd244:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dd254:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dd264:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dd274:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dd284:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dd294:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dd2a4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dd2b4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dd2c4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dd2d4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dd2e4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dd2f4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dd304:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dd314:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dd324:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dd334:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dd344:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dd354:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dd364:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dd374:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dd384:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dd394:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dd3a4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dd3b4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dd3c4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dd3d4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dd3e4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dd3f4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dd404:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dd414:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dd424:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   dd434:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dd444:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dd454:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   dd464:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd474:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   dd484:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   dd494:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   dd4a4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd4b4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd4c4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd4d4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd4e4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd4f4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd504:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   dd514:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   dd524:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   dd534:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   dd544:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   dd554:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   dd564:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   dd574:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   dd584:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   dd594:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   dd5a4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   dd5b4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   dd5c4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   dd5d4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   dd5e4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   dd5f4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   dd604:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   dd614:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   dd624:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   dd634:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   dd644:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   dd654:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   dd664:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   dd674:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   dd684:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000dd694 <_ZTV12Adafruit_GFX>:
	...
   dd6a4:	5485 000d 8f09 000d 40a5 000d 4e8d 000d     .T.......@...N..
   dd6b4:	4e8f 000d 4ec1 000d 4e9d 000d 4eaf 000d     .N...N...N...N..
   dd6c4:	4dd1 000d 4e8d 000d 50b9 000d 5033 000d     .M...N...P..3P..
   dd6d4:	4ed9 000d 4f17 000d 4f51 000d 4f97 000d     .N...O..QO...O..
   dd6e4:	5035 000d 4fb3 000d                         5P...O..

000dd6ec <_ZL12splash1_data>:
   dd6ec:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   dd6fc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   dd70c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   dd71c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   dd72c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   dd73c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   dd754:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   dd764:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   dd774:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   dd784:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   dd794:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   dd7a4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   dd7b4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   dd7c4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   dd7d4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   dd7e4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   dd7f4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   dd804:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   dd814:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   dd824:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   dd834:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   dd844:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   dd854:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   dd864:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   dd87c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   dd894:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   dd8a4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   dd8b4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   dd8c4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   dd8d4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   dd8e4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   dd8f4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   dd904:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   dd914:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   dd924:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   dd934:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   dd944:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   dd954:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   dd964:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   dd974:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   dd984:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   dd994:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   dd9a4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000dd9ac <_ZL12splash2_data>:
   dd9ac:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   dd9bc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   dd9cc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   dd9e8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   dd9f8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   dda08:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   dda18:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   dda28:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   dda38:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   dda48:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   dda58:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   dda68:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   dda78:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   dda88:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   dda98:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   ddaa8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   ddab8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   ddac8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   ddad8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   ddae8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   ddaf8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   ddb08:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   ddb18:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   ddb28:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   ddb40:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   ddb50:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   ddb60:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   ddb70:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   ddb80:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000ddb8c <_ZTV16Adafruit_SSD1306>:
	...
   ddb94:	5595 000d 55ad 000d 5485 000d 8f09 000d     .U...U...T......
   ddba4:	55c1 000d 4e8d 000d 4e8f 000d 4ec1 000d     .U...N...N...N..
   ddbb4:	4e9d 000d 4eaf 000d 4dd1 000d 4e8d 000d     .N...N...M...N..
   ddbc4:	50b9 000d 577b 000d 5d0f 000d 5cc1 000d     .P..{W...]...\..
   ddbd4:	4f51 000d 4f97 000d 5035 000d 4fb3 000d     QO...O..5P...O..

000ddbe4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   ddbe4:	8000 e0c0 f8f0 fefc                         ........

000ddbec <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   ddbec:	0100 0703 1f0f 7f3f                         ......?.

000ddbf4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   ddbf4:	d5ae a880                                   ....

000ddbf8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   ddbf8:	00d3 8d40                                   ..@.

000ddbfc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   ddbfc:	0020 c8a1                                    ...

000ddc00 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   ddc00:	40db a6a4 af2e                              .@....

000ddc06 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   ddc06:	02da 8f81                                   ....

000ddc0a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   ddc0a:	12da                                         ...

000ddc0d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   ddc0d:	02da                                         ...

000ddc10 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   ddc10:	0022 21ff 2400 4d50 4b54 3532 2c31 3639     "..!.$PMTK251,96
   ddc20:	3030 312a 0037 5024 544d 324b 3032 352c     00*17.$PMTK220,5
   ddc30:	3030 2a30 4231 2400 4d50 4b54 3033 2c30     000*1B.$PMTK300,
   ddc40:	3031 3030 302c 302c 302c 302c 312a 0043     1000,0,0,0,0*1C.
   ddc50:	5024 544d 334b 3431 302c 312c 302c 312c     $PMTK314,0,1,0,1
   ddc60:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
   ddc70:	302c 302c 302c 302c 302c 302c 302c 322a     ,0,0,0,0,0,0,0*2
   ddc80:	0038 5024 544d 334b 3130 322c 322a 0045     8.$PMTK301,2*2E.
   ddc90:	5024 4347 444d 332c 2c33 2a31 4336 4200     $PGCMD,33,1*6C.B
   ddca0:	6675 6566 2072 764f 7265 6e75 203a 0027     uffer Overun: '.
   ddcb0:	002a 0024                                   *.$.

000ddcb4 <CSWTCH.24>:
   ddcb4:	0201 0403 0605 0807 0009 0000 0000 0000     ................
   ddcc4:	0b0a 0d0c 0f0e 4724 4750 4147 2400 5047     ......$GPGGA.$GP
   ddcd4:	5347 0041 4724 4750 5653 2400 5047 4d52     GSA.$GPGSV.$GPRM
   ddce4:	0043 4724 5650 4754 2400 4750 4f54 0050     C.$GPVTG.$PGTOP.

000ddcf4 <_ZTV3Gga>:
	...
   ddcfc:	6441 000d                                   Ad..

000ddd00 <_ZTV5Pgtop>:
	...
   ddd08:	6415 000d                                   .d..

000ddd0c <_ZTV16OledWingAdafruit>:
	...
   ddd14:	7bbd 000d 7bdd 000d 5485 000d 8f09 000d     .{...{...T......
   ddd24:	55c1 000d 4e8d 000d 4e8f 000d 4ec1 000d     .U...N...N...N..
   ddd34:	4e9d 000d 4eaf 000d 4dd1 000d 4e8d 000d     .N...N...M...N..
   ddd44:	50b9 000d 577b 000d 5d0f 000d 5cc1 000d     .P..{W...]...\..
   ddd54:	4f51 000d 4f97 000d 5035 000d 4fb3 000d     QO...O..5P...O..

000ddd64 <_ZTVN5spark13CellularClassE>:
	...
   ddd6c:	83c7 000d 83bd 000d 83b3 000d 8369 000d     ............i...
   ddd7c:	83a7 000d 839b 000d 8de9 000d 8df1 000d     ................
   ddd8c:	838f 000d 8387 000d 837d 000d 8373 000d     ........}...s...
   ddd9c:	8e21 000d                                   !...

000ddda0 <_ZTV14CellularSignal>:
	...
   ddda8:	8475 000d 849d 000d 8477 000d 84ad 000d     u.......w.......
   dddb8:	84e1 000d 850d 000d 8541 000d 8591 000d     ........A.......
   dddc8:	847b 000d 8497 000d fffc ffff 0000 0000     {...............
   dddd8:	85b7 000d                                   ....

000ddddc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ddde4:	85d7 000d 85dd 000d 861b 000d 85eb 000d     ................
   dddf4:	85d9 000d                                   ....

000dddf8 <_ZTVN5spark13EthernetClassE>:
	...
   dde00:	8b93 000d 8b89 000d 8b7f 000d 8b75 000d     ............u...
   dde10:	8b69 000d 8b5d 000d 8de9 000d 8df1 000d     i...]...........
   dde20:	8b51 000d 8b49 000d 8b3f 000d 8b35 000d     Q...I...?...5...
   dde30:	8e21 000d                                   !...

000dde34 <_ZTV7TwoWire>:
	...
   dde3c:	8bb1 000d 8bfb 000d 8bd3 000d 8bb3 000d     ................
   dde4c:	8bdb 000d 8be3 000d 8beb 000d 8bf3 000d     ................

000dde5c <_ZTV9IPAddress>:
	...
   dde64:	8cc5 000d 8cb5 000d 8cb7 000d 7061 0070     ............app.

000dde74 <_ZTVN5spark12NetworkClassE>:
	...
   dde7c:	8da9 000d 8db3 000d 8dbd 000d 8dc7 000d     ................
   dde8c:	8dd1 000d 8ddd 000d 8de9 000d 8df1 000d     ................
   dde9c:	8df9 000d 8e05 000d 8e0d 000d 8e17 000d     ................
   ddeac:	8e21 000d 616e 006e 6e69 0066 766f 0066     !...nan.inf.ovf.

000ddebc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ddebc:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   ddecc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   ddedc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   ddeec:	0000 0000                                   ....

000ddef0 <_ZTV11USARTSerial>:
	...
   ddef8:	9bf9 000d 9c67 000d 9c3f 000d 8f09 000d     ....g...?.......
   ddf08:	9c0f 000d 9c2b 000d 9c1d 000d 9c39 000d     ....+.......9...
   ddf18:	9bfb 000d 9c01 000d                         ........

000ddf20 <_ZTV9USBSerial>:
	...
   ddf28:	9d03 000d 9d6b 000d 9d41 000d 8f09 000d     ....k...A.......
   ddf38:	9d33 000d 9d05 000d 9d15 000d 9d65 000d     3...........e...
   ddf48:	9d25 000d 9cfd 000d                         %.......

000ddf50 <_ZSt7nothrow>:
   ddf50:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   ddf60:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000ddf71 <day_name.6145>:
   ddf71:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddf81:	6972 6153                                    riSat

000ddf86 <mon_name.6146>:
   ddf86:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddf96:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddfa6:	4476 6365 6e69 7469 0079                    vDecinity.

000ddfb0 <fpi.7566>:
   ddfb0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddfc0:	0000 0000                                   ....

000ddfc4 <fpinan.7602>:
   ddfc4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   ddfd4:	0000 0000                                   ....

000ddfd8 <tinytens>:
   ddfd8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ddfe8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ddff8:	6f43 64ac 0628 1168                         Co.d(.h.

000de000 <_ctype_>:
   de000:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   de010:	2020 2020 2020 2020 2020 2020 2020 2020                     
   de020:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   de030:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   de040:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   de050:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   de060:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   de070:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   de080:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000de104 <_C_numeric_locale>:
   de104:	d0d4 000d df70 000d dd50 2003 4f50 4953     ....p...P.. POSI
   de114:	0058 0000                                   X...

000de118 <__mprec_bigtens>:
   de118:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   de128:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   de138:	bf3c 7f73 4fdd 7515                         <.s..O.u

000de140 <__mprec_tens>:
   de140:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   de150:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   de160:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   de170:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   de180:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   de190:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   de1a0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   de1b0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   de1c0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   de1d0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   de1e0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   de1f0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   de200:	9db4 79d9 7843 44ea                         ...yCx.D

000de208 <p05.7490>:
   de208:	0005 0000 0019 0000 007d 0000               ........}...

000de214 <link_const_variable_data_end>:
   de214:	000d4c55 	.word	0x000d4c55
   de218:	000d8359 	.word	0x000d8359
   de21c:	000d8445 	.word	0x000d8445
   de220:	000d8b9d 	.word	0x000d8b9d
   de224:	000d8d99 	.word	0x000d8d99
   de228:	000d8ef5 	.word	0x000d8ef5
   de22c:	000d91f1 	.word	0x000d91f1
   de230:	000d988d 	.word	0x000d988d
   de234:	000d9be5 	.word	0x000d9be5

000de238 <link_constructors_end>:
	...
