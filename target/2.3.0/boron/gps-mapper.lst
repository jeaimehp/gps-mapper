
/Users/jhpowell/Documents/Particle/gps-mapper/target/2.3.0/boron/gps-mapper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009fa0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ddfc0  000ddfc0  0000dfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ddfc8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  2003dcdc  000ddfcc  0001dcdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000930  2003dec0  2003dec0  0002dec0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000de1b0  000de1b0  0001e1b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000de1d8  000de1d8  0001e1d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0027c216  00000000  00000000  0001e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00025916  00000000  00000000  0029a3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004097a  00000000  00000000  002bfd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003340  00000000  00000000  00300682  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009d98  00000000  00000000  003039c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004c2dc  00000000  00000000  0030d75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006326d  00000000  00000000  00359a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001164a4  00000000  00000000  003bcca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009ca4  00000000  00000000  004d3148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fe4a 	bl	dacca <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fe52 	bl	dace6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcdc 	.word	0x2003dcdc
   d404c:	000ddfcc 	.word	0x000ddfcc
   d4050:	2003dec0 	.word	0x2003dec0
   d4054:	2003dec0 	.word	0x2003dec0
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fe61 	bl	d9d28 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000ddf9c 	.word	0x000ddf9c
   d4080:	000ddfc0 	.word	0x000ddfc0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc1e 	b.w	d48c4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f997 	bl	d43bc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 be01 	b.w	d9c98 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bfe5 	b.w	d8064 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bfe3 	b.w	d8064 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bfe9 	b.w	d8074 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fefe 	bl	d7eac <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7b8d 	.word	0x000d7b8d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ca:	7c03      	ldrb	r3, [r0, #16]
   d40cc:	f013 0308 	ands.w	r3, r3, #8
   d40d0:	bf1e      	ittt	ne
   d40d2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40d4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40d6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40d8:	2b00      	cmp	r3, #0
  }
   d40da:	bfac      	ite	ge
   d40dc:	4618      	movge	r0, r3
   d40de:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40e2:	4770      	bx	lr

000d40e4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e4:	6803      	ldr	r3, [r0, #0]
   d40e6:	4718      	bx	r3

000d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40e8:	2a01      	cmp	r2, #1
   d40ea:	d003      	beq.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40ec:	2a02      	cmp	r2, #2
   d40ee:	d003      	beq.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40f0:	2000      	movs	r0, #0
   d40f2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f4:	6001      	str	r1, [r0, #0]
	      break;
   d40f6:	e7fb      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f8:	680b      	ldr	r3, [r1, #0]
   d40fa:	6003      	str	r3, [r0, #0]
	}
   d40fc:	e7f8      	b.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40fe <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d40fe:	4770      	bx	lr

000d4100 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4100:	b510      	push	{r4, lr}
  }
   d4102:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4104:	4604      	mov	r4, r0
  }
   d4106:	f005 fef9 	bl	d9efc <_ZdlPvj>
   d410a:	4620      	mov	r0, r4
   d410c:	bd10      	pop	{r4, pc}

000d410e <_ZN4FileD0Ev>:
   d410e:	b510      	push	{r4, lr}
   d4110:	2134      	movs	r1, #52	; 0x34
   d4112:	4604      	mov	r4, r0
   d4114:	f005 fef2 	bl	d9efc <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_Z12onSerialDatav>:
     }
}

void onSerialData()
{
  _gps.onSerialData();
   d411c:	4801      	ldr	r0, [pc, #4]	; (d4124 <_Z12onSerialDatav+0x8>)
   d411e:	f001 be3f 	b.w	d5da0 <_ZN3Gps12onSerialDataEv>
   d4122:	bf00      	nop
   d4124:	2003ded0 	.word	0x2003ded0

000d4128 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4128:	3010      	adds	r0, #16
   d412a:	f002 bc07 	b.w	d693c <_ZN7FatFile5writeEPKvj>

000d412e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d412e:	6943      	ldr	r3, [r0, #20]
   d4130:	b113      	cbz	r3, d4138 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4132:	6983      	ldr	r3, [r0, #24]
   d4134:	300c      	adds	r0, #12
   d4136:	4718      	bx	r3
            callback();
        }
    }
   d4138:	4770      	bx	lr

000d413a <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d413a:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d413c:	2100      	movs	r1, #0
   d413e:	4604      	mov	r4, r0
   d4140:	4608      	mov	r0, r1
   d4142:	f003 fcd3 	bl	d7aec <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4146:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4148:	4620      	mov	r0, r4
   d414a:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d414c:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d414e:	f003 fce5 	bl	d7b1c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4152:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4154:	b10c      	cbz	r4, d415a <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4156:	2301      	movs	r3, #1
   d4158:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d415a:	2100      	movs	r1, #0
   d415c:	2001      	movs	r0, #1
   d415e:	f003 fcc5 	bl	d7aec <os_thread_scheduling>
            }
        }
        if (t) {
   d4162:	b12c      	cbz	r4, d4170 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4164:	6823      	ldr	r3, [r4, #0]
   d4166:	4620      	mov	r0, r4
   d4168:	689b      	ldr	r3, [r3, #8]
   d416a:	4798      	blx	r3
            t->running = false;
   d416c:	2300      	movs	r3, #0
   d416e:	7123      	strb	r3, [r4, #4]
        }
    }
   d4170:	b002      	add	sp, #8
   d4172:	bd10      	pop	{r4, pc}

000d4174 <_ZN4File5flushEv>:
    FatFile::sync();
   d4174:	3010      	adds	r0, #16
   d4176:	f002 bb57 	b.w	d6828 <_ZN7FatFile4syncEv>

000d417a <_ZN4File4peekEv>:
    return FatFile::peek();
   d417a:	3010      	adds	r0, #16
   d417c:	f002 ba72 	b.w	d6664 <_ZN7FatFile4peekEv>

000d4180 <_ZN4File4readEv>:
  int read() {
   d4180:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4182:	2201      	movs	r2, #1
   d4184:	f10d 0107 	add.w	r1, sp, #7
   d4188:	3010      	adds	r0, #16
   d418a:	f002 f9bd 	bl	d6508 <_ZN7FatFile4readEPvj>
   d418e:	2801      	cmp	r0, #1
   d4190:	bf0c      	ite	eq
   d4192:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4196:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   d419a:	b003      	add	sp, #12
   d419c:	f85d fb04 	ldr.w	pc, [sp], #4

000d41a0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d41a0:	b513      	push	{r0, r1, r4, lr}
   d41a2:	4b05      	ldr	r3, [pc, #20]	; (d41b8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d41a4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41a6:	f88d 3000 	strb.w	r3, [sp]
   d41aa:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d41ac:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41ae:	f004 fa47 	bl	d8640 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d41b2:	4620      	mov	r0, r4
   d41b4:	b002      	add	sp, #8
   d41b6:	bd10      	pop	{r4, pc}
   d41b8:	2003decc 	.word	0x2003decc

000d41bc <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d41bc:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d41be:	2201      	movs	r2, #1
   d41c0:	f88d 1007 	strb.w	r1, [sp, #7]
   d41c4:	3010      	adds	r0, #16
   d41c6:	f10d 0107 	add.w	r1, sp, #7
   d41ca:	f002 fbb7 	bl	d693c <_ZN7FatFile5writeEPKvj>
  }
   d41ce:	b003      	add	sp, #12
   d41d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d41d4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41d4:	b40e      	push	{r1, r2, r3}
   d41d6:	b503      	push	{r0, r1, lr}
   d41d8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d41da:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41dc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d41e0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d41e2:	f004 fea4 	bl	d8f2e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d41e6:	b002      	add	sp, #8
   d41e8:	f85d eb04 	ldr.w	lr, [sp], #4
   d41ec:	b003      	add	sp, #12
   d41ee:	4770      	bx	lr

000d41f0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d41f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d41f2:	4604      	mov	r4, r0
   d41f4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d41f6:	7922      	ldrb	r2, [r4, #4]
   d41f8:	68a3      	ldr	r3, [r4, #8]
   d41fa:	b132      	cbz	r2, d420a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d41fc:	b9a3      	cbnz	r3, d4228 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d41fe:	490b      	ldr	r1, [pc, #44]	; (d422c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4200:	b002      	add	sp, #8
   d4202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4206:	f004 bd65 	b.w	d8cd4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d420a:	4a09      	ldr	r2, [pc, #36]	; (d4230 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d420c:	7b26      	ldrb	r6, [r4, #12]
   d420e:	4d09      	ldr	r5, [pc, #36]	; (d4234 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4210:	4909      	ldr	r1, [pc, #36]	; (d4238 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4212:	7b64      	ldrb	r4, [r4, #13]
   d4214:	2e01      	cmp	r6, #1
   d4216:	bf18      	it	ne
   d4218:	4629      	movne	r1, r5
   d421a:	e9cd 1400 	strd	r1, r4, [sp]
   d421e:	4907      	ldr	r1, [pc, #28]	; (d423c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4220:	f7ff ffd8 	bl	d41d4 <_ZN5Print6printfEPKcz>
  }
   d4224:	b002      	add	sp, #8
   d4226:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4228:	4a05      	ldr	r2, [pc, #20]	; (d4240 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d422a:	e7ef      	b.n	d420c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d422c:	000dcc61 	.word	0x000dcc61
   d4230:	000ddcf4 	.word	0x000ddcf4
   d4234:	000dcc5d 	.word	0x000dcc5d
   d4238:	000dcc59 	.word	0x000dcc59
   d423c:	000dcc77 	.word	0x000dcc77
   d4240:	000dcc50 	.word	0x000dcc50

000d4244 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4244:	b510      	push	{r4, lr}
      if (_M_manager)
   d4246:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4248:	4604      	mov	r4, r0
      if (_M_manager)
   d424a:	b113      	cbz	r3, d4252 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d424c:	2203      	movs	r2, #3
   d424e:	4601      	mov	r1, r0
   d4250:	4798      	blx	r3
    }
   d4252:	4620      	mov	r0, r4
   d4254:	bd10      	pop	{r4, pc}

000d4256 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d4256:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4258:	6880      	ldr	r0, [r0, #8]
   d425a:	2300      	movs	r3, #0
   d425c:	b138      	cbz	r0, d426e <_ZN5Timer5_stopEjb+0x18>
   d425e:	e9cd 1300 	strd	r1, r3, [sp]
   d4262:	2102      	movs	r1, #2
   d4264:	f003 fc62 	bl	d7b2c <os_timer_change>
   d4268:	fab0 f080 	clz	r0, r0
   d426c:	0940      	lsrs	r0, r0, #5
    }
   d426e:	b003      	add	sp, #12
   d4270:	f85d fb04 	ldr.w	pc, [sp], #4

000d4274 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4274:	b538      	push	{r3, r4, r5, lr}
   d4276:	4b10      	ldr	r3, [pc, #64]	; (d42b8 <_ZN5TimerD1Ev+0x44>)
   d4278:	6003      	str	r3, [r0, #0]
        if (handle) {
   d427a:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d427c:	4604      	mov	r4, r0
        if (handle) {
   d427e:	b1a3      	cbz	r3, d42aa <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4284:	2200      	movs	r2, #0
   d4286:	f7ff ffe6 	bl	d4256 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d428a:	68a0      	ldr	r0, [r4, #8]
   d428c:	2100      	movs	r1, #0
   d428e:	f003 fc6d 	bl	d7b6c <os_timer_set_id>
            while (running) {
   d4292:	7923      	ldrb	r3, [r4, #4]
   d4294:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4298:	b113      	cbz	r3, d42a0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d429a:	f003 fc1f 	bl	d7adc <os_thread_yield>
            while (running) {
   d429e:	e7f8      	b.n	d4292 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d42a0:	68a0      	ldr	r0, [r4, #8]
   d42a2:	4629      	mov	r1, r5
   d42a4:	f003 fc32 	bl	d7b0c <os_timer_destroy>
            handle = nullptr;
   d42a8:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d42aa:	f104 000c 	add.w	r0, r4, #12
   d42ae:	f7ff ffc9 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
    }
   d42b2:	4620      	mov	r0, r4
   d42b4:	bd38      	pop	{r3, r4, r5, pc}
   d42b6:	bf00      	nop
   d42b8:	000dcee4 	.word	0x000dcee4

000d42bc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d42bc:	b510      	push	{r4, lr}
   d42be:	4604      	mov	r4, r0
    }
   d42c0:	f7ff ffd8 	bl	d4274 <_ZN5TimerD1Ev>
   d42c4:	4620      	mov	r0, r4
   d42c6:	211c      	movs	r1, #28
   d42c8:	f005 fe18 	bl	d9efc <_ZdlPvj>
   d42cc:	4620      	mov	r0, r4
   d42ce:	bd10      	pop	{r4, pc}

000d42d0 <_ZN9NmeaCacheD1Ev>:
#define NMEA_MSGID_PGT      "$PGTOP"

#define NMEA_MSGID_LENGTH   6
#define NMEA_MAX_SENTENCE   6

class NmeaCache
   d42d0:	b538      	push	{r3, r4, r5, lr}
   d42d2:	4605      	mov	r5, r0
   d42d4:	f100 0470 	add.w	r4, r0, #112	; 0x70
   d42d8:	42ac      	cmp	r4, r5
   d42da:	d004      	beq.n	d42e6 <_ZN9NmeaCacheD1Ev+0x16>
   d42dc:	3c10      	subs	r4, #16
   d42de:	4620      	mov	r0, r4
   d42e0:	f004 ff90 	bl	d9204 <_ZN6StringD1Ev>
   d42e4:	e7f8      	b.n	d42d8 <_ZN9NmeaCacheD1Ev+0x8>
   d42e6:	4620      	mov	r0, r4
   d42e8:	bd38      	pop	{r3, r4, r5, pc}

000d42ea <_ZN9NmeaCacheC1ERKS_>:
   d42ea:	b570      	push	{r4, r5, r6, lr}
   d42ec:	4605      	mov	r5, r0
   d42ee:	460e      	mov	r6, r1
   d42f0:	2400      	movs	r4, #0
   d42f2:	1931      	adds	r1, r6, r4
   d42f4:	1928      	adds	r0, r5, r4
   d42f6:	3410      	adds	r4, #16
   d42f8:	f005 f80f 	bl	d931a <_ZN6StringC1ERKS_>
   d42fc:	2c70      	cmp	r4, #112	; 0x70
   d42fe:	d1f8      	bne.n	d42f2 <_ZN9NmeaCacheC1ERKS_+0x8>
   d4300:	4628      	mov	r0, r5
   d4302:	bd70      	pop	{r4, r5, r6, pc}

000d4304 <_Z11conv_coordsf>:
 {
 //Initialize the location.
 float f = in_coords;
 // Get the first two digits by turning f into an integer, then doing an integer divide by 100;
 // firsttowdigits should be 77 at this point.
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d4304:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 {
   d4308:	b5d0      	push	{r4, r6, r7, lr}
 int firsttwodigits = ((int)f)/100; //This assumes that f < 10000.
   d430a:	ee17 4a90 	vmov	r4, s15
   d430e:	2364      	movs	r3, #100	; 0x64
   d4310:	fb94 f4f3 	sdiv	r4, r4, r3
 float nexttwodigits = f - (float)(firsttwodigits*100);
   d4314:	4363      	muls	r3, r4
   d4316:	ee07 3a90 	vmov	s15, r3
   d431a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 float theFinalAnswer = (float)(firsttwodigits + nexttwodigits/60.0);
   d431e:	ee70 7a67 	vsub.f32	s15, s0, s15
   d4322:	ee17 0a90 	vmov	r0, s15
   d4326:	f005 ff55 	bl	da1d4 <__aeabi_f2d>
   d432a:	4b0a      	ldr	r3, [pc, #40]	; (d4354 <_Z11conv_coordsf+0x50>)
   d432c:	2200      	movs	r2, #0
   d432e:	f006 f8d3 	bl	da4d8 <__aeabi_ddiv>
   d4332:	4606      	mov	r6, r0
   d4334:	4620      	mov	r0, r4
   d4336:	460f      	mov	r7, r1
   d4338:	f005 ff3a 	bl	da1b0 <__aeabi_i2d>
   d433c:	4602      	mov	r2, r0
   d433e:	460b      	mov	r3, r1
   d4340:	4630      	mov	r0, r6
   d4342:	4639      	mov	r1, r7
   d4344:	f005 fde8 	bl	d9f18 <__adddf3>
   d4348:	f006 fa94 	bl	da874 <__aeabi_d2f>
 return theFinalAnswer;
 }
   d434c:	ee00 0a10 	vmov	s0, r0
   d4350:	bdd0      	pop	{r4, r6, r7, pc}
   d4352:	bf00      	nop
   d4354:	404e0000 	.word	0x404e0000

000d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4358:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d435a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d435c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d435e:	b17c      	cbz	r4, d4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4360:	6863      	ldr	r3, [r4, #4]
   d4362:	3b01      	subs	r3, #1
   d4364:	6063      	str	r3, [r4, #4]
   d4366:	b95b      	cbnz	r3, d4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4368:	6823      	ldr	r3, [r4, #0]
   d436a:	4620      	mov	r0, r4
   d436c:	689b      	ldr	r3, [r3, #8]
   d436e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4370:	68a3      	ldr	r3, [r4, #8]
   d4372:	3b01      	subs	r3, #1
   d4374:	60a3      	str	r3, [r4, #8]
   d4376:	b91b      	cbnz	r3, d4380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4378:	6823      	ldr	r3, [r4, #0]
   d437a:	4620      	mov	r0, r4
   d437c:	68db      	ldr	r3, [r3, #12]
   d437e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4380:	4628      	mov	r0, r5
   d4382:	bd38      	pop	{r3, r4, r5, pc}

000d4384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4384:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4386:	4c0b      	ldr	r4, [pc, #44]	; (d43b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4388:	7821      	ldrb	r1, [r4, #0]
   d438a:	f3bf 8f5b 	dmb	ish
   d438e:	f011 0101 	ands.w	r1, r1, #1
   d4392:	d10b      	bne.n	d43ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4394:	4620      	mov	r0, r4
   d4396:	9101      	str	r1, [sp, #4]
   d4398:	f7ff fe8e 	bl	d40b8 <__cxa_guard_acquire>
   d439c:	9901      	ldr	r1, [sp, #4]
   d439e:	b128      	cbz	r0, d43ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d43a0:	4805      	ldr	r0, [pc, #20]	; (d43b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d43a2:	f004 fe01 	bl	d8fa8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d43a6:	4620      	mov	r0, r4
   d43a8:	f7ff fe8b 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d43ac:	4802      	ldr	r0, [pc, #8]	; (d43b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d43ae:	b002      	add	sp, #8
   d43b0:	bd10      	pop	{r4, pc}
   d43b2:	bf00      	nop
   d43b4:	2003dec0 	.word	0x2003dec0
   d43b8:	2003dec4 	.word	0x2003dec4

000d43bc <loop>:
{
   d43bc:	b570      	push	{r4, r5, r6, lr}
   d43be:	b0e4      	sub	sp, #400	; 0x190
  Pgtop pgtop = Pgtop(_gps);
   d43c0:	49cd      	ldr	r1, [pc, #820]	; (d46f8 <loop+0x33c>)
   d43c2:	a836      	add	r0, sp, #216	; 0xd8
   d43c4:	f7ff ff91 	bl	d42ea <_ZN9NmeaCacheC1ERKS_>
   d43c8:	a936      	add	r1, sp, #216	; 0xd8
   d43ca:	a80e      	add	r0, sp, #56	; 0x38
   d43cc:	f001 ffb0 	bl	d6330 <_ZN5PgtopC1E9NmeaCache>
   d43d0:	a836      	add	r0, sp, #216	; 0xd8
   d43d2:	f7ff ff7d 	bl	d42d0 <_ZN9NmeaCacheD1Ev>
  if (pgtop.parse())
   d43d6:	a80e      	add	r0, sp, #56	; 0x38
   d43d8:	f001 ff32 	bl	d6240 <_ZN5Pgtop5parseEv>
   d43dc:	b360      	cbz	r0, d4438 <loop+0x7c>
    Serial.println("1) Antenna Status ($PGTOP)");
   d43de:	f005 fbbb 	bl	d9b58 <_Z16_fetch_usbserialv>
   d43e2:	49c6      	ldr	r1, [pc, #792]	; (d46fc <loop+0x340>)
   d43e4:	f004 fc89 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d43e8:	f005 fbb6 	bl	d9b58 <_Z16_fetch_usbserialv>
   d43ec:	49c4      	ldr	r1, [pc, #784]	; (d4700 <loop+0x344>)
   d43ee:	f004 fc84 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("Command ID: "); Serial.println(pgtop.commandId);
   d43f2:	f005 fbb1 	bl	d9b58 <_Z16_fetch_usbserialv>
   d43f6:	49c3      	ldr	r1, [pc, #780]	; (d4704 <loop+0x348>)
   d43f8:	f004 fc6c 	bl	d8cd4 <_ZN5Print5printEPKc>
   d43fc:	f005 fbac 	bl	d9b58 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4400:	220a      	movs	r2, #10
   d4402:	9918      	ldr	r1, [sp, #96]	; 0x60
   d4404:	4604      	mov	r4, r0
   d4406:	f004 fc82 	bl	d8d0e <_ZN5Print11printNumberEmh>
        n += println();
   d440a:	4620      	mov	r0, r4
   d440c:	f004 fc69 	bl	d8ce2 <_ZN5Print7printlnEv>
    Serial.print("Antenna Status: "); Serial.println(pgtop.reference);
   d4410:	f005 fba2 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4414:	49bc      	ldr	r1, [pc, #752]	; (d4708 <loop+0x34c>)
   d4416:	f004 fc5d 	bl	d8cd4 <_ZN5Print5printEPKc>
   d441a:	f005 fb9d 	bl	d9b58 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d441e:	9919      	ldr	r1, [sp, #100]	; 0x64
   d4420:	220a      	movs	r2, #10
   d4422:	4604      	mov	r4, r0
   d4424:	f004 fc73 	bl	d8d0e <_ZN5Print11printNumberEmh>
        n += println();
   d4428:	4620      	mov	r0, r4
   d442a:	f004 fc5a 	bl	d8ce2 <_ZN5Print7printlnEv>
    Serial.println("");
   d442e:	f005 fb93 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4432:	49b6      	ldr	r1, [pc, #728]	; (d470c <loop+0x350>)
   d4434:	f004 fc61 	bl	d8cfa <_ZN5Print7printlnEPKc>
  Gga gga = Gga(_gps);
   d4438:	49af      	ldr	r1, [pc, #700]	; (d46f8 <loop+0x33c>)
   d443a:	a81a      	add	r0, sp, #104	; 0x68
   d443c:	f7ff ff55 	bl	d42ea <_ZN9NmeaCacheC1ERKS_>
   d4440:	a91a      	add	r1, sp, #104	; 0x68
   d4442:	a836      	add	r0, sp, #216	; 0xd8
   d4444:	f001 ff96 	bl	d6374 <_ZN3GgaC1E9NmeaCache>
   d4448:	a81a      	add	r0, sp, #104	; 0x68
   d444a:	f7ff ff41 	bl	d42d0 <_ZN9NmeaCacheD1Ev>
  if (gga.parse())
   d444e:	a836      	add	r0, sp, #216	; 0xd8
   d4450:	f001 ff0c 	bl	d626c <_ZN3Gga5parseEv>
   d4454:	2800      	cmp	r0, #0
   d4456:	f000 81ac 	beq.w	d47b2 <loop+0x3f6>
    Serial.println("2) Global Positioning System Fixed Data ($GPGGA)");
   d445a:	f005 fb7d 	bl	d9b58 <_Z16_fetch_usbserialv>
   d445e:	49ac      	ldr	r1, [pc, #688]	; (d4710 <loop+0x354>)
   d4460:	f004 fc4b 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.println("======================================================");
   d4464:	f005 fb78 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4468:	49a5      	ldr	r1, [pc, #660]	; (d4700 <loop+0x344>)
   d446a:	f004 fc46 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("UTC Time: "); Serial.println(gga.utcTime);
   d446e:	f005 fb73 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4472:	49a8      	ldr	r1, [pc, #672]	; (d4714 <loop+0x358>)
   d4474:	f004 fc2e 	bl	d8cd4 <_ZN5Print5printEPKc>
   d4478:	f005 fb6e 	bl	d9b58 <_Z16_fetch_usbserialv>
   d447c:	9940      	ldr	r1, [sp, #256]	; 0x100
   d447e:	f004 fc3c 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("Latitude: "); Serial.println(gga.latitude);
   d4482:	f005 fb69 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4486:	49a4      	ldr	r1, [pc, #656]	; (d4718 <loop+0x35c>)
   d4488:	f004 fc24 	bl	d8cd4 <_ZN5Print5printEPKc>
   d448c:	f005 fb64 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4490:	9944      	ldr	r1, [sp, #272]	; 0x110
   d4492:	f004 fc32 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("North/SouthIndicator: "); Serial.println(gga.northSouthIndicator);
   d4496:	f005 fb5f 	bl	d9b58 <_Z16_fetch_usbserialv>
   d449a:	49a0      	ldr	r1, [pc, #640]	; (d471c <loop+0x360>)
   d449c:	f004 fc1a 	bl	d8cd4 <_ZN5Print5printEPKc>
   d44a0:	f005 fb5a 	bl	d9b58 <_Z16_fetch_usbserialv>
   d44a4:	9948      	ldr	r1, [sp, #288]	; 0x120
   d44a6:	f004 fc28 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("Longitude: "); Serial.println(gga.longitude);
   d44aa:	f005 fb55 	bl	d9b58 <_Z16_fetch_usbserialv>
   d44ae:	499c      	ldr	r1, [pc, #624]	; (d4720 <loop+0x364>)
   d44b0:	f004 fc10 	bl	d8cd4 <_ZN5Print5printEPKc>
   d44b4:	f005 fb50 	bl	d9b58 <_Z16_fetch_usbserialv>
   d44b8:	994c      	ldr	r1, [sp, #304]	; 0x130
   d44ba:	f004 fc1e 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("East/WestIndicator: "); Serial.println(gga.eastWestIndicator);
   d44be:	f005 fb4b 	bl	d9b58 <_Z16_fetch_usbserialv>
   d44c2:	4998      	ldr	r1, [pc, #608]	; (d4724 <loop+0x368>)
   d44c4:	f004 fc06 	bl	d8cd4 <_ZN5Print5printEPKc>
   d44c8:	f005 fb46 	bl	d9b58 <_Z16_fetch_usbserialv>
   d44cc:	9950      	ldr	r1, [sp, #320]	; 0x140
   d44ce:	f004 fc14 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("Position Fix Indicator: "); Serial.println(gga.positionFixIndicator);
   d44d2:	f005 fb41 	bl	d9b58 <_Z16_fetch_usbserialv>
   d44d6:	4994      	ldr	r1, [pc, #592]	; (d4728 <loop+0x36c>)
   d44d8:	f004 fbfc 	bl	d8cd4 <_ZN5Print5printEPKc>
   d44dc:	f005 fb3c 	bl	d9b58 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d44e0:	220a      	movs	r2, #10
   d44e2:	f89d 1150 	ldrb.w	r1, [sp, #336]	; 0x150
   d44e6:	4604      	mov	r4, r0
   d44e8:	f004 fc11 	bl	d8d0e <_ZN5Print11printNumberEmh>
        n += println();
   d44ec:	4620      	mov	r0, r4
   d44ee:	f004 fbf8 	bl	d8ce2 <_ZN5Print7printlnEv>
    Serial.print("Satellites Used: "); Serial.println(gga.satellitesUsed);
   d44f2:	f005 fb31 	bl	d9b58 <_Z16_fetch_usbserialv>
   d44f6:	498d      	ldr	r1, [pc, #564]	; (d472c <loop+0x370>)
   d44f8:	f004 fbec 	bl	d8cd4 <_ZN5Print5printEPKc>
   d44fc:	f005 fb2c 	bl	d9b58 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4500:	220a      	movs	r2, #10
   d4502:	f89d 1151 	ldrb.w	r1, [sp, #337]	; 0x151
   d4506:	4604      	mov	r4, r0
   d4508:	f004 fc01 	bl	d8d0e <_ZN5Print11printNumberEmh>
        n += println();
   d450c:	4620      	mov	r0, r4
   d450e:	f004 fbe8 	bl	d8ce2 <_ZN5Print7printlnEv>
    Serial.print("Horizontal Dilution of Precision: "); Serial.println(gga.hdop);
   d4512:	f005 fb21 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4516:	4986      	ldr	r1, [pc, #536]	; (d4730 <loop+0x374>)
    display.clearDisplay();
   d4518:	4c86      	ldr	r4, [pc, #536]	; (d4734 <loop+0x378>)
    Serial.print("Horizontal Dilution of Precision: "); Serial.println(gga.hdop);
   d451a:	f004 fbdb 	bl	d8cd4 <_ZN5Print5printEPKc>
   d451e:	f005 fb1b 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4522:	ed9d 0a55 	vldr	s0, [sp, #340]	; 0x154
   d4526:	2102      	movs	r1, #2
   d4528:	f004 fcf2 	bl	d8f10 <_ZN5Print7printlnEfi>
    Serial.print("Altitude: "); Serial.print(gga.altitude); Serial.print(" "); Serial.println(gga.altitudeUnit);
   d452c:	f005 fb14 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4530:	4981      	ldr	r1, [pc, #516]	; (d4738 <loop+0x37c>)
   d4532:	f004 fbcf 	bl	d8cd4 <_ZN5Print5printEPKc>
   d4536:	f005 fb0f 	bl	d9b58 <_Z16_fetch_usbserialv>
   d453a:	ed9d 0a56 	vldr	s0, [sp, #344]	; 0x158
   d453e:	2102      	movs	r1, #2
   d4540:	f004 fccc 	bl	d8edc <_ZN5Print5printEfi>
   d4544:	f005 fb08 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4548:	497c      	ldr	r1, [pc, #496]	; (d473c <loop+0x380>)
   d454a:	f004 fbc3 	bl	d8cd4 <_ZN5Print5printEPKc>
   d454e:	f005 fb03 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4552:	9957      	ldr	r1, [sp, #348]	; 0x15c
   d4554:	f004 fbd1 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("Geoidal Separation: "); Serial.print(gga.geoidalSeparation); Serial.print(" "); Serial.println(gga.geoidalSeparationUnit);
   d4558:	f005 fafe 	bl	d9b58 <_Z16_fetch_usbserialv>
   d455c:	4978      	ldr	r1, [pc, #480]	; (d4740 <loop+0x384>)
   d455e:	f004 fbb9 	bl	d8cd4 <_ZN5Print5printEPKc>
   d4562:	f005 faf9 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4566:	ed9d 0a5b 	vldr	s0, [sp, #364]	; 0x16c
   d456a:	2102      	movs	r1, #2
   d456c:	f004 fcb6 	bl	d8edc <_ZN5Print5printEfi>
   d4570:	f005 faf2 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4574:	4971      	ldr	r1, [pc, #452]	; (d473c <loop+0x380>)
   d4576:	f004 fbad 	bl	d8cd4 <_ZN5Print5printEPKc>
   d457a:	f005 faed 	bl	d9b58 <_Z16_fetch_usbserialv>
   d457e:	995c      	ldr	r1, [sp, #368]	; 0x170
   d4580:	f004 fbbb 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.print("Age of Diff. Corr.: "); Serial.println(gga.ageOfDiffCorr);
   d4584:	f005 fae8 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4588:	496e      	ldr	r1, [pc, #440]	; (d4744 <loop+0x388>)
   d458a:	f004 fba3 	bl	d8cd4 <_ZN5Print5printEPKc>
   d458e:	f005 fae3 	bl	d9b58 <_Z16_fetch_usbserialv>
   d4592:	9960      	ldr	r1, [sp, #384]	; 0x180
   d4594:	f004 fbb1 	bl	d8cfa <_ZN5Print7printlnEPKc>
    Serial.println("");
   d4598:	f005 fade 	bl	d9b58 <_Z16_fetch_usbserialv>
   d459c:	495b      	ldr	r1, [pc, #364]	; (d470c <loop+0x350>)
   d459e:	f004 fbac 	bl	d8cfa <_ZN5Print7printlnEPKc>
    CellularSignal sig = Cellular.RSSI();
   d45a2:	4969      	ldr	r1, [pc, #420]	; (d4748 <loop+0x38c>)
   d45a4:	a81a      	add	r0, sp, #104	; 0x68
   d45a6:	f003 fe0f 	bl	d81c8 <_ZN5spark13CellularClass4RSSIEv>
    display.clearDisplay();
   d45aa:	4620      	mov	r0, r4
   d45ac:	f001 f880 	bl	d56b0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d45b0:	2101      	movs	r1, #1
   d45b2:	4620      	mov	r0, r4
   d45b4:	f000 fefd 	bl	d53b2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d45b8:	2600      	movs	r6, #0
   d45ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d45be:	e9c4 6304 	strd	r6, r3, [r4, #16]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d45c2:	4962      	ldr	r1, [pc, #392]	; (d474c <loop+0x390>)
   d45c4:	a80a      	add	r0, sp, #40	; 0x28
   d45c6:	f004 fe68 	bl	d929a <_ZN6StringC1EPKc>
    display.println("Fix:" + String(gga.positionFixIndicator)+"  " + "Cell-Sig:" + int(sig.getStrength()) +"%");
   d45ca:	220a      	movs	r2, #10
   d45cc:	f89d 1150 	ldrb.w	r1, [sp, #336]	; 0x150
   d45d0:	a806      	add	r0, sp, #24
   d45d2:	f004 fed8 	bl	d9386 <_ZN6StringC1Ehh>
   d45d6:	a906      	add	r1, sp, #24
   d45d8:	a80a      	add	r0, sp, #40	; 0x28
   d45da:	f004 ff3f 	bl	d945c <_ZplRK15StringSumHelperRK6String>
   d45de:	495c      	ldr	r1, [pc, #368]	; (d4750 <loop+0x394>)
   d45e0:	f004 ff48 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d45e4:	495b      	ldr	r1, [pc, #364]	; (d4754 <loop+0x398>)
   d45e6:	f004 ff45 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d45ea:	4605      	mov	r5, r0
   d45ec:	a81a      	add	r0, sp, #104	; 0x68
   d45ee:	f003 fe59 	bl	d82a4 <_ZNK14CellularSignal11getStrengthEv>
   d45f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d45f6:	4628      	mov	r0, r5
   d45f8:	ee17 1a90 	vmov	r1, s15
   d45fc:	f004 ff4f 	bl	d949e <_ZplRK15StringSumHelperi>
   d4600:	4955      	ldr	r1, [pc, #340]	; (d4758 <loop+0x39c>)
   d4602:	f004 ff37 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d4606:	6801      	ldr	r1, [r0, #0]
   d4608:	4620      	mov	r0, r4
   d460a:	f004 fb76 	bl	d8cfa <_ZN5Print7printlnEPKc>
   d460e:	a806      	add	r0, sp, #24
   d4610:	f004 fdf8 	bl	d9204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4614:	a80a      	add	r0, sp, #40	; 0x28
   d4616:	f004 fdf5 	bl	d9204 <_ZN6StringD1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d461a:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   d461e:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d4620:	494e      	ldr	r1, [pc, #312]	; (d475c <loop+0x3a0>)
   d4622:	a806      	add	r0, sp, #24
   d4624:	f004 fe39 	bl	d929a <_ZN6StringC1EPKc>
    display.println("Lat:" + String(gga.northSouthIndicator)+" "+String(conv_coords(gga.latitude.toFloat())));
   d4628:	a948      	add	r1, sp, #288	; 0x120
   d462a:	a802      	add	r0, sp, #8
   d462c:	f004 fe75 	bl	d931a <_ZN6StringC1ERKS_>
   d4630:	a902      	add	r1, sp, #8
   d4632:	a806      	add	r0, sp, #24
   d4634:	f004 ff12 	bl	d945c <_ZplRK15StringSumHelperRK6String>
   d4638:	4940      	ldr	r1, [pc, #256]	; (d473c <loop+0x380>)
   d463a:	f004 ff1b 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d463e:	4605      	mov	r5, r0
   d4640:	a844      	add	r0, sp, #272	; 0x110
   d4642:	f004 ffe1 	bl	d9608 <_ZNK6String7toFloatEv>
   d4646:	f7ff fe5d 	bl	d4304 <_Z11conv_coordsf>
   d464a:	2106      	movs	r1, #6
   d464c:	a80a      	add	r0, sp, #40	; 0x28
   d464e:	f004 feac 	bl	d93aa <_ZN6StringC1Efi>
   d4652:	a90a      	add	r1, sp, #40	; 0x28
   d4654:	4628      	mov	r0, r5
   d4656:	f004 ff01 	bl	d945c <_ZplRK15StringSumHelperRK6String>
   d465a:	6801      	ldr	r1, [r0, #0]
   d465c:	4620      	mov	r0, r4
   d465e:	f004 fb4c 	bl	d8cfa <_ZN5Print7printlnEPKc>
   d4662:	a80a      	add	r0, sp, #40	; 0x28
   d4664:	f004 fdce 	bl	d9204 <_ZN6StringD1Ev>
   d4668:	a802      	add	r0, sp, #8
   d466a:	f004 fdcb 	bl	d9204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d466e:	a806      	add	r0, sp, #24
   d4670:	f004 fdc8 	bl	d9204 <_ZN6StringD1Ev>
   d4674:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   d4678:	6123      	str	r3, [r4, #16]
	StringSumHelper(const char *p) : String(p) {}
   d467a:	4939      	ldr	r1, [pc, #228]	; (d4760 <loop+0x3a4>)
   d467c:	a806      	add	r0, sp, #24
   d467e:	f004 fe0c 	bl	d929a <_ZN6StringC1EPKc>
    display.println("Long:" + String(gga.eastWestIndicator) +" "+String(conv_coords(gga.longitude.toFloat())));
   d4682:	a950      	add	r1, sp, #320	; 0x140
   d4684:	a802      	add	r0, sp, #8
   d4686:	f004 fe48 	bl	d931a <_ZN6StringC1ERKS_>
   d468a:	a902      	add	r1, sp, #8
   d468c:	a806      	add	r0, sp, #24
   d468e:	f004 fee5 	bl	d945c <_ZplRK15StringSumHelperRK6String>
   d4692:	492a      	ldr	r1, [pc, #168]	; (d473c <loop+0x380>)
   d4694:	f004 feee 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d4698:	4605      	mov	r5, r0
   d469a:	a84c      	add	r0, sp, #304	; 0x130
   d469c:	f004 ffb4 	bl	d9608 <_ZNK6String7toFloatEv>
   d46a0:	f7ff fe30 	bl	d4304 <_Z11conv_coordsf>
   d46a4:	2106      	movs	r1, #6
   d46a6:	a80a      	add	r0, sp, #40	; 0x28
   d46a8:	f004 fe7f 	bl	d93aa <_ZN6StringC1Efi>
   d46ac:	a90a      	add	r1, sp, #40	; 0x28
   d46ae:	4628      	mov	r0, r5
   d46b0:	f004 fed4 	bl	d945c <_ZplRK15StringSumHelperRK6String>
   d46b4:	6801      	ldr	r1, [r0, #0]
   d46b6:	4620      	mov	r0, r4
   d46b8:	f004 fb1f 	bl	d8cfa <_ZN5Print7printlnEPKc>
   d46bc:	a80a      	add	r0, sp, #40	; 0x28
   d46be:	f004 fda1 	bl	d9204 <_ZN6StringD1Ev>
   d46c2:	a802      	add	r0, sp, #8
   d46c4:	f004 fd9e 	bl	d9204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46c8:	a806      	add	r0, sp, #24
   d46ca:	f004 fd9b 	bl	d9204 <_ZN6StringD1Ev>
	display.display();
   d46ce:	4620      	mov	r0, r4
   d46d0:	f001 fa5a 	bl	d5b88 <_ZN16Adafruit_SSD13067displayEv>
	String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d46d4:	f005 f90d 	bl	d98f2 <_ZN9TimeClass3nowEv>
   d46d8:	4b22      	ldr	r3, [pc, #136]	; (d4764 <loop+0x3a8>)
   d46da:	4923      	ldr	r1, [pc, #140]	; (d4768 <loop+0x3ac>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	9300      	str	r3, [sp, #0]
   d46e0:	4602      	mov	r2, r0
   d46e2:	17c3      	asrs	r3, r0, #31
   d46e4:	a802      	add	r0, sp, #8
   d46e6:	f005 f8a5 	bl	d9834 <_ZN9TimeClass6formatExPKc>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d46ea:	f7ff fe4b 	bl	d4384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d46ee:	4631      	mov	r1, r6
   d46f0:	f004 fc75 	bl	d8fde <_ZN8SPIClass11setDataModeEh>
   d46f4:	e03a      	b.n	d476c <loop+0x3b0>
   d46f6:	bf00      	nop
   d46f8:	2003ded0 	.word	0x2003ded0
   d46fc:	000dcc94 	.word	0x000dcc94
   d4700:	000dccaf 	.word	0x000dccaf
   d4704:	000dcce6 	.word	0x000dcce6
   d4708:	000dccf3 	.word	0x000dccf3
   d470c:	000ddcf4 	.word	0x000ddcf4
   d4710:	000dcd04 	.word	0x000dcd04
   d4714:	000dcd35 	.word	0x000dcd35
   d4718:	000dcd40 	.word	0x000dcd40
   d471c:	000dcd4b 	.word	0x000dcd4b
   d4720:	000dcd62 	.word	0x000dcd62
   d4724:	000dcd6e 	.word	0x000dcd6e
   d4728:	000dcd83 	.word	0x000dcd83
   d472c:	000dcd9c 	.word	0x000dcd9c
   d4730:	000dcdae 	.word	0x000dcdae
   d4734:	2003dff8 	.word	0x2003dff8
   d4738:	000dcdd1 	.word	0x000dcdd1
   d473c:	000dce0c 	.word	0x000dce0c
   d4740:	000dcddc 	.word	0x000dcddc
   d4744:	000dcdf1 	.word	0x000dcdf1
   d4748:	2003e54c 	.word	0x2003e54c
   d474c:	000dce06 	.word	0x000dce06
   d4750:	000dce0b 	.word	0x000dce0b
   d4754:	000dce0e 	.word	0x000dce0e
   d4758:	000dce18 	.word	0x000dce18
   d475c:	000dce1a 	.word	0x000dce1a
   d4760:	000dce1f 	.word	0x000dce1f
   d4764:	2003dce4 	.word	0x2003dce4
   d4768:	2003e5b0 	.word	0x2003e5b0
	if (gga.positionFixIndicator != 0){
   d476c:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
   d4770:	b1e3      	cbz	r3, d47ac <loop+0x3f0>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4772:	f003 fa1b 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
	   if (millis() - lastmillis_pub >= pub_time_milli) {
   d4776:	4b48      	ldr	r3, [pc, #288]	; (d4898 <loop+0x4dc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	1ac0      	subs	r0, r0, r3
   d477c:	4b47      	ldr	r3, [pc, #284]	; (d489c <loop+0x4e0>)
   d477e:	681b      	ldr	r3, [r3, #0]
   d4780:	4298      	cmp	r0, r3
   d4782:	d313      	bcc.n	d47ac <loop+0x3f0>
    return open(m_cwd, path, oflag);
   d4784:	4a46      	ldr	r2, [pc, #280]	; (d48a0 <loop+0x4e4>)
   d4786:	4947      	ldr	r1, [pc, #284]	; (d48a4 <loop+0x4e8>)
   d4788:	6812      	ldr	r2, [r2, #0]
   d478a:	6809      	ldr	r1, [r1, #0]
   d478c:	4846      	ldr	r0, [pc, #280]	; (d48a8 <loop+0x4ec>)
   d478e:	f244 2302 	movw	r3, #16898	; 0x4202
   d4792:	f002 f886 	bl	d68a2 <_ZN7FatFile4openEPS_PKci>
	     if (!myFile.open(datafile_name, O_RDWR | O_CREAT | O_AT_END)) {
   d4796:	2800      	cmp	r0, #0
   d4798:	d139      	bne.n	d480e <loop+0x452>
            Serial.println("SD Card file deviceID-xxx open failed");
   d479a:	f005 f9dd 	bl	d9b58 <_Z16_fetch_usbserialv>
   d479e:	4943      	ldr	r1, [pc, #268]	; (d48ac <loop+0x4f0>)
   d47a0:	f004 faab 	bl	d8cfa <_ZN5Print7printlnEPKc>
   d47a4:	f003 fa02 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
	    lastmillis_pub = millis();
   d47a8:	4b3b      	ldr	r3, [pc, #236]	; (d4898 <loop+0x4dc>)
   d47aa:	6018      	str	r0, [r3, #0]
	String timeStamp = Time.format(Time.now(), TIME_FORMAT_ISO8601_FULL);
   d47ac:	a802      	add	r0, sp, #8
   d47ae:	f004 fd29 	bl	d9204 <_ZN6StringD1Ev>
  delay(1000);
   d47b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d47b6:	f003 fcad 	bl	d8114 <delay>
Checksum
<CR> <LF>                                       End of message termination

*/

class Gga : public Nmea
   d47ba:	4b3d      	ldr	r3, [pc, #244]	; (d48b0 <loop+0x4f4>)
   d47bc:	9336      	str	r3, [sp, #216]	; 0xd8
   d47be:	a860      	add	r0, sp, #384	; 0x180
   d47c0:	f004 fd20 	bl	d9204 <_ZN6StringD1Ev>
   d47c4:	a85c      	add	r0, sp, #368	; 0x170
   d47c6:	f004 fd1d 	bl	d9204 <_ZN6StringD1Ev>
   d47ca:	a857      	add	r0, sp, #348	; 0x15c
   d47cc:	f004 fd1a 	bl	d9204 <_ZN6StringD1Ev>
   d47d0:	a850      	add	r0, sp, #320	; 0x140
   d47d2:	f004 fd17 	bl	d9204 <_ZN6StringD1Ev>
   d47d6:	a84c      	add	r0, sp, #304	; 0x130
   d47d8:	f004 fd14 	bl	d9204 <_ZN6StringD1Ev>
   d47dc:	a848      	add	r0, sp, #288	; 0x120
   d47de:	f004 fd11 	bl	d9204 <_ZN6StringD1Ev>
   d47e2:	a844      	add	r0, sp, #272	; 0x110
   d47e4:	f004 fd0e 	bl	d9204 <_ZN6StringD1Ev>
   d47e8:	a840      	add	r0, sp, #256	; 0x100
   d47ea:	f004 fd0b 	bl	d9204 <_ZN6StringD1Ev>
#define _NMEA_H

#include "application.h"
#include "NmeaCache.h"

class Nmea
   d47ee:	a83c      	add	r0, sp, #240	; 0xf0
   d47f0:	f004 fd08 	bl	d9204 <_ZN6StringD1Ev>
   d47f4:	a837      	add	r0, sp, #220	; 0xdc
   d47f6:	f004 fd05 	bl	d9204 <_ZN6StringD1Ev>
class Pgtop : public Nmea
   d47fa:	4b2e      	ldr	r3, [pc, #184]	; (d48b4 <loop+0x4f8>)
   d47fc:	930e      	str	r3, [sp, #56]	; 0x38
   d47fe:	a814      	add	r0, sp, #80	; 0x50
   d4800:	f004 fd00 	bl	d9204 <_ZN6StringD1Ev>
   d4804:	a80f      	add	r0, sp, #60	; 0x3c
   d4806:	f004 fcfd 	bl	d9204 <_ZN6StringD1Ev>
}
   d480a:	b064      	add	sp, #400	; 0x190
   d480c:	bd70      	pop	{r4, r5, r6, pc}
	StringSumHelper(const String &s) : String(s) {}
   d480e:	a902      	add	r1, sp, #8
   d4810:	a806      	add	r0, sp, #24
   d4812:	f004 fd82 	bl	d931a <_ZN6StringC1ERKS_>
            myFile.println(String(timeStamp + ","+gga.northSouthIndicator+" "+conv_coords(gga.latitude.toFloat())+","+gga.eastWestIndicator+" "+conv_coords(gga.longitude.toFloat())+","+sig.getStrength()));
   d4816:	4928      	ldr	r1, [pc, #160]	; (d48b8 <loop+0x4fc>)
   d4818:	a806      	add	r0, sp, #24
   d481a:	f004 fe2b 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d481e:	a948      	add	r1, sp, #288	; 0x120
   d4820:	f004 fe1c 	bl	d945c <_ZplRK15StringSumHelperRK6String>
   d4824:	4925      	ldr	r1, [pc, #148]	; (d48bc <loop+0x500>)
   d4826:	f004 fe25 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d482a:	4604      	mov	r4, r0
   d482c:	a844      	add	r0, sp, #272	; 0x110
   d482e:	f004 feeb 	bl	d9608 <_ZNK6String7toFloatEv>
   d4832:	f7ff fd67 	bl	d4304 <_Z11conv_coordsf>
   d4836:	4620      	mov	r0, r4
   d4838:	f004 fe3b 	bl	d94b2 <_ZplRK15StringSumHelperf>
   d483c:	491e      	ldr	r1, [pc, #120]	; (d48b8 <loop+0x4fc>)
   d483e:	f004 fe19 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d4842:	a950      	add	r1, sp, #320	; 0x140
   d4844:	f004 fe0a 	bl	d945c <_ZplRK15StringSumHelperRK6String>
   d4848:	491c      	ldr	r1, [pc, #112]	; (d48bc <loop+0x500>)
   d484a:	f004 fe13 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d484e:	4604      	mov	r4, r0
   d4850:	a84c      	add	r0, sp, #304	; 0x130
   d4852:	f004 fed9 	bl	d9608 <_ZNK6String7toFloatEv>
   d4856:	f7ff fd55 	bl	d4304 <_Z11conv_coordsf>
   d485a:	4620      	mov	r0, r4
   d485c:	f004 fe29 	bl	d94b2 <_ZplRK15StringSumHelperf>
   d4860:	4915      	ldr	r1, [pc, #84]	; (d48b8 <loop+0x4fc>)
   d4862:	f004 fe07 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d4866:	4604      	mov	r4, r0
   d4868:	a81a      	add	r0, sp, #104	; 0x68
   d486a:	f003 fd1b 	bl	d82a4 <_ZNK14CellularSignal11getStrengthEv>
   d486e:	4620      	mov	r0, r4
   d4870:	f004 fe1f 	bl	d94b2 <_ZplRK15StringSumHelperf>
   d4874:	4601      	mov	r1, r0
   d4876:	a80a      	add	r0, sp, #40	; 0x28
   d4878:	f004 fd4f 	bl	d931a <_ZN6StringC1ERKS_>
   d487c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d487e:	4810      	ldr	r0, [pc, #64]	; (d48c0 <loop+0x504>)
   d4880:	f004 fa3b 	bl	d8cfa <_ZN5Print7printlnEPKc>
   d4884:	a80a      	add	r0, sp, #40	; 0x28
   d4886:	f004 fcbd 	bl	d9204 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d488a:	a806      	add	r0, sp, #24
   d488c:	f004 fcba 	bl	d9204 <_ZN6StringD1Ev>
            myFile.close();
   d4890:	4805      	ldr	r0, [pc, #20]	; (d48a8 <loop+0x4ec>)
   d4892:	f001 ffff 	bl	d6894 <_ZN7FatFile5closeEv>
   d4896:	e785      	b.n	d47a4 <loop+0x3e8>
   d4898:	2003e068 	.word	0x2003e068
   d489c:	2003e0b0 	.word	0x2003e0b0
   d48a0:	2003dfe8 	.word	0x2003dfe8
   d48a4:	2003e53c 	.word	0x2003e53c
   d48a8:	2003e07c 	.word	0x2003e07c
   d48ac:	000dce25 	.word	0x000dce25
   d48b0:	000dda80 	.word	0x000dda80
   d48b4:	000dda8c 	.word	0x000dda8c
   d48b8:	000dce4b 	.word	0x000dce4b
   d48bc:	000dce0c 	.word	0x000dce0c
   d48c0:	2003e06c 	.word	0x2003e06c

000d48c4 <setup>:
{
   d48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  delay(2000);
   d48c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
   d48ca:	b087      	sub	sp, #28
  display.setup();
   d48cc:	4c5b      	ldr	r4, [pc, #364]	; (d4a3c <setup+0x178>)
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d48ce:	4d5c      	ldr	r5, [pc, #368]	; (d4a40 <setup+0x17c>)
  delay(2000);
   d48d0:	f003 fc20 	bl	d8114 <delay>
  Serial.begin();
   d48d4:	f005 f940 	bl	d9b58 <_Z16_fetch_usbserialv>
   d48d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d48dc:	f005 f930 	bl	d9b40 <_ZN9USBSerial5beginEl>
  Serial.println("Initializing...");
   d48e0:	f005 f93a 	bl	d9b58 <_Z16_fetch_usbserialv>
   d48e4:	4957      	ldr	r1, [pc, #348]	; (d4a44 <setup+0x180>)
   d48e6:	f004 fa08 	bl	d8cfa <_ZN5Print7printlnEPKc>
  display.setup();
   d48ea:	4620      	mov	r0, r4
   d48ec:	f003 f8c4 	bl	d7a78 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d48f0:	4620      	mov	r0, r4
   d48f2:	f000 fedd 	bl	d56b0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d48f6:	4620      	mov	r0, r4
   d48f8:	f001 f946 	bl	d5b88 <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   d48fc:	2101      	movs	r1, #1
   d48fe:	4620      	mov	r0, r4
   d4900:	f000 fd57 	bl	d53b2 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4904:	2600      	movs	r6, #0
   d4906:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d490a:	e9c4 6304 	strd	r6, r3, [r4, #16]
  display.println("Initializing...");
   d490e:	494d      	ldr	r1, [pc, #308]	; (d4a44 <setup+0x180>)
   d4910:	4620      	mov	r0, r4
   d4912:	f004 f9f2 	bl	d8cfa <_ZN5Print7printlnEPKc>
  display.display();
   d4916:	4620      	mov	r0, r4
   d4918:	f001 f936 	bl	d5b88 <_ZN16Adafruit_SSD13067displayEv>
  _gps.begin(9600);
   d491c:	484a      	ldr	r0, [pc, #296]	; (d4a48 <setup+0x184>)
   d491e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4922:	f001 fa03 	bl	d5d2c <_ZN3Gps5beginEm>
   d4926:	4628      	mov	r0, r5
   d4928:	4632      	mov	r2, r6
   d492a:	4631      	mov	r1, r6
   d492c:	f7ff fc93 	bl	d4256 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4930:	68a8      	ldr	r0, [r5, #8]
   d4932:	4625      	mov	r5, r4
   d4934:	b140      	cbz	r0, d4948 <setup+0x84>
   d4936:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d493a:	9300      	str	r3, [sp, #0]
   d493c:	9601      	str	r6, [sp, #4]
   d493e:	4633      	mov	r3, r6
   d4940:	4632      	mov	r2, r6
   d4942:	4631      	mov	r1, r6
   d4944:	f003 f8f2 	bl	d7b2c <os_timer_change>
   d4948:	f7ff fd1c 	bl	d4384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d494c:	2100      	movs	r1, #0
   d494e:	f004 fb46 	bl	d8fde <_ZN8SPIClass11setDataModeEh>
 Particle.publish("SDCard_Setup", "Initializing");
   d4952:	4a3e      	ldr	r2, [pc, #248]	; (d4a4c <setup+0x188>)
   d4954:	493e      	ldr	r1, [pc, #248]	; (d4a50 <setup+0x18c>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4956:	4c3f      	ldr	r4, [pc, #252]	; (d4a54 <setup+0x190>)
   d4958:	a802      	add	r0, sp, #8
   d495a:	f7ff fc21 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d495e:	a803      	add	r0, sp, #12
   d4960:	f7ff fcfa 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class SPISettings : public Printable {
   d4964:	4b3c      	ldr	r3, [pc, #240]	; (d4a58 <setup+0x194>)
   d4966:	9302      	str	r3, [sp, #8]
   d4968:	2300      	movs	r3, #0
   d496a:	f88d 300c 	strb.w	r3, [sp, #12]
   d496e:	f504 678c 	add.w	r7, r4, #1120	; 0x460
   d4972:	4b3a      	ldr	r3, [pc, #232]	; (d4a5c <setup+0x198>)
   d4974:	9304      	str	r3, [sp, #16]
   d4976:	2601      	movs	r6, #1
   d4978:	ab02      	add	r3, sp, #8
   d497a:	2205      	movs	r2, #5
   d497c:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4980:	4638      	mov	r0, r7
   d4982:	f8ad 6014 	strh.w	r6, [sp, #20]
   d4986:	f002 fe1d 	bl	d75c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d498a:	2800      	cmp	r0, #0
   d498c:	d036      	beq.n	d49fc <setup+0x138>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d498e:	6027      	str	r7, [r4, #0]
    vwd()->close();
   d4990:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   d4994:	f001 ff7e 	bl	d6894 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4998:	4631      	mov	r1, r6
   d499a:	4620      	mov	r0, r4
   d499c:	f002 fcc0 	bl	d7320 <_ZN9FatVolume4initEh>
   d49a0:	f204 463c 	addw	r6, r4, #1084	; 0x43c
   d49a4:	4601      	mov	r1, r0
   d49a6:	b320      	cbz	r0, d49f2 <setup+0x12e>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d49a8:	492a      	ldr	r1, [pc, #168]	; (d4a54 <setup+0x190>)
   d49aa:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   d49ae:	f001 fd92 	bl	d64d6 <_ZN7FatFile8openRootEP9FatVolume>
   d49b2:	b318      	cbz	r0, d49fc <setup+0x138>
    if (!dir->isDir()) {
   d49b4:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d49b8:	f013 0f70 	tst.w	r3, #112	; 0x70
   d49bc:	d01e      	beq.n	d49fc <setup+0x138>
    m_cwd = dir;
   d49be:	4b28      	ldr	r3, [pc, #160]	; (d4a60 <setup+0x19c>)
            Particle.publish("SDCard Logger", "OK");
   d49c0:	4a28      	ldr	r2, [pc, #160]	; (d4a64 <setup+0x1a0>)
   d49c2:	4929      	ldr	r1, [pc, #164]	; (d4a68 <setup+0x1a4>)
   d49c4:	601e      	str	r6, [r3, #0]
   d49c6:	a802      	add	r0, sp, #8
   d49c8:	f7ff fbea 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d49cc:	a803      	add	r0, sp, #12
   d49ce:	f7ff fcc3 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d49d2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init - OK");
   d49d6:	4925      	ldr	r1, [pc, #148]	; (d4a6c <setup+0x1a8>)
   d49d8:	612b      	str	r3, [r5, #16]
   d49da:	4818      	ldr	r0, [pc, #96]	; (d4a3c <setup+0x178>)
   d49dc:	f004 f98d 	bl	d8cfa <_ZN5Print7printlnEPKc>
          display.display();
   d49e0:	4816      	ldr	r0, [pc, #88]	; (d4a3c <setup+0x178>)
   d49e2:	f001 f8d1 	bl	d5b88 <_ZN16Adafruit_SSD13067displayEv>
            delay(1000);
   d49e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d49ea:	f003 fb93 	bl	d8114 <delay>
}
   d49ee:	b007      	add	sp, #28
   d49f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (part ? init(part) : init(1) || init(0))
   d49f2:	4620      	mov	r0, r4
   d49f4:	f002 fc94 	bl	d7320 <_ZN9FatVolume4initEh>
   d49f8:	2800      	cmp	r0, #0
   d49fa:	d1d5      	bne.n	d49a8 <setup+0xe4>
         Particle.publish("SDCard Logger", "Failed");
   d49fc:	4a1c      	ldr	r2, [pc, #112]	; (d4a70 <setup+0x1ac>)
   d49fe:	491a      	ldr	r1, [pc, #104]	; (d4a68 <setup+0x1a4>)
   d4a00:	a802      	add	r0, sp, #8
   d4a02:	f7ff fbcd 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4a06:	a803      	add	r0, sp, #12
   d4a08:	f7ff fca6 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
         delay(1000);
   d4a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4a10:	f003 fb80 	bl	d8114 <delay>
         Particle.publish("ALERT", "SDCard_Failure!");
   d4a14:	4a17      	ldr	r2, [pc, #92]	; (d4a74 <setup+0x1b0>)
   d4a16:	4918      	ldr	r1, [pc, #96]	; (d4a78 <setup+0x1b4>)
   d4a18:	a802      	add	r0, sp, #8
   d4a1a:	f7ff fbc1 	bl	d41a0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4a1e:	a803      	add	r0, sp, #12
   d4a20:	f7ff fc9a 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a24:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
          display.println("SD Card Init Failed");
   d4a28:	4914      	ldr	r1, [pc, #80]	; (d4a7c <setup+0x1b8>)
   d4a2a:	612b      	str	r3, [r5, #16]
   d4a2c:	4803      	ldr	r0, [pc, #12]	; (d4a3c <setup+0x178>)
   d4a2e:	f004 f964 	bl	d8cfa <_ZN5Print7printlnEPKc>
          display.display();
   d4a32:	4802      	ldr	r0, [pc, #8]	; (d4a3c <setup+0x178>)
   d4a34:	f001 f8a8 	bl	d5b88 <_ZN16Adafruit_SSD13067displayEv>
}
   d4a38:	e7d9      	b.n	d49ee <setup+0x12a>
   d4a3a:	bf00      	nop
   d4a3c:	2003dff8 	.word	0x2003dff8
   d4a40:	2003dfcc 	.word	0x2003dfcc
   d4a44:	000dce4d 	.word	0x000dce4d
   d4a48:	2003ded0 	.word	0x2003ded0
   d4a4c:	000dce5d 	.word	0x000dce5d
   d4a50:	000dce6a 	.word	0x000dce6a
   d4a54:	2003e0b4 	.word	0x2003e0b4
   d4a58:	000dced0 	.word	0x000dced0
   d4a5c:	02faf080 	.word	0x02faf080
   d4a60:	2003e53c 	.word	0x2003e53c
   d4a64:	000dce94 	.word	0x000dce94
   d4a68:	000dce77 	.word	0x000dce77
   d4a6c:	000dce85 	.word	0x000dce85
   d4a70:	000dceba 	.word	0x000dceba
   d4a74:	000dce97 	.word	0x000dce97
   d4a78:	000dcea7 	.word	0x000dcea7
   d4a7c:	000dcead 	.word	0x000dcead

000d4a80 <_GLOBAL__sub_I__gps>:
 }
   d4a80:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4a82:	4b4b      	ldr	r3, [pc, #300]	; (d4bb0 <_GLOBAL__sub_I__gps+0x130>)
   d4a84:	2400      	movs	r4, #0
   d4a86:	b088      	sub	sp, #32
   d4a88:	701c      	strb	r4, [r3, #0]
Gps _gps = Gps(&Serial1);
   d4a8a:	f004 ffe1 	bl	d9a50 <_Z22__fetch_global_Serial1v>
   d4a8e:	4601      	mov	r1, r0
   d4a90:	4848      	ldr	r0, [pc, #288]	; (d4bb4 <_GLOBAL__sub_I__gps+0x134>)
   d4a92:	f001 f934 	bl	d5cfe <_ZN3GpsC1EP11USARTSerial>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4a96:	4b48      	ldr	r3, [pc, #288]	; (d4bb8 <_GLOBAL__sub_I__gps+0x138>)
   d4a98:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a9a:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4a9c:	4b47      	ldr	r3, [pc, #284]	; (d4bbc <_GLOBAL__sub_I__gps+0x13c>)
   d4a9e:	4a48      	ldr	r2, [pc, #288]	; (d4bc0 <_GLOBAL__sub_I__gps+0x140>)
   d4aa0:	601a      	str	r2, [r3, #0]
   d4aa2:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4aa6:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4aaa:	ae02      	add	r6, sp, #8
   d4aac:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4ab4:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ab8:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4abc:	e882 0003 	stmia.w	r2, {r0, r1}
   d4ac0:	4a40      	ldr	r2, [pc, #256]	; (d4bc4 <_GLOBAL__sub_I__gps+0x144>)
   d4ac2:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4ac4:	699a      	ldr	r2, [r3, #24]
   d4ac6:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ac8:	4a3f      	ldr	r2, [pc, #252]	; (d4bc8 <_GLOBAL__sub_I__gps+0x148>)
   d4aca:	711c      	strb	r4, [r3, #4]
   d4acc:	609c      	str	r4, [r3, #8]
   d4ace:	619a      	str	r2, [r3, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4ad0:	f103 0008 	add.w	r0, r3, #8
   d4ad4:	4a3d      	ldr	r2, [pc, #244]	; (d4bcc <_GLOBAL__sub_I__gps+0x14c>)
      __a = _GLIBCXX_MOVE(__b);
   d4ad6:	9406      	str	r4, [sp, #24]
   d4ad8:	2101      	movs	r1, #1
   d4ada:	e9cd 4400 	strd	r4, r4, [sp]
   d4ade:	f003 f80d 	bl	d7afc <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d4ae2:	4628      	mov	r0, r5
   d4ae4:	f7ff fbae 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
OledWingAdafruit display;
   d4ae8:	2107      	movs	r1, #7
   d4aea:	4839      	ldr	r0, [pc, #228]	; (d4bd0 <_GLOBAL__sub_I__gps+0x150>)
   d4aec:	f002 ff96 	bl	d7a1c <_ZN16OledWingAdafruitC1Ei>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4af0:	4938      	ldr	r1, [pc, #224]	; (d4bd4 <_GLOBAL__sub_I__gps+0x154>)
   d4af2:	4608      	mov	r0, r1
   d4af4:	f003 fa36 	bl	d7f64 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
   d4af8:	4936      	ldr	r1, [pc, #216]	; (d4bd4 <_GLOBAL__sub_I__gps+0x154>)
   d4afa:	4628      	mov	r0, r5
   d4afc:	f004 fc0d 	bl	d931a <_ZN6StringC1ERKS_>
String datafile_name = String(myID+"-"+Time.year()+Time.month()+Time.day()+Time.hour()+Time.minute()+".csv");
   d4b00:	4935      	ldr	r1, [pc, #212]	; (d4bd8 <_GLOBAL__sub_I__gps+0x158>)
   d4b02:	4628      	mov	r0, r5
   d4b04:	f004 fcb6 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d4b08:	4606      	mov	r6, r0
   d4b0a:	f004 ff2f 	bl	d996c <_ZN9TimeClass4yearEv>
   d4b0e:	4601      	mov	r1, r0
   d4b10:	4630      	mov	r0, r6
   d4b12:	f004 fcc4 	bl	d949e <_ZplRK15StringSumHelperi>
   d4b16:	4606      	mov	r6, r0
   d4b18:	f004 ff20 	bl	d995c <_ZN9TimeClass5monthEv>
   d4b1c:	4601      	mov	r1, r0
   d4b1e:	4630      	mov	r0, r6
   d4b20:	f004 fcbd 	bl	d949e <_ZplRK15StringSumHelperi>
   d4b24:	4606      	mov	r6, r0
   d4b26:	f004 ff0d 	bl	d9944 <_ZN9TimeClass3dayEv>
   d4b2a:	4601      	mov	r1, r0
   d4b2c:	4630      	mov	r0, r6
   d4b2e:	f004 fcb6 	bl	d949e <_ZplRK15StringSumHelperi>
   d4b32:	4606      	mov	r6, r0
   d4b34:	f004 feee 	bl	d9914 <_ZN9TimeClass4hourEv>
   d4b38:	4601      	mov	r1, r0
   d4b3a:	4630      	mov	r0, r6
   d4b3c:	f004 fcaf 	bl	d949e <_ZplRK15StringSumHelperi>
   d4b40:	4606      	mov	r6, r0
   d4b42:	f004 fef3 	bl	d992c <_ZN9TimeClass6minuteEv>
   d4b46:	4601      	mov	r1, r0
   d4b48:	4630      	mov	r0, r6
   d4b4a:	f004 fca8 	bl	d949e <_ZplRK15StringSumHelperi>
   d4b4e:	4923      	ldr	r1, [pc, #140]	; (d4bdc <_GLOBAL__sub_I__gps+0x15c>)
   d4b50:	f004 fc90 	bl	d9474 <_ZplRK15StringSumHelperPKc>
   d4b54:	4601      	mov	r1, r0
   d4b56:	4822      	ldr	r0, [pc, #136]	; (d4be0 <_GLOBAL__sub_I__gps+0x160>)
   d4b58:	f004 fbdf 	bl	d931a <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d4b5c:	4628      	mov	r0, r5
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4b5e:	4d21      	ldr	r5, [pc, #132]	; (d4be4 <_GLOBAL__sub_I__gps+0x164>)
   d4b60:	f004 fb50 	bl	d9204 <_ZN6StringD1Ev>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4b64:	2364      	movs	r3, #100	; 0x64
   d4b66:	f885 3460 	strb.w	r3, [r5, #1120]	; 0x460
  {
   d4b6a:	4b1f      	ldr	r3, [pc, #124]	; (d4be8 <_GLOBAL__sub_I__gps+0x168>)
   d4b6c:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   d4b70:	2301      	movs	r3, #1
   d4b72:	f885 3474 	strb.w	r3, [r5, #1140]	; 0x474
   d4b76:	71ec      	strb	r4, [r5, #7]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4b78:	f8a5 443c 	strh.w	r4, [r5, #1084]	; 0x43c
   d4b7c:	f885 446a 	strb.w	r4, [r5, #1130]	; 0x46a
   d4b80:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   d4b84:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   d4b88:	f7ff fbfc 	bl	d4384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4b8c:	4a17      	ldr	r2, [pc, #92]	; (d4bec <_GLOBAL__sub_I__gps+0x16c>)
  File() {}
   d4b8e:	4918      	ldr	r1, [pc, #96]	; (d4bf0 <_GLOBAL__sub_I__gps+0x170>)
   d4b90:	6011      	str	r1, [r2, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b96:	6093      	str	r3, [r2, #8]
   d4b98:	8214      	strh	r4, [r2, #16]
    Print() : write_error(0) {}
   d4b9a:	6054      	str	r4, [r2, #4]
int pub_time_milli = pub_time * 1000;
   d4b9c:	4a15      	ldr	r2, [pc, #84]	; (d4bf4 <_GLOBAL__sub_I__gps+0x174>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4b9e:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
   d4ba2:	6812      	ldr	r2, [r2, #0]
   d4ba4:	4353      	muls	r3, r2
   d4ba6:	4a14      	ldr	r2, [pc, #80]	; (d4bf8 <_GLOBAL__sub_I__gps+0x178>)
   d4ba8:	6013      	str	r3, [r2, #0]
 }
   d4baa:	b008      	add	sp, #32
   d4bac:	bd70      	pop	{r4, r5, r6, pc}
   d4bae:	bf00      	nop
   d4bb0:	2003decc 	.word	0x2003decc
   d4bb4:	2003ded0 	.word	0x2003ded0
   d4bb8:	000d411d 	.word	0x000d411d
   d4bbc:	2003dfcc 	.word	0x2003dfcc
   d4bc0:	000dcee4 	.word	0x000dcee4
   d4bc4:	000d40e9 	.word	0x000d40e9
   d4bc8:	000d40e5 	.word	0x000d40e5
   d4bcc:	000d413b 	.word	0x000d413b
   d4bd0:	2003dff8 	.word	0x2003dff8
   d4bd4:	2003e0a0 	.word	0x2003e0a0
   d4bd8:	000dcec1 	.word	0x000dcec1
   d4bdc:	000dcec3 	.word	0x000dcec3
   d4be0:	2003dfe8 	.word	0x2003dfe8
   d4be4:	2003e0b4 	.word	0x2003e0b4
   d4be8:	000dced0 	.word	0x000dced0
   d4bec:	2003e06c 	.word	0x2003e06c
   d4bf0:	000dcef8 	.word	0x000dcef8
   d4bf4:	2003dcdc 	.word	0x2003dcdc
   d4bf8:	2003e0b0 	.word	0x2003e0b0

000d4bfc <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c00:	b085      	sub	sp, #20
   d4c02:	461f      	mov	r7, r3
   d4c04:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4c08:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4c0c:	eba8 0902 	sub.w	r9, r8, r2
   d4c10:	eba7 0a01 	sub.w	sl, r7, r1
   d4c14:	f1b9 0f00 	cmp.w	r9, #0
   d4c18:	bfb8      	it	lt
   d4c1a:	f1c9 0900 	rsblt	r9, r9, #0
   d4c1e:	f1ba 0f00 	cmp.w	sl, #0
   d4c22:	bfb8      	it	lt
   d4c24:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4c28:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4c2a:	4683      	mov	fp, r0
   d4c2c:	460c      	mov	r4, r1
   d4c2e:	4615      	mov	r5, r2
    if (steep) {
   d4c30:	dd04      	ble.n	d4c3c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4c32:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4c34:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4c36:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4c38:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4c3a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4c3c:	42bc      	cmp	r4, r7
   d4c3e:	dd05      	ble.n	d4c4c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4c40:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4c42:	4645      	mov	r5, r8
   d4c44:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4c46:	4622      	mov	r2, r4
   d4c48:	463c      	mov	r4, r7
   d4c4a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4c4c:	1b3e      	subs	r6, r7, r4
   d4c4e:	b2b2      	uxth	r2, r6
   d4c50:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4c52:	eba8 0205 	sub.w	r2, r8, r5
   d4c56:	2a00      	cmp	r2, #0
   d4c58:	bfb8      	it	lt
   d4c5a:	4252      	neglt	r2, r2
   d4c5c:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4c5e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4c62:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4c66:	4545      	cmp	r5, r8
   d4c68:	bfb4      	ite	lt
   d4c6a:	2201      	movlt	r2, #1
   d4c6c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    int16_t err = dx / 2;
   d4c70:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4c72:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4c74:	42bc      	cmp	r4, r7
   d4c76:	dc1c      	bgt.n	d4cb2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4c78:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4c7c:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4c7e:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4c80:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4c84:	bfc7      	ittee	gt
   d4c86:	4629      	movgt	r1, r5
   d4c88:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4c8a:	462a      	movle	r2, r5
   d4c8c:	4621      	movle	r1, r4
   d4c8e:	4658      	mov	r0, fp
   d4c90:	47c0      	blx	r8
        }
        err -= dy;
   d4c92:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4c94:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4c96:	1ab6      	subs	r6, r6, r2
   d4c98:	b2b1      	uxth	r1, r6
   d4c9a:	b236      	sxth	r6, r6
        if (err < 0) {
   d4c9c:	2e00      	cmp	r6, #0
   d4c9e:	da05      	bge.n	d4cac <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4ca0:	9a02      	ldr	r2, [sp, #8]
   d4ca2:	4415      	add	r5, r2
            err += dx;
   d4ca4:	9a00      	ldr	r2, [sp, #0]
   d4ca6:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4ca8:	b22d      	sxth	r5, r5
            err += dx;
   d4caa:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4cac:	3401      	adds	r4, #1
   d4cae:	b224      	sxth	r4, r4
   d4cb0:	e7e0      	b.n	d4c74 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4cb2:	b005      	add	sp, #20
   d4cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4cb8 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4cb8:	4770      	bx	lr

000d4cba <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4cba:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4cbc:	6804      	ldr	r4, [r0, #0]
   d4cbe:	6924      	ldr	r4, [r4, #16]
   d4cc0:	46a4      	mov	ip, r4
}
   d4cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d4cc6:	4760      	bx	ip

000d4cc8 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4cc8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4cca:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4ccc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4cd0:	9502      	str	r5, [sp, #8]
   d4cd2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4cd4:	46a4      	mov	ip, r4
}
   d4cd6:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4cd8:	4760      	bx	ip

000d4cda <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4cda:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4cdc:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4cde:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4ce2:	9502      	str	r5, [sp, #8]
   d4ce4:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4ce6:	46a4      	mov	ip, r4
}
   d4ce8:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4cea:	4760      	bx	ip

000d4cec <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4cec:	b470      	push	{r4, r5, r6}
   d4cee:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4cf2:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4cf6:	6804      	ldr	r4, [r0, #0]
   d4cf8:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4cfc:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4cfe:	46a4      	mov	ip, r4
}
   d4d00:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4d02:	4760      	bx	ip

000d4d04 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4d04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4d08:	461c      	mov	r4, r3
    startWrite();
   d4d0a:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4d0c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4d10:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4d12:	4605      	mov	r5, r0
   d4d14:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4d16:	3c01      	subs	r4, #1
   d4d18:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4d1a:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4d1c:	b224      	sxth	r4, r4
    startWrite();
   d4d1e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4d20:	682b      	ldr	r3, [r5, #0]
   d4d22:	f8cd 8004 	str.w	r8, [sp, #4]
   d4d26:	9400      	str	r4, [sp, #0]
   d4d28:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4d2a:	4628      	mov	r0, r5
   d4d2c:	463b      	mov	r3, r7
   d4d2e:	4632      	mov	r2, r6
   d4d30:	4639      	mov	r1, r7
   d4d32:	47a0      	blx	r4
    endWrite();
   d4d34:	682b      	ldr	r3, [r5, #0]
   d4d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d38:	4628      	mov	r0, r5
}
   d4d3a:	b002      	add	sp, #8
   d4d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4d40:	4718      	bx	r3

000d4d42 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4d42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4d46:	461d      	mov	r5, r3
    startWrite();
   d4d48:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4d4a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4d4e:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4d50:	4604      	mov	r4, r0
   d4d52:	4617      	mov	r7, r2
   d4d54:	460e      	mov	r6, r1
    startWrite();
   d4d56:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4d58:	e9cd 7800 	strd	r7, r8, [sp]
   d4d5c:	6822      	ldr	r2, [r4, #0]
   d4d5e:	1e6b      	subs	r3, r5, #1
   d4d60:	4433      	add	r3, r6
   d4d62:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4d64:	4620      	mov	r0, r4
   d4d66:	b21b      	sxth	r3, r3
   d4d68:	463a      	mov	r2, r7
   d4d6a:	4631      	mov	r1, r6
   d4d6c:	47a8      	blx	r5
    endWrite();
   d4d6e:	6823      	ldr	r3, [r4, #0]
   d4d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d72:	4620      	mov	r0, r4
}
   d4d74:	b002      	add	sp, #8
   d4d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4d7a:	4718      	bx	r3

000d4d7c <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4d7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4d80:	461e      	mov	r6, r3
    startWrite();
   d4d82:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4d84:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4d88:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4d8a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4d8e:	460c      	mov	r4, r1
   d4d90:	4605      	mov	r5, r0
   d4d92:	4617      	mov	r7, r2
    startWrite();
   d4d94:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4d96:	4426      	add	r6, r4
   d4d98:	42b4      	cmp	r4, r6
   d4d9a:	682b      	ldr	r3, [r5, #0]
   d4d9c:	da0b      	bge.n	d4db6 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4d9e:	f8cd 8000 	str.w	r8, [sp]
   d4da2:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4da6:	4621      	mov	r1, r4
   d4da8:	464b      	mov	r3, r9
   d4daa:	463a      	mov	r2, r7
   d4dac:	4628      	mov	r0, r5
   d4dae:	3401      	adds	r4, #1
   d4db0:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4db2:	b224      	sxth	r4, r4
   d4db4:	e7f0      	b.n	d4d98 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d4db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4db8:	4628      	mov	r0, r5
}
   d4dba:	b002      	add	sp, #8
   d4dbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4dc0:	4718      	bx	r3

000d4dc2 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4dc2:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4dc4:	6802      	ldr	r2, [r0, #0]
   d4dc6:	9101      	str	r1, [sp, #4]
   d4dc8:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4dcc:	9100      	str	r1, [sp, #0]
   d4dce:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4dd0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	4611      	mov	r1, r2
   d4dd8:	47a0      	blx	r4
}
   d4dda:	b002      	add	sp, #8
   d4ddc:	bd10      	pop	{r4, pc}

000d4dde <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4dde:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4de2:	461d      	mov	r5, r3
    startWrite();
   d4de4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4de6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4dea:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4dec:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4df0:	4604      	mov	r4, r0
   d4df2:	460f      	mov	r7, r1
   d4df4:	4616      	mov	r6, r2
    startWrite();
   d4df6:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4df8:	6823      	ldr	r3, [r4, #0]
   d4dfa:	f8cd 8000 	str.w	r8, [sp]
   d4dfe:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4e02:	4632      	mov	r2, r6
   d4e04:	462b      	mov	r3, r5
   d4e06:	4639      	mov	r1, r7
   d4e08:	4620      	mov	r0, r4
   d4e0a:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4e0c:	6823      	ldr	r3, [r4, #0]
   d4e0e:	f8cd 8000 	str.w	r8, [sp]
   d4e12:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d4e16:	4432      	add	r2, r6
   d4e18:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4e1c:	4639      	mov	r1, r7
   d4e1e:	462b      	mov	r3, r5
   d4e20:	4620      	mov	r0, r4
   d4e22:	b212      	sxth	r2, r2
   d4e24:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4e26:	6823      	ldr	r3, [r4, #0]
   d4e28:	f8cd 8000 	str.w	r8, [sp]
   d4e2c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4e30:	4632      	mov	r2, r6
   d4e32:	464b      	mov	r3, r9
   d4e34:	4639      	mov	r1, r7
   d4e36:	4620      	mov	r0, r4
   d4e38:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4e3a:	1e6b      	subs	r3, r5, #1
   d4e3c:	19d9      	adds	r1, r3, r7
   d4e3e:	6823      	ldr	r3, [r4, #0]
   d4e40:	f8cd 8000 	str.w	r8, [sp]
   d4e44:	6a1d      	ldr	r5, [r3, #32]
   d4e46:	4620      	mov	r0, r4
   d4e48:	464b      	mov	r3, r9
   d4e4a:	4632      	mov	r2, r6
   d4e4c:	b209      	sxth	r1, r1
   d4e4e:	47a8      	blx	r5
    endWrite();
   d4e50:	6823      	ldr	r3, [r4, #0]
   d4e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e54:	4620      	mov	r0, r4
}
   d4e56:	b002      	add	sp, #8
   d4e58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4e5c:	4718      	bx	r3

000d4e5e <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d4e5e:	4770      	bx	lr

000d4e60 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4e64:	4299      	cmp	r1, r3
        uint16_t color) {
   d4e66:	4616      	mov	r6, r2
   d4e68:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4e6c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4e70:	6802      	ldr	r2, [r0, #0]
   d4e72:	4680      	mov	r8, r0
   d4e74:	460d      	mov	r5, r1
   d4e76:	461c      	mov	r4, r3
    if(x0 == x1){
   d4e78:	d113      	bne.n	d4ea2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4e7a:	42be      	cmp	r6, r7
   d4e7c:	bfc8      	it	gt
   d4e7e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4e80:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4e84:	bfc4      	itt	gt
   d4e86:	463e      	movgt	r6, r7
   d4e88:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4e8a:	1c7b      	adds	r3, r7, #1
   d4e8c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4e8e:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4e90:	b21b      	sxth	r3, r3
   d4e92:	4632      	mov	r2, r6
   d4e94:	4629      	mov	r1, r5
   d4e96:	4640      	mov	r0, r8
   d4e98:	46a4      	mov	ip, r4
}
   d4e9a:	b003      	add	sp, #12
   d4e9c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4ea0:	4760      	bx	ip
    } else if(y0 == y1){
   d4ea2:	42be      	cmp	r6, r7
   d4ea4:	d10a      	bne.n	d4ebc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4ea6:	4299      	cmp	r1, r3
   d4ea8:	bfc2      	ittt	gt
   d4eaa:	460b      	movgt	r3, r1
   d4eac:	4625      	movgt	r5, r4
   d4eae:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4eb0:	1c63      	adds	r3, r4, #1
   d4eb2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4eb6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4eb8:	1b5b      	subs	r3, r3, r5
   d4eba:	e7e9      	b.n	d4e90 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4ebc:	6953      	ldr	r3, [r2, #20]
   d4ebe:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4ec0:	e9cd 7900 	strd	r7, r9, [sp]
   d4ec4:	f8d8 3000 	ldr.w	r3, [r8]
   d4ec8:	4640      	mov	r0, r8
   d4eca:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4ecc:	4632      	mov	r2, r6
   d4ece:	4623      	mov	r3, r4
   d4ed0:	4629      	mov	r1, r5
   d4ed2:	47b8      	blx	r7
        endWrite();
   d4ed4:	f8d8 3000 	ldr.w	r3, [r8]
   d4ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4eda:	4640      	mov	r0, r8
}
   d4edc:	b003      	add	sp, #12
   d4ede:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d4ee2:	4718      	bx	r3

000d4ee4 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4ee4:	f001 0303 	and.w	r3, r1, #3
   d4ee8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4eec:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d4eee:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4ef0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4ef4:	bf59      	ittee	pl
   d4ef6:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4ef8:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d4efa:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4efc:	81c3      	strhmi	r3, [r0, #14]
}
   d4efe:	4770      	bx	lr

000d4f00 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4f00:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d4f02:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d4f04:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d4f06:	4a07      	ldr	r2, [pc, #28]	; (d4f24 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d4f08:	4d07      	ldr	r5, [pc, #28]	; (d4f28 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4f0a:	8101      	strh	r1, [r0, #8]
   d4f0c:	2400      	movs	r4, #0
    _width    = WIDTH;
   d4f0e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4f14:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4f18:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d4f1a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d4f1c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d4f1e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4f20:	6204      	str	r4, [r0, #32]
}
   d4f22:	bd30      	pop	{r4, r5, pc}
   d4f24:	01000101 	.word	0x01000101
   d4f28:	000dd420 	.word	0x000dd420

000d4f2c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f30:	b089      	sub	sp, #36	; 0x24
   d4f32:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d4f36:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4f38:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4f3c:	9304      	str	r3, [sp, #16]
   d4f3e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d4f42:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4f44:	9305      	str	r3, [sp, #20]
   d4f46:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d4f4a:	4604      	mov	r4, r0
    startWrite();
   d4f4c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4f4e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d4f52:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4f56:	bf48      	it	mi
   d4f58:	f108 020e 	addmi.w	r2, r8, #14
   d4f5c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d4f60:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d4f62:	4635      	mov	r5, r6
   d4f64:	9b03      	ldr	r3, [sp, #12]
   d4f66:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4f68:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4f6c:	189a      	adds	r2, r3, r2
   d4f6e:	9b05      	ldr	r3, [sp, #20]
   d4f70:	428b      	cmp	r3, r1
   d4f72:	b212      	sxth	r2, r2
   d4f74:	dd27      	ble.n	d4fc6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4f76:	9b04      	ldr	r3, [sp, #16]
   d4f78:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d4f7a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4f7e:	9306      	str	r3, [sp, #24]
   d4f80:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d4f84:	4580      	cmp	r8, r0
   d4f86:	fa1f f189 	uxth.w	r1, r9
   d4f8a:	dd17      	ble.n	d4fbc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4f8c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4f8e:	bf05      	ittet	eq
   d4f90:	9b06      	ldreq	r3, [sp, #24]
   d4f92:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d4f94:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4f96:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4f98:	bf18      	it	ne
   d4f9a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d4f9c:	062b      	lsls	r3, r5, #24
   d4f9e:	d50a      	bpl.n	d4fb6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d4fa0:	9b02      	ldr	r3, [sp, #8]
   d4fa2:	6820      	ldr	r0, [r4, #0]
   d4fa4:	9207      	str	r2, [sp, #28]
   d4fa6:	4419      	add	r1, r3
   d4fa8:	6983      	ldr	r3, [r0, #24]
   d4faa:	b209      	sxth	r1, r1
   d4fac:	461f      	mov	r7, r3
   d4fae:	4620      	mov	r0, r4
   d4fb0:	4653      	mov	r3, sl
   d4fb2:	47b8      	blx	r7
   d4fb4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d4fb6:	f109 0901 	add.w	r9, r9, #1
   d4fba:	e7e1      	b.n	d4f80 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4fbc:	9b01      	ldr	r3, [sp, #4]
   d4fbe:	3301      	adds	r3, #1
   d4fc0:	9301      	str	r3, [sp, #4]
   d4fc2:	445e      	add	r6, fp
   d4fc4:	e7ce      	b.n	d4f64 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d4fc6:	6823      	ldr	r3, [r4, #0]
   d4fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fca:	4620      	mov	r0, r4
}
   d4fcc:	b009      	add	sp, #36	; 0x24
   d4fce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d4fd2:	4718      	bx	r3

000d4fd4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4fd8:	ed2d 8b02 	vpush	{d8}
   d4fdc:	b091      	sub	sp, #68	; 0x44
   d4fde:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4fe0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4fe2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d4fe6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d4fea:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d4fee:	9103      	str	r1, [sp, #12]
   d4ff0:	461f      	mov	r7, r3
   d4ff2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d4ff6:	9304      	str	r3, [sp, #16]
   d4ff8:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d4ffa:	2a00      	cmp	r2, #0
   d4ffc:	f040 80c5 	bne.w	d518a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d5000:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5004:	428b      	cmp	r3, r1
   d5006:	f340 814c 	ble.w	d52a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d500a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d500e:	42b3      	cmp	r3, r6
   d5010:	f340 8147 	ble.w	d52a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5014:	2306      	movs	r3, #6
   d5016:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d501a:	2b00      	cmp	r3, #0
   d501c:	f340 8141 	ble.w	d52a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d5020:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5024:	2b00      	cmp	r3, #0
   d5026:	f340 813c 	ble.w	d52a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d502a:	7f03      	ldrb	r3, [r0, #28]
   d502c:	b91b      	cbnz	r3, d5036 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d502e:	2faf      	cmp	r7, #175	; 0xaf
   d5030:	bf84      	itt	hi
   d5032:	3701      	addhi	r7, #1
   d5034:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d5036:	f8db 3000 	ldr.w	r3, [fp]
   d503a:	4658      	mov	r0, fp
   d503c:	695b      	ldr	r3, [r3, #20]
   d503e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5040:	2205      	movs	r2, #5
   d5042:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5044:	2200      	movs	r2, #0
   d5046:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5048:	4a98      	ldr	r2, [pc, #608]	; (d52ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d504a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d504e:	18d3      	adds	r3, r2, r3
   d5050:	930c      	str	r3, [sp, #48]	; 0x30
   d5052:	b2b3      	uxth	r3, r6
   d5054:	9306      	str	r3, [sp, #24]
   d5056:	9a05      	ldr	r2, [sp, #20]
   d5058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d505a:	5c9b      	ldrb	r3, [r3, r2]
   d505c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d505e:	b2ab      	uxth	r3, r5
   d5060:	930b      	str	r3, [sp, #44]	; 0x2c
   d5062:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d5066:	9308      	str	r3, [sp, #32]
   d5068:	9b03      	ldr	r3, [sp, #12]
   d506a:	fb02 f905 	mul.w	r9, r2, r5
   d506e:	fa19 f983 	uxtah	r9, r9, r3
   d5072:	fa0f f389 	sxth.w	r3, r9
   d5076:	ee08 3a10 	vmov	s16, r3
   d507a:	2308      	movs	r3, #8
   d507c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d507e:	9b03      	ldr	r3, [sp, #12]
   d5080:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5084:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d5088:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d508c:	9a07      	ldr	r2, [sp, #28]
   d508e:	f8db 3000 	ldr.w	r3, [fp]
   d5092:	07d2      	lsls	r2, r2, #31
   d5094:	d552      	bpl.n	d513c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d5096:	2d01      	cmp	r5, #1
   d5098:	fa1f f289 	uxth.w	r2, r9
   d509c:	d13e      	bne.n	d511c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d509e:	2c01      	cmp	r4, #1
   d50a0:	d13c      	bne.n	d511c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d50a2:	699b      	ldr	r3, [r3, #24]
   d50a4:	9906      	ldr	r1, [sp, #24]
   d50a6:	461f      	mov	r7, r3
   d50a8:	9b04      	ldr	r3, [sp, #16]
   d50aa:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d50ac:	b212      	sxth	r2, r2
   d50ae:	4651      	mov	r1, sl
   d50b0:	4658      	mov	r0, fp
   d50b2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d50b4:	f109 0301 	add.w	r3, r9, #1
   d50b8:	fa4f f983 	sxtb.w	r9, r3
   d50bc:	9b07      	ldr	r3, [sp, #28]
   d50be:	085b      	lsrs	r3, r3, #1
   d50c0:	9307      	str	r3, [sp, #28]
   d50c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d50c4:	3b01      	subs	r3, #1
   d50c6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d50ca:	930a      	str	r3, [sp, #40]	; 0x28
   d50cc:	d1de      	bne.n	d508c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d50ce:	9f05      	ldr	r7, [sp, #20]
   d50d0:	3701      	adds	r7, #1
   d50d2:	b27b      	sxtb	r3, r7
   d50d4:	9305      	str	r3, [sp, #20]
   d50d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d50d8:	3b01      	subs	r3, #1
   d50da:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d50de:	9309      	str	r3, [sp, #36]	; 0x24
   d50e0:	d1b9      	bne.n	d5056 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d50e2:	9b04      	ldr	r3, [sp, #16]
   d50e4:	4543      	cmp	r3, r8
   d50e6:	d00f      	beq.n	d5108 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d50e8:	2d01      	cmp	r5, #1
   d50ea:	f8db 3000 	ldr.w	r3, [fp]
   d50ee:	d13b      	bne.n	d5168 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d50f0:	2c01      	cmp	r4, #1
   d50f2:	d139      	bne.n	d5168 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d50f4:	9908      	ldr	r1, [sp, #32]
   d50f6:	f8cd 8000 	str.w	r8, [sp]
   d50fa:	3105      	adds	r1, #5
   d50fc:	6a1c      	ldr	r4, [r3, #32]
   d50fe:	4632      	mov	r2, r6
   d5100:	2308      	movs	r3, #8
   d5102:	b209      	sxth	r1, r1
   d5104:	4658      	mov	r0, fp
   d5106:	47a0      	blx	r4
        endWrite();
   d5108:	f8db 3000 	ldr.w	r3, [fp]
   d510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d510e:	4658      	mov	r0, fp
}
   d5110:	b011      	add	sp, #68	; 0x44
   d5112:	ecbd 8b02 	vpop	{d8}
   d5116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d511a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d511c:	9906      	ldr	r1, [sp, #24]
   d511e:	fb14 f202 	smulbb	r2, r4, r2
   d5122:	440a      	add	r2, r1
   d5124:	9904      	ldr	r1, [sp, #16]
   d5126:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5128:	9400      	str	r4, [sp, #0]
   d512a:	69db      	ldr	r3, [r3, #28]
   d512c:	ee18 1a10 	vmov	r1, s16
   d5130:	461f      	mov	r7, r3
   d5132:	b212      	sxth	r2, r2
   d5134:	462b      	mov	r3, r5
   d5136:	4658      	mov	r0, fp
   d5138:	47b8      	blx	r7
   d513a:	e7bb      	b.n	d50b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d513c:	9a04      	ldr	r2, [sp, #16]
   d513e:	4542      	cmp	r2, r8
   d5140:	d0b8      	beq.n	d50b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d5142:	2d01      	cmp	r5, #1
   d5144:	fa1f f289 	uxth.w	r2, r9
   d5148:	d107      	bne.n	d515a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d514a:	2c01      	cmp	r4, #1
   d514c:	d105      	bne.n	d515a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d514e:	699b      	ldr	r3, [r3, #24]
   d5150:	9906      	ldr	r1, [sp, #24]
   d5152:	461f      	mov	r7, r3
   d5154:	440a      	add	r2, r1
   d5156:	4643      	mov	r3, r8
   d5158:	e7a8      	b.n	d50ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d515a:	9906      	ldr	r1, [sp, #24]
   d515c:	f8cd 8004 	str.w	r8, [sp, #4]
   d5160:	fb14 f202 	smulbb	r2, r4, r2
   d5164:	440a      	add	r2, r1
   d5166:	e7df      	b.n	d5128 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d5168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d516a:	f8cd 8004 	str.w	r8, [sp, #4]
   d516e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d5172:	9a08      	ldr	r2, [sp, #32]
   d5174:	00e4      	lsls	r4, r4, #3
   d5176:	440a      	add	r2, r1
   d5178:	4611      	mov	r1, r2
   d517a:	9400      	str	r4, [sp, #0]
   d517c:	69dc      	ldr	r4, [r3, #28]
   d517e:	4632      	mov	r2, r6
   d5180:	462b      	mov	r3, r5
   d5182:	b209      	sxth	r1, r1
   d5184:	4658      	mov	r0, fp
   d5186:	47a0      	blx	r4
        endWrite();
   d5188:	e7be      	b.n	d5108 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d518a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d518c:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d518e:	6812      	ldr	r2, [r2, #0]
   d5190:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5192:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d5194:	b2ff      	uxtb	r7, r7
   d5196:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d519a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d519e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d51a0:	789a      	ldrb	r2, [r3, #2]
   d51a2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d51a4:	78da      	ldrb	r2, [r3, #3]
   d51a6:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d51a8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d51aa:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d51ae:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d51b2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d51b4:	d801      	bhi.n	d51ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d51b6:	2c01      	cmp	r4, #1
   d51b8:	d957      	bls.n	d526a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d51ba:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d51be:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d51c0:	fa0f f38a 	sxth.w	r3, sl
   d51c4:	9307      	str	r3, [sp, #28]
        startWrite();
   d51c6:	f8db 3000 	ldr.w	r3, [fp]
   d51ca:	4658      	mov	r0, fp
   d51cc:	695b      	ldr	r3, [r3, #20]
   d51ce:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d51d0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d51d2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d51d6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d51d8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d51dc:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d51de:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d51e0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d51e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d51e4:	429f      	cmp	r7, r3
   d51e6:	d28f      	bcs.n	d5108 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d51e8:	9b07      	ldr	r3, [sp, #28]
   d51ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d51ec:	443b      	add	r3, r7
   d51ee:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d51f2:	2200      	movs	r2, #0
   d51f4:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d51f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d51f8:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d51fa:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d51fe:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5202:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5206:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d5208:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d520a:	9905      	ldr	r1, [sp, #20]
   d520c:	4291      	cmp	r1, r2
   d520e:	d241      	bcs.n	d5294 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d5210:	1c5a      	adds	r2, r3, #1
   d5212:	b2d2      	uxtb	r2, r2
   d5214:	075b      	lsls	r3, r3, #29
   d5216:	920c      	str	r2, [sp, #48]	; 0x30
   d5218:	d107      	bne.n	d522a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d521a:	9b06      	ldr	r3, [sp, #24]
   d521c:	9906      	ldr	r1, [sp, #24]
   d521e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d5220:	3301      	adds	r3, #1
   d5222:	b29b      	uxth	r3, r3
   d5224:	f812 9001 	ldrb.w	r9, [r2, r1]
   d5228:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d522a:	f019 0f80 	tst.w	r9, #128	; 0x80
   d522e:	d012      	beq.n	d5256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d5230:	2d01      	cmp	r5, #1
   d5232:	f8db 3000 	ldr.w	r3, [fp]
   d5236:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d523a:	d11a      	bne.n	d5272 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d523c:	2c01      	cmp	r4, #1
   d523e:	d118      	bne.n	d5272 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d5242:	699b      	ldr	r3, [r3, #24]
   d5244:	4411      	add	r1, r2
   d5246:	9a05      	ldr	r2, [sp, #20]
   d5248:	4411      	add	r1, r2
   d524a:	461e      	mov	r6, r3
   d524c:	4652      	mov	r2, sl
   d524e:	9b04      	ldr	r3, [sp, #16]
   d5250:	b209      	sxth	r1, r1
   d5252:	4658      	mov	r0, fp
   d5254:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d5256:	9e05      	ldr	r6, [sp, #20]
   d5258:	3601      	adds	r6, #1
   d525a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d525c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d5260:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d5262:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d5266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d5268:	e7ce      	b.n	d5208 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d526a:	2300      	movs	r3, #0
   d526c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d5270:	e7a9      	b.n	d51c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5272:	9805      	ldr	r0, [sp, #20]
   d5274:	9a08      	ldr	r2, [sp, #32]
   d5276:	4402      	add	r2, r0
   d5278:	fb02 1105 	mla	r1, r2, r5, r1
   d527c:	9a04      	ldr	r2, [sp, #16]
   d527e:	e9cd 4200 	strd	r4, r2, [sp]
   d5282:	69db      	ldr	r3, [r3, #28]
   d5284:	ee18 2a10 	vmov	r2, s16
   d5288:	461e      	mov	r6, r3
   d528a:	b209      	sxth	r1, r1
   d528c:	462b      	mov	r3, r5
   d528e:	4658      	mov	r0, fp
   d5290:	47b0      	blx	r6
   d5292:	e7e0      	b.n	d5256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d5294:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d5296:	3701      	adds	r7, #1
   d5298:	4498      	add	r8, r3
   d529a:	fa5f f888 	uxtb.w	r8, r8
   d529e:	b2ff      	uxtb	r7, r7
   d52a0:	e79f      	b.n	d51e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d52a2:	b011      	add	sp, #68	; 0x44
   d52a4:	ecbd 8b02 	vpop	{d8}
   d52a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d52ac:	000dcf18 	.word	0x000dcf18

000d52b0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d52b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d52b2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d52b4:	b085      	sub	sp, #20
   d52b6:	4604      	mov	r4, r0
   d52b8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d52ba:	2a00      	cmp	r2, #0
   d52bc:	d134      	bne.n	d5328 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d52be:	290a      	cmp	r1, #10
   d52c0:	d108      	bne.n	d52d4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d52c2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d52c4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d52c6:	7e42      	ldrb	r2, [r0, #25]
   d52c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d52cc:	8263      	strh	r3, [r4, #18]
}
   d52ce:	2001      	movs	r0, #1
   d52d0:	b005      	add	sp, #20
   d52d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d52d4:	290d      	cmp	r1, #13
   d52d6:	d0fa      	beq.n	d52ce <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d52d8:	7ee1      	ldrb	r1, [r4, #27]
   d52da:	7e00      	ldrb	r0, [r0, #24]
   d52dc:	7e65      	ldrb	r5, [r4, #25]
   d52de:	b171      	cbz	r1, d52fe <_ZN12Adafruit_GFX5writeEh+0x4e>
   d52e0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d52e4:	2106      	movs	r1, #6
   d52e6:	fb11 6100 	smlabb	r1, r1, r0, r6
   d52ea:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d52ee:	42b1      	cmp	r1, r6
   d52f0:	bfc1      	itttt	gt
   d52f2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d52f6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d52f8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d52fc:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d52fe:	8ae2      	ldrh	r2, [r4, #22]
   d5300:	9201      	str	r2, [sp, #4]
   d5302:	8aa2      	ldrh	r2, [r4, #20]
   d5304:	9200      	str	r2, [sp, #0]
   d5306:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d530a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d530e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5312:	4620      	mov	r0, r4
   d5314:	f7ff fe5e 	bl	d4fd4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d5318:	7e23      	ldrb	r3, [r4, #24]
   d531a:	8a22      	ldrh	r2, [r4, #16]
   d531c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5320:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5324:	8223      	strh	r3, [r4, #16]
   d5326:	e7d2      	b.n	d52ce <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d5328:	290a      	cmp	r1, #10
   d532a:	d107      	bne.n	d533c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d532c:	2300      	movs	r3, #0
   d532e:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5330:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d5332:	7e41      	ldrb	r1, [r0, #25]
   d5334:	8a42      	ldrh	r2, [r0, #18]
   d5336:	fb01 2303 	mla	r3, r1, r3, r2
   d533a:	e7c7      	b.n	d52cc <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d533c:	290d      	cmp	r1, #13
   d533e:	d0c6      	beq.n	d52ce <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5340:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5342:	42a9      	cmp	r1, r5
   d5344:	d3c3      	bcc.n	d52ce <_ZN12Adafruit_GFX5writeEh+0x1e>
   d5346:	7a51      	ldrb	r1, [r2, #9]
   d5348:	4299      	cmp	r1, r3
   d534a:	d3c0      	bcc.n	d52ce <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d534c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d534e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d5350:	b2ed      	uxtb	r5, r5
   d5352:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d5356:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d5358:	b32f      	cbz	r7, d53a6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d535a:	78e9      	ldrb	r1, [r5, #3]
   d535c:	b319      	cbz	r1, d53a6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d535e:	7ee1      	ldrb	r1, [r4, #27]
   d5360:	7e00      	ldrb	r0, [r0, #24]
   d5362:	7e66      	ldrb	r6, [r4, #25]
   d5364:	b191      	cbz	r1, d538c <_ZN12Adafruit_GFX5writeEh+0xdc>
   d5366:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d536a:	4439      	add	r1, r7
   d536c:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d5370:	fb00 7101 	mla	r1, r0, r1, r7
   d5374:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d5378:	42b9      	cmp	r1, r7
   d537a:	dd07      	ble.n	d538c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d537c:	2700      	movs	r7, #0
   d537e:	8227      	strh	r7, [r4, #16]
   d5380:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5384:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d5386:	fb02 1206 	mla	r2, r2, r6, r1
   d538a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d538c:	8ae2      	ldrh	r2, [r4, #22]
   d538e:	9201      	str	r2, [sp, #4]
   d5390:	8aa2      	ldrh	r2, [r4, #20]
   d5392:	9200      	str	r2, [sp, #0]
   d5394:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d5398:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d539c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d53a0:	4620      	mov	r0, r4
   d53a2:	f7ff fe17 	bl	d4fd4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d53a6:	7929      	ldrb	r1, [r5, #4]
   d53a8:	7e23      	ldrb	r3, [r4, #24]
   d53aa:	8a22      	ldrh	r2, [r4, #16]
   d53ac:	fb01 2303 	mla	r3, r1, r3, r2
   d53b0:	e7b8      	b.n	d5324 <_ZN12Adafruit_GFX5writeEh+0x74>

000d53b2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d53b2:	2901      	cmp	r1, #1
   d53b4:	bf38      	it	cc
   d53b6:	2101      	movcc	r1, #1
   d53b8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d53ba:	7641      	strb	r1, [r0, #25]
}
   d53bc:	4770      	bx	lr
	...

000d53c0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d53c0:	b510      	push	{r4, lr}
   d53c2:	4b04      	ldr	r3, [pc, #16]	; (d53d4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d53c4:	6003      	str	r3, [r0, #0]
   d53c6:	4604      	mov	r4, r0
  if(buffer) {
   d53c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d53ca:	b108      	cbz	r0, d53d0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d53cc:	f002 fe52 	bl	d8074 <free>
    buffer = NULL;
  }
}
   d53d0:	4620      	mov	r0, r4
   d53d2:	bd10      	pop	{r4, pc}
   d53d4:	000dd918 	.word	0x000dd918

000d53d8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d53d8:	b510      	push	{r4, lr}
   d53da:	4604      	mov	r4, r0
}
   d53dc:	f7ff fff0 	bl	d53c0 <_ZN16Adafruit_SSD1306D1Ev>
   d53e0:	4620      	mov	r0, r4
   d53e2:	2150      	movs	r1, #80	; 0x50
   d53e4:	f004 fd8a 	bl	d9efc <_ZdlPvj>
   d53e8:	4620      	mov	r0, r4
   d53ea:	bd10      	pop	{r4, pc}

000d53ec <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d53ec:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d53ee:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d53f0:	db4b      	blt.n	d548a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d53f2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d53f6:	428c      	cmp	r4, r1
   d53f8:	dd47      	ble.n	d548a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d53fa:	2a00      	cmp	r2, #0
   d53fc:	db45      	blt.n	d548a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d53fe:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d5402:	4294      	cmp	r4, r2
   d5404:	dd41      	ble.n	d548a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d5406:	7e84      	ldrb	r4, [r0, #26]
   d5408:	2c02      	cmp	r4, #2
   d540a:	d01f      	beq.n	d544c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d540c:	2c03      	cmp	r4, #3
   d540e:	d026      	beq.n	d545e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d5410:	2c01      	cmp	r4, #1
   d5412:	d104      	bne.n	d541e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d5414:	8904      	ldrh	r4, [r0, #8]
   d5416:	43d2      	mvns	r2, r2
   d5418:	4414      	add	r4, r2
      break;
   d541a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d541c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d541e:	2b01      	cmp	r3, #1
   d5420:	d023      	beq.n	d546a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d5422:	2b02      	cmp	r3, #2
   d5424:	d032      	beq.n	d548c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d5426:	bb83      	cbnz	r3, d548a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d5428:	2a00      	cmp	r2, #0
   d542a:	4613      	mov	r3, r2
   d542c:	8904      	ldrh	r4, [r0, #8]
   d542e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5430:	bfb8      	it	lt
   d5432:	1dd3      	addlt	r3, r2, #7
   d5434:	10db      	asrs	r3, r3, #3
   d5436:	fb13 1104 	smlabb	r1, r3, r4, r1
   d543a:	f002 0207 	and.w	r2, r2, #7
   d543e:	2301      	movs	r3, #1
   d5440:	4093      	lsls	r3, r2
   d5442:	5c42      	ldrb	r2, [r0, r1]
   d5444:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5448:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d544a:	e01e      	b.n	d548a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d544c:	8904      	ldrh	r4, [r0, #8]
   d544e:	43c9      	mvns	r1, r1
   d5450:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d5452:	8944      	ldrh	r4, [r0, #10]
   d5454:	43d2      	mvns	r2, r2
   d5456:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d5458:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d545a:	b212      	sxth	r2, r2
      break;
   d545c:	e7df      	b.n	d541e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d545e:	8944      	ldrh	r4, [r0, #10]
   d5460:	43c9      	mvns	r1, r1
   d5462:	440c      	add	r4, r1
      break;
   d5464:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d5466:	b222      	sxth	r2, r4
      break;
   d5468:	e7d9      	b.n	d541e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d546a:	2a00      	cmp	r2, #0
   d546c:	8904      	ldrh	r4, [r0, #8]
   d546e:	4613      	mov	r3, r2
   d5470:	bfb8      	it	lt
   d5472:	1dd3      	addlt	r3, r2, #7
   d5474:	10db      	asrs	r3, r3, #3
   d5476:	fb13 1104 	smlabb	r1, r3, r4, r1
   d547a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d547c:	f002 0007 	and.w	r0, r2, #7
   d5480:	2201      	movs	r2, #1
   d5482:	4082      	lsls	r2, r0
   d5484:	5c58      	ldrb	r0, [r3, r1]
   d5486:	4302      	orrs	r2, r0
   d5488:	545a      	strb	r2, [r3, r1]
}
   d548a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d548c:	2a00      	cmp	r2, #0
   d548e:	4613      	mov	r3, r2
   d5490:	8904      	ldrh	r4, [r0, #8]
   d5492:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5494:	bfb8      	it	lt
   d5496:	1dd3      	addlt	r3, r2, #7
   d5498:	10db      	asrs	r3, r3, #3
   d549a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d549e:	f002 0207 	and.w	r2, r2, #7
   d54a2:	2301      	movs	r3, #1
   d54a4:	fa03 f202 	lsl.w	r2, r3, r2
   d54a8:	5c43      	ldrb	r3, [r0, r1]
   d54aa:	405a      	eors	r2, r3
   d54ac:	e7cc      	b.n	d5448 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d54ae <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d54ae:	b510      	push	{r4, lr}
   d54b0:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d54b2:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d54b6:	2101      	movs	r1, #1
   d54b8:	b280      	uxth	r0, r0
   d54ba:	f004 fcb6 	bl	d9e2a <digitalWrite>
   d54be:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d54c0:	b118      	cbz	r0, d54ca <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d54c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d54c6:	f003 bd9d 	b.w	d9004 <_ZN8SPIClass14endTransactionEv>
}
   d54ca:	bd10      	pop	{r4, pc}

000d54cc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d54cc:	b570      	push	{r4, r5, r6, lr}
   d54ce:	4604      	mov	r4, r0
   d54d0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d54d2:	2600      	movs	r6, #0
   d54d4:	f7ff fd14 	bl	d4f00 <_ZN12Adafruit_GFXC1Ess>
   d54d8:	4b11      	ldr	r3, [pc, #68]	; (d5520 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d54da:	6023      	str	r3, [r4, #0]
   d54dc:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d54de:	b915      	cbnz	r5, d54e6 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d54e0:	f004 fce8 	bl	d9eb4 <_Z19__fetch_global_Wirev>
   d54e4:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d54e6:	23ff      	movs	r3, #255	; 0xff
   d54e8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d54ec:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d54f0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d54f4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   d54f8:	4b0a      	ldr	r3, [pc, #40]	; (d5524 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d54fa:	63a3      	str	r3, [r4, #56]	; 0x38
   d54fc:	2301      	movs	r3, #1
   d54fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d5502:	9b05      	ldr	r3, [sp, #20]
   d5504:	64a3      	str	r3, [r4, #72]	; 0x48
   d5506:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d550a:	9b06      	ldr	r3, [sp, #24]
   d550c:	86a2      	strh	r2, [r4, #52]	; 0x34
   d550e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d5512:	6426      	str	r6, [r4, #64]	; 0x40
   d5514:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d5518:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d551a:	4620      	mov	r0, r4
   d551c:	bd70      	pop	{r4, r5, r6, pc}
   d551e:	bf00      	nop
   d5520:	000dd918 	.word	0x000dd918
   d5524:	000dced0 	.word	0x000dced0

000d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d552a:	4604      	mov	r4, r0
  if(wire) { // I2C
   d552c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d552e:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5530:	b190      	cbz	r0, d5558 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d5532:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5536:	f003 fa83 	bl	d8a40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d553a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d553c:	6803      	ldr	r3, [r0, #0]
   d553e:	2100      	movs	r1, #0
   d5540:	689b      	ldr	r3, [r3, #8]
   d5542:	4798      	blx	r3
    WIRE_WRITE(c);
   d5544:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5546:	6803      	ldr	r3, [r0, #0]
   d5548:	4629      	mov	r1, r5
   d554a:	689b      	ldr	r3, [r3, #8]
   d554c:	4798      	blx	r3
    wire->endTransmission();
   d554e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d5550:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d5554:	f003 ba7b 	b.w	d8a4e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5558:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d555c:	4601      	mov	r1, r0
   d555e:	b298      	uxth	r0, r3
   d5560:	f004 fc63 	bl	d9e2a <digitalWrite>
  if(spi) {
   d5564:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5566:	b120      	cbz	r0, d5572 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d5568:	4629      	mov	r1, r5
}
   d556a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d556e:	f003 bdd1 	b.w	d9114 <_ZN8SPIClass8transferEh>
   d5572:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5574:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5576:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d557a:	ea05 0107 	and.w	r1, r5, r7
   d557e:	b280      	uxth	r0, r0
   d5580:	f004 fc53 	bl	d9e2a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5584:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5588:	2101      	movs	r1, #1
   d558a:	b280      	uxth	r0, r0
   d558c:	f004 fc4d 	bl	d9e2a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5590:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5594:	2100      	movs	r1, #0
   d5596:	b280      	uxth	r0, r0
   d5598:	f004 fc47 	bl	d9e2a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d559c:	3e01      	subs	r6, #1
   d559e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d55a2:	d1e8      	bne.n	d5576 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d55a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55a6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d55a6:	b538      	push	{r3, r4, r5, lr}
   d55a8:	4604      	mov	r4, r0
  TRANSACTION_START
   d55aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d55ac:	460d      	mov	r5, r1
  TRANSACTION_START
   d55ae:	b180      	cbz	r0, d55d2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d55b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d55b2:	f003 fa37 	bl	d8a24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d55b6:	2d00      	cmp	r5, #0
   d55b8:	4620      	mov	r0, r4
   d55ba:	bf14      	ite	ne
   d55bc:	21a7      	movne	r1, #167	; 0xa7
   d55be:	21a6      	moveq	r1, #166	; 0xa6
   d55c0:	f7ff ffb2 	bl	d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d55c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55c6:	b188      	cbz	r0, d55ec <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d55c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d55ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d55ce:	f003 ba29 	b.w	d8a24 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d55d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d55d4:	b118      	cbz	r0, d55de <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d55d6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d55da:	f003 fd2d 	bl	d9038 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d55de:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d55e2:	2100      	movs	r1, #0
   d55e4:	b280      	uxth	r0, r0
   d55e6:	f004 fc20 	bl	d9e2a <digitalWrite>
   d55ea:	e7e4      	b.n	d55b6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d55ec:	4620      	mov	r0, r4
}
   d55ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d55f2:	f7ff bf5c 	b.w	d54ae <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d55f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d55fa:	4604      	mov	r4, r0
  if(wire) { // I2C
   d55fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d55fe:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5600:	188f      	adds	r7, r1, r2
   d5602:	b340      	cbz	r0, d5656 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d5604:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5608:	f003 fa1a 	bl	d8a40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d560c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d560e:	6803      	ldr	r3, [r0, #0]
   d5610:	2100      	movs	r1, #0
   d5612:	689b      	ldr	r3, [r3, #8]
   d5614:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5616:	2601      	movs	r6, #1
    while(n--) {
   d5618:	42bd      	cmp	r5, r7
   d561a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d561c:	d017      	beq.n	d564e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d561e:	2e1f      	cmp	r6, #31
   d5620:	d90c      	bls.n	d563c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d5622:	f003 fa14 	bl	d8a4e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5626:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d562a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d562c:	f003 fa08 	bl	d8a40 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5632:	6803      	ldr	r3, [r0, #0]
   d5634:	2100      	movs	r1, #0
   d5636:	689b      	ldr	r3, [r3, #8]
   d5638:	4798      	blx	r3
        bytesOut = 1;
   d563a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d563c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d563e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5642:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5644:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5646:	689b      	ldr	r3, [r3, #8]
   d5648:	4798      	blx	r3
      bytesOut++;
   d564a:	b2f6      	uxtb	r6, r6
    while(n--) {
   d564c:	e7e4      	b.n	d5618 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d564e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d5652:	f003 b9fc 	b.w	d8a4e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5656:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d565a:	4601      	mov	r1, r0
   d565c:	b298      	uxth	r0, r3
   d565e:	f004 fbe4 	bl	d9e2a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5662:	42af      	cmp	r7, r5
   d5664:	d022      	beq.n	d56ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5666:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5668:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d566c:	b118      	cbz	r0, d5676 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d566e:	4649      	mov	r1, r9
   d5670:	f003 fd50 	bl	d9114 <_ZN8SPIClass8transferEh>
   d5674:	e7f5      	b.n	d5662 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5676:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5678:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d567c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5680:	ea09 0108 	and.w	r1, r9, r8
   d5684:	b280      	uxth	r0, r0
   d5686:	f004 fbd0 	bl	d9e2a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d568a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d568e:	2101      	movs	r1, #1
   d5690:	b280      	uxth	r0, r0
   d5692:	f004 fbca 	bl	d9e2a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5696:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d569a:	2100      	movs	r1, #0
   d569c:	b280      	uxth	r0, r0
   d569e:	f004 fbc4 	bl	d9e2a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d56a2:	3e01      	subs	r6, #1
   d56a4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d56a8:	d1e8      	bne.n	d567c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d56aa:	e7da      	b.n	d5662 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d56ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d56b0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d56b0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d56b4:	1dda      	adds	r2, r3, #7
   d56b6:	bf48      	it	mi
   d56b8:	f103 020e 	addmi.w	r2, r3, #14
   d56bc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d56c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d56c2:	10d2      	asrs	r2, r2, #3
   d56c4:	435a      	muls	r2, r3
   d56c6:	2100      	movs	r1, #0
   d56c8:	f005 bb0d 	b.w	dace6 <memset>

000d56cc <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d56cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d56d0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d56d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d56d4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d56d8:	4604      	mov	r4, r0
   d56da:	460f      	mov	r7, r1
   d56dc:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d56de:	b1b3      	cbz	r3, d570e <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d56e0:	4620      	mov	r0, r4
   d56e2:	f7ff ffe5 	bl	d56b0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d56e6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d56ea:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d56ee:	2820      	cmp	r0, #32
   d56f0:	dc1f      	bgt.n	d5732 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d56f2:	2320      	movs	r3, #32
   d56f4:	2201      	movs	r2, #1
   d56f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d56fa:	3820      	subs	r0, #32
   d56fc:	2373      	movs	r3, #115	; 0x73
   d56fe:	3973      	subs	r1, #115	; 0x73
   d5700:	9300      	str	r3, [sp, #0]
   d5702:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5706:	4b89      	ldr	r3, [pc, #548]	; (d592c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5708:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d570c:	e01f      	b.n	d574e <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d570e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5712:	1dd8      	adds	r0, r3, #7
   d5714:	bf48      	it	mi
   d5716:	f103 000e 	addmi.w	r0, r3, #14
   d571a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d571e:	10c0      	asrs	r0, r0, #3
   d5720:	4358      	muls	r0, r3
   d5722:	f002 fc9f 	bl	d8064 <malloc>
   d5726:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5728:	2800      	cmp	r0, #0
   d572a:	d1d9      	bne.n	d56e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d572c:	b004      	add	sp, #16
   d572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5732:	2340      	movs	r3, #64	; 0x40
   d5734:	f04f 0c01 	mov.w	ip, #1
   d5738:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d573c:	2352      	movs	r3, #82	; 0x52
   d573e:	3840      	subs	r0, #64	; 0x40
   d5740:	3952      	subs	r1, #82	; 0x52
   d5742:	9300      	str	r3, [sp, #0]
   d5744:	4b7a      	ldr	r3, [pc, #488]	; (d5930 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5746:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d574a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d574e:	f340 024f 	sbfx	r2, r0, #1, #16
   d5752:	f341 014f 	sbfx	r1, r1, #1, #16
   d5756:	4620      	mov	r0, r4
   d5758:	f7ff fbe8 	bl	d4f2c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d575c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d575e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5762:	2800      	cmp	r0, #0
   d5764:	d078      	beq.n	d5858 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5766:	2d00      	cmp	r5, #0
   d5768:	d174      	bne.n	d5854 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d576a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d576e:	2b20      	cmp	r3, #32
   d5770:	bf0c      	ite	eq
   d5772:	253c      	moveq	r5, #60	; 0x3c
   d5774:	253d      	movne	r5, #61	; 0x3d
   d5776:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d577a:	f1b8 0f00 	cmp.w	r8, #0
   d577e:	d001      	beq.n	d5784 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5780:	f003 f954 	bl	d8a2c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5784:	b1fe      	cbz	r6, d57c6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5786:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d578a:	2800      	cmp	r0, #0
   d578c:	db1b      	blt.n	d57c6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d578e:	2101      	movs	r1, #1
   d5790:	b280      	uxth	r0, r0
   d5792:	f004 fb39 	bl	d9e08 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5796:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d579a:	2101      	movs	r1, #1
   d579c:	b280      	uxth	r0, r0
   d579e:	f004 fb44 	bl	d9e2a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d57a2:	2001      	movs	r0, #1
   d57a4:	f002 fcb6 	bl	d8114 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d57a8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d57ac:	2100      	movs	r1, #0
   d57ae:	b280      	uxth	r0, r0
   d57b0:	f004 fb3b 	bl	d9e2a <digitalWrite>
    delay(10);                  // Wait 10 ms
   d57b4:	200a      	movs	r0, #10
   d57b6:	f002 fcad 	bl	d8114 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d57ba:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d57be:	2101      	movs	r1, #1
   d57c0:	b280      	uxth	r0, r0
   d57c2:	f004 fb32 	bl	d9e2a <digitalWrite>
  TRANSACTION_START
   d57c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d57c8:	2800      	cmp	r0, #0
   d57ca:	d074      	beq.n	d58b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d57cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d57ce:	f003 f929 	bl	d8a24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d57d2:	2204      	movs	r2, #4
   d57d4:	4957      	ldr	r1, [pc, #348]	; (d5934 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d57d6:	4620      	mov	r0, r4
   d57d8:	f7ff ff0d 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d57dc:	7aa1      	ldrb	r1, [r4, #10]
   d57de:	3901      	subs	r1, #1
   d57e0:	b2c9      	uxtb	r1, r1
   d57e2:	4620      	mov	r0, r4
   d57e4:	f7ff fea0 	bl	d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d57e8:	4953      	ldr	r1, [pc, #332]	; (d5938 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d57ea:	2204      	movs	r2, #4
   d57ec:	4620      	mov	r0, r4
   d57ee:	f7ff ff02 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d57f2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d57f6:	2b01      	cmp	r3, #1
   d57f8:	bf0c      	ite	eq
   d57fa:	2110      	moveq	r1, #16
   d57fc:	2114      	movne	r1, #20
   d57fe:	4620      	mov	r0, r4
   d5800:	f7ff fe92 	bl	d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5804:	2204      	movs	r2, #4
   d5806:	494d      	ldr	r1, [pc, #308]	; (d593c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5808:	4620      	mov	r0, r4
   d580a:	f7ff fef4 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d580e:	68a3      	ldr	r3, [r4, #8]
   d5810:	4a4b      	ldr	r2, [pc, #300]	; (d5940 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d5812:	4293      	cmp	r3, r2
   d5814:	d15c      	bne.n	d58d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5816:	494b      	ldr	r1, [pc, #300]	; (d5944 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5818:	2204      	movs	r2, #4
   d581a:	4620      	mov	r0, r4
   d581c:	f7ff feeb 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5820:	21d9      	movs	r1, #217	; 0xd9
   d5822:	4620      	mov	r0, r4
   d5824:	f7ff fe80 	bl	d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5828:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d582c:	2b01      	cmp	r3, #1
   d582e:	bf0c      	ite	eq
   d5830:	2122      	moveq	r1, #34	; 0x22
   d5832:	21f1      	movne	r1, #241	; 0xf1
   d5834:	4620      	mov	r0, r4
   d5836:	f7ff fe77 	bl	d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d583a:	4620      	mov	r0, r4
   d583c:	4942      	ldr	r1, [pc, #264]	; (d5948 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d583e:	2206      	movs	r2, #6
   d5840:	f7ff fed9 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5844:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5846:	2800      	cmp	r0, #0
   d5848:	d063      	beq.n	d5912 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d584a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d584c:	f003 f8ea 	bl	d8a24 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5850:	2001      	movs	r0, #1
   d5852:	e76b      	b.n	d572c <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5854:	b26d      	sxtb	r5, r5
   d5856:	e78e      	b.n	d5776 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5858:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d585c:	2101      	movs	r1, #1
   d585e:	b280      	uxth	r0, r0
   d5860:	f004 fad2 	bl	d9e08 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5864:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5868:	2101      	movs	r1, #1
   d586a:	b280      	uxth	r0, r0
   d586c:	f004 facc 	bl	d9e08 <pinMode>
    SSD1306_DESELECT
   d5870:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5874:	2101      	movs	r1, #1
   d5876:	b280      	uxth	r0, r0
   d5878:	f004 fad7 	bl	d9e2a <digitalWrite>
    if(spi) { // Hardware SPI
   d587c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d587e:	b13d      	cbz	r5, d5890 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5880:	f1b8 0f00 	cmp.w	r8, #0
   d5884:	f43f af7e 	beq.w	d5784 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5888:	4628      	mov	r0, r5
   d588a:	f003 fb97 	bl	d8fbc <_ZN8SPIClass5beginEv>
   d588e:	e779      	b.n	d5784 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5890:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5894:	2101      	movs	r1, #1
   d5896:	b280      	uxth	r0, r0
   d5898:	f004 fab6 	bl	d9e08 <pinMode>
      pinMode(clkPin , OUTPUT);
   d589c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d58a0:	2101      	movs	r1, #1
   d58a2:	b280      	uxth	r0, r0
   d58a4:	f004 fab0 	bl	d9e08 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d58a8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d58ac:	4629      	mov	r1, r5
   d58ae:	b280      	uxth	r0, r0
   d58b0:	f004 fabb 	bl	d9e2a <digitalWrite>
   d58b4:	e766      	b.n	d5784 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d58b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d58b8:	b118      	cbz	r0, d58c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d58ba:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d58be:	f003 fbbb 	bl	d9038 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d58c2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d58c6:	2100      	movs	r1, #0
   d58c8:	b280      	uxth	r0, r0
   d58ca:	f004 faae 	bl	d9e2a <digitalWrite>
   d58ce:	e780      	b.n	d57d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d58d0:	4a1e      	ldr	r2, [pc, #120]	; (d594c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d58d2:	4293      	cmp	r3, r2
   d58d4:	d10e      	bne.n	d58f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d58d6:	491e      	ldr	r1, [pc, #120]	; (d5950 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d58d8:	2203      	movs	r2, #3
   d58da:	4620      	mov	r0, r4
   d58dc:	f7ff fe8b 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d58e0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d58e4:	2b01      	cmp	r3, #1
   d58e6:	bf0c      	ite	eq
   d58e8:	219f      	moveq	r1, #159	; 0x9f
   d58ea:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d58ec:	4620      	mov	r0, r4
   d58ee:	f7ff fe1b 	bl	d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d58f2:	e795      	b.n	d5820 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d58f4:	4a17      	ldr	r2, [pc, #92]	; (d5954 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d58f6:	4293      	cmp	r3, r2
   d58f8:	d192      	bne.n	d5820 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d58fa:	4917      	ldr	r1, [pc, #92]	; (d5958 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d58fc:	2203      	movs	r2, #3
   d58fe:	4620      	mov	r0, r4
   d5900:	f7ff fe79 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5904:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5908:	2b01      	cmp	r3, #1
   d590a:	bf0c      	ite	eq
   d590c:	2110      	moveq	r1, #16
   d590e:	21af      	movne	r1, #175	; 0xaf
   d5910:	e7ec      	b.n	d58ec <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5912:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5916:	2101      	movs	r1, #1
   d5918:	b280      	uxth	r0, r0
   d591a:	f004 fa86 	bl	d9e2a <digitalWrite>
   d591e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5920:	2800      	cmp	r0, #0
   d5922:	d095      	beq.n	d5850 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5924:	f003 fb6e 	bl	d9004 <_ZN8SPIClass14endTransactionEv>
   d5928:	e792      	b.n	d5850 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d592a:	bf00      	nop
   d592c:	000dd730 	.word	0x000dd730
   d5930:	000dd470 	.word	0x000dd470
   d5934:	000dd978 	.word	0x000dd978
   d5938:	000dd97c 	.word	0x000dd97c
   d593c:	000dd980 	.word	0x000dd980
   d5940:	00200080 	.word	0x00200080
   d5944:	000dd98a 	.word	0x000dd98a
   d5948:	000dd984 	.word	0x000dd984
   d594c:	00400080 	.word	0x00400080
   d5950:	000dd98e 	.word	0x000dd98e
   d5954:	00100060 	.word	0x00100060
   d5958:	000dd991 	.word	0x000dd991

000d595c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d595c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d595e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5960:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5964:	db3d      	blt.n	d59e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5966:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d596a:	4294      	cmp	r4, r2
   d596c:	dd39      	ble.n	d59e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d596e:	2900      	cmp	r1, #0
      w += x;
   d5970:	bfbe      	ittt	lt
   d5972:	185b      	addlt	r3, r3, r1
   d5974:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5976:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5978:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d597c:	18ce      	adds	r6, r1, r3
   d597e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5980:	bfc4      	itt	gt
   d5982:	1a63      	subgt	r3, r4, r1
   d5984:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5986:	2b00      	cmp	r3, #0
   d5988:	dd2b      	ble.n	d59e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d598a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d598c:	10d6      	asrs	r6, r2, #3
   d598e:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5992:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5994:	f002 0007 	and.w	r0, r2, #7
   d5998:	2201      	movs	r2, #1
   d599a:	4082      	lsls	r2, r0
      switch(color) {
   d599c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d599e:	b2d2      	uxtb	r2, r2
      switch(color) {
   d59a0:	d016      	beq.n	d59d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d59a2:	2d02      	cmp	r5, #2
   d59a4:	d00b      	beq.n	d59be <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d59a6:	b9e5      	cbnz	r5, d59e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d59a8:	43d2      	mvns	r2, r2
   d59aa:	b2d2      	uxtb	r2, r2
   d59ac:	440b      	add	r3, r1
   d59ae:	4299      	cmp	r1, r3
   d59b0:	d017      	beq.n	d59e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d59b2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d59b6:	4010      	ands	r0, r2
   d59b8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d59bc:	e7f7      	b.n	d59ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d59be:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d59c0:	4299      	cmp	r1, r3
   d59c2:	d00e      	beq.n	d59e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d59c4:	f811 0b01 	ldrb.w	r0, [r1], #1
   d59c8:	4050      	eors	r0, r2
   d59ca:	f801 0c01 	strb.w	r0, [r1, #-1]
   d59ce:	e7f7      	b.n	d59c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d59d0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d59d2:	4299      	cmp	r1, r3
   d59d4:	d005      	beq.n	d59e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d59d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   d59da:	4310      	orrs	r0, r2
   d59dc:	f801 0c01 	strb.w	r0, [r1, #-1]
   d59e0:	e7f7      	b.n	d59d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d59e2:	bd70      	pop	{r4, r5, r6, pc}

000d59e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d59e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d59e6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d59e8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d59ec:	db76      	blt.n	d5adc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d59ee:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d59f2:	42a9      	cmp	r1, r5
   d59f4:	da72      	bge.n	d5adc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d59f6:	2a00      	cmp	r2, #0
      __h += __y;
   d59f8:	bfbc      	itt	lt
   d59fa:	18d2      	addlt	r2, r2, r3
   d59fc:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d59fe:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5a02:	bfb8      	it	lt
   d5a04:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5a06:	18d7      	adds	r7, r2, r3
   d5a08:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5a0a:	bfc4      	itt	gt
   d5a0c:	1aa3      	subgt	r3, r4, r2
   d5a0e:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5a10:	2b00      	cmp	r3, #0
   d5a12:	dd63      	ble.n	d5adc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5a14:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5a18:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5a1a:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5a1e:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5a22:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5a24:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5a28:	d023      	beq.n	d5a72 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5a2a:	f1c2 0208 	rsb	r2, r2, #8
   d5a2e:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5a30:	4d2c      	ldr	r5, [pc, #176]	; (d5ae4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5a32:	4293      	cmp	r3, r2
   d5a34:	bf3c      	itt	cc
   d5a36:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5a3a:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5a3e:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5a40:	bf3c      	itt	cc
   d5a42:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5a46:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5a4a:	2e01      	cmp	r6, #1
   d5a4c:	d007      	beq.n	d5a5e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5a4e:	2e02      	cmp	r6, #2
   d5a50:	d02e      	beq.n	d5ab0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5a52:	b94e      	cbnz	r6, d5a68 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5a54:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5a58:	ea2c 0505 	bic.w	r5, ip, r5
   d5a5c:	e003      	b.n	d5a66 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5a5e:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5a62:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5a66:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5a68:	4293      	cmp	r3, r2
   d5a6a:	d337      	bcc.n	d5adc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5a6c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5a70:	440c      	add	r4, r1
        h -= mod;
   d5a72:	1a9a      	subs	r2, r3, r2
   d5a74:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5a76:	2a07      	cmp	r2, #7
   d5a78:	d90e      	bls.n	d5a98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5a7a:	2e02      	cmp	r6, #2
   d5a7c:	d11d      	bne.n	d5aba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5a7e:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5a80:	7821      	ldrb	r1, [r4, #0]
   d5a82:	43c9      	mvns	r1, r1
   d5a84:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5a86:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5a88:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5a8c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5a8e:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5a90:	440c      	add	r4, r1
            } while(h >= 8);
   d5a92:	d8f5      	bhi.n	d5a80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5a94:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5a98:	b302      	cbz	r2, d5adc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5a9a:	4b13      	ldr	r3, [pc, #76]	; (d5ae8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5a9c:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5a9e:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5aa0:	d019      	beq.n	d5ad6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5aa2:	2e02      	cmp	r6, #2
   d5aa4:	d01b      	beq.n	d5ade <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5aa6:	b9ce      	cbnz	r6, d5adc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5aa8:	7822      	ldrb	r2, [r4, #0]
   d5aaa:	ea22 0303 	bic.w	r3, r2, r3
   d5aae:	e014      	b.n	d5ada <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5ab0:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5ab4:	ea85 050c 	eor.w	r5, r5, ip
   d5ab8:	e7d5      	b.n	d5a66 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5aba:	2e00      	cmp	r6, #0
   d5abc:	bf14      	ite	ne
   d5abe:	25ff      	movne	r5, #255	; 0xff
   d5ac0:	2500      	moveq	r5, #0
   d5ac2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5ac4:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5ac6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5ac8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5acc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5ace:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5ad0:	440c      	add	r4, r1
            } while(h >= 8);
   d5ad2:	d8f7      	bhi.n	d5ac4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5ad4:	e7de      	b.n	d5a94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5ad6:	7822      	ldrb	r2, [r4, #0]
   d5ad8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5ada:	7023      	strb	r3, [r4, #0]
}
   d5adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5ade:	7822      	ldrb	r2, [r4, #0]
   d5ae0:	4053      	eors	r3, r2
   d5ae2:	e7fa      	b.n	d5ada <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5ae4:	000dd968 	.word	0x000dd968
   d5ae8:	000dd970 	.word	0x000dd970

000d5aec <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5aec:	b470      	push	{r4, r5, r6}
   d5aee:	4614      	mov	r4, r2
  switch(rotation) {
   d5af0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5af2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5af6:	2a02      	cmp	r2, #2
   d5af8:	d00d      	beq.n	d5b16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5afa:	2a03      	cmp	r2, #3
   d5afc:	d018      	beq.n	d5b30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5afe:	2a01      	cmp	r2, #1
   d5b00:	d111      	bne.n	d5b26 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5b02:	8902      	ldrh	r2, [r0, #8]
   d5b04:	43e4      	mvns	r4, r4
   d5b06:	4414      	add	r4, r2
   d5b08:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5b0a:	9603      	str	r6, [sp, #12]
   d5b0c:	460a      	mov	r2, r1
   d5b0e:	4621      	mov	r1, r4
}
   d5b10:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5b12:	f7ff bf67 	b.w	d59e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5b16:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5b18:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5b1a:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5b1c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5b1e:	4414      	add	r4, r2
    x -= (w-1);
   d5b20:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5b22:	b224      	sxth	r4, r4
    x -= (w-1);
   d5b24:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5b26:	9603      	str	r6, [sp, #12]
   d5b28:	4622      	mov	r2, r4
}
   d5b2a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5b2c:	f7ff bf16 	b.w	d595c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5b30:	8945      	ldrh	r5, [r0, #10]
   d5b32:	4419      	add	r1, r3
   d5b34:	1a69      	subs	r1, r5, r1
   d5b36:	b209      	sxth	r1, r1
    break;
   d5b38:	e7e7      	b.n	d5b0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5b3a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5b3a:	b430      	push	{r4, r5}
   d5b3c:	4614      	mov	r4, r2
  switch(rotation) {
   d5b3e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5b40:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5b44:	2a02      	cmp	r2, #2
   d5b46:	d00d      	beq.n	d5b64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5b48:	2a03      	cmp	r2, #3
   d5b4a:	d018      	beq.n	d5b7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5b4c:	2a01      	cmp	r2, #1
   d5b4e:	d111      	bne.n	d5b74 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5b50:	18e2      	adds	r2, r4, r3
   d5b52:	8904      	ldrh	r4, [r0, #8]
   d5b54:	1aa4      	subs	r4, r4, r2
   d5b56:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5b58:	9502      	str	r5, [sp, #8]
   d5b5a:	460a      	mov	r2, r1
   d5b5c:	4621      	mov	r1, r4
}
   d5b5e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5b60:	f7ff befc 	b.w	d595c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5b64:	8902      	ldrh	r2, [r0, #8]
   d5b66:	43c9      	mvns	r1, r1
   d5b68:	4411      	add	r1, r2
    y -= (h-1);
   d5b6a:	18e2      	adds	r2, r4, r3
   d5b6c:	8944      	ldrh	r4, [r0, #10]
   d5b6e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5b70:	b209      	sxth	r1, r1
    y -= (h-1);
   d5b72:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5b74:	9502      	str	r5, [sp, #8]
   d5b76:	4622      	mov	r2, r4
}
   d5b78:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5b7a:	f7ff bf33 	b.w	d59e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5b7e:	8942      	ldrh	r2, [r0, #10]
   d5b80:	43c9      	mvns	r1, r1
   d5b82:	4411      	add	r1, r2
   d5b84:	b209      	sxth	r1, r1
    break;
   d5b86:	e7e7      	b.n	d5b58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5b88 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5b8c:	4604      	mov	r4, r0
  TRANSACTION_START
   d5b8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5b90:	2800      	cmp	r0, #0
   d5b92:	d042      	beq.n	d5c1a <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5b94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5b96:	f002 ff45 	bl	d8a24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5b9a:	4947      	ldr	r1, [pc, #284]	; (d5cb8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5b9c:	2205      	movs	r2, #5
   d5b9e:	4620      	mov	r0, r4
   d5ba0:	f7ff fd29 	bl	d55f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5ba4:	7a21      	ldrb	r1, [r4, #8]
   d5ba6:	3901      	subs	r1, #1
   d5ba8:	4620      	mov	r0, r4
   d5baa:	b2c9      	uxtb	r1, r1
   d5bac:	f7ff fcbc 	bl	d5528 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5bb0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5bb4:	1dde      	adds	r6, r3, #7
   d5bb6:	bf48      	it	mi
   d5bb8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5bbc:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5bc0:	8923      	ldrh	r3, [r4, #8]
   d5bc2:	10f6      	asrs	r6, r6, #3
   d5bc4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5bc8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5bcc:	2800      	cmp	r0, #0
   d5bce:	d03a      	beq.n	d5c46 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5bd0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5bd4:	f002 ff34 	bl	d8a40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5bd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5bda:	6803      	ldr	r3, [r0, #0]
   d5bdc:	2140      	movs	r1, #64	; 0x40
   d5bde:	689b      	ldr	r3, [r3, #8]
   d5be0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5be2:	2701      	movs	r7, #1
    while(count--) {
   d5be4:	42b5      	cmp	r5, r6
   d5be6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5be8:	d024      	beq.n	d5c34 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5bea:	2f1f      	cmp	r7, #31
   d5bec:	d90c      	bls.n	d5c08 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5bee:	f002 ff2e 	bl	d8a4e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5bf2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5bf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5bf8:	f002 ff22 	bl	d8a40 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5bfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5bfe:	6803      	ldr	r3, [r0, #0]
   d5c00:	2140      	movs	r1, #64	; 0x40
   d5c02:	689b      	ldr	r3, [r3, #8]
   d5c04:	4798      	blx	r3
        bytesOut = 1;
   d5c06:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5c08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5c0a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c0e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5c10:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5c12:	689b      	ldr	r3, [r3, #8]
   d5c14:	4798      	blx	r3
      bytesOut++;
   d5c16:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5c18:	e7e4      	b.n	d5be4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5c1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5c1c:	b118      	cbz	r0, d5c26 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5c1e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5c22:	f003 fa09 	bl	d9038 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5c26:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5c2a:	2100      	movs	r1, #0
   d5c2c:	b280      	uxth	r0, r0
   d5c2e:	f004 f8fc 	bl	d9e2a <digitalWrite>
   d5c32:	e7b2      	b.n	d5b9a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5c34:	f002 ff0b 	bl	d8a4e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5c38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5c3a:	b378      	cbz	r0, d5c9c <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5c3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5c3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5c42:	f002 beef 	b.w	d8a24 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5c46:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5c4a:	2101      	movs	r1, #1
   d5c4c:	b280      	uxth	r0, r0
   d5c4e:	f004 f8ec 	bl	d9e2a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5c52:	42b5      	cmp	r5, r6
   d5c54:	d0f0      	beq.n	d5c38 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5c56:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5c58:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5c5c:	b118      	cbz	r0, d5c66 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5c5e:	4649      	mov	r1, r9
   d5c60:	f003 fa58 	bl	d9114 <_ZN8SPIClass8transferEh>
   d5c64:	e7f5      	b.n	d5c52 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5c66:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5c68:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5c6c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5c70:	ea09 0108 	and.w	r1, r9, r8
   d5c74:	b280      	uxth	r0, r0
   d5c76:	f004 f8d8 	bl	d9e2a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5c7a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5c7e:	2101      	movs	r1, #1
   d5c80:	b280      	uxth	r0, r0
   d5c82:	f004 f8d2 	bl	d9e2a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5c86:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5c8a:	2100      	movs	r1, #0
   d5c8c:	b280      	uxth	r0, r0
   d5c8e:	f004 f8cc 	bl	d9e2a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5c92:	3f01      	subs	r7, #1
   d5c94:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5c98:	d1e8      	bne.n	d5c6c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5c9a:	e7da      	b.n	d5c52 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5c9c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5ca0:	2101      	movs	r1, #1
   d5ca2:	b280      	uxth	r0, r0
   d5ca4:	f004 f8c1 	bl	d9e2a <digitalWrite>
   d5ca8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5caa:	b118      	cbz	r0, d5cb4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5cac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5cb0:	f003 b9a8 	b.w	d9004 <_ZN8SPIClass14endTransactionEv>
}
   d5cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5cb8:	000dd994 	.word	0x000dd994

000d5cbc <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5cbc:	2100      	movs	r1, #0
   d5cbe:	220a      	movs	r2, #10
   d5cc0:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5cc4:	4770      	bx	lr

000d5cc6 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5cc6:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5cc8:	b510      	push	{r4, lr}
   d5cca:	4604      	mov	r4, r0
    this->pin = pin;
   d5ccc:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5cce:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5cd0:	b288      	uxth	r0, r1
   d5cd2:	f004 f8c3 	bl	d9e5c <digitalRead>
   d5cd6:	b108      	cbz	r0, d5cdc <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5cd8:	2303      	movs	r3, #3
   d5cda:	71a3      	strb	r3, [r4, #6]
   d5cdc:	f001 ff66 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5ce0:	6020      	str	r0, [r4, #0]
#endif
}
   d5ce2:	bd10      	pop	{r4, pc}

000d5ce4 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5ce4:	b538      	push	{r3, r4, r5, lr}
   d5ce6:	460c      	mov	r4, r1
   d5ce8:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5cea:	4611      	mov	r1, r2
   d5cec:	b2a0      	uxth	r0, r4
   d5cee:	f004 f88b 	bl	d9e08 <pinMode>
  
  this->attach(pin);
   d5cf2:	4621      	mov	r1, r4
   d5cf4:	4628      	mov	r0, r5
}
   d5cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5cfa:	f7ff bfe4 	b.w	d5cc6 <_ZN8Debounce6attachEi>

000d5cfe <_ZN3GpsC1EP11USARTSerial>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Gps.h"

Gps::Gps(USARTSerial* serial)
   d5cfe:	b538      	push	{r3, r4, r5, lr}
   d5d00:	4604      	mov	r4, r0
   d5d02:	460d      	mov	r5, r1
   d5d04:	f000 fa1c 	bl	d6140 <_ZN9NmeaCacheC1Ev>
   d5d08:	2300      	movs	r3, #0
   d5d0a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
{
    this->_serial = serial;
   d5d0e:	6725      	str	r5, [r4, #112]	; 0x70
Gps::Gps(USARTSerial* serial)
   d5d10:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
};
   d5d14:	4620      	mov	r0, r4
   d5d16:	bd38      	pop	{r3, r4, r5, pc}

000d5d18 <_ZN3Gps11sendCommandEPKc>:
{
    this->_serial->end();
}

void Gps::sendCommand(const char* data)
{
   d5d18:	b508      	push	{r3, lr}
    this->_serial->println(data);
   d5d1a:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5d1c:	f002 ffed 	bl	d8cfa <_ZN5Print7printlnEPKc>
    delay(250);
}
   d5d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(250);
   d5d24:	20fa      	movs	r0, #250	; 0xfa
   d5d26:	f002 b9f5 	b.w	d8114 <delay>
	...

000d5d2c <_ZN3Gps5beginEm>:
{
   d5d2c:	b510      	push	{r4, lr}
   d5d2e:	4604      	mov	r4, r0
    this->_serial->begin(baud);
   d5d30:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5d32:	f003 fe89 	bl	d9a48 <_ZN11USARTSerial5beginEm>
    this->_serial->blockOnOverrun(true);
   d5d36:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d5d38:	6803      	ldr	r3, [r0, #0]
   d5d3a:	2101      	movs	r1, #1
   d5d3c:	6a1b      	ldr	r3, [r3, #32]
   d5d3e:	4798      	blx	r3
    this->sendCommand(PMTK_SET_BAUD_9600);
   d5d40:	4620      	mov	r0, r4
   d5d42:	490c      	ldr	r1, [pc, #48]	; (d5d74 <_ZN3Gps5beginEm+0x48>)
   d5d44:	f7ff ffe8 	bl	d5d18 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_UPDATE_200_MILLIHERTZ);
   d5d48:	4620      	mov	r0, r4
   d5d4a:	490b      	ldr	r1, [pc, #44]	; (d5d78 <_ZN3Gps5beginEm+0x4c>)
   d5d4c:	f7ff ffe4 	bl	d5d18 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_API_SET_FIX_CTL_1HZ);
   d5d50:	4620      	mov	r0, r4
   d5d52:	490a      	ldr	r1, [pc, #40]	; (d5d7c <_ZN3Gps5beginEm+0x50>)
   d5d54:	f7ff ffe0 	bl	d5d18 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d5d58:	4620      	mov	r0, r4
   d5d5a:	4909      	ldr	r1, [pc, #36]	; (d5d80 <_ZN3Gps5beginEm+0x54>)
   d5d5c:	f7ff ffdc 	bl	d5d18 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PMTK_ENABLE_WAAS);
   d5d60:	4620      	mov	r0, r4
   d5d62:	4908      	ldr	r1, [pc, #32]	; (d5d84 <_ZN3Gps5beginEm+0x58>)
   d5d64:	f7ff ffd8 	bl	d5d18 <_ZN3Gps11sendCommandEPKc>
    this->sendCommand(PGCMD_ANTENNA);
   d5d68:	4620      	mov	r0, r4
   d5d6a:	4907      	ldr	r1, [pc, #28]	; (d5d88 <_ZN3Gps5beginEm+0x5c>)
};
   d5d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    this->sendCommand(PGCMD_ANTENNA);
   d5d70:	f7ff bfd2 	b.w	d5d18 <_ZN3Gps11sendCommandEPKc>
   d5d74:	000dd999 	.word	0x000dd999
   d5d78:	000dd9aa 	.word	0x000dd9aa
   d5d7c:	000dd9bb 	.word	0x000dd9bb
   d5d80:	000dd9d4 	.word	0x000dd9d4
   d5d84:	000dda06 	.word	0x000dda06
   d5d88:	000dda14 	.word	0x000dda14

000d5d8c <_ZN3Gps11clearBufferEv>:
    }
}

void Gps::clearBuffer()
{
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5d8c:	2300      	movs	r3, #0
    {
        this->_buffer[i] = 0;
   d5d8e:	4619      	mov	r1, r3
   d5d90:	18c2      	adds	r2, r0, r3
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5d92:	3301      	adds	r3, #1
   d5d94:	2b80      	cmp	r3, #128	; 0x80
        this->_buffer[i] = 0;
   d5d96:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    for(int i = 0; i < BUFFER_SIZE; i++)
   d5d9a:	d1f9      	bne.n	d5d90 <_ZN3Gps11clearBufferEv+0x4>
    }
}
   d5d9c:	4770      	bx	lr
	...

000d5da0 <_ZN3Gps12onSerialDataEv>:
{
   d5da0:	b570      	push	{r4, r5, r6, lr}
   d5da2:	4604      	mov	r4, r0
    if (this->_serial->available())
   d5da4:	6f00      	ldr	r0, [r0, #112]	; 0x70
   d5da6:	6803      	ldr	r3, [r0, #0]
{
   d5da8:	b088      	sub	sp, #32
    if (this->_serial->available())
   d5daa:	691b      	ldr	r3, [r3, #16]
   d5dac:	4798      	blx	r3
   d5dae:	b1e8      	cbz	r0, d5dec <_ZN3Gps12onSerialDataEv+0x4c>
        char c = this->_serial->read();
   d5db0:	6f20      	ldr	r0, [r4, #112]	; 0x70
   d5db2:	6803      	ldr	r3, [r0, #0]
   d5db4:	695b      	ldr	r3, [r3, #20]
   d5db6:	4798      	blx	r3
        if (!this->_synced && c == '$') this->_synced = true;
   d5db8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
        char c = this->_serial->read();
   d5dbc:	b2c0      	uxtb	r0, r0
        if (!this->_synced && c == '$') this->_synced = true;
   d5dbe:	b923      	cbnz	r3, d5dca <_ZN3Gps12onSerialDataEv+0x2a>
   d5dc0:	2824      	cmp	r0, #36	; 0x24
   d5dc2:	bf04      	itt	eq
   d5dc4:	2301      	moveq	r3, #1
   d5dc6:	f884 30f8 	strbeq.w	r3, [r4, #248]	; 0xf8
        if (this->_synced)
   d5dca:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   d5dce:	b16b      	cbz	r3, d5dec <_ZN3Gps12onSerialDataEv+0x4c>
            if (this->_bufferIndex > BUFFER_SIZE)
   d5dd0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d5dd4:	2b80      	cmp	r3, #128	; 0x80
   d5dd6:	dd0b      	ble.n	d5df0 <_ZN3Gps12onSerialDataEv+0x50>
                Serial.println("Buffer Overun: '");
   d5dd8:	f003 febe 	bl	d9b58 <_Z16_fetch_usbserialv>
   d5ddc:	4920      	ldr	r1, [pc, #128]	; (d5e60 <_ZN3Gps12onSerialDataEv+0xc0>)
   d5dde:	f002 ff8c 	bl	d8cfa <_ZN5Print7printlnEPKc>
                this->_bufferIndex = 0;
   d5de2:	2300      	movs	r3, #0
   d5de4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
                this->_synced = false;
   d5de8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   d5dec:	b008      	add	sp, #32
   d5dee:	bd70      	pop	{r4, r5, r6, pc}
                this->_buffer[this->_bufferIndex] =  0;
   d5df0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            else if (c == '\r')
   d5df4:	280d      	cmp	r0, #13
                this->_buffer[this->_bufferIndex] =  0;
   d5df6:	4423      	add	r3, r4
            else if (c == '\r')
   d5df8:	d108      	bne.n	d5e0c <_ZN3Gps12onSerialDataEv+0x6c>
                this->_buffer[this->_bufferIndex] =  0;
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                this->_bufferIndex++;
   d5e00:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   d5e04:	3301      	adds	r3, #1
   d5e06:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
   d5e0a:	e7ef      	b.n	d5dec <_ZN3Gps12onSerialDataEv+0x4c>
            else if (c == '\n')
   d5e0c:	280a      	cmp	r0, #10
   d5e0e:	d124      	bne.n	d5e5a <_ZN3Gps12onSerialDataEv+0xba>
                this->_buffer[this->_bufferIndex] =  0;
   d5e10:	2600      	movs	r6, #0
   d5e12:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
                String tempBuffer = String((char*)this->_buffer);
   d5e16:	f104 0174 	add.w	r1, r4, #116	; 0x74
   d5e1a:	4668      	mov	r0, sp
   d5e1c:	f003 fa3d 	bl	d929a <_ZN6StringC1EPKc>
                uint8_t index = this->msgIdToIndex(tempBuffer);
   d5e20:	4669      	mov	r1, sp
   d5e22:	a804      	add	r0, sp, #16
   d5e24:	f003 fa79 	bl	d931a <_ZN6StringC1ERKS_>
   d5e28:	a904      	add	r1, sp, #16
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f000 f99a 	bl	d6164 <_ZN9NmeaCache12msgIdToIndexE6String>
   d5e30:	4605      	mov	r5, r0
   d5e32:	a804      	add	r0, sp, #16
   d5e34:	f003 f9e6 	bl	d9204 <_ZN6StringD1Ev>
                this->data[index] = tempBuffer;
   d5e38:	b228      	sxth	r0, r5
   d5e3a:	4669      	mov	r1, sp
   d5e3c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   d5e40:	f003 fa5c 	bl	d92fc <_ZN6StringaSERKS_>
                this->_bufferIndex = 0;
   d5e44:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
                this->clearBuffer();
   d5e48:	4620      	mov	r0, r4
                this->_synced = false;
   d5e4a:	f884 60f8 	strb.w	r6, [r4, #248]	; 0xf8
                this->clearBuffer();
   d5e4e:	f7ff ff9d 	bl	d5d8c <_ZN3Gps11clearBufferEv>
                String tempBuffer = String((char*)this->_buffer);
   d5e52:	4668      	mov	r0, sp
   d5e54:	f003 f9d6 	bl	d9204 <_ZN6StringD1Ev>
   d5e58:	e7c8      	b.n	d5dec <_ZN3Gps12onSerialDataEv+0x4c>
                this->_buffer[this->_bufferIndex] = c;
   d5e5a:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
   d5e5e:	e7cf      	b.n	d5e00 <_ZN3Gps12onSerialDataEv+0x60>
   d5e60:	000dda23 	.word	0x000dda23

000d5e64 <_ZN4NmeaC1E6Stringh9NmeaCache>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "Nmea.h"

Nmea::Nmea(String messageId, uint8_t dataIndex, NmeaCache nmeaCache)
   d5e64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5e68:	4604      	mov	r4, r0
   d5e6a:	460f      	mov	r7, r1
   d5e6c:	f104 0814 	add.w	r8, r4, #20
   d5e70:	490e      	ldr	r1, [pc, #56]	; (d5eac <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d5e72:	4615      	mov	r5, r2
   d5e74:	461e      	mov	r6, r3
   d5e76:	f003 fa10 	bl	d929a <_ZN6StringC1EPKc>
   d5e7a:	490c      	ldr	r1, [pc, #48]	; (d5eac <_ZN4NmeaC1E6Stringh9NmeaCache+0x48>)
   d5e7c:	4640      	mov	r0, r8
   d5e7e:	f003 fa0c 	bl	d929a <_ZN6StringC1EPKc>
{
    // ***
    // *** Save the Message ID
    // ***
    this->_messageId = messageId;
   d5e82:	4639      	mov	r1, r7
   d5e84:	4620      	mov	r0, r4
   d5e86:	f003 fa39 	bl	d92fc <_ZN6StringaSERKS_>
    this->_dataIndex = dataIndex;
    
    // ***
    // *** Make a copy of the data.
    // ***
    this->_data = String(nmeaCache.data[dataIndex]);
   d5e8a:	eb06 1105 	add.w	r1, r6, r5, lsl #4
    this->_dataIndex = dataIndex;
   d5e8e:	7425      	strb	r5, [r4, #16]
    this->_data = String(nmeaCache.data[dataIndex]);
   d5e90:	4668      	mov	r0, sp
   d5e92:	f003 fa42 	bl	d931a <_ZN6StringC1ERKS_>
   d5e96:	4669      	mov	r1, sp
   d5e98:	4640      	mov	r0, r8
   d5e9a:	f003 fa49 	bl	d9330 <_ZN6StringaSEOS_>
   d5e9e:	4668      	mov	r0, sp
   d5ea0:	f003 f9b0 	bl	d9204 <_ZN6StringD1Ev>
}
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	b004      	add	sp, #16
   d5ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5eac:	000ddcf4 	.word	0x000ddcf4

000d5eb0 <_ZN4Nmea15extractChecksumEv>:

    return returnValue;
}

uint16_t Nmea::extractChecksum()
{
   d5eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5eb2:	b085      	sub	sp, #20
    uint16_t returnValue = 0;
    
    // ***
    // *** Get the position of the last * character.
    // ***
    uint8_t index = this->_data.lastIndexOf("*");
   d5eb4:	4919      	ldr	r1, [pc, #100]	; (d5f1c <_ZN4Nmea15extractChecksumEv+0x6c>)
{
   d5eb6:	4605      	mov	r5, r0
    uint8_t index = this->_data.lastIndexOf("*");
   d5eb8:	f100 0614 	add.w	r6, r0, #20
   d5ebc:	4668      	mov	r0, sp
   d5ebe:	f003 f9ec 	bl	d929a <_ZN6StringC1EPKc>
   d5ec2:	4669      	mov	r1, sp
   d5ec4:	4630      	mov	r0, r6
   d5ec6:	f003 fb6e 	bl	d95a6 <_ZNK6String11lastIndexOfERKS_>
   d5eca:	4604      	mov	r4, r0
   d5ecc:	4668      	mov	r0, sp
   d5ece:	f003 f999 	bl	d9204 <_ZN6StringD1Ev>
    
    // ***
    // *** Check that we have the character and that the string
    // *** is at least two characters longer than the position.
    // ***
    if (index != -1 && this->_data.length() >= (uint16_t)(index + 2))
   d5ed2:	69eb      	ldr	r3, [r5, #28]
   d5ed4:	b2e1      	uxtb	r1, r4
   d5ed6:	1c8f      	adds	r7, r1, #2
   d5ed8:	429f      	cmp	r7, r3
   d5eda:	d81d      	bhi.n	d5f18 <_ZN4Nmea15extractChecksumEv+0x68>
    {
        char c1 = this->_data.charAt(index + 1);
   d5edc:	3101      	adds	r1, #1
   d5ede:	4630      	mov	r0, r6
   d5ee0:	f003 fb2b 	bl	d953a <_ZNK6String6charAtEj>
        char c2 = this->_data.charAt(index + 2);
   d5ee4:	4639      	mov	r1, r7
        char c1 = this->_data.charAt(index + 1);
   d5ee6:	4604      	mov	r4, r0
        char c2 = this->_data.charAt(index + 2);
   d5ee8:	4630      	mov	r0, r6
   d5eea:	f003 fb26 	bl	d953a <_ZNK6String6charAtEj>
// ***
uint8_t Nmea::parseHex(char c) 
{
    uint8_t returnValue = 0;

    switch(c)
   d5eee:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   d5ef2:	b2db      	uxtb	r3, r3
   d5ef4:	2b15      	cmp	r3, #21
   d5ef6:	bf9c      	itt	ls
   d5ef8:	4a09      	ldrls	r2, [pc, #36]	; (d5f20 <_ZN4Nmea15extractChecksumEv+0x70>)
   d5efa:	5cd3      	ldrbls	r3, [r2, r3]
   d5efc:	f1a0 0031 	sub.w	r0, r0, #49	; 0x31
        char c2 = this->_data.charAt(index + 2);
   d5f00:	bf88      	it	hi
   d5f02:	2300      	movhi	r3, #0
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d5f04:	011a      	lsls	r2, r3, #4
    switch(c)
   d5f06:	b2c3      	uxtb	r3, r0
   d5f08:	2b15      	cmp	r3, #21
   d5f0a:	bf9a      	itte	ls
   d5f0c:	4904      	ldrls	r1, [pc, #16]	; (d5f20 <_ZN4Nmea15extractChecksumEv+0x70>)
   d5f0e:	5cc8      	ldrbls	r0, [r1, r3]
        returnValue = (parseHex(c1) * 16) + parseHex(c2);
   d5f10:	2000      	movhi	r0, #0
   d5f12:	4410      	add	r0, r2
}
   d5f14:	b005      	add	sp, #20
   d5f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t returnValue = 0;
   d5f18:	2000      	movs	r0, #0
   d5f1a:	e7fb      	b.n	d5f14 <_ZN4Nmea15extractChecksumEv+0x64>
   d5f1c:	000dda34 	.word	0x000dda34
   d5f20:	000dda38 	.word	0x000dda38

000d5f24 <_ZN4Nmea17calculateChecksumEv>:
{
   d5f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f26:	b085      	sub	sp, #20
    if (this->_data.startsWith("$"))
   d5f28:	4910      	ldr	r1, [pc, #64]	; (d5f6c <_ZN4Nmea17calculateChecksumEv+0x48>)
   d5f2a:	f100 0714 	add.w	r7, r0, #20
{
   d5f2e:	4606      	mov	r6, r0
    if (this->_data.startsWith("$"))
   d5f30:	4668      	mov	r0, sp
   d5f32:	f003 f9b2 	bl	d929a <_ZN6StringC1EPKc>
   d5f36:	4669      	mov	r1, sp
   d5f38:	4638      	mov	r0, r7
   d5f3a:	f003 faec 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d5f3e:	4604      	mov	r4, r0
   d5f40:	4668      	mov	r0, sp
   d5f42:	f003 f95f 	bl	d9204 <_ZN6StringD1Ev>
   d5f46:	b174      	cbz	r4, d5f66 <_ZN4Nmea17calculateChecksumEv+0x42>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d5f48:	2501      	movs	r5, #1
    uint16_t returnValue = 0;
   d5f4a:	2400      	movs	r4, #0
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d5f4c:	69f3      	ldr	r3, [r6, #28]
   d5f4e:	3b03      	subs	r3, #3
   d5f50:	429d      	cmp	r5, r3
   d5f52:	d208      	bcs.n	d5f66 <_ZN4Nmea17calculateChecksumEv+0x42>
            returnValue ^= this->_data.charAt(i);
   d5f54:	4629      	mov	r1, r5
   d5f56:	4638      	mov	r0, r7
   d5f58:	f003 faef 	bl	d953a <_ZNK6String6charAtEj>
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d5f5c:	3501      	adds	r5, #1
            returnValue ^= this->_data.charAt(i);
   d5f5e:	4044      	eors	r4, r0
   d5f60:	b2a4      	uxth	r4, r4
        for (uint8_t i = 1; i < this->_data.length() - 3; i++) 
   d5f62:	b2ed      	uxtb	r5, r5
   d5f64:	e7f2      	b.n	d5f4c <_ZN4Nmea17calculateChecksumEv+0x28>
}
   d5f66:	4620      	mov	r0, r4
   d5f68:	b005      	add	sp, #20
   d5f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f6c:	000dda36 	.word	0x000dda36

000d5f70 <_ZN4Nmea7isValidEv>:
{
   d5f70:	b538      	push	{r3, r4, r5, lr}
    if (this->_data.startsWith(this->_messageId))
   d5f72:	4601      	mov	r1, r0
{
   d5f74:	4605      	mov	r5, r0
    if (this->_data.startsWith(this->_messageId))
   d5f76:	3014      	adds	r0, #20
   d5f78:	f003 facd 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d5f7c:	b148      	cbz	r0, d5f92 <_ZN4Nmea7isValidEv+0x22>
        uint16_t providedChecksum = this->extractChecksum();
   d5f7e:	4628      	mov	r0, r5
   d5f80:	f7ff ff96 	bl	d5eb0 <_ZN4Nmea15extractChecksumEv>
   d5f84:	4604      	mov	r4, r0
        uint16_t calculatedChecksum = this->calculateChecksum();
   d5f86:	4628      	mov	r0, r5
   d5f88:	f7ff ffcc 	bl	d5f24 <_ZN4Nmea17calculateChecksumEv>
        returnValue = (providedChecksum == calculatedChecksum);
   d5f8c:	1a23      	subs	r3, r4, r0
   d5f8e:	4258      	negs	r0, r3
   d5f90:	4158      	adcs	r0, r3
}
   d5f92:	bd38      	pop	{r3, r4, r5, pc}

000d5f94 <_ZN4Nmea15getNextPositionEm>:

    return returnValue;
}

int32_t Nmea::getNextPosition(uint32_t from)
{
   d5f94:	b510      	push	{r4, lr}
   d5f96:	b086      	sub	sp, #24
   d5f98:	4604      	mov	r4, r0
   d5f9a:	9101      	str	r1, [sp, #4]
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        returnValue = this->_data.indexOf(",", from);
   d5f9c:	a802      	add	r0, sp, #8
   d5f9e:	4908      	ldr	r1, [pc, #32]	; (d5fc0 <_ZN4Nmea15getNextPositionEm+0x2c>)
   d5fa0:	f003 f97b 	bl	d929a <_ZN6StringC1EPKc>
   d5fa4:	9a01      	ldr	r2, [sp, #4]
   d5fa6:	a902      	add	r1, sp, #8
   d5fa8:	f104 0014 	add.w	r0, r4, #20
   d5fac:	f003 fac7 	bl	d953e <_ZNK6String7indexOfERKS_j>
   d5fb0:	4604      	mov	r4, r0
   d5fb2:	a802      	add	r0, sp, #8
   d5fb4:	f003 f926 	bl	d9204 <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d5fb8:	4620      	mov	r0, r4
   d5fba:	b006      	add	sp, #24
   d5fbc:	bd10      	pop	{r4, pc}
   d5fbe:	bf00      	nop
   d5fc0:	000dce4b 	.word	0x000dce4b

000d5fc4 <_ZN4Nmea13getNextIsNullEm>:

bool Nmea::getNextIsNull(uint32_t from)
{
   d5fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int32_t returnValue = -1;
    
    if (from >= 0)
    {
        String nextChar = String(this->_data.charAt(from + 1));
   d5fc6:	3101      	adds	r1, #1
   d5fc8:	3014      	adds	r0, #20
   d5fca:	f003 fab6 	bl	d953a <_ZNK6String6charAtEj>
   d5fce:	4601      	mov	r1, r0
   d5fd0:	4668      	mov	r0, sp
   d5fd2:	f003 f9c7 	bl	d9364 <_ZN6StringC1Ec>
        returnValue = nextChar.equals(",");
   d5fd6:	4906      	ldr	r1, [pc, #24]	; (d5ff0 <_ZN4Nmea13getNextIsNullEm+0x2c>)
   d5fd8:	4668      	mov	r0, sp
   d5fda:	f003 fa74 	bl	d94c6 <_ZNK6String6equalsEPKc>
   d5fde:	4604      	mov	r4, r0
        String nextChar = String(this->_data.charAt(from + 1));
   d5fe0:	4668      	mov	r0, sp
   d5fe2:	f003 f90f 	bl	d9204 <_ZN6StringD1Ev>
    }
    
    return returnValue;
}
   d5fe6:	1e20      	subs	r0, r4, #0
   d5fe8:	bf18      	it	ne
   d5fea:	2001      	movne	r0, #1
   d5fec:	b004      	add	sp, #16
   d5fee:	bd10      	pop	{r4, pc}
   d5ff0:	000dce4b 	.word	0x000dce4b

000d5ff4 <_ZN4Nmea13getNextUint32EmPm>:

int32_t Nmea::getNextUint32(uint32_t from, uint32_t* value)
{
   d5ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d5ff6:	2300      	movs	r3, #0
   d5ff8:	6013      	str	r3, [r2, #0]
{
   d5ffa:	4606      	mov	r6, r0
   d5ffc:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d5ffe:	f7ff ffc9 	bl	d5f94 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d6002:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d6004:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d6006:	d104      	bne.n	d6012 <_ZN4Nmea13getNextUint32EmPm+0x1e>
    int32_t returnValue = -1;
   d6008:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d600c:	4620      	mov	r0, r4
   d600e:	b004      	add	sp, #16
   d6010:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d6012:	4601      	mov	r1, r0
   d6014:	4630      	mov	r0, r6
   d6016:	f7ff ffd5 	bl	d5fc4 <_ZN4Nmea13getNextIsNullEm>
   d601a:	2800      	cmp	r0, #0
   d601c:	d1f4      	bne.n	d6008 <_ZN4Nmea13getNextUint32EmPm+0x14>
        returnValue = index + 1;
   d601e:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toInt();
   d6020:	4622      	mov	r2, r4
   d6022:	f106 0114 	add.w	r1, r6, #20
   d6026:	4668      	mov	r0, sp
   d6028:	f003 fae2 	bl	d95f0 <_ZNK6String9substringEj>
   d602c:	4668      	mov	r0, sp
   d602e:	f003 fae6 	bl	d95fe <_ZNK6String5toIntEv>
   d6032:	6028      	str	r0, [r5, #0]
   d6034:	4668      	mov	r0, sp
   d6036:	f003 f8e5 	bl	d9204 <_ZN6StringD1Ev>
    return returnValue;
   d603a:	e7e7      	b.n	d600c <_ZN4Nmea13getNextUint32EmPm+0x18>

000d603c <_ZN4Nmea12getNextUint8EmPh>:

int32_t Nmea::getNextUint8(uint32_t from, uint8_t* value)
{
   d603c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d603e:	2300      	movs	r3, #0
   d6040:	7013      	strb	r3, [r2, #0]
{
   d6042:	4606      	mov	r6, r0
   d6044:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d6046:	f7ff ffa5 	bl	d5f94 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d604a:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d604c:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d604e:	d104      	bne.n	d605a <_ZN4Nmea12getNextUint8EmPh+0x1e>
    int32_t returnValue = -1;
   d6050:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
    }
    
    return returnValue;
}
   d6054:	4620      	mov	r0, r4
   d6056:	b004      	add	sp, #16
   d6058:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d605a:	4601      	mov	r1, r0
   d605c:	4630      	mov	r0, r6
   d605e:	f7ff ffb1 	bl	d5fc4 <_ZN4Nmea13getNextIsNullEm>
   d6062:	2800      	cmp	r0, #0
   d6064:	d1f4      	bne.n	d6050 <_ZN4Nmea12getNextUint8EmPh+0x14>
        returnValue = index + 1;
   d6066:	3401      	adds	r4, #1
        *value = (uint8_t)this->_data.substring(index + 1).toInt();
   d6068:	4622      	mov	r2, r4
   d606a:	f106 0114 	add.w	r1, r6, #20
   d606e:	4668      	mov	r0, sp
   d6070:	f003 fabe 	bl	d95f0 <_ZNK6String9substringEj>
   d6074:	4668      	mov	r0, sp
   d6076:	f003 fac2 	bl	d95fe <_ZNK6String5toIntEv>
   d607a:	7028      	strb	r0, [r5, #0]
   d607c:	4668      	mov	r0, sp
   d607e:	f003 f8c1 	bl	d9204 <_ZN6StringD1Ev>
    return returnValue;
   d6082:	e7e7      	b.n	d6054 <_ZN4Nmea12getNextUint8EmPh+0x18>

000d6084 <_ZN4Nmea12getNextFloatEmPf>:

int32_t Nmea::getNextFloat(uint32_t from, float* value)
{
   d6084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int32_t returnValue = -1;
    *value = 0;
   d6086:	2300      	movs	r3, #0
   d6088:	6013      	str	r3, [r2, #0]
{
   d608a:	4606      	mov	r6, r0
   d608c:	4615      	mov	r5, r2

    // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d608e:	f7ff ff81 	bl	d5f94 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d6092:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d6094:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d6096:	d104      	bne.n	d60a2 <_ZN4Nmea12getNextFloatEmPf+0x1e>
    int32_t returnValue = -1;
   d6098:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = this->_data.substring(index + 1).toFloat();
    }
    
    return returnValue;
}
   d609c:	4620      	mov	r0, r4
   d609e:	b004      	add	sp, #16
   d60a0:	bd70      	pop	{r4, r5, r6, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d60a2:	4601      	mov	r1, r0
   d60a4:	4630      	mov	r0, r6
   d60a6:	f7ff ff8d 	bl	d5fc4 <_ZN4Nmea13getNextIsNullEm>
   d60aa:	2800      	cmp	r0, #0
   d60ac:	d1f4      	bne.n	d6098 <_ZN4Nmea12getNextFloatEmPf+0x14>
        returnValue = index + 1;
   d60ae:	3401      	adds	r4, #1
        *value = this->_data.substring(index + 1).toFloat();
   d60b0:	4622      	mov	r2, r4
   d60b2:	f106 0114 	add.w	r1, r6, #20
   d60b6:	4668      	mov	r0, sp
   d60b8:	f003 fa9a 	bl	d95f0 <_ZNK6String9substringEj>
   d60bc:	4668      	mov	r0, sp
   d60be:	f003 faa3 	bl	d9608 <_ZNK6String7toFloatEv>
   d60c2:	4668      	mov	r0, sp
   d60c4:	ed85 0a00 	vstr	s0, [r5]
   d60c8:	f003 f89c 	bl	d9204 <_ZN6StringD1Ev>
    return returnValue;
   d60cc:	e7e6      	b.n	d609c <_ZN4Nmea12getNextFloatEmPf+0x18>
	...

000d60d0 <_ZN4Nmea13getNextStringEmmP6String>:

int32_t Nmea::getNextString(uint32_t from, uint32_t length, String* value)
{
   d60d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d60d4:	4698      	mov	r8, r3
   d60d6:	460c      	mov	r4, r1
   d60d8:	4605      	mov	r5, r0
    int32_t returnValue = -1;
    *value = String("");
   d60da:	4918      	ldr	r1, [pc, #96]	; (d613c <_ZN4Nmea13getNextStringEmmP6String+0x6c>)
   d60dc:	4668      	mov	r0, sp
{
   d60de:	4616      	mov	r6, r2
    *value = String("");
   d60e0:	f003 f8db 	bl	d929a <_ZN6StringC1EPKc>
   d60e4:	4669      	mov	r1, sp
   d60e6:	4640      	mov	r0, r8
   d60e8:	f003 f922 	bl	d9330 <_ZN6StringaSEOS_>
   d60ec:	4668      	mov	r0, sp
   d60ee:	f003 f889 	bl	d9204 <_ZN6StringD1Ev>

     // ***
    // *** Get the position of the next comma.
    // ***
    int32_t index = this->getNextPosition(from);
   d60f2:	4621      	mov	r1, r4
   d60f4:	4628      	mov	r0, r5
   d60f6:	f7ff ff4d 	bl	d5f94 <_ZN4Nmea15getNextPositionEm>

    // ***
    // *** Check if one was found.
    // ***
    if (index != -1 && !this->getNextIsNull(index))
   d60fa:	1c43      	adds	r3, r0, #1
    int32_t index = this->getNextPosition(from);
   d60fc:	4604      	mov	r4, r0
    if (index != -1 && !this->getNextIsNull(index))
   d60fe:	d105      	bne.n	d610c <_ZN4Nmea13getNextStringEmmP6String+0x3c>
    int32_t returnValue = -1;
   d6100:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        returnValue = index + 1;
        *value = String(this->_data.substring(index + 1, index + 1 + length));
    }
    
    return returnValue;
   d6104:	4638      	mov	r0, r7
   d6106:	b004      	add	sp, #16
   d6108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (index != -1 && !this->getNextIsNull(index))
   d610c:	4601      	mov	r1, r0
   d610e:	4628      	mov	r0, r5
   d6110:	f7ff ff58 	bl	d5fc4 <_ZN4Nmea13getNextIsNullEm>
   d6114:	2800      	cmp	r0, #0
   d6116:	d1f3      	bne.n	d6100 <_ZN4Nmea13getNextStringEmmP6String+0x30>
        returnValue = index + 1;
   d6118:	1c67      	adds	r7, r4, #1
        *value = String(this->_data.substring(index + 1, index + 1 + length));
   d611a:	3601      	adds	r6, #1
   d611c:	1933      	adds	r3, r6, r4
   d611e:	463a      	mov	r2, r7
   d6120:	f105 0114 	add.w	r1, r5, #20
   d6124:	4668      	mov	r0, sp
   d6126:	f003 fa43 	bl	d95b0 <_ZNK6String9substringEjj>
   d612a:	4669      	mov	r1, sp
   d612c:	4640      	mov	r0, r8
   d612e:	f003 f8ff 	bl	d9330 <_ZN6StringaSEOS_>
   d6132:	4668      	mov	r0, sp
   d6134:	f003 f866 	bl	d9204 <_ZN6StringD1Ev>
    return returnValue;
   d6138:	e7e4      	b.n	d6104 <_ZN4Nmea13getNextStringEmmP6String+0x34>
   d613a:	bf00      	nop
   d613c:	000ddcf4 	.word	0x000ddcf4

000d6140 <_ZN9NmeaCacheC1Ev>:
// along with Particle.GPS library. If not, 
// see http://www.gnu.org/licenses/.
//
#include "NmeaCache.h"

NmeaCache::NmeaCache()
   d6140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6142:	4f07      	ldr	r7, [pc, #28]	; (d6160 <_ZN9NmeaCacheC1Ev+0x20>)
   d6144:	4604      	mov	r4, r0
   d6146:	4605      	mov	r5, r0
   d6148:	f100 0670 	add.w	r6, r0, #112	; 0x70
   d614c:	4628      	mov	r0, r5
   d614e:	4639      	mov	r1, r7
   d6150:	3510      	adds	r5, #16
   d6152:	f003 f8a2 	bl	d929a <_ZN6StringC1EPKc>
   d6156:	42ae      	cmp	r6, r5
   d6158:	d1f8      	bne.n	d614c <_ZN9NmeaCacheC1Ev+0xc>
{
}
   d615a:	4620      	mov	r0, r4
   d615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d615e:	bf00      	nop
   d6160:	000ddcf4 	.word	0x000ddcf4

000d6164 <_ZN9NmeaCache12msgIdToIndexE6String>:

uint8_t NmeaCache::msgIdToIndex(String messageId)
{
   d6164:	b530      	push	{r4, r5, lr}
   d6166:	b085      	sub	sp, #20
   d6168:	460c      	mov	r4, r1
    uint8_t returnValue = 0;
    
    if (messageId.startsWith(NMEA_MSGID_GGA))
   d616a:	4668      	mov	r0, sp
   d616c:	492e      	ldr	r1, [pc, #184]	; (d6228 <_ZN9NmeaCache12msgIdToIndexE6String+0xc4>)
   d616e:	f003 f894 	bl	d929a <_ZN6StringC1EPKc>
   d6172:	4669      	mov	r1, sp
   d6174:	4620      	mov	r0, r4
   d6176:	f003 f9ce 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d617a:	4605      	mov	r5, r0
   d617c:	4668      	mov	r0, sp
   d617e:	f003 f841 	bl	d9204 <_ZN6StringD1Ev>
   d6182:	2d00      	cmp	r5, #0
   d6184:	d146      	bne.n	d6214 <_ZN9NmeaCache12msgIdToIndexE6String+0xb0>
    {
        returnValue = NMEA_INDEX_GGA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSA))
   d6186:	4929      	ldr	r1, [pc, #164]	; (d622c <_ZN9NmeaCache12msgIdToIndexE6String+0xc8>)
   d6188:	4668      	mov	r0, sp
   d618a:	f003 f886 	bl	d929a <_ZN6StringC1EPKc>
   d618e:	4669      	mov	r1, sp
   d6190:	4620      	mov	r0, r4
   d6192:	f003 f9c0 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d6196:	4605      	mov	r5, r0
   d6198:	4668      	mov	r0, sp
   d619a:	f003 f833 	bl	d9204 <_ZN6StringD1Ev>
   d619e:	2d00      	cmp	r5, #0
   d61a0:	d13a      	bne.n	d6218 <_ZN9NmeaCache12msgIdToIndexE6String+0xb4>
    {
        returnValue = NMEA_INDEX_GSA;
    }
    else if (messageId.startsWith(NMEA_MSGID_GSV))
   d61a2:	4923      	ldr	r1, [pc, #140]	; (d6230 <_ZN9NmeaCache12msgIdToIndexE6String+0xcc>)
   d61a4:	4668      	mov	r0, sp
   d61a6:	f003 f878 	bl	d929a <_ZN6StringC1EPKc>
   d61aa:	4669      	mov	r1, sp
   d61ac:	4620      	mov	r0, r4
   d61ae:	f003 f9b2 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d61b2:	4605      	mov	r5, r0
   d61b4:	4668      	mov	r0, sp
   d61b6:	f003 f825 	bl	d9204 <_ZN6StringD1Ev>
   d61ba:	bb7d      	cbnz	r5, d621c <_ZN9NmeaCache12msgIdToIndexE6String+0xb8>
    {
        returnValue = NMEA_INDEX_GSV;
    }
    else if (messageId.startsWith(NMEA_MSGID_RMC))
   d61bc:	491d      	ldr	r1, [pc, #116]	; (d6234 <_ZN9NmeaCache12msgIdToIndexE6String+0xd0>)
   d61be:	4668      	mov	r0, sp
   d61c0:	f003 f86b 	bl	d929a <_ZN6StringC1EPKc>
   d61c4:	4669      	mov	r1, sp
   d61c6:	4620      	mov	r0, r4
   d61c8:	f003 f9a5 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d61cc:	4605      	mov	r5, r0
   d61ce:	4668      	mov	r0, sp
   d61d0:	f003 f818 	bl	d9204 <_ZN6StringD1Ev>
   d61d4:	bb25      	cbnz	r5, d6220 <_ZN9NmeaCache12msgIdToIndexE6String+0xbc>
    {
        returnValue = NMEA_INDEX_RMC;
    }
    else if (messageId.startsWith(NMEA_MSGID_VTG))
   d61d6:	4918      	ldr	r1, [pc, #96]	; (d6238 <_ZN9NmeaCache12msgIdToIndexE6String+0xd4>)
   d61d8:	4668      	mov	r0, sp
   d61da:	f003 f85e 	bl	d929a <_ZN6StringC1EPKc>
   d61de:	4669      	mov	r1, sp
   d61e0:	4620      	mov	r0, r4
   d61e2:	f003 f998 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d61e6:	4605      	mov	r5, r0
   d61e8:	4668      	mov	r0, sp
   d61ea:	f003 f80b 	bl	d9204 <_ZN6StringD1Ev>
   d61ee:	b9cd      	cbnz	r5, d6224 <_ZN9NmeaCache12msgIdToIndexE6String+0xc0>
    {
        returnValue = NMEA_INDEX_VTG;
    }
    else if (messageId.startsWith(NMEA_MSGID_PGT))
   d61f0:	4912      	ldr	r1, [pc, #72]	; (d623c <_ZN9NmeaCache12msgIdToIndexE6String+0xd8>)
   d61f2:	4668      	mov	r0, sp
   d61f4:	f003 f851 	bl	d929a <_ZN6StringC1EPKc>
   d61f8:	4669      	mov	r1, sp
   d61fa:	4620      	mov	r0, r4
   d61fc:	f003 f98b 	bl	d9516 <_ZNK6String10startsWithERKS_>
   d6200:	4604      	mov	r4, r0
   d6202:	4668      	mov	r0, sp
   d6204:	f002 fffe 	bl	d9204 <_ZN6StringD1Ev>
   d6208:	2c00      	cmp	r4, #0
    {
        returnValue = NMEA_INDEX_PGT;
   d620a:	bf18      	it	ne
   d620c:	2406      	movne	r4, #6
    }
    
    return returnValue;
   d620e:	4620      	mov	r0, r4
   d6210:	b005      	add	sp, #20
   d6212:	bd30      	pop	{r4, r5, pc}
        returnValue = NMEA_INDEX_GGA;
   d6214:	2401      	movs	r4, #1
   d6216:	e7fa      	b.n	d620e <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSA;
   d6218:	2402      	movs	r4, #2
   d621a:	e7f8      	b.n	d620e <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_GSV;
   d621c:	2403      	movs	r4, #3
   d621e:	e7f6      	b.n	d620e <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_RMC;
   d6220:	2404      	movs	r4, #4
   d6222:	e7f4      	b.n	d620e <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
        returnValue = NMEA_INDEX_VTG;
   d6224:	2405      	movs	r4, #5
   d6226:	e7f2      	b.n	d620e <_ZN9NmeaCache12msgIdToIndexE6String+0xaa>
   d6228:	000dda4e 	.word	0x000dda4e
   d622c:	000dda55 	.word	0x000dda55
   d6230:	000dda5c 	.word	0x000dda5c
   d6234:	000dda63 	.word	0x000dda63
   d6238:	000dda6a 	.word	0x000dda6a
   d623c:	000dda71 	.word	0x000dda71

000d6240 <_ZN5Pgtop5parseEv>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
{
}

bool Pgtop::parse()
{
   d6240:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d6242:	1d06      	adds	r6, r0, #4
{
   d6244:	4604      	mov	r4, r0
    if (this->isValid())
   d6246:	4630      	mov	r0, r6
   d6248:	f7ff fe92 	bl	d5f70 <_ZN4Nmea7isValidEv>
   d624c:	4605      	mov	r5, r0
   d624e:	b158      	cbz	r0, d6268 <_ZN5Pgtop5parseEv+0x28>
    {
        // ***
        // *** Get the first field value (Command ID).
        // ***
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d6250:	f104 0228 	add.w	r2, r4, #40	; 0x28
   d6254:	2100      	movs	r1, #0
   d6256:	4630      	mov	r0, r6
   d6258:	f7ff fecc 	bl	d5ff4 <_ZN4Nmea13getNextUint32EmPm>
        
        // ***
        // *** Get the next field value (Reference).
        // ***
        index = getNextUint32(index, &this->reference);
   d625c:	f104 022c 	add.w	r2, r4, #44	; 0x2c
        uint32_t index = this->getNextUint32(0, &this->commandId);
   d6260:	4601      	mov	r1, r0
        index = getNextUint32(index, &this->reference);
   d6262:	4630      	mov	r0, r6
   d6264:	f7ff fec6 	bl	d5ff4 <_ZN4Nmea13getNextUint32EmPm>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d6268:	4628      	mov	r0, r5
   d626a:	bd70      	pop	{r4, r5, r6, pc}

000d626c <_ZN3Gga5parseEv>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
{
}

bool Gga::parse()
{
   d626c:	b570      	push	{r4, r5, r6, lr}
    bool returnValue = false;
    
    if (this->isValid())
   d626e:	1d05      	adds	r5, r0, #4
{
   d6270:	4604      	mov	r4, r0
    if (this->isValid())
   d6272:	4628      	mov	r0, r5
   d6274:	f7ff fe7c 	bl	d5f70 <_ZN4Nmea7isValidEv>
   d6278:	4606      	mov	r6, r0
   d627a:	2800      	cmp	r0, #0
   d627c:	d055      	beq.n	d632a <_ZN3Gga5parseEv+0xbe>
    {
        // ***
        // *** Get the first field value (UTC Time).
        // ***
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d627e:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d6282:	220a      	movs	r2, #10
   d6284:	2100      	movs	r1, #0
   d6286:	4628      	mov	r0, r5
   d6288:	f7ff ff22 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Latitude).
        // ***
        index = this->getNextString(index, 9,  &this->latitude);
   d628c:	f104 0338 	add.w	r3, r4, #56	; 0x38
        int32_t index = this->getNextString(0, 10,  &this->utcTime);
   d6290:	4601      	mov	r1, r0
        index = this->getNextString(index, 9,  &this->latitude);
   d6292:	2209      	movs	r2, #9
   d6294:	4628      	mov	r0, r5
   d6296:	f7ff ff1b 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (North/South Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d629a:	f104 0348 	add.w	r3, r4, #72	; 0x48
        index = this->getNextString(index, 9,  &this->latitude);
   d629e:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d62a0:	2201      	movs	r2, #1
   d62a2:	4628      	mov	r0, r5
   d62a4:	f7ff ff14 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Longitude).
        // ***
        index = this->getNextString(index, 10,  &this->longitude);
   d62a8:	f104 0358 	add.w	r3, r4, #88	; 0x58
        index = this->getNextString(index, 1,  &this->northSouthIndicator);
   d62ac:	4601      	mov	r1, r0
        index = this->getNextString(index, 10,  &this->longitude);
   d62ae:	220a      	movs	r2, #10
   d62b0:	4628      	mov	r0, r5
   d62b2:	f7ff ff0d 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d62b6:	f104 0368 	add.w	r3, r4, #104	; 0x68
        index = this->getNextString(index, 10,  &this->longitude);
   d62ba:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d62bc:	2201      	movs	r2, #1
   d62be:	4628      	mov	r0, r5
   d62c0:	f7ff ff06 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Position Fix Indicator).
        // ***
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d62c4:	f104 0278 	add.w	r2, r4, #120	; 0x78
        index = this->getNextString(index, 1,  &this->eastWestIndicator);
   d62c8:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d62ca:	4628      	mov	r0, r5
   d62cc:	f7ff feb6 	bl	d603c <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextUint8(index, &this->satellitesUsed);
   d62d0:	f104 0279 	add.w	r2, r4, #121	; 0x79
        index = this->getNextUint8(index, &this->positionFixIndicator);
   d62d4:	4601      	mov	r1, r0
        index = this->getNextUint8(index, &this->satellitesUsed);
   d62d6:	4628      	mov	r0, r5
   d62d8:	f7ff feb0 	bl	d603c <_ZN4Nmea12getNextUint8EmPh>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->hdop);
   d62dc:	f104 027c 	add.w	r2, r4, #124	; 0x7c
        index = this->getNextUint8(index, &this->satellitesUsed);
   d62e0:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->hdop);
   d62e2:	4628      	mov	r0, r5
   d62e4:	f7ff fece 	bl	d6084 <_ZN4Nmea12getNextFloatEmPf>

        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->altitude);
   d62e8:	f104 0280 	add.w	r2, r4, #128	; 0x80
        index = this->getNextFloat(index, &this->hdop);
   d62ec:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->altitude);
   d62ee:	4628      	mov	r0, r5
   d62f0:	f7ff fec8 	bl	d6084 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d62f4:	f104 0384 	add.w	r3, r4, #132	; 0x84
        index = this->getNextFloat(index, &this->altitude);
   d62f8:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d62fa:	2201      	movs	r2, #1
   d62fc:	4628      	mov	r0, r5
   d62fe:	f7ff fee7 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (Satellites Used).
        // ***
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d6302:	f104 0294 	add.w	r2, r4, #148	; 0x94
        index = this->getNextString(index, 1,  &this->altitudeUnit);
   d6306:	4601      	mov	r1, r0
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d6308:	4628      	mov	r0, r5
   d630a:	f7ff febb 	bl	d6084 <_ZN4Nmea12getNextFloatEmPf>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d630e:	f104 0398 	add.w	r3, r4, #152	; 0x98
        index = this->getNextFloat(index, &this->geoidalSeparation);
   d6312:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d6314:	2201      	movs	r2, #1
   d6316:	4628      	mov	r0, r5
   d6318:	f7ff feda 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        
        // ***
        // *** Get the next field value (East/West Indicator).
        // ***
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d631c:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
        index = this->getNextString(index, 1,  &this->geoidalSeparationUnit);
   d6320:	4601      	mov	r1, r0
        index = this->getNextString(index, 1,  &this->ageOfDiffCorr);
   d6322:	2201      	movs	r2, #1
   d6324:	4628      	mov	r0, r5
   d6326:	f7ff fed3 	bl	d60d0 <_ZN4Nmea13getNextStringEmmP6String>
        // ***
        returnValue = true;
    }
    
    return returnValue;
}
   d632a:	4630      	mov	r0, r6
   d632c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6330 <_ZN5PgtopC1E9NmeaCache>:
Pgtop::Pgtop(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_PGT, NMEA_INDEX_PGT, nmeaCache)
   d6330:	b530      	push	{r4, r5, lr}
   d6332:	b0a1      	sub	sp, #132	; 0x84
   d6334:	4604      	mov	r4, r0
   d6336:	460d      	mov	r5, r1
   d6338:	4668      	mov	r0, sp
   d633a:	490c      	ldr	r1, [pc, #48]	; (d636c <_ZN5PgtopC1E9NmeaCache+0x3c>)
   d633c:	f002 ffad 	bl	d929a <_ZN6StringC1EPKc>
   d6340:	4629      	mov	r1, r5
   d6342:	a804      	add	r0, sp, #16
   d6344:	f7fd ffd1 	bl	d42ea <_ZN9NmeaCacheC1ERKS_>
   d6348:	ab04      	add	r3, sp, #16
   d634a:	2206      	movs	r2, #6
   d634c:	4669      	mov	r1, sp
   d634e:	1d20      	adds	r0, r4, #4
   d6350:	f7ff fd88 	bl	d5e64 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d6354:	a804      	add	r0, sp, #16
   d6356:	f7fd ffbb 	bl	d42d0 <_ZN9NmeaCacheD1Ev>
   d635a:	4668      	mov	r0, sp
   d635c:	f002 ff52 	bl	d9204 <_ZN6StringD1Ev>
   d6360:	4b03      	ldr	r3, [pc, #12]	; (d6370 <_ZN5PgtopC1E9NmeaCache+0x40>)
   d6362:	6023      	str	r3, [r4, #0]
}
   d6364:	4620      	mov	r0, r4
   d6366:	b021      	add	sp, #132	; 0x84
   d6368:	bd30      	pop	{r4, r5, pc}
   d636a:	bf00      	nop
   d636c:	000dda71 	.word	0x000dda71
   d6370:	000dda8c 	.word	0x000dda8c

000d6374 <_ZN3GgaC1E9NmeaCache>:
Gga::Gga(NmeaCache nmeaCache) : Nmea(NMEA_MSGID_GGA, NMEA_INDEX_GGA, nmeaCache)
   d6374:	b530      	push	{r4, r5, lr}
   d6376:	b0a1      	sub	sp, #132	; 0x84
   d6378:	4604      	mov	r4, r0
   d637a:	460d      	mov	r5, r1
   d637c:	4668      	mov	r0, sp
   d637e:	4920      	ldr	r1, [pc, #128]	; (d6400 <_ZN3GgaC1E9NmeaCache+0x8c>)
   d6380:	f002 ff8b 	bl	d929a <_ZN6StringC1EPKc>
   d6384:	4629      	mov	r1, r5
   d6386:	a804      	add	r0, sp, #16
   d6388:	f7fd ffaf 	bl	d42ea <_ZN9NmeaCacheC1ERKS_>
   d638c:	2201      	movs	r2, #1
   d638e:	ab04      	add	r3, sp, #16
   d6390:	4669      	mov	r1, sp
   d6392:	1d20      	adds	r0, r4, #4
   d6394:	f7ff fd66 	bl	d5e64 <_ZN4NmeaC1E6Stringh9NmeaCache>
   d6398:	a804      	add	r0, sp, #16
   d639a:	f7fd ff99 	bl	d42d0 <_ZN9NmeaCacheD1Ev>
   d639e:	4668      	mov	r0, sp
   d63a0:	4d18      	ldr	r5, [pc, #96]	; (d6404 <_ZN3GgaC1E9NmeaCache+0x90>)
   d63a2:	f002 ff2f 	bl	d9204 <_ZN6StringD1Ev>
   d63a6:	4620      	mov	r0, r4
   d63a8:	4b17      	ldr	r3, [pc, #92]	; (d6408 <_ZN3GgaC1E9NmeaCache+0x94>)
   d63aa:	f840 3b28 	str.w	r3, [r0], #40
   d63ae:	4629      	mov	r1, r5
   d63b0:	f002 ff73 	bl	d929a <_ZN6StringC1EPKc>
   d63b4:	4629      	mov	r1, r5
   d63b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d63ba:	f002 ff6e 	bl	d929a <_ZN6StringC1EPKc>
   d63be:	4629      	mov	r1, r5
   d63c0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d63c4:	f002 ff69 	bl	d929a <_ZN6StringC1EPKc>
   d63c8:	4629      	mov	r1, r5
   d63ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d63ce:	f002 ff64 	bl	d929a <_ZN6StringC1EPKc>
   d63d2:	4629      	mov	r1, r5
   d63d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d63d8:	f002 ff5f 	bl	d929a <_ZN6StringC1EPKc>
   d63dc:	4629      	mov	r1, r5
   d63de:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d63e2:	f002 ff5a 	bl	d929a <_ZN6StringC1EPKc>
   d63e6:	4629      	mov	r1, r5
   d63e8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d63ec:	f002 ff55 	bl	d929a <_ZN6StringC1EPKc>
   d63f0:	4629      	mov	r1, r5
   d63f2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d63f6:	f002 ff50 	bl	d929a <_ZN6StringC1EPKc>
}
   d63fa:	4620      	mov	r0, r4
   d63fc:	b021      	add	sp, #132	; 0x84
   d63fe:	bd30      	pop	{r4, r5, pc}
   d6400:	000dda4e 	.word	0x000dda4e
   d6404:	000ddcf4 	.word	0x000ddcf4
   d6408:	000dda80 	.word	0x000dda80

000d640c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d640c:	b510      	push	{r4, lr}
   d640e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6410:	3024      	adds	r0, #36	; 0x24
   d6412:	f000 fe77 	bl	d7104 <_ZN8FatCache4syncEv>
   d6416:	b128      	cbz	r0, d6424 <_ZN9FatVolume9cacheSyncEv+0x18>
   d6418:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d641c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d6420:	f000 be70 	b.w	d7104 <_ZN8FatCache4syncEv>
  }
   d6424:	bd10      	pop	{r4, pc}

000d6426 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d6426:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6428:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d642a:	f043 0304 	orr.w	r3, r3, #4
   d642e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d6430:	f100 0210 	add.w	r2, r0, #16
   d6434:	6880      	ldr	r0, [r0, #8]
   d6436:	f000 bf1b 	b.w	d7270 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d643c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d6440:	7801      	ldrb	r1, [r0, #0]
   d6442:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d6446:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d6448:	d003      	beq.n	d6452 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d644a:	2600      	movs	r6, #0
}
   d644c:	4630      	mov	r0, r6
   d644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d6452:	6942      	ldr	r2, [r0, #20]
   d6454:	4b17      	ldr	r3, [pc, #92]	; (d64b4 <_ZN7FatFile13addDirClusterEv+0x78>)
   d6456:	429a      	cmp	r2, r3
   d6458:	d2f7      	bcs.n	d644a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d645a:	f7ff ffe4 	bl	d6426 <_ZN7FatFile10addClusterEv>
   d645e:	4606      	mov	r6, r0
   d6460:	2800      	cmp	r0, #0
   d6462:	d0f2      	beq.n	d644a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d6464:	6921      	ldr	r1, [r4, #16]
   d6466:	68a0      	ldr	r0, [r4, #8]
   d6468:	f000 fe97 	bl	d719a <_ZNK9FatVolume17clusterFirstBlockEm>
   d646c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d646e:	68a0      	ldr	r0, [r4, #8]
   d6470:	2205      	movs	r2, #5
   d6472:	4639      	mov	r1, r7
   d6474:	3024      	adds	r0, #36	; 0x24
   d6476:	f000 fe6d 	bl	d7154 <_ZN8FatCache4readEmh>
  if (!pc) {
   d647a:	4680      	mov	r8, r0
   d647c:	2800      	cmp	r0, #0
   d647e:	d0e4      	beq.n	d644a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d6480:	4629      	mov	r1, r5
   d6482:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6486:	f004 fc2e 	bl	dace6 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d648a:	2501      	movs	r5, #1
   d648c:	68a3      	ldr	r3, [r4, #8]
   d648e:	791a      	ldrb	r2, [r3, #4]
   d6490:	42aa      	cmp	r2, r5
   d6492:	d909      	bls.n	d64a8 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d6494:	6818      	ldr	r0, [r3, #0]
   d6496:	4642      	mov	r2, r8
   d6498:	19e9      	adds	r1, r5, r7
   d649a:	f001 f9c4 	bl	d7826 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d649e:	2800      	cmp	r0, #0
   d64a0:	d0d3      	beq.n	d644a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d64a2:	3501      	adds	r5, #1
   d64a4:	b2ed      	uxtb	r5, r5
   d64a6:	e7f1      	b.n	d648c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d64a8:	6963      	ldr	r3, [r4, #20]
   d64aa:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d64ae:	6163      	str	r3, [r4, #20]
  return true;
   d64b0:	e7cc      	b.n	d644c <_ZN7FatFile13addDirClusterEv+0x10>
   d64b2:	bf00      	nop
   d64b4:	001ffe00 	.word	0x001ffe00

000d64b8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d64b8:	b510      	push	{r4, lr}
   d64ba:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d64bc:	6880      	ldr	r0, [r0, #8]
   d64be:	460a      	mov	r2, r1
   d64c0:	3024      	adds	r0, #36	; 0x24
   d64c2:	69a1      	ldr	r1, [r4, #24]
   d64c4:	f000 fe46 	bl	d7154 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d64c8:	b120      	cbz	r0, d64d4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d64ca:	88a3      	ldrh	r3, [r4, #4]
   d64cc:	f003 030f 	and.w	r3, r3, #15
   d64d0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d64d4:	bd10      	pop	{r4, pc}

000d64d6 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d64d6:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d64d8:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d64da:	4605      	mov	r5, r0
   d64dc:	460e      	mov	r6, r1
  if (isOpen()) {
   d64de:	b94c      	cbnz	r4, d64f4 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d64e0:	2224      	movs	r2, #36	; 0x24
   d64e2:	4621      	mov	r1, r4
   d64e4:	f004 fbff 	bl	dace6 <memset>

  m_vol = vol;
   d64e8:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d64ea:	79f3      	ldrb	r3, [r6, #7]
   d64ec:	2b10      	cmp	r3, #16
   d64ee:	d003      	beq.n	d64f8 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d64f0:	2b20      	cmp	r3, #32
   d64f2:	d007      	beq.n	d6504 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d64f4:	2000      	movs	r0, #0
   d64f6:	e004      	b.n	d6502 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d64f8:	2320      	movs	r3, #32
  m_flags = F_READ;
   d64fa:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d64fc:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d64fe:	70ac      	strb	r4, [r5, #2]
  return true;
   d6500:	4620      	mov	r0, r4
}
   d6502:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d6504:	2340      	movs	r3, #64	; 0x40
   d6506:	e7f8      	b.n	d64fa <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d6508 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d6508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d650c:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d650e:	4604      	mov	r4, r0
   d6510:	4688      	mov	r8, r1
   d6512:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d6514:	2b00      	cmp	r3, #0
   d6516:	d05d      	beq.n	d65d4 <_ZN7FatFile4readEPvj+0xcc>
   d6518:	7882      	ldrb	r2, [r0, #2]
   d651a:	07d1      	lsls	r1, r2, #31
   d651c:	d55a      	bpl.n	d65d4 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d651e:	071a      	lsls	r2, r3, #28
   d6520:	d52d      	bpl.n	d657e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d6522:	69c3      	ldr	r3, [r0, #28]
   d6524:	6942      	ldr	r2, [r0, #20]
   d6526:	1a9b      	subs	r3, r3, r2
   d6528:	429d      	cmp	r5, r3
   d652a:	bf28      	it	cs
   d652c:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d652e:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d6530:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6534:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d6538:	2e00      	cmp	r6, #0
   d653a:	f000 808f 	beq.w	d665c <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d653e:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d6540:	6963      	ldr	r3, [r4, #20]
   d6542:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d6544:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d6546:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d654a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d654e:	d51f      	bpl.n	d6590 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d6550:	6a00      	ldr	r0, [r0, #32]
   d6552:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d6554:	68a0      	ldr	r0, [r4, #8]
   d6556:	f1ba 0f00 	cmp.w	sl, #0
   d655a:	d142      	bne.n	d65e2 <_ZN7FatFile4readEPvj+0xda>
   d655c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6560:	d33f      	bcc.n	d65e2 <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d6562:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6564:	4299      	cmp	r1, r3
   d6566:	d03c      	beq.n	d65e2 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d6568:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d656c:	d252      	bcs.n	d6614 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d656e:	6800      	ldr	r0, [r0, #0]
   d6570:	4642      	mov	r2, r8
   d6572:	f001 f8cf 	bl	d7714 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d6576:	b368      	cbz	r0, d65d4 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d6578:	f44f 7700 	mov.w	r7, #512	; 0x200
   d657c:	e044      	b.n	d6608 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d657e:	069b      	lsls	r3, r3, #26
   d6580:	d5d5      	bpl.n	d652e <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6582:	6883      	ldr	r3, [r0, #8]
   d6584:	891a      	ldrh	r2, [r3, #8]
   d6586:	6943      	ldr	r3, [r0, #20]
   d6588:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d658c:	b29b      	uxth	r3, r3
   d658e:	e7cb      	b.n	d6528 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6590:	f890 9005 	ldrb.w	r9, [r0, #5]
   d6594:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d6598:	f1ba 0f00 	cmp.w	sl, #0
   d659c:	d108      	bne.n	d65b0 <_ZN7FatFile4readEPvj+0xa8>
   d659e:	f1b9 0f00 	cmp.w	r9, #0
   d65a2:	d105      	bne.n	d65b0 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d65a4:	b95b      	cbnz	r3, d65be <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d65a6:	0651      	lsls	r1, r2, #25
   d65a8:	bf4c      	ite	mi
   d65aa:	6a03      	ldrmi	r3, [r0, #32]
   d65ac:	6a23      	ldrpl	r3, [r4, #32]
   d65ae:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d65b0:	6921      	ldr	r1, [r4, #16]
   d65b2:	68a0      	ldr	r0, [r4, #8]
   d65b4:	f000 fdf1 	bl	d719a <_ZNK9FatVolume17clusterFirstBlockEm>
   d65b8:	eb09 0100 	add.w	r1, r9, r0
   d65bc:	e7ca      	b.n	d6554 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d65be:	6921      	ldr	r1, [r4, #16]
   d65c0:	465a      	mov	r2, fp
   d65c2:	f000 fdf0 	bl	d71a6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d65c6:	2800      	cmp	r0, #0
   d65c8:	db04      	blt.n	d65d4 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d65ca:	d1f1      	bne.n	d65b0 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d65cc:	7823      	ldrb	r3, [r4, #0]
   d65ce:	f013 0f70 	tst.w	r3, #112	; 0x70
   d65d2:	d143      	bne.n	d665c <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d65d4:	7863      	ldrb	r3, [r4, #1]
   d65d6:	f043 0302 	orr.w	r3, r3, #2
   d65da:	7063      	strb	r3, [r4, #1]
  return -1;
   d65dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d65e0:	e03d      	b.n	d665e <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d65e2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d65e6:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d65e8:	f04f 0200 	mov.w	r2, #0
   d65ec:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d65f0:	bf28      	it	cs
   d65f2:	4637      	movcs	r7, r6
   d65f4:	f000 fdae 	bl	d7154 <_ZN8FatCache4readEmh>
      if (!pc) {
   d65f8:	2800      	cmp	r0, #0
   d65fa:	d0eb      	beq.n	d65d4 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d65fc:	eb00 010a 	add.w	r1, r0, sl
   d6600:	463a      	mov	r2, r7
   d6602:	4640      	mov	r0, r8
   d6604:	f004 fb61 	bl	dacca <memcpy>
    m_curPosition += n;
   d6608:	6963      	ldr	r3, [r4, #20]
   d660a:	443b      	add	r3, r7
    dst += n;
   d660c:	44b8      	add	r8, r7
    m_curPosition += n;
   d660e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d6610:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d6612:	e791      	b.n	d6538 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d6614:	7822      	ldrb	r2, [r4, #0]
   d6616:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d6618:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d661c:	d406      	bmi.n	d662c <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d661e:	7902      	ldrb	r2, [r0, #4]
   d6620:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d6624:	b2d2      	uxtb	r2, r2
   d6626:	4592      	cmp	sl, r2
   d6628:	bf28      	it	cs
   d662a:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d662c:	4299      	cmp	r1, r3
      n = 512*nb;
   d662e:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6632:	d208      	bcs.n	d6646 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d6634:	68a0      	ldr	r0, [r4, #8]
   d6636:	4653      	mov	r3, sl
   d6638:	6800      	ldr	r0, [r0, #0]
   d663a:	4642      	mov	r2, r8
   d663c:	f001 f8b2 	bl	d77a4 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d6640:	2800      	cmp	r0, #0
   d6642:	d1e1      	bne.n	d6608 <_ZN7FatFile4readEPvj+0x100>
   d6644:	e7c6      	b.n	d65d4 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6646:	4453      	add	r3, sl
   d6648:	428b      	cmp	r3, r1
   d664a:	d9f3      	bls.n	d6634 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d664c:	3024      	adds	r0, #36	; 0x24
   d664e:	9101      	str	r1, [sp, #4]
   d6650:	f000 fd58 	bl	d7104 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d6654:	9901      	ldr	r1, [sp, #4]
   d6656:	2800      	cmp	r0, #0
   d6658:	d1ec      	bne.n	d6634 <_ZN7FatFile4readEPvj+0x12c>
   d665a:	e7bb      	b.n	d65d4 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d665c:	1ba8      	subs	r0, r5, r6
}
   d665e:	b003      	add	sp, #12
   d6660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6664 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d6664:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d6666:	2201      	movs	r2, #1
   d6668:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d666c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d6670:	4604      	mov	r4, r0
   d6672:	f7ff ff49 	bl	d6508 <_ZN7FatFile4readEPvj>
   d6676:	2801      	cmp	r0, #1
   d6678:	bf0a      	itet	eq
   d667a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d667e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d6682:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d6686:	b002      	add	sp, #8
   d6688:	bd70      	pop	{r4, r5, r6, pc}

000d668a <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d668a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d668c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d668e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6692:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6694:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d6698:	d000      	beq.n	d669c <_ZN7FatFile12readDirCacheEb+0x12>
   d669a:	b999      	cbnz	r1, d66c4 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d669c:	2201      	movs	r2, #1
   d669e:	f10d 0107 	add.w	r1, sp, #7
   d66a2:	4620      	mov	r0, r4
   d66a4:	f7ff ff30 	bl	d6508 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d66a8:	b240      	sxtb	r0, r0
   d66aa:	2801      	cmp	r0, #1
   d66ac:	d002      	beq.n	d66b4 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d66ae:	2000      	movs	r0, #0
}
   d66b0:	b003      	add	sp, #12
   d66b2:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d66b4:	6963      	ldr	r3, [r4, #20]
   d66b6:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d66b8:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d66ba:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d66bc:	3030      	adds	r0, #48	; 0x30
   d66be:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d66c2:	e7f5      	b.n	d66b0 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d66c4:	3320      	adds	r3, #32
   d66c6:	e7f7      	b.n	d66b8 <_ZN7FatFile12readDirCacheEb+0x2e>

000d66c8 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d66c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d66cc:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d66ce:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d66d0:	4604      	mov	r4, r0
   d66d2:	460d      	mov	r5, r1
  if (!isOpen()) {
   d66d4:	b162      	cbz	r2, d66f0 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d66d6:	6940      	ldr	r0, [r0, #20]
   d66d8:	4288      	cmp	r0, r1
   d66da:	d002      	beq.n	d66e2 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d66dc:	b919      	cbnz	r1, d66e6 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d66de:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d66e0:	6165      	str	r5, [r4, #20]
    return true;
   d66e2:	2001      	movs	r0, #1
   d66e4:	e006      	b.n	d66f4 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d66e6:	0716      	lsls	r6, r2, #28
   d66e8:	d506      	bpl.n	d66f8 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d66ea:	69e3      	ldr	r3, [r4, #28]
   d66ec:	428b      	cmp	r3, r1
   d66ee:	d20b      	bcs.n	d6708 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d66f0:	6127      	str	r7, [r4, #16]
  return false;
   d66f2:	2000      	movs	r0, #0
}
   d66f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d66f8:	0691      	lsls	r1, r2, #26
   d66fa:	d505      	bpl.n	d6708 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d66fc:	68a3      	ldr	r3, [r4, #8]
   d66fe:	891b      	ldrh	r3, [r3, #8]
   d6700:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d6704:	d9ec      	bls.n	d66e0 <_ZN7FatFile7seekSetEm+0x18>
   d6706:	e7f3      	b.n	d66f0 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6708:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d670c:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d6710:	1e43      	subs	r3, r0, #1
   d6712:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d6716:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d6718:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d671a:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d671c:	42b3      	cmp	r3, r6
   d671e:	d800      	bhi.n	d6722 <_ZN7FatFile7seekSetEm+0x5a>
   d6720:	b998      	cbnz	r0, d674a <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6722:	0653      	lsls	r3, r2, #25
   d6724:	bf4c      	ite	mi
   d6726:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d672a:	6a23      	ldrpl	r3, [r4, #32]
   d672c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d672e:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d6732:	2e00      	cmp	r6, #0
   d6734:	d0d4      	beq.n	d66e0 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6736:	6921      	ldr	r1, [r4, #16]
   d6738:	68a0      	ldr	r0, [r4, #8]
   d673a:	4642      	mov	r2, r8
   d673c:	f000 fd33 	bl	d71a6 <_ZN9FatVolume6fatGetEmPm>
   d6740:	2800      	cmp	r0, #0
   d6742:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d6746:	dcf4      	bgt.n	d6732 <_ZN7FatFile7seekSetEm+0x6a>
   d6748:	e7d2      	b.n	d66f0 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d674a:	1af6      	subs	r6, r6, r3
   d674c:	e7ef      	b.n	d672e <_ZN7FatFile7seekSetEm+0x66>

000d674e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d674e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6750:	460f      	mov	r7, r1
   d6752:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d6754:	2100      	movs	r1, #0
   d6756:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d6758:	4604      	mov	r4, r0
   d675a:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d675c:	f004 fac3 	bl	dace6 <memset>
  m_vol = dirFile->m_vol;
   d6760:	68b8      	ldr	r0, [r7, #8]
   d6762:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d6764:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6766:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d676a:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d676e:	6a3b      	ldr	r3, [r7, #32]
   d6770:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6772:	0171      	lsls	r1, r6, #5
   d6774:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6778:	7af3      	ldrb	r3, [r6, #11]
   d677a:	071f      	lsls	r7, r3, #28
   d677c:	d446      	bmi.n	d680c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d677e:	1843      	adds	r3, r0, r1
   d6780:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6784:	f003 0317 	and.w	r3, r3, #23
   d6788:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d678a:	7af2      	ldrb	r2, [r6, #11]
   d678c:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d6790:	bf04      	itt	eq
   d6792:	f043 0308 	orreq.w	r3, r3, #8
   d6796:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d6798:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d679c:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d679e:	f005 0303 	and.w	r3, r5, #3
   d67a2:	2b01      	cmp	r3, #1
   d67a4:	d02c      	beq.n	d6800 <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d67a6:	2b02      	cmp	r3, #2
   d67a8:	d028      	beq.n	d67fc <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d67aa:	bb7b      	cbnz	r3, d680c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d67ac:	056a      	lsls	r2, r5, #21
   d67ae:	d42d      	bmi.n	d680c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d67b0:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d67b2:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d67b4:	78a2      	ldrb	r2, [r4, #2]
   d67b6:	0793      	lsls	r3, r2, #30
   d67b8:	d504      	bpl.n	d67c4 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d67ba:	7823      	ldrb	r3, [r4, #0]
   d67bc:	06df      	lsls	r7, r3, #27
   d67be:	d425      	bmi.n	d680c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d67c0:	07de      	lsls	r6, r3, #31
   d67c2:	d423      	bmi.n	d680c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d67c4:	11ab      	asrs	r3, r5, #6
   d67c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d67ca:	f005 0608 	and.w	r6, r5, #8
   d67ce:	4333      	orrs	r3, r6
   d67d0:	4313      	orrs	r3, r2
   d67d2:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d67d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d67d6:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d67d8:	1843      	adds	r3, r0, r1
   d67da:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d67de:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d67e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d67e6:	056a      	lsls	r2, r5, #21
   d67e8:	d513      	bpl.n	d6812 <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d67ea:	b959      	cbnz	r1, d6804 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d67ec:	78a3      	ldrb	r3, [r4, #2]
   d67ee:	f043 0304 	orr.w	r3, r3, #4
   d67f2:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d67f4:	046b      	lsls	r3, r5, #17
   d67f6:	d410      	bmi.n	d681a <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d67f8:	2001      	movs	r0, #1
}
   d67fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d67fc:	2303      	movs	r3, #3
   d67fe:	e7d8      	b.n	d67b2 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d6800:	2302      	movs	r3, #2
   d6802:	e7d6      	b.n	d67b2 <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d6804:	f000 fd6f 	bl	d72e6 <_ZN9FatVolume9freeChainEm>
   d6808:	2800      	cmp	r0, #0
   d680a:	d1ef      	bne.n	d67ec <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d680c:	2000      	movs	r0, #0
   d680e:	7020      	strb	r0, [r4, #0]
  return false;
   d6810:	e7f3      	b.n	d67fa <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d6812:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d6814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6816:	61e3      	str	r3, [r4, #28]
   d6818:	e7ec      	b.n	d67f4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d681a:	69e1      	ldr	r1, [r4, #28]
   d681c:	4620      	mov	r0, r4
   d681e:	f7ff ff53 	bl	d66c8 <_ZN7FatFile7seekSetEm>
   d6822:	2800      	cmp	r0, #0
   d6824:	d1e8      	bne.n	d67f8 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d6826:	e7f1      	b.n	d680c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d6828 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6828:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d682a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d682c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d682e:	b90b      	cbnz	r3, d6834 <_ZN7FatFile4syncEv+0xc>
    return true;
   d6830:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d6832:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6834:	7883      	ldrb	r3, [r0, #2]
   d6836:	075a      	lsls	r2, r3, #29
   d6838:	d523      	bpl.n	d6882 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d683a:	2101      	movs	r1, #1
   d683c:	f7ff fe3c 	bl	d64b8 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6840:	4605      	mov	r5, r0
   d6842:	b928      	cbnz	r0, d6850 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d6844:	7863      	ldrb	r3, [r4, #1]
   d6846:	f043 0301 	orr.w	r3, r3, #1
   d684a:	7063      	strb	r3, [r4, #1]
  return false;
   d684c:	2000      	movs	r0, #0
   d684e:	e7f0      	b.n	d6832 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6850:	7803      	ldrb	r3, [r0, #0]
   d6852:	2be5      	cmp	r3, #229	; 0xe5
   d6854:	d0f6      	beq.n	d6844 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d6856:	7823      	ldrb	r3, [r4, #0]
   d6858:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d685a:	bf44      	itt	mi
   d685c:	69e3      	ldrmi	r3, [r4, #28]
   d685e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6860:	8c23      	ldrh	r3, [r4, #32]
   d6862:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6864:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d6866:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d6868:	4b09      	ldr	r3, [pc, #36]	; (d6890 <_ZN7FatFile4syncEv+0x68>)
   d686a:	681b      	ldr	r3, [r3, #0]
   d686c:	b12b      	cbz	r3, d687a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d686e:	f100 0116 	add.w	r1, r0, #22
   d6872:	3018      	adds	r0, #24
   d6874:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d6876:	8b2b      	ldrh	r3, [r5, #24]
   d6878:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d687a:	78a3      	ldrb	r3, [r4, #2]
   d687c:	f023 0304 	bic.w	r3, r3, #4
   d6880:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d6882:	68a0      	ldr	r0, [r4, #8]
   d6884:	f7ff fdc2 	bl	d640c <_ZN9FatVolume9cacheSyncEv>
   d6888:	2800      	cmp	r0, #0
   d688a:	d0db      	beq.n	d6844 <_ZN7FatFile4syncEv+0x1c>
   d688c:	e7d0      	b.n	d6830 <_ZN7FatFile4syncEv+0x8>
   d688e:	bf00      	nop
   d6890:	2003e538 	.word	0x2003e538

000d6894 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d6894:	b510      	push	{r4, lr}
   d6896:	4604      	mov	r4, r0
  bool rtn = sync();
   d6898:	f7ff ffc6 	bl	d6828 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d689c:	2300      	movs	r3, #0
   d689e:	7023      	strb	r3, [r4, #0]
}
   d68a0:	bd10      	pop	{r4, pc}

000d68a2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d68a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d68a4:	b093      	sub	sp, #76	; 0x4c
   d68a6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d68a8:	2300      	movs	r3, #0
   d68aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d68ae:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d68b0:	9201      	str	r2, [sp, #4]
   d68b2:	4606      	mov	r6, r0
   d68b4:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d68b6:	b113      	cbz	r3, d68be <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d68b8:	2000      	movs	r0, #0
}
   d68ba:	b013      	add	sp, #76	; 0x4c
   d68bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d68be:	780b      	ldrb	r3, [r1, #0]
   d68c0:	f013 0f70 	tst.w	r3, #112	; 0x70
   d68c4:	d0f8      	beq.n	d68b8 <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d68c6:	7813      	ldrb	r3, [r2, #0]
   d68c8:	2b2f      	cmp	r3, #47	; 0x2f
   d68ca:	d112      	bne.n	d68f2 <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d68cc:	9a01      	ldr	r2, [sp, #4]
   d68ce:	7813      	ldrb	r3, [r2, #0]
   d68d0:	2b2f      	cmp	r3, #47	; 0x2f
   d68d2:	d102      	bne.n	d68da <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d68d4:	3201      	adds	r2, #1
   d68d6:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d68d8:	e7f8      	b.n	d68cc <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d68da:	68a1      	ldr	r1, [r4, #8]
   d68dc:	b91b      	cbnz	r3, d68e6 <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d68de:	4630      	mov	r0, r6
   d68e0:	f7ff fdf9 	bl	d64d6 <_ZN7FatFile8openRootEP9FatVolume>
   d68e4:	e7e9      	b.n	d68ba <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d68e6:	a809      	add	r0, sp, #36	; 0x24
   d68e8:	f7ff fdf5 	bl	d64d6 <_ZN7FatFile8openRootEP9FatVolume>
   d68ec:	2800      	cmp	r0, #0
   d68ee:	d0e3      	beq.n	d68b8 <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d68f0:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d68f2:	9801      	ldr	r0, [sp, #4]
   d68f4:	aa01      	add	r2, sp, #4
   d68f6:	a903      	add	r1, sp, #12
   d68f8:	f000 f8f6 	bl	d6ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d68fc:	2800      	cmp	r0, #0
   d68fe:	d0db      	beq.n	d68b8 <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d6900:	9b01      	ldr	r3, [sp, #4]
   d6902:	781b      	ldrb	r3, [r3, #0]
   d6904:	b19b      	cbz	r3, d692e <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6906:	2300      	movs	r3, #0
   d6908:	aa03      	add	r2, sp, #12
   d690a:	4621      	mov	r1, r4
   d690c:	4630      	mov	r0, r6
   d690e:	f000 fa1f 	bl	d6d50 <_ZN7FatFile4openEPS_P7fname_ti>
   d6912:	2800      	cmp	r0, #0
   d6914:	d0d0      	beq.n	d68b8 <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d6916:	4635      	mov	r5, r6
   d6918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d691a:	ac09      	add	r4, sp, #36	; 0x24
   d691c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d691e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6922:	682b      	ldr	r3, [r5, #0]
   d6924:	6023      	str	r3, [r4, #0]
    close();
   d6926:	4630      	mov	r0, r6
   d6928:	f7ff ffb4 	bl	d6894 <_ZN7FatFile5closeEv>
  while (1) {
   d692c:	e7e0      	b.n	d68f0 <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d692e:	463b      	mov	r3, r7
   d6930:	aa03      	add	r2, sp, #12
   d6932:	4621      	mov	r1, r4
   d6934:	4630      	mov	r0, r6
   d6936:	f000 fa0b 	bl	d6d50 <_ZN7FatFile4openEPS_P7fname_ti>
   d693a:	e7be      	b.n	d68ba <_ZN7FatFile4openEPS_PKci+0x18>

000d693c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6940:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d6942:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6944:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d6946:	4604      	mov	r4, r0
   d6948:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d694a:	d55b      	bpl.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
   d694c:	7883      	ldrb	r3, [r0, #2]
   d694e:	079a      	lsls	r2, r3, #30
   d6950:	d558      	bpl.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d6952:	071b      	lsls	r3, r3, #28
   d6954:	d451      	bmi.n	d69fa <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6956:	6963      	ldr	r3, [r4, #20]
   d6958:	43db      	mvns	r3, r3
   d695a:	42bb      	cmp	r3, r7
   d695c:	d352      	bcc.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
   d695e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6960:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d6964:	6966      	ldr	r6, [r4, #20]
   d6966:	f1b8 0f00 	cmp.w	r8, #0
   d696a:	f000 8091 	beq.w	d6a90 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d696e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d6970:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6972:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6976:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d697a:	d10e      	bne.n	d699a <_ZN7FatFile5writeEPKvj+0x5e>
   d697c:	b96d      	cbnz	r5, d699a <_ZN7FatFile5writeEPKvj+0x5e>
   d697e:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d6980:	2900      	cmp	r1, #0
   d6982:	d046      	beq.n	d6a12 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6984:	4652      	mov	r2, sl
   d6986:	f000 fc0e 	bl	d71a6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d698a:	2800      	cmp	r0, #0
   d698c:	db3a      	blt.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d698e:	d104      	bne.n	d699a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6990:	4620      	mov	r0, r4
   d6992:	f7ff fd48 	bl	d6426 <_ZN7FatFile10addClusterEv>
   d6996:	2800      	cmp	r0, #0
   d6998:	d034      	beq.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d699a:	6921      	ldr	r1, [r4, #16]
   d699c:	68a0      	ldr	r0, [r4, #8]
   d699e:	f000 fbfc 	bl	d719a <_ZNK9FatVolume17clusterFirstBlockEm>
   d69a2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d69a4:	68a0      	ldr	r0, [r4, #8]
   d69a6:	b915      	cbnz	r5, d69ae <_ZN7FatFile5writeEPKvj+0x72>
   d69a8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d69ac:	d23f      	bcs.n	d6a2e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d69ae:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d69b2:	4546      	cmp	r6, r8
   d69b4:	bf28      	it	cs
   d69b6:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d69b8:	2d00      	cmp	r5, #0
   d69ba:	d136      	bne.n	d6a2a <_ZN7FatFile5writeEPKvj+0xee>
   d69bc:	6962      	ldr	r2, [r4, #20]
   d69be:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d69c0:	429a      	cmp	r2, r3
   d69c2:	bf34      	ite	cc
   d69c4:	2201      	movcc	r2, #1
   d69c6:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d69c8:	3024      	adds	r0, #36	; 0x24
   d69ca:	f000 fbc3 	bl	d7154 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d69ce:	b1c8      	cbz	r0, d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d69d0:	4428      	add	r0, r5
   d69d2:	4632      	mov	r2, r6
   d69d4:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d69d6:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d69d8:	f004 f977 	bl	dacca <memcpy>
      if (512 == (n + blockOffset)) {
   d69dc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d69e0:	d104      	bne.n	d69ec <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d69e2:	68a0      	ldr	r0, [r4, #8]
   d69e4:	3024      	adds	r0, #36	; 0x24
   d69e6:	f000 fb8d 	bl	d7104 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d69ea:	b158      	cbz	r0, d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d69ec:	6963      	ldr	r3, [r4, #20]
   d69ee:	4433      	add	r3, r6
   d69f0:	6163      	str	r3, [r4, #20]
    src += n;
   d69f2:	44b1      	add	r9, r6
    nToWrite -= n;
   d69f4:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d69f8:	e7b4      	b.n	d6964 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d69fa:	69c1      	ldr	r1, [r0, #28]
   d69fc:	f7ff fe64 	bl	d66c8 <_ZN7FatFile7seekSetEm>
   d6a00:	2800      	cmp	r0, #0
   d6a02:	d1a8      	bne.n	d6956 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6a04:	7863      	ldrb	r3, [r4, #1]
   d6a06:	f043 0301 	orr.w	r3, r3, #1
   d6a0a:	7063      	strb	r3, [r4, #1]
  return -1;
   d6a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6a10:	e050      	b.n	d6ab4 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d6a12:	6a23      	ldr	r3, [r4, #32]
   d6a14:	b93b      	cbnz	r3, d6a26 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d6a16:	4620      	mov	r0, r4
   d6a18:	f7ff fd05 	bl	d6426 <_ZN7FatFile10addClusterEv>
   d6a1c:	2800      	cmp	r0, #0
   d6a1e:	d0f1      	beq.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d6a20:	6923      	ldr	r3, [r4, #16]
   d6a22:	6223      	str	r3, [r4, #32]
   d6a24:	e7b9      	b.n	d699a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d6a26:	6123      	str	r3, [r4, #16]
   d6a28:	e7b7      	b.n	d699a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6a2a:	2201      	movs	r2, #1
   d6a2c:	e7cc      	b.n	d69c8 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d6a2e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d6a32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d6a34:	d31b      	bcc.n	d6a6e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d6a36:	f890 c004 	ldrb.w	ip, [r0, #4]
   d6a3a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d6a3e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d6a40:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d6a44:	4573      	cmp	r3, lr
   d6a46:	bf28      	it	cs
   d6a48:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6a4a:	4291      	cmp	r1, r2
      n = 512*nb;
   d6a4c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6a50:	d307      	bcc.n	d6a62 <_ZN7FatFile5writeEPKvj+0x126>
   d6a52:	441a      	add	r2, r3
   d6a54:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d6a56:	bf82      	ittt	hi
   d6a58:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d6a5c:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6a60:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6a62:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d6a64:	464a      	mov	r2, r9
   d6a66:	6828      	ldr	r0, [r5, #0]
   d6a68:	f000 ff53 	bl	d7912 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d6a6c:	e7bd      	b.n	d69ea <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d6a6e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d6a70:	bf02      	ittt	eq
   d6a72:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d6a76:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6a7a:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d6a7c:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d6a7e:	464a      	mov	r2, r9
   d6a80:	6818      	ldr	r0, [r3, #0]
   d6a82:	f000 fed0 	bl	d7826 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6a86:	2800      	cmp	r0, #0
   d6a88:	d0bc      	beq.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d6a8a:	f44f 7600 	mov.w	r6, #512	; 0x200
   d6a8e:	e7ad      	b.n	d69ec <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d6a90:	69e2      	ldr	r2, [r4, #28]
   d6a92:	78a3      	ldrb	r3, [r4, #2]
   d6a94:	42b2      	cmp	r2, r6
   d6a96:	d204      	bcs.n	d6aa2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d6a98:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d6a9a:	f043 0304 	orr.w	r3, r3, #4
   d6a9e:	70a3      	strb	r3, [r4, #2]
   d6aa0:	e003      	b.n	d6aaa <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d6aa2:	4a08      	ldr	r2, [pc, #32]	; (d6ac4 <_ZN7FatFile5writeEPKvj+0x188>)
   d6aa4:	6812      	ldr	r2, [r2, #0]
   d6aa6:	2a00      	cmp	r2, #0
   d6aa8:	d1f7      	bne.n	d6a9a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d6aaa:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d6aae:	2b00      	cmp	r3, #0
   d6ab0:	db02      	blt.n	d6ab8 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d6ab2:	4638      	mov	r0, r7
}
   d6ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d6ab8:	4620      	mov	r0, r4
   d6aba:	f7ff feb5 	bl	d6828 <_ZN7FatFile4syncEv>
   d6abe:	2800      	cmp	r0, #0
   d6ac0:	d1f7      	bne.n	d6ab2 <_ZN7FatFile5writeEPKvj+0x176>
   d6ac2:	e79f      	b.n	d6a04 <_ZN7FatFile5writeEPKvj+0xc8>
   d6ac4:	2003e538 	.word	0x2003e538

000d6ac8 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6ac8:	1e41      	subs	r1, r0, #1
   d6aca:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d6ace:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6ad0:	0842      	lsrs	r2, r0, #1
   d6ad2:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d6ad6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6ada:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6ade:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d6ae0:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d6ae2:	d1f5      	bne.n	d6ad0 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d6ae4:	4770      	bx	lr
	...

000d6ae8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6aec:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d6aee:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6af2:	2b20      	cmp	r3, #32
   d6af4:	d0fa      	beq.n	d6aec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6af6:	4d6b      	ldr	r5, [pc, #428]	; (d6ca4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d6af8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d6afa:	2400      	movs	r4, #0
    c = path[len];
   d6afc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d6afe:	b1c3      	cbz	r3, d6b32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d6b00:	2b2f      	cmp	r3, #47	; 0x2f
   d6b02:	d016      	beq.n	d6b32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6b04:	2b5c      	cmp	r3, #92	; 0x5c
   d6b06:	d102      	bne.n	d6b0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6b08:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d6b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6b0e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d6b12:	b2c0      	uxtb	r0, r0
   d6b14:	281d      	cmp	r0, #29
   d6b16:	d803      	bhi.n	d6b20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d6b18:	fa25 f000 	lsr.w	r0, r5, r0
   d6b1c:	07c0      	lsls	r0, r0, #31
   d6b1e:	d4f3      	bmi.n	d6b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d6b20:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d6b24:	283c      	cmp	r0, #60	; 0x3c
   d6b26:	d0ef      	beq.n	d6b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6b28:	3b20      	subs	r3, #32
   d6b2a:	2b5e      	cmp	r3, #94	; 0x5e
   d6b2c:	d8ec      	bhi.n	d6b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d6b2e:	3401      	adds	r4, #1
    c = path[len];
   d6b30:	e7e4      	b.n	d6afc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d6b32:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d6b34:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6b36:	4607      	mov	r7, r0
   d6b38:	f810 5b01 	ldrb.w	r5, [r0], #1
   d6b3c:	2d20      	cmp	r5, #32
   d6b3e:	d0fa      	beq.n	d6b36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d6b40:	2d2f      	cmp	r5, #47	; 0x2f
   d6b42:	d0f8      	beq.n	d6b36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6b44:	6017      	str	r7, [r2, #0]
  while (len) {
   d6b46:	b14c      	cbz	r4, d6b5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6b4c:	2a2e      	cmp	r2, #46	; 0x2e
   d6b4e:	d001      	beq.n	d6b54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d6b50:	2a20      	cmp	r2, #32
   d6b52:	d101      	bne.n	d6b58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d6b54:	3c01      	subs	r4, #1
  while (len) {
   d6b56:	e7f6      	b.n	d6b46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6b58:	2cff      	cmp	r4, #255	; 0xff
   d6b5a:	dcd5      	bgt.n	d6b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d6b5c:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d6b5e:	f101 030d 	add.w	r3, r1, #13
   d6b62:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d6b66:	2020      	movs	r0, #32
   d6b68:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6b6c:	4293      	cmp	r3, r2
   d6b6e:	d1fb      	bne.n	d6b68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6b70:	f04f 0800 	mov.w	r8, #0
   d6b74:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6b78:	2b2e      	cmp	r3, #46	; 0x2e
   d6b7a:	d001      	beq.n	d6b80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6b7c:	2b20      	cmp	r3, #32
   d6b7e:	d102      	bne.n	d6b86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d6b80:	f108 0801 	add.w	r8, r8, #1
   d6b84:	e7f6      	b.n	d6b74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d6b86:	fab8 f088 	clz	r0, r8
   d6b8a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6b8c:	1e65      	subs	r5, r4, #1
   d6b8e:	1c6b      	adds	r3, r5, #1
   d6b90:	d002      	beq.n	d6b98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d6b92:	5d73      	ldrb	r3, [r6, r5]
   d6b94:	2b2e      	cmp	r3, #46	; 0x2e
   d6b96:	d114      	bne.n	d6bc2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6b98:	f04f 0900 	mov.w	r9, #0
   d6b9c:	2707      	movs	r7, #7
   d6b9e:	464a      	mov	r2, r9
   d6ba0:	46ca      	mov	sl, r9
   d6ba2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d6ba6:	45a0      	cmp	r8, r4
   d6ba8:	da69      	bge.n	d6c7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d6baa:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d6bae:	2b20      	cmp	r3, #32
   d6bb0:	d003      	beq.n	d6bba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d6bb2:	2b2e      	cmp	r3, #46	; 0x2e
   d6bb4:	d107      	bne.n	d6bc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6bb6:	45a8      	cmp	r8, r5
   d6bb8:	d012      	beq.n	d6be0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6bba:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6bbc:	f108 0801 	add.w	r8, r8, #1
   d6bc0:	e7f1      	b.n	d6ba6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6bc2:	3d01      	subs	r5, #1
   d6bc4:	e7e3      	b.n	d6b8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d6bc6:	2b22      	cmp	r3, #34	; 0x22
   d6bc8:	d008      	beq.n	d6bdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d6bca:	2b7c      	cmp	r3, #124	; 0x7c
   d6bcc:	d006      	beq.n	d6bdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d6bce:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d6bd2:	f1bc 0f05 	cmp.w	ip, #5
   d6bd6:	d80b      	bhi.n	d6bf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6bd8:	2b2d      	cmp	r3, #45	; 0x2d
   d6bda:	d013      	beq.n	d6c04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6bdc:	45a8      	cmp	r8, r5
   d6bde:	d15c      	bne.n	d6c9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d6be0:	2f0a      	cmp	r7, #10
   d6be2:	d04b      	beq.n	d6c7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6be4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6be6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6be8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6bea:	f04f 0e10 	mov.w	lr, #16
   d6bee:	e7e5      	b.n	d6bbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d6bf0:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6bf4:	f1bc 0f05 	cmp.w	ip, #5
   d6bf8:	d9f0      	bls.n	d6bdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d6bfa:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d6bfe:	f1bc 0f02 	cmp.w	ip, #2
   d6c02:	d9eb      	bls.n	d6bdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d6c04:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6c08:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6c0c:	d8e6      	bhi.n	d6bdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d6c0e:	45a8      	cmp	r8, r5
   d6c10:	d0e6      	beq.n	d6be0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d6c12:	42ba      	cmp	r2, r7
   d6c14:	d830      	bhi.n	d6c78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d6c16:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6c1a:	f1bc 0f19 	cmp.w	ip, #25
   d6c1e:	d81a      	bhi.n	d6c56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d6c20:	3b20      	subs	r3, #32
        lc |= bit;
   d6c22:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d6c26:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6c28:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d6c2c:	f102 0c01 	add.w	ip, r2, #1
   d6c30:	fa5f fc8c 	uxtb.w	ip, ip
   d6c34:	440a      	add	r2, r1
      if (i < 7) {
   d6c36:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d6c3a:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d6c3c:	d801      	bhi.n	d6c42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d6c3e:	f881 c00c 	strb.w	ip, [r1, #12]
   d6c42:	4662      	mov	r2, ip
   d6c44:	e7ba      	b.n	d6bbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6c46:	45a8      	cmp	r8, r5
   d6c48:	dc18      	bgt.n	d6c7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6c4a:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6c4c:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6c4e:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6c50:	f04f 0e10 	mov.w	lr, #16
   d6c54:	e7b1      	b.n	d6bba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d6c56:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6c5a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d6c5e:	bf98      	it	ls
   d6c60:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d6c64:	e7e2      	b.n	d6c2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d6c66:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6c68:	2001      	movs	r0, #1
   d6c6a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6c6c:	4419      	add	r1, r3
   d6c6e:	237e      	movs	r3, #126	; 0x7e
   d6c70:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d6c72:	2331      	movs	r3, #49	; 0x31
   d6c74:	738b      	strb	r3, [r1, #14]
   d6c76:	e748      	b.n	d6b0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6c78:	2f0a      	cmp	r7, #10
   d6c7a:	d1e4      	bne.n	d6c46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6c7c:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d6c7e:	7b4b      	ldrb	r3, [r1, #13]
   d6c80:	2b20      	cmp	r3, #32
   d6c82:	f43f af41 	beq.w	d6b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d6c86:	2800      	cmp	r0, #0
   d6c88:	d0ed      	beq.n	d6c66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6c8a:	ea1a 0f09 	tst.w	sl, r9
   d6c8e:	bf18      	it	ne
   d6c90:	f04f 0902 	movne.w	r9, #2
   d6c94:	f881 9000 	strb.w	r9, [r1]
   d6c98:	e737      	b.n	d6b0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d6c9a:	42ba      	cmp	r2, r7
   d6c9c:	d8ec      	bhi.n	d6c78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d6c9e:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d6ca0:	2000      	movs	r0, #0
   d6ca2:	e7c3      	b.n	d6c2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6ca4:	31000101 	.word	0x31000101

000d6ca8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6cac:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6cb0:	4606      	mov	r6, r0
   d6cb2:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6cb4:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6cb6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6cb8:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6cbc:	6861      	ldr	r1, [r4, #4]
   d6cbe:	68a2      	ldr	r2, [r4, #8]
   d6cc0:	186b      	adds	r3, r5, r1
   d6cc2:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6cc4:	4411      	add	r1, r2
   d6cc6:	4291      	cmp	r1, r2
   d6cc8:	d006      	beq.n	d6cd8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6cca:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6cce:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d6cd2:	4043      	eors	r3, r0
   d6cd4:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6cd6:	e7f6      	b.n	d6cc6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6cd8:	f1b9 0f03 	cmp.w	r9, #3
   d6cdc:	bf28      	it	cs
   d6cde:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6ce2:	f109 0204 	add.w	r2, r9, #4
   d6ce6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6ce8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6cec:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cee:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6cf0:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cf2:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6cf4:	bf94      	ite	ls
   d6cf6:	3130      	addls	r1, #48	; 0x30
   d6cf8:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6cfa:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6cfc:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d6cfe:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6d02:	d1f1      	bne.n	d6ce8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d6d04:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d6d08:	2100      	movs	r1, #0
   d6d0a:	735f      	strb	r7, [r3, #13]
   d6d0c:	4630      	mov	r0, r6
   d6d0e:	f7ff fcdb 	bl	d66c8 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d6d12:	2101      	movs	r1, #1
   d6d14:	4630      	mov	r0, r6
   d6d16:	f7ff fcb8 	bl	d668a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6d1a:	4601      	mov	r1, r0
   d6d1c:	b928      	cbnz	r0, d6d2a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d6d1e:	7870      	ldrb	r0, [r6, #1]
   d6d20:	fab0 f080 	clz	r0, r0
   d6d24:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d6d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d6d2a:	7803      	ldrb	r3, [r0, #0]
   d6d2c:	b16b      	cbz	r3, d6d4a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6d2e:	7ac3      	ldrb	r3, [r0, #11]
   d6d30:	071b      	lsls	r3, r3, #28
   d6d32:	d4ee      	bmi.n	d6d12 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6d34:	220b      	movs	r2, #11
   d6d36:	4640      	mov	r0, r8
   d6d38:	f003 ffb9 	bl	dacae <memcmp>
   d6d3c:	2800      	cmp	r0, #0
   d6d3e:	d1e8      	bne.n	d6d12 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d6d40:	3501      	adds	r5, #1
   d6d42:	b2ad      	uxth	r5, r5
   d6d44:	2d64      	cmp	r5, #100	; 0x64
   d6d46:	d1b9      	bne.n	d6cbc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6d48:	e7ed      	b.n	d6d26 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d6d4a:	2001      	movs	r0, #1
   d6d4c:	e7eb      	b.n	d6d26 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d6d50 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d54:	ed2d 8b02 	vpush	{d8}
   d6d58:	b089      	sub	sp, #36	; 0x24
   d6d5a:	460d      	mov	r5, r1
   d6d5c:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d6d5e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6d60:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d6d62:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6d66:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d6d68:	d105      	bne.n	d6d76 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d6d6a:	2000      	movs	r0, #0
}
   d6d6c:	b009      	add	sp, #36	; 0x24
   d6d6e:	ecbd 8b02 	vpop	{d8}
   d6d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d6d76:	9b06      	ldr	r3, [sp, #24]
   d6d78:	781b      	ldrb	r3, [r3, #0]
   d6d7a:	2b00      	cmp	r3, #0
   d6d7c:	d1f5      	bne.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d6d7e:	6853      	ldr	r3, [r2, #4]
   d6d80:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d6d82:	7813      	ldrb	r3, [r2, #0]
   d6d84:	0799      	lsls	r1, r3, #30
   d6d86:	bf1c      	itt	ne
   d6d88:	9b04      	ldrne	r3, [sp, #16]
   d6d8a:	f103 070c 	addne.w	r7, r3, #12
   d6d8e:	f04f 0100 	mov.w	r1, #0
   d6d92:	bf18      	it	ne
   d6d94:	230d      	movne	r3, #13
   d6d96:	4628      	mov	r0, r5
   d6d98:	bf1d      	ittte	ne
   d6d9a:	fbb7 f7f3 	udivne	r7, r7, r3
   d6d9e:	3701      	addne	r7, #1
   d6da0:	b2ff      	uxtbne	r7, r7
   d6da2:	2701      	moveq	r7, #1
   d6da4:	f7ff fc90 	bl	d66c8 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6da8:	f108 020d 	add.w	r2, r8, #13
  }
   d6dac:	2300      	movs	r3, #0
   d6dae:	ee08 2a10 	vmov	s16, r2
   d6db2:	469b      	mov	fp, r3
   d6db4:	461c      	mov	r4, r3
   d6db6:	461e      	mov	r6, r3
   d6db8:	9303      	str	r3, [sp, #12]
   d6dba:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6dbc:	696a      	ldr	r2, [r5, #20]
   d6dbe:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d6dc0:	2101      	movs	r1, #1
   d6dc2:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6dc4:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6dc8:	f7ff fc5f 	bl	d668a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6dcc:	9b07      	ldr	r3, [sp, #28]
   d6dce:	2800      	cmp	r0, #0
   d6dd0:	d16e      	bne.n	d6eb0 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d6dd2:	786b      	ldrb	r3, [r5, #1]
   d6dd4:	2b00      	cmp	r3, #0
   d6dd6:	d1c8      	bne.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6dd8:	9b05      	ldr	r3, [sp, #20]
   d6dda:	059a      	lsls	r2, r3, #22
   d6ddc:	d5c5      	bpl.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d6dde:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d6de2:	3b01      	subs	r3, #1
   d6de4:	2b01      	cmp	r3, #1
   d6de6:	d8c0      	bhi.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d6de8:	9b03      	ldr	r3, [sp, #12]
   d6dea:	2c00      	cmp	r4, #0
   d6dec:	bf08      	it	eq
   d6dee:	464b      	moveq	r3, r9
   d6df0:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d6df2:	42bc      	cmp	r4, r7
   d6df4:	f0c0 8103 	bcc.w	d6ffe <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d6df8:	f1ba 0f00 	cmp.w	sl, #0
   d6dfc:	f040 811b 	bne.w	d7036 <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d6e00:	9b03      	ldr	r3, [sp, #12]
   d6e02:	4628      	mov	r0, r5
   d6e04:	0159      	lsls	r1, r3, #5
   d6e06:	f7ff fc5f 	bl	d66c8 <_ZN7FatFile7seekSetEm>
   d6e0a:	2800      	cmp	r0, #0
   d6e0c:	d0ad      	beq.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d6e0e:	3f01      	subs	r7, #1
   d6e10:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6e14:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6e16:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d6e1a:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6e1c:	2e00      	cmp	r6, #0
   d6e1e:	f000 8121 	beq.w	d7064 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6e22:	2100      	movs	r1, #0
   d6e24:	4628      	mov	r0, r5
   d6e26:	f7ff fc30 	bl	d668a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6e2a:	4604      	mov	r4, r0
   d6e2c:	2800      	cmp	r0, #0
   d6e2e:	d09c      	beq.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d6e30:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d6e32:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6e36:	4556      	cmp	r6, sl
   d6e38:	f043 0301 	orr.w	r3, r3, #1
   d6e3c:	bf0c      	ite	eq
   d6e3e:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d6e42:	46b3      	movne	fp, r6
   d6e44:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6e48:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6e4c:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d6e4e:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d6e52:	f108 000d 	add.w	r0, r8, #13
   d6e56:	f7ff fe37 	bl	d6ac8 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e5a:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d6e5e:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d6e60:	f884 901a 	strb.w	r9, [r4, #26]
   d6e64:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d6e6c:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d6e6e:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6e72:	fb02 f20b 	mul.w	r2, r2, fp
   d6e76:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6e78:	9904      	ldr	r1, [sp, #16]
   d6e7a:	4291      	cmp	r1, r2
   d6e7c:	f240 80e3 	bls.w	d7046 <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d6e80:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d6e84:	2b04      	cmp	r3, #4
   d6e86:	fa5f fe83 	uxtb.w	lr, r3
   d6e8a:	f103 0001 	add.w	r0, r3, #1
   d6e8e:	f200 80e0 	bhi.w	d7052 <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d6e92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d6e96:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6e9a:	280d      	cmp	r0, #13
   d6e9c:	f102 0201 	add.w	r2, r2, #1
   d6ea0:	4603      	mov	r3, r0
   d6ea2:	d1e9      	bne.n	d6e78 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6ea4:	3e01      	subs	r6, #1
   d6ea6:	b2f6      	uxtb	r6, r6
   d6ea8:	e7b8      	b.n	d6e1c <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d6eaa:	f04f 0a01 	mov.w	sl, #1
   d6eae:	e785      	b.n	d6dbc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d6eb0:	7802      	ldrb	r2, [r0, #0]
   d6eb2:	2ae5      	cmp	r2, #229	; 0xe5
   d6eb4:	d000      	beq.n	d6eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d6eb6:	b97a      	cbnz	r2, d6ed8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d6eb8:	9903      	ldr	r1, [sp, #12]
   d6eba:	2c00      	cmp	r4, #0
   d6ebc:	bf08      	it	eq
   d6ebe:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d6ec0:	42bc      	cmp	r4, r7
        freeFound++;
   d6ec2:	bf38      	it	cc
   d6ec4:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d6ec6:	9103      	str	r1, [sp, #12]
        freeFound++;
   d6ec8:	bf38      	it	cc
   d6eca:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d6ecc:	2a00      	cmp	r2, #0
   d6ece:	d083      	beq.n	d6dd8 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6ed0:	2ae5      	cmp	r2, #229	; 0xe5
   d6ed2:	d104      	bne.n	d6ede <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d6ed4:	2600      	movs	r6, #0
   d6ed6:	e771      	b.n	d6dbc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d6ed8:	42bc      	cmp	r4, r7
   d6eda:	bf38      	it	cc
   d6edc:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d6ede:	2a2e      	cmp	r2, #46	; 0x2e
   d6ee0:	d0f8      	beq.n	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d6ee2:	7ac1      	ldrb	r1, [r0, #11]
   d6ee4:	290f      	cmp	r1, #15
   d6ee6:	d15d      	bne.n	d6fa4 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d6ee8:	bb3e      	cbnz	r6, d6f3a <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6eea:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d6eee:	f43f af65 	beq.w	d6dbc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d6ef2:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d6ef6:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d6ef8:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d6efa:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d6efe:	f04f 0e0d 	mov.w	lr, #13
   d6f02:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d6f06:	9a04      	ldr	r2, [sp, #16]
   d6f08:	4572      	cmp	r2, lr
   d6f0a:	d9e3      	bls.n	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6f0c:	eba2 020e 	sub.w	r2, r2, lr
   d6f10:	9207      	str	r2, [sp, #28]
   d6f12:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d6f16:	f1bc 0f04 	cmp.w	ip, #4
   d6f1a:	eb0c 090e 	add.w	r9, ip, lr
   d6f1e:	fa5f f28c 	uxtb.w	r2, ip
   d6f22:	d814      	bhi.n	d6f4e <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d6f24:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d6f28:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d6f2c:	9907      	ldr	r1, [sp, #28]
   d6f2e:	458c      	cmp	ip, r1
   d6f30:	d11b      	bne.n	d6f6a <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d6f32:	2a00      	cmp	r2, #0
   d6f34:	bf18      	it	ne
   d6f36:	2600      	movne	r6, #0
   d6f38:	e740      	b.n	d6dbc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6f3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d6f3e:	fa5f fb8b 	uxtb.w	fp, fp
   d6f42:	455a      	cmp	r2, fp
   d6f44:	d1c6      	bne.n	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6f46:	7b42      	ldrb	r2, [r0, #13]
   d6f48:	429a      	cmp	r2, r3
   d6f4a:	d0d6      	beq.n	d6efa <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d6f4c:	e7c2      	b.n	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d6f4e:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6f50:	bf95      	itete	ls
   d6f52:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6f56:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6f5a:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6f5e:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6f62:	bf94      	ite	ls
   d6f64:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6f66:	8892      	ldrhhi	r2, [r2, #4]
   d6f68:	e7e0      	b.n	d6f2c <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6f6a:	2aff      	cmp	r2, #255	; 0xff
   d6f6c:	d8b2      	bhi.n	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6f6e:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6f70:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6f74:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6f76:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d6f7a:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d6f7e:	bf98      	it	ls
   d6f80:	3220      	addls	r2, #32
   d6f82:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d6f86:	bf98      	it	ls
   d6f88:	b2d2      	uxtbls	r2, r2
   d6f8a:	f1b9 0f19 	cmp.w	r9, #25
   d6f8e:	bf9c      	itt	ls
   d6f90:	3120      	addls	r1, #32
   d6f92:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6f94:	4291      	cmp	r1, r2
   d6f96:	d19d      	bne.n	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d6f98:	f10c 0c01 	add.w	ip, ip, #1
   d6f9c:	f1bc 0f0d 	cmp.w	ip, #13
   d6fa0:	d1b9      	bne.n	d6f16 <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d6fa2:	e70b      	b.n	d6dbc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6fa4:	070a      	lsls	r2, r1, #28
   d6fa6:	d495      	bmi.n	d6ed4 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d6fa8:	b166      	cbz	r6, d6fc4 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6faa:	f1bb 0f01 	cmp.w	fp, #1
   d6fae:	9303      	str	r3, [sp, #12]
   d6fb0:	f47f aedb 	bne.w	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6fb4:	f7ff fd88 	bl	d6ac8 <_ZN7FatFile11lfnChecksumEPh>
   d6fb8:	9b03      	ldr	r3, [sp, #12]
   d6fba:	4298      	cmp	r0, r3
   d6fbc:	f47f aed5 	bne.w	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6fc0:	46b2      	mov	sl, r6
   d6fc2:	e00f      	b.n	d6fe4 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6fc4:	ee18 1a10 	vmov	r1, s16
   d6fc8:	220b      	movs	r2, #11
   d6fca:	9307      	str	r3, [sp, #28]
   d6fcc:	f003 fe6f 	bl	dacae <memcmp>
   d6fd0:	9b07      	ldr	r3, [sp, #28]
   d6fd2:	2800      	cmp	r0, #0
   d6fd4:	f47f aef2 	bne.w	d6dbc <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6fd8:	f898 a000 	ldrb.w	sl, [r8]
   d6fdc:	f01a 0a01 	ands.w	sl, sl, #1
   d6fe0:	f47f af63 	bne.w	d6eaa <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d6fe4:	9b05      	ldr	r3, [sp, #20]
   d6fe6:	0519      	lsls	r1, r3, #20
   d6fe8:	f53f aebf 	bmi.w	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6fec:	9b05      	ldr	r3, [sp, #20]
   d6fee:	9806      	ldr	r0, [sp, #24]
   d6ff0:	f8cd a000 	str.w	sl, [sp]
   d6ff4:	464a      	mov	r2, r9
   d6ff6:	4629      	mov	r1, r5
   d6ff8:	f7ff fba9 	bl	d674e <_ZN7FatFile15openCachedEntryEPS_tih>
   d6ffc:	e6b6      	b.n	d6d6c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d6ffe:	2100      	movs	r1, #0
   d7000:	4628      	mov	r0, r5
   d7002:	f7ff fb42 	bl	d668a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d7006:	b998      	cbnz	r0, d7030 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d7008:	786b      	ldrb	r3, [r5, #1]
   d700a:	2b00      	cmp	r3, #0
   d700c:	f47f aead 	bne.w	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d7010:	4628      	mov	r0, r5
   d7012:	f7ff fa13 	bl	d643c <_ZN7FatFile13addDirClusterEv>
   d7016:	2800      	cmp	r0, #0
   d7018:	f43f aea7 	beq.w	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d701c:	68ab      	ldr	r3, [r5, #8]
   d701e:	791b      	ldrb	r3, [r3, #4]
   d7020:	2b01      	cmp	r3, #1
   d7022:	f63f aee9 	bhi.w	d6df8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d7026:	3410      	adds	r4, #16
   d7028:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d702a:	42a7      	cmp	r7, r4
   d702c:	d8f0      	bhi.n	d7010 <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d702e:	e6e3      	b.n	d6df8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d7030:	3401      	adds	r4, #1
   d7032:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d7034:	e6dd      	b.n	d6df2 <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d7036:	4641      	mov	r1, r8
   d7038:	4628      	mov	r0, r5
   d703a:	f7ff fe35 	bl	d6ca8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d703e:	2800      	cmp	r0, #0
   d7040:	f47f aede 	bne.w	d6e00 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d7044:	e691      	b.n	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d7046:	bf14      	ite	ne
   d7048:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d704c:	2100      	moveq	r1, #0
   d704e:	b289      	uxth	r1, r1
   d7050:	e718      	b.n	d6e84 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d7052:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d7056:	bf94      	ite	ls
   d7058:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d705c:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d7060:	8099      	strh	r1, [r3, #4]
   d7062:	e71a      	b.n	d6e9a <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d7064:	4631      	mov	r1, r6
   d7066:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d7068:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d706a:	f7ff fb0e 	bl	d668a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d706e:	4604      	mov	r4, r0
   d7070:	2800      	cmp	r0, #0
   d7072:	f43f ae7a 	beq.w	d6d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d7076:	2220      	movs	r2, #32
   d7078:	4631      	mov	r1, r6
   d707a:	f003 fe34 	bl	dace6 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d707e:	4643      	mov	r3, r8
   d7080:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d7084:	6022      	str	r2, [r4, #0]
   d7086:	685a      	ldr	r2, [r3, #4]
   d7088:	6062      	str	r2, [r4, #4]
   d708a:	891a      	ldrh	r2, [r3, #8]
   d708c:	8122      	strh	r2, [r4, #8]
   d708e:	7a9b      	ldrb	r3, [r3, #10]
   d7090:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d7092:	f898 3000 	ldrb.w	r3, [r8]
   d7096:	f003 0318 	and.w	r3, r3, #24
   d709a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d709c:	4b0f      	ldr	r3, [pc, #60]	; (d70dc <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d709e:	681b      	ldr	r3, [r3, #0]
   d70a0:	b19b      	cbz	r3, d70ca <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d70a2:	f104 010e 	add.w	r1, r4, #14
   d70a6:	f104 0010 	add.w	r0, r4, #16
   d70aa:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d70ac:	8a23      	ldrh	r3, [r4, #16]
   d70ae:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d70b0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d70b2:	89e3      	ldrh	r3, [r4, #14]
   d70b4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d70b6:	68aa      	ldr	r2, [r5, #8]
   d70b8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d70bc:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d70c0:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d70c4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d70c8:	e790      	b.n	d6fec <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d70ca:	2321      	movs	r3, #33	; 0x21
   d70cc:	7423      	strb	r3, [r4, #16]
   d70ce:	2328      	movs	r3, #40	; 0x28
   d70d0:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d70d2:	2308      	movs	r3, #8
   d70d4:	73a6      	strb	r6, [r4, #14]
   d70d6:	73e3      	strb	r3, [r4, #15]
   d70d8:	e7e8      	b.n	d70ac <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d70da:	bf00      	nop
   d70dc:	2003e538 	.word	0x2003e538

000d70e0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d70e0:	b513      	push	{r0, r1, r4, lr}
   d70e2:	4604      	mov	r4, r0
    }
   d70e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d70e6:	b159      	cbz	r1, d7100 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d70e8:	9101      	str	r1, [sp, #4]
   d70ea:	f003 fe58 	bl	dad9e <strlen>
   d70ee:	6823      	ldr	r3, [r4, #0]
   d70f0:	9901      	ldr	r1, [sp, #4]
   d70f2:	68db      	ldr	r3, [r3, #12]
   d70f4:	4602      	mov	r2, r0
   d70f6:	4620      	mov	r0, r4
    }
   d70f8:	b002      	add	sp, #8
   d70fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d70fe:	4718      	bx	r3
    }
   d7100:	b002      	add	sp, #8
   d7102:	bd10      	pop	{r4, pc}

000d7104 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d7104:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d7106:	7803      	ldrb	r3, [r0, #0]
   d7108:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d710a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d710c:	d520      	bpl.n	d7150 <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d710e:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d7110:	6881      	ldr	r1, [r0, #8]
   d7112:	f100 020c 	add.w	r2, r0, #12
   d7116:	6818      	ldr	r0, [r3, #0]
   d7118:	9201      	str	r2, [sp, #4]
   d711a:	f000 fb84 	bl	d7826 <_ZN9SdSpiCard10writeBlockEmPKh>
   d711e:	9a01      	ldr	r2, [sp, #4]
   d7120:	4605      	mov	r5, r0
   d7122:	b918      	cbnz	r0, d712c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d7124:	2500      	movs	r5, #0
}
   d7126:	4628      	mov	r0, r5
   d7128:	b003      	add	sp, #12
   d712a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d712c:	7823      	ldrb	r3, [r4, #0]
   d712e:	079b      	lsls	r3, r3, #30
   d7130:	d404      	bmi.n	d713c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d7132:	7823      	ldrb	r3, [r4, #0]
   d7134:	f023 0301 	bic.w	r3, r3, #1
   d7138:	7023      	strb	r3, [r4, #0]
   d713a:	e7f4      	b.n	d7126 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d713c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d7140:	6919      	ldr	r1, [r3, #16]
   d7142:	4401      	add	r1, r0
   d7144:	6818      	ldr	r0, [r3, #0]
   d7146:	f000 fb6e 	bl	d7826 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d714a:	2800      	cmp	r0, #0
   d714c:	d1f1      	bne.n	d7132 <_ZN8FatCache4syncEv+0x2e>
   d714e:	e7e9      	b.n	d7124 <_ZN8FatCache4syncEv+0x20>
  return true;
   d7150:	2501      	movs	r5, #1
   d7152:	e7e8      	b.n	d7126 <_ZN8FatCache4syncEv+0x22>

000d7154 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d7154:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d7156:	6883      	ldr	r3, [r0, #8]
   d7158:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d715a:	4604      	mov	r4, r0
   d715c:	460e      	mov	r6, r1
   d715e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d7160:	d009      	beq.n	d7176 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d7162:	f7ff ffcf 	bl	d7104 <_ZN8FatCache4syncEv>
   d7166:	b908      	cbnz	r0, d716c <_ZN8FatCache4readEmh+0x18>
  return 0;
   d7168:	2000      	movs	r0, #0
}
   d716a:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d716c:	076b      	lsls	r3, r5, #29
   d716e:	d50a      	bpl.n	d7186 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d7170:	2300      	movs	r3, #0
   d7172:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d7174:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d7176:	7822      	ldrb	r2, [r4, #0]
   d7178:	f005 0503 	and.w	r5, r5, #3
   d717c:	4620      	mov	r0, r4
   d717e:	4315      	orrs	r5, r2
   d7180:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d7184:	e7f1      	b.n	d716a <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d7186:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d7188:	f104 020c 	add.w	r2, r4, #12
   d718c:	6818      	ldr	r0, [r3, #0]
   d718e:	4631      	mov	r1, r6
   d7190:	f000 fac0 	bl	d7714 <_ZN9SdSpiCard9readBlockEmPh>
   d7194:	2800      	cmp	r0, #0
   d7196:	d1eb      	bne.n	d7170 <_ZN8FatCache4readEmh+0x1c>
   d7198:	e7e6      	b.n	d7168 <_ZN8FatCache4readEmh+0x14>

000d719a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d719a:	7983      	ldrb	r3, [r0, #6]
   d719c:	6940      	ldr	r0, [r0, #20]
   d719e:	3902      	subs	r1, #2
   d71a0:	4099      	lsls	r1, r3
}
   d71a2:	4408      	add	r0, r1
   d71a4:	4770      	bx	lr

000d71a6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d71a6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d71a8:	b570      	push	{r4, r5, r6, lr}
   d71aa:	4605      	mov	r5, r0
   d71ac:	460c      	mov	r4, r1
   d71ae:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d71b0:	d802      	bhi.n	d71b8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d71b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d71b6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d71b8:	69c3      	ldr	r3, [r0, #28]
   d71ba:	428b      	cmp	r3, r1
   d71bc:	d3f9      	bcc.n	d71b2 <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d71be:	79c3      	ldrb	r3, [r0, #7]
   d71c0:	2b20      	cmp	r3, #32
   d71c2:	d116      	bne.n	d71f2 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d71c4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d71c6:	2202      	movs	r2, #2
   d71c8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d71cc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d71d0:	f7ff ffc0 	bl	d7154 <_ZN8FatCache4readEmh>
    if (!pc) {
   d71d4:	2800      	cmp	r0, #0
   d71d6:	d0ec      	beq.n	d71b2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d71d8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d71dc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d71e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d71e4:	69ea      	ldr	r2, [r5, #28]
   d71e6:	429a      	cmp	r2, r3
  *value = next;
   d71e8:	bf26      	itte	cs
   d71ea:	6033      	strcs	r3, [r6, #0]
  return 1;
   d71ec:	2001      	movcs	r0, #1
    return 0;
   d71ee:	2000      	movcc	r0, #0
   d71f0:	e7e1      	b.n	d71b6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d71f2:	2b10      	cmp	r3, #16
   d71f4:	d1dd      	bne.n	d71b2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d71f6:	6983      	ldr	r3, [r0, #24]
   d71f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d71fc:	2202      	movs	r2, #2
   d71fe:	4419      	add	r1, r3
   d7200:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7204:	f7ff ffa6 	bl	d7154 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7208:	2800      	cmp	r0, #0
   d720a:	d0d2      	beq.n	d71b2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d720c:	b2e4      	uxtb	r4, r4
   d720e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d7212:	e7e7      	b.n	d71e4 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d7214 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d7214:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d7216:	b538      	push	{r3, r4, r5, lr}
   d7218:	460c      	mov	r4, r1
   d721a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d721c:	d801      	bhi.n	d7222 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d721e:	2000      	movs	r0, #0
}
   d7220:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d7222:	69c3      	ldr	r3, [r0, #28]
   d7224:	428b      	cmp	r3, r1
   d7226:	d3fa      	bcc.n	d721e <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d7228:	79c3      	ldrb	r3, [r0, #7]
   d722a:	2b20      	cmp	r3, #32
   d722c:	d10f      	bne.n	d724e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d722e:	6981      	ldr	r1, [r0, #24]
   d7230:	2203      	movs	r2, #3
   d7232:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d7236:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d723a:	f7ff ff8b 	bl	d7154 <_ZN8FatCache4readEmh>
    if (!pc) {
   d723e:	2800      	cmp	r0, #0
   d7240:	d0ed      	beq.n	d721e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d7242:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d7246:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d724a:	2001      	movs	r0, #1
   d724c:	e7e8      	b.n	d7220 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d724e:	2b10      	cmp	r3, #16
   d7250:	d1e5      	bne.n	d721e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d7252:	6983      	ldr	r3, [r0, #24]
   d7254:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d7258:	2203      	movs	r2, #3
   d725a:	4419      	add	r1, r3
   d725c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d7260:	f7ff ff78 	bl	d7154 <_ZN8FatCache4readEmh>
    if (!pc) {
   d7264:	2800      	cmp	r0, #0
   d7266:	d0da      	beq.n	d721e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d7268:	b2e4      	uxtb	r4, r4
   d726a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d726e:	e7ec      	b.n	d724a <_ZN9FatVolume6fatPutEmm+0x36>

000d7270 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d7274:	68c4      	ldr	r4, [r0, #12]
   d7276:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d7278:	4605      	mov	r5, r0
   d727a:	460e      	mov	r6, r1
   d727c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d727e:	d301      	bcc.n	d7284 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d7280:	2701      	movs	r7, #1
   d7282:	e001      	b.n	d7288 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d7284:	460c      	mov	r4, r1
    setStart = false;
   d7286:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d7288:	69eb      	ldr	r3, [r5, #28]
    find++;
   d728a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d728c:	42a3      	cmp	r3, r4
   d728e:	d202      	bcs.n	d7296 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d7290:	b9c7      	cbnz	r7, d72c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d7292:	68ec      	ldr	r4, [r5, #12]
   d7294:	e7f4      	b.n	d7280 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d7296:	42a6      	cmp	r6, r4
   d7298:	d014      	beq.n	d72c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d729a:	aa01      	add	r2, sp, #4
   d729c:	4621      	mov	r1, r4
   d729e:	4628      	mov	r0, r5
   d72a0:	f7ff ff81 	bl	d71a6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d72a4:	2800      	cmp	r0, #0
   d72a6:	db0d      	blt.n	d72c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d72a8:	d0ee      	beq.n	d7288 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d72aa:	9b01      	ldr	r3, [sp, #4]
   d72ac:	2b00      	cmp	r3, #0
   d72ae:	d1eb      	bne.n	d7288 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d72b0:	b107      	cbz	r7, d72b4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d72b2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d72b4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d72b8:	4621      	mov	r1, r4
   d72ba:	4628      	mov	r0, r5
   d72bc:	f7ff ffaa 	bl	d7214 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d72c0:	4607      	mov	r7, r0
   d72c2:	b920      	cbnz	r0, d72ce <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d72c4:	2700      	movs	r7, #0
}
   d72c6:	4638      	mov	r0, r7
   d72c8:	b002      	add	sp, #8
   d72ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d72ce:	b916      	cbnz	r6, d72d6 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d72d0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d72d4:	e7f7      	b.n	d72c6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d72d6:	4622      	mov	r2, r4
   d72d8:	4631      	mov	r1, r6
   d72da:	4628      	mov	r0, r5
   d72dc:	f7ff ff9a 	bl	d7214 <_ZN9FatVolume6fatPutEmm>
   d72e0:	2800      	cmp	r0, #0
   d72e2:	d1f5      	bne.n	d72d0 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d72e4:	e7ee      	b.n	d72c4 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d72e6 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d72e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d72e8:	4605      	mov	r5, r0
   d72ea:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d72ec:	aa01      	add	r2, sp, #4
   d72ee:	4621      	mov	r1, r4
   d72f0:	4628      	mov	r0, r5
   d72f2:	f7ff ff58 	bl	d71a6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d72f6:	1e06      	subs	r6, r0, #0
   d72f8:	db10      	blt.n	d731c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d72fa:	2200      	movs	r2, #0
   d72fc:	4621      	mov	r1, r4
   d72fe:	4628      	mov	r0, r5
   d7300:	f7ff ff88 	bl	d7214 <_ZN9FatVolume6fatPutEmm>
   d7304:	b150      	cbz	r0, d731c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d7306:	68eb      	ldr	r3, [r5, #12]
   d7308:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d730a:	bf24      	itt	cs
   d730c:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d7310:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d7312:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d7314:	2e00      	cmp	r6, #0
   d7316:	d1e9      	bne.n	d72ec <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d7318:	b002      	add	sp, #8
   d731a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d731c:	2000      	movs	r0, #0
   d731e:	e7fb      	b.n	d7318 <_ZN9FatVolume9freeChainEm+0x32>

000d7320 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d7320:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d7322:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d7324:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d7326:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d7328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d732c:	4604      	mov	r4, r0
  m_fatType = 0;
   d732e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d7330:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d7334:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d7336:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d733a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d733c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d7340:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d7344:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d7348:	460d      	mov	r5, r1
   d734a:	b1b9      	cbz	r1, d737c <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d734c:	2904      	cmp	r1, #4
   d734e:	d901      	bls.n	d7354 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d7350:	2000      	movs	r0, #0
}
   d7352:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d7354:	4611      	mov	r1, r2
   d7356:	4630      	mov	r0, r6
   d7358:	f7ff fefc 	bl	d7154 <_ZN8FatCache4readEmh>
    if (!pc) {
   d735c:	2800      	cmp	r0, #0
   d735e:	d0f7      	beq.n	d7350 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d7360:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d7364:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d7368:	065b      	lsls	r3, r3, #25
   d736a:	d1f1      	bne.n	d7350 <_ZN9FatVolume4initEh+0x30>
   d736c:	f105 011b 	add.w	r1, r5, #27
   d7370:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d7374:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d7378:	2d00      	cmp	r5, #0
   d737a:	d0e9      	beq.n	d7350 <_ZN9FatVolume4initEh+0x30>
   d737c:	2200      	movs	r2, #0
   d737e:	4629      	mov	r1, r5
   d7380:	4630      	mov	r0, r6
   d7382:	f7ff fee7 	bl	d7154 <_ZN8FatCache4readEmh>
  if (!pc) {
   d7386:	2800      	cmp	r0, #0
   d7388:	d0e2      	beq.n	d7350 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d738a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d738e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d7392:	d1dd      	bne.n	d7350 <_ZN9FatVolume4initEh+0x30>
   d7394:	7c03      	ldrb	r3, [r0, #16]
   d7396:	2b02      	cmp	r3, #2
   d7398:	d1da      	bne.n	d7350 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d739a:	89c3      	ldrh	r3, [r0, #14]
   d739c:	2b00      	cmp	r3, #0
   d739e:	d0d7      	beq.n	d7350 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d73a0:	7b41      	ldrb	r1, [r0, #13]
   d73a2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d73a4:	1e4b      	subs	r3, r1, #1
   d73a6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d73a8:	2300      	movs	r3, #0
   d73aa:	71a3      	strb	r3, [r4, #6]
   d73ac:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d73ae:	2301      	movs	r3, #1
   d73b0:	4299      	cmp	r1, r3
   d73b2:	d007      	beq.n	d73c4 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d73b4:	3e01      	subs	r6, #1
   d73b6:	d0cb      	beq.n	d7350 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d73b8:	79a2      	ldrb	r2, [r4, #6]
   d73ba:	005b      	lsls	r3, r3, #1
   d73bc:	3201      	adds	r2, #1
   d73be:	b2db      	uxtb	r3, r3
   d73c0:	71a2      	strb	r2, [r4, #6]
   d73c2:	e7f5      	b.n	d73b0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d73c4:	8ac1      	ldrh	r1, [r0, #22]
   d73c6:	b901      	cbnz	r1, d73ca <_ZN9FatVolume4initEh+0xaa>
   d73c8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d73ca:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d73cc:	89c3      	ldrh	r3, [r0, #14]
   d73ce:	442b      	add	r3, r5
   d73d0:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d73d2:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d73d6:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d73d8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d73dc:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d73de:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d73e2:	0149      	lsls	r1, r1, #5
   d73e4:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d73e8:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d73ec:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d73ee:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d73f2:	b902      	cbnz	r2, d73f6 <_ZN9FatVolume4initEh+0xd6>
   d73f4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d73f6:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d73f8:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d73fa:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d73fc:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d73fe:	1c4b      	adds	r3, r1, #1
   d7400:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d7402:	f640 73f4 	movw	r3, #4084	; 0xff4
   d7406:	4299      	cmp	r1, r3
   d7408:	d802      	bhi.n	d7410 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d740a:	230c      	movs	r3, #12
   d740c:	71e3      	strb	r3, [r4, #7]
   d740e:	e79f      	b.n	d7350 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d7410:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d7414:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d7416:	bf85      	ittet	hi
   d7418:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d741a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d741c:	2310      	movls	r3, #16
    m_fatType = 32;
   d741e:	2320      	movhi	r3, #32
   d7420:	71e3      	strb	r3, [r4, #7]
  return true;
   d7422:	2001      	movs	r0, #1
   d7424:	e795      	b.n	d7352 <_ZN9FatVolume4initEh+0x32>
	...

000d7428 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d7428:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d742a:	4e0e      	ldr	r6, [pc, #56]	; (d7464 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d742c:	460d      	mov	r5, r1
   d742e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7430:	f000 fbb4 	bl	d7b9c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d7434:	6833      	ldr	r3, [r6, #0]
   d7436:	1ac0      	subs	r0, r0, r3
   d7438:	4b0b      	ldr	r3, [pc, #44]	; (d7468 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d743a:	4298      	cmp	r0, r3
   d743c:	d908      	bls.n	d7450 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d743e:	f000 fbb5 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7442:	4b0a      	ldr	r3, [pc, #40]	; (d746c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d7444:	6018      	str	r0, [r3, #0]
    		spark_process();
   d7446:	f000 fd7d 	bl	d7f44 <spark_process>
   d744a:	f000 fba7 	bl	d7b9c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d744e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7450:	f000 fbac 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d7454:	b280      	uxth	r0, r0
   d7456:	1b40      	subs	r0, r0, r5
}
   d7458:	42a0      	cmp	r0, r4
   d745a:	bfd4      	ite	le
   d745c:	2000      	movle	r0, #0
   d745e:	2001      	movgt	r0, #1
   d7460:	bd70      	pop	{r4, r5, r6, pc}
   d7462:	bf00      	nop
   d7464:	2003e540 	.word	0x2003e540
   d7468:	000186a0 	.word	0x000186a0
   d746c:	2003e738 	.word	0x2003e738

000d7470 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d7470:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d7472:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d7474:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d7476:	b94d      	cbnz	r5, d748c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d7478:	6840      	ldr	r0, [r0, #4]
   d747a:	f000 fa6b 	bl	d7954 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d747e:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7480:	4629      	mov	r1, r5
   d7482:	7d18      	ldrb	r0, [r3, #20]
   d7484:	f002 fcd1 	bl	d9e2a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d7488:	2301      	movs	r3, #1
   d748a:	7223      	strb	r3, [r4, #8]
  }
}
   d748c:	bd38      	pop	{r3, r4, r5, pc}

000d748e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d748e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d7490:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d7492:	4604      	mov	r4, r0
  if (m_spiActive) {
   d7494:	b16b      	cbz	r3, d74b2 <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d7496:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d7498:	2101      	movs	r1, #1
   d749a:	7d18      	ldrb	r0, [r3, #20]
   d749c:	f002 fcc5 	bl	d9e2a <digitalWrite>
     m_spiDriver->send(data);
   d74a0:	6860      	ldr	r0, [r4, #4]
   d74a2:	21ff      	movs	r1, #255	; 0xff
   d74a4:	f000 fa88 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d74a8:	6860      	ldr	r0, [r4, #4]
   d74aa:	f000 fa67 	bl	d797c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d74ae:	2300      	movs	r3, #0
   d74b0:	7223      	strb	r3, [r4, #8]
  }
}
   d74b2:	bd10      	pop	{r4, pc}

000d74b4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d74b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d74b6:	4604      	mov	r4, r0
   d74b8:	460d      	mov	r5, r1
   d74ba:	4616      	mov	r6, r2
   d74bc:	f000 fb76 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d74c0:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d74c2:	6860      	ldr	r0, [r4, #4]
   d74c4:	f000 fa5d 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d74c8:	28ff      	cmp	r0, #255	; 0xff
   d74ca:	7260      	strb	r0, [r4, #9]
   d74cc:	d10e      	bne.n	d74ec <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d74ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d74d2:	4639      	mov	r1, r7
   d74d4:	4620      	mov	r0, r4
   d74d6:	f7ff ffa7 	bl	d7428 <_ZN9SdSpiCard10isTimedOutEtt>
   d74da:	2800      	cmp	r0, #0
   d74dc:	d0f1      	beq.n	d74c2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d74de:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d74e0:	4620      	mov	r0, r4
   d74e2:	7023      	strb	r3, [r4, #0]
   d74e4:	f7ff ffd3 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d74e8:	2000      	movs	r0, #0
}
   d74ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d74ec:	28fe      	cmp	r0, #254	; 0xfe
   d74ee:	d001      	beq.n	d74f4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d74f0:	2350      	movs	r3, #80	; 0x50
   d74f2:	e7f5      	b.n	d74e0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d74f4:	6860      	ldr	r0, [r4, #4]
   d74f6:	4632      	mov	r2, r6
   d74f8:	4629      	mov	r1, r5
   d74fa:	f000 fa47 	bl	d798c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d74fe:	7260      	strb	r0, [r4, #9]
   d7500:	b108      	cbz	r0, d7506 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d7502:	2360      	movs	r3, #96	; 0x60
   d7504:	e7ec      	b.n	d74e0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d7506:	6860      	ldr	r0, [r4, #4]
   d7508:	f000 fa3b 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
   d750c:	6860      	ldr	r0, [r4, #4]
   d750e:	f000 fa38 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
   d7512:	2001      	movs	r0, #1
   d7514:	e7e9      	b.n	d74ea <_ZN9SdSpiCard8readDataEPhj+0x36>

000d7516 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d7516:	b570      	push	{r4, r5, r6, lr}
   d7518:	4604      	mov	r4, r0
   d751a:	460e      	mov	r6, r1
   d751c:	f000 fb46 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
   d7520:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d7522:	4632      	mov	r2, r6
   d7524:	4629      	mov	r1, r5
   d7526:	4620      	mov	r0, r4
   d7528:	f7ff ff7e 	bl	d7428 <_ZN9SdSpiCard10isTimedOutEtt>
   d752c:	b930      	cbnz	r0, d753c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d752e:	6860      	ldr	r0, [r4, #4]
   d7530:	f000 fa27 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d7534:	28ff      	cmp	r0, #255	; 0xff
   d7536:	d1f4      	bne.n	d7522 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d7538:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d753a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d753c:	2000      	movs	r0, #0
   d753e:	e7fc      	b.n	d753a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d7540 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d7542:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d7544:	9201      	str	r2, [sp, #4]
   d7546:	4604      	mov	r4, r0
   d7548:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d754a:	b90b      	cbnz	r3, d7550 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d754c:	f7ff ff90 	bl	d7470 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d7550:	b125      	cbz	r5, d755c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d7552:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d7556:	4620      	mov	r0, r4
   d7558:	f7ff ffdd 	bl	d7516 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d755c:	6860      	ldr	r0, [r4, #4]
   d755e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d7562:	f000 fa29 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
   d7566:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d7568:	af01      	add	r7, sp, #4
   d756a:	5db9      	ldrb	r1, [r7, r6]
   d756c:	6860      	ldr	r0, [r4, #4]
   d756e:	f000 fa23 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d7572:	3e01      	subs	r6, #1
   d7574:	d2f9      	bcs.n	d756a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d7576:	2d00      	cmp	r5, #0
   d7578:	6860      	ldr	r0, [r4, #4]
   d757a:	bf0c      	ite	eq
   d757c:	2195      	moveq	r1, #149	; 0x95
   d757e:	2187      	movne	r1, #135	; 0x87
   d7580:	f000 fa1a 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7584:	6860      	ldr	r0, [r4, #4]
   d7586:	f000 f9fc 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
   d758a:	250b      	movs	r5, #11
   d758c:	6860      	ldr	r0, [r4, #4]
   d758e:	f000 f9f8 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d7592:	0603      	lsls	r3, r0, #24
   d7594:	7260      	strb	r0, [r4, #9]
   d7596:	d503      	bpl.n	d75a0 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d7598:	3d01      	subs	r5, #1
   d759a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d759e:	d1f5      	bne.n	d758c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d75a0:	b003      	add	sp, #12
   d75a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d75a4 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d75a4:	b570      	push	{r4, r5, r6, lr}
   d75a6:	4604      	mov	r4, r0
   d75a8:	460d      	mov	r5, r1
   d75aa:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d75ac:	2137      	movs	r1, #55	; 0x37
   d75ae:	2200      	movs	r2, #0
   d75b0:	f7ff ffc6 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d75b4:	4632      	mov	r2, r6
   d75b6:	4629      	mov	r1, r5
   d75b8:	4620      	mov	r0, r4
  }
   d75ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d75be:	f7ff bfbf 	b.w	d7540 <_ZN9SdSpiCard11cardCommandEhm>
	...

000d75c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d75c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d75c8:	2500      	movs	r5, #0
   d75ca:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d75cc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d75ce:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d75d0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d75d2:	4604      	mov	r4, r0
   d75d4:	4690      	mov	r8, r2
   d75d6:	461e      	mov	r6, r3
   d75d8:	f000 fae8 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d75dc:	4641      	mov	r1, r8
   d75de:	4607      	mov	r7, r0
   d75e0:	6860      	ldr	r0, [r4, #4]
   d75e2:	f000 f9bb 	bl	d795c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d75e6:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d75e8:	4a49      	ldr	r2, [pc, #292]	; (d7710 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d75ea:	721d      	strb	r5, [r3, #8]
   d75ec:	2501      	movs	r5, #1
   d75ee:	60da      	str	r2, [r3, #12]
   d75f0:	821d      	strh	r5, [r3, #16]
  spiStart();
   d75f2:	4620      	mov	r0, r4
   d75f4:	f7ff ff3c 	bl	d7470 <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d75f8:	6863      	ldr	r3, [r4, #4]
   d75fa:	4629      	mov	r1, r5
   d75fc:	7d18      	ldrb	r0, [r3, #20]
   d75fe:	f002 fc14 	bl	d9e2a <digitalWrite>
   d7602:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d7604:	6860      	ldr	r0, [r4, #4]
   d7606:	21ff      	movs	r1, #255	; 0xff
   d7608:	3d01      	subs	r5, #1
   d760a:	f000 f9d5 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d760e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7612:	d1f7      	bne.n	d7604 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d7614:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d7616:	4629      	mov	r1, r5
   d7618:	7d18      	ldrb	r0, [r3, #20]
   d761a:	f002 fc06 	bl	d9e2a <digitalWrite>
  }
   d761e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d7620:	2200      	movs	r2, #0
   d7622:	4611      	mov	r1, r2
   d7624:	4620      	mov	r0, r4
   d7626:	f7ff ff8b 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d762a:	2801      	cmp	r0, #1
   d762c:	4680      	mov	r8, r0
   d762e:	d018      	beq.n	d7662 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d7630:	3d01      	subs	r5, #1
   d7632:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d7636:	d107      	bne.n	d7648 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d7638:	2320      	movs	r3, #32
  spiStop();
   d763a:	4620      	mov	r0, r4
   d763c:	7023      	strb	r3, [r4, #0]
   d763e:	f7ff ff26 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7642:	2000      	movs	r0, #0
}
   d7644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d7648:	6860      	ldr	r0, [r4, #4]
   d764a:	21fd      	movs	r1, #253	; 0xfd
   d764c:	f000 f9b4 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
   d7650:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d7654:	6860      	ldr	r0, [r4, #4]
   d7656:	f000 f994 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d765a:	f1b8 0801 	subs.w	r8, r8, #1
   d765e:	d1f9      	bne.n	d7654 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d7660:	e7de      	b.n	d7620 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d7662:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d7666:	2108      	movs	r1, #8
   d7668:	4620      	mov	r0, r4
   d766a:	f7ff ff69 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d766e:	2805      	cmp	r0, #5
   d7670:	d114      	bne.n	d769c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d7672:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d7676:	2500      	movs	r5, #0
   d7678:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d767a:	462a      	mov	r2, r5
   d767c:	2129      	movs	r1, #41	; 0x29
   d767e:	4620      	mov	r0, r4
   d7680:	f7ff ff90 	bl	d75a4 <_ZN9SdSpiCard8cardAcmdEhm>
   d7684:	4602      	mov	r2, r0
   d7686:	b1d8      	cbz	r0, d76c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d7688:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d768c:	4639      	mov	r1, r7
   d768e:	4620      	mov	r0, r4
   d7690:	f7ff feca 	bl	d7428 <_ZN9SdSpiCard10isTimedOutEtt>
   d7694:	2800      	cmp	r0, #0
   d7696:	d0f0      	beq.n	d767a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d7698:	2343      	movs	r3, #67	; 0x43
   d769a:	e7ce      	b.n	d763a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d769c:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d769e:	6860      	ldr	r0, [r4, #4]
   d76a0:	f000 f96f 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
   d76a4:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d76a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d76aa:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d76ac:	d1f7      	bne.n	d769e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d76ae:	28aa      	cmp	r0, #170	; 0xaa
   d76b0:	d104      	bne.n	d76bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d76b2:	2302      	movs	r3, #2
   d76b4:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d76b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d76ba:	e7dd      	b.n	d7678 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d76bc:	2325      	movs	r3, #37	; 0x25
   d76be:	e7bc      	b.n	d763a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d76c0:	7aa3      	ldrb	r3, [r4, #10]
   d76c2:	2b02      	cmp	r3, #2
   d76c4:	d118      	bne.n	d76f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d76c6:	213a      	movs	r1, #58	; 0x3a
   d76c8:	4620      	mov	r0, r4
   d76ca:	f7ff ff39 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d76ce:	b108      	cbz	r0, d76d4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d76d0:	2337      	movs	r3, #55	; 0x37
   d76d2:	e7b2      	b.n	d763a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d76d4:	6860      	ldr	r0, [r4, #4]
   d76d6:	f000 f954 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d76da:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d76de:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d76e0:	bf04      	itt	eq
   d76e2:	2303      	moveq	r3, #3
   d76e4:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d76e6:	6860      	ldr	r0, [r4, #4]
   d76e8:	f000 f94b 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
   d76ec:	6860      	ldr	r0, [r4, #4]
   d76ee:	f000 f948 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
   d76f2:	6860      	ldr	r0, [r4, #4]
   d76f4:	f000 f945 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d76f8:	4620      	mov	r0, r4
   d76fa:	f7ff fec8 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d76fe:	6863      	ldr	r3, [r4, #4]
   d7700:	7930      	ldrb	r0, [r6, #4]
   d7702:	68b1      	ldr	r1, [r6, #8]
   d7704:	89b2      	ldrh	r2, [r6, #12]
   d7706:	821a      	strh	r2, [r3, #16]
   d7708:	7218      	strb	r0, [r3, #8]
   d770a:	60d9      	str	r1, [r3, #12]
  return true;
   d770c:	2001      	movs	r0, #1
   d770e:	e799      	b.n	d7644 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d7710:	0003d090 	.word	0x0003d090

000d7714 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7714:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7716:	7a83      	ldrb	r3, [r0, #10]
   d7718:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d771a:	bf18      	it	ne
   d771c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d771e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d7720:	460a      	mov	r2, r1
   d7722:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d7724:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d7726:	f7ff ff0b 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d772a:	b130      	cbz	r0, d773a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d772c:	2330      	movs	r3, #48	; 0x30
   d772e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7730:	4620      	mov	r0, r4
   d7732:	f7ff feac 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7736:	2500      	movs	r5, #0
   d7738:	e00b      	b.n	d7752 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d773a:	4629      	mov	r1, r5
   d773c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d7740:	4620      	mov	r0, r4
   d7742:	f7ff feb7 	bl	d74b4 <_ZN9SdSpiCard8readDataEPhj>
   d7746:	4605      	mov	r5, r0
   d7748:	2800      	cmp	r0, #0
   d774a:	d0f1      	beq.n	d7730 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d774c:	4620      	mov	r0, r4
   d774e:	f7ff fe9e 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
}
   d7752:	4628      	mov	r0, r5
   d7754:	bd38      	pop	{r3, r4, r5, pc}

000d7756 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7756:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7758:	7a83      	ldrb	r3, [r0, #10]
   d775a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d775c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d775e:	bf18      	it	ne
   d7760:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d7762:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d7764:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d7766:	f7ff feeb 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d776a:	b130      	cbz	r0, d777a <_ZN9SdSpiCard9readStartEm+0x24>
   d776c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d776e:	4620      	mov	r0, r4
   d7770:	7023      	strb	r3, [r4, #0]
   d7772:	f7ff fe8c 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7776:	2000      	movs	r0, #0
}
   d7778:	bd10      	pop	{r4, pc}
  return true;
   d777a:	2001      	movs	r0, #1
   d777c:	e7fc      	b.n	d7778 <_ZN9SdSpiCard9readStartEm+0x22>

000d777e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d777e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d7780:	2200      	movs	r2, #0
   d7782:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d7784:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d7786:	f7ff fedb 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d778a:	b130      	cbz	r0, d779a <_ZN9SdSpiCard8readStopEv+0x1c>
   d778c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d778e:	4620      	mov	r0, r4
   d7790:	7023      	strb	r3, [r4, #0]
   d7792:	f7ff fe7c 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d7796:	2000      	movs	r0, #0
}
   d7798:	bd10      	pop	{r4, pc}
  spiStop();
   d779a:	4620      	mov	r0, r4
   d779c:	f7ff fe77 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d77a0:	2001      	movs	r0, #1
   d77a2:	e7f9      	b.n	d7798 <_ZN9SdSpiCard8readStopEv+0x1a>

000d77a4 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d77a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77a6:	4604      	mov	r4, r0
   d77a8:	4616      	mov	r6, r2
   d77aa:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d77ac:	f7ff ffd3 	bl	d7756 <_ZN9SdSpiCard9readStartEm>
   d77b0:	b168      	cbz	r0, d77ce <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d77b2:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d77b4:	b2ab      	uxth	r3, r5
   d77b6:	429f      	cmp	r7, r3
   d77b8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d77bc:	d909      	bls.n	d77d2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d77be:	f44f 7200 	mov.w	r2, #512	; 0x200
   d77c2:	4620      	mov	r0, r4
   d77c4:	f7ff fe76 	bl	d74b4 <_ZN9SdSpiCard8readDataEPhj>
   d77c8:	3501      	adds	r5, #1
   d77ca:	2800      	cmp	r0, #0
   d77cc:	d1f2      	bne.n	d77b4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d77ce:	2000      	movs	r0, #0
   d77d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d77d2:	4620      	mov	r0, r4
}
   d77d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d77d8:	f7ff bfd1 	b.w	d777e <_ZN9SdSpiCard8readStopEv>

000d77dc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d77dc:	b538      	push	{r3, r4, r5, lr}
   d77de:	4604      	mov	r4, r0
   d77e0:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d77e2:	6840      	ldr	r0, [r0, #4]
   d77e4:	f000 f8e8 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d77e8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d77ec:	6860      	ldr	r0, [r4, #4]
   d77ee:	4629      	mov	r1, r5
   d77f0:	f000 f8e6 	bl	d79c0 <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d77f4:	6860      	ldr	r0, [r4, #4]
   d77f6:	21ff      	movs	r1, #255	; 0xff
   d77f8:	f000 f8de 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
   d77fc:	6860      	ldr	r0, [r4, #4]
   d77fe:	21ff      	movs	r1, #255	; 0xff
   d7800:	f000 f8da 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d7804:	6860      	ldr	r0, [r4, #4]
   d7806:	f000 f8bc 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d780a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d780c:	f000 001f 	and.w	r0, r0, #31
   d7810:	2805      	cmp	r0, #5
   d7812:	d006      	beq.n	d7822 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d7814:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7816:	4620      	mov	r0, r4
   d7818:	7023      	strb	r3, [r4, #0]
   d781a:	f7ff fe38 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d781e:	2000      	movs	r0, #0
}
   d7820:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d7822:	2001      	movs	r0, #1
   d7824:	e7fc      	b.n	d7820 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d7826 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7826:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d7828:	7a83      	ldrb	r3, [r0, #10]
   d782a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d782c:	bf18      	it	ne
   d782e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7830:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d7832:	460a      	mov	r2, r1
   d7834:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d7836:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d7838:	f7ff fe82 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d783c:	4606      	mov	r6, r0
   d783e:	b130      	cbz	r0, d784e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d7840:	2332      	movs	r3, #50	; 0x32
   d7842:	7023      	strb	r3, [r4, #0]
  spiStop();
   d7844:	4620      	mov	r0, r4
   d7846:	f7ff fe22 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d784a:	2500      	movs	r5, #0
   d784c:	e01f      	b.n	d788e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d784e:	462a      	mov	r2, r5
   d7850:	21fe      	movs	r1, #254	; 0xfe
   d7852:	4620      	mov	r0, r4
   d7854:	f7ff ffc2 	bl	d77dc <_ZN9SdSpiCard9writeDataEhPKh>
   d7858:	2800      	cmp	r0, #0
   d785a:	d0f3      	beq.n	d7844 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d785c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d7860:	4620      	mov	r0, r4
   d7862:	f7ff fe58 	bl	d7516 <_ZN9SdSpiCard11waitNotBusyEt>
   d7866:	4605      	mov	r5, r0
   d7868:	b908      	cbnz	r0, d786e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d786a:	235a      	movs	r3, #90	; 0x5a
   d786c:	e7e9      	b.n	d7842 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d786e:	4632      	mov	r2, r6
   d7870:	210d      	movs	r1, #13
   d7872:	4620      	mov	r0, r4
   d7874:	f7ff fe64 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d7878:	b108      	cbz	r0, d787e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d787a:	2329      	movs	r3, #41	; 0x29
   d787c:	e7e1      	b.n	d7842 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d787e:	6860      	ldr	r0, [r4, #4]
   d7880:	f000 f87f 	bl	d7982 <_ZN14SdSpiAltDriver7receiveEv>
   d7884:	2800      	cmp	r0, #0
   d7886:	d1f8      	bne.n	d787a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d7888:	4620      	mov	r0, r4
   d788a:	f7ff fe00 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
}
   d788e:	4628      	mov	r0, r5
   d7890:	bd70      	pop	{r4, r5, r6, pc}

000d7892 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d7892:	b513      	push	{r0, r1, r4, lr}
   d7894:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7896:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d789a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d789c:	f7ff fe3b 	bl	d7516 <_ZN9SdSpiCard11waitNotBusyEt>
   d78a0:	9a01      	ldr	r2, [sp, #4]
   d78a2:	b930      	cbnz	r0, d78b2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d78a4:	235b      	movs	r3, #91	; 0x5b
   d78a6:	7023      	strb	r3, [r4, #0]
  spiStop();
   d78a8:	4620      	mov	r0, r4
   d78aa:	f7ff fdf0 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d78ae:	2000      	movs	r0, #0
   d78b0:	e005      	b.n	d78be <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d78b2:	21fc      	movs	r1, #252	; 0xfc
   d78b4:	4620      	mov	r0, r4
   d78b6:	f7ff ff91 	bl	d77dc <_ZN9SdSpiCard9writeDataEhPKh>
   d78ba:	2800      	cmp	r0, #0
   d78bc:	d0f4      	beq.n	d78a8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d78be:	b002      	add	sp, #8
   d78c0:	bd10      	pop	{r4, pc}

000d78c2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d78c2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d78c4:	7a83      	ldrb	r3, [r0, #10]
   d78c6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d78c8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d78ca:	bf18      	it	ne
   d78cc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d78ce:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d78d0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d78d2:	f7ff fe35 	bl	d7540 <_ZN9SdSpiCard11cardCommandEhm>
   d78d6:	b130      	cbz	r0, d78e6 <_ZN9SdSpiCard10writeStartEm+0x24>
   d78d8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d78da:	4620      	mov	r0, r4
   d78dc:	7023      	strb	r3, [r4, #0]
   d78de:	f7ff fdd6 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d78e2:	2000      	movs	r0, #0
}
   d78e4:	bd10      	pop	{r4, pc}
  return true;
   d78e6:	2001      	movs	r0, #1
   d78e8:	e7fc      	b.n	d78e4 <_ZN9SdSpiCard10writeStartEm+0x22>

000d78ea <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d78ea:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d78ec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d78f0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d78f2:	f7ff fe10 	bl	d7516 <_ZN9SdSpiCard11waitNotBusyEt>
   d78f6:	4605      	mov	r5, r0
   d78f8:	b930      	cbnz	r0, d7908 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d78fa:	2356      	movs	r3, #86	; 0x56
   d78fc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d78fe:	4620      	mov	r0, r4
   d7900:	f7ff fdc5 	bl	d748e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7904:	4628      	mov	r0, r5
   d7906:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d7908:	6860      	ldr	r0, [r4, #4]
   d790a:	21fd      	movs	r1, #253	; 0xfd
   d790c:	f000 f854 	bl	d79b8 <_ZN14SdSpiAltDriver4sendEh>
   d7910:	e7f5      	b.n	d78fe <_ZN9SdSpiCard9writeStopEv+0x14>

000d7912 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d7912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7914:	4604      	mov	r4, r0
   d7916:	4616      	mov	r6, r2
   d7918:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d791a:	f7ff ffd2 	bl	d78c2 <_ZN9SdSpiCard10writeStartEm>
   d791e:	b170      	cbz	r0, d793e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7920:	2500      	movs	r5, #0
   d7922:	42bd      	cmp	r5, r7
   d7924:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d7928:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d792a:	d004      	beq.n	d7936 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d792c:	f7ff ffb1 	bl	d7892 <_ZN9SdSpiCard9writeDataEPKh>
   d7930:	b128      	cbz	r0, d793e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d7932:	3501      	adds	r5, #1
   d7934:	e7f5      	b.n	d7922 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d7936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d793a:	f7ff bfd6 	b.w	d78ea <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d793e:	4620      	mov	r0, r4
   d7940:	f7ff fda5 	bl	d748e <_ZN9SdSpiCard7spiStopEv>
}
   d7944:	2000      	movs	r0, #0
   d7946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7948 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7948:	4b01      	ldr	r3, [pc, #4]	; (d7950 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d794a:	2201      	movs	r2, #1
   d794c:	701a      	strb	r2, [r3, #0]
}
   d794e:	4770      	bx	lr
   d7950:	2003e544 	.word	0x2003e544

000d7954 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7954:	1d01      	adds	r1, r0, #4
   d7956:	6800      	ldr	r0, [r0, #0]
   d7958:	f001 bb6e 	b.w	d9038 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d795c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d795c:	b510      	push	{r4, lr}
   d795e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d7960:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d7962:	6800      	ldr	r0, [r0, #0]
   d7964:	f001 fb2a 	bl	d8fbc <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7968:	7d20      	ldrb	r0, [r4, #20]
   d796a:	2101      	movs	r1, #1
   d796c:	f002 fa4c 	bl	d9e08 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d7970:	7d20      	ldrb	r0, [r4, #20]
   d7972:	2101      	movs	r1, #1
}
   d7974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d7978:	f002 ba57 	b.w	d9e2a <digitalWrite>

000d797c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d797c:	6800      	ldr	r0, [r0, #0]
   d797e:	f001 bb41 	b.w	d9004 <_ZN8SPIClass14endTransactionEv>

000d7982 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d7982:	6800      	ldr	r0, [r0, #0]
   d7984:	21ff      	movs	r1, #255	; 0xff
   d7986:	f001 bbc5 	b.w	d9114 <_ZN8SPIClass8transferEh>
	...

000d798c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d798e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7990:	4a07      	ldr	r2, [pc, #28]	; (d79b0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d7992:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7994:	2500      	movs	r5, #0
   d7996:	4c07      	ldr	r4, [pc, #28]	; (d79b4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7998:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d799a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d799c:	460a      	mov	r2, r1
   d799e:	4629      	mov	r1, r5
   d79a0:	f001 fbbe 	bl	d9120 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d79a4:	7823      	ldrb	r3, [r4, #0]
   d79a6:	2b00      	cmp	r3, #0
   d79a8:	d0fc      	beq.n	d79a4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d79aa:	2000      	movs	r0, #0
   d79ac:	b003      	add	sp, #12
   d79ae:	bd30      	pop	{r4, r5, pc}
   d79b0:	000d7949 	.word	0x000d7949
   d79b4:	2003e544 	.word	0x2003e544

000d79b8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d79b8:	6800      	ldr	r0, [r0, #0]
   d79ba:	f001 bbab 	b.w	d9114 <_ZN8SPIClass8transferEh>
	...

000d79c0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d79c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d79c2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d79c4:	4a06      	ldr	r2, [pc, #24]	; (d79e0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d79c6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d79c8:	2500      	movs	r5, #0
   d79ca:	4c06      	ldr	r4, [pc, #24]	; (d79e4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d79cc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d79ce:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d79d0:	462a      	mov	r2, r5
   d79d2:	f001 fba5 	bl	d9120 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d79d6:	7823      	ldrb	r3, [r4, #0]
   d79d8:	2b00      	cmp	r3, #0
   d79da:	d0fc      	beq.n	d79d6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d79dc:	b003      	add	sp, #12
   d79de:	bd30      	pop	{r4, r5, pc}
   d79e0:	000d7949 	.word	0x000d7949
   d79e4:	2003e544 	.word	0x2003e544

000d79e8 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d79e8:	b510      	push	{r4, lr}
   d79ea:	4b06      	ldr	r3, [pc, #24]	; (d7a04 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d79ec:	6003      	str	r3, [r0, #0]
   d79ee:	4604      	mov	r4, r0
	if (mutex) {
   d79f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d79f2:	b108      	cbz	r0, d79f8 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d79f4:	f000 f8aa 	bl	d7b4c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d79f8:	4620      	mov	r0, r4
   d79fa:	f7fd fce1 	bl	d53c0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d79fe:	4620      	mov	r0, r4
   d7a00:	bd10      	pop	{r4, pc}
   d7a02:	bf00      	nop
   d7a04:	000dda98 	.word	0x000dda98

000d7a08 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d7a08:	b510      	push	{r4, lr}
   d7a0a:	4604      	mov	r4, r0
}
   d7a0c:	f7ff ffec 	bl	d79e8 <_ZN16OledWingAdafruitD1Ev>
   d7a10:	4620      	mov	r0, r4
   d7a12:	2170      	movs	r1, #112	; 0x70
   d7a14:	f002 fa72 	bl	d9efc <_ZdlPvj>
   d7a18:	4620      	mov	r0, r4
   d7a1a:	bd10      	pop	{r4, pc}

000d7a1c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d7a1c:	b530      	push	{r4, r5, lr}
   d7a1e:	b085      	sub	sp, #20
   d7a20:	4604      	mov	r4, r0
   d7a22:	460d      	mov	r5, r1
   d7a24:	f002 fa46 	bl	d9eb4 <_Z19__fetch_global_Wirev>
   d7a28:	4a10      	ldr	r2, [pc, #64]	; (d7a6c <_ZN16OledWingAdafruitC1Ei+0x50>)
   d7a2a:	4911      	ldr	r1, [pc, #68]	; (d7a70 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d7a2c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d7a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7a34:	2180      	movs	r1, #128	; 0x80
   d7a36:	4603      	mov	r3, r0
   d7a38:	9200      	str	r2, [sp, #0]
   d7a3a:	4620      	mov	r0, r4
   d7a3c:	2220      	movs	r2, #32
   d7a3e:	f7fd fd45 	bl	d54cc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d7a42:	4b0c      	ldr	r3, [pc, #48]	; (d7a74 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d7a44:	6023      	str	r3, [r4, #0]
   d7a46:	2300      	movs	r3, #0
   d7a48:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d7a4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7a50:	f7fe f934 	bl	d5cbc <_ZN8DebounceC1Ev>
   d7a54:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7a58:	f7fe f930 	bl	d5cbc <_ZN8DebounceC1Ev>
   d7a5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7a60:	f7fe f92c 	bl	d5cbc <_ZN8DebounceC1Ev>
}
   d7a64:	4620      	mov	r0, r4
   d7a66:	b005      	add	sp, #20
   d7a68:	bd30      	pop	{r4, r5, pc}
   d7a6a:	bf00      	nop
   d7a6c:	00061a80 	.word	0x00061a80
   d7a70:	000186a0 	.word	0x000186a0
   d7a74:	000dda98 	.word	0x000dda98

000d7a78 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d7a78:	b513      	push	{r0, r1, r4, lr}
   d7a7a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d7a7c:	3050      	adds	r0, #80	; 0x50
   d7a7e:	f000 f85d 	bl	d7b3c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d7a82:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7a84:	07d9      	lsls	r1, r3, #31
   d7a86:	d505      	bpl.n	d7a94 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d7a88:	2202      	movs	r2, #2
   d7a8a:	2104      	movs	r1, #4
   d7a8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d7a90:	f7fe f928 	bl	d5ce4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d7a94:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7a96:	079a      	lsls	r2, r3, #30
   d7a98:	d505      	bpl.n	d7aa6 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d7a9a:	2200      	movs	r2, #0
   d7a9c:	2103      	movs	r1, #3
   d7a9e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d7aa2:	f7fe f91f 	bl	d5ce4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d7aa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d7aa8:	075b      	lsls	r3, r3, #29
   d7aaa:	d505      	bpl.n	d7ab8 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d7aac:	2202      	movs	r2, #2
   d7aae:	4611      	mov	r1, r2
   d7ab0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d7ab4:	f7fe f916 	bl	d5ce4 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d7ab8:	2301      	movs	r3, #1
   d7aba:	9300      	str	r3, [sp, #0]
   d7abc:	223c      	movs	r2, #60	; 0x3c
   d7abe:	2102      	movs	r1, #2
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	f7fd fe03 	bl	d56cc <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d7ac6:	b002      	add	sp, #8
   d7ac8:	bd10      	pop	{r4, pc}
	...

000d7acc <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7acc:	b508      	push	{r3, lr}
   d7ace:	4b02      	ldr	r3, [pc, #8]	; (d7ad8 <cellular_signal+0xc>)
   d7ad0:	681b      	ldr	r3, [r3, #0]
   d7ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ad4:	9301      	str	r3, [sp, #4]
   d7ad6:	bd08      	pop	{r3, pc}
   d7ad8:	00030274 	.word	0x00030274

000d7adc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7adc:	b508      	push	{r3, lr}
   d7ade:	4b02      	ldr	r3, [pc, #8]	; (d7ae8 <os_thread_yield+0xc>)
   d7ae0:	681b      	ldr	r3, [r3, #0]
   d7ae2:	68db      	ldr	r3, [r3, #12]
   d7ae4:	9301      	str	r3, [sp, #4]
   d7ae6:	bd08      	pop	{r3, pc}
   d7ae8:	00030248 	.word	0x00030248

000d7aec <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7aec:	b508      	push	{r3, lr}
   d7aee:	4b02      	ldr	r3, [pc, #8]	; (d7af8 <os_thread_scheduling+0xc>)
   d7af0:	681b      	ldr	r3, [r3, #0]
   d7af2:	69db      	ldr	r3, [r3, #28]
   d7af4:	9301      	str	r3, [sp, #4]
   d7af6:	bd08      	pop	{r3, pc}
   d7af8:	00030248 	.word	0x00030248

000d7afc <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7afc:	b508      	push	{r3, lr}
   d7afe:	4b02      	ldr	r3, [pc, #8]	; (d7b08 <os_timer_create+0xc>)
   d7b00:	681b      	ldr	r3, [r3, #0]
   d7b02:	6a1b      	ldr	r3, [r3, #32]
   d7b04:	9301      	str	r3, [sp, #4]
   d7b06:	bd08      	pop	{r3, pc}
   d7b08:	00030248 	.word	0x00030248

000d7b0c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7b0c:	b508      	push	{r3, lr}
   d7b0e:	4b02      	ldr	r3, [pc, #8]	; (d7b18 <os_timer_destroy+0xc>)
   d7b10:	681b      	ldr	r3, [r3, #0]
   d7b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7b14:	9301      	str	r3, [sp, #4]
   d7b16:	bd08      	pop	{r3, pc}
   d7b18:	00030248 	.word	0x00030248

000d7b1c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7b1c:	b508      	push	{r3, lr}
   d7b1e:	4b02      	ldr	r3, [pc, #8]	; (d7b28 <os_timer_get_id+0xc>)
   d7b20:	681b      	ldr	r3, [r3, #0]
   d7b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7b24:	9301      	str	r3, [sp, #4]
   d7b26:	bd08      	pop	{r3, pc}
   d7b28:	00030248 	.word	0x00030248

000d7b2c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7b2c:	b508      	push	{r3, lr}
   d7b2e:	4b02      	ldr	r3, [pc, #8]	; (d7b38 <os_timer_change+0xc>)
   d7b30:	681b      	ldr	r3, [r3, #0]
   d7b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7b34:	9301      	str	r3, [sp, #4]
   d7b36:	bd08      	pop	{r3, pc}
   d7b38:	00030248 	.word	0x00030248

000d7b3c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7b3c:	b508      	push	{r3, lr}
   d7b3e:	4b02      	ldr	r3, [pc, #8]	; (d7b48 <os_mutex_create+0xc>)
   d7b40:	681b      	ldr	r3, [r3, #0]
   d7b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b44:	9301      	str	r3, [sp, #4]
   d7b46:	bd08      	pop	{r3, pc}
   d7b48:	00030248 	.word	0x00030248

000d7b4c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d7b4c:	b508      	push	{r3, lr}
   d7b4e:	4b02      	ldr	r3, [pc, #8]	; (d7b58 <os_mutex_destroy+0xc>)
   d7b50:	681b      	ldr	r3, [r3, #0]
   d7b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7b54:	9301      	str	r3, [sp, #4]
   d7b56:	bd08      	pop	{r3, pc}
   d7b58:	00030248 	.word	0x00030248

000d7b5c <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7b5c:	b508      	push	{r3, lr}
   d7b5e:	4b02      	ldr	r3, [pc, #8]	; (d7b68 <os_mutex_recursive_create+0xc>)
   d7b60:	681b      	ldr	r3, [r3, #0]
   d7b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7b64:	9301      	str	r3, [sp, #4]
   d7b66:	bd08      	pop	{r3, pc}
   d7b68:	00030248 	.word	0x00030248

000d7b6c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7b6c:	b508      	push	{r3, lr}
   d7b6e:	4b02      	ldr	r3, [pc, #8]	; (d7b78 <os_timer_set_id+0xc>)
   d7b70:	681b      	ldr	r3, [r3, #0]
   d7b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7b74:	9301      	str	r3, [sp, #4]
   d7b76:	bd08      	pop	{r3, pc}
   d7b78:	00030248 	.word	0x00030248

000d7b7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7b7c:	b508      	push	{r3, lr}
   d7b7e:	4b02      	ldr	r3, [pc, #8]	; (d7b88 <HAL_RNG_GetRandomNumber+0xc>)
   d7b80:	681b      	ldr	r3, [r3, #0]
   d7b82:	685b      	ldr	r3, [r3, #4]
   d7b84:	9301      	str	r3, [sp, #4]
   d7b86:	bd08      	pop	{r3, pc}
   d7b88:	00030218 	.word	0x00030218

000d7b8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7b8c:	b508      	push	{r3, lr}
   d7b8e:	4b02      	ldr	r3, [pc, #8]	; (d7b98 <HAL_Delay_Microseconds+0xc>)
   d7b90:	681b      	ldr	r3, [r3, #0]
   d7b92:	68db      	ldr	r3, [r3, #12]
   d7b94:	9301      	str	r3, [sp, #4]
   d7b96:	bd08      	pop	{r3, pc}
   d7b98:	00030218 	.word	0x00030218

000d7b9c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7b9c:	b508      	push	{r3, lr}
   d7b9e:	4b02      	ldr	r3, [pc, #8]	; (d7ba8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7ba0:	681b      	ldr	r3, [r3, #0]
   d7ba2:	691b      	ldr	r3, [r3, #16]
   d7ba4:	9301      	str	r3, [sp, #4]
   d7ba6:	bd08      	pop	{r3, pc}
   d7ba8:	00030218 	.word	0x00030218

000d7bac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7bac:	b508      	push	{r3, lr}
   d7bae:	4b02      	ldr	r3, [pc, #8]	; (d7bb8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7bb0:	681b      	ldr	r3, [r3, #0]
   d7bb2:	695b      	ldr	r3, [r3, #20]
   d7bb4:	9301      	str	r3, [sp, #4]
   d7bb6:	bd08      	pop	{r3, pc}
   d7bb8:	00030218 	.word	0x00030218

000d7bbc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7bbc:	b508      	push	{r3, lr}
   d7bbe:	4b02      	ldr	r3, [pc, #8]	; (d7bc8 <hal_rtc_time_is_valid+0xc>)
   d7bc0:	681b      	ldr	r3, [r3, #0]
   d7bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7bc4:	9301      	str	r3, [sp, #4]
   d7bc6:	bd08      	pop	{r3, pc}
   d7bc8:	00030218 	.word	0x00030218

000d7bcc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7bcc:	b508      	push	{r3, lr}
   d7bce:	4b02      	ldr	r3, [pc, #8]	; (d7bd8 <hal_rtc_get_time+0xc>)
   d7bd0:	681b      	ldr	r3, [r3, #0]
   d7bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7bd4:	9301      	str	r3, [sp, #4]
   d7bd6:	bd08      	pop	{r3, pc}
   d7bd8:	00030218 	.word	0x00030218

000d7bdc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7bdc:	b508      	push	{r3, lr}
   d7bde:	4b02      	ldr	r3, [pc, #8]	; (d7be8 <HAL_Pin_Mode+0xc>)
   d7be0:	681b      	ldr	r3, [r3, #0]
   d7be2:	689b      	ldr	r3, [r3, #8]
   d7be4:	9301      	str	r3, [sp, #4]
   d7be6:	bd08      	pop	{r3, pc}
   d7be8:	0003022c 	.word	0x0003022c

000d7bec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7bec:	b508      	push	{r3, lr}
   d7bee:	4b02      	ldr	r3, [pc, #8]	; (d7bf8 <HAL_Get_Pin_Mode+0xc>)
   d7bf0:	681b      	ldr	r3, [r3, #0]
   d7bf2:	68db      	ldr	r3, [r3, #12]
   d7bf4:	9301      	str	r3, [sp, #4]
   d7bf6:	bd08      	pop	{r3, pc}
   d7bf8:	0003022c 	.word	0x0003022c

000d7bfc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7bfc:	b508      	push	{r3, lr}
   d7bfe:	4b02      	ldr	r3, [pc, #8]	; (d7c08 <HAL_GPIO_Write+0xc>)
   d7c00:	681b      	ldr	r3, [r3, #0]
   d7c02:	691b      	ldr	r3, [r3, #16]
   d7c04:	9301      	str	r3, [sp, #4]
   d7c06:	bd08      	pop	{r3, pc}
   d7c08:	0003022c 	.word	0x0003022c

000d7c0c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7c0c:	b508      	push	{r3, lr}
   d7c0e:	4b02      	ldr	r3, [pc, #8]	; (d7c18 <HAL_GPIO_Read+0xc>)
   d7c10:	681b      	ldr	r3, [r3, #0]
   d7c12:	695b      	ldr	r3, [r3, #20]
   d7c14:	9301      	str	r3, [sp, #4]
   d7c16:	bd08      	pop	{r3, pc}
   d7c18:	0003022c 	.word	0x0003022c

000d7c1c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d7c1c:	b508      	push	{r3, lr}
   d7c1e:	4b02      	ldr	r3, [pc, #8]	; (d7c28 <hal_i2c_set_speed+0xc>)
   d7c20:	681b      	ldr	r3, [r3, #0]
   d7c22:	681b      	ldr	r3, [r3, #0]
   d7c24:	9301      	str	r3, [sp, #4]
   d7c26:	bd08      	pop	{r3, pc}
   d7c28:	00030228 	.word	0x00030228

000d7c2c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7c2c:	b508      	push	{r3, lr}
   d7c2e:	4b02      	ldr	r3, [pc, #8]	; (d7c38 <hal_i2c_begin+0xc>)
   d7c30:	681b      	ldr	r3, [r3, #0]
   d7c32:	68db      	ldr	r3, [r3, #12]
   d7c34:	9301      	str	r3, [sp, #4]
   d7c36:	bd08      	pop	{r3, pc}
   d7c38:	00030228 	.word	0x00030228

000d7c3c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7c3c:	b508      	push	{r3, lr}
   d7c3e:	4b02      	ldr	r3, [pc, #8]	; (d7c48 <hal_i2c_begin_transmission+0xc>)
   d7c40:	681b      	ldr	r3, [r3, #0]
   d7c42:	699b      	ldr	r3, [r3, #24]
   d7c44:	9301      	str	r3, [sp, #4]
   d7c46:	bd08      	pop	{r3, pc}
   d7c48:	00030228 	.word	0x00030228

000d7c4c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7c4c:	b508      	push	{r3, lr}
   d7c4e:	4b02      	ldr	r3, [pc, #8]	; (d7c58 <hal_i2c_end_transmission+0xc>)
   d7c50:	681b      	ldr	r3, [r3, #0]
   d7c52:	69db      	ldr	r3, [r3, #28]
   d7c54:	9301      	str	r3, [sp, #4]
   d7c56:	bd08      	pop	{r3, pc}
   d7c58:	00030228 	.word	0x00030228

000d7c5c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7c5c:	b508      	push	{r3, lr}
   d7c5e:	4b02      	ldr	r3, [pc, #8]	; (d7c68 <hal_i2c_write+0xc>)
   d7c60:	681b      	ldr	r3, [r3, #0]
   d7c62:	6a1b      	ldr	r3, [r3, #32]
   d7c64:	9301      	str	r3, [sp, #4]
   d7c66:	bd08      	pop	{r3, pc}
   d7c68:	00030228 	.word	0x00030228

000d7c6c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7c6c:	b508      	push	{r3, lr}
   d7c6e:	4b02      	ldr	r3, [pc, #8]	; (d7c78 <hal_i2c_available+0xc>)
   d7c70:	681b      	ldr	r3, [r3, #0]
   d7c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c74:	9301      	str	r3, [sp, #4]
   d7c76:	bd08      	pop	{r3, pc}
   d7c78:	00030228 	.word	0x00030228

000d7c7c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7c7c:	b508      	push	{r3, lr}
   d7c7e:	4b02      	ldr	r3, [pc, #8]	; (d7c88 <hal_i2c_read+0xc>)
   d7c80:	681b      	ldr	r3, [r3, #0]
   d7c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7c84:	9301      	str	r3, [sp, #4]
   d7c86:	bd08      	pop	{r3, pc}
   d7c88:	00030228 	.word	0x00030228

000d7c8c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7c8c:	b508      	push	{r3, lr}
   d7c8e:	4b02      	ldr	r3, [pc, #8]	; (d7c98 <hal_i2c_peek+0xc>)
   d7c90:	681b      	ldr	r3, [r3, #0]
   d7c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c94:	9301      	str	r3, [sp, #4]
   d7c96:	bd08      	pop	{r3, pc}
   d7c98:	00030228 	.word	0x00030228

000d7c9c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7c9c:	b508      	push	{r3, lr}
   d7c9e:	4b02      	ldr	r3, [pc, #8]	; (d7ca8 <hal_i2c_flush+0xc>)
   d7ca0:	681b      	ldr	r3, [r3, #0]
   d7ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ca4:	9301      	str	r3, [sp, #4]
   d7ca6:	bd08      	pop	{r3, pc}
   d7ca8:	00030228 	.word	0x00030228

000d7cac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7cac:	b508      	push	{r3, lr}
   d7cae:	4b02      	ldr	r3, [pc, #8]	; (d7cb8 <hal_i2c_is_enabled+0xc>)
   d7cb0:	681b      	ldr	r3, [r3, #0]
   d7cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7cb4:	9301      	str	r3, [sp, #4]
   d7cb6:	bd08      	pop	{r3, pc}
   d7cb8:	00030228 	.word	0x00030228

000d7cbc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7cbc:	b508      	push	{r3, lr}
   d7cbe:	4b02      	ldr	r3, [pc, #8]	; (d7cc8 <hal_i2c_init+0xc>)
   d7cc0:	681b      	ldr	r3, [r3, #0]
   d7cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7cc4:	9301      	str	r3, [sp, #4]
   d7cc6:	bd08      	pop	{r3, pc}
   d7cc8:	00030228 	.word	0x00030228

000d7ccc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7ccc:	b508      	push	{r3, lr}
   d7cce:	4b02      	ldr	r3, [pc, #8]	; (d7cd8 <inet_inet_ntop+0xc>)
   d7cd0:	681b      	ldr	r3, [r3, #0]
   d7cd2:	695b      	ldr	r3, [r3, #20]
   d7cd4:	9301      	str	r3, [sp, #4]
   d7cd6:	bd08      	pop	{r3, pc}
   d7cd8:	00030264 	.word	0x00030264

000d7cdc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7cdc:	b508      	push	{r3, lr}
   d7cde:	4b02      	ldr	r3, [pc, #8]	; (d7ce8 <netdb_freeaddrinfo+0xc>)
   d7ce0:	681b      	ldr	r3, [r3, #0]
   d7ce2:	689b      	ldr	r3, [r3, #8]
   d7ce4:	9301      	str	r3, [sp, #4]
   d7ce6:	bd08      	pop	{r3, pc}
   d7ce8:	00030268 	.word	0x00030268

000d7cec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7cec:	b508      	push	{r3, lr}
   d7cee:	4b02      	ldr	r3, [pc, #8]	; (d7cf8 <netdb_getaddrinfo+0xc>)
   d7cf0:	681b      	ldr	r3, [r3, #0]
   d7cf2:	68db      	ldr	r3, [r3, #12]
   d7cf4:	9301      	str	r3, [sp, #4]
   d7cf6:	bd08      	pop	{r3, pc}
   d7cf8:	00030268 	.word	0x00030268

000d7cfc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7cfc:	b508      	push	{r3, lr}
   d7cfe:	4b02      	ldr	r3, [pc, #8]	; (d7d08 <hal_spi_begin+0xc>)
   d7d00:	681b      	ldr	r3, [r3, #0]
   d7d02:	681b      	ldr	r3, [r3, #0]
   d7d04:	9301      	str	r3, [sp, #4]
   d7d06:	bd08      	pop	{r3, pc}
   d7d08:	00030230 	.word	0x00030230

000d7d0c <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d7d0c:	b508      	push	{r3, lr}
   d7d0e:	4b02      	ldr	r3, [pc, #8]	; (d7d18 <hal_spi_set_data_mode+0xc>)
   d7d10:	681b      	ldr	r3, [r3, #0]
   d7d12:	68db      	ldr	r3, [r3, #12]
   d7d14:	9301      	str	r3, [sp, #4]
   d7d16:	bd08      	pop	{r3, pc}
   d7d18:	00030230 	.word	0x00030230

000d7d1c <hal_spi_transfer>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7d1c:	b508      	push	{r3, lr}
   d7d1e:	4b02      	ldr	r3, [pc, #8]	; (d7d28 <hal_spi_transfer+0xc>)
   d7d20:	681b      	ldr	r3, [r3, #0]
   d7d22:	695b      	ldr	r3, [r3, #20]
   d7d24:	9301      	str	r3, [sp, #4]
   d7d26:	bd08      	pop	{r3, pc}
   d7d28:	00030230 	.word	0x00030230

000d7d2c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7d2c:	b508      	push	{r3, lr}
   d7d2e:	4b02      	ldr	r3, [pc, #8]	; (d7d38 <hal_spi_init+0xc>)
   d7d30:	681b      	ldr	r3, [r3, #0]
   d7d32:	69db      	ldr	r3, [r3, #28]
   d7d34:	9301      	str	r3, [sp, #4]
   d7d36:	bd08      	pop	{r3, pc}
   d7d38:	00030230 	.word	0x00030230

000d7d3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7d3c:	b508      	push	{r3, lr}
   d7d3e:	4b02      	ldr	r3, [pc, #8]	; (d7d48 <hal_spi_is_enabled+0xc>)
   d7d40:	681b      	ldr	r3, [r3, #0]
   d7d42:	6a1b      	ldr	r3, [r3, #32]
   d7d44:	9301      	str	r3, [sp, #4]
   d7d46:	bd08      	pop	{r3, pc}
   d7d48:	00030230 	.word	0x00030230

000d7d4c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7d4c:	b508      	push	{r3, lr}
   d7d4e:	4b02      	ldr	r3, [pc, #8]	; (d7d58 <hal_spi_info+0xc>)
   d7d50:	681b      	ldr	r3, [r3, #0]
   d7d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7d54:	9301      	str	r3, [sp, #4]
   d7d56:	bd08      	pop	{r3, pc}
   d7d58:	00030230 	.word	0x00030230

000d7d5c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7d5c:	b508      	push	{r3, lr}
   d7d5e:	4b02      	ldr	r3, [pc, #8]	; (d7d68 <hal_spi_transfer_dma+0xc>)
   d7d60:	681b      	ldr	r3, [r3, #0]
   d7d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7d64:	9301      	str	r3, [sp, #4]
   d7d66:	bd08      	pop	{r3, pc}
   d7d68:	00030230 	.word	0x00030230

000d7d6c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7d6c:	b508      	push	{r3, lr}
   d7d6e:	4b02      	ldr	r3, [pc, #8]	; (d7d78 <hal_spi_transfer_dma_status+0xc>)
   d7d70:	681b      	ldr	r3, [r3, #0]
   d7d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7d74:	9301      	str	r3, [sp, #4]
   d7d76:	bd08      	pop	{r3, pc}
   d7d78:	00030230 	.word	0x00030230

000d7d7c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7d7c:	b508      	push	{r3, lr}
   d7d7e:	4b02      	ldr	r3, [pc, #8]	; (d7d88 <hal_spi_set_settings+0xc>)
   d7d80:	681b      	ldr	r3, [r3, #0]
   d7d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7d84:	9301      	str	r3, [sp, #4]
   d7d86:	bd08      	pop	{r3, pc}
   d7d88:	00030230 	.word	0x00030230

000d7d8c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7d8c:	b508      	push	{r3, lr}
   d7d8e:	4b02      	ldr	r3, [pc, #8]	; (d7d98 <hal_spi_acquire+0xc>)
   d7d90:	681b      	ldr	r3, [r3, #0]
   d7d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7d94:	9301      	str	r3, [sp, #4]
   d7d96:	bd08      	pop	{r3, pc}
   d7d98:	00030230 	.word	0x00030230

000d7d9c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7d9c:	b508      	push	{r3, lr}
   d7d9e:	4b02      	ldr	r3, [pc, #8]	; (d7da8 <hal_spi_release+0xc>)
   d7da0:	681b      	ldr	r3, [r3, #0]
   d7da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7da4:	9301      	str	r3, [sp, #4]
   d7da6:	bd08      	pop	{r3, pc}
   d7da8:	00030230 	.word	0x00030230

000d7dac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7dac:	b508      	push	{r3, lr}
   d7dae:	4b02      	ldr	r3, [pc, #8]	; (d7db8 <hal_usart_init+0xc>)
   d7db0:	681b      	ldr	r3, [r3, #0]
   d7db2:	681b      	ldr	r3, [r3, #0]
   d7db4:	9301      	str	r3, [sp, #4]
   d7db6:	bd08      	pop	{r3, pc}
   d7db8:	0003023c 	.word	0x0003023c

000d7dbc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7dbc:	b508      	push	{r3, lr}
   d7dbe:	4b02      	ldr	r3, [pc, #8]	; (d7dc8 <hal_usart_write+0xc>)
   d7dc0:	681b      	ldr	r3, [r3, #0]
   d7dc2:	68db      	ldr	r3, [r3, #12]
   d7dc4:	9301      	str	r3, [sp, #4]
   d7dc6:	bd08      	pop	{r3, pc}
   d7dc8:	0003023c 	.word	0x0003023c

000d7dcc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7dcc:	b508      	push	{r3, lr}
   d7dce:	4b02      	ldr	r3, [pc, #8]	; (d7dd8 <hal_usart_available+0xc>)
   d7dd0:	681b      	ldr	r3, [r3, #0]
   d7dd2:	691b      	ldr	r3, [r3, #16]
   d7dd4:	9301      	str	r3, [sp, #4]
   d7dd6:	bd08      	pop	{r3, pc}
   d7dd8:	0003023c 	.word	0x0003023c

000d7ddc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7ddc:	b508      	push	{r3, lr}
   d7dde:	4b02      	ldr	r3, [pc, #8]	; (d7de8 <hal_usart_read+0xc>)
   d7de0:	681b      	ldr	r3, [r3, #0]
   d7de2:	695b      	ldr	r3, [r3, #20]
   d7de4:	9301      	str	r3, [sp, #4]
   d7de6:	bd08      	pop	{r3, pc}
   d7de8:	0003023c 	.word	0x0003023c

000d7dec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7dec:	b508      	push	{r3, lr}
   d7dee:	4b02      	ldr	r3, [pc, #8]	; (d7df8 <hal_usart_peek+0xc>)
   d7df0:	681b      	ldr	r3, [r3, #0]
   d7df2:	699b      	ldr	r3, [r3, #24]
   d7df4:	9301      	str	r3, [sp, #4]
   d7df6:	bd08      	pop	{r3, pc}
   d7df8:	0003023c 	.word	0x0003023c

000d7dfc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7dfc:	b508      	push	{r3, lr}
   d7dfe:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <hal_usart_flush+0xc>)
   d7e00:	681b      	ldr	r3, [r3, #0]
   d7e02:	69db      	ldr	r3, [r3, #28]
   d7e04:	9301      	str	r3, [sp, #4]
   d7e06:	bd08      	pop	{r3, pc}
   d7e08:	0003023c 	.word	0x0003023c

000d7e0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7e0c:	b508      	push	{r3, lr}
   d7e0e:	4b02      	ldr	r3, [pc, #8]	; (d7e18 <hal_usart_is_enabled+0xc>)
   d7e10:	681b      	ldr	r3, [r3, #0]
   d7e12:	6a1b      	ldr	r3, [r3, #32]
   d7e14:	9301      	str	r3, [sp, #4]
   d7e16:	bd08      	pop	{r3, pc}
   d7e18:	0003023c 	.word	0x0003023c

000d7e1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7e1c:	b508      	push	{r3, lr}
   d7e1e:	4b02      	ldr	r3, [pc, #8]	; (d7e28 <hal_usart_available_data_for_write+0xc>)
   d7e20:	681b      	ldr	r3, [r3, #0]
   d7e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e24:	9301      	str	r3, [sp, #4]
   d7e26:	bd08      	pop	{r3, pc}
   d7e28:	0003023c 	.word	0x0003023c

000d7e2c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7e2c:	b508      	push	{r3, lr}
   d7e2e:	4b02      	ldr	r3, [pc, #8]	; (d7e38 <hal_usart_begin_config+0xc>)
   d7e30:	681b      	ldr	r3, [r3, #0]
   d7e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e34:	9301      	str	r3, [sp, #4]
   d7e36:	bd08      	pop	{r3, pc}
   d7e38:	0003023c 	.word	0x0003023c

000d7e3c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7e3c:	b508      	push	{r3, lr}
   d7e3e:	4b02      	ldr	r3, [pc, #8]	; (d7e48 <HAL_USB_USART_Init+0xc>)
   d7e40:	681b      	ldr	r3, [r3, #0]
   d7e42:	681b      	ldr	r3, [r3, #0]
   d7e44:	9301      	str	r3, [sp, #4]
   d7e46:	bd08      	pop	{r3, pc}
   d7e48:	0003024c 	.word	0x0003024c

000d7e4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7e4c:	b508      	push	{r3, lr}
   d7e4e:	4b02      	ldr	r3, [pc, #8]	; (d7e58 <HAL_USB_USART_Begin+0xc>)
   d7e50:	681b      	ldr	r3, [r3, #0]
   d7e52:	685b      	ldr	r3, [r3, #4]
   d7e54:	9301      	str	r3, [sp, #4]
   d7e56:	bd08      	pop	{r3, pc}
   d7e58:	0003024c 	.word	0x0003024c

000d7e5c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7e5c:	b508      	push	{r3, lr}
   d7e5e:	4b02      	ldr	r3, [pc, #8]	; (d7e68 <HAL_USB_USART_Available_Data+0xc>)
   d7e60:	681b      	ldr	r3, [r3, #0]
   d7e62:	691b      	ldr	r3, [r3, #16]
   d7e64:	9301      	str	r3, [sp, #4]
   d7e66:	bd08      	pop	{r3, pc}
   d7e68:	0003024c 	.word	0x0003024c

000d7e6c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7e6c:	b508      	push	{r3, lr}
   d7e6e:	4b02      	ldr	r3, [pc, #8]	; (d7e78 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7e70:	681b      	ldr	r3, [r3, #0]
   d7e72:	695b      	ldr	r3, [r3, #20]
   d7e74:	9301      	str	r3, [sp, #4]
   d7e76:	bd08      	pop	{r3, pc}
   d7e78:	0003024c 	.word	0x0003024c

000d7e7c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7e7c:	b508      	push	{r3, lr}
   d7e7e:	4b02      	ldr	r3, [pc, #8]	; (d7e88 <HAL_USB_USART_Receive_Data+0xc>)
   d7e80:	681b      	ldr	r3, [r3, #0]
   d7e82:	699b      	ldr	r3, [r3, #24]
   d7e84:	9301      	str	r3, [sp, #4]
   d7e86:	bd08      	pop	{r3, pc}
   d7e88:	0003024c 	.word	0x0003024c

000d7e8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7e8c:	b508      	push	{r3, lr}
   d7e8e:	4b02      	ldr	r3, [pc, #8]	; (d7e98 <HAL_USB_USART_Send_Data+0xc>)
   d7e90:	681b      	ldr	r3, [r3, #0]
   d7e92:	69db      	ldr	r3, [r3, #28]
   d7e94:	9301      	str	r3, [sp, #4]
   d7e96:	bd08      	pop	{r3, pc}
   d7e98:	0003024c 	.word	0x0003024c

000d7e9c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7e9c:	b508      	push	{r3, lr}
   d7e9e:	4b02      	ldr	r3, [pc, #8]	; (d7ea8 <HAL_USB_USART_Flush_Data+0xc>)
   d7ea0:	681b      	ldr	r3, [r3, #0]
   d7ea2:	6a1b      	ldr	r3, [r3, #32]
   d7ea4:	9301      	str	r3, [sp, #4]
   d7ea6:	bd08      	pop	{r3, pc}
   d7ea8:	0003024c 	.word	0x0003024c

000d7eac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7eac:	b508      	push	{r3, lr}
   d7eae:	4b02      	ldr	r3, [pc, #8]	; (d7eb8 <panic_+0xc>)
   d7eb0:	681b      	ldr	r3, [r3, #0]
   d7eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7eb4:	9301      	str	r3, [sp, #4]
   d7eb6:	bd08      	pop	{r3, pc}
   d7eb8:	00030260 	.word	0x00030260

000d7ebc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7ebc:	b508      	push	{r3, lr}
   d7ebe:	4b02      	ldr	r3, [pc, #8]	; (d7ec8 <system_mode+0xc>)
   d7ec0:	681b      	ldr	r3, [r3, #0]
   d7ec2:	681b      	ldr	r3, [r3, #0]
   d7ec4:	9301      	str	r3, [sp, #4]
   d7ec6:	bd08      	pop	{r3, pc}
   d7ec8:	00030220 	.word	0x00030220

000d7ecc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7ecc:	b508      	push	{r3, lr}
   d7ece:	4b02      	ldr	r3, [pc, #8]	; (d7ed8 <set_system_mode+0xc>)
   d7ed0:	681b      	ldr	r3, [r3, #0]
   d7ed2:	685b      	ldr	r3, [r3, #4]
   d7ed4:	9301      	str	r3, [sp, #4]
   d7ed6:	bd08      	pop	{r3, pc}
   d7ed8:	00030220 	.word	0x00030220

000d7edc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7edc:	b508      	push	{r3, lr}
   d7ede:	4b02      	ldr	r3, [pc, #8]	; (d7ee8 <system_delay_ms+0xc>)
   d7ee0:	681b      	ldr	r3, [r3, #0]
   d7ee2:	695b      	ldr	r3, [r3, #20]
   d7ee4:	9301      	str	r3, [sp, #4]
   d7ee6:	bd08      	pop	{r3, pc}
   d7ee8:	00030220 	.word	0x00030220

000d7eec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7eec:	b508      	push	{r3, lr}
   d7eee:	4b02      	ldr	r3, [pc, #8]	; (d7ef8 <application_thread_current+0xc>)
   d7ef0:	681b      	ldr	r3, [r3, #0]
   d7ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ef4:	9301      	str	r3, [sp, #4]
   d7ef6:	bd08      	pop	{r3, pc}
   d7ef8:	00030220 	.word	0x00030220

000d7efc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7efc:	b508      	push	{r3, lr}
   d7efe:	4b02      	ldr	r3, [pc, #8]	; (d7f08 <application_thread_invoke+0xc>)
   d7f00:	681b      	ldr	r3, [r3, #0]
   d7f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7f04:	9301      	str	r3, [sp, #4]
   d7f06:	bd08      	pop	{r3, pc}
   d7f08:	00030220 	.word	0x00030220

000d7f0c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7f0c:	b508      	push	{r3, lr}
   d7f0e:	4b02      	ldr	r3, [pc, #8]	; (d7f18 <system_thread_get_state+0xc>)
   d7f10:	681b      	ldr	r3, [r3, #0]
   d7f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7f14:	9301      	str	r3, [sp, #4]
   d7f16:	bd08      	pop	{r3, pc}
   d7f18:	00030220 	.word	0x00030220

000d7f1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7f1c:	b508      	push	{r3, lr}
   d7f1e:	4b03      	ldr	r3, [pc, #12]	; (d7f2c <system_ctrl_set_app_request_handler+0x10>)
   d7f20:	681b      	ldr	r3, [r3, #0]
   d7f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7f26:	9301      	str	r3, [sp, #4]
   d7f28:	bd08      	pop	{r3, pc}
   d7f2a:	0000      	.short	0x0000
   d7f2c:	00030220 	.word	0x00030220

000d7f30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b03      	ldr	r3, [pc, #12]	; (d7f40 <system_ctrl_set_result+0x10>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7f3a:	9301      	str	r3, [sp, #4]
   d7f3c:	bd08      	pop	{r3, pc}
   d7f3e:	0000      	.short	0x0000
   d7f40:	00030220 	.word	0x00030220

000d7f44 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <spark_process+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	689b      	ldr	r3, [r3, #8]
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	00030244 	.word	0x00030244

000d7f54 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <spark_cloud_flag_connected+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	695b      	ldr	r3, [r3, #20]
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	00030244 	.word	0x00030244

000d7f64 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <spark_deviceID+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	69db      	ldr	r3, [r3, #28]
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	00030244 	.word	0x00030244

000d7f74 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <spark_send_event+0xc>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	6a1b      	ldr	r3, [r3, #32]
   d7f7c:	9301      	str	r3, [sp, #4]
   d7f7e:	bd08      	pop	{r3, pc}
   d7f80:	00030244 	.word	0x00030244

000d7f84 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7f84:	b508      	push	{r3, lr}
   d7f86:	4b02      	ldr	r3, [pc, #8]	; (d7f90 <spark_sync_time_pending+0xc>)
   d7f88:	681b      	ldr	r3, [r3, #0]
   d7f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f8c:	9301      	str	r3, [sp, #4]
   d7f8e:	bd08      	pop	{r3, pc}
   d7f90:	00030244 	.word	0x00030244

000d7f94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7f94:	b508      	push	{r3, lr}
   d7f96:	4b02      	ldr	r3, [pc, #8]	; (d7fa0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7f98:	681b      	ldr	r3, [r3, #0]
   d7f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7f9c:	9301      	str	r3, [sp, #4]
   d7f9e:	bd08      	pop	{r3, pc}
   d7fa0:	00030244 	.word	0x00030244

000d7fa4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7fa4:	b508      	push	{r3, lr}
   d7fa6:	4b02      	ldr	r3, [pc, #8]	; (d7fb0 <network_connect+0xc>)
   d7fa8:	681b      	ldr	r3, [r3, #0]
   d7faa:	685b      	ldr	r3, [r3, #4]
   d7fac:	9301      	str	r3, [sp, #4]
   d7fae:	bd08      	pop	{r3, pc}
   d7fb0:	00030240 	.word	0x00030240

000d7fb4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7fb4:	b508      	push	{r3, lr}
   d7fb6:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <network_connecting+0xc>)
   d7fb8:	681b      	ldr	r3, [r3, #0]
   d7fba:	689b      	ldr	r3, [r3, #8]
   d7fbc:	9301      	str	r3, [sp, #4]
   d7fbe:	bd08      	pop	{r3, pc}
   d7fc0:	00030240 	.word	0x00030240

000d7fc4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b02      	ldr	r3, [pc, #8]	; (d7fd0 <network_disconnect+0xc>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	68db      	ldr	r3, [r3, #12]
   d7fcc:	9301      	str	r3, [sp, #4]
   d7fce:	bd08      	pop	{r3, pc}
   d7fd0:	00030240 	.word	0x00030240

000d7fd4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7fd4:	b508      	push	{r3, lr}
   d7fd6:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <network_ready+0xc>)
   d7fd8:	681b      	ldr	r3, [r3, #0]
   d7fda:	691b      	ldr	r3, [r3, #16]
   d7fdc:	9301      	str	r3, [sp, #4]
   d7fde:	bd08      	pop	{r3, pc}
   d7fe0:	00030240 	.word	0x00030240

000d7fe4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7fe4:	b508      	push	{r3, lr}
   d7fe6:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <network_on+0xc>)
   d7fe8:	681b      	ldr	r3, [r3, #0]
   d7fea:	695b      	ldr	r3, [r3, #20]
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	bd08      	pop	{r3, pc}
   d7ff0:	00030240 	.word	0x00030240

000d7ff4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7ff4:	b508      	push	{r3, lr}
   d7ff6:	4b02      	ldr	r3, [pc, #8]	; (d8000 <network_off+0xc>)
   d7ff8:	681b      	ldr	r3, [r3, #0]
   d7ffa:	699b      	ldr	r3, [r3, #24]
   d7ffc:	9301      	str	r3, [sp, #4]
   d7ffe:	bd08      	pop	{r3, pc}
   d8000:	00030240 	.word	0x00030240

000d8004 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8004:	b508      	push	{r3, lr}
   d8006:	4b02      	ldr	r3, [pc, #8]	; (d8010 <network_listen+0xc>)
   d8008:	681b      	ldr	r3, [r3, #0]
   d800a:	69db      	ldr	r3, [r3, #28]
   d800c:	9301      	str	r3, [sp, #4]
   d800e:	bd08      	pop	{r3, pc}
   d8010:	00030240 	.word	0x00030240

000d8014 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8014:	b508      	push	{r3, lr}
   d8016:	4b02      	ldr	r3, [pc, #8]	; (d8020 <network_listening+0xc>)
   d8018:	681b      	ldr	r3, [r3, #0]
   d801a:	6a1b      	ldr	r3, [r3, #32]
   d801c:	9301      	str	r3, [sp, #4]
   d801e:	bd08      	pop	{r3, pc}
   d8020:	00030240 	.word	0x00030240

000d8024 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8024:	b508      	push	{r3, lr}
   d8026:	4b02      	ldr	r3, [pc, #8]	; (d8030 <network_set_listen_timeout+0xc>)
   d8028:	681b      	ldr	r3, [r3, #0]
   d802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d802c:	9301      	str	r3, [sp, #4]
   d802e:	bd08      	pop	{r3, pc}
   d8030:	00030240 	.word	0x00030240

000d8034 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8034:	b508      	push	{r3, lr}
   d8036:	4b02      	ldr	r3, [pc, #8]	; (d8040 <network_get_listen_timeout+0xc>)
   d8038:	681b      	ldr	r3, [r3, #0]
   d803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d803c:	9301      	str	r3, [sp, #4]
   d803e:	bd08      	pop	{r3, pc}
   d8040:	00030240 	.word	0x00030240

000d8044 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8044:	b508      	push	{r3, lr}
   d8046:	4b02      	ldr	r3, [pc, #8]	; (d8050 <network_is_on+0xc>)
   d8048:	681b      	ldr	r3, [r3, #0]
   d804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	bd08      	pop	{r3, pc}
   d8050:	00030240 	.word	0x00030240

000d8054 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8054:	b508      	push	{r3, lr}
   d8056:	4b02      	ldr	r3, [pc, #8]	; (d8060 <network_is_off+0xc>)
   d8058:	681b      	ldr	r3, [r3, #0]
   d805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d805c:	9301      	str	r3, [sp, #4]
   d805e:	bd08      	pop	{r3, pc}
   d8060:	00030240 	.word	0x00030240

000d8064 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8064:	b508      	push	{r3, lr}
   d8066:	4b02      	ldr	r3, [pc, #8]	; (d8070 <malloc+0xc>)
   d8068:	681b      	ldr	r3, [r3, #0]
   d806a:	681b      	ldr	r3, [r3, #0]
   d806c:	9301      	str	r3, [sp, #4]
   d806e:	bd08      	pop	{r3, pc}
   d8070:	0003021c 	.word	0x0003021c

000d8074 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8074:	b508      	push	{r3, lr}
   d8076:	4b02      	ldr	r3, [pc, #8]	; (d8080 <free+0xc>)
   d8078:	681b      	ldr	r3, [r3, #0]
   d807a:	685b      	ldr	r3, [r3, #4]
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	bd08      	pop	{r3, pc}
   d8080:	0003021c 	.word	0x0003021c

000d8084 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8084:	b508      	push	{r3, lr}
   d8086:	4b02      	ldr	r3, [pc, #8]	; (d8090 <realloc+0xc>)
   d8088:	681b      	ldr	r3, [r3, #0]
   d808a:	689b      	ldr	r3, [r3, #8]
   d808c:	9301      	str	r3, [sp, #4]
   d808e:	bd08      	pop	{r3, pc}
   d8090:	0003021c 	.word	0x0003021c

000d8094 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8094:	b508      	push	{r3, lr}
   d8096:	4b02      	ldr	r3, [pc, #8]	; (d80a0 <siprintf+0xc>)
   d8098:	681b      	ldr	r3, [r3, #0]
   d809a:	691b      	ldr	r3, [r3, #16]
   d809c:	9301      	str	r3, [sp, #4]
   d809e:	bd08      	pop	{r3, pc}
   d80a0:	0003021c 	.word	0x0003021c

000d80a4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d80a4:	b508      	push	{r3, lr}
   d80a6:	4b02      	ldr	r3, [pc, #8]	; (d80b0 <snprintf+0xc>)
   d80a8:	681b      	ldr	r3, [r3, #0]
   d80aa:	69db      	ldr	r3, [r3, #28]
   d80ac:	9301      	str	r3, [sp, #4]
   d80ae:	bd08      	pop	{r3, pc}
   d80b0:	0003021c 	.word	0x0003021c

000d80b4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d80b4:	b508      	push	{r3, lr}
   d80b6:	4b02      	ldr	r3, [pc, #8]	; (d80c0 <vsnprintf+0xc>)
   d80b8:	681b      	ldr	r3, [r3, #0]
   d80ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d80bc:	9301      	str	r3, [sp, #4]
   d80be:	bd08      	pop	{r3, pc}
   d80c0:	0003021c 	.word	0x0003021c

000d80c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d80c4:	b508      	push	{r3, lr}
   d80c6:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <abort+0xc>)
   d80c8:	681b      	ldr	r3, [r3, #0]
   d80ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d80cc:	9301      	str	r3, [sp, #4]
   d80ce:	bd08      	pop	{r3, pc}
   d80d0:	0003021c 	.word	0x0003021c

000d80d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d80d4:	b508      	push	{r3, lr}
   d80d6:	4b02      	ldr	r3, [pc, #8]	; (d80e0 <_malloc_r+0xc>)
   d80d8:	681b      	ldr	r3, [r3, #0]
   d80da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d80dc:	9301      	str	r3, [sp, #4]
   d80de:	bd08      	pop	{r3, pc}
   d80e0:	0003021c 	.word	0x0003021c

000d80e4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d80e4:	b508      	push	{r3, lr}
   d80e6:	4b02      	ldr	r3, [pc, #8]	; (d80f0 <newlib_impure_ptr_callback+0xc>)
   d80e8:	681b      	ldr	r3, [r3, #0]
   d80ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d80ec:	9301      	str	r3, [sp, #4]
   d80ee:	bd08      	pop	{r3, pc}
   d80f0:	0003021c 	.word	0x0003021c

000d80f4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d80f4:	b508      	push	{r3, lr}
   d80f6:	4b02      	ldr	r3, [pc, #8]	; (d8100 <strftime+0xc>)
   d80f8:	681b      	ldr	r3, [r3, #0]
   d80fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d80fc:	9301      	str	r3, [sp, #4]
   d80fe:	bd08      	pop	{r3, pc}
   d8100:	0003021c 	.word	0x0003021c

000d8104 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8104:	b508      	push	{r3, lr}
   d8106:	4b02      	ldr	r3, [pc, #8]	; (d8110 <localtime_r+0xc>)
   d8108:	681b      	ldr	r3, [r3, #0]
   d810a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d810c:	9301      	str	r3, [sp, #4]
   d810e:	bd08      	pop	{r3, pc}
   d8110:	0003021c 	.word	0x0003021c

000d8114 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8114:	2100      	movs	r1, #0
   d8116:	f7ff bee1 	b.w	d7edc <system_delay_ms>

000d811a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d811a:	b510      	push	{r4, lr}
      if (_M_empty())
   d811c:	6883      	ldr	r3, [r0, #8]
   d811e:	4604      	mov	r4, r0
   d8120:	b90b      	cbnz	r3, d8126 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8122:	f001 feef 	bl	d9f04 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8126:	68c3      	ldr	r3, [r0, #12]
   d8128:	4798      	blx	r3
      if (_M_manager)
   d812a:	68a3      	ldr	r3, [r4, #8]
   d812c:	b11b      	cbz	r3, d8136 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d812e:	2203      	movs	r2, #3
   d8130:	4621      	mov	r1, r4
   d8132:	4620      	mov	r0, r4
   d8134:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8136:	4620      	mov	r0, r4
   d8138:	2110      	movs	r1, #16
}
   d813a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d813e:	f001 bedd 	b.w	d9efc <_ZdlPvj>

000d8142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8142:	680b      	ldr	r3, [r1, #0]
   d8144:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d8146:	b113      	cbz	r3, d814e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8148:	685a      	ldr	r2, [r3, #4]
   d814a:	3201      	adds	r2, #1
   d814c:	605a      	str	r2, [r3, #4]
      }
   d814e:	4770      	bx	lr

000d8150 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8150:	4802      	ldr	r0, [pc, #8]	; (d815c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d8152:	2300      	movs	r3, #0
   d8154:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8156:	f7ff bd01 	b.w	d7b5c <os_mutex_recursive_create>
   d815a:	bf00      	nop
   d815c:	2003e548 	.word	0x2003e548

000d8160 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8160:	2200      	movs	r2, #0
   d8162:	6840      	ldr	r0, [r0, #4]
   d8164:	4611      	mov	r1, r2
   d8166:	f7ff bf35 	b.w	d7fd4 <network_ready>

000d816a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d816a:	2200      	movs	r2, #0
   d816c:	6840      	ldr	r0, [r0, #4]
   d816e:	4611      	mov	r1, r2
   d8170:	f7ff bf50 	b.w	d8014 <network_listening>

000d8174 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8174:	2200      	movs	r2, #0
   d8176:	6840      	ldr	r0, [r0, #4]
   d8178:	4611      	mov	r1, r2
   d817a:	f7ff bf5b 	b.w	d8034 <network_get_listen_timeout>

000d817e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d817e:	6840      	ldr	r0, [r0, #4]
   d8180:	2200      	movs	r2, #0
   d8182:	f7ff bf4f 	b.w	d8024 <network_set_listen_timeout>

000d8186 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8186:	6840      	ldr	r0, [r0, #4]
   d8188:	2200      	movs	r2, #0
   d818a:	f081 0101 	eor.w	r1, r1, #1
   d818e:	f7ff bf39 	b.w	d8004 <network_listen>

000d8192 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8192:	2300      	movs	r3, #0
   d8194:	6840      	ldr	r0, [r0, #4]
   d8196:	461a      	mov	r2, r3
   d8198:	4619      	mov	r1, r3
   d819a:	f7ff bf2b 	b.w	d7ff4 <network_off>

000d819e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d819e:	2300      	movs	r3, #0
   d81a0:	6840      	ldr	r0, [r0, #4]
   d81a2:	461a      	mov	r2, r3
   d81a4:	4619      	mov	r1, r3
   d81a6:	f7ff bf1d 	b.w	d7fe4 <network_on>

000d81aa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d81aa:	2200      	movs	r2, #0
   d81ac:	6840      	ldr	r0, [r0, #4]
   d81ae:	4611      	mov	r1, r2
   d81b0:	f7ff bf00 	b.w	d7fb4 <network_connecting>

000d81b4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d81b4:	6840      	ldr	r0, [r0, #4]
   d81b6:	2200      	movs	r2, #0
   d81b8:	2102      	movs	r1, #2
   d81ba:	f7ff bf03 	b.w	d7fc4 <network_disconnect>

000d81be <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d81be:	2300      	movs	r3, #0
   d81c0:	6840      	ldr	r0, [r0, #4]
   d81c2:	461a      	mov	r2, r3
   d81c4:	f7ff beee 	b.w	d7fa4 <network_connect>

000d81c8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d81c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d81ca:	4b1b      	ldr	r3, [pc, #108]	; (d8238 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d81cc:	6003      	str	r3, [r0, #0]
   d81ce:	2500      	movs	r5, #0
   d81d0:	460f      	mov	r7, r1
   d81d2:	3330      	adds	r3, #48	; 0x30
   d81d4:	2618      	movs	r6, #24
   d81d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d81da:	b089      	sub	sp, #36	; 0x24
   d81dc:	6043      	str	r3, [r0, #4]
   d81de:	4632      	mov	r2, r6
   d81e0:	4629      	mov	r1, r5
   d81e2:	4604      	mov	r4, r0
   d81e4:	3010      	adds	r0, #16
   d81e6:	f002 fd7e 	bl	dace6 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d81ea:	6878      	ldr	r0, [r7, #4]
   d81ec:	462a      	mov	r2, r5
   d81ee:	4629      	mov	r1, r5
   d81f0:	f7ff fef0 	bl	d7fd4 <network_ready>
   d81f4:	b918      	cbnz	r0, d81fe <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d81f6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d81f8:	4620      	mov	r0, r4
   d81fa:	b009      	add	sp, #36	; 0x24
   d81fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d81fe:	4629      	mov	r1, r5
   d8200:	4632      	mov	r2, r6
   d8202:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d8204:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d8208:	f002 fd6d 	bl	dace6 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d820c:	a902      	add	r1, sp, #8
   d820e:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8210:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8214:	f7ff fc5a 	bl	d7acc <cellular_signal>
   d8218:	b110      	cbz	r0, d8220 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d821a:	2301      	movs	r3, #1
   d821c:	60a3      	str	r3, [r4, #8]
            return sig;
   d821e:	e7eb      	b.n	d81f8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8220:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8222:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d8224:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d8226:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8228:	b90b      	cbnz	r3, d822e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d822a:	2302      	movs	r3, #2
   d822c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d822e:	a902      	add	r1, sp, #8
   d8230:	4620      	mov	r0, r4
   d8232:	f000 f8c0 	bl	d83b6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d8236:	e7df      	b.n	d81f8 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d8238:	000ddb2c 	.word	0x000ddb2c

000d823c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d823c:	4b08      	ldr	r3, [pc, #32]	; (d8260 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d823e:	b510      	push	{r4, lr}
   d8240:	2428      	movs	r4, #40	; 0x28
   d8242:	4622      	mov	r2, r4
   d8244:	4618      	mov	r0, r3
   d8246:	2100      	movs	r1, #0
   d8248:	f002 fd4d 	bl	dace6 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d824c:	4b05      	ldr	r3, [pc, #20]	; (d8264 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d824e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8254:	6042      	str	r2, [r0, #4]
   d8256:	2204      	movs	r2, #4
   d8258:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d825a:	4a03      	ldr	r2, [pc, #12]	; (d8268 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d825c:	601a      	str	r2, [r3, #0]
   d825e:	bd10      	pop	{r4, pc}
   d8260:	2003e554 	.word	0x2003e554
   d8264:	2003e54c 	.word	0x2003e54c
   d8268:	000ddaf0 	.word	0x000ddaf0

000d826c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d826c:	4770      	bx	lr

000d826e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d826e:	7d00      	ldrb	r0, [r0, #20]
   d8270:	4770      	bx	lr

000d8272 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d8272:	7d03      	ldrb	r3, [r0, #20]
   d8274:	b14b      	cbz	r3, d828a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d8276:	6983      	ldr	r3, [r0, #24]
   d8278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d827c:	d005      	beq.n	d828a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d827e:	6a00      	ldr	r0, [r0, #32]
   d8280:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d8284:	bf18      	it	ne
   d8286:	2001      	movne	r0, #1
   d8288:	4770      	bx	lr
   d828a:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d828c:	4770      	bx	lr

000d828e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d828e:	6803      	ldr	r3, [r0, #0]
   d8290:	6a1b      	ldr	r3, [r3, #32]
   d8292:	4718      	bx	r3

000d8294 <_ZN14CellularSignalD0Ev>:
   d8294:	b510      	push	{r4, lr}
   d8296:	2128      	movs	r1, #40	; 0x28
   d8298:	4604      	mov	r4, r0
   d829a:	f001 fe2f 	bl	d9efc <_ZdlPvj>
   d829e:	4620      	mov	r0, r4
   d82a0:	bd10      	pop	{r4, pc}
	...

000d82a4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d82a4:	7d03      	ldrb	r3, [r0, #20]
   d82a6:	b17b      	cbz	r3, d82c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d82a8:	69c3      	ldr	r3, [r0, #28]
   d82aa:	2b00      	cmp	r3, #0
   d82ac:	db0c      	blt.n	d82c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d82ae:	ee07 3a90 	vmov	s15, r3
   d82b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; d82d0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d82b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d82ba:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d82be:	eddf 7a05 	vldr	s15, [pc, #20]	; d82d4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d82c2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d82c6:	4770      	bx	lr
    return -1.0f;
   d82c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d82cc:	4770      	bx	lr
   d82ce:	bf00      	nop
   d82d0:	477fff00 	.word	0x477fff00
   d82d4:	42c80000 	.word	0x42c80000

000d82d8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d82d8:	7d03      	ldrb	r3, [r0, #20]
   d82da:	b163      	cbz	r3, d82f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d82dc:	6983      	ldr	r3, [r0, #24]
   d82de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d82e2:	d008      	beq.n	d82f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d82e4:	ee07 3a90 	vmov	s15, r3
   d82e8:	ed9f 7a04 	vldr	s14, [pc, #16]	; d82fc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d82ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d82f0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d82f4:	4770      	bx	lr
    return 0.0f;
   d82f6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8300 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d82fa:	4770      	bx	lr
   d82fc:	42c80000 	.word	0x42c80000
   d8300:	00000000 	.word	0x00000000

000d8304 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8304:	7d03      	ldrb	r3, [r0, #20]
   d8306:	b17b      	cbz	r3, d8328 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8308:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d830a:	2b00      	cmp	r3, #0
   d830c:	db0c      	blt.n	d8328 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d830e:	ee07 3a90 	vmov	s15, r3
   d8312:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8330 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d831a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d831e:	eddf 7a05 	vldr	s15, [pc, #20]	; d8334 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8322:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8326:	4770      	bx	lr
    return -1.0f;
   d8328:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d832c:	4770      	bx	lr
   d832e:	bf00      	nop
   d8330:	477fff00 	.word	0x477fff00
   d8334:	42c80000 	.word	0x42c80000

000d8338 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8338:	7d03      	ldrb	r3, [r0, #20]
   d833a:	b163      	cbz	r3, d8356 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d833c:	6a03      	ldr	r3, [r0, #32]
   d833e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8342:	d008      	beq.n	d8356 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8344:	ee07 3a90 	vmov	s15, r3
   d8348:	ed9f 7a04 	vldr	s14, [pc, #16]	; d835c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d834c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8350:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8354:	4770      	bx	lr
    return 0.0f;
   d8356:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8360 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d835a:	4770      	bx	lr
   d835c:	42c80000 	.word	0x42c80000
   d8360:	00000000 	.word	0x00000000

000d8364 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8364:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d8366:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8368:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d836a:	da0a      	bge.n	d8382 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d836c:	212d      	movs	r1, #45	; 0x2d
   d836e:	f000 fcb5 	bl	d8cdc <_ZN5Print5printEc>
            val = -n;
   d8372:	4261      	negs	r1, r4
            t = print('-');
   d8374:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8376:	220a      	movs	r2, #10
   d8378:	4630      	mov	r0, r6
   d837a:	f000 fcc8 	bl	d8d0e <_ZN5Print11printNumberEmh>
    }
}
   d837e:	4428      	add	r0, r5
   d8380:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d8382:	4621      	mov	r1, r4
        size_t t = 0;
   d8384:	2500      	movs	r5, #0
   d8386:	e7f6      	b.n	d8376 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8388 <_ZNK14CellularSignal7printToER5Print>:
{
   d8388:	b570      	push	{r4, r5, r6, lr}
   d838a:	460c      	mov	r4, r1
   d838c:	4605      	mov	r5, r0
   d838e:	6881      	ldr	r1, [r0, #8]
   d8390:	4620      	mov	r0, r4
   d8392:	f7ff ffe7 	bl	d8364 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d8396:	212c      	movs	r1, #44	; 0x2c
   d8398:	4606      	mov	r6, r0
   d839a:	4620      	mov	r0, r4
   d839c:	f000 fc9e 	bl	d8cdc <_ZN5Print5printEc>
   d83a0:	68e9      	ldr	r1, [r5, #12]
   d83a2:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d83a4:	4620      	mov	r0, r4
   d83a6:	f7ff ffdd 	bl	d8364 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d83aa:	4430      	add	r0, r6
   d83ac:	bd70      	pop	{r4, r5, r6, pc}

000d83ae <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d83ae:	f1a0 0004 	sub.w	r0, r0, #4
   d83b2:	f7ff bfe9 	b.w	d8388 <_ZNK14CellularSignal7printToER5Print>

000d83b6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d83b6:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d83b8:	460d      	mov	r5, r1
   d83ba:	f100 0410 	add.w	r4, r0, #16
   d83be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83c2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d83c6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d83ca:	2001      	movs	r0, #1
   d83cc:	bd30      	pop	{r4, r5, pc}

000d83ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d83ce:	4770      	bx	lr

000d83d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d83d0:	2000      	movs	r0, #0
   d83d2:	4770      	bx	lr

000d83d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d83d4:	b510      	push	{r4, lr}
   d83d6:	2110      	movs	r1, #16
   d83d8:	4604      	mov	r4, r0
   d83da:	f001 fd8f 	bl	d9efc <_ZdlPvj>
   d83de:	4620      	mov	r0, r4
   d83e0:	bd10      	pop	{r4, pc}

000d83e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d83e2:	b508      	push	{r3, lr}
      { delete this; }
   d83e4:	f7ff fff6 	bl	d83d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d83e8:	bd08      	pop	{r3, pc}

000d83ea <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d83ea:	b530      	push	{r4, r5, lr}
        type_(type) {
   d83ec:	2200      	movs	r2, #0
   d83ee:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d83f2:	6002      	str	r2, [r0, #0]
   d83f4:	8084      	strh	r4, [r0, #4]
   d83f6:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d83f8:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d83fa:	680c      	ldr	r4, [r1, #0]
   d83fc:	8085      	strh	r5, [r0, #4]
   d83fe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8400:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8402:	bd30      	pop	{r4, r5, pc}

000d8404 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8404:	b510      	push	{r4, lr}
   d8406:	4604      	mov	r4, r0
    free((void*)msg_);
   d8408:	6800      	ldr	r0, [r0, #0]
   d840a:	f7ff fe33 	bl	d8074 <free>
}
   d840e:	4620      	mov	r0, r4
   d8410:	bd10      	pop	{r4, pc}

000d8412 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8412:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8414:	68c4      	ldr	r4, [r0, #12]
   d8416:	b1f4      	cbz	r4, d8456 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d8418:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d841a:	2b02      	cmp	r3, #2
   d841c:	d103      	bne.n	d8426 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d841e:	f104 000c 	add.w	r0, r4, #12
   d8422:	f7ff ffef 	bl	d8404 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8426:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8428:	b135      	cbz	r5, d8438 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d842a:	4628      	mov	r0, r5
   d842c:	f7fb ff0a 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
   d8430:	2110      	movs	r1, #16
   d8432:	4628      	mov	r0, r5
   d8434:	f001 fd62 	bl	d9efc <_ZdlPvj>
   d8438:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d843a:	b135      	cbz	r5, d844a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d843c:	4628      	mov	r0, r5
   d843e:	f7fb ff01 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
   d8442:	2110      	movs	r1, #16
   d8444:	4628      	mov	r0, r5
   d8446:	f001 fd59 	bl	d9efc <_ZdlPvj>
   d844a:	4620      	mov	r0, r4
   d844c:	2114      	movs	r1, #20
   d844e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8452:	f001 bd53 	b.w	d9efc <_ZdlPvj>
   d8456:	bd38      	pop	{r3, r4, r5, pc}

000d8458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8458:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d845a:	460e      	mov	r6, r1
   d845c:	4604      	mov	r4, r0
   d845e:	f856 3b04 	ldr.w	r3, [r6], #4
   d8462:	9300      	str	r3, [sp, #0]
   d8464:	460d      	mov	r5, r1
   d8466:	a801      	add	r0, sp, #4
   d8468:	4631      	mov	r1, r6
   d846a:	f7ff fe6a 	bl	d8142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d846e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8470:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8472:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8474:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8476:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8478:	2300      	movs	r3, #0
   d847a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d847c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d847e:	f7fb ff6b 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8482:	4630      	mov	r0, r6
   d8484:	f7fb ff68 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8488:	4628      	mov	r0, r5
   d848a:	2108      	movs	r1, #8
   d848c:	f001 fd36 	bl	d9efc <_ZdlPvj>
        return p;
    }
   d8490:	4620      	mov	r0, r4
   d8492:	b002      	add	sp, #8
   d8494:	bd70      	pop	{r4, r5, r6, pc}

000d8496 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d8496:	b513      	push	{r0, r1, r4, lr}
   d8498:	460b      	mov	r3, r1
   d849a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d849c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d84a0:	466c      	mov	r4, sp
   d84a2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d84a6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d84aa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d84ae:	e894 0003 	ldmia.w	r4, {r0, r1}
   d84b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d84b6:	b002      	add	sp, #8
   d84b8:	bd10      	pop	{r4, pc}

000d84ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d84ba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d84bc:	b510      	push	{r4, lr}
      if (_M_empty())
   d84be:	b90a      	cbnz	r2, d84c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d84c0:	f001 fd20 	bl	d9f04 <_ZSt25__throw_bad_function_callv>
    }
   d84c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d84c8:	68c3      	ldr	r3, [r0, #12]
   d84ca:	4718      	bx	r3

000d84cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d84cc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d84ce:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d84d0:	f100 0110 	add.w	r1, r0, #16
   d84d4:	f7ff fff1 	bl	d84ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d84d8:	bd08      	pop	{r3, pc}

000d84da <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d84da:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d84dc:	b510      	push	{r4, lr}
      if (_M_empty())
   d84de:	b90a      	cbnz	r2, d84e4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d84e0:	f001 fd10 	bl	d9f04 <_ZSt25__throw_bad_function_callv>
    }
   d84e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d84e8:	68c3      	ldr	r3, [r0, #12]
   d84ea:	4718      	bx	r3

000d84ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d84ec:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d84ee:	6800      	ldr	r0, [r0, #0]
   d84f0:	f100 0110 	add.w	r1, r0, #16
   d84f4:	f7ff fff1 	bl	d84da <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d84f8:	bd08      	pop	{r3, pc}
	...

000d84fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d84fc:	b538      	push	{r3, r4, r5, lr}
   d84fe:	2300      	movs	r3, #0
   d8500:	4604      	mov	r4, r0
   d8502:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8504:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8506:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8508:	f7fb fdc5 	bl	d4096 <_Znwj>
   d850c:	b128      	cbz	r0, d851a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d850e:	2301      	movs	r3, #1
   d8510:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8514:	4b02      	ldr	r3, [pc, #8]	; (d8520 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8516:	6003      	str	r3, [r0, #0]
   d8518:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d851a:	6020      	str	r0, [r4, #0]
	}
   d851c:	4620      	mov	r0, r4
   d851e:	bd38      	pop	{r3, r4, r5, pc}
   d8520:	000ddb68 	.word	0x000ddb68

000d8524 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8524:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8526:	2300      	movs	r3, #0
   d8528:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d852a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d852c:	4604      	mov	r4, r0
   d852e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8530:	b12b      	cbz	r3, d853e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8532:	2202      	movs	r2, #2
   d8534:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8536:	68eb      	ldr	r3, [r5, #12]
   d8538:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d853a:	68ab      	ldr	r3, [r5, #8]
   d853c:	60a3      	str	r3, [r4, #8]
    }
   d853e:	4620      	mov	r0, r4
   d8540:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8544 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8544:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8546:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8548:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d854a:	4668      	mov	r0, sp
   d854c:	f7ff ff4d 	bl	d83ea <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8550:	f04f 0302 	mov.w	r3, #2
   d8554:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8558:	2a00      	cmp	r2, #0
   d855a:	d103      	bne.n	d8564 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d855c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8560:	2900      	cmp	r1, #0
   d8562:	d1f7      	bne.n	d8554 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8564:	d125      	bne.n	d85b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8566:	f104 050c 	add.w	r5, r4, #12
   d856a:	4669      	mov	r1, sp
   d856c:	4628      	mov	r0, r5
   d856e:	f7ff ff3c 	bl	d83ea <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8572:	f3bf 8f5b 	dmb	ish
   d8576:	2301      	movs	r3, #1
   d8578:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d857a:	2000      	movs	r0, #0
   d857c:	f104 0308 	add.w	r3, r4, #8
   d8580:	f3bf 8f5b 	dmb	ish
   d8584:	e853 6f00 	ldrex	r6, [r3]
   d8588:	e843 0200 	strex	r2, r0, [r3]
   d858c:	2a00      	cmp	r2, #0
   d858e:	d1f9      	bne.n	d8584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8590:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8594:	b16e      	cbz	r6, d85b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8596:	f7ff fca9 	bl	d7eec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d859a:	b178      	cbz	r0, d85bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d859c:	4629      	mov	r1, r5
   d859e:	4630      	mov	r0, r6
   d85a0:	f7ff ff8b 	bl	d84ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d85a4:	4630      	mov	r0, r6
   d85a6:	f7fb fe4d 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d85aa:	2110      	movs	r1, #16
   d85ac:	4630      	mov	r0, r6
   d85ae:	f001 fca5 	bl	d9efc <_ZdlPvj>
        p_->setError(std::move(error));
   d85b2:	4668      	mov	r0, sp
   d85b4:	f7ff ff26 	bl	d8404 <_ZN8particle5ErrorD1Ev>
    }
   d85b8:	b009      	add	sp, #36	; 0x24
   d85ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d85bc:	4631      	mov	r1, r6
   d85be:	a802      	add	r0, sp, #8
   d85c0:	f7ff ffb0 	bl	d8524 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d85c4:	68e0      	ldr	r0, [r4, #12]
   d85c6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d85ca:	b108      	cbz	r0, d85d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d85cc:	f002 fbca 	bl	dad64 <strdup>
        type_(type) {
   d85d0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d85d2:	2010      	movs	r0, #16
   d85d4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d85d8:	f7fb fd5d 	bl	d4096 <_Znwj>
   d85dc:	4605      	mov	r5, r0
   d85de:	b1e8      	cbz	r0, d861c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d85e0:	2700      	movs	r7, #0
   d85e2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d85e4:	2018      	movs	r0, #24
   d85e6:	f7fb fd56 	bl	d4096 <_Znwj>
   d85ea:	4604      	mov	r4, r0
   d85ec:	b188      	cbz	r0, d8612 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d85ee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d85f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d85f2:	a802      	add	r0, sp, #8
   d85f4:	f7ff ff4f 	bl	d8496 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d85f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d85fa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d85fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d85fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8600:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8602:	a906      	add	r1, sp, #24
   d8604:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8606:	60e3      	str	r3, [r4, #12]
   d8608:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d860c:	9205      	str	r2, [sp, #20]
   d860e:	f7ff feec 	bl	d83ea <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8612:	4b08      	ldr	r3, [pc, #32]	; (d8634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8614:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8616:	4b08      	ldr	r3, [pc, #32]	; (d8638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8618:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d861a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d861c:	a806      	add	r0, sp, #24
   d861e:	f7ff fef1 	bl	d8404 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8622:	a802      	add	r0, sp, #8
   d8624:	f7fb fe0e 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8628:	2200      	movs	r2, #0
   d862a:	4629      	mov	r1, r5
   d862c:	4803      	ldr	r0, [pc, #12]	; (d863c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d862e:	f7ff fc65 	bl	d7efc <application_thread_invoke>
   d8632:	e7b7      	b.n	d85a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8634:	000d84cd 	.word	0x000d84cd
   d8638:	000d8765 	.word	0x000d8765
   d863c:	000d811b 	.word	0x000d811b

000d8640 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8644:	b08a      	sub	sp, #40	; 0x28
   d8646:	4605      	mov	r5, r0
   d8648:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d864c:	460c      	mov	r4, r1
   d864e:	4617      	mov	r7, r2
   d8650:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8652:	f7ff fc7f 	bl	d7f54 <spark_cloud_flag_connected>
   d8656:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8658:	4682      	mov	sl, r0
   d865a:	bb38      	cbnz	r0, d86ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d865c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8660:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8662:	a905      	add	r1, sp, #20
   d8664:	4630      	mov	r0, r6
   d8666:	f8ad 3018 	strh.w	r3, [sp, #24]
   d866a:	f7ff febe 	bl	d83ea <_ZN8particle5ErrorC1EOS0_>
   d866e:	2014      	movs	r0, #20
   d8670:	f7fb fd11 	bl	d4096 <_Znwj>
   d8674:	4604      	mov	r4, r0
   d8676:	b148      	cbz	r0, d868c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8678:	2302      	movs	r3, #2
   d867a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d867c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d867e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8682:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8684:	4631      	mov	r1, r6
   d8686:	300c      	adds	r0, #12
   d8688:	f7ff feaf 	bl	d83ea <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d868c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d868e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8690:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8694:	f7ff ff32 	bl	d84fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8698:	4630      	mov	r0, r6
   d869a:	f7ff feb3 	bl	d8404 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d869e:	a805      	add	r0, sp, #20
   d86a0:	f7ff feb0 	bl	d8404 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d86a4:	4628      	mov	r0, r5
   d86a6:	b00a      	add	sp, #40	; 0x28
   d86a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d86ac:	230c      	movs	r3, #12
   d86ae:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d86b2:	2014      	movs	r0, #20
   d86b4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d86b8:	9307      	str	r3, [sp, #28]
   d86ba:	f7fb fcec 	bl	d4096 <_Znwj>
   d86be:	4601      	mov	r1, r0
   d86c0:	b128      	cbz	r0, d86ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d86c2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d86c6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d86ca:	f880 a001 	strb.w	sl, [r0, #1]
   d86ce:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d86d0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d86d2:	f7ff ff13 	bl	d84fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d86d6:	4b22      	ldr	r3, [pc, #136]	; (d8760 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d86d8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d86da:	2008      	movs	r0, #8
   d86dc:	f7fb fcdb 	bl	d4096 <_Znwj>
   d86e0:	4682      	mov	sl, r0
   d86e2:	b128      	cbz	r0, d86f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d86e4:	9b03      	ldr	r3, [sp, #12]
   d86e6:	f840 3b04 	str.w	r3, [r0], #4
   d86ea:	a904      	add	r1, sp, #16
   d86ec:	f7ff fd29 	bl	d8142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d86f0:	9600      	str	r6, [sp, #0]
   d86f2:	fa5f f389 	uxtb.w	r3, r9
   d86f6:	4642      	mov	r2, r8
   d86f8:	4639      	mov	r1, r7
   d86fa:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d86fc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8700:	f7ff fc38 	bl	d7f74 <spark_send_event>
   d8704:	b9b8      	cbnz	r0, d8736 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8706:	9b03      	ldr	r3, [sp, #12]
   d8708:	785b      	ldrb	r3, [r3, #1]
   d870a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d870e:	b993      	cbnz	r3, d8736 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8710:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8714:	a905      	add	r1, sp, #20
   d8716:	a803      	add	r0, sp, #12
   d8718:	9205      	str	r2, [sp, #20]
   d871a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d871e:	f7ff ff11 	bl	d8544 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8722:	a805      	add	r0, sp, #20
   d8724:	f7ff fe6e 	bl	d8404 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8728:	a805      	add	r0, sp, #20
   d872a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d872c:	f7ff fe94 	bl	d8458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8730:	a806      	add	r0, sp, #24
   d8732:	f7fb fe11 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8736:	9b03      	ldr	r3, [sp, #12]
   d8738:	9305      	str	r3, [sp, #20]
   d873a:	a904      	add	r1, sp, #16
   d873c:	a806      	add	r0, sp, #24
   d873e:	f7ff fd00 	bl	d8142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8742:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8744:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8746:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8748:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d874a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d874c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d874e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8750:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8752:	f7fb fe01 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8756:	a804      	add	r0, sp, #16
   d8758:	f7fb fdfe 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d875c:	e7a2      	b.n	d86a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d875e:	bf00      	nop
   d8760:	000d8829 	.word	0x000d8829

000d8764 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8764:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8768:	4605      	mov	r5, r0
	  switch (__op)
   d876a:	d007      	beq.n	d877c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d876c:	2a03      	cmp	r2, #3
   d876e:	d018      	beq.n	d87a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8770:	2a01      	cmp	r2, #1
   d8772:	d101      	bne.n	d8778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8774:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8776:	6003      	str	r3, [r0, #0]
	}
   d8778:	2000      	movs	r0, #0
   d877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d877c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d877e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8780:	f7fb fc89 	bl	d4096 <_Znwj>
   d8784:	4604      	mov	r4, r0
   d8786:	b150      	cbz	r0, d879e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8788:	4631      	mov	r1, r6
   d878a:	f7ff fecb 	bl	d8524 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d878e:	6930      	ldr	r0, [r6, #16]
   d8790:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8794:	b108      	cbz	r0, d879a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8796:	f002 fae5 	bl	dad64 <strdup>
        type_(type) {
   d879a:	6120      	str	r0, [r4, #16]
   d879c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d879e:	602c      	str	r4, [r5, #0]
	}
   d87a0:	e7ea      	b.n	d8778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d87a2:	6804      	ldr	r4, [r0, #0]
   d87a4:	2c00      	cmp	r4, #0
   d87a6:	d0e7      	beq.n	d8778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d87a8:	f104 0010 	add.w	r0, r4, #16
   d87ac:	f7ff fe2a 	bl	d8404 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d87b0:	4620      	mov	r0, r4
   d87b2:	f7fb fd47 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d87b6:	2118      	movs	r1, #24
   d87b8:	4620      	mov	r0, r4
   d87ba:	f001 fb9f 	bl	d9efc <_ZdlPvj>
   d87be:	e7db      	b.n	d8778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d87c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d87c0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d87c2:	2300      	movs	r3, #0
   d87c4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d87c6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d87c8:	4604      	mov	r4, r0
   d87ca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d87cc:	b12b      	cbz	r3, d87da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d87ce:	2202      	movs	r2, #2
   d87d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d87d2:	68eb      	ldr	r3, [r5, #12]
   d87d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d87d6:	68ab      	ldr	r3, [r5, #8]
   d87d8:	60a3      	str	r3, [r4, #8]
    }
   d87da:	4620      	mov	r0, r4
   d87dc:	bd38      	pop	{r3, r4, r5, pc}

000d87de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d87de:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d87e0:	b570      	push	{r4, r5, r6, lr}
   d87e2:	4604      	mov	r4, r0
	  switch (__op)
   d87e4:	d007      	beq.n	d87f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d87e6:	2a03      	cmp	r2, #3
   d87e8:	d012      	beq.n	d8810 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d87ea:	2a01      	cmp	r2, #1
   d87ec:	d101      	bne.n	d87f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d87ee:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d87f0:	6003      	str	r3, [r0, #0]
	}
   d87f2:	2000      	movs	r0, #0
   d87f4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d87f6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d87f8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d87fa:	f7fb fc4c 	bl	d4096 <_Znwj>
   d87fe:	4605      	mov	r5, r0
   d8800:	b120      	cbz	r0, d880c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8802:	4631      	mov	r1, r6
   d8804:	f7ff ffdc 	bl	d87c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8808:	7c33      	ldrb	r3, [r6, #16]
   d880a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d880c:	6025      	str	r5, [r4, #0]
	}
   d880e:	e7f0      	b.n	d87f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8810:	6804      	ldr	r4, [r0, #0]
   d8812:	2c00      	cmp	r4, #0
   d8814:	d0ed      	beq.n	d87f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8816:	4620      	mov	r0, r4
   d8818:	f7fb fd14 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d881c:	2114      	movs	r1, #20
   d881e:	4620      	mov	r0, r4
   d8820:	f001 fb6c 	bl	d9efc <_ZdlPvj>
   d8824:	e7e5      	b.n	d87f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8828 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8828:	b5f0      	push	{r4, r5, r6, r7, lr}
   d882a:	b089      	sub	sp, #36	; 0x24
   d882c:	4604      	mov	r4, r0
   d882e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8830:	a801      	add	r0, sp, #4
   d8832:	4611      	mov	r1, r2
   d8834:	f7ff fe10 	bl	d8458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8838:	b1a4      	cbz	r4, d8864 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d883a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d883c:	b11d      	cbz	r5, d8846 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d883e:	4628      	mov	r0, r5
   d8840:	f002 fa90 	bl	dad64 <strdup>
   d8844:	4605      	mov	r5, r0
   d8846:	a801      	add	r0, sp, #4
   d8848:	a903      	add	r1, sp, #12
        type_(type) {
   d884a:	9503      	str	r5, [sp, #12]
   d884c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8850:	f7ff fe78 	bl	d8544 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8854:	a803      	add	r0, sp, #12
   d8856:	f7ff fdd5 	bl	d8404 <_ZN8particle5ErrorD1Ev>
   d885a:	a802      	add	r0, sp, #8
   d885c:	f7fb fd7c 	bl	d4358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8860:	b009      	add	sp, #36	; 0x24
   d8862:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8864:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8866:	2301      	movs	r3, #1
   d8868:	e8d5 2f4f 	ldrexb	r2, [r5]
   d886c:	2a00      	cmp	r2, #0
   d886e:	d103      	bne.n	d8878 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8870:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8874:	2900      	cmp	r1, #0
   d8876:	d1f7      	bne.n	d8868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8878:	d1ef      	bne.n	d885a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d887a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d887c:	f3bf 8f5b 	dmb	ish
   d8880:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8882:	1d2b      	adds	r3, r5, #4
   d8884:	f3bf 8f5b 	dmb	ish
   d8888:	e853 6f00 	ldrex	r6, [r3]
   d888c:	e843 4200 	strex	r2, r4, [r3]
   d8890:	2a00      	cmp	r2, #0
   d8892:	d1f9      	bne.n	d8888 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8894:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8898:	2e00      	cmp	r6, #0
   d889a:	d0de      	beq.n	d885a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d889c:	4620      	mov	r0, r4
   d889e:	f7ff fb25 	bl	d7eec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d88a2:	4607      	mov	r7, r0
   d88a4:	b160      	cbz	r0, d88c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d88a6:	f105 010c 	add.w	r1, r5, #12
   d88aa:	4630      	mov	r0, r6
   d88ac:	f7ff fe15 	bl	d84da <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d88b0:	4630      	mov	r0, r6
   d88b2:	f7fb fcc7 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d88b6:	2110      	movs	r1, #16
   d88b8:	4630      	mov	r0, r6
   d88ba:	f001 fb1f 	bl	d9efc <_ZdlPvj>
   d88be:	e7cc      	b.n	d885a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d88c0:	4631      	mov	r1, r6
   d88c2:	a803      	add	r0, sp, #12
   d88c4:	f7ff ff7c 	bl	d87c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d88c8:	7b2b      	ldrb	r3, [r5, #12]
   d88ca:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d88ce:	2010      	movs	r0, #16
   d88d0:	f7fb fbe1 	bl	d4096 <_Znwj>
   d88d4:	4605      	mov	r5, r0
   d88d6:	b1d0      	cbz	r0, d890e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d88d8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d88da:	2014      	movs	r0, #20
   d88dc:	f7fb fbdb 	bl	d4096 <_Znwj>
   d88e0:	4604      	mov	r4, r0
   d88e2:	b178      	cbz	r0, d8904 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d88e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d88e6:	4601      	mov	r1, r0
   d88e8:	a803      	add	r0, sp, #12
   d88ea:	f7ff fdd4 	bl	d8496 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d88f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d88f2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88f4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d88f6:	9205      	str	r2, [sp, #20]
   d88f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d88fa:	60e3      	str	r3, [r4, #12]
   d88fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8900:	9206      	str	r2, [sp, #24]
   d8902:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8904:	4b06      	ldr	r3, [pc, #24]	; (d8920 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8906:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8908:	4b06      	ldr	r3, [pc, #24]	; (d8924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d890a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d890c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d890e:	a803      	add	r0, sp, #12
   d8910:	f7fb fc98 	bl	d4244 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8914:	2200      	movs	r2, #0
   d8916:	4629      	mov	r1, r5
   d8918:	4803      	ldr	r0, [pc, #12]	; (d8928 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d891a:	f7ff faef 	bl	d7efc <application_thread_invoke>
   d891e:	e7c7      	b.n	d88b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8920:	000d84ed 	.word	0x000d84ed
   d8924:	000d87df 	.word	0x000d87df
   d8928:	000d811b 	.word	0x000d811b

000d892c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d892c:	2200      	movs	r2, #0
   d892e:	6840      	ldr	r0, [r0, #4]
   d8930:	4611      	mov	r1, r2
   d8932:	f7ff bb6f 	b.w	d8014 <network_listening>

000d8936 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8936:	2200      	movs	r2, #0
   d8938:	6840      	ldr	r0, [r0, #4]
   d893a:	4611      	mov	r1, r2
   d893c:	f7ff bb7a 	b.w	d8034 <network_get_listen_timeout>

000d8940 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8940:	6840      	ldr	r0, [r0, #4]
   d8942:	2200      	movs	r2, #0
   d8944:	f7ff bb6e 	b.w	d8024 <network_set_listen_timeout>

000d8948 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8948:	6840      	ldr	r0, [r0, #4]
   d894a:	2200      	movs	r2, #0
   d894c:	f081 0101 	eor.w	r1, r1, #1
   d8950:	f7ff bb58 	b.w	d8004 <network_listen>

000d8954 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8954:	2300      	movs	r3, #0
   d8956:	6840      	ldr	r0, [r0, #4]
   d8958:	461a      	mov	r2, r3
   d895a:	4619      	mov	r1, r3
   d895c:	f7ff bb4a 	b.w	d7ff4 <network_off>

000d8960 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8960:	2300      	movs	r3, #0
   d8962:	6840      	ldr	r0, [r0, #4]
   d8964:	461a      	mov	r2, r3
   d8966:	4619      	mov	r1, r3
   d8968:	f7ff bb3c 	b.w	d7fe4 <network_on>

000d896c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d896c:	2200      	movs	r2, #0
   d896e:	6840      	ldr	r0, [r0, #4]
   d8970:	4611      	mov	r1, r2
   d8972:	f7ff bb2f 	b.w	d7fd4 <network_ready>

000d8976 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8976:	2200      	movs	r2, #0
   d8978:	6840      	ldr	r0, [r0, #4]
   d897a:	4611      	mov	r1, r2
   d897c:	f7ff bb1a 	b.w	d7fb4 <network_connecting>

000d8980 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8980:	6840      	ldr	r0, [r0, #4]
   d8982:	2200      	movs	r2, #0
   d8984:	2102      	movs	r1, #2
   d8986:	f7ff bb1d 	b.w	d7fc4 <network_disconnect>

000d898a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d898a:	2300      	movs	r3, #0
   d898c:	6840      	ldr	r0, [r0, #4]
   d898e:	461a      	mov	r2, r3
   d8990:	f7ff bb08 	b.w	d7fa4 <network_connect>

000d8994 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8994:	4b02      	ldr	r3, [pc, #8]	; (d89a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8996:	2203      	movs	r2, #3
   d8998:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d899a:	4a02      	ldr	r2, [pc, #8]	; (d89a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d899c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d899e:	4770      	bx	lr
   d89a0:	2003e57c 	.word	0x2003e57c
   d89a4:	000ddb84 	.word	0x000ddb84

000d89a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d89a8:	4770      	bx	lr

000d89aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d89aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d89ac:	4606      	mov	r6, r0
   d89ae:	4615      	mov	r5, r2
   d89b0:	460c      	mov	r4, r1
   d89b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d89b4:	42bc      	cmp	r4, r7
   d89b6:	d006      	beq.n	d89c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d89b8:	6833      	ldr	r3, [r6, #0]
   d89ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d89be:	689b      	ldr	r3, [r3, #8]
   d89c0:	4630      	mov	r0, r6
   d89c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d89c4:	e7f6      	b.n	d89b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d89c6:	4628      	mov	r0, r5
   d89c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d89ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d89ca:	7c00      	ldrb	r0, [r0, #16]
   d89cc:	2200      	movs	r2, #0
   d89ce:	f7ff b945 	b.w	d7c5c <hal_i2c_write>

000d89d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d89d2:	7c00      	ldrb	r0, [r0, #16]
   d89d4:	2100      	movs	r1, #0
   d89d6:	f7ff b949 	b.w	d7c6c <hal_i2c_available>

000d89da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d89da:	7c00      	ldrb	r0, [r0, #16]
   d89dc:	2100      	movs	r1, #0
   d89de:	f7ff b94d 	b.w	d7c7c <hal_i2c_read>

000d89e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d89e2:	7c00      	ldrb	r0, [r0, #16]
   d89e4:	2100      	movs	r1, #0
   d89e6:	f7ff b951 	b.w	d7c8c <hal_i2c_peek>

000d89ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d89ea:	7c00      	ldrb	r0, [r0, #16]
   d89ec:	2100      	movs	r1, #0
   d89ee:	f7ff b955 	b.w	d7c9c <hal_i2c_flush>

000d89f2 <_ZN7TwoWireD0Ev>:
   d89f2:	b510      	push	{r4, lr}
   d89f4:	2114      	movs	r1, #20
   d89f6:	4604      	mov	r4, r0
   d89f8:	f001 fa80 	bl	d9efc <_ZdlPvj>
   d89fc:	4620      	mov	r0, r4
   d89fe:	bd10      	pop	{r4, pc}

000d8a00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8a00:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8a06:	4604      	mov	r4, r0
   d8a08:	4608      	mov	r0, r1
   d8a0a:	2100      	movs	r1, #0
   d8a0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8a10:	4b03      	ldr	r3, [pc, #12]	; (d8a20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8a12:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8a14:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8a16:	4611      	mov	r1, r2
   d8a18:	f7ff f950 	bl	d7cbc <hal_i2c_init>
}
   d8a1c:	4620      	mov	r0, r4
   d8a1e:	bd10      	pop	{r4, pc}
   d8a20:	000ddbc0 	.word	0x000ddbc0

000d8a24 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d8a24:	7c00      	ldrb	r0, [r0, #16]
   d8a26:	2200      	movs	r2, #0
   d8a28:	f7ff b8f8 	b.w	d7c1c <hal_i2c_set_speed>

000d8a2c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8a2c:	2300      	movs	r3, #0
   d8a2e:	7c00      	ldrb	r0, [r0, #16]
   d8a30:	461a      	mov	r2, r3
   d8a32:	4619      	mov	r1, r3
   d8a34:	f7ff b8fa 	b.w	d7c2c <hal_i2c_begin>

000d8a38 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8a38:	7c00      	ldrb	r0, [r0, #16]
   d8a3a:	2200      	movs	r2, #0
   d8a3c:	f7ff b8fe 	b.w	d7c3c <hal_i2c_begin_transmission>

000d8a40 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8a40:	b2c9      	uxtb	r1, r1
   d8a42:	f7ff bff9 	b.w	d8a38 <_ZN7TwoWire17beginTransmissionEh>

000d8a46 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8a46:	7c00      	ldrb	r0, [r0, #16]
   d8a48:	2200      	movs	r2, #0
   d8a4a:	f7ff b8ff 	b.w	d7c4c <hal_i2c_end_transmission>

000d8a4e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8a4e:	2101      	movs	r1, #1
   d8a50:	f7ff bff9 	b.w	d8a46 <_ZN7TwoWire15endTransmissionEh>

000d8a54 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8a54:	4770      	bx	lr

000d8a56 <_ZN9IPAddressD0Ev>:
   d8a56:	b510      	push	{r4, lr}
   d8a58:	2118      	movs	r1, #24
   d8a5a:	4604      	mov	r4, r0
   d8a5c:	f001 fa4e 	bl	d9efc <_ZdlPvj>
   d8a60:	4620      	mov	r0, r4
   d8a62:	bd10      	pop	{r4, pc}

000d8a64 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8a64:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8a66:	7d03      	ldrb	r3, [r0, #20]
   d8a68:	2b06      	cmp	r3, #6
{
   d8a6a:	b08d      	sub	sp, #52	; 0x34
   d8a6c:	460e      	mov	r6, r1
   d8a6e:	f100 0704 	add.w	r7, r0, #4
   d8a72:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8a76:	d012      	beq.n	d8a9e <_ZNK9IPAddress7printToER5Print+0x3a>
   d8a78:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8a7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8a80:	220a      	movs	r2, #10
   d8a82:	4630      	mov	r0, r6
   d8a84:	f000 f943 	bl	d8d0e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8a88:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8a8a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8a8c:	d019      	beq.n	d8ac2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8a8e:	2c00      	cmp	r4, #0
   d8a90:	d0f4      	beq.n	d8a7c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8a92:	212e      	movs	r1, #46	; 0x2e
   d8a94:	4630      	mov	r0, r6
   d8a96:	f000 f921 	bl	d8cdc <_ZN5Print5printEc>
   d8a9a:	4404      	add	r4, r0
   d8a9c:	e7ee      	b.n	d8a7c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8a9e:	232f      	movs	r3, #47	; 0x2f
   d8aa0:	466a      	mov	r2, sp
   d8aa2:	4639      	mov	r1, r7
   d8aa4:	200a      	movs	r0, #10
		buf[0] = 0;
   d8aa6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8aaa:	f7ff f90f 	bl	d7ccc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8aae:	4668      	mov	r0, sp
   d8ab0:	f002 f975 	bl	dad9e <strlen>
   d8ab4:	6833      	ldr	r3, [r6, #0]
   d8ab6:	4602      	mov	r2, r0
   d8ab8:	68db      	ldr	r3, [r3, #12]
   d8aba:	4669      	mov	r1, sp
   d8abc:	4630      	mov	r0, r6
   d8abe:	4798      	blx	r3
   d8ac0:	4604      	mov	r4, r0
    }
    return n;
}
   d8ac2:	4620      	mov	r0, r4
   d8ac4:	b00d      	add	sp, #52	; 0x34
   d8ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8ac8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8ac8:	b510      	push	{r4, lr}
   d8aca:	4b05      	ldr	r3, [pc, #20]	; (d8ae0 <_ZN9IPAddressC1Ev+0x18>)
   d8acc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8ace:	2211      	movs	r2, #17
   d8ad0:	f840 3b04 	str.w	r3, [r0], #4
   d8ad4:	2100      	movs	r1, #0
   d8ad6:	f002 f906 	bl	dace6 <memset>
}
   d8ada:	4620      	mov	r0, r4
   d8adc:	bd10      	pop	{r4, pc}
   d8ade:	bf00      	nop
   d8ae0:	000ddbe8 	.word	0x000ddbe8

000d8ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8ae4:	4603      	mov	r3, r0
   d8ae6:	4a07      	ldr	r2, [pc, #28]	; (d8b04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8ae8:	b510      	push	{r4, lr}
   d8aea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8aee:	f101 0210 	add.w	r2, r1, #16
   d8af2:	f851 4b04 	ldr.w	r4, [r1], #4
   d8af6:	f843 4b04 	str.w	r4, [r3], #4
   d8afa:	4291      	cmp	r1, r2
   d8afc:	d1f9      	bne.n	d8af2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8afe:	780a      	ldrb	r2, [r1, #0]
   d8b00:	701a      	strb	r2, [r3, #0]
}
   d8b02:	bd10      	pop	{r4, pc}
   d8b04:	000ddbe8 	.word	0x000ddbe8

000d8b08 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d8b08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8b0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8b0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8b12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8b16:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8b1a:	2304      	movs	r3, #4
   d8b1c:	6041      	str	r1, [r0, #4]
   d8b1e:	7503      	strb	r3, [r0, #20]
}
   d8b20:	bd10      	pop	{r4, pc}

000d8b22 <_ZN9IPAddressaSEPKh>:
{
   d8b22:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8b24:	78cb      	ldrb	r3, [r1, #3]
   d8b26:	9300      	str	r3, [sp, #0]
   d8b28:	788b      	ldrb	r3, [r1, #2]
   d8b2a:	784a      	ldrb	r2, [r1, #1]
   d8b2c:	7809      	ldrb	r1, [r1, #0]
   d8b2e:	f7ff ffeb 	bl	d8b08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8b32:	b002      	add	sp, #8
   d8b34:	bd10      	pop	{r4, pc}
	...

000d8b38 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8b38:	4b01      	ldr	r3, [pc, #4]	; (d8b40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8b3a:	4a02      	ldr	r2, [pc, #8]	; (d8b44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8b3c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d8b3e:	4770      	bx	lr
   d8b40:	2003e584 	.word	0x2003e584
   d8b44:	000ddbf4 	.word	0x000ddbf4

000d8b48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8b48:	2300      	movs	r3, #0
   d8b4a:	6840      	ldr	r0, [r0, #4]
   d8b4c:	461a      	mov	r2, r3
   d8b4e:	f7ff ba29 	b.w	d7fa4 <network_connect>

000d8b52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8b52:	6840      	ldr	r0, [r0, #4]
   d8b54:	2200      	movs	r2, #0
   d8b56:	2102      	movs	r1, #2
   d8b58:	f7ff ba34 	b.w	d7fc4 <network_disconnect>

000d8b5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8b5c:	2200      	movs	r2, #0
   d8b5e:	6840      	ldr	r0, [r0, #4]
   d8b60:	4611      	mov	r1, r2
   d8b62:	f7ff ba27 	b.w	d7fb4 <network_connecting>

000d8b66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8b66:	2200      	movs	r2, #0
   d8b68:	6840      	ldr	r0, [r0, #4]
   d8b6a:	4611      	mov	r1, r2
   d8b6c:	f7ff ba32 	b.w	d7fd4 <network_ready>

000d8b70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8b70:	2300      	movs	r3, #0
   d8b72:	6840      	ldr	r0, [r0, #4]
   d8b74:	461a      	mov	r2, r3
   d8b76:	4619      	mov	r1, r3
   d8b78:	f7ff ba34 	b.w	d7fe4 <network_on>

000d8b7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8b7c:	2300      	movs	r3, #0
   d8b7e:	6840      	ldr	r0, [r0, #4]
   d8b80:	461a      	mov	r2, r3
   d8b82:	4619      	mov	r1, r3
   d8b84:	f7ff ba36 	b.w	d7ff4 <network_off>

000d8b88 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8b88:	6840      	ldr	r0, [r0, #4]
   d8b8a:	2100      	movs	r1, #0
   d8b8c:	f7ff ba5a 	b.w	d8044 <network_is_on>

000d8b90 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8b90:	6840      	ldr	r0, [r0, #4]
   d8b92:	2100      	movs	r1, #0
   d8b94:	f7ff ba5e 	b.w	d8054 <network_is_off>

000d8b98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8b98:	6840      	ldr	r0, [r0, #4]
   d8b9a:	2200      	movs	r2, #0
   d8b9c:	f081 0101 	eor.w	r1, r1, #1
   d8ba0:	f7ff ba30 	b.w	d8004 <network_listen>

000d8ba4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8ba4:	6840      	ldr	r0, [r0, #4]
   d8ba6:	2200      	movs	r2, #0
   d8ba8:	f7ff ba3c 	b.w	d8024 <network_set_listen_timeout>

000d8bac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8bac:	2200      	movs	r2, #0
   d8bae:	6840      	ldr	r0, [r0, #4]
   d8bb0:	4611      	mov	r1, r2
   d8bb2:	f7ff ba3f 	b.w	d8034 <network_get_listen_timeout>

000d8bb6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8bb6:	2200      	movs	r2, #0
   d8bb8:	6840      	ldr	r0, [r0, #4]
   d8bba:	4611      	mov	r1, r2
   d8bbc:	f7ff ba2a 	b.w	d8014 <network_listening>

000d8bc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8bc4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8bc6:	b095      	sub	sp, #84	; 0x54
   d8bc8:	4616      	mov	r6, r2
   d8bca:	460d      	mov	r5, r1
   d8bcc:	4607      	mov	r7, r0
    IPAddress addr;
   d8bce:	f7ff ff7b 	bl	d8ac8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8bd2:	4621      	mov	r1, r4
   d8bd4:	2218      	movs	r2, #24
   d8bd6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8bd8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8bda:	f002 f884 	bl	dace6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8bde:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8be0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8be4:	4621      	mov	r1, r4
   d8be6:	466b      	mov	r3, sp
   d8be8:	aa0c      	add	r2, sp, #48	; 0x30
   d8bea:	4630      	mov	r0, r6
   d8bec:	f7ff f87e 	bl	d7cec <netdb_getaddrinfo>
    if (!r) {
   d8bf0:	4604      	mov	r4, r0
   d8bf2:	2800      	cmp	r0, #0
   d8bf4:	d146      	bne.n	d8c84 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8bf6:	4602      	mov	r2, r0
   d8bf8:	2101      	movs	r1, #1
   d8bfa:	6868      	ldr	r0, [r5, #4]
   d8bfc:	f7ff f9ea 	bl	d7fd4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8c00:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8c02:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8c04:	4622      	mov	r2, r4
   d8c06:	6868      	ldr	r0, [r5, #4]
   d8c08:	f7ff f9e4 	bl	d7fd4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8c0c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8c0e:	4681      	mov	r9, r0
        bool ok = false;
   d8c10:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8c12:	2e00      	cmp	r6, #0
   d8c14:	d036      	beq.n	d8c84 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d8c16:	2900      	cmp	r1, #0
   d8c18:	d134      	bne.n	d8c84 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8c1a:	6873      	ldr	r3, [r6, #4]
   d8c1c:	2b02      	cmp	r3, #2
   d8c1e:	d003      	beq.n	d8c28 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8c20:	2b0a      	cmp	r3, #10
   d8c22:	d00b      	beq.n	d8c3c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8c24:	69f6      	ldr	r6, [r6, #28]
   d8c26:	e7f4      	b.n	d8c12 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8c28:	f1b8 0f00 	cmp.w	r8, #0
   d8c2c:	d004      	beq.n	d8c38 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8c2e:	6971      	ldr	r1, [r6, #20]
   d8c30:	4638      	mov	r0, r7
   d8c32:	3104      	adds	r1, #4
   d8c34:	f7ff ff75 	bl	d8b22 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8c38:	4641      	mov	r1, r8
   d8c3a:	e7f3      	b.n	d8c24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8c3c:	f1b9 0f00 	cmp.w	r9, #0
   d8c40:	d101      	bne.n	d8c46 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8c42:	4649      	mov	r1, r9
   d8c44:	e7ee      	b.n	d8c24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8c46:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8c48:	2210      	movs	r2, #16
   d8c4a:	a801      	add	r0, sp, #4
   d8c4c:	f002 f84b 	bl	dace6 <memset>
                    a.v = 6;
   d8c50:	2306      	movs	r3, #6
   d8c52:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8c56:	ad01      	add	r5, sp, #4
   d8c58:	f104 0308 	add.w	r3, r4, #8
   d8c5c:	3418      	adds	r4, #24
   d8c5e:	6818      	ldr	r0, [r3, #0]
   d8c60:	6859      	ldr	r1, [r3, #4]
   d8c62:	462a      	mov	r2, r5
   d8c64:	c203      	stmia	r2!, {r0, r1}
   d8c66:	3308      	adds	r3, #8
   d8c68:	42a3      	cmp	r3, r4
   d8c6a:	4615      	mov	r5, r2
   d8c6c:	d1f7      	bne.n	d8c5e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8c6e:	a901      	add	r1, sp, #4
   d8c70:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d8c72:	ad07      	add	r5, sp, #28
   d8c74:	f7ff ff36 	bl	d8ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8c7a:	1d3c      	adds	r4, r7, #4
   d8c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8c7e:	682b      	ldr	r3, [r5, #0]
   d8c80:	7023      	strb	r3, [r4, #0]
   d8c82:	e7de      	b.n	d8c42 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8c84:	9800      	ldr	r0, [sp, #0]
   d8c86:	f7ff f829 	bl	d7cdc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8c8a:	4638      	mov	r0, r7
   d8c8c:	b015      	add	sp, #84	; 0x54
   d8c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8c94 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8c94:	4b02      	ldr	r3, [pc, #8]	; (d8ca0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8c96:	4a03      	ldr	r2, [pc, #12]	; (d8ca4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8c98:	601a      	str	r2, [r3, #0]
   d8c9a:	2200      	movs	r2, #0
   d8c9c:	605a      	str	r2, [r3, #4]

} // spark
   d8c9e:	4770      	bx	lr
   d8ca0:	2003e588 	.word	0x2003e588
   d8ca4:	000ddc00 	.word	0x000ddc00

000d8ca8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8caa:	4606      	mov	r6, r0
   d8cac:	460d      	mov	r5, r1
  size_t n = 0;
   d8cae:	188f      	adds	r7, r1, r2
   d8cb0:	2400      	movs	r4, #0
  while (size--) {
   d8cb2:	42bd      	cmp	r5, r7
   d8cb4:	d00c      	beq.n	d8cd0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8cb6:	6833      	ldr	r3, [r6, #0]
   d8cb8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8cbc:	689b      	ldr	r3, [r3, #8]
   d8cbe:	4630      	mov	r0, r6
   d8cc0:	4798      	blx	r3
     if (chunk>=0)
   d8cc2:	1e03      	subs	r3, r0, #0
   d8cc4:	db01      	blt.n	d8cca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8cc6:	441c      	add	r4, r3
  while (size--) {
   d8cc8:	e7f3      	b.n	d8cb2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8cca:	2c00      	cmp	r4, #0
   d8ccc:	bf08      	it	eq
   d8cce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8cd0:	4620      	mov	r0, r4
   d8cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8cd4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8cd4:	b508      	push	{r3, lr}
  return write(str);
   d8cd6:	f7fe fa03 	bl	d70e0 <_ZN5Print5writeEPKc>
}
   d8cda:	bd08      	pop	{r3, pc}

000d8cdc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8cdc:	6803      	ldr	r3, [r0, #0]
   d8cde:	689b      	ldr	r3, [r3, #8]
   d8ce0:	4718      	bx	r3

000d8ce2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8ce2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8ce4:	210d      	movs	r1, #13
{
   d8ce6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8ce8:	f7ff fff8 	bl	d8cdc <_ZN5Print5printEc>
  n += print('\n');
   d8cec:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8cee:	4604      	mov	r4, r0
  n += print('\n');
   d8cf0:	4628      	mov	r0, r5
   d8cf2:	f7ff fff3 	bl	d8cdc <_ZN5Print5printEc>
  return n;
}
   d8cf6:	4420      	add	r0, r4
   d8cf8:	bd38      	pop	{r3, r4, r5, pc}

000d8cfa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8cfa:	b538      	push	{r3, r4, r5, lr}
   d8cfc:	4605      	mov	r5, r0
  return write(str);
   d8cfe:	f7fe f9ef 	bl	d70e0 <_ZN5Print5writeEPKc>
   d8d02:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8d04:	4628      	mov	r0, r5
   d8d06:	f7ff ffec 	bl	d8ce2 <_ZN5Print7printlnEv>
  return n;
}
   d8d0a:	4420      	add	r0, r4
   d8d0c:	bd38      	pop	{r3, r4, r5, pc}

000d8d0e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8d0e:	b530      	push	{r4, r5, lr}
   d8d10:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8d12:	2300      	movs	r3, #0
   d8d14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8d18:	2a01      	cmp	r2, #1
   d8d1a:	bf98      	it	ls
   d8d1c:	220a      	movls	r2, #10
   d8d1e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8d20:	460d      	mov	r5, r1
   d8d22:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8d26:	fb01 5312 	mls	r3, r1, r2, r5
   d8d2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8d2e:	2b09      	cmp	r3, #9
   d8d30:	bf94      	ite	ls
   d8d32:	3330      	addls	r3, #48	; 0x30
   d8d34:	3337      	addhi	r3, #55	; 0x37
   d8d36:	b2db      	uxtb	r3, r3
  } while(n);
   d8d38:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8d3a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8d3e:	d9ef      	bls.n	d8d20 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8d40:	4621      	mov	r1, r4
   d8d42:	f7fe f9cd 	bl	d70e0 <_ZN5Print5writeEPKc>
}
   d8d46:	b00b      	add	sp, #44	; 0x2c
   d8d48:	bd30      	pop	{r4, r5, pc}
	...

000d8d4c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d50:	ec55 4b10 	vmov	r4, r5, d0
   d8d54:	4606      	mov	r6, r0
   d8d56:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8d58:	ee10 2a10 	vmov	r2, s0
   d8d5c:	ee10 0a10 	vmov	r0, s0
   d8d60:	462b      	mov	r3, r5
   d8d62:	4629      	mov	r1, r5
   d8d64:	f001 fd28 	bl	da7b8 <__aeabi_dcmpun>
   d8d68:	b140      	cbz	r0, d8d7c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d8d6a:	4953      	ldr	r1, [pc, #332]	; (d8eb8 <_ZN5Print10printFloatEdh+0x16c>)
   d8d6c:	4630      	mov	r0, r6
   d8d6e:	f7fe f9b7 	bl	d70e0 <_ZN5Print5writeEPKc>
   d8d72:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8d74:	4650      	mov	r0, sl
   d8d76:	b003      	add	sp, #12
   d8d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8d7c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d8d80:	4b4e      	ldr	r3, [pc, #312]	; (d8ebc <_ZN5Print10printFloatEdh+0x170>)
   d8d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8d86:	4620      	mov	r0, r4
   d8d88:	4649      	mov	r1, r9
   d8d8a:	f001 fd15 	bl	da7b8 <__aeabi_dcmpun>
   d8d8e:	b948      	cbnz	r0, d8da4 <_ZN5Print10printFloatEdh+0x58>
   d8d90:	4b4a      	ldr	r3, [pc, #296]	; (d8ebc <_ZN5Print10printFloatEdh+0x170>)
   d8d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8d96:	4620      	mov	r0, r4
   d8d98:	4649      	mov	r1, r9
   d8d9a:	f001 fcef 	bl	da77c <__aeabi_dcmple>
   d8d9e:	b908      	cbnz	r0, d8da4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d8da0:	4947      	ldr	r1, [pc, #284]	; (d8ec0 <_ZN5Print10printFloatEdh+0x174>)
   d8da2:	e7e3      	b.n	d8d6c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d8da4:	4b47      	ldr	r3, [pc, #284]	; (d8ec4 <_ZN5Print10printFloatEdh+0x178>)
   d8da6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8daa:	4620      	mov	r0, r4
   d8dac:	4629      	mov	r1, r5
   d8dae:	f001 fcf9 	bl	da7a4 <__aeabi_dcmpgt>
   d8db2:	b108      	cbz	r0, d8db8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8db4:	4944      	ldr	r1, [pc, #272]	; (d8ec8 <_ZN5Print10printFloatEdh+0x17c>)
   d8db6:	e7d9      	b.n	d8d6c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8db8:	4b44      	ldr	r3, [pc, #272]	; (d8ecc <_ZN5Print10printFloatEdh+0x180>)
   d8dba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8dbe:	4620      	mov	r0, r4
   d8dc0:	4629      	mov	r1, r5
   d8dc2:	f001 fcd1 	bl	da768 <__aeabi_dcmplt>
   d8dc6:	2800      	cmp	r0, #0
   d8dc8:	d1f4      	bne.n	d8db4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d8dca:	2200      	movs	r2, #0
   d8dcc:	2300      	movs	r3, #0
   d8dce:	4620      	mov	r0, r4
   d8dd0:	4629      	mov	r1, r5
   d8dd2:	f001 fcc9 	bl	da768 <__aeabi_dcmplt>
   d8dd6:	b1d0      	cbz	r0, d8e0e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d8dd8:	212d      	movs	r1, #45	; 0x2d
   d8dda:	4630      	mov	r0, r6
   d8ddc:	f7ff ff7e 	bl	d8cdc <_ZN5Print5printEc>
     number = -number;
   d8de0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8de4:	4682      	mov	sl, r0
     number = -number;
   d8de6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d8de8:	4939      	ldr	r1, [pc, #228]	; (d8ed0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d8dea:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8ed8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d8dee:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d8df2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8df4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d8df8:	fa5f f38b 	uxtb.w	r3, fp
   d8dfc:	429f      	cmp	r7, r3
   d8dfe:	d908      	bls.n	d8e12 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d8e00:	4642      	mov	r2, r8
   d8e02:	464b      	mov	r3, r9
   d8e04:	f001 fb68 	bl	da4d8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d8e08:	f10b 0b01 	add.w	fp, fp, #1
   d8e0c:	e7f4      	b.n	d8df8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d8e0e:	4682      	mov	sl, r0
   d8e10:	e7ea      	b.n	d8de8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d8e12:	4622      	mov	r2, r4
   d8e14:	462b      	mov	r3, r5
   d8e16:	f001 f87f 	bl	d9f18 <__adddf3>
   d8e1a:	460d      	mov	r5, r1
   d8e1c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d8e1e:	f001 fd09 	bl	da834 <__aeabi_d2uiz>
   d8e22:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8e24:	f001 f9b4 	bl	da190 <__aeabi_ui2d>
   d8e28:	4602      	mov	r2, r0
   d8e2a:	460b      	mov	r3, r1
   d8e2c:	4620      	mov	r0, r4
   d8e2e:	4629      	mov	r1, r5
   d8e30:	f001 f870 	bl	d9f14 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d8e34:	220a      	movs	r2, #10
   d8e36:	4604      	mov	r4, r0
   d8e38:	460d      	mov	r5, r1
   d8e3a:	4630      	mov	r0, r6
   d8e3c:	4641      	mov	r1, r8
   d8e3e:	f7ff ff66 	bl	d8d0e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d8e42:	4482      	add	sl, r0
  if (digits > 0) {
   d8e44:	b127      	cbz	r7, d8e50 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8e46:	4923      	ldr	r1, [pc, #140]	; (d8ed4 <_ZN5Print10printFloatEdh+0x188>)
   d8e48:	4630      	mov	r0, r6
   d8e4a:	f7fe f949 	bl	d70e0 <_ZN5Print5writeEPKc>
    n += print(".");
   d8e4e:	4482      	add	sl, r0
    remainder *= 10.0;
   d8e50:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8ed8 <_ZN5Print10printFloatEdh+0x18c>
   d8e54:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8e58:	3f01      	subs	r7, #1
   d8e5a:	b2ff      	uxtb	r7, r7
   d8e5c:	2fff      	cmp	r7, #255	; 0xff
   d8e5e:	d089      	beq.n	d8d74 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d8e60:	4642      	mov	r2, r8
   d8e62:	464b      	mov	r3, r9
   d8e64:	4620      	mov	r0, r4
   d8e66:	4629      	mov	r1, r5
   d8e68:	f001 fa0c 	bl	da284 <__aeabi_dmul>
   d8e6c:	4604      	mov	r4, r0
   d8e6e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d8e70:	f001 fcb8 	bl	da7e4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8e74:	f1b0 0b00 	subs.w	fp, r0, #0
   d8e78:	da1a      	bge.n	d8eb0 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d8e7a:	212d      	movs	r1, #45	; 0x2d
   d8e7c:	4630      	mov	r0, r6
   d8e7e:	f7ff ff2d 	bl	d8cdc <_ZN5Print5printEc>
            val = -n;
   d8e82:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d8e86:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d8e88:	220a      	movs	r2, #10
   d8e8a:	4630      	mov	r0, r6
   d8e8c:	9301      	str	r3, [sp, #4]
   d8e8e:	f7ff ff3e 	bl	d8d0e <_ZN5Print11printNumberEmh>
   d8e92:	9b01      	ldr	r3, [sp, #4]
   d8e94:	4418      	add	r0, r3
    n += print(toPrint);
   d8e96:	4482      	add	sl, r0
    remainder -= toPrint;
   d8e98:	4658      	mov	r0, fp
   d8e9a:	f001 f989 	bl	da1b0 <__aeabi_i2d>
   d8e9e:	4602      	mov	r2, r0
   d8ea0:	460b      	mov	r3, r1
   d8ea2:	4620      	mov	r0, r4
   d8ea4:	4629      	mov	r1, r5
   d8ea6:	f001 f835 	bl	d9f14 <__aeabi_dsub>
   d8eaa:	4604      	mov	r4, r0
   d8eac:	460d      	mov	r5, r1
  while (digits-- > 0)
   d8eae:	e7d3      	b.n	d8e58 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d8eb0:	4659      	mov	r1, fp
        size_t t = 0;
   d8eb2:	2300      	movs	r3, #0
   d8eb4:	e7e8      	b.n	d8e88 <_ZN5Print10printFloatEdh+0x13c>
   d8eb6:	bf00      	nop
   d8eb8:	000ddc34 	.word	0x000ddc34
   d8ebc:	7fefffff 	.word	0x7fefffff
   d8ec0:	000ddc38 	.word	0x000ddc38
   d8ec4:	41efffff 	.word	0x41efffff
   d8ec8:	000ddc3c 	.word	0x000ddc3c
   d8ecc:	c1efffff 	.word	0xc1efffff
   d8ed0:	3fe00000 	.word	0x3fe00000
   d8ed4:	000dce5b 	.word	0x000dce5b
   d8ed8:	40240000 	.word	0x40240000

000d8edc <_ZN5Print5printEfi>:
{
   d8edc:	b538      	push	{r3, r4, r5, lr}
   d8ede:	4604      	mov	r4, r0
   d8ee0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d8ee4:	b2cd      	uxtb	r5, r1
   d8ee6:	f001 f975 	bl	da1d4 <__aeabi_f2d>
   d8eea:	ec41 0b10 	vmov	d0, r0, r1
   d8eee:	4629      	mov	r1, r5
   d8ef0:	4620      	mov	r0, r4
}
   d8ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d8ef6:	f7ff bf29 	b.w	d8d4c <_ZN5Print10printFloatEdh>

000d8efa <_ZN5Print7printlnEdi>:
{
   d8efa:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d8efc:	b2c9      	uxtb	r1, r1
{
   d8efe:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d8f00:	f7ff ff24 	bl	d8d4c <_ZN5Print10printFloatEdh>
   d8f04:	4604      	mov	r4, r0
  n += println();
   d8f06:	4628      	mov	r0, r5
   d8f08:	f7ff feeb 	bl	d8ce2 <_ZN5Print7printlnEv>
}
   d8f0c:	4420      	add	r0, r4
   d8f0e:	bd38      	pop	{r3, r4, r5, pc}

000d8f10 <_ZN5Print7printlnEfi>:
{
   d8f10:	b538      	push	{r3, r4, r5, lr}
   d8f12:	4604      	mov	r4, r0
   d8f14:	ee10 0a10 	vmov	r0, s0
   d8f18:	460d      	mov	r5, r1
    return println((double)num, digits);
   d8f1a:	f001 f95b 	bl	da1d4 <__aeabi_f2d>
   d8f1e:	ec41 0b10 	vmov	d0, r0, r1
   d8f22:	4629      	mov	r1, r5
   d8f24:	4620      	mov	r0, r4
}
   d8f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d8f2a:	f7ff bfe6 	b.w	d8efa <_ZN5Print7printlnEdi>

000d8f2e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d8f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8f32:	b086      	sub	sp, #24
   d8f34:	af00      	add	r7, sp, #0
   d8f36:	4605      	mov	r5, r0
   d8f38:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d8f3a:	1d38      	adds	r0, r7, #4
   d8f3c:	2114      	movs	r1, #20
{
   d8f3e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d8f40:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8f42:	f7ff f8b7 	bl	d80b4 <vsnprintf>

    if (n<bufsize)
   d8f46:	2813      	cmp	r0, #19
   d8f48:	d80e      	bhi.n	d8f68 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d8f4a:	1d39      	adds	r1, r7, #4
   d8f4c:	4628      	mov	r0, r5
   d8f4e:	f7fe f8c7 	bl	d70e0 <_ZN5Print5writeEPKc>
   d8f52:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8f54:	b11e      	cbz	r6, d8f5e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d8f56:	4628      	mov	r0, r5
   d8f58:	f7ff fec3 	bl	d8ce2 <_ZN5Print7printlnEv>
   d8f5c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8f5e:	4620      	mov	r0, r4
   d8f60:	3718      	adds	r7, #24
   d8f62:	46bd      	mov	sp, r7
   d8f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d8f68:	f100 0308 	add.w	r3, r0, #8
   d8f6c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8f70:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8f72:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8f76:	4622      	mov	r2, r4
   d8f78:	1c41      	adds	r1, r0, #1
   d8f7a:	683b      	ldr	r3, [r7, #0]
   d8f7c:	4668      	mov	r0, sp
   d8f7e:	f7ff f899 	bl	d80b4 <vsnprintf>
  return write(str);
   d8f82:	4669      	mov	r1, sp
   d8f84:	4628      	mov	r0, r5
   d8f86:	f7fe f8ab 	bl	d70e0 <_ZN5Print5writeEPKc>
   d8f8a:	4604      	mov	r4, r0
   d8f8c:	46c5      	mov	sp, r8
   d8f8e:	e7e1      	b.n	d8f54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d8f90 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8f90:	4b01      	ldr	r3, [pc, #4]	; (d8f98 <_GLOBAL__sub_I_RGB+0x8>)
   d8f92:	2200      	movs	r2, #0
   d8f94:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d8f96:	4770      	bx	lr
   d8f98:	2003e590 	.word	0x2003e590

000d8f9c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d8f9c:	2100      	movs	r1, #0
   d8f9e:	f7fe bef5 	b.w	d7d8c <hal_spi_acquire>

000d8fa2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d8fa2:	2100      	movs	r1, #0
   d8fa4:	f7fe befa 	b.w	d7d9c <hal_spi_release>

000d8fa8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8fa8:	b510      	push	{r4, lr}
   d8faa:	4604      	mov	r4, r0
   d8fac:	4608      	mov	r0, r1
{
    _spi = spi;
   d8fae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8fb0:	f7fe febc 	bl	d7d2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8fb4:	2300      	movs	r3, #0
   d8fb6:	6063      	str	r3, [r4, #4]
}
   d8fb8:	4620      	mov	r0, r4
   d8fba:	bd10      	pop	{r4, pc}

000d8fbc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d8fbc:	b510      	push	{r4, lr}
   d8fbe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d8fc0:	7800      	ldrb	r0, [r0, #0]
   d8fc2:	f7ff ffeb 	bl	d8f9c <_ZN8SPIClass4lockEv.isra.0>
   d8fc6:	b948      	cbnz	r0, d8fdc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d8fc8:	7820      	ldrb	r0, [r4, #0]
   d8fca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d8fce:	f7fe fe95 	bl	d7cfc <hal_spi_begin>
        unlock();
   d8fd2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8fd8:	f7ff bfe3 	b.w	d8fa2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d8fdc:	bd10      	pop	{r4, pc}

000d8fde <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d8fde:	b513      	push	{r0, r1, r4, lr}
   d8fe0:	4604      	mov	r4, r0
    if (!lock())
   d8fe2:	7800      	ldrb	r0, [r0, #0]
{
   d8fe4:	9101      	str	r1, [sp, #4]
    if (!lock())
   d8fe6:	f7ff ffd9 	bl	d8f9c <_ZN8SPIClass4lockEv.isra.0>
   d8fea:	9901      	ldr	r1, [sp, #4]
   d8fec:	b940      	cbnz	r0, d9000 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d8fee:	7820      	ldrb	r0, [r4, #0]
   d8ff0:	f7fe fe8c 	bl	d7d0c <hal_spi_set_data_mode>
        unlock();
   d8ff4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d8ff6:	b002      	add	sp, #8
   d8ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d8ffc:	f7ff bfd1 	b.w	d8fa2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9000:	b002      	add	sp, #8
   d9002:	bd10      	pop	{r4, pc}

000d9004 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9004:	7800      	ldrb	r0, [r0, #0]
   d9006:	f7ff bfcc 	b.w	d8fa2 <_ZN8SPIClass6unlockEv.isra.0>
	...

000d900c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d900c:	0840      	lsrs	r0, r0, #1
{
   d900e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9010:	6018      	str	r0, [r3, #0]
   d9012:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9014:	6818      	ldr	r0, [r3, #0]
   d9016:	4288      	cmp	r0, r1
   d9018:	b2e5      	uxtb	r5, r4
   d901a:	d906      	bls.n	d902a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d901c:	3401      	adds	r4, #1
   d901e:	2c08      	cmp	r4, #8
   d9020:	d002      	beq.n	d9028 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9022:	0840      	lsrs	r0, r0, #1
   d9024:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9026:	e7f5      	b.n	d9014 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9028:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d902a:	4b02      	ldr	r3, [pc, #8]	; (d9034 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d902c:	5d5b      	ldrb	r3, [r3, r5]
   d902e:	7013      	strb	r3, [r2, #0]
}
   d9030:	bd30      	pop	{r4, r5, pc}
   d9032:	bf00      	nop
   d9034:	000ddc40 	.word	0x000ddc40

000d9038 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d903c:	4606      	mov	r6, r0
   d903e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d9040:	7800      	ldrb	r0, [r0, #0]
{
   d9042:	460c      	mov	r4, r1
    CHECK(lock());
   d9044:	f7ff ffaa 	bl	d8f9c <_ZN8SPIClass4lockEv.isra.0>
   d9048:	2800      	cmp	r0, #0
   d904a:	db1b      	blt.n	d9084 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d904c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d904e:	2214      	movs	r2, #20
   d9050:	2100      	movs	r1, #0
   d9052:	a809      	add	r0, sp, #36	; 0x24
   d9054:	f001 fe47 	bl	dace6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9058:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d905a:	2200      	movs	r2, #0
   d905c:	a909      	add	r1, sp, #36	; 0x24
   d905e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d9060:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9064:	f7fe fe72 	bl	d7d4c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9068:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d906c:	b113      	cbz	r3, d9074 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d906e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9072:	b155      	cbz	r5, d908a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9074:	2700      	movs	r7, #0
   d9076:	46b9      	mov	r9, r7
   d9078:	46b8      	mov	r8, r7
   d907a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d907c:	7923      	ldrb	r3, [r4, #4]
   d907e:	b15d      	cbz	r5, d9098 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9080:	b1c3      	cbz	r3, d90b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9082:	2000      	movs	r0, #0
}
   d9084:	b00f      	add	sp, #60	; 0x3c
   d9086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d908a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d908e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9092:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9096:	e7f1      	b.n	d907c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9098:	2b00      	cmp	r3, #0
   d909a:	d135      	bne.n	d9108 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d909c:	68a3      	ldr	r3, [r4, #8]
   d909e:	4543      	cmp	r3, r8
   d90a0:	d108      	bne.n	d90b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d90a2:	f88d 9020 	strb.w	r9, [sp, #32]
   d90a6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d90aa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d90ae:	89a3      	ldrh	r3, [r4, #12]
   d90b0:	429a      	cmp	r2, r3
   d90b2:	d0e6      	beq.n	d9082 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d90b4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d90b6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d90b8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d90bc:	980a      	ldr	r0, [sp, #40]	; 0x28
   d90be:	ab04      	add	r3, sp, #16
   d90c0:	f10d 020f 	add.w	r2, sp, #15
   d90c4:	f7ff ffa2 	bl	d900c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d90c8:	7921      	ldrb	r1, [r4, #4]
   d90ca:	b985      	cbnz	r5, d90ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d90cc:	b989      	cbnz	r1, d90f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d90ce:	68a3      	ldr	r3, [r4, #8]
   d90d0:	4543      	cmp	r3, r8
   d90d2:	d30e      	bcc.n	d90f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d90d4:	f88d 9020 	strb.w	r9, [sp, #32]
   d90d8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d90dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d90e0:	89a3      	ldrh	r3, [r4, #12]
   d90e2:	429a      	cmp	r2, r3
   d90e4:	d105      	bne.n	d90f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d90e6:	9b04      	ldr	r3, [sp, #16]
   d90e8:	4543      	cmp	r3, r8
   d90ea:	d102      	bne.n	d90f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d90ec:	e7c9      	b.n	d9082 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d90ee:	2900      	cmp	r1, #0
   d90f0:	d1f9      	bne.n	d90e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d90f2:	2300      	movs	r3, #0
   d90f4:	9301      	str	r3, [sp, #4]
   d90f6:	7b63      	ldrb	r3, [r4, #13]
   d90f8:	9300      	str	r3, [sp, #0]
   d90fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d90fe:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9100:	7830      	ldrb	r0, [r6, #0]
   d9102:	f7fe fe3b 	bl	d7d7c <hal_spi_set_settings>
   d9106:	e7bc      	b.n	d9082 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9108:	e9cd 5500 	strd	r5, r5, [sp]
   d910c:	462b      	mov	r3, r5
   d910e:	462a      	mov	r2, r5
   d9110:	2101      	movs	r1, #1
   d9112:	e7f5      	b.n	d9100 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9114 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9114:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9116:	7800      	ldrb	r0, [r0, #0]
   d9118:	f7fe fe00 	bl	d7d1c <hal_spi_transfer>
}
   d911c:	b2c0      	uxtb	r0, r0
   d911e:	bd08      	pop	{r3, pc}

000d9120 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9120:	b530      	push	{r4, r5, lr}
   d9122:	b087      	sub	sp, #28
   d9124:	4604      	mov	r4, r0
   d9126:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9128:	9500      	str	r5, [sp, #0]
   d912a:	7800      	ldrb	r0, [r0, #0]
   d912c:	f7fe fe16 	bl	d7d5c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d9130:	b93d      	cbnz	r5, d9142 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d9132:	7820      	ldrb	r0, [r4, #0]
   d9134:	a902      	add	r1, sp, #8
   d9136:	f7fe fe19 	bl	d7d6c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d913a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d913e:	07db      	lsls	r3, r3, #31
   d9140:	d4f7      	bmi.n	d9132 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d9142:	b007      	add	sp, #28
   d9144:	bd30      	pop	{r4, r5, pc}
	...

000d9148 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d9148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d914c:	ec57 6b10 	vmov	r6, r7, d0
   d9150:	4680      	mov	r8, r0
   d9152:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d9154:	ee10 0a10 	vmov	r0, s0
   d9158:	2200      	movs	r2, #0
   d915a:	2300      	movs	r3, #0
   d915c:	4639      	mov	r1, r7
   d915e:	f001 fb03 	bl	da768 <__aeabi_dcmplt>
   d9162:	b128      	cbz	r0, d9170 <_Z4dtoadhPc+0x28>
        val = -val;
   d9164:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9168:	461f      	mov	r7, r3
        *sout++ = '-';
   d916a:	232d      	movs	r3, #45	; 0x2d
   d916c:	f804 3b01 	strb.w	r3, [r4], #1
   d9170:	2300      	movs	r3, #0
    }
    long scale = 1;
   d9172:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d9176:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d9178:	b2d9      	uxtb	r1, r3
   d917a:	4588      	cmp	r8, r1
   d917c:	d903      	bls.n	d9186 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d917e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d9182:	3301      	adds	r3, #1
   d9184:	e7f8      	b.n	d9178 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d9186:	4648      	mov	r0, r9
   d9188:	f001 f812 	bl	da1b0 <__aeabi_i2d>
   d918c:	4632      	mov	r2, r6
   d918e:	463b      	mov	r3, r7
   d9190:	f001 f878 	bl	da284 <__aeabi_dmul>
   d9194:	4606      	mov	r6, r0
   d9196:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d9198:	f001 fbd4 	bl	da944 <__aeabi_d2ulz>
   d919c:	4605      	mov	r5, r0
   d919e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d91a0:	f001 f83a 	bl	da218 <__aeabi_ul2d>
   d91a4:	4602      	mov	r2, r0
   d91a6:	460b      	mov	r3, r1
   d91a8:	4630      	mov	r0, r6
   d91aa:	4639      	mov	r1, r7
   d91ac:	f000 feb2 	bl	d9f14 <__aeabi_dsub>
   d91b0:	4b13      	ldr	r3, [pc, #76]	; (d9200 <_Z4dtoadhPc+0xb8>)
   d91b2:	2200      	movs	r2, #0
   d91b4:	f001 faec 	bl	da790 <__aeabi_dcmpge>
   d91b8:	b110      	cbz	r0, d91c0 <_Z4dtoadhPc+0x78>
        fixed++;
   d91ba:	3501      	adds	r5, #1
   d91bc:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d91c0:	464a      	mov	r2, r9
   d91c2:	4628      	mov	r0, r5
   d91c4:	17d3      	asrs	r3, r2, #31
   d91c6:	4651      	mov	r1, sl
   d91c8:	f001 fba4 	bl	da914 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d91cc:	2301      	movs	r3, #1
   d91ce:	4615      	mov	r5, r2
   d91d0:	4621      	mov	r1, r4
   d91d2:	220a      	movs	r2, #10
   d91d4:	f000 fcf7 	bl	d9bc6 <ultoa>
    if (prec) {
   d91d8:	f1b8 0f00 	cmp.w	r8, #0
   d91dc:	d00d      	beq.n	d91fa <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d91de:	4620      	mov	r0, r4
   d91e0:	f001 fddd 	bl	dad9e <strlen>
        *sout++ = '.';
   d91e4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d91e6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d91e8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d91ea:	220a      	movs	r2, #10
   d91ec:	4643      	mov	r3, r8
   d91ee:	4628      	mov	r0, r5
   d91f0:	3101      	adds	r1, #1
    }
}
   d91f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d91f6:	f000 bce6 	b.w	d9bc6 <ultoa>
}
   d91fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d91fe:	bf00      	nop
   d9200:	3fe00000 	.word	0x3fe00000

000d9204 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9204:	b510      	push	{r4, lr}
   d9206:	4604      	mov	r4, r0
{
	free(buffer);
   d9208:	6800      	ldr	r0, [r0, #0]
   d920a:	f7fe ff33 	bl	d8074 <free>
}
   d920e:	4620      	mov	r0, r4
   d9210:	bd10      	pop	{r4, pc}

000d9212 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9212:	b510      	push	{r4, lr}
   d9214:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9216:	6800      	ldr	r0, [r0, #0]
   d9218:	b108      	cbz	r0, d921e <_ZN6String10invalidateEv+0xc>
   d921a:	f7fe ff2b 	bl	d8074 <free>
	buffer = NULL;
   d921e:	2300      	movs	r3, #0
	capacity = len = 0;
   d9220:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9224:	6023      	str	r3, [r4, #0]
}
   d9226:	bd10      	pop	{r4, pc}

000d9228 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9228:	b538      	push	{r3, r4, r5, lr}
   d922a:	4604      	mov	r4, r0
   d922c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d922e:	6800      	ldr	r0, [r0, #0]
   d9230:	3101      	adds	r1, #1
   d9232:	f7fe ff27 	bl	d8084 <realloc>
	if (newbuffer) {
   d9236:	b110      	cbz	r0, d923e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9238:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d923c:	2001      	movs	r0, #1
	}
	return 0;
}
   d923e:	bd38      	pop	{r3, r4, r5, pc}

000d9240 <_ZN6String7reserveEj>:
{
   d9240:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9242:	6803      	ldr	r3, [r0, #0]
{
   d9244:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9246:	b123      	cbz	r3, d9252 <_ZN6String7reserveEj+0x12>
   d9248:	6843      	ldr	r3, [r0, #4]
   d924a:	428b      	cmp	r3, r1
   d924c:	d301      	bcc.n	d9252 <_ZN6String7reserveEj+0x12>
   d924e:	2001      	movs	r0, #1
}
   d9250:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9252:	4620      	mov	r0, r4
   d9254:	f7ff ffe8 	bl	d9228 <_ZN6String12changeBufferEj>
   d9258:	2800      	cmp	r0, #0
   d925a:	d0f9      	beq.n	d9250 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d925c:	68a3      	ldr	r3, [r4, #8]
   d925e:	2b00      	cmp	r3, #0
   d9260:	d1f5      	bne.n	d924e <_ZN6String7reserveEj+0xe>
   d9262:	6822      	ldr	r2, [r4, #0]
   d9264:	7013      	strb	r3, [r2, #0]
   d9266:	e7f2      	b.n	d924e <_ZN6String7reserveEj+0xe>

000d9268 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9268:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d926a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d926c:	4611      	mov	r1, r2
   d926e:	9201      	str	r2, [sp, #4]
{
   d9270:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9272:	f7ff ffe5 	bl	d9240 <_ZN6String7reserveEj>
   d9276:	9a01      	ldr	r2, [sp, #4]
   d9278:	b928      	cbnz	r0, d9286 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d927a:	4620      	mov	r0, r4
   d927c:	f7ff ffc9 	bl	d9212 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9280:	4620      	mov	r0, r4
   d9282:	b003      	add	sp, #12
   d9284:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9286:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9288:	4629      	mov	r1, r5
   d928a:	6820      	ldr	r0, [r4, #0]
   d928c:	f001 fd1d 	bl	dacca <memcpy>
	buffer[len] = 0;
   d9290:	6822      	ldr	r2, [r4, #0]
   d9292:	68a3      	ldr	r3, [r4, #8]
   d9294:	2100      	movs	r1, #0
   d9296:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9298:	e7f2      	b.n	d9280 <_ZN6String4copyEPKcj+0x18>

000d929a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d929a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d929c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d929e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d92a2:	4604      	mov	r4, r0
	len = 0;
   d92a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d92a6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d92a8:	b141      	cbz	r1, d92bc <_ZN6StringC1EPKc+0x22>
   d92aa:	4608      	mov	r0, r1
   d92ac:	9101      	str	r1, [sp, #4]
   d92ae:	f001 fd76 	bl	dad9e <strlen>
   d92b2:	9901      	ldr	r1, [sp, #4]
   d92b4:	4602      	mov	r2, r0
   d92b6:	4620      	mov	r0, r4
   d92b8:	f7ff ffd6 	bl	d9268 <_ZN6String4copyEPKcj>
}
   d92bc:	4620      	mov	r0, r4
   d92be:	b002      	add	sp, #8
   d92c0:	bd10      	pop	{r4, pc}

000d92c2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d92c2:	b538      	push	{r3, r4, r5, lr}
   d92c4:	4605      	mov	r5, r0
	if (buffer) {
   d92c6:	6800      	ldr	r0, [r0, #0]
{
   d92c8:	460c      	mov	r4, r1
	if (buffer) {
   d92ca:	b168      	cbz	r0, d92e8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d92cc:	686a      	ldr	r2, [r5, #4]
   d92ce:	688b      	ldr	r3, [r1, #8]
   d92d0:	429a      	cmp	r2, r3
   d92d2:	d307      	bcc.n	d92e4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d92d4:	6809      	ldr	r1, [r1, #0]
   d92d6:	f001 fd3d 	bl	dad54 <strcpy>
			len = rhs.len;
   d92da:	68a3      	ldr	r3, [r4, #8]
   d92dc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d92de:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d92e0:	60a3      	str	r3, [r4, #8]
}
   d92e2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d92e4:	f7fe fec6 	bl	d8074 <free>
	buffer = rhs.buffer;
   d92e8:	6823      	ldr	r3, [r4, #0]
   d92ea:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d92ec:	6863      	ldr	r3, [r4, #4]
   d92ee:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d92f0:	68a3      	ldr	r3, [r4, #8]
   d92f2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d92f4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d92f6:	e9c4 3300 	strd	r3, r3, [r4]
   d92fa:	e7f1      	b.n	d92e0 <_ZN6String4moveERS_+0x1e>

000d92fc <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d92fc:	4288      	cmp	r0, r1
{
   d92fe:	b510      	push	{r4, lr}
   d9300:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9302:	d005      	beq.n	d9310 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9304:	680b      	ldr	r3, [r1, #0]
   d9306:	b12b      	cbz	r3, d9314 <_ZN6StringaSERKS_+0x18>
   d9308:	688a      	ldr	r2, [r1, #8]
   d930a:	4619      	mov	r1, r3
   d930c:	f7ff ffac 	bl	d9268 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9310:	4620      	mov	r0, r4
   d9312:	bd10      	pop	{r4, pc}
	else invalidate();
   d9314:	f7ff ff7d 	bl	d9212 <_ZN6String10invalidateEv>
   d9318:	e7fa      	b.n	d9310 <_ZN6StringaSERKS_+0x14>

000d931a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d931a:	b510      	push	{r4, lr}
	buffer = NULL;
   d931c:	2300      	movs	r3, #0
String::String(const String &value)
   d931e:	4604      	mov	r4, r0
	capacity = 0;
   d9320:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9324:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9326:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9328:	f7ff ffe8 	bl	d92fc <_ZN6StringaSERKS_>
}
   d932c:	4620      	mov	r0, r4
   d932e:	bd10      	pop	{r4, pc}

000d9330 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9330:	4288      	cmp	r0, r1
{
   d9332:	b510      	push	{r4, lr}
   d9334:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9336:	d001      	beq.n	d933c <_ZN6StringaSEOS_+0xc>
   d9338:	f7ff ffc3 	bl	d92c2 <_ZN6String4moveERS_>
	return *this;
}
   d933c:	4620      	mov	r0, r4
   d933e:	bd10      	pop	{r4, pc}

000d9340 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9340:	b513      	push	{r0, r1, r4, lr}
   d9342:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9344:	b159      	cbz	r1, d935e <_ZN6StringaSEPKc+0x1e>
   d9346:	4608      	mov	r0, r1
   d9348:	9101      	str	r1, [sp, #4]
   d934a:	f001 fd28 	bl	dad9e <strlen>
   d934e:	9901      	ldr	r1, [sp, #4]
   d9350:	4602      	mov	r2, r0
   d9352:	4620      	mov	r0, r4
   d9354:	f7ff ff88 	bl	d9268 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9358:	4620      	mov	r0, r4
   d935a:	b002      	add	sp, #8
   d935c:	bd10      	pop	{r4, pc}
	else invalidate();
   d935e:	f7ff ff58 	bl	d9212 <_ZN6String10invalidateEv>
   d9362:	e7f9      	b.n	d9358 <_ZN6StringaSEPKc+0x18>

000d9364 <_ZN6StringC1Ec>:
String::String(char c)
   d9364:	b513      	push	{r0, r1, r4, lr}
	buffer = NULL;
   d9366:	2300      	movs	r3, #0
	buf[0] = c;
   d9368:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
   d936c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9370:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9372:	7303      	strb	r3, [r0, #12]
	*this = buf;
   d9374:	a901      	add	r1, sp, #4
String::String(char c)
   d9376:	4604      	mov	r4, r0
	buf[1] = 0;
   d9378:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d937c:	f7ff ffe0 	bl	d9340 <_ZN6StringaSEPKc>
}
   d9380:	4620      	mov	r0, r4
   d9382:	b002      	add	sp, #8
   d9384:	bd10      	pop	{r4, pc}

000d9386 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   d9386:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d9388:	4604      	mov	r4, r0
	buffer = NULL;
   d938a:	2300      	movs	r3, #0
	capacity = 0;
   d938c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9390:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9392:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   d9394:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d9396:	a901      	add	r1, sp, #4
   d9398:	f000 fc56 	bl	d9c48 <utoa>
	*this = buf;
   d939c:	a901      	add	r1, sp, #4
   d939e:	4620      	mov	r0, r4
   d93a0:	f7ff ffce 	bl	d9340 <_ZN6StringaSEPKc>
}
   d93a4:	4620      	mov	r0, r4
   d93a6:	b004      	add	sp, #16
   d93a8:	bd10      	pop	{r4, pc}

000d93aa <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d93aa:	b530      	push	{r4, r5, lr}
   d93ac:	4604      	mov	r4, r0
	buffer = NULL;
   d93ae:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d93b0:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d93b2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d93b6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d93b8:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d93ba:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d93be:	b2cd      	uxtb	r5, r1
   d93c0:	f000 ff08 	bl	da1d4 <__aeabi_f2d>
   d93c4:	ec41 0b10 	vmov	d0, r0, r1
   d93c8:	a901      	add	r1, sp, #4
   d93ca:	4628      	mov	r0, r5
   d93cc:	f7ff febc 	bl	d9148 <_Z4dtoadhPc>
        *this = buf;
   d93d0:	a901      	add	r1, sp, #4
   d93d2:	4620      	mov	r0, r4
   d93d4:	f7ff ffb4 	bl	d9340 <_ZN6StringaSEPKc>
}
   d93d8:	4620      	mov	r0, r4
   d93da:	b00b      	add	sp, #44	; 0x2c
   d93dc:	bd30      	pop	{r4, r5, pc}

000d93de <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d93de:	b570      	push	{r4, r5, r6, lr}
   d93e0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d93e2:	460e      	mov	r6, r1
   d93e4:	b909      	cbnz	r1, d93ea <_ZN6String6concatEPKcj+0xc>
   d93e6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d93e8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d93ea:	b16a      	cbz	r2, d9408 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d93ec:	6884      	ldr	r4, [r0, #8]
   d93ee:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d93f0:	4621      	mov	r1, r4
   d93f2:	f7ff ff25 	bl	d9240 <_ZN6String7reserveEj>
   d93f6:	2800      	cmp	r0, #0
   d93f8:	d0f5      	beq.n	d93e6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d93fa:	6828      	ldr	r0, [r5, #0]
   d93fc:	68ab      	ldr	r3, [r5, #8]
   d93fe:	4631      	mov	r1, r6
   d9400:	4418      	add	r0, r3
   d9402:	f001 fca7 	bl	dad54 <strcpy>
	len = newlen;
   d9406:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9408:	2001      	movs	r0, #1
   d940a:	e7ed      	b.n	d93e8 <_ZN6String6concatEPKcj+0xa>

000d940c <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d940c:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   d940e:	220a      	movs	r2, #10
{
   d9410:	4604      	mov	r4, r0
   d9412:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   d9414:	4669      	mov	r1, sp
   d9416:	f000 fc01 	bl	d9c1c <itoa>
	return concat(buf, strlen(buf));
   d941a:	4668      	mov	r0, sp
   d941c:	f001 fcbf 	bl	dad9e <strlen>
   d9420:	4669      	mov	r1, sp
   d9422:	4602      	mov	r2, r0
   d9424:	4620      	mov	r0, r4
   d9426:	f7ff ffda 	bl	d93de <_ZN6String6concatEPKcj>
}
   d942a:	b002      	add	sp, #8
   d942c:	bd10      	pop	{r4, pc}

000d942e <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
   d942e:	b510      	push	{r4, lr}
   d9430:	4604      	mov	r4, r0
   d9432:	b086      	sub	sp, #24
   d9434:	ee10 0a10 	vmov	r0, s0
	char buf[20];
	dtoa(num, 6, buf);
   d9438:	f000 fecc 	bl	da1d4 <__aeabi_f2d>
   d943c:	ec41 0b10 	vmov	d0, r0, r1
   d9440:	a901      	add	r1, sp, #4
   d9442:	2006      	movs	r0, #6
   d9444:	f7ff fe80 	bl	d9148 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
   d9448:	a801      	add	r0, sp, #4
   d944a:	f001 fca8 	bl	dad9e <strlen>
   d944e:	a901      	add	r1, sp, #4
   d9450:	4602      	mov	r2, r0
   d9452:	4620      	mov	r0, r4
   d9454:	f7ff ffc3 	bl	d93de <_ZN6String6concatEPKcj>
}
   d9458:	b006      	add	sp, #24
   d945a:	bd10      	pop	{r4, pc}

000d945c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d945c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d945e:	688a      	ldr	r2, [r1, #8]
   d9460:	6809      	ldr	r1, [r1, #0]
{
   d9462:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9464:	f7ff ffbb 	bl	d93de <_ZN6String6concatEPKcj>
   d9468:	b910      	cbnz	r0, d9470 <_ZplRK15StringSumHelperRK6String+0x14>
   d946a:	4620      	mov	r0, r4
   d946c:	f7ff fed1 	bl	d9212 <_ZN6String10invalidateEv>
	return a;
}
   d9470:	4620      	mov	r0, r4
   d9472:	bd10      	pop	{r4, pc}

000d9474 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9474:	b513      	push	{r0, r1, r4, lr}
   d9476:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9478:	b929      	cbnz	r1, d9486 <_ZplRK15StringSumHelperPKc+0x12>
   d947a:	4620      	mov	r0, r4
   d947c:	f7ff fec9 	bl	d9212 <_ZN6String10invalidateEv>
	return a;
}
   d9480:	4620      	mov	r0, r4
   d9482:	b002      	add	sp, #8
   d9484:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9486:	4608      	mov	r0, r1
   d9488:	9101      	str	r1, [sp, #4]
   d948a:	f001 fc88 	bl	dad9e <strlen>
   d948e:	9901      	ldr	r1, [sp, #4]
   d9490:	4602      	mov	r2, r0
   d9492:	4620      	mov	r0, r4
   d9494:	f7ff ffa3 	bl	d93de <_ZN6String6concatEPKcj>
   d9498:	2800      	cmp	r0, #0
   d949a:	d0ee      	beq.n	d947a <_ZplRK15StringSumHelperPKc+0x6>
   d949c:	e7f0      	b.n	d9480 <_ZplRK15StringSumHelperPKc+0xc>

000d949e <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   d949e:	b510      	push	{r4, lr}
   d94a0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d94a2:	f7ff ffb3 	bl	d940c <_ZN6String6concatEi>
   d94a6:	b910      	cbnz	r0, d94ae <_ZplRK15StringSumHelperi+0x10>
   d94a8:	4620      	mov	r0, r4
   d94aa:	f7ff feb2 	bl	d9212 <_ZN6String10invalidateEv>
	return a;
}
   d94ae:	4620      	mov	r0, r4
   d94b0:	bd10      	pop	{r4, pc}

000d94b2 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
   d94b2:	b510      	push	{r4, lr}
   d94b4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   d94b6:	f7ff ffba 	bl	d942e <_ZN6String6concatEf>
   d94ba:	b910      	cbnz	r0, d94c2 <_ZplRK15StringSumHelperf+0x10>
   d94bc:	4620      	mov	r0, r4
   d94be:	f7ff fea8 	bl	d9212 <_ZN6String10invalidateEv>
	return a;
}
   d94c2:	4620      	mov	r0, r4
   d94c4:	bd10      	pop	{r4, pc}

000d94c6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d94c6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d94c8:	6882      	ldr	r2, [r0, #8]
   d94ca:	b93a      	cbnz	r2, d94dc <_ZNK6String6equalsEPKc+0x16>
   d94cc:	b121      	cbz	r1, d94d8 <_ZNK6String6equalsEPKc+0x12>
   d94ce:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d94d0:	fab0 f080 	clz	r0, r0
   d94d4:	0940      	lsrs	r0, r0, #5
   d94d6:	e000      	b.n	d94da <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d94d8:	2001      	movs	r0, #1
}
   d94da:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d94dc:	6800      	ldr	r0, [r0, #0]
   d94de:	b909      	cbnz	r1, d94e4 <_ZNK6String6equalsEPKc+0x1e>
   d94e0:	7800      	ldrb	r0, [r0, #0]
   d94e2:	e7f5      	b.n	d94d0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d94e4:	f001 fc2c 	bl	dad40 <strcmp>
   d94e8:	e7f2      	b.n	d94d0 <_ZNK6String6equalsEPKc+0xa>

000d94ea <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d94ea:	b510      	push	{r4, lr}
   d94ec:	4613      	mov	r3, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d94ee:	6884      	ldr	r4, [r0, #8]
   d94f0:	688a      	ldr	r2, [r1, #8]
   d94f2:	1aa4      	subs	r4, r4, r2
   d94f4:	429c      	cmp	r4, r3
   d94f6:	d30a      	bcc.n	d950e <_ZNK6String10startsWithERKS_j+0x24>
   d94f8:	6800      	ldr	r0, [r0, #0]
   d94fa:	b138      	cbz	r0, d950c <_ZNK6String10startsWithERKS_j+0x22>
   d94fc:	6809      	ldr	r1, [r1, #0]
   d94fe:	b141      	cbz	r1, d9512 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d9500:	4418      	add	r0, r3
   d9502:	f001 fc54 	bl	dadae <strncmp>
   d9506:	fab0 f080 	clz	r0, r0
   d950a:	0940      	lsrs	r0, r0, #5
}
   d950c:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d950e:	2000      	movs	r0, #0
   d9510:	e7fc      	b.n	d950c <_ZNK6String10startsWithERKS_j+0x22>
   d9512:	4608      	mov	r0, r1
   d9514:	e7fa      	b.n	d950c <_ZNK6String10startsWithERKS_j+0x22>

000d9516 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
   d9516:	6882      	ldr	r2, [r0, #8]
   d9518:	688b      	ldr	r3, [r1, #8]
   d951a:	429a      	cmp	r2, r3
   d951c:	d302      	bcc.n	d9524 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d951e:	2200      	movs	r2, #0
   d9520:	f7ff bfe3 	b.w	d94ea <_ZNK6String10startsWithERKS_j>
}
   d9524:	2000      	movs	r0, #0
   d9526:	4770      	bx	lr

000d9528 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d9528:	6883      	ldr	r3, [r0, #8]
   d952a:	428b      	cmp	r3, r1
   d952c:	d903      	bls.n	d9536 <_ZNK6StringixEj+0xe>
   d952e:	6800      	ldr	r0, [r0, #0]
   d9530:	b110      	cbz	r0, d9538 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d9532:	5c40      	ldrb	r0, [r0, r1]
   d9534:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   d9536:	2000      	movs	r0, #0
}
   d9538:	4770      	bx	lr

000d953a <_ZNK6String6charAtEj>:
	return operator[](loc);
   d953a:	f7ff bff5 	b.w	d9528 <_ZNK6StringixEj>

000d953e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d953e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d9540:	6883      	ldr	r3, [r0, #8]
   d9542:	4293      	cmp	r3, r2
   d9544:	d907      	bls.n	d9556 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d9546:	6804      	ldr	r4, [r0, #0]
   d9548:	6809      	ldr	r1, [r1, #0]
   d954a:	18a0      	adds	r0, r4, r2
   d954c:	f001 fc54 	bl	dadf8 <strstr>
	if (found == NULL) return -1;
   d9550:	b108      	cbz	r0, d9556 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d9552:	1b00      	subs	r0, r0, r4
}
   d9554:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d9556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d955a:	e7fb      	b.n	d9554 <_ZNK6String7indexOfERKS_j+0x16>

000d955c <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9560:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d9562:	688a      	ldr	r2, [r1, #8]
{
   d9564:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d9566:	b1ca      	cbz	r2, d959c <_ZNK6String11lastIndexOfERKS_j+0x40>
   d9568:	6883      	ldr	r3, [r0, #8]
   d956a:	b1bb      	cbz	r3, d959c <_ZNK6String11lastIndexOfERKS_j+0x40>
   d956c:	429a      	cmp	r2, r3
   d956e:	d815      	bhi.n	d959c <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d9570:	6807      	ldr	r7, [r0, #0]
	if (fromIndex >= len) fromIndex = len - 1;
   d9572:	42ab      	cmp	r3, r5
   d9574:	bf98      	it	ls
   d9576:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d957a:	4638      	mov	r0, r7
	int found = -1;
   d957c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d9580:	eb07 0805 	add.w	r8, r7, r5
   d9584:	4540      	cmp	r0, r8
   d9586:	d80b      	bhi.n	d95a0 <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
   d9588:	6831      	ldr	r1, [r6, #0]
   d958a:	f001 fc35 	bl	dadf8 <strstr>
		if (!p) break;
   d958e:	b138      	cbz	r0, d95a0 <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d9590:	1bc3      	subs	r3, r0, r7
   d9592:	42ab      	cmp	r3, r5
   d9594:	bf98      	it	ls
   d9596:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d9598:	3001      	adds	r0, #1
   d959a:	e7f3      	b.n	d9584 <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d959c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	}
	return found;
}
   d95a0:	4620      	mov	r0, r4
   d95a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d95a6 <_ZNK6String11lastIndexOfERKS_>:
	return lastIndexOf(s2, len - s2.len);
   d95a6:	6882      	ldr	r2, [r0, #8]
   d95a8:	688b      	ldr	r3, [r1, #8]
   d95aa:	1ad2      	subs	r2, r2, r3
   d95ac:	f7ff bfd6 	b.w	d955c <_ZNK6String11lastIndexOfERKS_j>

000d95b0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d95b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d95b2:	429a      	cmp	r2, r3
{
   d95b4:	460f      	mov	r7, r1
   d95b6:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d95b8:	490c      	ldr	r1, [pc, #48]	; (d95ec <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d95ba:	bf88      	it	hi
   d95bc:	4613      	movhi	r3, r2
{
   d95be:	4614      	mov	r4, r2
   d95c0:	4606      	mov	r6, r0
	if (left > right) {
   d95c2:	bf84      	itt	hi
   d95c4:	462c      	movhi	r4, r5
   d95c6:	461d      	movhi	r5, r3
	String out;
   d95c8:	f7ff fe67 	bl	d929a <_ZN6StringC1EPKc>
	if (left > len) return out;
   d95cc:	68ba      	ldr	r2, [r7, #8]
   d95ce:	42a2      	cmp	r2, r4
   d95d0:	d30a      	bcc.n	d95e8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d95d2:	6839      	ldr	r1, [r7, #0]
   d95d4:	42aa      	cmp	r2, r5
   d95d6:	bf94      	ite	ls
   d95d8:	ebc4 0202 	rsbls	r2, r4, r2
   d95dc:	ebc4 0205 	rsbhi	r2, r4, r5
   d95e0:	4421      	add	r1, r4
   d95e2:	4630      	mov	r0, r6
   d95e4:	f7ff fe40 	bl	d9268 <_ZN6String4copyEPKcj>
	return out;
}
   d95e8:	4630      	mov	r0, r6
   d95ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d95ec:	000ddcf4 	.word	0x000ddcf4

000d95f0 <_ZNK6String9substringEj>:
{
   d95f0:	b510      	push	{r4, lr}
   d95f2:	4604      	mov	r4, r0
	return substring(left, len);
   d95f4:	688b      	ldr	r3, [r1, #8]
   d95f6:	f7ff ffdb 	bl	d95b0 <_ZNK6String9substringEjj>
}
   d95fa:	4620      	mov	r0, r4
   d95fc:	bd10      	pop	{r4, pc}

000d95fe <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d95fe:	6800      	ldr	r0, [r0, #0]
   d9600:	b108      	cbz	r0, d9606 <_ZNK6String5toIntEv+0x8>
   d9602:	f001 bb50 	b.w	daca6 <atol>
	return 0;
}
   d9606:	4770      	bx	lr

000d9608 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
   d9608:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d960a:	6800      	ldr	r0, [r0, #0]
   d960c:	b140      	cbz	r0, d9620 <_ZNK6String7toFloatEv+0x18>
   d960e:	f001 fb47 	bl	daca0 <atof>
   d9612:	ec51 0b10 	vmov	r0, r1, d0
   d9616:	f001 f92d 	bl	da874 <__aeabi_d2f>
   d961a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d961e:	bd08      	pop	{r3, pc}
	return 0;
   d9620:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9628 <_ZNK6String7toFloatEv+0x20>
   d9624:	e7fb      	b.n	d961e <_ZNK6String7toFloatEv+0x16>
   d9626:	bf00      	nop
   d9628:	00000000 	.word	0x00000000

000d962c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d962c:	4b05      	ldr	r3, [pc, #20]	; (d9644 <_GLOBAL__sub_I_System+0x18>)
   d962e:	2202      	movs	r2, #2
   d9630:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d9632:	4b05      	ldr	r3, [pc, #20]	; (d9648 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d9634:	4a05      	ldr	r2, [pc, #20]	; (d964c <_GLOBAL__sub_I_System+0x20>)
   d9636:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d9638:	2000      	movs	r0, #0
   d963a:	6018      	str	r0, [r3, #0]
   d963c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d963e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d9640:	f7fe bc44 	b.w	d7ecc <set_system_mode>
   d9644:	2003e5ac 	.word	0x2003e5ac
   d9648:	2003e5a0 	.word	0x2003e5a0
   d964c:	ffff0000 	.word	0xffff0000

000d9650 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d9654:	4a15      	ldr	r2, [pc, #84]	; (d96ac <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9656:	f8df 8060 	ldr.w	r8, [pc, #96]	; d96b8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d965a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d965e:	18c0      	adds	r0, r0, r3
   d9660:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d9664:	4a12      	ldr	r2, [pc, #72]	; (d96b0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d9666:	e9d2 3200 	ldrd	r3, r2, [r2]
   d966a:	18c6      	adds	r6, r0, r3
   d966c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d9670:	e9d8 2300 	ldrd	r2, r3, [r8]
   d9674:	42bb      	cmp	r3, r7
   d9676:	bf08      	it	eq
   d9678:	42b2      	cmpeq	r2, r6
{
   d967a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d967c:	d013      	beq.n	d96a6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d967e:	a903      	add	r1, sp, #12
   d9680:	4668      	mov	r0, sp
   d9682:	e9cd 6700 	strd	r6, r7, [sp]
   d9686:	f7fe fd3d 	bl	d8104 <localtime_r>
	calendar_time.tm_year += 1900;
   d968a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d968c:	4d09      	ldr	r5, [pc, #36]	; (d96b4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d968e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9692:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d9694:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d969a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d969c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d969e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d96a2:	6823      	ldr	r3, [r4, #0]
   d96a4:	602b      	str	r3, [r5, #0]
    }
}
   d96a6:	b00c      	add	sp, #48	; 0x30
   d96a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d96ac:	2003e5e8 	.word	0x2003e5e8
   d96b0:	2003e5e0 	.word	0x2003e5e0
   d96b4:	2003e5b8 	.word	0x2003e5b8
   d96b8:	2003e5f0 	.word	0x2003e5f0

000d96bc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d96bc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d96be:	2000      	movs	r0, #0
   d96c0:	f7fe fc60 	bl	d7f84 <spark_sync_time_pending>
   d96c4:	b128      	cbz	r0, d96d2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d96c6:	f7fe fc45 	bl	d7f54 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d96ca:	f080 0001 	eor.w	r0, r0, #1
   d96ce:	b2c0      	uxtb	r0, r0
    }
   d96d0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d96d2:	2001      	movs	r0, #1
   d96d4:	e7fc      	b.n	d96d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d96d8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d96d8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d96da:	f7ff ffb9 	bl	d9650 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d96de:	4b02      	ldr	r3, [pc, #8]	; (d96e8 <_ZN9TimeClass5monthEx+0x10>)
   d96e0:	6918      	ldr	r0, [r3, #16]
}
   d96e2:	3001      	adds	r0, #1
   d96e4:	bd08      	pop	{r3, pc}
   d96e6:	bf00      	nop
   d96e8:	2003e5b8 	.word	0x2003e5b8

000d96ec <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d96ec:	b530      	push	{r4, r5, lr}
   d96ee:	4604      	mov	r4, r0
    t += time_zone_cache;
   d96f0:	4818      	ldr	r0, [pc, #96]	; (d9754 <_ZN9TimeClass7timeStrEx+0x68>)
   d96f2:	e9d0 1000 	ldrd	r1, r0, [r0]
   d96f6:	1852      	adds	r2, r2, r1
   d96f8:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d96fc:	4816      	ldr	r0, [pc, #88]	; (d9758 <_ZN9TimeClass7timeStrEx+0x6c>)
   d96fe:	e9d0 1000 	ldrd	r1, r0, [r0]
   d9702:	1852      	adds	r2, r2, r1
{
   d9704:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d9706:	eb40 0303 	adc.w	r3, r0, r3
   d970a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d970e:	2224      	movs	r2, #36	; 0x24
   d9710:	eb0d 0002 	add.w	r0, sp, r2
   d9714:	2100      	movs	r1, #0
   d9716:	f001 fae6 	bl	dace6 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d971a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d971c:	a909      	add	r1, sp, #36	; 0x24
   d971e:	4668      	mov	r0, sp
   d9720:	f7fe fcf0 	bl	d8104 <localtime_r>
    char ascstr[26] = {};
   d9724:	2216      	movs	r2, #22
   d9726:	4629      	mov	r1, r5
   d9728:	a803      	add	r0, sp, #12
   d972a:	9502      	str	r5, [sp, #8]
   d972c:	f001 fadb 	bl	dace6 <memset>
    asctime_r(&calendar_time, ascstr);
   d9730:	a902      	add	r1, sp, #8
   d9732:	a809      	add	r0, sp, #36	; 0x24
   d9734:	f001 fa88 	bl	dac48 <asctime_r>
    int len = strlen(ascstr);
   d9738:	a802      	add	r0, sp, #8
   d973a:	f001 fb30 	bl	dad9e <strlen>
    ascstr[len-1] = 0; // remove final newline
   d973e:	ab12      	add	r3, sp, #72	; 0x48
   d9740:	4418      	add	r0, r3
    return String(ascstr);
   d9742:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d9744:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d9748:	4620      	mov	r0, r4
   d974a:	f7ff fda6 	bl	d929a <_ZN6StringC1EPKc>
}
   d974e:	4620      	mov	r0, r4
   d9750:	b013      	add	sp, #76	; 0x4c
   d9752:	bd30      	pop	{r4, r5, pc}
   d9754:	2003e5e8 	.word	0x2003e5e8
   d9758:	2003e5e0 	.word	0x2003e5e0

000d975c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9760:	b0a5      	sub	sp, #148	; 0x94
   d9762:	4607      	mov	r7, r0
   d9764:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d9766:	a814      	add	r0, sp, #80	; 0x50
{
   d9768:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d976a:	223f      	movs	r2, #63	; 0x3f
{
   d976c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d976e:	f001 fb30 	bl	dadd2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9772:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d9774:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d9776:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d977a:	f001 fb10 	bl	dad9e <strlen>
   d977e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d9780:	bb5d      	cbnz	r5, d97da <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d9782:	492a      	ldr	r1, [pc, #168]	; (d982c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d9784:	a803      	add	r0, sp, #12
   d9786:	f001 fae5 	bl	dad54 <strcpy>
   d978a:	ae14      	add	r6, sp, #80	; 0x50
{
   d978c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d978e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d9792:	45ab      	cmp	fp, r5
   d9794:	d936      	bls.n	d9804 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d9796:	46b1      	mov	r9, r6
   d9798:	f105 0a01 	add.w	sl, r5, #1
   d979c:	f819 3b01 	ldrb.w	r3, [r9], #1
   d97a0:	2b25      	cmp	r3, #37	; 0x25
   d97a2:	d117      	bne.n	d97d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d97a4:	7873      	ldrb	r3, [r6, #1]
   d97a6:	2b7a      	cmp	r3, #122	; 0x7a
   d97a8:	d114      	bne.n	d97d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d97aa:	a803      	add	r0, sp, #12
   d97ac:	f001 faf7 	bl	dad9e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d97b0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d97b2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d97b4:	1828      	adds	r0, r5, r0
   d97b6:	4418      	add	r0, r3
   d97b8:	ebab 0205 	sub.w	r2, fp, r5
   d97bc:	1cb1      	adds	r1, r6, #2
   d97be:	f001 fa84 	bl	dacca <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d97c2:	4622      	mov	r2, r4
   d97c4:	a903      	add	r1, sp, #12
   d97c6:	4630      	mov	r0, r6
   d97c8:	f001 fa7f 	bl	dacca <memcpy>
            len = strlen(format_str);
   d97cc:	a814      	add	r0, sp, #80	; 0x50
   d97ce:	f001 fae6 	bl	dad9e <strlen>
   d97d2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d97d4:	464e      	mov	r6, r9
   d97d6:	4655      	mov	r5, sl
   d97d8:	e7d9      	b.n	d978e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d97da:	213c      	movs	r1, #60	; 0x3c
   d97dc:	fb95 f3f1 	sdiv	r3, r5, r1
   d97e0:	2b00      	cmp	r3, #0
   d97e2:	bfb8      	it	lt
   d97e4:	425b      	neglt	r3, r3
   d97e6:	fbb3 f2f1 	udiv	r2, r3, r1
   d97ea:	fb01 3312 	mls	r3, r1, r2, r3
   d97ee:	9300      	str	r3, [sp, #0]
   d97f0:	4a0f      	ldr	r2, [pc, #60]	; (d9830 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d97f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d97f6:	2110      	movs	r1, #16
   d97f8:	a803      	add	r0, sp, #12
   d97fa:	fb95 f3f3 	sdiv	r3, r5, r3
   d97fe:	f7fe fc51 	bl	d80a4 <snprintf>
   d9802:	e7c2      	b.n	d978a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d9804:	2100      	movs	r1, #0
   d9806:	222e      	movs	r2, #46	; 0x2e
   d9808:	a808      	add	r0, sp, #32
   d980a:	9107      	str	r1, [sp, #28]
   d980c:	f001 fa6b 	bl	dace6 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9810:	4643      	mov	r3, r8
   d9812:	aa14      	add	r2, sp, #80	; 0x50
   d9814:	2132      	movs	r1, #50	; 0x32
   d9816:	a807      	add	r0, sp, #28
   d9818:	f7fe fc6c 	bl	d80f4 <strftime>
    return String(buf);
   d981c:	a907      	add	r1, sp, #28
   d981e:	4638      	mov	r0, r7
   d9820:	f7ff fd3b 	bl	d929a <_ZN6StringC1EPKc>
}
   d9824:	4638      	mov	r0, r7
   d9826:	b025      	add	sp, #148	; 0x94
   d9828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d982c:	000ddc48 	.word	0x000ddc48
   d9830:	000ddc4a 	.word	0x000ddc4a

000d9834 <_ZN9TimeClass6formatExPKc>:
{
   d9834:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9836:	b08d      	sub	sp, #52	; 0x34
   d9838:	e9cd 2300 	strd	r2, r3, [sp]
   d983c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d983e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9840:	b915      	cbnz	r5, d9848 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d9842:	4b19      	ldr	r3, [pc, #100]	; (d98a8 <_ZN9TimeClass6formatExPKc+0x74>)
   d9844:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d9846:	b12d      	cbz	r5, d9854 <_ZN9TimeClass6formatExPKc+0x20>
   d9848:	4b18      	ldr	r3, [pc, #96]	; (d98ac <_ZN9TimeClass6formatExPKc+0x78>)
   d984a:	4628      	mov	r0, r5
   d984c:	6819      	ldr	r1, [r3, #0]
   d984e:	f001 fa77 	bl	dad40 <strcmp>
   d9852:	b938      	cbnz	r0, d9864 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d9854:	e9dd 2300 	ldrd	r2, r3, [sp]
   d9858:	4620      	mov	r0, r4
   d985a:	f7ff ff47 	bl	d96ec <_ZN9TimeClass7timeStrEx>
}
   d985e:	4620      	mov	r0, r4
   d9860:	b00d      	add	sp, #52	; 0x34
   d9862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d9864:	4e12      	ldr	r6, [pc, #72]	; (d98b0 <_ZN9TimeClass6formatExPKc+0x7c>)
   d9866:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d9868:	4f12      	ldr	r7, [pc, #72]	; (d98b4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d986a:	e9d6 3200 	ldrd	r3, r2, [r6]
   d986e:	185b      	adds	r3, r3, r1
   d9870:	9901      	ldr	r1, [sp, #4]
   d9872:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d9876:	e9d7 0100 	ldrd	r0, r1, [r7]
   d987a:	181b      	adds	r3, r3, r0
   d987c:	eb41 0202 	adc.w	r2, r1, r2
   d9880:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d9884:	2100      	movs	r1, #0
   d9886:	2224      	movs	r2, #36	; 0x24
   d9888:	a803      	add	r0, sp, #12
   d988a:	f001 fa2c 	bl	dace6 <memset>
    localtime_r(&t, &calendar_time);
   d988e:	a903      	add	r1, sp, #12
   d9890:	4668      	mov	r0, sp
   d9892:	f7fe fc37 	bl	d8104 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d9896:	6832      	ldr	r2, [r6, #0]
   d9898:	683b      	ldr	r3, [r7, #0]
   d989a:	a903      	add	r1, sp, #12
   d989c:	4413      	add	r3, r2
   d989e:	4620      	mov	r0, r4
   d98a0:	462a      	mov	r2, r5
   d98a2:	f7ff ff5b 	bl	d975c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d98a6:	e7da      	b.n	d985e <_ZN9TimeClass6formatExPKc+0x2a>
   d98a8:	2003e5b4 	.word	0x2003e5b4
   d98ac:	2003dce0 	.word	0x2003dce0
   d98b0:	2003e5e8 	.word	0x2003e5e8
   d98b4:	2003e5e0 	.word	0x2003e5e0

000d98b8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d98b8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d98ba:	2000      	movs	r0, #0
   d98bc:	f7fe f97e 	bl	d7bbc <hal_rtc_time_is_valid>
    if (rtcstate)
   d98c0:	4604      	mov	r4, r0
   d98c2:	b9a0      	cbnz	r0, d98ee <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d98c4:	f7fe fafa 	bl	d7ebc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d98c8:	2801      	cmp	r0, #1
   d98ca:	d110      	bne.n	d98ee <_ZN9TimeClass7isValidEv+0x36>
   d98cc:	4620      	mov	r0, r4
   d98ce:	f7fe fb1d 	bl	d7f0c <system_thread_get_state>
   d98d2:	b960      	cbnz	r0, d98ee <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d98d4:	f7ff fef2 	bl	d96bc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d98d8:	b910      	cbnz	r0, d98e0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d98da:	f7fe fb33 	bl	d7f44 <spark_process>
        while (_while() && !_condition()) {
   d98de:	e7f9      	b.n	d98d4 <_ZN9TimeClass7isValidEv+0x1c>
   d98e0:	f7ff feec 	bl	d96bc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d98e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d98e8:	2000      	movs	r0, #0
   d98ea:	f7fe b967 	b.w	d7bbc <hal_rtc_time_is_valid>
}
   d98ee:	4620      	mov	r0, r4
   d98f0:	bd10      	pop	{r4, pc}

000d98f2 <_ZN9TimeClass3nowEv>:
{
   d98f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d98f4:	f7ff ffe0 	bl	d98b8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d98f8:	2210      	movs	r2, #16
   d98fa:	2100      	movs	r1, #0
   d98fc:	4668      	mov	r0, sp
   d98fe:	f001 f9f2 	bl	dace6 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d9902:	2100      	movs	r1, #0
   d9904:	4668      	mov	r0, sp
   d9906:	f7fe f961 	bl	d7bcc <hal_rtc_get_time>
}
   d990a:	9800      	ldr	r0, [sp, #0]
   d990c:	b005      	add	sp, #20
   d990e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9914 <_ZN9TimeClass4hourEv>:
{
   d9914:	b508      	push	{r3, lr}
	return hour(now());
   d9916:	f7ff ffec 	bl	d98f2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d991a:	17c1      	asrs	r1, r0, #31
   d991c:	f7ff fe98 	bl	d9650 <_ZL22Refresh_UnixTime_Cachex>
}
   d9920:	4b01      	ldr	r3, [pc, #4]	; (d9928 <_ZN9TimeClass4hourEv+0x14>)
   d9922:	6898      	ldr	r0, [r3, #8]
   d9924:	bd08      	pop	{r3, pc}
   d9926:	bf00      	nop
   d9928:	2003e5b8 	.word	0x2003e5b8

000d992c <_ZN9TimeClass6minuteEv>:
{
   d992c:	b508      	push	{r3, lr}
	return minute(now());
   d992e:	f7ff ffe0 	bl	d98f2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9932:	17c1      	asrs	r1, r0, #31
   d9934:	f7ff fe8c 	bl	d9650 <_ZL22Refresh_UnixTime_Cachex>
}
   d9938:	4b01      	ldr	r3, [pc, #4]	; (d9940 <_ZN9TimeClass6minuteEv+0x14>)
   d993a:	6858      	ldr	r0, [r3, #4]
   d993c:	bd08      	pop	{r3, pc}
   d993e:	bf00      	nop
   d9940:	2003e5b8 	.word	0x2003e5b8

000d9944 <_ZN9TimeClass3dayEv>:
{
   d9944:	b508      	push	{r3, lr}
	return day(now());
   d9946:	f7ff ffd4 	bl	d98f2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d994a:	17c1      	asrs	r1, r0, #31
   d994c:	f7ff fe80 	bl	d9650 <_ZL22Refresh_UnixTime_Cachex>
}
   d9950:	4b01      	ldr	r3, [pc, #4]	; (d9958 <_ZN9TimeClass3dayEv+0x14>)
   d9952:	68d8      	ldr	r0, [r3, #12]
   d9954:	bd08      	pop	{r3, pc}
   d9956:	bf00      	nop
   d9958:	2003e5b8 	.word	0x2003e5b8

000d995c <_ZN9TimeClass5monthEv>:
{
   d995c:	b508      	push	{r3, lr}
	return month(now());
   d995e:	f7ff ffc8 	bl	d98f2 <_ZN9TimeClass3nowEv>
}
   d9962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   d9966:	17c1      	asrs	r1, r0, #31
   d9968:	f7ff beb6 	b.w	d96d8 <_ZN9TimeClass5monthEx>

000d996c <_ZN9TimeClass4yearEv>:
{
   d996c:	b508      	push	{r3, lr}
	return year(now());
   d996e:	f7ff ffc0 	bl	d98f2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9972:	17c1      	asrs	r1, r0, #31
   d9974:	f7ff fe6c 	bl	d9650 <_ZL22Refresh_UnixTime_Cachex>
}
   d9978:	4b01      	ldr	r3, [pc, #4]	; (d9980 <_ZN9TimeClass4yearEv+0x14>)
   d997a:	6958      	ldr	r0, [r3, #20]
   d997c:	bd08      	pop	{r3, pc}
   d997e:	bf00      	nop
   d9980:	2003e5b8 	.word	0x2003e5b8

000d9984 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9984:	4b02      	ldr	r3, [pc, #8]	; (d9990 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9986:	681a      	ldr	r2, [r3, #0]
   d9988:	4b02      	ldr	r3, [pc, #8]	; (d9994 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d998a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d998c:	4770      	bx	lr
   d998e:	bf00      	nop
   d9990:	2003dce0 	.word	0x2003dce0
   d9994:	2003e5b4 	.word	0x2003e5b4

000d9998 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9998:	4770      	bx	lr

000d999a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d999a:	7441      	strb	r1, [r0, #17]
}
   d999c:	4770      	bx	lr

000d999e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d999e:	4770      	bx	lr

000d99a0 <_ZN11USARTSerial17availableForWriteEv>:
{
   d99a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d99a2:	7c00      	ldrb	r0, [r0, #16]
   d99a4:	f7fe fa3a 	bl	d7e1c <hal_usart_available_data_for_write>
}
   d99a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d99ac:	bd08      	pop	{r3, pc}

000d99ae <_ZN11USARTSerial9availableEv>:
{
   d99ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d99b0:	7c00      	ldrb	r0, [r0, #16]
   d99b2:	f7fe fa0b 	bl	d7dcc <hal_usart_available>
}
   d99b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d99ba:	bd08      	pop	{r3, pc}

000d99bc <_ZN11USARTSerial4peekEv>:
{
   d99bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d99be:	7c00      	ldrb	r0, [r0, #16]
   d99c0:	f7fe fa14 	bl	d7dec <hal_usart_peek>
}
   d99c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d99c8:	bd08      	pop	{r3, pc}

000d99ca <_ZN11USARTSerial4readEv>:
{
   d99ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d99cc:	7c00      	ldrb	r0, [r0, #16]
   d99ce:	f7fe fa05 	bl	d7ddc <hal_usart_read>
}
   d99d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d99d6:	bd08      	pop	{r3, pc}

000d99d8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d99d8:	7c00      	ldrb	r0, [r0, #16]
   d99da:	f7fe ba0f 	b.w	d7dfc <hal_usart_flush>

000d99de <_ZN11USARTSerial5writeEh>:
{
   d99de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d99e0:	7c45      	ldrb	r5, [r0, #17]
{
   d99e2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d99e4:	b12d      	cbz	r5, d99f2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d99e6:	7c20      	ldrb	r0, [r4, #16]
}
   d99e8:	b003      	add	sp, #12
   d99ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d99ee:	f7fe b9e5 	b.w	d7dbc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d99f2:	7c00      	ldrb	r0, [r0, #16]
   d99f4:	9101      	str	r1, [sp, #4]
   d99f6:	f7fe fa11 	bl	d7e1c <hal_usart_available_data_for_write>
   d99fa:	2800      	cmp	r0, #0
   d99fc:	9901      	ldr	r1, [sp, #4]
   d99fe:	dcf2      	bgt.n	d99e6 <_ZN11USARTSerial5writeEh+0x8>
}
   d9a00:	4628      	mov	r0, r5
   d9a02:	b003      	add	sp, #12
   d9a04:	bd30      	pop	{r4, r5, pc}

000d9a06 <_ZN11USARTSerialD0Ev>:
   d9a06:	b510      	push	{r4, lr}
   d9a08:	2114      	movs	r1, #20
   d9a0a:	4604      	mov	r4, r0
   d9a0c:	f000 fa76 	bl	d9efc <_ZdlPvj>
   d9a10:	4620      	mov	r0, r4
   d9a12:	bd10      	pop	{r4, pc}

000d9a14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9a14:	b510      	push	{r4, lr}
   d9a16:	f04f 0c00 	mov.w	ip, #0
   d9a1a:	4604      	mov	r4, r0
   d9a1c:	4608      	mov	r0, r1
   d9a1e:	4611      	mov	r1, r2
   d9a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9a24:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9a28:	4a04      	ldr	r2, [pc, #16]	; (d9a3c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9a2a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9a2c:	2201      	movs	r2, #1
  _serial = serial;
   d9a2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9a30:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9a32:	461a      	mov	r2, r3
   d9a34:	f7fe f9ba 	bl	d7dac <hal_usart_init>
}
   d9a38:	4620      	mov	r0, r4
   d9a3a:	bd10      	pop	{r4, pc}
   d9a3c:	000ddc7c 	.word	0x000ddc7c

000d9a40 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d9a40:	7c00      	ldrb	r0, [r0, #16]
   d9a42:	2300      	movs	r3, #0
   d9a44:	f7fe b9f2 	b.w	d7e2c <hal_usart_begin_config>

000d9a48 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d9a48:	2200      	movs	r2, #0
   d9a4a:	f7ff bff9 	b.w	d9a40 <_ZN11USARTSerial5beginEmm>
	...

000d9a50 <_Z22__fetch_global_Serial1v>:
{
   d9a50:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9a52:	4c0d      	ldr	r4, [pc, #52]	; (d9a88 <_Z22__fetch_global_Serial1v+0x38>)
   d9a54:	7821      	ldrb	r1, [r4, #0]
   d9a56:	f3bf 8f5b 	dmb	ish
   d9a5a:	f011 0101 	ands.w	r1, r1, #1
   d9a5e:	d110      	bne.n	d9a82 <_Z22__fetch_global_Serial1v+0x32>
   d9a60:	4620      	mov	r0, r4
   d9a62:	9101      	str	r1, [sp, #4]
   d9a64:	f7fa fb28 	bl	d40b8 <__cxa_guard_acquire>
   d9a68:	9901      	ldr	r1, [sp, #4]
   d9a6a:	b150      	cbz	r0, d9a82 <_Z22__fetch_global_Serial1v+0x32>
   d9a6c:	4b07      	ldr	r3, [pc, #28]	; (d9a8c <_Z22__fetch_global_Serial1v+0x3c>)
   d9a6e:	4a08      	ldr	r2, [pc, #32]	; (d9a90 <_Z22__fetch_global_Serial1v+0x40>)
   d9a70:	4808      	ldr	r0, [pc, #32]	; (d9a94 <_Z22__fetch_global_Serial1v+0x44>)
   d9a72:	f7ff ffcf 	bl	d9a14 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d9a76:	4620      	mov	r0, r4
   d9a78:	f7fa fb23 	bl	d40c2 <__cxa_guard_release>
   d9a7c:	4806      	ldr	r0, [pc, #24]	; (d9a98 <_Z22__fetch_global_Serial1v+0x48>)
   d9a7e:	f001 f909 	bl	dac94 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9a82:	4804      	ldr	r0, [pc, #16]	; (d9a94 <_Z22__fetch_global_Serial1v+0x44>)
   d9a84:	b002      	add	sp, #8
   d9a86:	bd10      	pop	{r4, pc}
   d9a88:	2003e5f8 	.word	0x2003e5f8
   d9a8c:	2003e680 	.word	0x2003e680
   d9a90:	2003e5fc 	.word	0x2003e5fc
   d9a94:	2003e704 	.word	0x2003e704
   d9a98:	000d999f 	.word	0x000d999f

000d9a9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9a9c:	7441      	strb	r1, [r0, #17]
}
   d9a9e:	4770      	bx	lr

000d9aa0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9aa0:	4770      	bx	lr

000d9aa2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9aa2:	4770      	bx	lr

000d9aa4 <_ZN9USBSerial4readEv>:
{
   d9aa4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9aa6:	2100      	movs	r1, #0
   d9aa8:	7c00      	ldrb	r0, [r0, #16]
   d9aaa:	f7fe f9e7 	bl	d7e7c <HAL_USB_USART_Receive_Data>
}
   d9aae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9ab2:	bd08      	pop	{r3, pc}

000d9ab4 <_ZN9USBSerial4peekEv>:
{
   d9ab4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9ab6:	2101      	movs	r1, #1
   d9ab8:	7c00      	ldrb	r0, [r0, #16]
   d9aba:	f7fe f9df 	bl	d7e7c <HAL_USB_USART_Receive_Data>
}
   d9abe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9ac2:	bd08      	pop	{r3, pc}

000d9ac4 <_ZN9USBSerial17availableForWriteEv>:
{
   d9ac4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9ac6:	7c00      	ldrb	r0, [r0, #16]
   d9ac8:	f7fe f9d0 	bl	d7e6c <HAL_USB_USART_Available_Data_For_Write>
}
   d9acc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ad0:	bd08      	pop	{r3, pc}

000d9ad2 <_ZN9USBSerial9availableEv>:
{
   d9ad2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9ad4:	7c00      	ldrb	r0, [r0, #16]
   d9ad6:	f7fe f9c1 	bl	d7e5c <HAL_USB_USART_Available_Data>
}
   d9ada:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ade:	bd08      	pop	{r3, pc}

000d9ae0 <_ZN9USBSerial5writeEh>:
{
   d9ae0:	b513      	push	{r0, r1, r4, lr}
   d9ae2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9ae4:	7c00      	ldrb	r0, [r0, #16]
{
   d9ae6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9ae8:	f7fe f9c0 	bl	d7e6c <HAL_USB_USART_Available_Data_For_Write>
   d9aec:	2800      	cmp	r0, #0
   d9aee:	9901      	ldr	r1, [sp, #4]
   d9af0:	dc01      	bgt.n	d9af6 <_ZN9USBSerial5writeEh+0x16>
   d9af2:	7c60      	ldrb	r0, [r4, #17]
   d9af4:	b120      	cbz	r0, d9b00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9af6:	7c20      	ldrb	r0, [r4, #16]
   d9af8:	f7fe f9c8 	bl	d7e8c <HAL_USB_USART_Send_Data>
   d9afc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9b00:	b002      	add	sp, #8
   d9b02:	bd10      	pop	{r4, pc}

000d9b04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d9b04:	7c00      	ldrb	r0, [r0, #16]
   d9b06:	f7fe b9c9 	b.w	d7e9c <HAL_USB_USART_Flush_Data>

000d9b0a <_ZN9USBSerialD0Ev>:
   d9b0a:	b510      	push	{r4, lr}
   d9b0c:	2114      	movs	r1, #20
   d9b0e:	4604      	mov	r4, r0
   d9b10:	f000 f9f4 	bl	d9efc <_ZdlPvj>
   d9b14:	4620      	mov	r0, r4
   d9b16:	bd10      	pop	{r4, pc}

000d9b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9b18:	b510      	push	{r4, lr}
   d9b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9b1e:	4604      	mov	r4, r0
   d9b20:	4608      	mov	r0, r1
   d9b22:	2100      	movs	r1, #0
   d9b24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9b28:	4b04      	ldr	r3, [pc, #16]	; (d9b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9b2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9b2c:	2301      	movs	r3, #1
  _serial = serial;
   d9b2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9b30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9b32:	4611      	mov	r1, r2
   d9b34:	f7fe f982 	bl	d7e3c <HAL_USB_USART_Init>
}
   d9b38:	4620      	mov	r0, r4
   d9b3a:	bd10      	pop	{r4, pc}
   d9b3c:	000ddcac 	.word	0x000ddcac

000d9b40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9b40:	7c00      	ldrb	r0, [r0, #16]
   d9b42:	2200      	movs	r2, #0
   d9b44:	f7fe b982 	b.w	d7e4c <HAL_USB_USART_Begin>

000d9b48 <_Z19acquireSerialBufferv>:
{
   d9b48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9b4a:	2214      	movs	r2, #20
{
   d9b4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9b4e:	2100      	movs	r1, #0
   d9b50:	f001 f8c9 	bl	dace6 <memset>
}
   d9b54:	4620      	mov	r0, r4
   d9b56:	bd10      	pop	{r4, pc}

000d9b58 <_Z16_fetch_usbserialv>:
{
   d9b58:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9b5a:	4c0f      	ldr	r4, [pc, #60]	; (d9b98 <_Z16_fetch_usbserialv+0x40>)
{
   d9b5c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9b5e:	a803      	add	r0, sp, #12
   d9b60:	f7ff fff2 	bl	d9b48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9b64:	7821      	ldrb	r1, [r4, #0]
   d9b66:	f3bf 8f5b 	dmb	ish
   d9b6a:	f011 0101 	ands.w	r1, r1, #1
   d9b6e:	d10f      	bne.n	d9b90 <_Z16_fetch_usbserialv+0x38>
   d9b70:	4620      	mov	r0, r4
   d9b72:	9101      	str	r1, [sp, #4]
   d9b74:	f7fa faa0 	bl	d40b8 <__cxa_guard_acquire>
   d9b78:	9901      	ldr	r1, [sp, #4]
   d9b7a:	b148      	cbz	r0, d9b90 <_Z16_fetch_usbserialv+0x38>
   d9b7c:	aa03      	add	r2, sp, #12
   d9b7e:	4807      	ldr	r0, [pc, #28]	; (d9b9c <_Z16_fetch_usbserialv+0x44>)
   d9b80:	f7ff ffca 	bl	d9b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9b84:	4620      	mov	r0, r4
   d9b86:	f7fa fa9c 	bl	d40c2 <__cxa_guard_release>
   d9b8a:	4805      	ldr	r0, [pc, #20]	; (d9ba0 <_Z16_fetch_usbserialv+0x48>)
   d9b8c:	f001 f882 	bl	dac94 <atexit>
	return _usbserial;
}
   d9b90:	4802      	ldr	r0, [pc, #8]	; (d9b9c <_Z16_fetch_usbserialv+0x44>)
   d9b92:	b008      	add	sp, #32
   d9b94:	bd10      	pop	{r4, pc}
   d9b96:	bf00      	nop
   d9b98:	2003e718 	.word	0x2003e718
   d9b9c:	2003e71c 	.word	0x2003e71c
   d9ba0:	000d9aa1 	.word	0x000d9aa1

000d9ba4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d9ba4:	b510      	push	{r4, lr}
   d9ba6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9ba8:	f001 f8f9 	bl	dad9e <strlen>
   d9bac:	3801      	subs	r0, #1
   d9bae:	1823      	adds	r3, r4, r0
   d9bb0:	4620      	mov	r0, r4
	while(i<j){
   d9bb2:	4283      	cmp	r3, r0
   d9bb4:	d906      	bls.n	d9bc4 <_Z11str_reversePc+0x20>
		c = *i;
   d9bb6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9bb8:	7819      	ldrb	r1, [r3, #0]
   d9bba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9bbe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d9bc2:	e7f6      	b.n	d9bb2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d9bc4:	bd10      	pop	{r4, pc}

000d9bc6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9bc6:	b570      	push	{r4, r5, r6, lr}
   d9bc8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9bca:	1e91      	subs	r1, r2, #2
   d9bcc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9bce:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9bd0:	d822      	bhi.n	d9c18 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d9bd2:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d9bd4:	b16d      	cbz	r5, d9bf2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9bd6:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d9bda:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d9bde:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9be0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d9be2:	bf94      	ite	ls
   d9be4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9be6:	3157      	addhi	r1, #87	; 0x57
   d9be8:	b2c9      	uxtb	r1, r1
   d9bea:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d9bee:	4635      	mov	r5, r6
	while(a){
   d9bf0:	e7f0      	b.n	d9bd4 <ultoa+0xe>
   d9bf2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d9bf4:	4423      	add	r3, r4
            *ptr++ = '0';
   d9bf6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d9bf8:	4293      	cmp	r3, r2
   d9bfa:	d902      	bls.n	d9c02 <ultoa+0x3c>
            *ptr++ = '0';
   d9bfc:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d9c00:	e7fa      	b.n	d9bf8 <ultoa+0x32>
   d9c02:	1a1a      	subs	r2, r3, r0
   d9c04:	4283      	cmp	r3, r0
   d9c06:	bf38      	it	cc
   d9c08:	2200      	movcc	r2, #0

	*ptr = '\0';
   d9c0a:	2300      	movs	r3, #0
   d9c0c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d9c0e:	4620      	mov	r0, r4
   d9c10:	f7ff ffc8 	bl	d9ba4 <_Z11str_reversePc>
	return buffer;
   d9c14:	4620      	mov	r0, r4
}
   d9c16:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d9c18:	2000      	movs	r0, #0
   d9c1a:	e7fc      	b.n	d9c16 <ultoa+0x50>

000d9c1c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9c1c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d9c1e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d9c20:	460c      	mov	r4, r1
   d9c22:	4615      	mov	r5, r2
	if(a<0){
   d9c24:	da0e      	bge.n	d9c44 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d9c2a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d9c2e:	bf14      	ite	ne
   d9c30:	4258      	negne	r0, r3
   d9c32:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d9c34:	2301      	movs	r3, #1
		*buffer = '-';
   d9c36:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d9c38:	462a      	mov	r2, r5
   d9c3a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d9c3c:	f7ff ffc3 	bl	d9bc6 <ultoa>
	}
	return buffer;
}
   d9c40:	4620      	mov	r0, r4
   d9c42:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d9c44:	2301      	movs	r3, #1
   d9c46:	e7f9      	b.n	d9c3c <itoa+0x20>

000d9c48 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d9c48:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d9c4a:	2301      	movs	r3, #1
   d9c4c:	f7ff ffbb 	bl	d9bc6 <ultoa>
}
   d9c50:	bd08      	pop	{r3, pc}
	...

000d9c54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9c54:	4b01      	ldr	r3, [pc, #4]	; (d9c5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9c56:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9c58:	4770      	bx	lr
   d9c5a:	bf00      	nop
   d9c5c:	2003dce8 	.word	0x2003dce8

000d9c60 <serialEventRun>:
{
   d9c60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9c62:	4b0b      	ldr	r3, [pc, #44]	; (d9c90 <serialEventRun+0x30>)
   d9c64:	b143      	cbz	r3, d9c78 <serialEventRun+0x18>
   d9c66:	f7ff ff77 	bl	d9b58 <_Z16_fetch_usbserialv>
   d9c6a:	6803      	ldr	r3, [r0, #0]
   d9c6c:	691b      	ldr	r3, [r3, #16]
   d9c6e:	4798      	blx	r3
   d9c70:	2800      	cmp	r0, #0
   d9c72:	dd01      	ble.n	d9c78 <serialEventRun+0x18>
        serialEvent();
   d9c74:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9c78:	4b06      	ldr	r3, [pc, #24]	; (d9c94 <serialEventRun+0x34>)
   d9c7a:	b143      	cbz	r3, d9c8e <serialEventRun+0x2e>
   d9c7c:	f7ff fee8 	bl	d9a50 <_Z22__fetch_global_Serial1v>
   d9c80:	6803      	ldr	r3, [r0, #0]
   d9c82:	691b      	ldr	r3, [r3, #16]
   d9c84:	4798      	blx	r3
   d9c86:	2800      	cmp	r0, #0
   d9c88:	dd01      	ble.n	d9c8e <serialEventRun+0x2e>
        serialEvent1();
   d9c8a:	f3af 8000 	nop.w
}
   d9c8e:	bd08      	pop	{r3, pc}
	...

000d9c98 <_post_loop>:
{
   d9c98:	b508      	push	{r3, lr}
	serialEventRun();
   d9c9a:	f7ff ffe1 	bl	d9c60 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9c9e:	f7fd ff85 	bl	d7bac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9ca2:	4b01      	ldr	r3, [pc, #4]	; (d9ca8 <_post_loop+0x10>)
   d9ca4:	6018      	str	r0, [r3, #0]
}
   d9ca6:	bd08      	pop	{r3, pc}
   d9ca8:	2003e738 	.word	0x2003e738

000d9cac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9cac:	4805      	ldr	r0, [pc, #20]	; (d9cc4 <_Z33system_initialize_user_backup_ramv+0x18>)
   d9cae:	4a06      	ldr	r2, [pc, #24]	; (d9cc8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d9cb0:	4906      	ldr	r1, [pc, #24]	; (d9ccc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d9cb2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9cb4:	1a12      	subs	r2, r2, r0
   d9cb6:	f001 f808 	bl	dacca <memcpy>
    __backup_sram_signature = signature;
   d9cba:	4b05      	ldr	r3, [pc, #20]	; (d9cd0 <_Z33system_initialize_user_backup_ramv+0x24>)
   d9cbc:	4a05      	ldr	r2, [pc, #20]	; (d9cd4 <_Z33system_initialize_user_backup_ramv+0x28>)
   d9cbe:	601a      	str	r2, [r3, #0]
}
   d9cc0:	bd08      	pop	{r3, pc}
   d9cc2:	bf00      	nop
   d9cc4:	2003f400 	.word	0x2003f400
   d9cc8:	2003f404 	.word	0x2003f404
   d9ccc:	000ddfc8 	.word	0x000ddfc8
   d9cd0:	2003f400 	.word	0x2003f400
   d9cd4:	9a271c1e 	.word	0x9a271c1e

000d9cd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9cd8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9cda:	2300      	movs	r3, #0
   d9cdc:	9300      	str	r3, [sp, #0]
   d9cde:	461a      	mov	r2, r3
   d9ce0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9ce4:	f7fe f924 	bl	d7f30 <system_ctrl_set_result>
}
   d9ce8:	b003      	add	sp, #12
   d9cea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9cf0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d9cf0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9cf2:	8843      	ldrh	r3, [r0, #2]
   d9cf4:	2b0a      	cmp	r3, #10
   d9cf6:	d008      	beq.n	d9d0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9cf8:	2b50      	cmp	r3, #80	; 0x50
   d9cfa:	d10b      	bne.n	d9d14 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9cfc:	4b09      	ldr	r3, [pc, #36]	; (d9d24 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9cfe:	681b      	ldr	r3, [r3, #0]
   d9d00:	b14b      	cbz	r3, d9d16 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d9d02:	b003      	add	sp, #12
   d9d04:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9d08:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9d0a:	f7ff ffe5 	bl	d9cd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9d0e:	b003      	add	sp, #12
   d9d10:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9d14:	2300      	movs	r3, #0
   d9d16:	9300      	str	r3, [sp, #0]
   d9d18:	461a      	mov	r2, r3
   d9d1a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9d1e:	f7fe f907 	bl	d7f30 <system_ctrl_set_result>
}
   d9d22:	e7f4      	b.n	d9d0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9d24:	2003e734 	.word	0x2003e734

000d9d28 <module_user_init_hook>:
{
   d9d28:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9d2a:	4812      	ldr	r0, [pc, #72]	; (d9d74 <module_user_init_hook+0x4c>)
   d9d2c:	2100      	movs	r1, #0
   d9d2e:	f7fe f9d9 	bl	d80e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d9d32:	4b11      	ldr	r3, [pc, #68]	; (d9d78 <module_user_init_hook+0x50>)
   d9d34:	681a      	ldr	r2, [r3, #0]
   d9d36:	4b11      	ldr	r3, [pc, #68]	; (d9d7c <module_user_init_hook+0x54>)
   d9d38:	429a      	cmp	r2, r3
   d9d3a:	4b11      	ldr	r3, [pc, #68]	; (d9d80 <module_user_init_hook+0x58>)
   d9d3c:	bf0c      	ite	eq
   d9d3e:	2201      	moveq	r2, #1
   d9d40:	2200      	movne	r2, #0
   d9d42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9d44:	d001      	beq.n	d9d4a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d9d46:	f7ff ffb1 	bl	d9cac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9d4a:	f7fd ff17 	bl	d7b7c <HAL_RNG_GetRandomNumber>
   d9d4e:	4604      	mov	r4, r0
    srand(seed);
   d9d50:	f000 ffd2 	bl	dacf8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9d54:	4b0b      	ldr	r3, [pc, #44]	; (d9d84 <module_user_init_hook+0x5c>)
   d9d56:	b113      	cbz	r3, d9d5e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d9d58:	4620      	mov	r0, r4
   d9d5a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9d5e:	2100      	movs	r1, #0
   d9d60:	4808      	ldr	r0, [pc, #32]	; (d9d84 <module_user_init_hook+0x5c>)
   d9d62:	f7fe f917 	bl	d7f94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9d6a:	4807      	ldr	r0, [pc, #28]	; (d9d88 <module_user_init_hook+0x60>)
   d9d6c:	2100      	movs	r1, #0
   d9d6e:	f7fe b8d5 	b.w	d7f1c <system_ctrl_set_app_request_handler>
   d9d72:	bf00      	nop
   d9d74:	000d9c55 	.word	0x000d9c55
   d9d78:	2003f400 	.word	0x2003f400
   d9d7c:	9a271c1e 	.word	0x9a271c1e
   d9d80:	2003e730 	.word	0x2003e730
   d9d84:	00000000 	.word	0x00000000
   d9d88:	000d9cf1 	.word	0x000d9cf1

000d9d8c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9d8c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9d8e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9d90:	d902      	bls.n	d9d98 <pinAvailable+0xc>
    return false;
   d9d92:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9d94:	b002      	add	sp, #8
   d9d96:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9d98:	f1a0 030b 	sub.w	r3, r0, #11
   d9d9c:	2b02      	cmp	r3, #2
   d9d9e:	d81a      	bhi.n	d9dd6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9da0:	4c17      	ldr	r4, [pc, #92]	; (d9e00 <pinAvailable+0x74>)
   d9da2:	7821      	ldrb	r1, [r4, #0]
   d9da4:	f3bf 8f5b 	dmb	ish
   d9da8:	f011 0101 	ands.w	r1, r1, #1
   d9dac:	d10b      	bne.n	d9dc6 <pinAvailable+0x3a>
   d9dae:	4620      	mov	r0, r4
   d9db0:	9101      	str	r1, [sp, #4]
   d9db2:	f7fa f981 	bl	d40b8 <__cxa_guard_acquire>
   d9db6:	9901      	ldr	r1, [sp, #4]
   d9db8:	b128      	cbz	r0, d9dc6 <pinAvailable+0x3a>
   d9dba:	4812      	ldr	r0, [pc, #72]	; (d9e04 <pinAvailable+0x78>)
   d9dbc:	f7ff f8f4 	bl	d8fa8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d9dc0:	4620      	mov	r0, r4
   d9dc2:	f7fa f97e 	bl	d40c2 <__cxa_guard_release>
   d9dc6:	4b0f      	ldr	r3, [pc, #60]	; (d9e04 <pinAvailable+0x78>)
   d9dc8:	7818      	ldrb	r0, [r3, #0]
   d9dca:	f7fd ffb7 	bl	d7d3c <hal_spi_is_enabled>
   d9dce:	2800      	cmp	r0, #0
   d9dd0:	d1df      	bne.n	d9d92 <pinAvailable+0x6>
  return true; // 'pin' is available
   d9dd2:	2001      	movs	r0, #1
   d9dd4:	e7de      	b.n	d9d94 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9dd6:	2801      	cmp	r0, #1
   d9dd8:	d809      	bhi.n	d9dee <pinAvailable+0x62>
   d9dda:	f000 f86b 	bl	d9eb4 <_Z19__fetch_global_Wirev>
   d9dde:	2100      	movs	r1, #0
   d9de0:	7c00      	ldrb	r0, [r0, #16]
   d9de2:	f7fd ff63 	bl	d7cac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9de6:	f080 0001 	eor.w	r0, r0, #1
   d9dea:	b2c0      	uxtb	r0, r0
   d9dec:	e7d2      	b.n	d9d94 <pinAvailable+0x8>
   d9dee:	3809      	subs	r0, #9
   d9df0:	2801      	cmp	r0, #1
   d9df2:	d8ee      	bhi.n	d9dd2 <pinAvailable+0x46>
   d9df4:	f7ff fe2c 	bl	d9a50 <_Z22__fetch_global_Serial1v>
   d9df8:	7c00      	ldrb	r0, [r0, #16]
   d9dfa:	f7fe f807 	bl	d7e0c <hal_usart_is_enabled>
   d9dfe:	e7f2      	b.n	d9de6 <pinAvailable+0x5a>
   d9e00:	2003dec0 	.word	0x2003dec0
   d9e04:	2003dec4 	.word	0x2003dec4

000d9e08 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9e08:	2823      	cmp	r0, #35	; 0x23
{
   d9e0a:	b538      	push	{r3, r4, r5, lr}
   d9e0c:	4604      	mov	r4, r0
   d9e0e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9e10:	d80a      	bhi.n	d9e28 <pinMode+0x20>
   d9e12:	29ff      	cmp	r1, #255	; 0xff
   d9e14:	d008      	beq.n	d9e28 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9e16:	f7ff ffb9 	bl	d9d8c <pinAvailable>
   d9e1a:	b128      	cbz	r0, d9e28 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9e1c:	4629      	mov	r1, r5
   d9e1e:	4620      	mov	r0, r4
}
   d9e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9e24:	f7fd beda 	b.w	d7bdc <HAL_Pin_Mode>
}
   d9e28:	bd38      	pop	{r3, r4, r5, pc}

000d9e2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9e2a:	b538      	push	{r3, r4, r5, lr}
   d9e2c:	4604      	mov	r4, r0
   d9e2e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9e30:	f7fd fedc 	bl	d7bec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9e34:	28ff      	cmp	r0, #255	; 0xff
   d9e36:	d010      	beq.n	d9e5a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9e38:	2806      	cmp	r0, #6
   d9e3a:	d804      	bhi.n	d9e46 <digitalWrite+0x1c>
   d9e3c:	234d      	movs	r3, #77	; 0x4d
   d9e3e:	fa23 f000 	lsr.w	r0, r3, r0
   d9e42:	07c3      	lsls	r3, r0, #31
   d9e44:	d409      	bmi.n	d9e5a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d9e46:	4620      	mov	r0, r4
   d9e48:	f7ff ffa0 	bl	d9d8c <pinAvailable>
   d9e4c:	b128      	cbz	r0, d9e5a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9e4e:	4629      	mov	r1, r5
   d9e50:	4620      	mov	r0, r4
}
   d9e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d9e56:	f7fd bed1 	b.w	d7bfc <HAL_GPIO_Write>
}
   d9e5a:	bd38      	pop	{r3, r4, r5, pc}

000d9e5c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9e5c:	b510      	push	{r4, lr}
   d9e5e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9e60:	f7fd fec4 	bl	d7bec <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d9e64:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d9e66:	b2db      	uxtb	r3, r3
   d9e68:	2b01      	cmp	r3, #1
   d9e6a:	d908      	bls.n	d9e7e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9e6c:	4620      	mov	r0, r4
   d9e6e:	f7ff ff8d 	bl	d9d8c <pinAvailable>
   d9e72:	b120      	cbz	r0, d9e7e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9e74:	4620      	mov	r0, r4
}
   d9e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d9e7a:	f7fd bec7 	b.w	d7c0c <HAL_GPIO_Read>
}
   d9e7e:	2000      	movs	r0, #0
   d9e80:	bd10      	pop	{r4, pc}

000d9e82 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9e82:	4770      	bx	lr

000d9e84 <_Z17acquireWireBufferv>:
{
   d9e84:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9e86:	2300      	movs	r3, #0
   d9e88:	2520      	movs	r5, #32
   d9e8a:	8043      	strh	r3, [r0, #2]
   d9e8c:	2314      	movs	r3, #20
{
   d9e8e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9e90:	8003      	strh	r3, [r0, #0]
   d9e92:	6085      	str	r5, [r0, #8]
   d9e94:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9e96:	4906      	ldr	r1, [pc, #24]	; (d9eb0 <_Z17acquireWireBufferv+0x2c>)
   d9e98:	4628      	mov	r0, r5
   d9e9a:	f000 f831 	bl	d9f00 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9e9e:	4904      	ldr	r1, [pc, #16]	; (d9eb0 <_Z17acquireWireBufferv+0x2c>)
	};
   d9ea0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9ea2:	4628      	mov	r0, r5
   d9ea4:	f000 f82c 	bl	d9f00 <_ZnajRKSt9nothrow_t>
	};
   d9ea8:	60e0      	str	r0, [r4, #12]
}
   d9eaa:	4620      	mov	r0, r4
   d9eac:	bd38      	pop	{r3, r4, r5, pc}
   d9eae:	bf00      	nop
   d9eb0:	000ddcd4 	.word	0x000ddcd4

000d9eb4 <_Z19__fetch_global_Wirev>:
{
   d9eb4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9eb6:	4d0e      	ldr	r5, [pc, #56]	; (d9ef0 <_Z19__fetch_global_Wirev+0x3c>)
   d9eb8:	7829      	ldrb	r1, [r5, #0]
   d9eba:	f3bf 8f5b 	dmb	ish
   d9ebe:	f011 0401 	ands.w	r4, r1, #1
{
   d9ec2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9ec4:	d111      	bne.n	d9eea <_Z19__fetch_global_Wirev+0x36>
   d9ec6:	4628      	mov	r0, r5
   d9ec8:	f7fa f8f6 	bl	d40b8 <__cxa_guard_acquire>
   d9ecc:	b168      	cbz	r0, d9eea <_Z19__fetch_global_Wirev+0x36>
   d9ece:	a801      	add	r0, sp, #4
   d9ed0:	f7ff ffd8 	bl	d9e84 <_Z17acquireWireBufferv>
   d9ed4:	aa01      	add	r2, sp, #4
   d9ed6:	4621      	mov	r1, r4
   d9ed8:	4806      	ldr	r0, [pc, #24]	; (d9ef4 <_Z19__fetch_global_Wirev+0x40>)
   d9eda:	f7fe fd91 	bl	d8a00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9ede:	4628      	mov	r0, r5
   d9ee0:	f7fa f8ef 	bl	d40c2 <__cxa_guard_release>
   d9ee4:	4804      	ldr	r0, [pc, #16]	; (d9ef8 <_Z19__fetch_global_Wirev+0x44>)
   d9ee6:	f000 fed5 	bl	dac94 <atexit>
	return wire;
}
   d9eea:	4802      	ldr	r0, [pc, #8]	; (d9ef4 <_Z19__fetch_global_Wirev+0x40>)
   d9eec:	b007      	add	sp, #28
   d9eee:	bd30      	pop	{r4, r5, pc}
   d9ef0:	2003e73c 	.word	0x2003e73c
   d9ef4:	2003e740 	.word	0x2003e740
   d9ef8:	000d9e83 	.word	0x000d9e83

000d9efc <_ZdlPvj>:
   d9efc:	f7fa b8cf 	b.w	d409e <_ZdlPv>

000d9f00 <_ZnajRKSt9nothrow_t>:
   d9f00:	f7fa b8cb 	b.w	d409a <_Znaj>

000d9f04 <_ZSt25__throw_bad_function_callv>:
   d9f04:	b508      	push	{r3, lr}
   d9f06:	f7fe f8dd 	bl	d80c4 <abort>
	...

000d9f0c <__aeabi_drsub>:
   d9f0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9f10:	e002      	b.n	d9f18 <__adddf3>
   d9f12:	bf00      	nop

000d9f14 <__aeabi_dsub>:
   d9f14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9f18 <__adddf3>:
   d9f18:	b530      	push	{r4, r5, lr}
   d9f1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9f1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9f22:	ea94 0f05 	teq	r4, r5
   d9f26:	bf08      	it	eq
   d9f28:	ea90 0f02 	teqeq	r0, r2
   d9f2c:	bf1f      	itttt	ne
   d9f2e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9f32:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9f36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9f3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9f3e:	f000 80e2 	beq.w	da106 <__adddf3+0x1ee>
   d9f42:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9f46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9f4a:	bfb8      	it	lt
   d9f4c:	426d      	neglt	r5, r5
   d9f4e:	dd0c      	ble.n	d9f6a <__adddf3+0x52>
   d9f50:	442c      	add	r4, r5
   d9f52:	ea80 0202 	eor.w	r2, r0, r2
   d9f56:	ea81 0303 	eor.w	r3, r1, r3
   d9f5a:	ea82 0000 	eor.w	r0, r2, r0
   d9f5e:	ea83 0101 	eor.w	r1, r3, r1
   d9f62:	ea80 0202 	eor.w	r2, r0, r2
   d9f66:	ea81 0303 	eor.w	r3, r1, r3
   d9f6a:	2d36      	cmp	r5, #54	; 0x36
   d9f6c:	bf88      	it	hi
   d9f6e:	bd30      	pophi	{r4, r5, pc}
   d9f70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9f74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9f78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9f7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9f80:	d002      	beq.n	d9f88 <__adddf3+0x70>
   d9f82:	4240      	negs	r0, r0
   d9f84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9f88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9f8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9f90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9f94:	d002      	beq.n	d9f9c <__adddf3+0x84>
   d9f96:	4252      	negs	r2, r2
   d9f98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9f9c:	ea94 0f05 	teq	r4, r5
   d9fa0:	f000 80a7 	beq.w	da0f2 <__adddf3+0x1da>
   d9fa4:	f1a4 0401 	sub.w	r4, r4, #1
   d9fa8:	f1d5 0e20 	rsbs	lr, r5, #32
   d9fac:	db0d      	blt.n	d9fca <__adddf3+0xb2>
   d9fae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9fb2:	fa22 f205 	lsr.w	r2, r2, r5
   d9fb6:	1880      	adds	r0, r0, r2
   d9fb8:	f141 0100 	adc.w	r1, r1, #0
   d9fbc:	fa03 f20e 	lsl.w	r2, r3, lr
   d9fc0:	1880      	adds	r0, r0, r2
   d9fc2:	fa43 f305 	asr.w	r3, r3, r5
   d9fc6:	4159      	adcs	r1, r3
   d9fc8:	e00e      	b.n	d9fe8 <__adddf3+0xd0>
   d9fca:	f1a5 0520 	sub.w	r5, r5, #32
   d9fce:	f10e 0e20 	add.w	lr, lr, #32
   d9fd2:	2a01      	cmp	r2, #1
   d9fd4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9fd8:	bf28      	it	cs
   d9fda:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9fde:	fa43 f305 	asr.w	r3, r3, r5
   d9fe2:	18c0      	adds	r0, r0, r3
   d9fe4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9fec:	d507      	bpl.n	d9ffe <__adddf3+0xe6>
   d9fee:	f04f 0e00 	mov.w	lr, #0
   d9ff2:	f1dc 0c00 	rsbs	ip, ip, #0
   d9ff6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9ffa:	eb6e 0101 	sbc.w	r1, lr, r1
   d9ffe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da002:	d31b      	bcc.n	da03c <__adddf3+0x124>
   da004:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da008:	d30c      	bcc.n	da024 <__adddf3+0x10c>
   da00a:	0849      	lsrs	r1, r1, #1
   da00c:	ea5f 0030 	movs.w	r0, r0, rrx
   da010:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da014:	f104 0401 	add.w	r4, r4, #1
   da018:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da01c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da020:	f080 809a 	bcs.w	da158 <__adddf3+0x240>
   da024:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da028:	bf08      	it	eq
   da02a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da02e:	f150 0000 	adcs.w	r0, r0, #0
   da032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da036:	ea41 0105 	orr.w	r1, r1, r5
   da03a:	bd30      	pop	{r4, r5, pc}
   da03c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   da040:	4140      	adcs	r0, r0
   da042:	eb41 0101 	adc.w	r1, r1, r1
   da046:	3c01      	subs	r4, #1
   da048:	bf28      	it	cs
   da04a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   da04e:	d2e9      	bcs.n	da024 <__adddf3+0x10c>
   da050:	f091 0f00 	teq	r1, #0
   da054:	bf04      	itt	eq
   da056:	4601      	moveq	r1, r0
   da058:	2000      	moveq	r0, #0
   da05a:	fab1 f381 	clz	r3, r1
   da05e:	bf08      	it	eq
   da060:	3320      	addeq	r3, #32
   da062:	f1a3 030b 	sub.w	r3, r3, #11
   da066:	f1b3 0220 	subs.w	r2, r3, #32
   da06a:	da0c      	bge.n	da086 <__adddf3+0x16e>
   da06c:	320c      	adds	r2, #12
   da06e:	dd08      	ble.n	da082 <__adddf3+0x16a>
   da070:	f102 0c14 	add.w	ip, r2, #20
   da074:	f1c2 020c 	rsb	r2, r2, #12
   da078:	fa01 f00c 	lsl.w	r0, r1, ip
   da07c:	fa21 f102 	lsr.w	r1, r1, r2
   da080:	e00c      	b.n	da09c <__adddf3+0x184>
   da082:	f102 0214 	add.w	r2, r2, #20
   da086:	bfd8      	it	le
   da088:	f1c2 0c20 	rsble	ip, r2, #32
   da08c:	fa01 f102 	lsl.w	r1, r1, r2
   da090:	fa20 fc0c 	lsr.w	ip, r0, ip
   da094:	bfdc      	itt	le
   da096:	ea41 010c 	orrle.w	r1, r1, ip
   da09a:	4090      	lslle	r0, r2
   da09c:	1ae4      	subs	r4, r4, r3
   da09e:	bfa2      	ittt	ge
   da0a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   da0a4:	4329      	orrge	r1, r5
   da0a6:	bd30      	popge	{r4, r5, pc}
   da0a8:	ea6f 0404 	mvn.w	r4, r4
   da0ac:	3c1f      	subs	r4, #31
   da0ae:	da1c      	bge.n	da0ea <__adddf3+0x1d2>
   da0b0:	340c      	adds	r4, #12
   da0b2:	dc0e      	bgt.n	da0d2 <__adddf3+0x1ba>
   da0b4:	f104 0414 	add.w	r4, r4, #20
   da0b8:	f1c4 0220 	rsb	r2, r4, #32
   da0bc:	fa20 f004 	lsr.w	r0, r0, r4
   da0c0:	fa01 f302 	lsl.w	r3, r1, r2
   da0c4:	ea40 0003 	orr.w	r0, r0, r3
   da0c8:	fa21 f304 	lsr.w	r3, r1, r4
   da0cc:	ea45 0103 	orr.w	r1, r5, r3
   da0d0:	bd30      	pop	{r4, r5, pc}
   da0d2:	f1c4 040c 	rsb	r4, r4, #12
   da0d6:	f1c4 0220 	rsb	r2, r4, #32
   da0da:	fa20 f002 	lsr.w	r0, r0, r2
   da0de:	fa01 f304 	lsl.w	r3, r1, r4
   da0e2:	ea40 0003 	orr.w	r0, r0, r3
   da0e6:	4629      	mov	r1, r5
   da0e8:	bd30      	pop	{r4, r5, pc}
   da0ea:	fa21 f004 	lsr.w	r0, r1, r4
   da0ee:	4629      	mov	r1, r5
   da0f0:	bd30      	pop	{r4, r5, pc}
   da0f2:	f094 0f00 	teq	r4, #0
   da0f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   da0fa:	bf06      	itte	eq
   da0fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   da100:	3401      	addeq	r4, #1
   da102:	3d01      	subne	r5, #1
   da104:	e74e      	b.n	d9fa4 <__adddf3+0x8c>
   da106:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da10a:	bf18      	it	ne
   da10c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da110:	d029      	beq.n	da166 <__adddf3+0x24e>
   da112:	ea94 0f05 	teq	r4, r5
   da116:	bf08      	it	eq
   da118:	ea90 0f02 	teqeq	r0, r2
   da11c:	d005      	beq.n	da12a <__adddf3+0x212>
   da11e:	ea54 0c00 	orrs.w	ip, r4, r0
   da122:	bf04      	itt	eq
   da124:	4619      	moveq	r1, r3
   da126:	4610      	moveq	r0, r2
   da128:	bd30      	pop	{r4, r5, pc}
   da12a:	ea91 0f03 	teq	r1, r3
   da12e:	bf1e      	ittt	ne
   da130:	2100      	movne	r1, #0
   da132:	2000      	movne	r0, #0
   da134:	bd30      	popne	{r4, r5, pc}
   da136:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   da13a:	d105      	bne.n	da148 <__adddf3+0x230>
   da13c:	0040      	lsls	r0, r0, #1
   da13e:	4149      	adcs	r1, r1
   da140:	bf28      	it	cs
   da142:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   da146:	bd30      	pop	{r4, r5, pc}
   da148:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   da14c:	bf3c      	itt	cc
   da14e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   da152:	bd30      	popcc	{r4, r5, pc}
   da154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da158:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   da15c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da160:	f04f 0000 	mov.w	r0, #0
   da164:	bd30      	pop	{r4, r5, pc}
   da166:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   da16a:	bf1a      	itte	ne
   da16c:	4619      	movne	r1, r3
   da16e:	4610      	movne	r0, r2
   da170:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   da174:	bf1c      	itt	ne
   da176:	460b      	movne	r3, r1
   da178:	4602      	movne	r2, r0
   da17a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da17e:	bf06      	itte	eq
   da180:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   da184:	ea91 0f03 	teqeq	r1, r3
   da188:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   da18c:	bd30      	pop	{r4, r5, pc}
   da18e:	bf00      	nop

000da190 <__aeabi_ui2d>:
   da190:	f090 0f00 	teq	r0, #0
   da194:	bf04      	itt	eq
   da196:	2100      	moveq	r1, #0
   da198:	4770      	bxeq	lr
   da19a:	b530      	push	{r4, r5, lr}
   da19c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da1a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da1a4:	f04f 0500 	mov.w	r5, #0
   da1a8:	f04f 0100 	mov.w	r1, #0
   da1ac:	e750      	b.n	da050 <__adddf3+0x138>
   da1ae:	bf00      	nop

000da1b0 <__aeabi_i2d>:
   da1b0:	f090 0f00 	teq	r0, #0
   da1b4:	bf04      	itt	eq
   da1b6:	2100      	moveq	r1, #0
   da1b8:	4770      	bxeq	lr
   da1ba:	b530      	push	{r4, r5, lr}
   da1bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da1c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da1c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   da1c8:	bf48      	it	mi
   da1ca:	4240      	negmi	r0, r0
   da1cc:	f04f 0100 	mov.w	r1, #0
   da1d0:	e73e      	b.n	da050 <__adddf3+0x138>
   da1d2:	bf00      	nop

000da1d4 <__aeabi_f2d>:
   da1d4:	0042      	lsls	r2, r0, #1
   da1d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   da1da:	ea4f 0131 	mov.w	r1, r1, rrx
   da1de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   da1e2:	bf1f      	itttt	ne
   da1e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   da1e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   da1ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   da1f0:	4770      	bxne	lr
   da1f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   da1f6:	bf08      	it	eq
   da1f8:	4770      	bxeq	lr
   da1fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   da1fe:	bf04      	itt	eq
   da200:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   da204:	4770      	bxeq	lr
   da206:	b530      	push	{r4, r5, lr}
   da208:	f44f 7460 	mov.w	r4, #896	; 0x380
   da20c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da214:	e71c      	b.n	da050 <__adddf3+0x138>
   da216:	bf00      	nop

000da218 <__aeabi_ul2d>:
   da218:	ea50 0201 	orrs.w	r2, r0, r1
   da21c:	bf08      	it	eq
   da21e:	4770      	bxeq	lr
   da220:	b530      	push	{r4, r5, lr}
   da222:	f04f 0500 	mov.w	r5, #0
   da226:	e00a      	b.n	da23e <__aeabi_l2d+0x16>

000da228 <__aeabi_l2d>:
   da228:	ea50 0201 	orrs.w	r2, r0, r1
   da22c:	bf08      	it	eq
   da22e:	4770      	bxeq	lr
   da230:	b530      	push	{r4, r5, lr}
   da232:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   da236:	d502      	bpl.n	da23e <__aeabi_l2d+0x16>
   da238:	4240      	negs	r0, r0
   da23a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da23e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   da242:	f104 0432 	add.w	r4, r4, #50	; 0x32
   da246:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   da24a:	f43f aed8 	beq.w	d9ffe <__adddf3+0xe6>
   da24e:	f04f 0203 	mov.w	r2, #3
   da252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da256:	bf18      	it	ne
   da258:	3203      	addne	r2, #3
   da25a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   da25e:	bf18      	it	ne
   da260:	3203      	addne	r2, #3
   da262:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   da266:	f1c2 0320 	rsb	r3, r2, #32
   da26a:	fa00 fc03 	lsl.w	ip, r0, r3
   da26e:	fa20 f002 	lsr.w	r0, r0, r2
   da272:	fa01 fe03 	lsl.w	lr, r1, r3
   da276:	ea40 000e 	orr.w	r0, r0, lr
   da27a:	fa21 f102 	lsr.w	r1, r1, r2
   da27e:	4414      	add	r4, r2
   da280:	e6bd      	b.n	d9ffe <__adddf3+0xe6>
   da282:	bf00      	nop

000da284 <__aeabi_dmul>:
   da284:	b570      	push	{r4, r5, r6, lr}
   da286:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da28a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da28e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da292:	bf1d      	ittte	ne
   da294:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da298:	ea94 0f0c 	teqne	r4, ip
   da29c:	ea95 0f0c 	teqne	r5, ip
   da2a0:	f000 f8de 	bleq	da460 <__aeabi_dmul+0x1dc>
   da2a4:	442c      	add	r4, r5
   da2a6:	ea81 0603 	eor.w	r6, r1, r3
   da2aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   da2ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   da2b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   da2b6:	bf18      	it	ne
   da2b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   da2bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da2c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da2c4:	d038      	beq.n	da338 <__aeabi_dmul+0xb4>
   da2c6:	fba0 ce02 	umull	ip, lr, r0, r2
   da2ca:	f04f 0500 	mov.w	r5, #0
   da2ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   da2d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   da2d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   da2da:	f04f 0600 	mov.w	r6, #0
   da2de:	fbe1 5603 	umlal	r5, r6, r1, r3
   da2e2:	f09c 0f00 	teq	ip, #0
   da2e6:	bf18      	it	ne
   da2e8:	f04e 0e01 	orrne.w	lr, lr, #1
   da2ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da2f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da2f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da2f8:	d204      	bcs.n	da304 <__aeabi_dmul+0x80>
   da2fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da2fe:	416d      	adcs	r5, r5
   da300:	eb46 0606 	adc.w	r6, r6, r6
   da304:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da308:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da30c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da310:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da314:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da318:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da31c:	bf88      	it	hi
   da31e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da322:	d81e      	bhi.n	da362 <__aeabi_dmul+0xde>
   da324:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da328:	bf08      	it	eq
   da32a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da32e:	f150 0000 	adcs.w	r0, r0, #0
   da332:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da336:	bd70      	pop	{r4, r5, r6, pc}
   da338:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da33c:	ea46 0101 	orr.w	r1, r6, r1
   da340:	ea40 0002 	orr.w	r0, r0, r2
   da344:	ea81 0103 	eor.w	r1, r1, r3
   da348:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da34c:	bfc2      	ittt	gt
   da34e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da352:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da356:	bd70      	popgt	{r4, r5, r6, pc}
   da358:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da35c:	f04f 0e00 	mov.w	lr, #0
   da360:	3c01      	subs	r4, #1
   da362:	f300 80ab 	bgt.w	da4bc <__aeabi_dmul+0x238>
   da366:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da36a:	bfde      	ittt	le
   da36c:	2000      	movle	r0, #0
   da36e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da372:	bd70      	pople	{r4, r5, r6, pc}
   da374:	f1c4 0400 	rsb	r4, r4, #0
   da378:	3c20      	subs	r4, #32
   da37a:	da35      	bge.n	da3e8 <__aeabi_dmul+0x164>
   da37c:	340c      	adds	r4, #12
   da37e:	dc1b      	bgt.n	da3b8 <__aeabi_dmul+0x134>
   da380:	f104 0414 	add.w	r4, r4, #20
   da384:	f1c4 0520 	rsb	r5, r4, #32
   da388:	fa00 f305 	lsl.w	r3, r0, r5
   da38c:	fa20 f004 	lsr.w	r0, r0, r4
   da390:	fa01 f205 	lsl.w	r2, r1, r5
   da394:	ea40 0002 	orr.w	r0, r0, r2
   da398:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da39c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da3a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da3a4:	fa21 f604 	lsr.w	r6, r1, r4
   da3a8:	eb42 0106 	adc.w	r1, r2, r6
   da3ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da3b0:	bf08      	it	eq
   da3b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da3b6:	bd70      	pop	{r4, r5, r6, pc}
   da3b8:	f1c4 040c 	rsb	r4, r4, #12
   da3bc:	f1c4 0520 	rsb	r5, r4, #32
   da3c0:	fa00 f304 	lsl.w	r3, r0, r4
   da3c4:	fa20 f005 	lsr.w	r0, r0, r5
   da3c8:	fa01 f204 	lsl.w	r2, r1, r4
   da3cc:	ea40 0002 	orr.w	r0, r0, r2
   da3d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da3d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da3d8:	f141 0100 	adc.w	r1, r1, #0
   da3dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da3e0:	bf08      	it	eq
   da3e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da3e6:	bd70      	pop	{r4, r5, r6, pc}
   da3e8:	f1c4 0520 	rsb	r5, r4, #32
   da3ec:	fa00 f205 	lsl.w	r2, r0, r5
   da3f0:	ea4e 0e02 	orr.w	lr, lr, r2
   da3f4:	fa20 f304 	lsr.w	r3, r0, r4
   da3f8:	fa01 f205 	lsl.w	r2, r1, r5
   da3fc:	ea43 0302 	orr.w	r3, r3, r2
   da400:	fa21 f004 	lsr.w	r0, r1, r4
   da404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da408:	fa21 f204 	lsr.w	r2, r1, r4
   da40c:	ea20 0002 	bic.w	r0, r0, r2
   da410:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da418:	bf08      	it	eq
   da41a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da41e:	bd70      	pop	{r4, r5, r6, pc}
   da420:	f094 0f00 	teq	r4, #0
   da424:	d10f      	bne.n	da446 <__aeabi_dmul+0x1c2>
   da426:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da42a:	0040      	lsls	r0, r0, #1
   da42c:	eb41 0101 	adc.w	r1, r1, r1
   da430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da434:	bf08      	it	eq
   da436:	3c01      	subeq	r4, #1
   da438:	d0f7      	beq.n	da42a <__aeabi_dmul+0x1a6>
   da43a:	ea41 0106 	orr.w	r1, r1, r6
   da43e:	f095 0f00 	teq	r5, #0
   da442:	bf18      	it	ne
   da444:	4770      	bxne	lr
   da446:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da44a:	0052      	lsls	r2, r2, #1
   da44c:	eb43 0303 	adc.w	r3, r3, r3
   da450:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da454:	bf08      	it	eq
   da456:	3d01      	subeq	r5, #1
   da458:	d0f7      	beq.n	da44a <__aeabi_dmul+0x1c6>
   da45a:	ea43 0306 	orr.w	r3, r3, r6
   da45e:	4770      	bx	lr
   da460:	ea94 0f0c 	teq	r4, ip
   da464:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da468:	bf18      	it	ne
   da46a:	ea95 0f0c 	teqne	r5, ip
   da46e:	d00c      	beq.n	da48a <__aeabi_dmul+0x206>
   da470:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da474:	bf18      	it	ne
   da476:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da47a:	d1d1      	bne.n	da420 <__aeabi_dmul+0x19c>
   da47c:	ea81 0103 	eor.w	r1, r1, r3
   da480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da484:	f04f 0000 	mov.w	r0, #0
   da488:	bd70      	pop	{r4, r5, r6, pc}
   da48a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da48e:	bf06      	itte	eq
   da490:	4610      	moveq	r0, r2
   da492:	4619      	moveq	r1, r3
   da494:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da498:	d019      	beq.n	da4ce <__aeabi_dmul+0x24a>
   da49a:	ea94 0f0c 	teq	r4, ip
   da49e:	d102      	bne.n	da4a6 <__aeabi_dmul+0x222>
   da4a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da4a4:	d113      	bne.n	da4ce <__aeabi_dmul+0x24a>
   da4a6:	ea95 0f0c 	teq	r5, ip
   da4aa:	d105      	bne.n	da4b8 <__aeabi_dmul+0x234>
   da4ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da4b0:	bf1c      	itt	ne
   da4b2:	4610      	movne	r0, r2
   da4b4:	4619      	movne	r1, r3
   da4b6:	d10a      	bne.n	da4ce <__aeabi_dmul+0x24a>
   da4b8:	ea81 0103 	eor.w	r1, r1, r3
   da4bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da4c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da4c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da4c8:	f04f 0000 	mov.w	r0, #0
   da4cc:	bd70      	pop	{r4, r5, r6, pc}
   da4ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da4d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da4d6:	bd70      	pop	{r4, r5, r6, pc}

000da4d8 <__aeabi_ddiv>:
   da4d8:	b570      	push	{r4, r5, r6, lr}
   da4da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da4de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da4e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da4e6:	bf1d      	ittte	ne
   da4e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da4ec:	ea94 0f0c 	teqne	r4, ip
   da4f0:	ea95 0f0c 	teqne	r5, ip
   da4f4:	f000 f8a7 	bleq	da646 <__aeabi_ddiv+0x16e>
   da4f8:	eba4 0405 	sub.w	r4, r4, r5
   da4fc:	ea81 0e03 	eor.w	lr, r1, r3
   da500:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da504:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da508:	f000 8088 	beq.w	da61c <__aeabi_ddiv+0x144>
   da50c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da510:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da514:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da518:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da51c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da520:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da524:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da528:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da52c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da530:	429d      	cmp	r5, r3
   da532:	bf08      	it	eq
   da534:	4296      	cmpeq	r6, r2
   da536:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da53a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da53e:	d202      	bcs.n	da546 <__aeabi_ddiv+0x6e>
   da540:	085b      	lsrs	r3, r3, #1
   da542:	ea4f 0232 	mov.w	r2, r2, rrx
   da546:	1ab6      	subs	r6, r6, r2
   da548:	eb65 0503 	sbc.w	r5, r5, r3
   da54c:	085b      	lsrs	r3, r3, #1
   da54e:	ea4f 0232 	mov.w	r2, r2, rrx
   da552:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da556:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da55a:	ebb6 0e02 	subs.w	lr, r6, r2
   da55e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da562:	bf22      	ittt	cs
   da564:	1ab6      	subcs	r6, r6, r2
   da566:	4675      	movcs	r5, lr
   da568:	ea40 000c 	orrcs.w	r0, r0, ip
   da56c:	085b      	lsrs	r3, r3, #1
   da56e:	ea4f 0232 	mov.w	r2, r2, rrx
   da572:	ebb6 0e02 	subs.w	lr, r6, r2
   da576:	eb75 0e03 	sbcs.w	lr, r5, r3
   da57a:	bf22      	ittt	cs
   da57c:	1ab6      	subcs	r6, r6, r2
   da57e:	4675      	movcs	r5, lr
   da580:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da584:	085b      	lsrs	r3, r3, #1
   da586:	ea4f 0232 	mov.w	r2, r2, rrx
   da58a:	ebb6 0e02 	subs.w	lr, r6, r2
   da58e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da592:	bf22      	ittt	cs
   da594:	1ab6      	subcs	r6, r6, r2
   da596:	4675      	movcs	r5, lr
   da598:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da59c:	085b      	lsrs	r3, r3, #1
   da59e:	ea4f 0232 	mov.w	r2, r2, rrx
   da5a2:	ebb6 0e02 	subs.w	lr, r6, r2
   da5a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da5aa:	bf22      	ittt	cs
   da5ac:	1ab6      	subcs	r6, r6, r2
   da5ae:	4675      	movcs	r5, lr
   da5b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da5b4:	ea55 0e06 	orrs.w	lr, r5, r6
   da5b8:	d018      	beq.n	da5ec <__aeabi_ddiv+0x114>
   da5ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da5be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da5c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da5c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da5ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da5ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da5d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da5d6:	d1c0      	bne.n	da55a <__aeabi_ddiv+0x82>
   da5d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da5dc:	d10b      	bne.n	da5f6 <__aeabi_ddiv+0x11e>
   da5de:	ea41 0100 	orr.w	r1, r1, r0
   da5e2:	f04f 0000 	mov.w	r0, #0
   da5e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da5ea:	e7b6      	b.n	da55a <__aeabi_ddiv+0x82>
   da5ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da5f0:	bf04      	itt	eq
   da5f2:	4301      	orreq	r1, r0
   da5f4:	2000      	moveq	r0, #0
   da5f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da5fa:	bf88      	it	hi
   da5fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da600:	f63f aeaf 	bhi.w	da362 <__aeabi_dmul+0xde>
   da604:	ebb5 0c03 	subs.w	ip, r5, r3
   da608:	bf04      	itt	eq
   da60a:	ebb6 0c02 	subseq.w	ip, r6, r2
   da60e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da612:	f150 0000 	adcs.w	r0, r0, #0
   da616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da61a:	bd70      	pop	{r4, r5, r6, pc}
   da61c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da620:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da624:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da628:	bfc2      	ittt	gt
   da62a:	ebd4 050c 	rsbsgt	r5, r4, ip
   da62e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da632:	bd70      	popgt	{r4, r5, r6, pc}
   da634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da638:	f04f 0e00 	mov.w	lr, #0
   da63c:	3c01      	subs	r4, #1
   da63e:	e690      	b.n	da362 <__aeabi_dmul+0xde>
   da640:	ea45 0e06 	orr.w	lr, r5, r6
   da644:	e68d      	b.n	da362 <__aeabi_dmul+0xde>
   da646:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da64a:	ea94 0f0c 	teq	r4, ip
   da64e:	bf08      	it	eq
   da650:	ea95 0f0c 	teqeq	r5, ip
   da654:	f43f af3b 	beq.w	da4ce <__aeabi_dmul+0x24a>
   da658:	ea94 0f0c 	teq	r4, ip
   da65c:	d10a      	bne.n	da674 <__aeabi_ddiv+0x19c>
   da65e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da662:	f47f af34 	bne.w	da4ce <__aeabi_dmul+0x24a>
   da666:	ea95 0f0c 	teq	r5, ip
   da66a:	f47f af25 	bne.w	da4b8 <__aeabi_dmul+0x234>
   da66e:	4610      	mov	r0, r2
   da670:	4619      	mov	r1, r3
   da672:	e72c      	b.n	da4ce <__aeabi_dmul+0x24a>
   da674:	ea95 0f0c 	teq	r5, ip
   da678:	d106      	bne.n	da688 <__aeabi_ddiv+0x1b0>
   da67a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da67e:	f43f aefd 	beq.w	da47c <__aeabi_dmul+0x1f8>
   da682:	4610      	mov	r0, r2
   da684:	4619      	mov	r1, r3
   da686:	e722      	b.n	da4ce <__aeabi_dmul+0x24a>
   da688:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da68c:	bf18      	it	ne
   da68e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da692:	f47f aec5 	bne.w	da420 <__aeabi_dmul+0x19c>
   da696:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da69a:	f47f af0d 	bne.w	da4b8 <__aeabi_dmul+0x234>
   da69e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da6a2:	f47f aeeb 	bne.w	da47c <__aeabi_dmul+0x1f8>
   da6a6:	e712      	b.n	da4ce <__aeabi_dmul+0x24a>

000da6a8 <__gedf2>:
   da6a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da6ac:	e006      	b.n	da6bc <__cmpdf2+0x4>
   da6ae:	bf00      	nop

000da6b0 <__ledf2>:
   da6b0:	f04f 0c01 	mov.w	ip, #1
   da6b4:	e002      	b.n	da6bc <__cmpdf2+0x4>
   da6b6:	bf00      	nop

000da6b8 <__cmpdf2>:
   da6b8:	f04f 0c01 	mov.w	ip, #1
   da6bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   da6c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da6c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da6c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da6cc:	bf18      	it	ne
   da6ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da6d2:	d01b      	beq.n	da70c <__cmpdf2+0x54>
   da6d4:	b001      	add	sp, #4
   da6d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da6da:	bf0c      	ite	eq
   da6dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da6e0:	ea91 0f03 	teqne	r1, r3
   da6e4:	bf02      	ittt	eq
   da6e6:	ea90 0f02 	teqeq	r0, r2
   da6ea:	2000      	moveq	r0, #0
   da6ec:	4770      	bxeq	lr
   da6ee:	f110 0f00 	cmn.w	r0, #0
   da6f2:	ea91 0f03 	teq	r1, r3
   da6f6:	bf58      	it	pl
   da6f8:	4299      	cmppl	r1, r3
   da6fa:	bf08      	it	eq
   da6fc:	4290      	cmpeq	r0, r2
   da6fe:	bf2c      	ite	cs
   da700:	17d8      	asrcs	r0, r3, #31
   da702:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da706:	f040 0001 	orr.w	r0, r0, #1
   da70a:	4770      	bx	lr
   da70c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da714:	d102      	bne.n	da71c <__cmpdf2+0x64>
   da716:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da71a:	d107      	bne.n	da72c <__cmpdf2+0x74>
   da71c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da724:	d1d6      	bne.n	da6d4 <__cmpdf2+0x1c>
   da726:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da72a:	d0d3      	beq.n	da6d4 <__cmpdf2+0x1c>
   da72c:	f85d 0b04 	ldr.w	r0, [sp], #4
   da730:	4770      	bx	lr
   da732:	bf00      	nop

000da734 <__aeabi_cdrcmple>:
   da734:	4684      	mov	ip, r0
   da736:	4610      	mov	r0, r2
   da738:	4662      	mov	r2, ip
   da73a:	468c      	mov	ip, r1
   da73c:	4619      	mov	r1, r3
   da73e:	4663      	mov	r3, ip
   da740:	e000      	b.n	da744 <__aeabi_cdcmpeq>
   da742:	bf00      	nop

000da744 <__aeabi_cdcmpeq>:
   da744:	b501      	push	{r0, lr}
   da746:	f7ff ffb7 	bl	da6b8 <__cmpdf2>
   da74a:	2800      	cmp	r0, #0
   da74c:	bf48      	it	mi
   da74e:	f110 0f00 	cmnmi.w	r0, #0
   da752:	bd01      	pop	{r0, pc}

000da754 <__aeabi_dcmpeq>:
   da754:	f84d ed08 	str.w	lr, [sp, #-8]!
   da758:	f7ff fff4 	bl	da744 <__aeabi_cdcmpeq>
   da75c:	bf0c      	ite	eq
   da75e:	2001      	moveq	r0, #1
   da760:	2000      	movne	r0, #0
   da762:	f85d fb08 	ldr.w	pc, [sp], #8
   da766:	bf00      	nop

000da768 <__aeabi_dcmplt>:
   da768:	f84d ed08 	str.w	lr, [sp, #-8]!
   da76c:	f7ff ffea 	bl	da744 <__aeabi_cdcmpeq>
   da770:	bf34      	ite	cc
   da772:	2001      	movcc	r0, #1
   da774:	2000      	movcs	r0, #0
   da776:	f85d fb08 	ldr.w	pc, [sp], #8
   da77a:	bf00      	nop

000da77c <__aeabi_dcmple>:
   da77c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da780:	f7ff ffe0 	bl	da744 <__aeabi_cdcmpeq>
   da784:	bf94      	ite	ls
   da786:	2001      	movls	r0, #1
   da788:	2000      	movhi	r0, #0
   da78a:	f85d fb08 	ldr.w	pc, [sp], #8
   da78e:	bf00      	nop

000da790 <__aeabi_dcmpge>:
   da790:	f84d ed08 	str.w	lr, [sp, #-8]!
   da794:	f7ff ffce 	bl	da734 <__aeabi_cdrcmple>
   da798:	bf94      	ite	ls
   da79a:	2001      	movls	r0, #1
   da79c:	2000      	movhi	r0, #0
   da79e:	f85d fb08 	ldr.w	pc, [sp], #8
   da7a2:	bf00      	nop

000da7a4 <__aeabi_dcmpgt>:
   da7a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da7a8:	f7ff ffc4 	bl	da734 <__aeabi_cdrcmple>
   da7ac:	bf34      	ite	cc
   da7ae:	2001      	movcc	r0, #1
   da7b0:	2000      	movcs	r0, #0
   da7b2:	f85d fb08 	ldr.w	pc, [sp], #8
   da7b6:	bf00      	nop

000da7b8 <__aeabi_dcmpun>:
   da7b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da7bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da7c0:	d102      	bne.n	da7c8 <__aeabi_dcmpun+0x10>
   da7c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da7c6:	d10a      	bne.n	da7de <__aeabi_dcmpun+0x26>
   da7c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da7cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da7d0:	d102      	bne.n	da7d8 <__aeabi_dcmpun+0x20>
   da7d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da7d6:	d102      	bne.n	da7de <__aeabi_dcmpun+0x26>
   da7d8:	f04f 0000 	mov.w	r0, #0
   da7dc:	4770      	bx	lr
   da7de:	f04f 0001 	mov.w	r0, #1
   da7e2:	4770      	bx	lr

000da7e4 <__aeabi_d2iz>:
   da7e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da7e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da7ec:	d215      	bcs.n	da81a <__aeabi_d2iz+0x36>
   da7ee:	d511      	bpl.n	da814 <__aeabi_d2iz+0x30>
   da7f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da7f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da7f8:	d912      	bls.n	da820 <__aeabi_d2iz+0x3c>
   da7fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da7fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da80a:	fa23 f002 	lsr.w	r0, r3, r2
   da80e:	bf18      	it	ne
   da810:	4240      	negne	r0, r0
   da812:	4770      	bx	lr
   da814:	f04f 0000 	mov.w	r0, #0
   da818:	4770      	bx	lr
   da81a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da81e:	d105      	bne.n	da82c <__aeabi_d2iz+0x48>
   da820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da824:	bf08      	it	eq
   da826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da82a:	4770      	bx	lr
   da82c:	f04f 0000 	mov.w	r0, #0
   da830:	4770      	bx	lr
   da832:	bf00      	nop

000da834 <__aeabi_d2uiz>:
   da834:	004a      	lsls	r2, r1, #1
   da836:	d211      	bcs.n	da85c <__aeabi_d2uiz+0x28>
   da838:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da83c:	d211      	bcs.n	da862 <__aeabi_d2uiz+0x2e>
   da83e:	d50d      	bpl.n	da85c <__aeabi_d2uiz+0x28>
   da840:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da844:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da848:	d40e      	bmi.n	da868 <__aeabi_d2uiz+0x34>
   da84a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da84e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da852:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da856:	fa23 f002 	lsr.w	r0, r3, r2
   da85a:	4770      	bx	lr
   da85c:	f04f 0000 	mov.w	r0, #0
   da860:	4770      	bx	lr
   da862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da866:	d102      	bne.n	da86e <__aeabi_d2uiz+0x3a>
   da868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da86c:	4770      	bx	lr
   da86e:	f04f 0000 	mov.w	r0, #0
   da872:	4770      	bx	lr

000da874 <__aeabi_d2f>:
   da874:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da878:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da87c:	bf24      	itt	cs
   da87e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da882:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da886:	d90d      	bls.n	da8a4 <__aeabi_d2f+0x30>
   da888:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da88c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da890:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da894:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da898:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da89c:	bf08      	it	eq
   da89e:	f020 0001 	biceq.w	r0, r0, #1
   da8a2:	4770      	bx	lr
   da8a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da8a8:	d121      	bne.n	da8ee <__aeabi_d2f+0x7a>
   da8aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da8ae:	bfbc      	itt	lt
   da8b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da8b4:	4770      	bxlt	lr
   da8b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da8ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da8be:	f1c2 0218 	rsb	r2, r2, #24
   da8c2:	f1c2 0c20 	rsb	ip, r2, #32
   da8c6:	fa10 f30c 	lsls.w	r3, r0, ip
   da8ca:	fa20 f002 	lsr.w	r0, r0, r2
   da8ce:	bf18      	it	ne
   da8d0:	f040 0001 	orrne.w	r0, r0, #1
   da8d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da8d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da8dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   da8e0:	ea40 000c 	orr.w	r0, r0, ip
   da8e4:	fa23 f302 	lsr.w	r3, r3, r2
   da8e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da8ec:	e7cc      	b.n	da888 <__aeabi_d2f+0x14>
   da8ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da8f2:	d107      	bne.n	da904 <__aeabi_d2f+0x90>
   da8f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da8f8:	bf1e      	ittt	ne
   da8fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da8fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da902:	4770      	bxne	lr
   da904:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da908:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da90c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da910:	4770      	bx	lr
   da912:	bf00      	nop

000da914 <__aeabi_uldivmod>:
   da914:	b953      	cbnz	r3, da92c <__aeabi_uldivmod+0x18>
   da916:	b94a      	cbnz	r2, da92c <__aeabi_uldivmod+0x18>
   da918:	2900      	cmp	r1, #0
   da91a:	bf08      	it	eq
   da91c:	2800      	cmpeq	r0, #0
   da91e:	bf1c      	itt	ne
   da920:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   da924:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   da928:	f000 b98c 	b.w	dac44 <__aeabi_idiv0>
   da92c:	f1ad 0c08 	sub.w	ip, sp, #8
   da930:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da934:	f000 f824 	bl	da980 <__udivmoddi4>
   da938:	f8dd e004 	ldr.w	lr, [sp, #4]
   da93c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da940:	b004      	add	sp, #16
   da942:	4770      	bx	lr

000da944 <__aeabi_d2ulz>:
   da944:	b5d0      	push	{r4, r6, r7, lr}
   da946:	4b0c      	ldr	r3, [pc, #48]	; (da978 <__aeabi_d2ulz+0x34>)
   da948:	2200      	movs	r2, #0
   da94a:	4606      	mov	r6, r0
   da94c:	460f      	mov	r7, r1
   da94e:	f7ff fc99 	bl	da284 <__aeabi_dmul>
   da952:	f7ff ff6f 	bl	da834 <__aeabi_d2uiz>
   da956:	4604      	mov	r4, r0
   da958:	f7ff fc1a 	bl	da190 <__aeabi_ui2d>
   da95c:	4b07      	ldr	r3, [pc, #28]	; (da97c <__aeabi_d2ulz+0x38>)
   da95e:	2200      	movs	r2, #0
   da960:	f7ff fc90 	bl	da284 <__aeabi_dmul>
   da964:	4602      	mov	r2, r0
   da966:	460b      	mov	r3, r1
   da968:	4630      	mov	r0, r6
   da96a:	4639      	mov	r1, r7
   da96c:	f7ff fad2 	bl	d9f14 <__aeabi_dsub>
   da970:	f7ff ff60 	bl	da834 <__aeabi_d2uiz>
   da974:	4621      	mov	r1, r4
   da976:	bdd0      	pop	{r4, r6, r7, pc}
   da978:	3df00000 	.word	0x3df00000
   da97c:	41f00000 	.word	0x41f00000

000da980 <__udivmoddi4>:
   da980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da984:	9d08      	ldr	r5, [sp, #32]
   da986:	4604      	mov	r4, r0
   da988:	468c      	mov	ip, r1
   da98a:	2b00      	cmp	r3, #0
   da98c:	f040 8083 	bne.w	daa96 <__udivmoddi4+0x116>
   da990:	428a      	cmp	r2, r1
   da992:	4617      	mov	r7, r2
   da994:	d947      	bls.n	daa26 <__udivmoddi4+0xa6>
   da996:	fab2 f282 	clz	r2, r2
   da99a:	b142      	cbz	r2, da9ae <__udivmoddi4+0x2e>
   da99c:	f1c2 0020 	rsb	r0, r2, #32
   da9a0:	fa24 f000 	lsr.w	r0, r4, r0
   da9a4:	4091      	lsls	r1, r2
   da9a6:	4097      	lsls	r7, r2
   da9a8:	ea40 0c01 	orr.w	ip, r0, r1
   da9ac:	4094      	lsls	r4, r2
   da9ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da9b2:	0c23      	lsrs	r3, r4, #16
   da9b4:	fbbc f6f8 	udiv	r6, ip, r8
   da9b8:	fa1f fe87 	uxth.w	lr, r7
   da9bc:	fb08 c116 	mls	r1, r8, r6, ip
   da9c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da9c4:	fb06 f10e 	mul.w	r1, r6, lr
   da9c8:	4299      	cmp	r1, r3
   da9ca:	d909      	bls.n	da9e0 <__udivmoddi4+0x60>
   da9cc:	18fb      	adds	r3, r7, r3
   da9ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   da9d2:	f080 8119 	bcs.w	dac08 <__udivmoddi4+0x288>
   da9d6:	4299      	cmp	r1, r3
   da9d8:	f240 8116 	bls.w	dac08 <__udivmoddi4+0x288>
   da9dc:	3e02      	subs	r6, #2
   da9de:	443b      	add	r3, r7
   da9e0:	1a5b      	subs	r3, r3, r1
   da9e2:	b2a4      	uxth	r4, r4
   da9e4:	fbb3 f0f8 	udiv	r0, r3, r8
   da9e8:	fb08 3310 	mls	r3, r8, r0, r3
   da9ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da9f0:	fb00 fe0e 	mul.w	lr, r0, lr
   da9f4:	45a6      	cmp	lr, r4
   da9f6:	d909      	bls.n	daa0c <__udivmoddi4+0x8c>
   da9f8:	193c      	adds	r4, r7, r4
   da9fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da9fe:	f080 8105 	bcs.w	dac0c <__udivmoddi4+0x28c>
   daa02:	45a6      	cmp	lr, r4
   daa04:	f240 8102 	bls.w	dac0c <__udivmoddi4+0x28c>
   daa08:	3802      	subs	r0, #2
   daa0a:	443c      	add	r4, r7
   daa0c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   daa10:	eba4 040e 	sub.w	r4, r4, lr
   daa14:	2600      	movs	r6, #0
   daa16:	b11d      	cbz	r5, daa20 <__udivmoddi4+0xa0>
   daa18:	40d4      	lsrs	r4, r2
   daa1a:	2300      	movs	r3, #0
   daa1c:	e9c5 4300 	strd	r4, r3, [r5]
   daa20:	4631      	mov	r1, r6
   daa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daa26:	b902      	cbnz	r2, daa2a <__udivmoddi4+0xaa>
   daa28:	deff      	udf	#255	; 0xff
   daa2a:	fab2 f282 	clz	r2, r2
   daa2e:	2a00      	cmp	r2, #0
   daa30:	d150      	bne.n	daad4 <__udivmoddi4+0x154>
   daa32:	1bcb      	subs	r3, r1, r7
   daa34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   daa38:	fa1f f887 	uxth.w	r8, r7
   daa3c:	2601      	movs	r6, #1
   daa3e:	fbb3 fcfe 	udiv	ip, r3, lr
   daa42:	0c21      	lsrs	r1, r4, #16
   daa44:	fb0e 331c 	mls	r3, lr, ip, r3
   daa48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   daa4c:	fb08 f30c 	mul.w	r3, r8, ip
   daa50:	428b      	cmp	r3, r1
   daa52:	d907      	bls.n	daa64 <__udivmoddi4+0xe4>
   daa54:	1879      	adds	r1, r7, r1
   daa56:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   daa5a:	d202      	bcs.n	daa62 <__udivmoddi4+0xe2>
   daa5c:	428b      	cmp	r3, r1
   daa5e:	f200 80e9 	bhi.w	dac34 <__udivmoddi4+0x2b4>
   daa62:	4684      	mov	ip, r0
   daa64:	1ac9      	subs	r1, r1, r3
   daa66:	b2a3      	uxth	r3, r4
   daa68:	fbb1 f0fe 	udiv	r0, r1, lr
   daa6c:	fb0e 1110 	mls	r1, lr, r0, r1
   daa70:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   daa74:	fb08 f800 	mul.w	r8, r8, r0
   daa78:	45a0      	cmp	r8, r4
   daa7a:	d907      	bls.n	daa8c <__udivmoddi4+0x10c>
   daa7c:	193c      	adds	r4, r7, r4
   daa7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   daa82:	d202      	bcs.n	daa8a <__udivmoddi4+0x10a>
   daa84:	45a0      	cmp	r8, r4
   daa86:	f200 80d9 	bhi.w	dac3c <__udivmoddi4+0x2bc>
   daa8a:	4618      	mov	r0, r3
   daa8c:	eba4 0408 	sub.w	r4, r4, r8
   daa90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   daa94:	e7bf      	b.n	daa16 <__udivmoddi4+0x96>
   daa96:	428b      	cmp	r3, r1
   daa98:	d909      	bls.n	daaae <__udivmoddi4+0x12e>
   daa9a:	2d00      	cmp	r5, #0
   daa9c:	f000 80b1 	beq.w	dac02 <__udivmoddi4+0x282>
   daaa0:	2600      	movs	r6, #0
   daaa2:	e9c5 0100 	strd	r0, r1, [r5]
   daaa6:	4630      	mov	r0, r6
   daaa8:	4631      	mov	r1, r6
   daaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daaae:	fab3 f683 	clz	r6, r3
   daab2:	2e00      	cmp	r6, #0
   daab4:	d14a      	bne.n	dab4c <__udivmoddi4+0x1cc>
   daab6:	428b      	cmp	r3, r1
   daab8:	d302      	bcc.n	daac0 <__udivmoddi4+0x140>
   daaba:	4282      	cmp	r2, r0
   daabc:	f200 80b8 	bhi.w	dac30 <__udivmoddi4+0x2b0>
   daac0:	1a84      	subs	r4, r0, r2
   daac2:	eb61 0103 	sbc.w	r1, r1, r3
   daac6:	2001      	movs	r0, #1
   daac8:	468c      	mov	ip, r1
   daaca:	2d00      	cmp	r5, #0
   daacc:	d0a8      	beq.n	daa20 <__udivmoddi4+0xa0>
   daace:	e9c5 4c00 	strd	r4, ip, [r5]
   daad2:	e7a5      	b.n	daa20 <__udivmoddi4+0xa0>
   daad4:	f1c2 0320 	rsb	r3, r2, #32
   daad8:	fa20 f603 	lsr.w	r6, r0, r3
   daadc:	4097      	lsls	r7, r2
   daade:	fa01 f002 	lsl.w	r0, r1, r2
   daae2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   daae6:	40d9      	lsrs	r1, r3
   daae8:	4330      	orrs	r0, r6
   daaea:	0c03      	lsrs	r3, r0, #16
   daaec:	fbb1 f6fe 	udiv	r6, r1, lr
   daaf0:	fa1f f887 	uxth.w	r8, r7
   daaf4:	fb0e 1116 	mls	r1, lr, r6, r1
   daaf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   daafc:	fb06 f108 	mul.w	r1, r6, r8
   dab00:	4299      	cmp	r1, r3
   dab02:	fa04 f402 	lsl.w	r4, r4, r2
   dab06:	d909      	bls.n	dab1c <__udivmoddi4+0x19c>
   dab08:	18fb      	adds	r3, r7, r3
   dab0a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dab0e:	f080 808d 	bcs.w	dac2c <__udivmoddi4+0x2ac>
   dab12:	4299      	cmp	r1, r3
   dab14:	f240 808a 	bls.w	dac2c <__udivmoddi4+0x2ac>
   dab18:	3e02      	subs	r6, #2
   dab1a:	443b      	add	r3, r7
   dab1c:	1a5b      	subs	r3, r3, r1
   dab1e:	b281      	uxth	r1, r0
   dab20:	fbb3 f0fe 	udiv	r0, r3, lr
   dab24:	fb0e 3310 	mls	r3, lr, r0, r3
   dab28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dab2c:	fb00 f308 	mul.w	r3, r0, r8
   dab30:	428b      	cmp	r3, r1
   dab32:	d907      	bls.n	dab44 <__udivmoddi4+0x1c4>
   dab34:	1879      	adds	r1, r7, r1
   dab36:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dab3a:	d273      	bcs.n	dac24 <__udivmoddi4+0x2a4>
   dab3c:	428b      	cmp	r3, r1
   dab3e:	d971      	bls.n	dac24 <__udivmoddi4+0x2a4>
   dab40:	3802      	subs	r0, #2
   dab42:	4439      	add	r1, r7
   dab44:	1acb      	subs	r3, r1, r3
   dab46:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dab4a:	e778      	b.n	daa3e <__udivmoddi4+0xbe>
   dab4c:	f1c6 0c20 	rsb	ip, r6, #32
   dab50:	fa03 f406 	lsl.w	r4, r3, r6
   dab54:	fa22 f30c 	lsr.w	r3, r2, ip
   dab58:	431c      	orrs	r4, r3
   dab5a:	fa20 f70c 	lsr.w	r7, r0, ip
   dab5e:	fa01 f306 	lsl.w	r3, r1, r6
   dab62:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dab66:	fa21 f10c 	lsr.w	r1, r1, ip
   dab6a:	431f      	orrs	r7, r3
   dab6c:	0c3b      	lsrs	r3, r7, #16
   dab6e:	fbb1 f9fe 	udiv	r9, r1, lr
   dab72:	fa1f f884 	uxth.w	r8, r4
   dab76:	fb0e 1119 	mls	r1, lr, r9, r1
   dab7a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dab7e:	fb09 fa08 	mul.w	sl, r9, r8
   dab82:	458a      	cmp	sl, r1
   dab84:	fa02 f206 	lsl.w	r2, r2, r6
   dab88:	fa00 f306 	lsl.w	r3, r0, r6
   dab8c:	d908      	bls.n	daba0 <__udivmoddi4+0x220>
   dab8e:	1861      	adds	r1, r4, r1
   dab90:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dab94:	d248      	bcs.n	dac28 <__udivmoddi4+0x2a8>
   dab96:	458a      	cmp	sl, r1
   dab98:	d946      	bls.n	dac28 <__udivmoddi4+0x2a8>
   dab9a:	f1a9 0902 	sub.w	r9, r9, #2
   dab9e:	4421      	add	r1, r4
   daba0:	eba1 010a 	sub.w	r1, r1, sl
   daba4:	b2bf      	uxth	r7, r7
   daba6:	fbb1 f0fe 	udiv	r0, r1, lr
   dabaa:	fb0e 1110 	mls	r1, lr, r0, r1
   dabae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dabb2:	fb00 f808 	mul.w	r8, r0, r8
   dabb6:	45b8      	cmp	r8, r7
   dabb8:	d907      	bls.n	dabca <__udivmoddi4+0x24a>
   dabba:	19e7      	adds	r7, r4, r7
   dabbc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dabc0:	d22e      	bcs.n	dac20 <__udivmoddi4+0x2a0>
   dabc2:	45b8      	cmp	r8, r7
   dabc4:	d92c      	bls.n	dac20 <__udivmoddi4+0x2a0>
   dabc6:	3802      	subs	r0, #2
   dabc8:	4427      	add	r7, r4
   dabca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dabce:	eba7 0708 	sub.w	r7, r7, r8
   dabd2:	fba0 8902 	umull	r8, r9, r0, r2
   dabd6:	454f      	cmp	r7, r9
   dabd8:	46c6      	mov	lr, r8
   dabda:	4649      	mov	r1, r9
   dabdc:	d31a      	bcc.n	dac14 <__udivmoddi4+0x294>
   dabde:	d017      	beq.n	dac10 <__udivmoddi4+0x290>
   dabe0:	b15d      	cbz	r5, dabfa <__udivmoddi4+0x27a>
   dabe2:	ebb3 020e 	subs.w	r2, r3, lr
   dabe6:	eb67 0701 	sbc.w	r7, r7, r1
   dabea:	fa07 fc0c 	lsl.w	ip, r7, ip
   dabee:	40f2      	lsrs	r2, r6
   dabf0:	ea4c 0202 	orr.w	r2, ip, r2
   dabf4:	40f7      	lsrs	r7, r6
   dabf6:	e9c5 2700 	strd	r2, r7, [r5]
   dabfa:	2600      	movs	r6, #0
   dabfc:	4631      	mov	r1, r6
   dabfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dac02:	462e      	mov	r6, r5
   dac04:	4628      	mov	r0, r5
   dac06:	e70b      	b.n	daa20 <__udivmoddi4+0xa0>
   dac08:	4606      	mov	r6, r0
   dac0a:	e6e9      	b.n	da9e0 <__udivmoddi4+0x60>
   dac0c:	4618      	mov	r0, r3
   dac0e:	e6fd      	b.n	daa0c <__udivmoddi4+0x8c>
   dac10:	4543      	cmp	r3, r8
   dac12:	d2e5      	bcs.n	dabe0 <__udivmoddi4+0x260>
   dac14:	ebb8 0e02 	subs.w	lr, r8, r2
   dac18:	eb69 0104 	sbc.w	r1, r9, r4
   dac1c:	3801      	subs	r0, #1
   dac1e:	e7df      	b.n	dabe0 <__udivmoddi4+0x260>
   dac20:	4608      	mov	r0, r1
   dac22:	e7d2      	b.n	dabca <__udivmoddi4+0x24a>
   dac24:	4660      	mov	r0, ip
   dac26:	e78d      	b.n	dab44 <__udivmoddi4+0x1c4>
   dac28:	4681      	mov	r9, r0
   dac2a:	e7b9      	b.n	daba0 <__udivmoddi4+0x220>
   dac2c:	4666      	mov	r6, ip
   dac2e:	e775      	b.n	dab1c <__udivmoddi4+0x19c>
   dac30:	4630      	mov	r0, r6
   dac32:	e74a      	b.n	daaca <__udivmoddi4+0x14a>
   dac34:	f1ac 0c02 	sub.w	ip, ip, #2
   dac38:	4439      	add	r1, r7
   dac3a:	e713      	b.n	daa64 <__udivmoddi4+0xe4>
   dac3c:	3802      	subs	r0, #2
   dac3e:	443c      	add	r4, r7
   dac40:	e724      	b.n	daa8c <__udivmoddi4+0x10c>
   dac42:	bf00      	nop

000dac44 <__aeabi_idiv0>:
   dac44:	4770      	bx	lr
   dac46:	bf00      	nop

000dac48 <asctime_r>:
   dac48:	b510      	push	{r4, lr}
   dac4a:	460c      	mov	r4, r1
   dac4c:	6941      	ldr	r1, [r0, #20]
   dac4e:	6903      	ldr	r3, [r0, #16]
   dac50:	6982      	ldr	r2, [r0, #24]
   dac52:	b086      	sub	sp, #24
   dac54:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dac58:	9104      	str	r1, [sp, #16]
   dac5a:	6801      	ldr	r1, [r0, #0]
   dac5c:	9103      	str	r1, [sp, #12]
   dac5e:	6841      	ldr	r1, [r0, #4]
   dac60:	9102      	str	r1, [sp, #8]
   dac62:	6881      	ldr	r1, [r0, #8]
   dac64:	9101      	str	r1, [sp, #4]
   dac66:	68c1      	ldr	r1, [r0, #12]
   dac68:	9100      	str	r1, [sp, #0]
   dac6a:	4907      	ldr	r1, [pc, #28]	; (dac88 <asctime_r+0x40>)
   dac6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dac70:	440b      	add	r3, r1
   dac72:	4906      	ldr	r1, [pc, #24]	; (dac8c <asctime_r+0x44>)
   dac74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dac78:	440a      	add	r2, r1
   dac7a:	4620      	mov	r0, r4
   dac7c:	4904      	ldr	r1, [pc, #16]	; (dac90 <asctime_r+0x48>)
   dac7e:	f7fd fa09 	bl	d8094 <siprintf>
   dac82:	4620      	mov	r0, r4
   dac84:	b006      	add	sp, #24
   dac86:	bd10      	pop	{r4, pc}
   dac88:	000ddd0a 	.word	0x000ddd0a
   dac8c:	000ddcf5 	.word	0x000ddcf5
   dac90:	000ddcd5 	.word	0x000ddcd5

000dac94 <atexit>:
   dac94:	2300      	movs	r3, #0
   dac96:	4601      	mov	r1, r0
   dac98:	461a      	mov	r2, r3
   dac9a:	4618      	mov	r0, r3
   dac9c:	f000 bf7a 	b.w	dbb94 <__register_exitproc>

000daca0 <atof>:
   daca0:	2100      	movs	r1, #0
   daca2:	f000 bee7 	b.w	dba74 <strtod>

000daca6 <atol>:
   daca6:	220a      	movs	r2, #10
   daca8:	2100      	movs	r1, #0
   dacaa:	f000 bf69 	b.w	dbb80 <strtol>

000dacae <memcmp>:
   dacae:	b530      	push	{r4, r5, lr}
   dacb0:	3901      	subs	r1, #1
   dacb2:	2400      	movs	r4, #0
   dacb4:	42a2      	cmp	r2, r4
   dacb6:	d101      	bne.n	dacbc <memcmp+0xe>
   dacb8:	2000      	movs	r0, #0
   dacba:	e005      	b.n	dacc8 <memcmp+0x1a>
   dacbc:	5d03      	ldrb	r3, [r0, r4]
   dacbe:	3401      	adds	r4, #1
   dacc0:	5d0d      	ldrb	r5, [r1, r4]
   dacc2:	42ab      	cmp	r3, r5
   dacc4:	d0f6      	beq.n	dacb4 <memcmp+0x6>
   dacc6:	1b58      	subs	r0, r3, r5
   dacc8:	bd30      	pop	{r4, r5, pc}

000dacca <memcpy>:
   dacca:	440a      	add	r2, r1
   daccc:	4291      	cmp	r1, r2
   dacce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dacd2:	d100      	bne.n	dacd6 <memcpy+0xc>
   dacd4:	4770      	bx	lr
   dacd6:	b510      	push	{r4, lr}
   dacd8:	f811 4b01 	ldrb.w	r4, [r1], #1
   dacdc:	f803 4f01 	strb.w	r4, [r3, #1]!
   dace0:	4291      	cmp	r1, r2
   dace2:	d1f9      	bne.n	dacd8 <memcpy+0xe>
   dace4:	bd10      	pop	{r4, pc}

000dace6 <memset>:
   dace6:	4402      	add	r2, r0
   dace8:	4603      	mov	r3, r0
   dacea:	4293      	cmp	r3, r2
   dacec:	d100      	bne.n	dacf0 <memset+0xa>
   dacee:	4770      	bx	lr
   dacf0:	f803 1b01 	strb.w	r1, [r3], #1
   dacf4:	e7f9      	b.n	dacea <memset+0x4>
	...

000dacf8 <srand>:
   dacf8:	b538      	push	{r3, r4, r5, lr}
   dacfa:	4b0d      	ldr	r3, [pc, #52]	; (dad30 <srand+0x38>)
   dacfc:	681d      	ldr	r5, [r3, #0]
   dacfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dad00:	4604      	mov	r4, r0
   dad02:	b97b      	cbnz	r3, dad24 <srand+0x2c>
   dad04:	2018      	movs	r0, #24
   dad06:	f7fd f9ad 	bl	d8064 <malloc>
   dad0a:	4a0a      	ldr	r2, [pc, #40]	; (dad34 <srand+0x3c>)
   dad0c:	4b0a      	ldr	r3, [pc, #40]	; (dad38 <srand+0x40>)
   dad0e:	63a8      	str	r0, [r5, #56]	; 0x38
   dad10:	e9c0 2300 	strd	r2, r3, [r0]
   dad14:	4b09      	ldr	r3, [pc, #36]	; (dad3c <srand+0x44>)
   dad16:	6083      	str	r3, [r0, #8]
   dad18:	230b      	movs	r3, #11
   dad1a:	8183      	strh	r3, [r0, #12]
   dad1c:	2201      	movs	r2, #1
   dad1e:	2300      	movs	r3, #0
   dad20:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dad24:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dad26:	2200      	movs	r2, #0
   dad28:	611c      	str	r4, [r3, #16]
   dad2a:	615a      	str	r2, [r3, #20]
   dad2c:	bd38      	pop	{r3, r4, r5, pc}
   dad2e:	bf00      	nop
   dad30:	2003dce8 	.word	0x2003dce8
   dad34:	abcd330e 	.word	0xabcd330e
   dad38:	e66d1234 	.word	0xe66d1234
   dad3c:	0005deec 	.word	0x0005deec

000dad40 <strcmp>:
   dad40:	f810 2b01 	ldrb.w	r2, [r0], #1
   dad44:	f811 3b01 	ldrb.w	r3, [r1], #1
   dad48:	2a01      	cmp	r2, #1
   dad4a:	bf28      	it	cs
   dad4c:	429a      	cmpcs	r2, r3
   dad4e:	d0f7      	beq.n	dad40 <strcmp>
   dad50:	1ad0      	subs	r0, r2, r3
   dad52:	4770      	bx	lr

000dad54 <strcpy>:
   dad54:	4603      	mov	r3, r0
   dad56:	f811 2b01 	ldrb.w	r2, [r1], #1
   dad5a:	f803 2b01 	strb.w	r2, [r3], #1
   dad5e:	2a00      	cmp	r2, #0
   dad60:	d1f9      	bne.n	dad56 <strcpy+0x2>
   dad62:	4770      	bx	lr

000dad64 <strdup>:
   dad64:	4b02      	ldr	r3, [pc, #8]	; (dad70 <strdup+0xc>)
   dad66:	4601      	mov	r1, r0
   dad68:	6818      	ldr	r0, [r3, #0]
   dad6a:	f000 b803 	b.w	dad74 <_strdup_r>
   dad6e:	bf00      	nop
   dad70:	2003dce8 	.word	0x2003dce8

000dad74 <_strdup_r>:
   dad74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dad76:	4604      	mov	r4, r0
   dad78:	4608      	mov	r0, r1
   dad7a:	460d      	mov	r5, r1
   dad7c:	f000 f80f 	bl	dad9e <strlen>
   dad80:	1c42      	adds	r2, r0, #1
   dad82:	4611      	mov	r1, r2
   dad84:	4620      	mov	r0, r4
   dad86:	9201      	str	r2, [sp, #4]
   dad88:	f7fd f9a4 	bl	d80d4 <_malloc_r>
   dad8c:	4604      	mov	r4, r0
   dad8e:	b118      	cbz	r0, dad98 <_strdup_r+0x24>
   dad90:	9a01      	ldr	r2, [sp, #4]
   dad92:	4629      	mov	r1, r5
   dad94:	f7ff ff99 	bl	dacca <memcpy>
   dad98:	4620      	mov	r0, r4
   dad9a:	b003      	add	sp, #12
   dad9c:	bd30      	pop	{r4, r5, pc}

000dad9e <strlen>:
   dad9e:	4603      	mov	r3, r0
   dada0:	f813 2b01 	ldrb.w	r2, [r3], #1
   dada4:	2a00      	cmp	r2, #0
   dada6:	d1fb      	bne.n	dada0 <strlen+0x2>
   dada8:	1a18      	subs	r0, r3, r0
   dadaa:	3801      	subs	r0, #1
   dadac:	4770      	bx	lr

000dadae <strncmp>:
   dadae:	b510      	push	{r4, lr}
   dadb0:	b16a      	cbz	r2, dadce <strncmp+0x20>
   dadb2:	3901      	subs	r1, #1
   dadb4:	1884      	adds	r4, r0, r2
   dadb6:	f810 3b01 	ldrb.w	r3, [r0], #1
   dadba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dadbe:	4293      	cmp	r3, r2
   dadc0:	d103      	bne.n	dadca <strncmp+0x1c>
   dadc2:	42a0      	cmp	r0, r4
   dadc4:	d001      	beq.n	dadca <strncmp+0x1c>
   dadc6:	2b00      	cmp	r3, #0
   dadc8:	d1f5      	bne.n	dadb6 <strncmp+0x8>
   dadca:	1a98      	subs	r0, r3, r2
   dadcc:	bd10      	pop	{r4, pc}
   dadce:	4610      	mov	r0, r2
   dadd0:	e7fc      	b.n	dadcc <strncmp+0x1e>

000dadd2 <strncpy>:
   dadd2:	b510      	push	{r4, lr}
   dadd4:	3901      	subs	r1, #1
   dadd6:	4603      	mov	r3, r0
   dadd8:	b132      	cbz	r2, dade8 <strncpy+0x16>
   dadda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dadde:	f803 4b01 	strb.w	r4, [r3], #1
   dade2:	3a01      	subs	r2, #1
   dade4:	2c00      	cmp	r4, #0
   dade6:	d1f7      	bne.n	dadd8 <strncpy+0x6>
   dade8:	441a      	add	r2, r3
   dadea:	2100      	movs	r1, #0
   dadec:	4293      	cmp	r3, r2
   dadee:	d100      	bne.n	dadf2 <strncpy+0x20>
   dadf0:	bd10      	pop	{r4, pc}
   dadf2:	f803 1b01 	strb.w	r1, [r3], #1
   dadf6:	e7f9      	b.n	dadec <strncpy+0x1a>

000dadf8 <strstr>:
   dadf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dadfa:	780c      	ldrb	r4, [r1, #0]
   dadfc:	b164      	cbz	r4, dae18 <strstr+0x20>
   dadfe:	4603      	mov	r3, r0
   dae00:	781a      	ldrb	r2, [r3, #0]
   dae02:	4618      	mov	r0, r3
   dae04:	1c5e      	adds	r6, r3, #1
   dae06:	b90a      	cbnz	r2, dae0c <strstr+0x14>
   dae08:	4610      	mov	r0, r2
   dae0a:	e005      	b.n	dae18 <strstr+0x20>
   dae0c:	4294      	cmp	r4, r2
   dae0e:	d108      	bne.n	dae22 <strstr+0x2a>
   dae10:	460d      	mov	r5, r1
   dae12:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dae16:	b902      	cbnz	r2, dae1a <strstr+0x22>
   dae18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dae1a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   dae1e:	4297      	cmp	r7, r2
   dae20:	d0f7      	beq.n	dae12 <strstr+0x1a>
   dae22:	4633      	mov	r3, r6
   dae24:	e7ec      	b.n	dae00 <strstr+0x8>

000dae26 <sulp>:
   dae26:	b570      	push	{r4, r5, r6, lr}
   dae28:	4604      	mov	r4, r0
   dae2a:	460d      	mov	r5, r1
   dae2c:	ec45 4b10 	vmov	d0, r4, r5
   dae30:	4616      	mov	r6, r2
   dae32:	f001 fd81 	bl	dc938 <__ulp>
   dae36:	ec51 0b10 	vmov	r0, r1, d0
   dae3a:	b17e      	cbz	r6, dae5c <sulp+0x36>
   dae3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dae40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dae44:	2b00      	cmp	r3, #0
   dae46:	dd09      	ble.n	dae5c <sulp+0x36>
   dae48:	051b      	lsls	r3, r3, #20
   dae4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dae4e:	2400      	movs	r4, #0
   dae50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dae54:	4622      	mov	r2, r4
   dae56:	462b      	mov	r3, r5
   dae58:	f7ff fa14 	bl	da284 <__aeabi_dmul>
   dae5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000dae60 <_strtod_l>:
   dae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae64:	b0a3      	sub	sp, #140	; 0x8c
   dae66:	461f      	mov	r7, r3
   dae68:	2300      	movs	r3, #0
   dae6a:	931e      	str	r3, [sp, #120]	; 0x78
   dae6c:	4ba4      	ldr	r3, [pc, #656]	; (db100 <_strtod_l+0x2a0>)
   dae6e:	9219      	str	r2, [sp, #100]	; 0x64
   dae70:	681b      	ldr	r3, [r3, #0]
   dae72:	9307      	str	r3, [sp, #28]
   dae74:	4604      	mov	r4, r0
   dae76:	4618      	mov	r0, r3
   dae78:	4688      	mov	r8, r1
   dae7a:	f7ff ff90 	bl	dad9e <strlen>
   dae7e:	f04f 0a00 	mov.w	sl, #0
   dae82:	4605      	mov	r5, r0
   dae84:	f04f 0b00 	mov.w	fp, #0
   dae88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dae8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dae8e:	781a      	ldrb	r2, [r3, #0]
   dae90:	2a2b      	cmp	r2, #43	; 0x2b
   dae92:	d04c      	beq.n	daf2e <_strtod_l+0xce>
   dae94:	d839      	bhi.n	daf0a <_strtod_l+0xaa>
   dae96:	2a0d      	cmp	r2, #13
   dae98:	d832      	bhi.n	daf00 <_strtod_l+0xa0>
   dae9a:	2a08      	cmp	r2, #8
   dae9c:	d832      	bhi.n	daf04 <_strtod_l+0xa4>
   dae9e:	2a00      	cmp	r2, #0
   daea0:	d03c      	beq.n	daf1c <_strtod_l+0xbc>
   daea2:	2300      	movs	r3, #0
   daea4:	930e      	str	r3, [sp, #56]	; 0x38
   daea6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   daea8:	7833      	ldrb	r3, [r6, #0]
   daeaa:	2b30      	cmp	r3, #48	; 0x30
   daeac:	f040 80b4 	bne.w	db018 <_strtod_l+0x1b8>
   daeb0:	7873      	ldrb	r3, [r6, #1]
   daeb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   daeb6:	2b58      	cmp	r3, #88	; 0x58
   daeb8:	d16c      	bne.n	daf94 <_strtod_l+0x134>
   daeba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   daebc:	9301      	str	r3, [sp, #4]
   daebe:	ab1e      	add	r3, sp, #120	; 0x78
   daec0:	9702      	str	r7, [sp, #8]
   daec2:	9300      	str	r3, [sp, #0]
   daec4:	4a8f      	ldr	r2, [pc, #572]	; (db104 <_strtod_l+0x2a4>)
   daec6:	ab1f      	add	r3, sp, #124	; 0x7c
   daec8:	a91d      	add	r1, sp, #116	; 0x74
   daeca:	4620      	mov	r0, r4
   daecc:	f000 ff2c 	bl	dbd28 <__gethex>
   daed0:	f010 0707 	ands.w	r7, r0, #7
   daed4:	4605      	mov	r5, r0
   daed6:	d005      	beq.n	daee4 <_strtod_l+0x84>
   daed8:	2f06      	cmp	r7, #6
   daeda:	d12a      	bne.n	daf32 <_strtod_l+0xd2>
   daedc:	3601      	adds	r6, #1
   daede:	2300      	movs	r3, #0
   daee0:	961d      	str	r6, [sp, #116]	; 0x74
   daee2:	930e      	str	r3, [sp, #56]	; 0x38
   daee4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   daee6:	2b00      	cmp	r3, #0
   daee8:	f040 8596 	bne.w	dba18 <_strtod_l+0xbb8>
   daeec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   daeee:	b1db      	cbz	r3, daf28 <_strtod_l+0xc8>
   daef0:	4652      	mov	r2, sl
   daef2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   daef6:	ec43 2b10 	vmov	d0, r2, r3
   daefa:	b023      	add	sp, #140	; 0x8c
   daefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daf00:	2a20      	cmp	r2, #32
   daf02:	d1ce      	bne.n	daea2 <_strtod_l+0x42>
   daf04:	3301      	adds	r3, #1
   daf06:	931d      	str	r3, [sp, #116]	; 0x74
   daf08:	e7c0      	b.n	dae8c <_strtod_l+0x2c>
   daf0a:	2a2d      	cmp	r2, #45	; 0x2d
   daf0c:	d1c9      	bne.n	daea2 <_strtod_l+0x42>
   daf0e:	2201      	movs	r2, #1
   daf10:	920e      	str	r2, [sp, #56]	; 0x38
   daf12:	1c5a      	adds	r2, r3, #1
   daf14:	921d      	str	r2, [sp, #116]	; 0x74
   daf16:	785b      	ldrb	r3, [r3, #1]
   daf18:	2b00      	cmp	r3, #0
   daf1a:	d1c4      	bne.n	daea6 <_strtod_l+0x46>
   daf1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   daf1e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   daf22:	2b00      	cmp	r3, #0
   daf24:	f040 8576 	bne.w	dba14 <_strtod_l+0xbb4>
   daf28:	4652      	mov	r2, sl
   daf2a:	465b      	mov	r3, fp
   daf2c:	e7e3      	b.n	daef6 <_strtod_l+0x96>
   daf2e:	2200      	movs	r2, #0
   daf30:	e7ee      	b.n	daf10 <_strtod_l+0xb0>
   daf32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   daf34:	b13a      	cbz	r2, daf46 <_strtod_l+0xe6>
   daf36:	2135      	movs	r1, #53	; 0x35
   daf38:	a820      	add	r0, sp, #128	; 0x80
   daf3a:	f001 fdfc 	bl	dcb36 <__copybits>
   daf3e:	991e      	ldr	r1, [sp, #120]	; 0x78
   daf40:	4620      	mov	r0, r4
   daf42:	f001 fa30 	bl	dc3a6 <_Bfree>
   daf46:	3f01      	subs	r7, #1
   daf48:	2f05      	cmp	r7, #5
   daf4a:	d807      	bhi.n	daf5c <_strtod_l+0xfc>
   daf4c:	e8df f007 	tbb	[pc, r7]
   daf50:	1d180b0e 	.word	0x1d180b0e
   daf54:	030e      	.short	0x030e
   daf56:	f04f 0b00 	mov.w	fp, #0
   daf5a:	46da      	mov	sl, fp
   daf5c:	0728      	lsls	r0, r5, #28
   daf5e:	d5c1      	bpl.n	daee4 <_strtod_l+0x84>
   daf60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   daf64:	e7be      	b.n	daee4 <_strtod_l+0x84>
   daf66:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   daf6a:	e7f7      	b.n	daf5c <_strtod_l+0xfc>
   daf6c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   daf70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   daf72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   daf76:	f202 4233 	addw	r2, r2, #1075	; 0x433
   daf7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   daf7e:	e7ed      	b.n	daf5c <_strtod_l+0xfc>
   daf80:	f8df b184 	ldr.w	fp, [pc, #388]	; db108 <_strtod_l+0x2a8>
   daf84:	f04f 0a00 	mov.w	sl, #0
   daf88:	e7e8      	b.n	daf5c <_strtod_l+0xfc>
   daf8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   daf8e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   daf92:	e7e3      	b.n	daf5c <_strtod_l+0xfc>
   daf94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daf96:	1c5a      	adds	r2, r3, #1
   daf98:	921d      	str	r2, [sp, #116]	; 0x74
   daf9a:	785b      	ldrb	r3, [r3, #1]
   daf9c:	2b30      	cmp	r3, #48	; 0x30
   daf9e:	d0f9      	beq.n	daf94 <_strtod_l+0x134>
   dafa0:	2b00      	cmp	r3, #0
   dafa2:	d09f      	beq.n	daee4 <_strtod_l+0x84>
   dafa4:	2301      	movs	r3, #1
   dafa6:	f04f 0900 	mov.w	r9, #0
   dafaa:	9304      	str	r3, [sp, #16]
   dafac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dafae:	930a      	str	r3, [sp, #40]	; 0x28
   dafb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dafb4:	464f      	mov	r7, r9
   dafb6:	220a      	movs	r2, #10
   dafb8:	981d      	ldr	r0, [sp, #116]	; 0x74
   dafba:	7806      	ldrb	r6, [r0, #0]
   dafbc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dafc0:	b2d9      	uxtb	r1, r3
   dafc2:	2909      	cmp	r1, #9
   dafc4:	d92a      	bls.n	db01c <_strtod_l+0x1bc>
   dafc6:	9907      	ldr	r1, [sp, #28]
   dafc8:	462a      	mov	r2, r5
   dafca:	f7ff fef0 	bl	dadae <strncmp>
   dafce:	b398      	cbz	r0, db038 <_strtod_l+0x1d8>
   dafd0:	2000      	movs	r0, #0
   dafd2:	4633      	mov	r3, r6
   dafd4:	463d      	mov	r5, r7
   dafd6:	9007      	str	r0, [sp, #28]
   dafd8:	4602      	mov	r2, r0
   dafda:	2b65      	cmp	r3, #101	; 0x65
   dafdc:	d001      	beq.n	dafe2 <_strtod_l+0x182>
   dafde:	2b45      	cmp	r3, #69	; 0x45
   dafe0:	d118      	bne.n	db014 <_strtod_l+0x1b4>
   dafe2:	b91d      	cbnz	r5, dafec <_strtod_l+0x18c>
   dafe4:	9b04      	ldr	r3, [sp, #16]
   dafe6:	4303      	orrs	r3, r0
   dafe8:	d098      	beq.n	daf1c <_strtod_l+0xbc>
   dafea:	2500      	movs	r5, #0
   dafec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   daff0:	f108 0301 	add.w	r3, r8, #1
   daff4:	931d      	str	r3, [sp, #116]	; 0x74
   daff6:	f898 3001 	ldrb.w	r3, [r8, #1]
   daffa:	2b2b      	cmp	r3, #43	; 0x2b
   daffc:	d075      	beq.n	db0ea <_strtod_l+0x28a>
   daffe:	2b2d      	cmp	r3, #45	; 0x2d
   db000:	d07b      	beq.n	db0fa <_strtod_l+0x29a>
   db002:	f04f 0c00 	mov.w	ip, #0
   db006:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   db00a:	2909      	cmp	r1, #9
   db00c:	f240 8082 	bls.w	db114 <_strtod_l+0x2b4>
   db010:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   db014:	2600      	movs	r6, #0
   db016:	e09d      	b.n	db154 <_strtod_l+0x2f4>
   db018:	2300      	movs	r3, #0
   db01a:	e7c4      	b.n	dafa6 <_strtod_l+0x146>
   db01c:	2f08      	cmp	r7, #8
   db01e:	bfd8      	it	le
   db020:	9909      	ldrle	r1, [sp, #36]	; 0x24
   db022:	f100 0001 	add.w	r0, r0, #1
   db026:	bfda      	itte	le
   db028:	fb02 3301 	mlale	r3, r2, r1, r3
   db02c:	9309      	strle	r3, [sp, #36]	; 0x24
   db02e:	fb02 3909 	mlagt	r9, r2, r9, r3
   db032:	3701      	adds	r7, #1
   db034:	901d      	str	r0, [sp, #116]	; 0x74
   db036:	e7bf      	b.n	dafb8 <_strtod_l+0x158>
   db038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db03a:	195a      	adds	r2, r3, r5
   db03c:	921d      	str	r2, [sp, #116]	; 0x74
   db03e:	5d5b      	ldrb	r3, [r3, r5]
   db040:	2f00      	cmp	r7, #0
   db042:	d037      	beq.n	db0b4 <_strtod_l+0x254>
   db044:	9007      	str	r0, [sp, #28]
   db046:	463d      	mov	r5, r7
   db048:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   db04c:	2a09      	cmp	r2, #9
   db04e:	d912      	bls.n	db076 <_strtod_l+0x216>
   db050:	2201      	movs	r2, #1
   db052:	e7c2      	b.n	dafda <_strtod_l+0x17a>
   db054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db056:	1c5a      	adds	r2, r3, #1
   db058:	921d      	str	r2, [sp, #116]	; 0x74
   db05a:	785b      	ldrb	r3, [r3, #1]
   db05c:	3001      	adds	r0, #1
   db05e:	2b30      	cmp	r3, #48	; 0x30
   db060:	d0f8      	beq.n	db054 <_strtod_l+0x1f4>
   db062:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   db066:	2a08      	cmp	r2, #8
   db068:	f200 84db 	bhi.w	dba22 <_strtod_l+0xbc2>
   db06c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   db06e:	9007      	str	r0, [sp, #28]
   db070:	2000      	movs	r0, #0
   db072:	920a      	str	r2, [sp, #40]	; 0x28
   db074:	4605      	mov	r5, r0
   db076:	3b30      	subs	r3, #48	; 0x30
   db078:	f100 0201 	add.w	r2, r0, #1
   db07c:	d014      	beq.n	db0a8 <_strtod_l+0x248>
   db07e:	9907      	ldr	r1, [sp, #28]
   db080:	4411      	add	r1, r2
   db082:	9107      	str	r1, [sp, #28]
   db084:	462a      	mov	r2, r5
   db086:	eb00 0e05 	add.w	lr, r0, r5
   db08a:	210a      	movs	r1, #10
   db08c:	4572      	cmp	r2, lr
   db08e:	d113      	bne.n	db0b8 <_strtod_l+0x258>
   db090:	182a      	adds	r2, r5, r0
   db092:	2a08      	cmp	r2, #8
   db094:	f105 0501 	add.w	r5, r5, #1
   db098:	4405      	add	r5, r0
   db09a:	dc1c      	bgt.n	db0d6 <_strtod_l+0x276>
   db09c:	9909      	ldr	r1, [sp, #36]	; 0x24
   db09e:	220a      	movs	r2, #10
   db0a0:	fb02 3301 	mla	r3, r2, r1, r3
   db0a4:	9309      	str	r3, [sp, #36]	; 0x24
   db0a6:	2200      	movs	r2, #0
   db0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db0aa:	1c59      	adds	r1, r3, #1
   db0ac:	911d      	str	r1, [sp, #116]	; 0x74
   db0ae:	785b      	ldrb	r3, [r3, #1]
   db0b0:	4610      	mov	r0, r2
   db0b2:	e7c9      	b.n	db048 <_strtod_l+0x1e8>
   db0b4:	4638      	mov	r0, r7
   db0b6:	e7d2      	b.n	db05e <_strtod_l+0x1fe>
   db0b8:	2a08      	cmp	r2, #8
   db0ba:	dc04      	bgt.n	db0c6 <_strtod_l+0x266>
   db0bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   db0be:	434e      	muls	r6, r1
   db0c0:	9609      	str	r6, [sp, #36]	; 0x24
   db0c2:	3201      	adds	r2, #1
   db0c4:	e7e2      	b.n	db08c <_strtod_l+0x22c>
   db0c6:	f102 0c01 	add.w	ip, r2, #1
   db0ca:	f1bc 0f10 	cmp.w	ip, #16
   db0ce:	bfd8      	it	le
   db0d0:	fb01 f909 	mulle.w	r9, r1, r9
   db0d4:	e7f5      	b.n	db0c2 <_strtod_l+0x262>
   db0d6:	2d10      	cmp	r5, #16
   db0d8:	bfdc      	itt	le
   db0da:	220a      	movle	r2, #10
   db0dc:	fb02 3909 	mlale	r9, r2, r9, r3
   db0e0:	e7e1      	b.n	db0a6 <_strtod_l+0x246>
   db0e2:	2300      	movs	r3, #0
   db0e4:	9307      	str	r3, [sp, #28]
   db0e6:	2201      	movs	r2, #1
   db0e8:	e77c      	b.n	dafe4 <_strtod_l+0x184>
   db0ea:	f04f 0c00 	mov.w	ip, #0
   db0ee:	f108 0302 	add.w	r3, r8, #2
   db0f2:	931d      	str	r3, [sp, #116]	; 0x74
   db0f4:	f898 3002 	ldrb.w	r3, [r8, #2]
   db0f8:	e785      	b.n	db006 <_strtod_l+0x1a6>
   db0fa:	f04f 0c01 	mov.w	ip, #1
   db0fe:	e7f6      	b.n	db0ee <_strtod_l+0x28e>
   db100:	000dde8c 	.word	0x000dde8c
   db104:	000ddd34 	.word	0x000ddd34
   db108:	7ff00000 	.word	0x7ff00000
   db10c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db10e:	1c59      	adds	r1, r3, #1
   db110:	911d      	str	r1, [sp, #116]	; 0x74
   db112:	785b      	ldrb	r3, [r3, #1]
   db114:	2b30      	cmp	r3, #48	; 0x30
   db116:	d0f9      	beq.n	db10c <_strtod_l+0x2ac>
   db118:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   db11c:	2908      	cmp	r1, #8
   db11e:	f63f af79 	bhi.w	db014 <_strtod_l+0x1b4>
   db122:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   db126:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db128:	9308      	str	r3, [sp, #32]
   db12a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db12c:	1c59      	adds	r1, r3, #1
   db12e:	911d      	str	r1, [sp, #116]	; 0x74
   db130:	785b      	ldrb	r3, [r3, #1]
   db132:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   db136:	2e09      	cmp	r6, #9
   db138:	d937      	bls.n	db1aa <_strtod_l+0x34a>
   db13a:	9e08      	ldr	r6, [sp, #32]
   db13c:	1b89      	subs	r1, r1, r6
   db13e:	2908      	cmp	r1, #8
   db140:	f644 661f 	movw	r6, #19999	; 0x4e1f
   db144:	dc02      	bgt.n	db14c <_strtod_l+0x2ec>
   db146:	4576      	cmp	r6, lr
   db148:	bfa8      	it	ge
   db14a:	4676      	movge	r6, lr
   db14c:	f1bc 0f00 	cmp.w	ip, #0
   db150:	d000      	beq.n	db154 <_strtod_l+0x2f4>
   db152:	4276      	negs	r6, r6
   db154:	2d00      	cmp	r5, #0
   db156:	d14f      	bne.n	db1f8 <_strtod_l+0x398>
   db158:	9904      	ldr	r1, [sp, #16]
   db15a:	4301      	orrs	r1, r0
   db15c:	f47f aec2 	bne.w	daee4 <_strtod_l+0x84>
   db160:	2a00      	cmp	r2, #0
   db162:	f47f aedb 	bne.w	daf1c <_strtod_l+0xbc>
   db166:	2b69      	cmp	r3, #105	; 0x69
   db168:	d027      	beq.n	db1ba <_strtod_l+0x35a>
   db16a:	dc24      	bgt.n	db1b6 <_strtod_l+0x356>
   db16c:	2b49      	cmp	r3, #73	; 0x49
   db16e:	d024      	beq.n	db1ba <_strtod_l+0x35a>
   db170:	2b4e      	cmp	r3, #78	; 0x4e
   db172:	f47f aed3 	bne.w	daf1c <_strtod_l+0xbc>
   db176:	499e      	ldr	r1, [pc, #632]	; (db3f0 <_strtod_l+0x590>)
   db178:	a81d      	add	r0, sp, #116	; 0x74
   db17a:	f001 f81b 	bl	dc1b4 <__match>
   db17e:	2800      	cmp	r0, #0
   db180:	f43f aecc 	beq.w	daf1c <_strtod_l+0xbc>
   db184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db186:	781b      	ldrb	r3, [r3, #0]
   db188:	2b28      	cmp	r3, #40	; 0x28
   db18a:	d12d      	bne.n	db1e8 <_strtod_l+0x388>
   db18c:	4999      	ldr	r1, [pc, #612]	; (db3f4 <_strtod_l+0x594>)
   db18e:	aa20      	add	r2, sp, #128	; 0x80
   db190:	a81d      	add	r0, sp, #116	; 0x74
   db192:	f001 f823 	bl	dc1dc <__hexnan>
   db196:	2805      	cmp	r0, #5
   db198:	d126      	bne.n	db1e8 <_strtod_l+0x388>
   db19a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   db19c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   db1a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   db1a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   db1a8:	e69c      	b.n	daee4 <_strtod_l+0x84>
   db1aa:	210a      	movs	r1, #10
   db1ac:	fb01 3e0e 	mla	lr, r1, lr, r3
   db1b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   db1b4:	e7b9      	b.n	db12a <_strtod_l+0x2ca>
   db1b6:	2b6e      	cmp	r3, #110	; 0x6e
   db1b8:	e7db      	b.n	db172 <_strtod_l+0x312>
   db1ba:	498f      	ldr	r1, [pc, #572]	; (db3f8 <_strtod_l+0x598>)
   db1bc:	a81d      	add	r0, sp, #116	; 0x74
   db1be:	f000 fff9 	bl	dc1b4 <__match>
   db1c2:	2800      	cmp	r0, #0
   db1c4:	f43f aeaa 	beq.w	daf1c <_strtod_l+0xbc>
   db1c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db1ca:	498c      	ldr	r1, [pc, #560]	; (db3fc <_strtod_l+0x59c>)
   db1cc:	3b01      	subs	r3, #1
   db1ce:	a81d      	add	r0, sp, #116	; 0x74
   db1d0:	931d      	str	r3, [sp, #116]	; 0x74
   db1d2:	f000 ffef 	bl	dc1b4 <__match>
   db1d6:	b910      	cbnz	r0, db1de <_strtod_l+0x37e>
   db1d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db1da:	3301      	adds	r3, #1
   db1dc:	931d      	str	r3, [sp, #116]	; 0x74
   db1de:	f8df b22c 	ldr.w	fp, [pc, #556]	; db40c <_strtod_l+0x5ac>
   db1e2:	f04f 0a00 	mov.w	sl, #0
   db1e6:	e67d      	b.n	daee4 <_strtod_l+0x84>
   db1e8:	4885      	ldr	r0, [pc, #532]	; (db400 <_strtod_l+0x5a0>)
   db1ea:	f001 fcf9 	bl	dcbe0 <nan>
   db1ee:	ed8d 0b04 	vstr	d0, [sp, #16]
   db1f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   db1f6:	e675      	b.n	daee4 <_strtod_l+0x84>
   db1f8:	9b07      	ldr	r3, [sp, #28]
   db1fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   db1fc:	1af3      	subs	r3, r6, r3
   db1fe:	2f00      	cmp	r7, #0
   db200:	bf08      	it	eq
   db202:	462f      	moveq	r7, r5
   db204:	2d10      	cmp	r5, #16
   db206:	9308      	str	r3, [sp, #32]
   db208:	46a8      	mov	r8, r5
   db20a:	bfa8      	it	ge
   db20c:	f04f 0810 	movge.w	r8, #16
   db210:	f7fe ffbe 	bl	da190 <__aeabi_ui2d>
   db214:	2d09      	cmp	r5, #9
   db216:	4682      	mov	sl, r0
   db218:	468b      	mov	fp, r1
   db21a:	dd13      	ble.n	db244 <_strtod_l+0x3e4>
   db21c:	4b79      	ldr	r3, [pc, #484]	; (db404 <_strtod_l+0x5a4>)
   db21e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   db222:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   db226:	f7ff f82d 	bl	da284 <__aeabi_dmul>
   db22a:	4682      	mov	sl, r0
   db22c:	4648      	mov	r0, r9
   db22e:	468b      	mov	fp, r1
   db230:	f7fe ffae 	bl	da190 <__aeabi_ui2d>
   db234:	4602      	mov	r2, r0
   db236:	460b      	mov	r3, r1
   db238:	4650      	mov	r0, sl
   db23a:	4659      	mov	r1, fp
   db23c:	f7fe fe6c 	bl	d9f18 <__adddf3>
   db240:	4682      	mov	sl, r0
   db242:	468b      	mov	fp, r1
   db244:	2d0f      	cmp	r5, #15
   db246:	dc38      	bgt.n	db2ba <_strtod_l+0x45a>
   db248:	9b08      	ldr	r3, [sp, #32]
   db24a:	2b00      	cmp	r3, #0
   db24c:	f43f ae4a 	beq.w	daee4 <_strtod_l+0x84>
   db250:	dd24      	ble.n	db29c <_strtod_l+0x43c>
   db252:	2b16      	cmp	r3, #22
   db254:	dc0b      	bgt.n	db26e <_strtod_l+0x40e>
   db256:	4d6b      	ldr	r5, [pc, #428]	; (db404 <_strtod_l+0x5a4>)
   db258:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   db25c:	e9d5 0100 	ldrd	r0, r1, [r5]
   db260:	4652      	mov	r2, sl
   db262:	465b      	mov	r3, fp
   db264:	f7ff f80e 	bl	da284 <__aeabi_dmul>
   db268:	4682      	mov	sl, r0
   db26a:	468b      	mov	fp, r1
   db26c:	e63a      	b.n	daee4 <_strtod_l+0x84>
   db26e:	9a08      	ldr	r2, [sp, #32]
   db270:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   db274:	4293      	cmp	r3, r2
   db276:	db20      	blt.n	db2ba <_strtod_l+0x45a>
   db278:	4c62      	ldr	r4, [pc, #392]	; (db404 <_strtod_l+0x5a4>)
   db27a:	f1c5 050f 	rsb	r5, r5, #15
   db27e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   db282:	4652      	mov	r2, sl
   db284:	465b      	mov	r3, fp
   db286:	e9d1 0100 	ldrd	r0, r1, [r1]
   db28a:	f7fe fffb 	bl	da284 <__aeabi_dmul>
   db28e:	9b08      	ldr	r3, [sp, #32]
   db290:	1b5d      	subs	r5, r3, r5
   db292:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   db296:	e9d4 2300 	ldrd	r2, r3, [r4]
   db29a:	e7e3      	b.n	db264 <_strtod_l+0x404>
   db29c:	9b08      	ldr	r3, [sp, #32]
   db29e:	3316      	adds	r3, #22
   db2a0:	db0b      	blt.n	db2ba <_strtod_l+0x45a>
   db2a2:	9b07      	ldr	r3, [sp, #28]
   db2a4:	4a57      	ldr	r2, [pc, #348]	; (db404 <_strtod_l+0x5a4>)
   db2a6:	1b9e      	subs	r6, r3, r6
   db2a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   db2ac:	e9d6 2300 	ldrd	r2, r3, [r6]
   db2b0:	4650      	mov	r0, sl
   db2b2:	4659      	mov	r1, fp
   db2b4:	f7ff f910 	bl	da4d8 <__aeabi_ddiv>
   db2b8:	e7d6      	b.n	db268 <_strtod_l+0x408>
   db2ba:	9b08      	ldr	r3, [sp, #32]
   db2bc:	eba5 0808 	sub.w	r8, r5, r8
   db2c0:	4498      	add	r8, r3
   db2c2:	f1b8 0f00 	cmp.w	r8, #0
   db2c6:	dd71      	ble.n	db3ac <_strtod_l+0x54c>
   db2c8:	f018 030f 	ands.w	r3, r8, #15
   db2cc:	d00a      	beq.n	db2e4 <_strtod_l+0x484>
   db2ce:	494d      	ldr	r1, [pc, #308]	; (db404 <_strtod_l+0x5a4>)
   db2d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   db2d4:	4652      	mov	r2, sl
   db2d6:	465b      	mov	r3, fp
   db2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   db2dc:	f7fe ffd2 	bl	da284 <__aeabi_dmul>
   db2e0:	4682      	mov	sl, r0
   db2e2:	468b      	mov	fp, r1
   db2e4:	f038 080f 	bics.w	r8, r8, #15
   db2e8:	d04d      	beq.n	db386 <_strtod_l+0x526>
   db2ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   db2ee:	dd22      	ble.n	db336 <_strtod_l+0x4d6>
   db2f0:	2500      	movs	r5, #0
   db2f2:	462e      	mov	r6, r5
   db2f4:	9509      	str	r5, [sp, #36]	; 0x24
   db2f6:	9507      	str	r5, [sp, #28]
   db2f8:	2322      	movs	r3, #34	; 0x22
   db2fa:	f8df b110 	ldr.w	fp, [pc, #272]	; db40c <_strtod_l+0x5ac>
   db2fe:	6023      	str	r3, [r4, #0]
   db300:	f04f 0a00 	mov.w	sl, #0
   db304:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db306:	2b00      	cmp	r3, #0
   db308:	f43f adec 	beq.w	daee4 <_strtod_l+0x84>
   db30c:	991e      	ldr	r1, [sp, #120]	; 0x78
   db30e:	4620      	mov	r0, r4
   db310:	f001 f849 	bl	dc3a6 <_Bfree>
   db314:	9907      	ldr	r1, [sp, #28]
   db316:	4620      	mov	r0, r4
   db318:	f001 f845 	bl	dc3a6 <_Bfree>
   db31c:	4631      	mov	r1, r6
   db31e:	4620      	mov	r0, r4
   db320:	f001 f841 	bl	dc3a6 <_Bfree>
   db324:	9909      	ldr	r1, [sp, #36]	; 0x24
   db326:	4620      	mov	r0, r4
   db328:	f001 f83d 	bl	dc3a6 <_Bfree>
   db32c:	4629      	mov	r1, r5
   db32e:	4620      	mov	r0, r4
   db330:	f001 f839 	bl	dc3a6 <_Bfree>
   db334:	e5d6      	b.n	daee4 <_strtod_l+0x84>
   db336:	2300      	movs	r3, #0
   db338:	ea4f 1828 	mov.w	r8, r8, asr #4
   db33c:	4650      	mov	r0, sl
   db33e:	4659      	mov	r1, fp
   db340:	4699      	mov	r9, r3
   db342:	f1b8 0f01 	cmp.w	r8, #1
   db346:	dc21      	bgt.n	db38c <_strtod_l+0x52c>
   db348:	b10b      	cbz	r3, db34e <_strtod_l+0x4ee>
   db34a:	4682      	mov	sl, r0
   db34c:	468b      	mov	fp, r1
   db34e:	4b2e      	ldr	r3, [pc, #184]	; (db408 <_strtod_l+0x5a8>)
   db350:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   db354:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   db358:	4652      	mov	r2, sl
   db35a:	465b      	mov	r3, fp
   db35c:	e9d9 0100 	ldrd	r0, r1, [r9]
   db360:	f7fe ff90 	bl	da284 <__aeabi_dmul>
   db364:	4b29      	ldr	r3, [pc, #164]	; (db40c <_strtod_l+0x5ac>)
   db366:	460a      	mov	r2, r1
   db368:	400b      	ands	r3, r1
   db36a:	4929      	ldr	r1, [pc, #164]	; (db410 <_strtod_l+0x5b0>)
   db36c:	428b      	cmp	r3, r1
   db36e:	4682      	mov	sl, r0
   db370:	d8be      	bhi.n	db2f0 <_strtod_l+0x490>
   db372:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   db376:	428b      	cmp	r3, r1
   db378:	bf86      	itte	hi
   db37a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; db414 <_strtod_l+0x5b4>
   db37e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   db382:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   db386:	2300      	movs	r3, #0
   db388:	9304      	str	r3, [sp, #16]
   db38a:	e081      	b.n	db490 <_strtod_l+0x630>
   db38c:	f018 0f01 	tst.w	r8, #1
   db390:	d007      	beq.n	db3a2 <_strtod_l+0x542>
   db392:	4b1d      	ldr	r3, [pc, #116]	; (db408 <_strtod_l+0x5a8>)
   db394:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   db398:	e9d3 2300 	ldrd	r2, r3, [r3]
   db39c:	f7fe ff72 	bl	da284 <__aeabi_dmul>
   db3a0:	2301      	movs	r3, #1
   db3a2:	f109 0901 	add.w	r9, r9, #1
   db3a6:	ea4f 0868 	mov.w	r8, r8, asr #1
   db3aa:	e7ca      	b.n	db342 <_strtod_l+0x4e2>
   db3ac:	d0eb      	beq.n	db386 <_strtod_l+0x526>
   db3ae:	f1c8 0800 	rsb	r8, r8, #0
   db3b2:	f018 020f 	ands.w	r2, r8, #15
   db3b6:	d00a      	beq.n	db3ce <_strtod_l+0x56e>
   db3b8:	4b12      	ldr	r3, [pc, #72]	; (db404 <_strtod_l+0x5a4>)
   db3ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   db3be:	4650      	mov	r0, sl
   db3c0:	4659      	mov	r1, fp
   db3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   db3c6:	f7ff f887 	bl	da4d8 <__aeabi_ddiv>
   db3ca:	4682      	mov	sl, r0
   db3cc:	468b      	mov	fp, r1
   db3ce:	ea5f 1828 	movs.w	r8, r8, asr #4
   db3d2:	d0d8      	beq.n	db386 <_strtod_l+0x526>
   db3d4:	f1b8 0f1f 	cmp.w	r8, #31
   db3d8:	dd1e      	ble.n	db418 <_strtod_l+0x5b8>
   db3da:	2500      	movs	r5, #0
   db3dc:	462e      	mov	r6, r5
   db3de:	9509      	str	r5, [sp, #36]	; 0x24
   db3e0:	9507      	str	r5, [sp, #28]
   db3e2:	2322      	movs	r3, #34	; 0x22
   db3e4:	f04f 0a00 	mov.w	sl, #0
   db3e8:	f04f 0b00 	mov.w	fp, #0
   db3ec:	6023      	str	r3, [r4, #0]
   db3ee:	e789      	b.n	db304 <_strtod_l+0x4a4>
   db3f0:	000ddc35 	.word	0x000ddc35
   db3f4:	000ddd48 	.word	0x000ddd48
   db3f8:	000ddc39 	.word	0x000ddc39
   db3fc:	000ddd2e 	.word	0x000ddd2e
   db400:	000ddcf4 	.word	0x000ddcf4
   db404:	000ddec8 	.word	0x000ddec8
   db408:	000ddea0 	.word	0x000ddea0
   db40c:	7ff00000 	.word	0x7ff00000
   db410:	7ca00000 	.word	0x7ca00000
   db414:	7fefffff 	.word	0x7fefffff
   db418:	f018 0310 	ands.w	r3, r8, #16
   db41c:	bf18      	it	ne
   db41e:	236a      	movne	r3, #106	; 0x6a
   db420:	f8df 93b4 	ldr.w	r9, [pc, #948]	; db7d8 <_strtod_l+0x978>
   db424:	9304      	str	r3, [sp, #16]
   db426:	4650      	mov	r0, sl
   db428:	4659      	mov	r1, fp
   db42a:	2300      	movs	r3, #0
   db42c:	f018 0f01 	tst.w	r8, #1
   db430:	d004      	beq.n	db43c <_strtod_l+0x5dc>
   db432:	e9d9 2300 	ldrd	r2, r3, [r9]
   db436:	f7fe ff25 	bl	da284 <__aeabi_dmul>
   db43a:	2301      	movs	r3, #1
   db43c:	ea5f 0868 	movs.w	r8, r8, asr #1
   db440:	f109 0908 	add.w	r9, r9, #8
   db444:	d1f2      	bne.n	db42c <_strtod_l+0x5cc>
   db446:	b10b      	cbz	r3, db44c <_strtod_l+0x5ec>
   db448:	4682      	mov	sl, r0
   db44a:	468b      	mov	fp, r1
   db44c:	9b04      	ldr	r3, [sp, #16]
   db44e:	b1bb      	cbz	r3, db480 <_strtod_l+0x620>
   db450:	f3cb 530a 	ubfx	r3, fp, #20, #11
   db454:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   db458:	2b00      	cmp	r3, #0
   db45a:	4659      	mov	r1, fp
   db45c:	dd10      	ble.n	db480 <_strtod_l+0x620>
   db45e:	2b1f      	cmp	r3, #31
   db460:	f340 8128 	ble.w	db6b4 <_strtod_l+0x854>
   db464:	2b34      	cmp	r3, #52	; 0x34
   db466:	bfde      	ittt	le
   db468:	3b20      	suble	r3, #32
   db46a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   db46e:	fa02 f303 	lslle.w	r3, r2, r3
   db472:	f04f 0a00 	mov.w	sl, #0
   db476:	bfcc      	ite	gt
   db478:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   db47c:	ea03 0b01 	andle.w	fp, r3, r1
   db480:	2200      	movs	r2, #0
   db482:	2300      	movs	r3, #0
   db484:	4650      	mov	r0, sl
   db486:	4659      	mov	r1, fp
   db488:	f7ff f964 	bl	da754 <__aeabi_dcmpeq>
   db48c:	2800      	cmp	r0, #0
   db48e:	d1a4      	bne.n	db3da <_strtod_l+0x57a>
   db490:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db492:	9300      	str	r3, [sp, #0]
   db494:	990a      	ldr	r1, [sp, #40]	; 0x28
   db496:	462b      	mov	r3, r5
   db498:	463a      	mov	r2, r7
   db49a:	4620      	mov	r0, r4
   db49c:	f000 ffd8 	bl	dc450 <__s2b>
   db4a0:	9009      	str	r0, [sp, #36]	; 0x24
   db4a2:	2800      	cmp	r0, #0
   db4a4:	f43f af24 	beq.w	db2f0 <_strtod_l+0x490>
   db4a8:	9b07      	ldr	r3, [sp, #28]
   db4aa:	1b9e      	subs	r6, r3, r6
   db4ac:	9b08      	ldr	r3, [sp, #32]
   db4ae:	2b00      	cmp	r3, #0
   db4b0:	bfb4      	ite	lt
   db4b2:	4633      	movlt	r3, r6
   db4b4:	2300      	movge	r3, #0
   db4b6:	9310      	str	r3, [sp, #64]	; 0x40
   db4b8:	9b08      	ldr	r3, [sp, #32]
   db4ba:	2500      	movs	r5, #0
   db4bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   db4c0:	9318      	str	r3, [sp, #96]	; 0x60
   db4c2:	462e      	mov	r6, r5
   db4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db4c6:	4620      	mov	r0, r4
   db4c8:	6859      	ldr	r1, [r3, #4]
   db4ca:	f000 ff38 	bl	dc33e <_Balloc>
   db4ce:	9007      	str	r0, [sp, #28]
   db4d0:	2800      	cmp	r0, #0
   db4d2:	f43f af11 	beq.w	db2f8 <_strtod_l+0x498>
   db4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db4d8:	691a      	ldr	r2, [r3, #16]
   db4da:	3202      	adds	r2, #2
   db4dc:	f103 010c 	add.w	r1, r3, #12
   db4e0:	0092      	lsls	r2, r2, #2
   db4e2:	300c      	adds	r0, #12
   db4e4:	f7ff fbf1 	bl	dacca <memcpy>
   db4e8:	ec4b ab10 	vmov	d0, sl, fp
   db4ec:	aa20      	add	r2, sp, #128	; 0x80
   db4ee:	a91f      	add	r1, sp, #124	; 0x7c
   db4f0:	4620      	mov	r0, r4
   db4f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   db4f6:	f001 fa9b 	bl	dca30 <__d2b>
   db4fa:	901e      	str	r0, [sp, #120]	; 0x78
   db4fc:	2800      	cmp	r0, #0
   db4fe:	f43f aefb 	beq.w	db2f8 <_strtod_l+0x498>
   db502:	2101      	movs	r1, #1
   db504:	4620      	mov	r0, r4
   db506:	f001 f831 	bl	dc56c <__i2b>
   db50a:	4606      	mov	r6, r0
   db50c:	2800      	cmp	r0, #0
   db50e:	f43f aef3 	beq.w	db2f8 <_strtod_l+0x498>
   db512:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db514:	9904      	ldr	r1, [sp, #16]
   db516:	2b00      	cmp	r3, #0
   db518:	bfab      	itete	ge
   db51a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db51c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db51e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db520:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db524:	bfac      	ite	ge
   db526:	eb03 0902 	addge.w	r9, r3, r2
   db52a:	1ad7      	sublt	r7, r2, r3
   db52c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db52e:	eba3 0801 	sub.w	r8, r3, r1
   db532:	4490      	add	r8, r2
   db534:	4ba3      	ldr	r3, [pc, #652]	; (db7c4 <_strtod_l+0x964>)
   db536:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db53a:	4598      	cmp	r8, r3
   db53c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db540:	f280 80cc 	bge.w	db6dc <_strtod_l+0x87c>
   db544:	eba3 0308 	sub.w	r3, r3, r8
   db548:	2b1f      	cmp	r3, #31
   db54a:	eba2 0203 	sub.w	r2, r2, r3
   db54e:	f04f 0101 	mov.w	r1, #1
   db552:	f300 80b6 	bgt.w	db6c2 <_strtod_l+0x862>
   db556:	fa01 f303 	lsl.w	r3, r1, r3
   db55a:	9311      	str	r3, [sp, #68]	; 0x44
   db55c:	2300      	movs	r3, #0
   db55e:	930c      	str	r3, [sp, #48]	; 0x30
   db560:	eb09 0802 	add.w	r8, r9, r2
   db564:	9b04      	ldr	r3, [sp, #16]
   db566:	45c1      	cmp	r9, r8
   db568:	4417      	add	r7, r2
   db56a:	441f      	add	r7, r3
   db56c:	464b      	mov	r3, r9
   db56e:	bfa8      	it	ge
   db570:	4643      	movge	r3, r8
   db572:	42bb      	cmp	r3, r7
   db574:	bfa8      	it	ge
   db576:	463b      	movge	r3, r7
   db578:	2b00      	cmp	r3, #0
   db57a:	bfc2      	ittt	gt
   db57c:	eba8 0803 	subgt.w	r8, r8, r3
   db580:	1aff      	subgt	r7, r7, r3
   db582:	eba9 0903 	subgt.w	r9, r9, r3
   db586:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db588:	2b00      	cmp	r3, #0
   db58a:	dd17      	ble.n	db5bc <_strtod_l+0x75c>
   db58c:	4631      	mov	r1, r6
   db58e:	461a      	mov	r2, r3
   db590:	4620      	mov	r0, r4
   db592:	f001 f891 	bl	dc6b8 <__pow5mult>
   db596:	4606      	mov	r6, r0
   db598:	2800      	cmp	r0, #0
   db59a:	f43f aead 	beq.w	db2f8 <_strtod_l+0x498>
   db59e:	4601      	mov	r1, r0
   db5a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db5a2:	4620      	mov	r0, r4
   db5a4:	f000 ffeb 	bl	dc57e <__multiply>
   db5a8:	900f      	str	r0, [sp, #60]	; 0x3c
   db5aa:	2800      	cmp	r0, #0
   db5ac:	f43f aea4 	beq.w	db2f8 <_strtod_l+0x498>
   db5b0:	991e      	ldr	r1, [sp, #120]	; 0x78
   db5b2:	4620      	mov	r0, r4
   db5b4:	f000 fef7 	bl	dc3a6 <_Bfree>
   db5b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db5ba:	931e      	str	r3, [sp, #120]	; 0x78
   db5bc:	f1b8 0f00 	cmp.w	r8, #0
   db5c0:	f300 8091 	bgt.w	db6e6 <_strtod_l+0x886>
   db5c4:	9b08      	ldr	r3, [sp, #32]
   db5c6:	2b00      	cmp	r3, #0
   db5c8:	dd08      	ble.n	db5dc <_strtod_l+0x77c>
   db5ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db5cc:	9907      	ldr	r1, [sp, #28]
   db5ce:	4620      	mov	r0, r4
   db5d0:	f001 f872 	bl	dc6b8 <__pow5mult>
   db5d4:	9007      	str	r0, [sp, #28]
   db5d6:	2800      	cmp	r0, #0
   db5d8:	f43f ae8e 	beq.w	db2f8 <_strtod_l+0x498>
   db5dc:	2f00      	cmp	r7, #0
   db5de:	dd08      	ble.n	db5f2 <_strtod_l+0x792>
   db5e0:	9907      	ldr	r1, [sp, #28]
   db5e2:	463a      	mov	r2, r7
   db5e4:	4620      	mov	r0, r4
   db5e6:	f001 f8b5 	bl	dc754 <__lshift>
   db5ea:	9007      	str	r0, [sp, #28]
   db5ec:	2800      	cmp	r0, #0
   db5ee:	f43f ae83 	beq.w	db2f8 <_strtod_l+0x498>
   db5f2:	f1b9 0f00 	cmp.w	r9, #0
   db5f6:	dd08      	ble.n	db60a <_strtod_l+0x7aa>
   db5f8:	4631      	mov	r1, r6
   db5fa:	464a      	mov	r2, r9
   db5fc:	4620      	mov	r0, r4
   db5fe:	f001 f8a9 	bl	dc754 <__lshift>
   db602:	4606      	mov	r6, r0
   db604:	2800      	cmp	r0, #0
   db606:	f43f ae77 	beq.w	db2f8 <_strtod_l+0x498>
   db60a:	9a07      	ldr	r2, [sp, #28]
   db60c:	991e      	ldr	r1, [sp, #120]	; 0x78
   db60e:	4620      	mov	r0, r4
   db610:	f001 f91b 	bl	dc84a <__mdiff>
   db614:	4605      	mov	r5, r0
   db616:	2800      	cmp	r0, #0
   db618:	f43f ae6e 	beq.w	db2f8 <_strtod_l+0x498>
   db61c:	68c3      	ldr	r3, [r0, #12]
   db61e:	930f      	str	r3, [sp, #60]	; 0x3c
   db620:	2300      	movs	r3, #0
   db622:	60c3      	str	r3, [r0, #12]
   db624:	4631      	mov	r1, r6
   db626:	f001 f8f4 	bl	dc812 <__mcmp>
   db62a:	2800      	cmp	r0, #0
   db62c:	da65      	bge.n	db6fa <_strtod_l+0x89a>
   db62e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db630:	ea53 030a 	orrs.w	r3, r3, sl
   db634:	f040 8087 	bne.w	db746 <_strtod_l+0x8e6>
   db638:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db63c:	2b00      	cmp	r3, #0
   db63e:	f040 8082 	bne.w	db746 <_strtod_l+0x8e6>
   db642:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db646:	0d1b      	lsrs	r3, r3, #20
   db648:	051b      	lsls	r3, r3, #20
   db64a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db64e:	d97a      	bls.n	db746 <_strtod_l+0x8e6>
   db650:	696b      	ldr	r3, [r5, #20]
   db652:	b913      	cbnz	r3, db65a <_strtod_l+0x7fa>
   db654:	692b      	ldr	r3, [r5, #16]
   db656:	2b01      	cmp	r3, #1
   db658:	dd75      	ble.n	db746 <_strtod_l+0x8e6>
   db65a:	4629      	mov	r1, r5
   db65c:	2201      	movs	r2, #1
   db65e:	4620      	mov	r0, r4
   db660:	f001 f878 	bl	dc754 <__lshift>
   db664:	4631      	mov	r1, r6
   db666:	4605      	mov	r5, r0
   db668:	f001 f8d3 	bl	dc812 <__mcmp>
   db66c:	2800      	cmp	r0, #0
   db66e:	dd6a      	ble.n	db746 <_strtod_l+0x8e6>
   db670:	9904      	ldr	r1, [sp, #16]
   db672:	4a55      	ldr	r2, [pc, #340]	; (db7c8 <_strtod_l+0x968>)
   db674:	465b      	mov	r3, fp
   db676:	2900      	cmp	r1, #0
   db678:	f000 8085 	beq.w	db786 <_strtod_l+0x926>
   db67c:	ea02 010b 	and.w	r1, r2, fp
   db680:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db684:	dc7f      	bgt.n	db786 <_strtod_l+0x926>
   db686:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db68a:	f77f aeaa 	ble.w	db3e2 <_strtod_l+0x582>
   db68e:	4a4f      	ldr	r2, [pc, #316]	; (db7cc <_strtod_l+0x96c>)
   db690:	2300      	movs	r3, #0
   db692:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db696:	4650      	mov	r0, sl
   db698:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db69c:	4659      	mov	r1, fp
   db69e:	f7fe fdf1 	bl	da284 <__aeabi_dmul>
   db6a2:	460b      	mov	r3, r1
   db6a4:	4303      	orrs	r3, r0
   db6a6:	bf08      	it	eq
   db6a8:	2322      	moveq	r3, #34	; 0x22
   db6aa:	4682      	mov	sl, r0
   db6ac:	468b      	mov	fp, r1
   db6ae:	bf08      	it	eq
   db6b0:	6023      	streq	r3, [r4, #0]
   db6b2:	e62b      	b.n	db30c <_strtod_l+0x4ac>
   db6b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db6b8:	fa02 f303 	lsl.w	r3, r2, r3
   db6bc:	ea03 0a0a 	and.w	sl, r3, sl
   db6c0:	e6de      	b.n	db480 <_strtod_l+0x620>
   db6c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   db6c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   db6ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   db6ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   db6d2:	fa01 f308 	lsl.w	r3, r1, r8
   db6d6:	930c      	str	r3, [sp, #48]	; 0x30
   db6d8:	9111      	str	r1, [sp, #68]	; 0x44
   db6da:	e741      	b.n	db560 <_strtod_l+0x700>
   db6dc:	2300      	movs	r3, #0
   db6de:	930c      	str	r3, [sp, #48]	; 0x30
   db6e0:	2301      	movs	r3, #1
   db6e2:	9311      	str	r3, [sp, #68]	; 0x44
   db6e4:	e73c      	b.n	db560 <_strtod_l+0x700>
   db6e6:	991e      	ldr	r1, [sp, #120]	; 0x78
   db6e8:	4642      	mov	r2, r8
   db6ea:	4620      	mov	r0, r4
   db6ec:	f001 f832 	bl	dc754 <__lshift>
   db6f0:	901e      	str	r0, [sp, #120]	; 0x78
   db6f2:	2800      	cmp	r0, #0
   db6f4:	f47f af66 	bne.w	db5c4 <_strtod_l+0x764>
   db6f8:	e5fe      	b.n	db2f8 <_strtod_l+0x498>
   db6fa:	465f      	mov	r7, fp
   db6fc:	d16e      	bne.n	db7dc <_strtod_l+0x97c>
   db6fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db700:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db704:	b342      	cbz	r2, db758 <_strtod_l+0x8f8>
   db706:	4a32      	ldr	r2, [pc, #200]	; (db7d0 <_strtod_l+0x970>)
   db708:	4293      	cmp	r3, r2
   db70a:	d128      	bne.n	db75e <_strtod_l+0x8fe>
   db70c:	9b04      	ldr	r3, [sp, #16]
   db70e:	4650      	mov	r0, sl
   db710:	b1eb      	cbz	r3, db74e <_strtod_l+0x8ee>
   db712:	4a2d      	ldr	r2, [pc, #180]	; (db7c8 <_strtod_l+0x968>)
   db714:	403a      	ands	r2, r7
   db716:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   db71a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   db71e:	d819      	bhi.n	db754 <_strtod_l+0x8f4>
   db720:	0d12      	lsrs	r2, r2, #20
   db722:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   db726:	fa01 f303 	lsl.w	r3, r1, r3
   db72a:	4298      	cmp	r0, r3
   db72c:	d117      	bne.n	db75e <_strtod_l+0x8fe>
   db72e:	4b29      	ldr	r3, [pc, #164]	; (db7d4 <_strtod_l+0x974>)
   db730:	429f      	cmp	r7, r3
   db732:	d102      	bne.n	db73a <_strtod_l+0x8da>
   db734:	3001      	adds	r0, #1
   db736:	f43f addf 	beq.w	db2f8 <_strtod_l+0x498>
   db73a:	4b23      	ldr	r3, [pc, #140]	; (db7c8 <_strtod_l+0x968>)
   db73c:	403b      	ands	r3, r7
   db73e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db742:	f04f 0a00 	mov.w	sl, #0
   db746:	9b04      	ldr	r3, [sp, #16]
   db748:	2b00      	cmp	r3, #0
   db74a:	d1a0      	bne.n	db68e <_strtod_l+0x82e>
   db74c:	e5de      	b.n	db30c <_strtod_l+0x4ac>
   db74e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db752:	e7ea      	b.n	db72a <_strtod_l+0x8ca>
   db754:	460b      	mov	r3, r1
   db756:	e7e8      	b.n	db72a <_strtod_l+0x8ca>
   db758:	ea53 030a 	orrs.w	r3, r3, sl
   db75c:	d088      	beq.n	db670 <_strtod_l+0x810>
   db75e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db760:	b1db      	cbz	r3, db79a <_strtod_l+0x93a>
   db762:	423b      	tst	r3, r7
   db764:	d0ef      	beq.n	db746 <_strtod_l+0x8e6>
   db766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db768:	9a04      	ldr	r2, [sp, #16]
   db76a:	4650      	mov	r0, sl
   db76c:	4659      	mov	r1, fp
   db76e:	b1c3      	cbz	r3, db7a2 <_strtod_l+0x942>
   db770:	f7ff fb59 	bl	dae26 <sulp>
   db774:	4602      	mov	r2, r0
   db776:	460b      	mov	r3, r1
   db778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db77c:	f7fe fbcc 	bl	d9f18 <__adddf3>
   db780:	4682      	mov	sl, r0
   db782:	468b      	mov	fp, r1
   db784:	e7df      	b.n	db746 <_strtod_l+0x8e6>
   db786:	4013      	ands	r3, r2
   db788:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db78c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db790:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db794:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db798:	e7d5      	b.n	db746 <_strtod_l+0x8e6>
   db79a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db79c:	ea13 0f0a 	tst.w	r3, sl
   db7a0:	e7e0      	b.n	db764 <_strtod_l+0x904>
   db7a2:	f7ff fb40 	bl	dae26 <sulp>
   db7a6:	4602      	mov	r2, r0
   db7a8:	460b      	mov	r3, r1
   db7aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db7ae:	f7fe fbb1 	bl	d9f14 <__aeabi_dsub>
   db7b2:	2200      	movs	r2, #0
   db7b4:	2300      	movs	r3, #0
   db7b6:	4682      	mov	sl, r0
   db7b8:	468b      	mov	fp, r1
   db7ba:	f7fe ffcb 	bl	da754 <__aeabi_dcmpeq>
   db7be:	2800      	cmp	r0, #0
   db7c0:	d0c1      	beq.n	db746 <_strtod_l+0x8e6>
   db7c2:	e60e      	b.n	db3e2 <_strtod_l+0x582>
   db7c4:	fffffc02 	.word	0xfffffc02
   db7c8:	7ff00000 	.word	0x7ff00000
   db7cc:	39500000 	.word	0x39500000
   db7d0:	000fffff 	.word	0x000fffff
   db7d4:	7fefffff 	.word	0x7fefffff
   db7d8:	000ddd60 	.word	0x000ddd60
   db7dc:	4631      	mov	r1, r6
   db7de:	4628      	mov	r0, r5
   db7e0:	f001 f976 	bl	dcad0 <__ratio>
   db7e4:	ec59 8b10 	vmov	r8, r9, d0
   db7e8:	ee10 0a10 	vmov	r0, s0
   db7ec:	2200      	movs	r2, #0
   db7ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db7f2:	4649      	mov	r1, r9
   db7f4:	f7fe ffc2 	bl	da77c <__aeabi_dcmple>
   db7f8:	2800      	cmp	r0, #0
   db7fa:	d07c      	beq.n	db8f6 <_strtod_l+0xa96>
   db7fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db7fe:	2b00      	cmp	r3, #0
   db800:	d04c      	beq.n	db89c <_strtod_l+0xa3c>
   db802:	4b95      	ldr	r3, [pc, #596]	; (dba58 <_strtod_l+0xbf8>)
   db804:	2200      	movs	r2, #0
   db806:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db80a:	f8df 924c 	ldr.w	r9, [pc, #588]	; dba58 <_strtod_l+0xbf8>
   db80e:	f04f 0800 	mov.w	r8, #0
   db812:	4b92      	ldr	r3, [pc, #584]	; (dba5c <_strtod_l+0xbfc>)
   db814:	403b      	ands	r3, r7
   db816:	9311      	str	r3, [sp, #68]	; 0x44
   db818:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db81a:	4b91      	ldr	r3, [pc, #580]	; (dba60 <_strtod_l+0xc00>)
   db81c:	429a      	cmp	r2, r3
   db81e:	f040 80b2 	bne.w	db986 <_strtod_l+0xb26>
   db822:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db82a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   db82e:	ec4b ab10 	vmov	d0, sl, fp
   db832:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   db836:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db83a:	f001 f87d 	bl	dc938 <__ulp>
   db83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db842:	ec53 2b10 	vmov	r2, r3, d0
   db846:	f7fe fd1d 	bl	da284 <__aeabi_dmul>
   db84a:	4652      	mov	r2, sl
   db84c:	465b      	mov	r3, fp
   db84e:	f7fe fb63 	bl	d9f18 <__adddf3>
   db852:	460b      	mov	r3, r1
   db854:	4981      	ldr	r1, [pc, #516]	; (dba5c <_strtod_l+0xbfc>)
   db856:	4a83      	ldr	r2, [pc, #524]	; (dba64 <_strtod_l+0xc04>)
   db858:	4019      	ands	r1, r3
   db85a:	4291      	cmp	r1, r2
   db85c:	4682      	mov	sl, r0
   db85e:	d95e      	bls.n	db91e <_strtod_l+0xabe>
   db860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   db862:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   db866:	4293      	cmp	r3, r2
   db868:	d103      	bne.n	db872 <_strtod_l+0xa12>
   db86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db86c:	3301      	adds	r3, #1
   db86e:	f43f ad43 	beq.w	db2f8 <_strtod_l+0x498>
   db872:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dba70 <_strtod_l+0xc10>
   db876:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db87a:	991e      	ldr	r1, [sp, #120]	; 0x78
   db87c:	4620      	mov	r0, r4
   db87e:	f000 fd92 	bl	dc3a6 <_Bfree>
   db882:	9907      	ldr	r1, [sp, #28]
   db884:	4620      	mov	r0, r4
   db886:	f000 fd8e 	bl	dc3a6 <_Bfree>
   db88a:	4631      	mov	r1, r6
   db88c:	4620      	mov	r0, r4
   db88e:	f000 fd8a 	bl	dc3a6 <_Bfree>
   db892:	4629      	mov	r1, r5
   db894:	4620      	mov	r0, r4
   db896:	f000 fd86 	bl	dc3a6 <_Bfree>
   db89a:	e613      	b.n	db4c4 <_strtod_l+0x664>
   db89c:	f1ba 0f00 	cmp.w	sl, #0
   db8a0:	d11b      	bne.n	db8da <_strtod_l+0xa7a>
   db8a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db8a6:	b9f3      	cbnz	r3, db8e6 <_strtod_l+0xa86>
   db8a8:	4b6b      	ldr	r3, [pc, #428]	; (dba58 <_strtod_l+0xbf8>)
   db8aa:	2200      	movs	r2, #0
   db8ac:	4640      	mov	r0, r8
   db8ae:	4649      	mov	r1, r9
   db8b0:	f7fe ff5a 	bl	da768 <__aeabi_dcmplt>
   db8b4:	b9d0      	cbnz	r0, db8ec <_strtod_l+0xa8c>
   db8b6:	4640      	mov	r0, r8
   db8b8:	4649      	mov	r1, r9
   db8ba:	4b6b      	ldr	r3, [pc, #428]	; (dba68 <_strtod_l+0xc08>)
   db8bc:	2200      	movs	r2, #0
   db8be:	f7fe fce1 	bl	da284 <__aeabi_dmul>
   db8c2:	4680      	mov	r8, r0
   db8c4:	4689      	mov	r9, r1
   db8c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   db8ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   db8ce:	931b      	str	r3, [sp, #108]	; 0x6c
   db8d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   db8d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db8d8:	e79b      	b.n	db812 <_strtod_l+0x9b2>
   db8da:	f1ba 0f01 	cmp.w	sl, #1
   db8de:	d102      	bne.n	db8e6 <_strtod_l+0xa86>
   db8e0:	2f00      	cmp	r7, #0
   db8e2:	f43f ad7e 	beq.w	db3e2 <_strtod_l+0x582>
   db8e6:	4b61      	ldr	r3, [pc, #388]	; (dba6c <_strtod_l+0xc0c>)
   db8e8:	2200      	movs	r2, #0
   db8ea:	e78c      	b.n	db806 <_strtod_l+0x9a6>
   db8ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; dba68 <_strtod_l+0xc08>
   db8f0:	f04f 0800 	mov.w	r8, #0
   db8f4:	e7e7      	b.n	db8c6 <_strtod_l+0xa66>
   db8f6:	4b5c      	ldr	r3, [pc, #368]	; (dba68 <_strtod_l+0xc08>)
   db8f8:	4640      	mov	r0, r8
   db8fa:	4649      	mov	r1, r9
   db8fc:	2200      	movs	r2, #0
   db8fe:	f7fe fcc1 	bl	da284 <__aeabi_dmul>
   db902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db904:	4680      	mov	r8, r0
   db906:	4689      	mov	r9, r1
   db908:	b933      	cbnz	r3, db918 <_strtod_l+0xab8>
   db90a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db90e:	9012      	str	r0, [sp, #72]	; 0x48
   db910:	9313      	str	r3, [sp, #76]	; 0x4c
   db912:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   db916:	e7dd      	b.n	db8d4 <_strtod_l+0xa74>
   db918:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   db91c:	e7f9      	b.n	db912 <_strtod_l+0xab2>
   db91e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   db922:	9b04      	ldr	r3, [sp, #16]
   db924:	2b00      	cmp	r3, #0
   db926:	d1a8      	bne.n	db87a <_strtod_l+0xa1a>
   db928:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db92c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db92e:	0d1b      	lsrs	r3, r3, #20
   db930:	051b      	lsls	r3, r3, #20
   db932:	429a      	cmp	r2, r3
   db934:	d1a1      	bne.n	db87a <_strtod_l+0xa1a>
   db936:	4640      	mov	r0, r8
   db938:	4649      	mov	r1, r9
   db93a:	f001 f967 	bl	dcc0c <__aeabi_d2lz>
   db93e:	f7fe fc73 	bl	da228 <__aeabi_l2d>
   db942:	4602      	mov	r2, r0
   db944:	460b      	mov	r3, r1
   db946:	4640      	mov	r0, r8
   db948:	4649      	mov	r1, r9
   db94a:	f7fe fae3 	bl	d9f14 <__aeabi_dsub>
   db94e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db950:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db954:	ea43 030a 	orr.w	r3, r3, sl
   db958:	4313      	orrs	r3, r2
   db95a:	4680      	mov	r8, r0
   db95c:	4689      	mov	r9, r1
   db95e:	d053      	beq.n	dba08 <_strtod_l+0xba8>
   db960:	a335      	add	r3, pc, #212	; (adr r3, dba38 <_strtod_l+0xbd8>)
   db962:	e9d3 2300 	ldrd	r2, r3, [r3]
   db966:	f7fe feff 	bl	da768 <__aeabi_dcmplt>
   db96a:	2800      	cmp	r0, #0
   db96c:	f47f acce 	bne.w	db30c <_strtod_l+0x4ac>
   db970:	a333      	add	r3, pc, #204	; (adr r3, dba40 <_strtod_l+0xbe0>)
   db972:	e9d3 2300 	ldrd	r2, r3, [r3]
   db976:	4640      	mov	r0, r8
   db978:	4649      	mov	r1, r9
   db97a:	f7fe ff13 	bl	da7a4 <__aeabi_dcmpgt>
   db97e:	2800      	cmp	r0, #0
   db980:	f43f af7b 	beq.w	db87a <_strtod_l+0xa1a>
   db984:	e4c2      	b.n	db30c <_strtod_l+0x4ac>
   db986:	9b04      	ldr	r3, [sp, #16]
   db988:	b333      	cbz	r3, db9d8 <_strtod_l+0xb78>
   db98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db98c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db990:	d822      	bhi.n	db9d8 <_strtod_l+0xb78>
   db992:	a32d      	add	r3, pc, #180	; (adr r3, dba48 <_strtod_l+0xbe8>)
   db994:	e9d3 2300 	ldrd	r2, r3, [r3]
   db998:	4640      	mov	r0, r8
   db99a:	4649      	mov	r1, r9
   db99c:	f7fe feee 	bl	da77c <__aeabi_dcmple>
   db9a0:	b1a0      	cbz	r0, db9cc <_strtod_l+0xb6c>
   db9a2:	4649      	mov	r1, r9
   db9a4:	4640      	mov	r0, r8
   db9a6:	f7fe ff45 	bl	da834 <__aeabi_d2uiz>
   db9aa:	2801      	cmp	r0, #1
   db9ac:	bf38      	it	cc
   db9ae:	2001      	movcc	r0, #1
   db9b0:	f7fe fbee 	bl	da190 <__aeabi_ui2d>
   db9b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db9b6:	4680      	mov	r8, r0
   db9b8:	4689      	mov	r9, r1
   db9ba:	bb13      	cbnz	r3, dba02 <_strtod_l+0xba2>
   db9bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db9c0:	9014      	str	r0, [sp, #80]	; 0x50
   db9c2:	9315      	str	r3, [sp, #84]	; 0x54
   db9c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   db9c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db9ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db9d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   db9d4:	1a9b      	subs	r3, r3, r2
   db9d6:	930d      	str	r3, [sp, #52]	; 0x34
   db9d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db9dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   db9e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db9e4:	f000 ffa8 	bl	dc938 <__ulp>
   db9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db9ec:	ec53 2b10 	vmov	r2, r3, d0
   db9f0:	f7fe fc48 	bl	da284 <__aeabi_dmul>
   db9f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db9f8:	f7fe fa8e 	bl	d9f18 <__adddf3>
   db9fc:	4682      	mov	sl, r0
   db9fe:	468b      	mov	fp, r1
   dba00:	e78f      	b.n	db922 <_strtod_l+0xac2>
   dba02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dba06:	e7dd      	b.n	db9c4 <_strtod_l+0xb64>
   dba08:	a311      	add	r3, pc, #68	; (adr r3, dba50 <_strtod_l+0xbf0>)
   dba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba0e:	f7fe feab 	bl	da768 <__aeabi_dcmplt>
   dba12:	e7b4      	b.n	db97e <_strtod_l+0xb1e>
   dba14:	2300      	movs	r3, #0
   dba16:	930e      	str	r3, [sp, #56]	; 0x38
   dba18:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dba1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dba1c:	6013      	str	r3, [r2, #0]
   dba1e:	f7ff ba65 	b.w	daeec <_strtod_l+0x8c>
   dba22:	2b65      	cmp	r3, #101	; 0x65
   dba24:	f43f ab5d 	beq.w	db0e2 <_strtod_l+0x282>
   dba28:	2b45      	cmp	r3, #69	; 0x45
   dba2a:	f43f ab5a 	beq.w	db0e2 <_strtod_l+0x282>
   dba2e:	2201      	movs	r2, #1
   dba30:	f7ff bb92 	b.w	db158 <_strtod_l+0x2f8>
   dba34:	f3af 8000 	nop.w
   dba38:	94a03595 	.word	0x94a03595
   dba3c:	3fdfffff 	.word	0x3fdfffff
   dba40:	35afe535 	.word	0x35afe535
   dba44:	3fe00000 	.word	0x3fe00000
   dba48:	ffc00000 	.word	0xffc00000
   dba4c:	41dfffff 	.word	0x41dfffff
   dba50:	94a03595 	.word	0x94a03595
   dba54:	3fcfffff 	.word	0x3fcfffff
   dba58:	3ff00000 	.word	0x3ff00000
   dba5c:	7ff00000 	.word	0x7ff00000
   dba60:	7fe00000 	.word	0x7fe00000
   dba64:	7c9fffff 	.word	0x7c9fffff
   dba68:	3fe00000 	.word	0x3fe00000
   dba6c:	bff00000 	.word	0xbff00000
   dba70:	7fefffff 	.word	0x7fefffff

000dba74 <strtod>:
   dba74:	460a      	mov	r2, r1
   dba76:	4601      	mov	r1, r0
   dba78:	4802      	ldr	r0, [pc, #8]	; (dba84 <strtod+0x10>)
   dba7a:	4b03      	ldr	r3, [pc, #12]	; (dba88 <strtod+0x14>)
   dba7c:	6800      	ldr	r0, [r0, #0]
   dba7e:	f7ff b9ef 	b.w	dae60 <_strtod_l>
   dba82:	bf00      	nop
   dba84:	2003dce8 	.word	0x2003dce8
   dba88:	2003dd54 	.word	0x2003dd54

000dba8c <_strtol_l.isra.0>:
   dba8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dba90:	4e3a      	ldr	r6, [pc, #232]	; (dbb7c <_strtol_l.isra.0+0xf0>)
   dba92:	4686      	mov	lr, r0
   dba94:	468c      	mov	ip, r1
   dba96:	4660      	mov	r0, ip
   dba98:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dba9c:	5da5      	ldrb	r5, [r4, r6]
   dba9e:	f015 0508 	ands.w	r5, r5, #8
   dbaa2:	d1f8      	bne.n	dba96 <_strtol_l.isra.0+0xa>
   dbaa4:	2c2d      	cmp	r4, #45	; 0x2d
   dbaa6:	d133      	bne.n	dbb10 <_strtol_l.isra.0+0x84>
   dbaa8:	f89c 4000 	ldrb.w	r4, [ip]
   dbaac:	f04f 0801 	mov.w	r8, #1
   dbab0:	f100 0c02 	add.w	ip, r0, #2
   dbab4:	2b00      	cmp	r3, #0
   dbab6:	d05c      	beq.n	dbb72 <_strtol_l.isra.0+0xe6>
   dbab8:	2b10      	cmp	r3, #16
   dbaba:	d10c      	bne.n	dbad6 <_strtol_l.isra.0+0x4a>
   dbabc:	2c30      	cmp	r4, #48	; 0x30
   dbabe:	d10a      	bne.n	dbad6 <_strtol_l.isra.0+0x4a>
   dbac0:	f89c 0000 	ldrb.w	r0, [ip]
   dbac4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbac8:	2858      	cmp	r0, #88	; 0x58
   dbaca:	d14d      	bne.n	dbb68 <_strtol_l.isra.0+0xdc>
   dbacc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dbad0:	2310      	movs	r3, #16
   dbad2:	f10c 0c02 	add.w	ip, ip, #2
   dbad6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dbada:	3f01      	subs	r7, #1
   dbadc:	2600      	movs	r6, #0
   dbade:	fbb7 f9f3 	udiv	r9, r7, r3
   dbae2:	4630      	mov	r0, r6
   dbae4:	fb03 7a19 	mls	sl, r3, r9, r7
   dbae8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dbaec:	2d09      	cmp	r5, #9
   dbaee:	d818      	bhi.n	dbb22 <_strtol_l.isra.0+0x96>
   dbaf0:	462c      	mov	r4, r5
   dbaf2:	42a3      	cmp	r3, r4
   dbaf4:	dd24      	ble.n	dbb40 <_strtol_l.isra.0+0xb4>
   dbaf6:	1c75      	adds	r5, r6, #1
   dbaf8:	d007      	beq.n	dbb0a <_strtol_l.isra.0+0x7e>
   dbafa:	4581      	cmp	r9, r0
   dbafc:	d31d      	bcc.n	dbb3a <_strtol_l.isra.0+0xae>
   dbafe:	d101      	bne.n	dbb04 <_strtol_l.isra.0+0x78>
   dbb00:	45a2      	cmp	sl, r4
   dbb02:	db1a      	blt.n	dbb3a <_strtol_l.isra.0+0xae>
   dbb04:	fb00 4003 	mla	r0, r0, r3, r4
   dbb08:	2601      	movs	r6, #1
   dbb0a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbb0e:	e7eb      	b.n	dbae8 <_strtol_l.isra.0+0x5c>
   dbb10:	2c2b      	cmp	r4, #43	; 0x2b
   dbb12:	bf08      	it	eq
   dbb14:	f89c 4000 	ldrbeq.w	r4, [ip]
   dbb18:	46a8      	mov	r8, r5
   dbb1a:	bf08      	it	eq
   dbb1c:	f100 0c02 	addeq.w	ip, r0, #2
   dbb20:	e7c8      	b.n	dbab4 <_strtol_l.isra.0+0x28>
   dbb22:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dbb26:	2d19      	cmp	r5, #25
   dbb28:	d801      	bhi.n	dbb2e <_strtol_l.isra.0+0xa2>
   dbb2a:	3c37      	subs	r4, #55	; 0x37
   dbb2c:	e7e1      	b.n	dbaf2 <_strtol_l.isra.0+0x66>
   dbb2e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dbb32:	2d19      	cmp	r5, #25
   dbb34:	d804      	bhi.n	dbb40 <_strtol_l.isra.0+0xb4>
   dbb36:	3c57      	subs	r4, #87	; 0x57
   dbb38:	e7db      	b.n	dbaf2 <_strtol_l.isra.0+0x66>
   dbb3a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbb3e:	e7e4      	b.n	dbb0a <_strtol_l.isra.0+0x7e>
   dbb40:	1c73      	adds	r3, r6, #1
   dbb42:	d106      	bne.n	dbb52 <_strtol_l.isra.0+0xc6>
   dbb44:	2322      	movs	r3, #34	; 0x22
   dbb46:	f8ce 3000 	str.w	r3, [lr]
   dbb4a:	4638      	mov	r0, r7
   dbb4c:	b942      	cbnz	r2, dbb60 <_strtol_l.isra.0+0xd4>
   dbb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbb52:	f1b8 0f00 	cmp.w	r8, #0
   dbb56:	d000      	beq.n	dbb5a <_strtol_l.isra.0+0xce>
   dbb58:	4240      	negs	r0, r0
   dbb5a:	2a00      	cmp	r2, #0
   dbb5c:	d0f7      	beq.n	dbb4e <_strtol_l.isra.0+0xc2>
   dbb5e:	b10e      	cbz	r6, dbb64 <_strtol_l.isra.0+0xd8>
   dbb60:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dbb64:	6011      	str	r1, [r2, #0]
   dbb66:	e7f2      	b.n	dbb4e <_strtol_l.isra.0+0xc2>
   dbb68:	2430      	movs	r4, #48	; 0x30
   dbb6a:	2b00      	cmp	r3, #0
   dbb6c:	d1b3      	bne.n	dbad6 <_strtol_l.isra.0+0x4a>
   dbb6e:	2308      	movs	r3, #8
   dbb70:	e7b1      	b.n	dbad6 <_strtol_l.isra.0+0x4a>
   dbb72:	2c30      	cmp	r4, #48	; 0x30
   dbb74:	d0a4      	beq.n	dbac0 <_strtol_l.isra.0+0x34>
   dbb76:	230a      	movs	r3, #10
   dbb78:	e7ad      	b.n	dbad6 <_strtol_l.isra.0+0x4a>
   dbb7a:	bf00      	nop
   dbb7c:	000ddd89 	.word	0x000ddd89

000dbb80 <strtol>:
   dbb80:	4613      	mov	r3, r2
   dbb82:	460a      	mov	r2, r1
   dbb84:	4601      	mov	r1, r0
   dbb86:	4802      	ldr	r0, [pc, #8]	; (dbb90 <strtol+0x10>)
   dbb88:	6800      	ldr	r0, [r0, #0]
   dbb8a:	f7ff bf7f 	b.w	dba8c <_strtol_l.isra.0>
   dbb8e:	bf00      	nop
   dbb90:	2003dce8 	.word	0x2003dce8

000dbb94 <__register_exitproc>:
   dbb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbb98:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dbc54 <__register_exitproc+0xc0>
   dbb9c:	4606      	mov	r6, r0
   dbb9e:	f8d8 0000 	ldr.w	r0, [r8]
   dbba2:	461f      	mov	r7, r3
   dbba4:	460d      	mov	r5, r1
   dbba6:	4691      	mov	r9, r2
   dbba8:	f000 fbb4 	bl	dc314 <__retarget_lock_acquire_recursive>
   dbbac:	4b25      	ldr	r3, [pc, #148]	; (dbc44 <__register_exitproc+0xb0>)
   dbbae:	681c      	ldr	r4, [r3, #0]
   dbbb0:	b934      	cbnz	r4, dbbc0 <__register_exitproc+0x2c>
   dbbb2:	4c25      	ldr	r4, [pc, #148]	; (dbc48 <__register_exitproc+0xb4>)
   dbbb4:	601c      	str	r4, [r3, #0]
   dbbb6:	4b25      	ldr	r3, [pc, #148]	; (dbc4c <__register_exitproc+0xb8>)
   dbbb8:	b113      	cbz	r3, dbbc0 <__register_exitproc+0x2c>
   dbbba:	681b      	ldr	r3, [r3, #0]
   dbbbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dbbc0:	6863      	ldr	r3, [r4, #4]
   dbbc2:	2b1f      	cmp	r3, #31
   dbbc4:	dd07      	ble.n	dbbd6 <__register_exitproc+0x42>
   dbbc6:	f8d8 0000 	ldr.w	r0, [r8]
   dbbca:	f000 fba5 	bl	dc318 <__retarget_lock_release_recursive>
   dbbce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbbd6:	b34e      	cbz	r6, dbc2c <__register_exitproc+0x98>
   dbbd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dbbdc:	b988      	cbnz	r0, dbc02 <__register_exitproc+0x6e>
   dbbde:	4b1c      	ldr	r3, [pc, #112]	; (dbc50 <__register_exitproc+0xbc>)
   dbbe0:	b923      	cbnz	r3, dbbec <__register_exitproc+0x58>
   dbbe2:	f8d8 0000 	ldr.w	r0, [r8]
   dbbe6:	f000 fb96 	bl	dc316 <__retarget_lock_release>
   dbbea:	e7f0      	b.n	dbbce <__register_exitproc+0x3a>
   dbbec:	f44f 7084 	mov.w	r0, #264	; 0x108
   dbbf0:	f7fc fa38 	bl	d8064 <malloc>
   dbbf4:	2800      	cmp	r0, #0
   dbbf6:	d0f4      	beq.n	dbbe2 <__register_exitproc+0x4e>
   dbbf8:	2300      	movs	r3, #0
   dbbfa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dbbfe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dbc02:	6863      	ldr	r3, [r4, #4]
   dbc04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dbc08:	2201      	movs	r2, #1
   dbc0a:	409a      	lsls	r2, r3
   dbc0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dbc10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dbc14:	4313      	orrs	r3, r2
   dbc16:	2e02      	cmp	r6, #2
   dbc18:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dbc1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dbc20:	bf02      	ittt	eq
   dbc22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dbc26:	431a      	orreq	r2, r3
   dbc28:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dbc2c:	6863      	ldr	r3, [r4, #4]
   dbc2e:	f8d8 0000 	ldr.w	r0, [r8]
   dbc32:	1c5a      	adds	r2, r3, #1
   dbc34:	3302      	adds	r3, #2
   dbc36:	6062      	str	r2, [r4, #4]
   dbc38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dbc3c:	f000 fb6c 	bl	dc318 <__retarget_lock_release_recursive>
   dbc40:	2000      	movs	r0, #0
   dbc42:	e7c6      	b.n	dbbd2 <__register_exitproc+0x3e>
   dbc44:	2003e7e0 	.word	0x2003e7e0
   dbc48:	2003e754 	.word	0x2003e754
   dbc4c:	00000000 	.word	0x00000000
   dbc50:	000d8065 	.word	0x000d8065
   dbc54:	2003dd4c 	.word	0x2003dd4c

000dbc58 <rshift>:
   dbc58:	6903      	ldr	r3, [r0, #16]
   dbc5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dbc5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dbc62:	ea4f 1261 	mov.w	r2, r1, asr #5
   dbc66:	f100 0414 	add.w	r4, r0, #20
   dbc6a:	dd45      	ble.n	dbcf8 <rshift+0xa0>
   dbc6c:	f011 011f 	ands.w	r1, r1, #31
   dbc70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dbc74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dbc78:	d10c      	bne.n	dbc94 <rshift+0x3c>
   dbc7a:	f100 0710 	add.w	r7, r0, #16
   dbc7e:	4629      	mov	r1, r5
   dbc80:	42b1      	cmp	r1, r6
   dbc82:	d334      	bcc.n	dbcee <rshift+0x96>
   dbc84:	1a9b      	subs	r3, r3, r2
   dbc86:	009b      	lsls	r3, r3, #2
   dbc88:	1eea      	subs	r2, r5, #3
   dbc8a:	4296      	cmp	r6, r2
   dbc8c:	bf38      	it	cc
   dbc8e:	2300      	movcc	r3, #0
   dbc90:	4423      	add	r3, r4
   dbc92:	e015      	b.n	dbcc0 <rshift+0x68>
   dbc94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dbc98:	f1c1 0820 	rsb	r8, r1, #32
   dbc9c:	40cf      	lsrs	r7, r1
   dbc9e:	f105 0e04 	add.w	lr, r5, #4
   dbca2:	46a1      	mov	r9, r4
   dbca4:	4576      	cmp	r6, lr
   dbca6:	46f4      	mov	ip, lr
   dbca8:	d815      	bhi.n	dbcd6 <rshift+0x7e>
   dbcaa:	1a9b      	subs	r3, r3, r2
   dbcac:	009a      	lsls	r2, r3, #2
   dbcae:	3a04      	subs	r2, #4
   dbcb0:	3501      	adds	r5, #1
   dbcb2:	42ae      	cmp	r6, r5
   dbcb4:	bf38      	it	cc
   dbcb6:	2200      	movcc	r2, #0
   dbcb8:	18a3      	adds	r3, r4, r2
   dbcba:	50a7      	str	r7, [r4, r2]
   dbcbc:	b107      	cbz	r7, dbcc0 <rshift+0x68>
   dbcbe:	3304      	adds	r3, #4
   dbcc0:	1b1a      	subs	r2, r3, r4
   dbcc2:	42a3      	cmp	r3, r4
   dbcc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dbcc8:	bf08      	it	eq
   dbcca:	2300      	moveq	r3, #0
   dbccc:	6102      	str	r2, [r0, #16]
   dbcce:	bf08      	it	eq
   dbcd0:	6143      	streq	r3, [r0, #20]
   dbcd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dbcd6:	f8dc c000 	ldr.w	ip, [ip]
   dbcda:	fa0c fc08 	lsl.w	ip, ip, r8
   dbcde:	ea4c 0707 	orr.w	r7, ip, r7
   dbce2:	f849 7b04 	str.w	r7, [r9], #4
   dbce6:	f85e 7b04 	ldr.w	r7, [lr], #4
   dbcea:	40cf      	lsrs	r7, r1
   dbcec:	e7da      	b.n	dbca4 <rshift+0x4c>
   dbcee:	f851 cb04 	ldr.w	ip, [r1], #4
   dbcf2:	f847 cf04 	str.w	ip, [r7, #4]!
   dbcf6:	e7c3      	b.n	dbc80 <rshift+0x28>
   dbcf8:	4623      	mov	r3, r4
   dbcfa:	e7e1      	b.n	dbcc0 <rshift+0x68>

000dbcfc <__hexdig_fun>:
   dbcfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dbd00:	2b09      	cmp	r3, #9
   dbd02:	d802      	bhi.n	dbd0a <__hexdig_fun+0xe>
   dbd04:	3820      	subs	r0, #32
   dbd06:	b2c0      	uxtb	r0, r0
   dbd08:	4770      	bx	lr
   dbd0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dbd0e:	2b05      	cmp	r3, #5
   dbd10:	d801      	bhi.n	dbd16 <__hexdig_fun+0x1a>
   dbd12:	3847      	subs	r0, #71	; 0x47
   dbd14:	e7f7      	b.n	dbd06 <__hexdig_fun+0xa>
   dbd16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dbd1a:	2b05      	cmp	r3, #5
   dbd1c:	d801      	bhi.n	dbd22 <__hexdig_fun+0x26>
   dbd1e:	3827      	subs	r0, #39	; 0x27
   dbd20:	e7f1      	b.n	dbd06 <__hexdig_fun+0xa>
   dbd22:	2000      	movs	r0, #0
   dbd24:	4770      	bx	lr
	...

000dbd28 <__gethex>:
   dbd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd2c:	ed2d 8b02 	vpush	{d8}
   dbd30:	b089      	sub	sp, #36	; 0x24
   dbd32:	ee08 0a10 	vmov	s16, r0
   dbd36:	9304      	str	r3, [sp, #16]
   dbd38:	4bbc      	ldr	r3, [pc, #752]	; (dc02c <__gethex+0x304>)
   dbd3a:	681b      	ldr	r3, [r3, #0]
   dbd3c:	9301      	str	r3, [sp, #4]
   dbd3e:	4618      	mov	r0, r3
   dbd40:	468b      	mov	fp, r1
   dbd42:	4690      	mov	r8, r2
   dbd44:	f7ff f82b 	bl	dad9e <strlen>
   dbd48:	9b01      	ldr	r3, [sp, #4]
   dbd4a:	f8db 2000 	ldr.w	r2, [fp]
   dbd4e:	4403      	add	r3, r0
   dbd50:	4682      	mov	sl, r0
   dbd52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dbd56:	9305      	str	r3, [sp, #20]
   dbd58:	1c93      	adds	r3, r2, #2
   dbd5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dbd5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dbd62:	32fe      	adds	r2, #254	; 0xfe
   dbd64:	18d1      	adds	r1, r2, r3
   dbd66:	461f      	mov	r7, r3
   dbd68:	f813 0b01 	ldrb.w	r0, [r3], #1
   dbd6c:	9100      	str	r1, [sp, #0]
   dbd6e:	2830      	cmp	r0, #48	; 0x30
   dbd70:	d0f8      	beq.n	dbd64 <__gethex+0x3c>
   dbd72:	f7ff ffc3 	bl	dbcfc <__hexdig_fun>
   dbd76:	4604      	mov	r4, r0
   dbd78:	2800      	cmp	r0, #0
   dbd7a:	d13a      	bne.n	dbdf2 <__gethex+0xca>
   dbd7c:	9901      	ldr	r1, [sp, #4]
   dbd7e:	4652      	mov	r2, sl
   dbd80:	4638      	mov	r0, r7
   dbd82:	f7ff f814 	bl	dadae <strncmp>
   dbd86:	4605      	mov	r5, r0
   dbd88:	2800      	cmp	r0, #0
   dbd8a:	d168      	bne.n	dbe5e <__gethex+0x136>
   dbd8c:	f817 000a 	ldrb.w	r0, [r7, sl]
   dbd90:	eb07 060a 	add.w	r6, r7, sl
   dbd94:	f7ff ffb2 	bl	dbcfc <__hexdig_fun>
   dbd98:	2800      	cmp	r0, #0
   dbd9a:	d062      	beq.n	dbe62 <__gethex+0x13a>
   dbd9c:	4633      	mov	r3, r6
   dbd9e:	7818      	ldrb	r0, [r3, #0]
   dbda0:	2830      	cmp	r0, #48	; 0x30
   dbda2:	461f      	mov	r7, r3
   dbda4:	f103 0301 	add.w	r3, r3, #1
   dbda8:	d0f9      	beq.n	dbd9e <__gethex+0x76>
   dbdaa:	f7ff ffa7 	bl	dbcfc <__hexdig_fun>
   dbdae:	2301      	movs	r3, #1
   dbdb0:	fab0 f480 	clz	r4, r0
   dbdb4:	0964      	lsrs	r4, r4, #5
   dbdb6:	4635      	mov	r5, r6
   dbdb8:	9300      	str	r3, [sp, #0]
   dbdba:	463a      	mov	r2, r7
   dbdbc:	4616      	mov	r6, r2
   dbdbe:	3201      	adds	r2, #1
   dbdc0:	7830      	ldrb	r0, [r6, #0]
   dbdc2:	f7ff ff9b 	bl	dbcfc <__hexdig_fun>
   dbdc6:	2800      	cmp	r0, #0
   dbdc8:	d1f8      	bne.n	dbdbc <__gethex+0x94>
   dbdca:	9901      	ldr	r1, [sp, #4]
   dbdcc:	4652      	mov	r2, sl
   dbdce:	4630      	mov	r0, r6
   dbdd0:	f7fe ffed 	bl	dadae <strncmp>
   dbdd4:	b980      	cbnz	r0, dbdf8 <__gethex+0xd0>
   dbdd6:	b94d      	cbnz	r5, dbdec <__gethex+0xc4>
   dbdd8:	eb06 050a 	add.w	r5, r6, sl
   dbddc:	462a      	mov	r2, r5
   dbdde:	4616      	mov	r6, r2
   dbde0:	3201      	adds	r2, #1
   dbde2:	7830      	ldrb	r0, [r6, #0]
   dbde4:	f7ff ff8a 	bl	dbcfc <__hexdig_fun>
   dbde8:	2800      	cmp	r0, #0
   dbdea:	d1f8      	bne.n	dbdde <__gethex+0xb6>
   dbdec:	1bad      	subs	r5, r5, r6
   dbdee:	00ad      	lsls	r5, r5, #2
   dbdf0:	e004      	b.n	dbdfc <__gethex+0xd4>
   dbdf2:	2400      	movs	r4, #0
   dbdf4:	4625      	mov	r5, r4
   dbdf6:	e7e0      	b.n	dbdba <__gethex+0x92>
   dbdf8:	2d00      	cmp	r5, #0
   dbdfa:	d1f7      	bne.n	dbdec <__gethex+0xc4>
   dbdfc:	7833      	ldrb	r3, [r6, #0]
   dbdfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dbe02:	2b50      	cmp	r3, #80	; 0x50
   dbe04:	d13b      	bne.n	dbe7e <__gethex+0x156>
   dbe06:	7873      	ldrb	r3, [r6, #1]
   dbe08:	2b2b      	cmp	r3, #43	; 0x2b
   dbe0a:	d02c      	beq.n	dbe66 <__gethex+0x13e>
   dbe0c:	2b2d      	cmp	r3, #45	; 0x2d
   dbe0e:	d02e      	beq.n	dbe6e <__gethex+0x146>
   dbe10:	1c71      	adds	r1, r6, #1
   dbe12:	f04f 0900 	mov.w	r9, #0
   dbe16:	7808      	ldrb	r0, [r1, #0]
   dbe18:	f7ff ff70 	bl	dbcfc <__hexdig_fun>
   dbe1c:	1e43      	subs	r3, r0, #1
   dbe1e:	b2db      	uxtb	r3, r3
   dbe20:	2b18      	cmp	r3, #24
   dbe22:	d82c      	bhi.n	dbe7e <__gethex+0x156>
   dbe24:	f1a0 0210 	sub.w	r2, r0, #16
   dbe28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dbe2c:	f7ff ff66 	bl	dbcfc <__hexdig_fun>
   dbe30:	1e43      	subs	r3, r0, #1
   dbe32:	b2db      	uxtb	r3, r3
   dbe34:	2b18      	cmp	r3, #24
   dbe36:	d91d      	bls.n	dbe74 <__gethex+0x14c>
   dbe38:	f1b9 0f00 	cmp.w	r9, #0
   dbe3c:	d000      	beq.n	dbe40 <__gethex+0x118>
   dbe3e:	4252      	negs	r2, r2
   dbe40:	4415      	add	r5, r2
   dbe42:	f8cb 1000 	str.w	r1, [fp]
   dbe46:	b1e4      	cbz	r4, dbe82 <__gethex+0x15a>
   dbe48:	9b00      	ldr	r3, [sp, #0]
   dbe4a:	2b00      	cmp	r3, #0
   dbe4c:	bf14      	ite	ne
   dbe4e:	2700      	movne	r7, #0
   dbe50:	2706      	moveq	r7, #6
   dbe52:	4638      	mov	r0, r7
   dbe54:	b009      	add	sp, #36	; 0x24
   dbe56:	ecbd 8b02 	vpop	{d8}
   dbe5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbe5e:	463e      	mov	r6, r7
   dbe60:	4625      	mov	r5, r4
   dbe62:	2401      	movs	r4, #1
   dbe64:	e7ca      	b.n	dbdfc <__gethex+0xd4>
   dbe66:	f04f 0900 	mov.w	r9, #0
   dbe6a:	1cb1      	adds	r1, r6, #2
   dbe6c:	e7d3      	b.n	dbe16 <__gethex+0xee>
   dbe6e:	f04f 0901 	mov.w	r9, #1
   dbe72:	e7fa      	b.n	dbe6a <__gethex+0x142>
   dbe74:	230a      	movs	r3, #10
   dbe76:	fb03 0202 	mla	r2, r3, r2, r0
   dbe7a:	3a10      	subs	r2, #16
   dbe7c:	e7d4      	b.n	dbe28 <__gethex+0x100>
   dbe7e:	4631      	mov	r1, r6
   dbe80:	e7df      	b.n	dbe42 <__gethex+0x11a>
   dbe82:	1bf3      	subs	r3, r6, r7
   dbe84:	3b01      	subs	r3, #1
   dbe86:	4621      	mov	r1, r4
   dbe88:	2b07      	cmp	r3, #7
   dbe8a:	dc52      	bgt.n	dbf32 <__gethex+0x20a>
   dbe8c:	ee18 0a10 	vmov	r0, s16
   dbe90:	f000 fa55 	bl	dc33e <_Balloc>
   dbe94:	f04f 0b00 	mov.w	fp, #0
   dbe98:	f100 0914 	add.w	r9, r0, #20
   dbe9c:	f1ca 0301 	rsb	r3, sl, #1
   dbea0:	4604      	mov	r4, r0
   dbea2:	f8cd 9008 	str.w	r9, [sp, #8]
   dbea6:	f8cd b000 	str.w	fp, [sp]
   dbeaa:	9306      	str	r3, [sp, #24]
   dbeac:	42b7      	cmp	r7, r6
   dbeae:	d343      	bcc.n	dbf38 <__gethex+0x210>
   dbeb0:	9802      	ldr	r0, [sp, #8]
   dbeb2:	9b00      	ldr	r3, [sp, #0]
   dbeb4:	f840 3b04 	str.w	r3, [r0], #4
   dbeb8:	eba0 0009 	sub.w	r0, r0, r9
   dbebc:	1080      	asrs	r0, r0, #2
   dbebe:	0146      	lsls	r6, r0, #5
   dbec0:	6120      	str	r0, [r4, #16]
   dbec2:	4618      	mov	r0, r3
   dbec4:	f000 fb02 	bl	dc4cc <__hi0bits>
   dbec8:	1a30      	subs	r0, r6, r0
   dbeca:	f8d8 6000 	ldr.w	r6, [r8]
   dbece:	42b0      	cmp	r0, r6
   dbed0:	dd66      	ble.n	dbfa0 <__gethex+0x278>
   dbed2:	1b87      	subs	r7, r0, r6
   dbed4:	4639      	mov	r1, r7
   dbed6:	4620      	mov	r0, r4
   dbed8:	f000 fe50 	bl	dcb7c <__any_on>
   dbedc:	4682      	mov	sl, r0
   dbede:	b1a8      	cbz	r0, dbf0c <__gethex+0x1e4>
   dbee0:	1e7b      	subs	r3, r7, #1
   dbee2:	1159      	asrs	r1, r3, #5
   dbee4:	f003 021f 	and.w	r2, r3, #31
   dbee8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dbeec:	f04f 0a01 	mov.w	sl, #1
   dbef0:	fa0a f202 	lsl.w	r2, sl, r2
   dbef4:	420a      	tst	r2, r1
   dbef6:	d009      	beq.n	dbf0c <__gethex+0x1e4>
   dbef8:	4553      	cmp	r3, sl
   dbefa:	dd05      	ble.n	dbf08 <__gethex+0x1e0>
   dbefc:	1eb9      	subs	r1, r7, #2
   dbefe:	4620      	mov	r0, r4
   dbf00:	f000 fe3c 	bl	dcb7c <__any_on>
   dbf04:	2800      	cmp	r0, #0
   dbf06:	d148      	bne.n	dbf9a <__gethex+0x272>
   dbf08:	f04f 0a02 	mov.w	sl, #2
   dbf0c:	4639      	mov	r1, r7
   dbf0e:	4620      	mov	r0, r4
   dbf10:	f7ff fea2 	bl	dbc58 <rshift>
   dbf14:	443d      	add	r5, r7
   dbf16:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dbf1a:	42ab      	cmp	r3, r5
   dbf1c:	da4f      	bge.n	dbfbe <__gethex+0x296>
   dbf1e:	ee18 0a10 	vmov	r0, s16
   dbf22:	4621      	mov	r1, r4
   dbf24:	f000 fa3f 	bl	dc3a6 <_Bfree>
   dbf28:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dbf2a:	2300      	movs	r3, #0
   dbf2c:	6013      	str	r3, [r2, #0]
   dbf2e:	27a3      	movs	r7, #163	; 0xa3
   dbf30:	e78f      	b.n	dbe52 <__gethex+0x12a>
   dbf32:	3101      	adds	r1, #1
   dbf34:	105b      	asrs	r3, r3, #1
   dbf36:	e7a7      	b.n	dbe88 <__gethex+0x160>
   dbf38:	1e73      	subs	r3, r6, #1
   dbf3a:	9a05      	ldr	r2, [sp, #20]
   dbf3c:	9303      	str	r3, [sp, #12]
   dbf3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   dbf42:	4293      	cmp	r3, r2
   dbf44:	d019      	beq.n	dbf7a <__gethex+0x252>
   dbf46:	f1bb 0f20 	cmp.w	fp, #32
   dbf4a:	d107      	bne.n	dbf5c <__gethex+0x234>
   dbf4c:	9b02      	ldr	r3, [sp, #8]
   dbf4e:	9a00      	ldr	r2, [sp, #0]
   dbf50:	f843 2b04 	str.w	r2, [r3], #4
   dbf54:	9302      	str	r3, [sp, #8]
   dbf56:	2300      	movs	r3, #0
   dbf58:	9300      	str	r3, [sp, #0]
   dbf5a:	469b      	mov	fp, r3
   dbf5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   dbf60:	f7ff fecc 	bl	dbcfc <__hexdig_fun>
   dbf64:	9b00      	ldr	r3, [sp, #0]
   dbf66:	f000 000f 	and.w	r0, r0, #15
   dbf6a:	fa00 f00b 	lsl.w	r0, r0, fp
   dbf6e:	4303      	orrs	r3, r0
   dbf70:	9300      	str	r3, [sp, #0]
   dbf72:	f10b 0b04 	add.w	fp, fp, #4
   dbf76:	9b03      	ldr	r3, [sp, #12]
   dbf78:	e00d      	b.n	dbf96 <__gethex+0x26e>
   dbf7a:	9b03      	ldr	r3, [sp, #12]
   dbf7c:	9a06      	ldr	r2, [sp, #24]
   dbf7e:	4413      	add	r3, r2
   dbf80:	42bb      	cmp	r3, r7
   dbf82:	d3e0      	bcc.n	dbf46 <__gethex+0x21e>
   dbf84:	4618      	mov	r0, r3
   dbf86:	9901      	ldr	r1, [sp, #4]
   dbf88:	9307      	str	r3, [sp, #28]
   dbf8a:	4652      	mov	r2, sl
   dbf8c:	f7fe ff0f 	bl	dadae <strncmp>
   dbf90:	9b07      	ldr	r3, [sp, #28]
   dbf92:	2800      	cmp	r0, #0
   dbf94:	d1d7      	bne.n	dbf46 <__gethex+0x21e>
   dbf96:	461e      	mov	r6, r3
   dbf98:	e788      	b.n	dbeac <__gethex+0x184>
   dbf9a:	f04f 0a03 	mov.w	sl, #3
   dbf9e:	e7b5      	b.n	dbf0c <__gethex+0x1e4>
   dbfa0:	da0a      	bge.n	dbfb8 <__gethex+0x290>
   dbfa2:	1a37      	subs	r7, r6, r0
   dbfa4:	4621      	mov	r1, r4
   dbfa6:	ee18 0a10 	vmov	r0, s16
   dbfaa:	463a      	mov	r2, r7
   dbfac:	f000 fbd2 	bl	dc754 <__lshift>
   dbfb0:	1bed      	subs	r5, r5, r7
   dbfb2:	4604      	mov	r4, r0
   dbfb4:	f100 0914 	add.w	r9, r0, #20
   dbfb8:	f04f 0a00 	mov.w	sl, #0
   dbfbc:	e7ab      	b.n	dbf16 <__gethex+0x1ee>
   dbfbe:	f8d8 0004 	ldr.w	r0, [r8, #4]
   dbfc2:	42a8      	cmp	r0, r5
   dbfc4:	dd6d      	ble.n	dc0a2 <__gethex+0x37a>
   dbfc6:	1b45      	subs	r5, r0, r5
   dbfc8:	42ae      	cmp	r6, r5
   dbfca:	dc31      	bgt.n	dc030 <__gethex+0x308>
   dbfcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dbfd0:	2b02      	cmp	r3, #2
   dbfd2:	d023      	beq.n	dc01c <__gethex+0x2f4>
   dbfd4:	2b03      	cmp	r3, #3
   dbfd6:	d025      	beq.n	dc024 <__gethex+0x2fc>
   dbfd8:	2b01      	cmp	r3, #1
   dbfda:	d115      	bne.n	dc008 <__gethex+0x2e0>
   dbfdc:	42ae      	cmp	r6, r5
   dbfde:	d113      	bne.n	dc008 <__gethex+0x2e0>
   dbfe0:	2e01      	cmp	r6, #1
   dbfe2:	d10b      	bne.n	dbffc <__gethex+0x2d4>
   dbfe4:	9a04      	ldr	r2, [sp, #16]
   dbfe6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dbfea:	6013      	str	r3, [r2, #0]
   dbfec:	2301      	movs	r3, #1
   dbfee:	6123      	str	r3, [r4, #16]
   dbff0:	f8c9 3000 	str.w	r3, [r9]
   dbff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dbff6:	2762      	movs	r7, #98	; 0x62
   dbff8:	601c      	str	r4, [r3, #0]
   dbffa:	e72a      	b.n	dbe52 <__gethex+0x12a>
   dbffc:	1e71      	subs	r1, r6, #1
   dbffe:	4620      	mov	r0, r4
   dc000:	f000 fdbc 	bl	dcb7c <__any_on>
   dc004:	2800      	cmp	r0, #0
   dc006:	d1ed      	bne.n	dbfe4 <__gethex+0x2bc>
   dc008:	ee18 0a10 	vmov	r0, s16
   dc00c:	4621      	mov	r1, r4
   dc00e:	f000 f9ca 	bl	dc3a6 <_Bfree>
   dc012:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dc014:	2300      	movs	r3, #0
   dc016:	6013      	str	r3, [r2, #0]
   dc018:	2750      	movs	r7, #80	; 0x50
   dc01a:	e71a      	b.n	dbe52 <__gethex+0x12a>
   dc01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc01e:	2b00      	cmp	r3, #0
   dc020:	d1f2      	bne.n	dc008 <__gethex+0x2e0>
   dc022:	e7df      	b.n	dbfe4 <__gethex+0x2bc>
   dc024:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc026:	2b00      	cmp	r3, #0
   dc028:	d1dc      	bne.n	dbfe4 <__gethex+0x2bc>
   dc02a:	e7ed      	b.n	dc008 <__gethex+0x2e0>
   dc02c:	000dde8c 	.word	0x000dde8c
   dc030:	1e6f      	subs	r7, r5, #1
   dc032:	f1ba 0f00 	cmp.w	sl, #0
   dc036:	d131      	bne.n	dc09c <__gethex+0x374>
   dc038:	b127      	cbz	r7, dc044 <__gethex+0x31c>
   dc03a:	4639      	mov	r1, r7
   dc03c:	4620      	mov	r0, r4
   dc03e:	f000 fd9d 	bl	dcb7c <__any_on>
   dc042:	4682      	mov	sl, r0
   dc044:	117b      	asrs	r3, r7, #5
   dc046:	2101      	movs	r1, #1
   dc048:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dc04c:	f007 071f 	and.w	r7, r7, #31
   dc050:	fa01 f707 	lsl.w	r7, r1, r7
   dc054:	421f      	tst	r7, r3
   dc056:	4629      	mov	r1, r5
   dc058:	4620      	mov	r0, r4
   dc05a:	bf18      	it	ne
   dc05c:	f04a 0a02 	orrne.w	sl, sl, #2
   dc060:	1b76      	subs	r6, r6, r5
   dc062:	f7ff fdf9 	bl	dbc58 <rshift>
   dc066:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dc06a:	2702      	movs	r7, #2
   dc06c:	f1ba 0f00 	cmp.w	sl, #0
   dc070:	d048      	beq.n	dc104 <__gethex+0x3dc>
   dc072:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dc076:	2b02      	cmp	r3, #2
   dc078:	d015      	beq.n	dc0a6 <__gethex+0x37e>
   dc07a:	2b03      	cmp	r3, #3
   dc07c:	d017      	beq.n	dc0ae <__gethex+0x386>
   dc07e:	2b01      	cmp	r3, #1
   dc080:	d109      	bne.n	dc096 <__gethex+0x36e>
   dc082:	f01a 0f02 	tst.w	sl, #2
   dc086:	d006      	beq.n	dc096 <__gethex+0x36e>
   dc088:	f8d9 0000 	ldr.w	r0, [r9]
   dc08c:	ea4a 0a00 	orr.w	sl, sl, r0
   dc090:	f01a 0f01 	tst.w	sl, #1
   dc094:	d10e      	bne.n	dc0b4 <__gethex+0x38c>
   dc096:	f047 0710 	orr.w	r7, r7, #16
   dc09a:	e033      	b.n	dc104 <__gethex+0x3dc>
   dc09c:	f04f 0a01 	mov.w	sl, #1
   dc0a0:	e7d0      	b.n	dc044 <__gethex+0x31c>
   dc0a2:	2701      	movs	r7, #1
   dc0a4:	e7e2      	b.n	dc06c <__gethex+0x344>
   dc0a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc0a8:	f1c3 0301 	rsb	r3, r3, #1
   dc0ac:	9315      	str	r3, [sp, #84]	; 0x54
   dc0ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dc0b0:	2b00      	cmp	r3, #0
   dc0b2:	d0f0      	beq.n	dc096 <__gethex+0x36e>
   dc0b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dc0b8:	f104 0314 	add.w	r3, r4, #20
   dc0bc:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dc0c0:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dc0c4:	f04f 0c00 	mov.w	ip, #0
   dc0c8:	4618      	mov	r0, r3
   dc0ca:	f853 2b04 	ldr.w	r2, [r3], #4
   dc0ce:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dc0d2:	d01c      	beq.n	dc10e <__gethex+0x3e6>
   dc0d4:	3201      	adds	r2, #1
   dc0d6:	6002      	str	r2, [r0, #0]
   dc0d8:	2f02      	cmp	r7, #2
   dc0da:	f104 0314 	add.w	r3, r4, #20
   dc0de:	d13a      	bne.n	dc156 <__gethex+0x42e>
   dc0e0:	f8d8 2000 	ldr.w	r2, [r8]
   dc0e4:	3a01      	subs	r2, #1
   dc0e6:	42b2      	cmp	r2, r6
   dc0e8:	d10a      	bne.n	dc100 <__gethex+0x3d8>
   dc0ea:	1171      	asrs	r1, r6, #5
   dc0ec:	2201      	movs	r2, #1
   dc0ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dc0f2:	f006 061f 	and.w	r6, r6, #31
   dc0f6:	fa02 f606 	lsl.w	r6, r2, r6
   dc0fa:	421e      	tst	r6, r3
   dc0fc:	bf18      	it	ne
   dc0fe:	4617      	movne	r7, r2
   dc100:	f047 0720 	orr.w	r7, r7, #32
   dc104:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dc106:	601c      	str	r4, [r3, #0]
   dc108:	9b04      	ldr	r3, [sp, #16]
   dc10a:	601d      	str	r5, [r3, #0]
   dc10c:	e6a1      	b.n	dbe52 <__gethex+0x12a>
   dc10e:	4299      	cmp	r1, r3
   dc110:	f843 cc04 	str.w	ip, [r3, #-4]
   dc114:	d8d8      	bhi.n	dc0c8 <__gethex+0x3a0>
   dc116:	68a3      	ldr	r3, [r4, #8]
   dc118:	4599      	cmp	r9, r3
   dc11a:	db14      	blt.n	dc146 <__gethex+0x41e>
   dc11c:	6861      	ldr	r1, [r4, #4]
   dc11e:	ee18 0a10 	vmov	r0, s16
   dc122:	3101      	adds	r1, #1
   dc124:	f000 f90b 	bl	dc33e <_Balloc>
   dc128:	6922      	ldr	r2, [r4, #16]
   dc12a:	3202      	adds	r2, #2
   dc12c:	f104 010c 	add.w	r1, r4, #12
   dc130:	4682      	mov	sl, r0
   dc132:	0092      	lsls	r2, r2, #2
   dc134:	300c      	adds	r0, #12
   dc136:	f7fe fdc8 	bl	dacca <memcpy>
   dc13a:	4621      	mov	r1, r4
   dc13c:	ee18 0a10 	vmov	r0, s16
   dc140:	f000 f931 	bl	dc3a6 <_Bfree>
   dc144:	4654      	mov	r4, sl
   dc146:	6923      	ldr	r3, [r4, #16]
   dc148:	1c5a      	adds	r2, r3, #1
   dc14a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dc14e:	6122      	str	r2, [r4, #16]
   dc150:	2201      	movs	r2, #1
   dc152:	615a      	str	r2, [r3, #20]
   dc154:	e7c0      	b.n	dc0d8 <__gethex+0x3b0>
   dc156:	6922      	ldr	r2, [r4, #16]
   dc158:	454a      	cmp	r2, r9
   dc15a:	dd0b      	ble.n	dc174 <__gethex+0x44c>
   dc15c:	2101      	movs	r1, #1
   dc15e:	4620      	mov	r0, r4
   dc160:	f7ff fd7a 	bl	dbc58 <rshift>
   dc164:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dc168:	3501      	adds	r5, #1
   dc16a:	42ab      	cmp	r3, r5
   dc16c:	f6ff aed7 	blt.w	dbf1e <__gethex+0x1f6>
   dc170:	2701      	movs	r7, #1
   dc172:	e7c5      	b.n	dc100 <__gethex+0x3d8>
   dc174:	f016 061f 	ands.w	r6, r6, #31
   dc178:	d0fa      	beq.n	dc170 <__gethex+0x448>
   dc17a:	449b      	add	fp, r3
   dc17c:	f1c6 0620 	rsb	r6, r6, #32
   dc180:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dc184:	f000 f9a2 	bl	dc4cc <__hi0bits>
   dc188:	42b0      	cmp	r0, r6
   dc18a:	dbe7      	blt.n	dc15c <__gethex+0x434>
   dc18c:	e7f0      	b.n	dc170 <__gethex+0x448>
   dc18e:	bf00      	nop

000dc190 <L_shift>:
   dc190:	f1c2 0208 	rsb	r2, r2, #8
   dc194:	0092      	lsls	r2, r2, #2
   dc196:	b570      	push	{r4, r5, r6, lr}
   dc198:	f1c2 0620 	rsb	r6, r2, #32
   dc19c:	6843      	ldr	r3, [r0, #4]
   dc19e:	6804      	ldr	r4, [r0, #0]
   dc1a0:	fa03 f506 	lsl.w	r5, r3, r6
   dc1a4:	432c      	orrs	r4, r5
   dc1a6:	40d3      	lsrs	r3, r2
   dc1a8:	6004      	str	r4, [r0, #0]
   dc1aa:	f840 3f04 	str.w	r3, [r0, #4]!
   dc1ae:	4288      	cmp	r0, r1
   dc1b0:	d3f4      	bcc.n	dc19c <L_shift+0xc>
   dc1b2:	bd70      	pop	{r4, r5, r6, pc}

000dc1b4 <__match>:
   dc1b4:	b530      	push	{r4, r5, lr}
   dc1b6:	6803      	ldr	r3, [r0, #0]
   dc1b8:	3301      	adds	r3, #1
   dc1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc1be:	b914      	cbnz	r4, dc1c6 <__match+0x12>
   dc1c0:	6003      	str	r3, [r0, #0]
   dc1c2:	2001      	movs	r0, #1
   dc1c4:	bd30      	pop	{r4, r5, pc}
   dc1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc1ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dc1ce:	2d19      	cmp	r5, #25
   dc1d0:	bf98      	it	ls
   dc1d2:	3220      	addls	r2, #32
   dc1d4:	42a2      	cmp	r2, r4
   dc1d6:	d0f0      	beq.n	dc1ba <__match+0x6>
   dc1d8:	2000      	movs	r0, #0
   dc1da:	e7f3      	b.n	dc1c4 <__match+0x10>

000dc1dc <__hexnan>:
   dc1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc1e0:	680b      	ldr	r3, [r1, #0]
   dc1e2:	6801      	ldr	r1, [r0, #0]
   dc1e4:	115e      	asrs	r6, r3, #5
   dc1e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dc1ea:	f013 031f 	ands.w	r3, r3, #31
   dc1ee:	b087      	sub	sp, #28
   dc1f0:	bf18      	it	ne
   dc1f2:	3604      	addne	r6, #4
   dc1f4:	2500      	movs	r5, #0
   dc1f6:	1f37      	subs	r7, r6, #4
   dc1f8:	4682      	mov	sl, r0
   dc1fa:	4690      	mov	r8, r2
   dc1fc:	9301      	str	r3, [sp, #4]
   dc1fe:	f846 5c04 	str.w	r5, [r6, #-4]
   dc202:	46b9      	mov	r9, r7
   dc204:	463c      	mov	r4, r7
   dc206:	9502      	str	r5, [sp, #8]
   dc208:	46ab      	mov	fp, r5
   dc20a:	784a      	ldrb	r2, [r1, #1]
   dc20c:	1c4b      	adds	r3, r1, #1
   dc20e:	9303      	str	r3, [sp, #12]
   dc210:	b342      	cbz	r2, dc264 <__hexnan+0x88>
   dc212:	4610      	mov	r0, r2
   dc214:	9105      	str	r1, [sp, #20]
   dc216:	9204      	str	r2, [sp, #16]
   dc218:	f7ff fd70 	bl	dbcfc <__hexdig_fun>
   dc21c:	2800      	cmp	r0, #0
   dc21e:	d14f      	bne.n	dc2c0 <__hexnan+0xe4>
   dc220:	9a04      	ldr	r2, [sp, #16]
   dc222:	9905      	ldr	r1, [sp, #20]
   dc224:	2a20      	cmp	r2, #32
   dc226:	d818      	bhi.n	dc25a <__hexnan+0x7e>
   dc228:	9b02      	ldr	r3, [sp, #8]
   dc22a:	459b      	cmp	fp, r3
   dc22c:	dd13      	ble.n	dc256 <__hexnan+0x7a>
   dc22e:	454c      	cmp	r4, r9
   dc230:	d206      	bcs.n	dc240 <__hexnan+0x64>
   dc232:	2d07      	cmp	r5, #7
   dc234:	dc04      	bgt.n	dc240 <__hexnan+0x64>
   dc236:	462a      	mov	r2, r5
   dc238:	4649      	mov	r1, r9
   dc23a:	4620      	mov	r0, r4
   dc23c:	f7ff ffa8 	bl	dc190 <L_shift>
   dc240:	4544      	cmp	r4, r8
   dc242:	d950      	bls.n	dc2e6 <__hexnan+0x10a>
   dc244:	2300      	movs	r3, #0
   dc246:	f1a4 0904 	sub.w	r9, r4, #4
   dc24a:	f844 3c04 	str.w	r3, [r4, #-4]
   dc24e:	f8cd b008 	str.w	fp, [sp, #8]
   dc252:	464c      	mov	r4, r9
   dc254:	461d      	mov	r5, r3
   dc256:	9903      	ldr	r1, [sp, #12]
   dc258:	e7d7      	b.n	dc20a <__hexnan+0x2e>
   dc25a:	2a29      	cmp	r2, #41	; 0x29
   dc25c:	d156      	bne.n	dc30c <__hexnan+0x130>
   dc25e:	3102      	adds	r1, #2
   dc260:	f8ca 1000 	str.w	r1, [sl]
   dc264:	f1bb 0f00 	cmp.w	fp, #0
   dc268:	d050      	beq.n	dc30c <__hexnan+0x130>
   dc26a:	454c      	cmp	r4, r9
   dc26c:	d206      	bcs.n	dc27c <__hexnan+0xa0>
   dc26e:	2d07      	cmp	r5, #7
   dc270:	dc04      	bgt.n	dc27c <__hexnan+0xa0>
   dc272:	462a      	mov	r2, r5
   dc274:	4649      	mov	r1, r9
   dc276:	4620      	mov	r0, r4
   dc278:	f7ff ff8a 	bl	dc190 <L_shift>
   dc27c:	4544      	cmp	r4, r8
   dc27e:	d934      	bls.n	dc2ea <__hexnan+0x10e>
   dc280:	f1a8 0204 	sub.w	r2, r8, #4
   dc284:	4623      	mov	r3, r4
   dc286:	f853 1b04 	ldr.w	r1, [r3], #4
   dc28a:	f842 1f04 	str.w	r1, [r2, #4]!
   dc28e:	429f      	cmp	r7, r3
   dc290:	d2f9      	bcs.n	dc286 <__hexnan+0xaa>
   dc292:	1b3b      	subs	r3, r7, r4
   dc294:	f023 0303 	bic.w	r3, r3, #3
   dc298:	3304      	adds	r3, #4
   dc29a:	3401      	adds	r4, #1
   dc29c:	3e03      	subs	r6, #3
   dc29e:	42b4      	cmp	r4, r6
   dc2a0:	bf88      	it	hi
   dc2a2:	2304      	movhi	r3, #4
   dc2a4:	4443      	add	r3, r8
   dc2a6:	2200      	movs	r2, #0
   dc2a8:	f843 2b04 	str.w	r2, [r3], #4
   dc2ac:	429f      	cmp	r7, r3
   dc2ae:	d2fb      	bcs.n	dc2a8 <__hexnan+0xcc>
   dc2b0:	683b      	ldr	r3, [r7, #0]
   dc2b2:	b91b      	cbnz	r3, dc2bc <__hexnan+0xe0>
   dc2b4:	4547      	cmp	r7, r8
   dc2b6:	d127      	bne.n	dc308 <__hexnan+0x12c>
   dc2b8:	2301      	movs	r3, #1
   dc2ba:	603b      	str	r3, [r7, #0]
   dc2bc:	2005      	movs	r0, #5
   dc2be:	e026      	b.n	dc30e <__hexnan+0x132>
   dc2c0:	3501      	adds	r5, #1
   dc2c2:	2d08      	cmp	r5, #8
   dc2c4:	f10b 0b01 	add.w	fp, fp, #1
   dc2c8:	dd06      	ble.n	dc2d8 <__hexnan+0xfc>
   dc2ca:	4544      	cmp	r4, r8
   dc2cc:	d9c3      	bls.n	dc256 <__hexnan+0x7a>
   dc2ce:	2300      	movs	r3, #0
   dc2d0:	f844 3c04 	str.w	r3, [r4, #-4]
   dc2d4:	2501      	movs	r5, #1
   dc2d6:	3c04      	subs	r4, #4
   dc2d8:	6822      	ldr	r2, [r4, #0]
   dc2da:	f000 000f 	and.w	r0, r0, #15
   dc2de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dc2e2:	6022      	str	r2, [r4, #0]
   dc2e4:	e7b7      	b.n	dc256 <__hexnan+0x7a>
   dc2e6:	2508      	movs	r5, #8
   dc2e8:	e7b5      	b.n	dc256 <__hexnan+0x7a>
   dc2ea:	9b01      	ldr	r3, [sp, #4]
   dc2ec:	2b00      	cmp	r3, #0
   dc2ee:	d0df      	beq.n	dc2b0 <__hexnan+0xd4>
   dc2f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc2f4:	f1c3 0320 	rsb	r3, r3, #32
   dc2f8:	fa22 f303 	lsr.w	r3, r2, r3
   dc2fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dc300:	401a      	ands	r2, r3
   dc302:	f846 2c04 	str.w	r2, [r6, #-4]
   dc306:	e7d3      	b.n	dc2b0 <__hexnan+0xd4>
   dc308:	3f04      	subs	r7, #4
   dc30a:	e7d1      	b.n	dc2b0 <__hexnan+0xd4>
   dc30c:	2004      	movs	r0, #4
   dc30e:	b007      	add	sp, #28
   dc310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc314 <__retarget_lock_acquire_recursive>:
   dc314:	4770      	bx	lr

000dc316 <__retarget_lock_release>:
   dc316:	4770      	bx	lr

000dc318 <__retarget_lock_release_recursive>:
   dc318:	4770      	bx	lr

000dc31a <__ascii_mbtowc>:
   dc31a:	b082      	sub	sp, #8
   dc31c:	b901      	cbnz	r1, dc320 <__ascii_mbtowc+0x6>
   dc31e:	a901      	add	r1, sp, #4
   dc320:	b142      	cbz	r2, dc334 <__ascii_mbtowc+0x1a>
   dc322:	b14b      	cbz	r3, dc338 <__ascii_mbtowc+0x1e>
   dc324:	7813      	ldrb	r3, [r2, #0]
   dc326:	600b      	str	r3, [r1, #0]
   dc328:	7812      	ldrb	r2, [r2, #0]
   dc32a:	1e10      	subs	r0, r2, #0
   dc32c:	bf18      	it	ne
   dc32e:	2001      	movne	r0, #1
   dc330:	b002      	add	sp, #8
   dc332:	4770      	bx	lr
   dc334:	4610      	mov	r0, r2
   dc336:	e7fb      	b.n	dc330 <__ascii_mbtowc+0x16>
   dc338:	f06f 0001 	mvn.w	r0, #1
   dc33c:	e7f8      	b.n	dc330 <__ascii_mbtowc+0x16>

000dc33e <_Balloc>:
   dc33e:	b570      	push	{r4, r5, r6, lr}
   dc340:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc342:	4604      	mov	r4, r0
   dc344:	460d      	mov	r5, r1
   dc346:	b93e      	cbnz	r6, dc358 <_Balloc+0x1a>
   dc348:	2010      	movs	r0, #16
   dc34a:	f7fb fe8b 	bl	d8064 <malloc>
   dc34e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc352:	6260      	str	r0, [r4, #36]	; 0x24
   dc354:	6006      	str	r6, [r0, #0]
   dc356:	60c6      	str	r6, [r0, #12]
   dc358:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dc35a:	68f3      	ldr	r3, [r6, #12]
   dc35c:	b183      	cbz	r3, dc380 <_Balloc+0x42>
   dc35e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc360:	68db      	ldr	r3, [r3, #12]
   dc362:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dc366:	b9b8      	cbnz	r0, dc398 <_Balloc+0x5a>
   dc368:	2101      	movs	r1, #1
   dc36a:	fa01 f605 	lsl.w	r6, r1, r5
   dc36e:	1d72      	adds	r2, r6, #5
   dc370:	0092      	lsls	r2, r2, #2
   dc372:	4620      	mov	r0, r4
   dc374:	f000 fc23 	bl	dcbbe <_calloc_r>
   dc378:	b160      	cbz	r0, dc394 <_Balloc+0x56>
   dc37a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dc37e:	e00e      	b.n	dc39e <_Balloc+0x60>
   dc380:	2221      	movs	r2, #33	; 0x21
   dc382:	2104      	movs	r1, #4
   dc384:	4620      	mov	r0, r4
   dc386:	f000 fc1a 	bl	dcbbe <_calloc_r>
   dc38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc38c:	60f0      	str	r0, [r6, #12]
   dc38e:	68db      	ldr	r3, [r3, #12]
   dc390:	2b00      	cmp	r3, #0
   dc392:	d1e4      	bne.n	dc35e <_Balloc+0x20>
   dc394:	2000      	movs	r0, #0
   dc396:	bd70      	pop	{r4, r5, r6, pc}
   dc398:	6802      	ldr	r2, [r0, #0]
   dc39a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dc39e:	2300      	movs	r3, #0
   dc3a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dc3a4:	e7f7      	b.n	dc396 <_Balloc+0x58>

000dc3a6 <_Bfree>:
   dc3a6:	b570      	push	{r4, r5, r6, lr}
   dc3a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dc3aa:	4605      	mov	r5, r0
   dc3ac:	460c      	mov	r4, r1
   dc3ae:	b93e      	cbnz	r6, dc3c0 <_Bfree+0x1a>
   dc3b0:	2010      	movs	r0, #16
   dc3b2:	f7fb fe57 	bl	d8064 <malloc>
   dc3b6:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dc3ba:	6268      	str	r0, [r5, #36]	; 0x24
   dc3bc:	6006      	str	r6, [r0, #0]
   dc3be:	60c6      	str	r6, [r0, #12]
   dc3c0:	b13c      	cbz	r4, dc3d2 <_Bfree+0x2c>
   dc3c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dc3c4:	6862      	ldr	r2, [r4, #4]
   dc3c6:	68db      	ldr	r3, [r3, #12]
   dc3c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dc3cc:	6021      	str	r1, [r4, #0]
   dc3ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dc3d2:	bd70      	pop	{r4, r5, r6, pc}

000dc3d4 <__multadd>:
   dc3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc3d8:	690e      	ldr	r6, [r1, #16]
   dc3da:	4607      	mov	r7, r0
   dc3dc:	4698      	mov	r8, r3
   dc3de:	460c      	mov	r4, r1
   dc3e0:	f101 0014 	add.w	r0, r1, #20
   dc3e4:	2300      	movs	r3, #0
   dc3e6:	6805      	ldr	r5, [r0, #0]
   dc3e8:	b2a9      	uxth	r1, r5
   dc3ea:	fb02 8101 	mla	r1, r2, r1, r8
   dc3ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dc3f2:	0c2d      	lsrs	r5, r5, #16
   dc3f4:	fb02 c505 	mla	r5, r2, r5, ip
   dc3f8:	b289      	uxth	r1, r1
   dc3fa:	3301      	adds	r3, #1
   dc3fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dc400:	429e      	cmp	r6, r3
   dc402:	f840 1b04 	str.w	r1, [r0], #4
   dc406:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dc40a:	dcec      	bgt.n	dc3e6 <__multadd+0x12>
   dc40c:	f1b8 0f00 	cmp.w	r8, #0
   dc410:	d01b      	beq.n	dc44a <__multadd+0x76>
   dc412:	68a3      	ldr	r3, [r4, #8]
   dc414:	42b3      	cmp	r3, r6
   dc416:	dc12      	bgt.n	dc43e <__multadd+0x6a>
   dc418:	6861      	ldr	r1, [r4, #4]
   dc41a:	4638      	mov	r0, r7
   dc41c:	3101      	adds	r1, #1
   dc41e:	f7ff ff8e 	bl	dc33e <_Balloc>
   dc422:	6922      	ldr	r2, [r4, #16]
   dc424:	3202      	adds	r2, #2
   dc426:	f104 010c 	add.w	r1, r4, #12
   dc42a:	4605      	mov	r5, r0
   dc42c:	0092      	lsls	r2, r2, #2
   dc42e:	300c      	adds	r0, #12
   dc430:	f7fe fc4b 	bl	dacca <memcpy>
   dc434:	4621      	mov	r1, r4
   dc436:	4638      	mov	r0, r7
   dc438:	f7ff ffb5 	bl	dc3a6 <_Bfree>
   dc43c:	462c      	mov	r4, r5
   dc43e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dc442:	3601      	adds	r6, #1
   dc444:	f8c3 8014 	str.w	r8, [r3, #20]
   dc448:	6126      	str	r6, [r4, #16]
   dc44a:	4620      	mov	r0, r4
   dc44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dc450 <__s2b>:
   dc450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc454:	460c      	mov	r4, r1
   dc456:	4615      	mov	r5, r2
   dc458:	461f      	mov	r7, r3
   dc45a:	2209      	movs	r2, #9
   dc45c:	3308      	adds	r3, #8
   dc45e:	4606      	mov	r6, r0
   dc460:	fb93 f3f2 	sdiv	r3, r3, r2
   dc464:	2100      	movs	r1, #0
   dc466:	2201      	movs	r2, #1
   dc468:	429a      	cmp	r2, r3
   dc46a:	db20      	blt.n	dc4ae <__s2b+0x5e>
   dc46c:	4630      	mov	r0, r6
   dc46e:	f7ff ff66 	bl	dc33e <_Balloc>
   dc472:	9b08      	ldr	r3, [sp, #32]
   dc474:	6143      	str	r3, [r0, #20]
   dc476:	2d09      	cmp	r5, #9
   dc478:	f04f 0301 	mov.w	r3, #1
   dc47c:	6103      	str	r3, [r0, #16]
   dc47e:	dd19      	ble.n	dc4b4 <__s2b+0x64>
   dc480:	f104 0909 	add.w	r9, r4, #9
   dc484:	46c8      	mov	r8, r9
   dc486:	442c      	add	r4, r5
   dc488:	f818 3b01 	ldrb.w	r3, [r8], #1
   dc48c:	4601      	mov	r1, r0
   dc48e:	3b30      	subs	r3, #48	; 0x30
   dc490:	220a      	movs	r2, #10
   dc492:	4630      	mov	r0, r6
   dc494:	f7ff ff9e 	bl	dc3d4 <__multadd>
   dc498:	45a0      	cmp	r8, r4
   dc49a:	d1f5      	bne.n	dc488 <__s2b+0x38>
   dc49c:	f1a5 0408 	sub.w	r4, r5, #8
   dc4a0:	444c      	add	r4, r9
   dc4a2:	1b2d      	subs	r5, r5, r4
   dc4a4:	1963      	adds	r3, r4, r5
   dc4a6:	42bb      	cmp	r3, r7
   dc4a8:	db07      	blt.n	dc4ba <__s2b+0x6a>
   dc4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc4ae:	0052      	lsls	r2, r2, #1
   dc4b0:	3101      	adds	r1, #1
   dc4b2:	e7d9      	b.n	dc468 <__s2b+0x18>
   dc4b4:	340a      	adds	r4, #10
   dc4b6:	2509      	movs	r5, #9
   dc4b8:	e7f3      	b.n	dc4a2 <__s2b+0x52>
   dc4ba:	f814 3b01 	ldrb.w	r3, [r4], #1
   dc4be:	4601      	mov	r1, r0
   dc4c0:	3b30      	subs	r3, #48	; 0x30
   dc4c2:	220a      	movs	r2, #10
   dc4c4:	4630      	mov	r0, r6
   dc4c6:	f7ff ff85 	bl	dc3d4 <__multadd>
   dc4ca:	e7eb      	b.n	dc4a4 <__s2b+0x54>

000dc4cc <__hi0bits>:
   dc4cc:	0c03      	lsrs	r3, r0, #16
   dc4ce:	041b      	lsls	r3, r3, #16
   dc4d0:	b9d3      	cbnz	r3, dc508 <__hi0bits+0x3c>
   dc4d2:	0400      	lsls	r0, r0, #16
   dc4d4:	2310      	movs	r3, #16
   dc4d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dc4da:	bf04      	itt	eq
   dc4dc:	0200      	lsleq	r0, r0, #8
   dc4de:	3308      	addeq	r3, #8
   dc4e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dc4e4:	bf04      	itt	eq
   dc4e6:	0100      	lsleq	r0, r0, #4
   dc4e8:	3304      	addeq	r3, #4
   dc4ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dc4ee:	bf04      	itt	eq
   dc4f0:	0080      	lsleq	r0, r0, #2
   dc4f2:	3302      	addeq	r3, #2
   dc4f4:	2800      	cmp	r0, #0
   dc4f6:	db05      	blt.n	dc504 <__hi0bits+0x38>
   dc4f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dc4fc:	f103 0301 	add.w	r3, r3, #1
   dc500:	bf08      	it	eq
   dc502:	2320      	moveq	r3, #32
   dc504:	4618      	mov	r0, r3
   dc506:	4770      	bx	lr
   dc508:	2300      	movs	r3, #0
   dc50a:	e7e4      	b.n	dc4d6 <__hi0bits+0xa>

000dc50c <__lo0bits>:
   dc50c:	6803      	ldr	r3, [r0, #0]
   dc50e:	f013 0207 	ands.w	r2, r3, #7
   dc512:	4601      	mov	r1, r0
   dc514:	d00b      	beq.n	dc52e <__lo0bits+0x22>
   dc516:	07da      	lsls	r2, r3, #31
   dc518:	d424      	bmi.n	dc564 <__lo0bits+0x58>
   dc51a:	0798      	lsls	r0, r3, #30
   dc51c:	bf49      	itett	mi
   dc51e:	085b      	lsrmi	r3, r3, #1
   dc520:	089b      	lsrpl	r3, r3, #2
   dc522:	2001      	movmi	r0, #1
   dc524:	600b      	strmi	r3, [r1, #0]
   dc526:	bf5c      	itt	pl
   dc528:	600b      	strpl	r3, [r1, #0]
   dc52a:	2002      	movpl	r0, #2
   dc52c:	4770      	bx	lr
   dc52e:	b298      	uxth	r0, r3
   dc530:	b9b0      	cbnz	r0, dc560 <__lo0bits+0x54>
   dc532:	0c1b      	lsrs	r3, r3, #16
   dc534:	2010      	movs	r0, #16
   dc536:	f013 0fff 	tst.w	r3, #255	; 0xff
   dc53a:	bf04      	itt	eq
   dc53c:	0a1b      	lsreq	r3, r3, #8
   dc53e:	3008      	addeq	r0, #8
   dc540:	071a      	lsls	r2, r3, #28
   dc542:	bf04      	itt	eq
   dc544:	091b      	lsreq	r3, r3, #4
   dc546:	3004      	addeq	r0, #4
   dc548:	079a      	lsls	r2, r3, #30
   dc54a:	bf04      	itt	eq
   dc54c:	089b      	lsreq	r3, r3, #2
   dc54e:	3002      	addeq	r0, #2
   dc550:	07da      	lsls	r2, r3, #31
   dc552:	d403      	bmi.n	dc55c <__lo0bits+0x50>
   dc554:	085b      	lsrs	r3, r3, #1
   dc556:	f100 0001 	add.w	r0, r0, #1
   dc55a:	d005      	beq.n	dc568 <__lo0bits+0x5c>
   dc55c:	600b      	str	r3, [r1, #0]
   dc55e:	4770      	bx	lr
   dc560:	4610      	mov	r0, r2
   dc562:	e7e8      	b.n	dc536 <__lo0bits+0x2a>
   dc564:	2000      	movs	r0, #0
   dc566:	4770      	bx	lr
   dc568:	2020      	movs	r0, #32
   dc56a:	4770      	bx	lr

000dc56c <__i2b>:
   dc56c:	b510      	push	{r4, lr}
   dc56e:	460c      	mov	r4, r1
   dc570:	2101      	movs	r1, #1
   dc572:	f7ff fee4 	bl	dc33e <_Balloc>
   dc576:	2201      	movs	r2, #1
   dc578:	6144      	str	r4, [r0, #20]
   dc57a:	6102      	str	r2, [r0, #16]
   dc57c:	bd10      	pop	{r4, pc}

000dc57e <__multiply>:
   dc57e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc582:	4615      	mov	r5, r2
   dc584:	690a      	ldr	r2, [r1, #16]
   dc586:	692b      	ldr	r3, [r5, #16]
   dc588:	429a      	cmp	r2, r3
   dc58a:	bfb8      	it	lt
   dc58c:	460b      	movlt	r3, r1
   dc58e:	460c      	mov	r4, r1
   dc590:	bfbc      	itt	lt
   dc592:	462c      	movlt	r4, r5
   dc594:	461d      	movlt	r5, r3
   dc596:	6927      	ldr	r7, [r4, #16]
   dc598:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dc59c:	68a3      	ldr	r3, [r4, #8]
   dc59e:	6861      	ldr	r1, [r4, #4]
   dc5a0:	eb07 0609 	add.w	r6, r7, r9
   dc5a4:	42b3      	cmp	r3, r6
   dc5a6:	bfb8      	it	lt
   dc5a8:	3101      	addlt	r1, #1
   dc5aa:	b085      	sub	sp, #20
   dc5ac:	f7ff fec7 	bl	dc33e <_Balloc>
   dc5b0:	f100 0114 	add.w	r1, r0, #20
   dc5b4:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dc5b8:	460b      	mov	r3, r1
   dc5ba:	2200      	movs	r2, #0
   dc5bc:	4543      	cmp	r3, r8
   dc5be:	d31d      	bcc.n	dc5fc <__multiply+0x7e>
   dc5c0:	f104 0314 	add.w	r3, r4, #20
   dc5c4:	f105 0214 	add.w	r2, r5, #20
   dc5c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dc5cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dc5d0:	9302      	str	r3, [sp, #8]
   dc5d2:	1b3b      	subs	r3, r7, r4
   dc5d4:	3b15      	subs	r3, #21
   dc5d6:	f023 0303 	bic.w	r3, r3, #3
   dc5da:	3304      	adds	r3, #4
   dc5dc:	f104 0515 	add.w	r5, r4, #21
   dc5e0:	42af      	cmp	r7, r5
   dc5e2:	bf38      	it	cc
   dc5e4:	2304      	movcc	r3, #4
   dc5e6:	9301      	str	r3, [sp, #4]
   dc5e8:	9b02      	ldr	r3, [sp, #8]
   dc5ea:	9203      	str	r2, [sp, #12]
   dc5ec:	4293      	cmp	r3, r2
   dc5ee:	d808      	bhi.n	dc602 <__multiply+0x84>
   dc5f0:	2e00      	cmp	r6, #0
   dc5f2:	dc5a      	bgt.n	dc6aa <__multiply+0x12c>
   dc5f4:	6106      	str	r6, [r0, #16]
   dc5f6:	b005      	add	sp, #20
   dc5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc5fc:	f843 2b04 	str.w	r2, [r3], #4
   dc600:	e7dc      	b.n	dc5bc <__multiply+0x3e>
   dc602:	f8b2 a000 	ldrh.w	sl, [r2]
   dc606:	f1ba 0f00 	cmp.w	sl, #0
   dc60a:	d024      	beq.n	dc656 <__multiply+0xd8>
   dc60c:	f104 0e14 	add.w	lr, r4, #20
   dc610:	4689      	mov	r9, r1
   dc612:	f04f 0c00 	mov.w	ip, #0
   dc616:	f85e 5b04 	ldr.w	r5, [lr], #4
   dc61a:	f8d9 b000 	ldr.w	fp, [r9]
   dc61e:	b2ab      	uxth	r3, r5
   dc620:	fa1f fb8b 	uxth.w	fp, fp
   dc624:	fb0a b303 	mla	r3, sl, r3, fp
   dc628:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc62c:	f8d9 5000 	ldr.w	r5, [r9]
   dc630:	4463      	add	r3, ip
   dc632:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc636:	fb0a c50b 	mla	r5, sl, fp, ip
   dc63a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc63e:	b29b      	uxth	r3, r3
   dc640:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc644:	4577      	cmp	r7, lr
   dc646:	f849 3b04 	str.w	r3, [r9], #4
   dc64a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc64e:	d8e2      	bhi.n	dc616 <__multiply+0x98>
   dc650:	9b01      	ldr	r3, [sp, #4]
   dc652:	f841 c003 	str.w	ip, [r1, r3]
   dc656:	9b03      	ldr	r3, [sp, #12]
   dc658:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc65c:	3204      	adds	r2, #4
   dc65e:	f1b9 0f00 	cmp.w	r9, #0
   dc662:	d020      	beq.n	dc6a6 <__multiply+0x128>
   dc664:	680b      	ldr	r3, [r1, #0]
   dc666:	f104 0c14 	add.w	ip, r4, #20
   dc66a:	468e      	mov	lr, r1
   dc66c:	f04f 0a00 	mov.w	sl, #0
   dc670:	f8bc 5000 	ldrh.w	r5, [ip]
   dc674:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc678:	fb09 b505 	mla	r5, r9, r5, fp
   dc67c:	44aa      	add	sl, r5
   dc67e:	b29b      	uxth	r3, r3
   dc680:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc684:	f84e 3b04 	str.w	r3, [lr], #4
   dc688:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc68c:	f8be 5000 	ldrh.w	r5, [lr]
   dc690:	0c1b      	lsrs	r3, r3, #16
   dc692:	fb09 5303 	mla	r3, r9, r3, r5
   dc696:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc69a:	4567      	cmp	r7, ip
   dc69c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc6a0:	d8e6      	bhi.n	dc670 <__multiply+0xf2>
   dc6a2:	9d01      	ldr	r5, [sp, #4]
   dc6a4:	514b      	str	r3, [r1, r5]
   dc6a6:	3104      	adds	r1, #4
   dc6a8:	e79e      	b.n	dc5e8 <__multiply+0x6a>
   dc6aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc6ae:	2b00      	cmp	r3, #0
   dc6b0:	d1a0      	bne.n	dc5f4 <__multiply+0x76>
   dc6b2:	3e01      	subs	r6, #1
   dc6b4:	e79c      	b.n	dc5f0 <__multiply+0x72>
	...

000dc6b8 <__pow5mult>:
   dc6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc6bc:	4615      	mov	r5, r2
   dc6be:	f012 0203 	ands.w	r2, r2, #3
   dc6c2:	4606      	mov	r6, r0
   dc6c4:	460f      	mov	r7, r1
   dc6c6:	d007      	beq.n	dc6d8 <__pow5mult+0x20>
   dc6c8:	4c21      	ldr	r4, [pc, #132]	; (dc750 <__pow5mult+0x98>)
   dc6ca:	3a01      	subs	r2, #1
   dc6cc:	2300      	movs	r3, #0
   dc6ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc6d2:	f7ff fe7f 	bl	dc3d4 <__multadd>
   dc6d6:	4607      	mov	r7, r0
   dc6d8:	10ad      	asrs	r5, r5, #2
   dc6da:	d035      	beq.n	dc748 <__pow5mult+0x90>
   dc6dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc6de:	b93c      	cbnz	r4, dc6f0 <__pow5mult+0x38>
   dc6e0:	2010      	movs	r0, #16
   dc6e2:	f7fb fcbf 	bl	d8064 <malloc>
   dc6e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dc6ea:	6270      	str	r0, [r6, #36]	; 0x24
   dc6ec:	6004      	str	r4, [r0, #0]
   dc6ee:	60c4      	str	r4, [r0, #12]
   dc6f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc6f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc6f8:	b94c      	cbnz	r4, dc70e <__pow5mult+0x56>
   dc6fa:	f240 2171 	movw	r1, #625	; 0x271
   dc6fe:	4630      	mov	r0, r6
   dc700:	f7ff ff34 	bl	dc56c <__i2b>
   dc704:	2300      	movs	r3, #0
   dc706:	f8c8 0008 	str.w	r0, [r8, #8]
   dc70a:	4604      	mov	r4, r0
   dc70c:	6003      	str	r3, [r0, #0]
   dc70e:	f04f 0900 	mov.w	r9, #0
   dc712:	07eb      	lsls	r3, r5, #31
   dc714:	d50a      	bpl.n	dc72c <__pow5mult+0x74>
   dc716:	4639      	mov	r1, r7
   dc718:	4622      	mov	r2, r4
   dc71a:	4630      	mov	r0, r6
   dc71c:	f7ff ff2f 	bl	dc57e <__multiply>
   dc720:	4639      	mov	r1, r7
   dc722:	4680      	mov	r8, r0
   dc724:	4630      	mov	r0, r6
   dc726:	f7ff fe3e 	bl	dc3a6 <_Bfree>
   dc72a:	4647      	mov	r7, r8
   dc72c:	106d      	asrs	r5, r5, #1
   dc72e:	d00b      	beq.n	dc748 <__pow5mult+0x90>
   dc730:	6820      	ldr	r0, [r4, #0]
   dc732:	b938      	cbnz	r0, dc744 <__pow5mult+0x8c>
   dc734:	4622      	mov	r2, r4
   dc736:	4621      	mov	r1, r4
   dc738:	4630      	mov	r0, r6
   dc73a:	f7ff ff20 	bl	dc57e <__multiply>
   dc73e:	6020      	str	r0, [r4, #0]
   dc740:	f8c0 9000 	str.w	r9, [r0]
   dc744:	4604      	mov	r4, r0
   dc746:	e7e4      	b.n	dc712 <__pow5mult+0x5a>
   dc748:	4638      	mov	r0, r7
   dc74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc74e:	bf00      	nop
   dc750:	000ddf90 	.word	0x000ddf90

000dc754 <__lshift>:
   dc754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc758:	460c      	mov	r4, r1
   dc75a:	6849      	ldr	r1, [r1, #4]
   dc75c:	6923      	ldr	r3, [r4, #16]
   dc75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dc762:	68a3      	ldr	r3, [r4, #8]
   dc764:	4607      	mov	r7, r0
   dc766:	4691      	mov	r9, r2
   dc768:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc76c:	f108 0601 	add.w	r6, r8, #1
   dc770:	42b3      	cmp	r3, r6
   dc772:	db3f      	blt.n	dc7f4 <__lshift+0xa0>
   dc774:	4638      	mov	r0, r7
   dc776:	f7ff fde2 	bl	dc33e <_Balloc>
   dc77a:	2300      	movs	r3, #0
   dc77c:	4605      	mov	r5, r0
   dc77e:	f100 0114 	add.w	r1, r0, #20
   dc782:	f100 0210 	add.w	r2, r0, #16
   dc786:	4618      	mov	r0, r3
   dc788:	4553      	cmp	r3, sl
   dc78a:	db36      	blt.n	dc7fa <__lshift+0xa6>
   dc78c:	6920      	ldr	r0, [r4, #16]
   dc78e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dc792:	f104 0314 	add.w	r3, r4, #20
   dc796:	f019 091f 	ands.w	r9, r9, #31
   dc79a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dc79e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dc7a2:	d02e      	beq.n	dc802 <__lshift+0xae>
   dc7a4:	f1c9 0e20 	rsb	lr, r9, #32
   dc7a8:	468a      	mov	sl, r1
   dc7aa:	2200      	movs	r2, #0
   dc7ac:	6818      	ldr	r0, [r3, #0]
   dc7ae:	fa00 f009 	lsl.w	r0, r0, r9
   dc7b2:	4302      	orrs	r2, r0
   dc7b4:	f84a 2b04 	str.w	r2, [sl], #4
   dc7b8:	f853 2b04 	ldr.w	r2, [r3], #4
   dc7bc:	459c      	cmp	ip, r3
   dc7be:	fa22 f20e 	lsr.w	r2, r2, lr
   dc7c2:	d8f3      	bhi.n	dc7ac <__lshift+0x58>
   dc7c4:	ebac 0304 	sub.w	r3, ip, r4
   dc7c8:	3b15      	subs	r3, #21
   dc7ca:	f023 0303 	bic.w	r3, r3, #3
   dc7ce:	3304      	adds	r3, #4
   dc7d0:	f104 0015 	add.w	r0, r4, #21
   dc7d4:	4560      	cmp	r0, ip
   dc7d6:	bf88      	it	hi
   dc7d8:	2304      	movhi	r3, #4
   dc7da:	50ca      	str	r2, [r1, r3]
   dc7dc:	b10a      	cbz	r2, dc7e2 <__lshift+0x8e>
   dc7de:	f108 0602 	add.w	r6, r8, #2
   dc7e2:	3e01      	subs	r6, #1
   dc7e4:	4638      	mov	r0, r7
   dc7e6:	612e      	str	r6, [r5, #16]
   dc7e8:	4621      	mov	r1, r4
   dc7ea:	f7ff fddc 	bl	dc3a6 <_Bfree>
   dc7ee:	4628      	mov	r0, r5
   dc7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc7f4:	3101      	adds	r1, #1
   dc7f6:	005b      	lsls	r3, r3, #1
   dc7f8:	e7ba      	b.n	dc770 <__lshift+0x1c>
   dc7fa:	f842 0f04 	str.w	r0, [r2, #4]!
   dc7fe:	3301      	adds	r3, #1
   dc800:	e7c2      	b.n	dc788 <__lshift+0x34>
   dc802:	3904      	subs	r1, #4
   dc804:	f853 2b04 	ldr.w	r2, [r3], #4
   dc808:	f841 2f04 	str.w	r2, [r1, #4]!
   dc80c:	459c      	cmp	ip, r3
   dc80e:	d8f9      	bhi.n	dc804 <__lshift+0xb0>
   dc810:	e7e7      	b.n	dc7e2 <__lshift+0x8e>

000dc812 <__mcmp>:
   dc812:	b530      	push	{r4, r5, lr}
   dc814:	6902      	ldr	r2, [r0, #16]
   dc816:	690c      	ldr	r4, [r1, #16]
   dc818:	1b12      	subs	r2, r2, r4
   dc81a:	d10e      	bne.n	dc83a <__mcmp+0x28>
   dc81c:	f100 0314 	add.w	r3, r0, #20
   dc820:	3114      	adds	r1, #20
   dc822:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dc826:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dc82a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dc82e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dc832:	42a5      	cmp	r5, r4
   dc834:	d003      	beq.n	dc83e <__mcmp+0x2c>
   dc836:	d305      	bcc.n	dc844 <__mcmp+0x32>
   dc838:	2201      	movs	r2, #1
   dc83a:	4610      	mov	r0, r2
   dc83c:	bd30      	pop	{r4, r5, pc}
   dc83e:	4283      	cmp	r3, r0
   dc840:	d3f3      	bcc.n	dc82a <__mcmp+0x18>
   dc842:	e7fa      	b.n	dc83a <__mcmp+0x28>
   dc844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc848:	e7f7      	b.n	dc83a <__mcmp+0x28>

000dc84a <__mdiff>:
   dc84a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc84e:	460c      	mov	r4, r1
   dc850:	4606      	mov	r6, r0
   dc852:	4611      	mov	r1, r2
   dc854:	4620      	mov	r0, r4
   dc856:	4617      	mov	r7, r2
   dc858:	f7ff ffdb 	bl	dc812 <__mcmp>
   dc85c:	1e05      	subs	r5, r0, #0
   dc85e:	d108      	bne.n	dc872 <__mdiff+0x28>
   dc860:	4629      	mov	r1, r5
   dc862:	4630      	mov	r0, r6
   dc864:	f7ff fd6b 	bl	dc33e <_Balloc>
   dc868:	2301      	movs	r3, #1
   dc86a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dc86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc872:	bfa4      	itt	ge
   dc874:	463b      	movge	r3, r7
   dc876:	4627      	movge	r7, r4
   dc878:	4630      	mov	r0, r6
   dc87a:	6879      	ldr	r1, [r7, #4]
   dc87c:	bfa6      	itte	ge
   dc87e:	461c      	movge	r4, r3
   dc880:	2500      	movge	r5, #0
   dc882:	2501      	movlt	r5, #1
   dc884:	f7ff fd5b 	bl	dc33e <_Balloc>
   dc888:	693e      	ldr	r6, [r7, #16]
   dc88a:	60c5      	str	r5, [r0, #12]
   dc88c:	6925      	ldr	r5, [r4, #16]
   dc88e:	f107 0114 	add.w	r1, r7, #20
   dc892:	f104 0914 	add.w	r9, r4, #20
   dc896:	f100 0e14 	add.w	lr, r0, #20
   dc89a:	f107 0210 	add.w	r2, r7, #16
   dc89e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dc8a2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dc8a6:	46f2      	mov	sl, lr
   dc8a8:	2700      	movs	r7, #0
   dc8aa:	f859 3b04 	ldr.w	r3, [r9], #4
   dc8ae:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dc8b2:	fa1f f883 	uxth.w	r8, r3
   dc8b6:	fa17 f78b 	uxtah	r7, r7, fp
   dc8ba:	0c1b      	lsrs	r3, r3, #16
   dc8bc:	eba7 0808 	sub.w	r8, r7, r8
   dc8c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dc8c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dc8c8:	fa1f f888 	uxth.w	r8, r8
   dc8cc:	141f      	asrs	r7, r3, #16
   dc8ce:	454d      	cmp	r5, r9
   dc8d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dc8d4:	f84a 3b04 	str.w	r3, [sl], #4
   dc8d8:	d8e7      	bhi.n	dc8aa <__mdiff+0x60>
   dc8da:	1b2b      	subs	r3, r5, r4
   dc8dc:	3b15      	subs	r3, #21
   dc8de:	f023 0303 	bic.w	r3, r3, #3
   dc8e2:	3304      	adds	r3, #4
   dc8e4:	3415      	adds	r4, #21
   dc8e6:	42a5      	cmp	r5, r4
   dc8e8:	bf38      	it	cc
   dc8ea:	2304      	movcc	r3, #4
   dc8ec:	4419      	add	r1, r3
   dc8ee:	4473      	add	r3, lr
   dc8f0:	469e      	mov	lr, r3
   dc8f2:	460d      	mov	r5, r1
   dc8f4:	4565      	cmp	r5, ip
   dc8f6:	d30e      	bcc.n	dc916 <__mdiff+0xcc>
   dc8f8:	f10c 0203 	add.w	r2, ip, #3
   dc8fc:	1a52      	subs	r2, r2, r1
   dc8fe:	f022 0203 	bic.w	r2, r2, #3
   dc902:	3903      	subs	r1, #3
   dc904:	458c      	cmp	ip, r1
   dc906:	bf38      	it	cc
   dc908:	2200      	movcc	r2, #0
   dc90a:	441a      	add	r2, r3
   dc90c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dc910:	b17b      	cbz	r3, dc932 <__mdiff+0xe8>
   dc912:	6106      	str	r6, [r0, #16]
   dc914:	e7ab      	b.n	dc86e <__mdiff+0x24>
   dc916:	f855 8b04 	ldr.w	r8, [r5], #4
   dc91a:	fa17 f488 	uxtah	r4, r7, r8
   dc91e:	1422      	asrs	r2, r4, #16
   dc920:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dc924:	b2a4      	uxth	r4, r4
   dc926:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dc92a:	f84e 4b04 	str.w	r4, [lr], #4
   dc92e:	1417      	asrs	r7, r2, #16
   dc930:	e7e0      	b.n	dc8f4 <__mdiff+0xaa>
   dc932:	3e01      	subs	r6, #1
   dc934:	e7ea      	b.n	dc90c <__mdiff+0xc2>
	...

000dc938 <__ulp>:
   dc938:	b082      	sub	sp, #8
   dc93a:	ed8d 0b00 	vstr	d0, [sp]
   dc93e:	9b01      	ldr	r3, [sp, #4]
   dc940:	4912      	ldr	r1, [pc, #72]	; (dc98c <__ulp+0x54>)
   dc942:	4019      	ands	r1, r3
   dc944:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dc948:	2900      	cmp	r1, #0
   dc94a:	dd05      	ble.n	dc958 <__ulp+0x20>
   dc94c:	2200      	movs	r2, #0
   dc94e:	460b      	mov	r3, r1
   dc950:	ec43 2b10 	vmov	d0, r2, r3
   dc954:	b002      	add	sp, #8
   dc956:	4770      	bx	lr
   dc958:	4249      	negs	r1, r1
   dc95a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dc95e:	ea4f 5021 	mov.w	r0, r1, asr #20
   dc962:	f04f 0200 	mov.w	r2, #0
   dc966:	f04f 0300 	mov.w	r3, #0
   dc96a:	da04      	bge.n	dc976 <__ulp+0x3e>
   dc96c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dc970:	fa41 f300 	asr.w	r3, r1, r0
   dc974:	e7ec      	b.n	dc950 <__ulp+0x18>
   dc976:	f1a0 0114 	sub.w	r1, r0, #20
   dc97a:	291e      	cmp	r1, #30
   dc97c:	bfda      	itte	le
   dc97e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dc982:	fa20 f101 	lsrle.w	r1, r0, r1
   dc986:	2101      	movgt	r1, #1
   dc988:	460a      	mov	r2, r1
   dc98a:	e7e1      	b.n	dc950 <__ulp+0x18>
   dc98c:	7ff00000 	.word	0x7ff00000

000dc990 <__b2d>:
   dc990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc992:	6905      	ldr	r5, [r0, #16]
   dc994:	f100 0714 	add.w	r7, r0, #20
   dc998:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dc99c:	1f2e      	subs	r6, r5, #4
   dc99e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dc9a2:	4620      	mov	r0, r4
   dc9a4:	f7ff fd92 	bl	dc4cc <__hi0bits>
   dc9a8:	f1c0 0320 	rsb	r3, r0, #32
   dc9ac:	280a      	cmp	r0, #10
   dc9ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; dca2c <__b2d+0x9c>
   dc9b2:	600b      	str	r3, [r1, #0]
   dc9b4:	dc14      	bgt.n	dc9e0 <__b2d+0x50>
   dc9b6:	f1c0 0e0b 	rsb	lr, r0, #11
   dc9ba:	fa24 f10e 	lsr.w	r1, r4, lr
   dc9be:	42b7      	cmp	r7, r6
   dc9c0:	ea41 030c 	orr.w	r3, r1, ip
   dc9c4:	bf34      	ite	cc
   dc9c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc9ca:	2100      	movcs	r1, #0
   dc9cc:	3015      	adds	r0, #21
   dc9ce:	fa04 f000 	lsl.w	r0, r4, r0
   dc9d2:	fa21 f10e 	lsr.w	r1, r1, lr
   dc9d6:	ea40 0201 	orr.w	r2, r0, r1
   dc9da:	ec43 2b10 	vmov	d0, r2, r3
   dc9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc9e0:	42b7      	cmp	r7, r6
   dc9e2:	bf3a      	itte	cc
   dc9e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc9e8:	f1a5 0608 	subcc.w	r6, r5, #8
   dc9ec:	2100      	movcs	r1, #0
   dc9ee:	380b      	subs	r0, #11
   dc9f0:	d017      	beq.n	dca22 <__b2d+0x92>
   dc9f2:	f1c0 0c20 	rsb	ip, r0, #32
   dc9f6:	fa04 f500 	lsl.w	r5, r4, r0
   dc9fa:	42be      	cmp	r6, r7
   dc9fc:	fa21 f40c 	lsr.w	r4, r1, ip
   dca00:	ea45 0504 	orr.w	r5, r5, r4
   dca04:	bf8c      	ite	hi
   dca06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dca0a:	2400      	movls	r4, #0
   dca0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dca10:	fa01 f000 	lsl.w	r0, r1, r0
   dca14:	fa24 f40c 	lsr.w	r4, r4, ip
   dca18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dca1c:	ea40 0204 	orr.w	r2, r0, r4
   dca20:	e7db      	b.n	dc9da <__b2d+0x4a>
   dca22:	ea44 030c 	orr.w	r3, r4, ip
   dca26:	460a      	mov	r2, r1
   dca28:	e7d7      	b.n	dc9da <__b2d+0x4a>
   dca2a:	bf00      	nop
   dca2c:	3ff00000 	.word	0x3ff00000

000dca30 <__d2b>:
   dca30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dca34:	4689      	mov	r9, r1
   dca36:	2101      	movs	r1, #1
   dca38:	ec57 6b10 	vmov	r6, r7, d0
   dca3c:	4690      	mov	r8, r2
   dca3e:	f7ff fc7e 	bl	dc33e <_Balloc>
   dca42:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dca46:	4604      	mov	r4, r0
   dca48:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dca4c:	bb35      	cbnz	r5, dca9c <__d2b+0x6c>
   dca4e:	2e00      	cmp	r6, #0
   dca50:	9301      	str	r3, [sp, #4]
   dca52:	d028      	beq.n	dcaa6 <__d2b+0x76>
   dca54:	4668      	mov	r0, sp
   dca56:	9600      	str	r6, [sp, #0]
   dca58:	f7ff fd58 	bl	dc50c <__lo0bits>
   dca5c:	9900      	ldr	r1, [sp, #0]
   dca5e:	b300      	cbz	r0, dcaa2 <__d2b+0x72>
   dca60:	9a01      	ldr	r2, [sp, #4]
   dca62:	f1c0 0320 	rsb	r3, r0, #32
   dca66:	fa02 f303 	lsl.w	r3, r2, r3
   dca6a:	430b      	orrs	r3, r1
   dca6c:	40c2      	lsrs	r2, r0
   dca6e:	6163      	str	r3, [r4, #20]
   dca70:	9201      	str	r2, [sp, #4]
   dca72:	9b01      	ldr	r3, [sp, #4]
   dca74:	61a3      	str	r3, [r4, #24]
   dca76:	2b00      	cmp	r3, #0
   dca78:	bf14      	ite	ne
   dca7a:	2202      	movne	r2, #2
   dca7c:	2201      	moveq	r2, #1
   dca7e:	6122      	str	r2, [r4, #16]
   dca80:	b1d5      	cbz	r5, dcab8 <__d2b+0x88>
   dca82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dca86:	4405      	add	r5, r0
   dca88:	f8c9 5000 	str.w	r5, [r9]
   dca8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dca90:	f8c8 0000 	str.w	r0, [r8]
   dca94:	4620      	mov	r0, r4
   dca96:	b003      	add	sp, #12
   dca98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dca9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dcaa0:	e7d5      	b.n	dca4e <__d2b+0x1e>
   dcaa2:	6161      	str	r1, [r4, #20]
   dcaa4:	e7e5      	b.n	dca72 <__d2b+0x42>
   dcaa6:	a801      	add	r0, sp, #4
   dcaa8:	f7ff fd30 	bl	dc50c <__lo0bits>
   dcaac:	9b01      	ldr	r3, [sp, #4]
   dcaae:	6163      	str	r3, [r4, #20]
   dcab0:	2201      	movs	r2, #1
   dcab2:	6122      	str	r2, [r4, #16]
   dcab4:	3020      	adds	r0, #32
   dcab6:	e7e3      	b.n	dca80 <__d2b+0x50>
   dcab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dcabc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dcac0:	f8c9 0000 	str.w	r0, [r9]
   dcac4:	6918      	ldr	r0, [r3, #16]
   dcac6:	f7ff fd01 	bl	dc4cc <__hi0bits>
   dcaca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dcace:	e7df      	b.n	dca90 <__d2b+0x60>

000dcad0 <__ratio>:
   dcad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcad4:	4688      	mov	r8, r1
   dcad6:	4669      	mov	r1, sp
   dcad8:	4681      	mov	r9, r0
   dcada:	f7ff ff59 	bl	dc990 <__b2d>
   dcade:	a901      	add	r1, sp, #4
   dcae0:	4640      	mov	r0, r8
   dcae2:	ec55 4b10 	vmov	r4, r5, d0
   dcae6:	f7ff ff53 	bl	dc990 <__b2d>
   dcaea:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dcaee:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dcaf2:	eba3 0c02 	sub.w	ip, r3, r2
   dcaf6:	e9dd 3200 	ldrd	r3, r2, [sp]
   dcafa:	1a9b      	subs	r3, r3, r2
   dcafc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dcb00:	ec51 0b10 	vmov	r0, r1, d0
   dcb04:	2b00      	cmp	r3, #0
   dcb06:	bfd6      	itet	le
   dcb08:	460a      	movle	r2, r1
   dcb0a:	462a      	movgt	r2, r5
   dcb0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dcb10:	468b      	mov	fp, r1
   dcb12:	462f      	mov	r7, r5
   dcb14:	bfd4      	ite	le
   dcb16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dcb1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dcb1e:	4620      	mov	r0, r4
   dcb20:	ee10 2a10 	vmov	r2, s0
   dcb24:	465b      	mov	r3, fp
   dcb26:	4639      	mov	r1, r7
   dcb28:	f7fd fcd6 	bl	da4d8 <__aeabi_ddiv>
   dcb2c:	ec41 0b10 	vmov	d0, r0, r1
   dcb30:	b003      	add	sp, #12
   dcb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcb36 <__copybits>:
   dcb36:	3901      	subs	r1, #1
   dcb38:	b570      	push	{r4, r5, r6, lr}
   dcb3a:	1149      	asrs	r1, r1, #5
   dcb3c:	6914      	ldr	r4, [r2, #16]
   dcb3e:	3101      	adds	r1, #1
   dcb40:	f102 0314 	add.w	r3, r2, #20
   dcb44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dcb48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dcb4c:	1f05      	subs	r5, r0, #4
   dcb4e:	42a3      	cmp	r3, r4
   dcb50:	d30c      	bcc.n	dcb6c <__copybits+0x36>
   dcb52:	1aa3      	subs	r3, r4, r2
   dcb54:	3b11      	subs	r3, #17
   dcb56:	f023 0303 	bic.w	r3, r3, #3
   dcb5a:	3211      	adds	r2, #17
   dcb5c:	42a2      	cmp	r2, r4
   dcb5e:	bf88      	it	hi
   dcb60:	2300      	movhi	r3, #0
   dcb62:	4418      	add	r0, r3
   dcb64:	2300      	movs	r3, #0
   dcb66:	4288      	cmp	r0, r1
   dcb68:	d305      	bcc.n	dcb76 <__copybits+0x40>
   dcb6a:	bd70      	pop	{r4, r5, r6, pc}
   dcb6c:	f853 6b04 	ldr.w	r6, [r3], #4
   dcb70:	f845 6f04 	str.w	r6, [r5, #4]!
   dcb74:	e7eb      	b.n	dcb4e <__copybits+0x18>
   dcb76:	f840 3b04 	str.w	r3, [r0], #4
   dcb7a:	e7f4      	b.n	dcb66 <__copybits+0x30>

000dcb7c <__any_on>:
   dcb7c:	f100 0214 	add.w	r2, r0, #20
   dcb80:	6900      	ldr	r0, [r0, #16]
   dcb82:	114b      	asrs	r3, r1, #5
   dcb84:	4298      	cmp	r0, r3
   dcb86:	b510      	push	{r4, lr}
   dcb88:	db11      	blt.n	dcbae <__any_on+0x32>
   dcb8a:	dd0a      	ble.n	dcba2 <__any_on+0x26>
   dcb8c:	f011 011f 	ands.w	r1, r1, #31
   dcb90:	d007      	beq.n	dcba2 <__any_on+0x26>
   dcb92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dcb96:	fa24 f001 	lsr.w	r0, r4, r1
   dcb9a:	fa00 f101 	lsl.w	r1, r0, r1
   dcb9e:	428c      	cmp	r4, r1
   dcba0:	d10b      	bne.n	dcbba <__any_on+0x3e>
   dcba2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dcba6:	4293      	cmp	r3, r2
   dcba8:	d803      	bhi.n	dcbb2 <__any_on+0x36>
   dcbaa:	2000      	movs	r0, #0
   dcbac:	bd10      	pop	{r4, pc}
   dcbae:	4603      	mov	r3, r0
   dcbb0:	e7f7      	b.n	dcba2 <__any_on+0x26>
   dcbb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dcbb6:	2900      	cmp	r1, #0
   dcbb8:	d0f5      	beq.n	dcba6 <__any_on+0x2a>
   dcbba:	2001      	movs	r0, #1
   dcbbc:	e7f6      	b.n	dcbac <__any_on+0x30>

000dcbbe <_calloc_r>:
   dcbbe:	b513      	push	{r0, r1, r4, lr}
   dcbc0:	434a      	muls	r2, r1
   dcbc2:	4611      	mov	r1, r2
   dcbc4:	9201      	str	r2, [sp, #4]
   dcbc6:	f7fb fa85 	bl	d80d4 <_malloc_r>
   dcbca:	4604      	mov	r4, r0
   dcbcc:	b118      	cbz	r0, dcbd6 <_calloc_r+0x18>
   dcbce:	9a01      	ldr	r2, [sp, #4]
   dcbd0:	2100      	movs	r1, #0
   dcbd2:	f7fe f888 	bl	dace6 <memset>
   dcbd6:	4620      	mov	r0, r4
   dcbd8:	b002      	add	sp, #8
   dcbda:	bd10      	pop	{r4, pc}
   dcbdc:	0000      	movs	r0, r0
	...

000dcbe0 <nan>:
   dcbe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; dcbe8 <nan+0x8>
   dcbe4:	4770      	bx	lr
   dcbe6:	bf00      	nop
   dcbe8:	00000000 	.word	0x00000000
   dcbec:	7ff80000 	.word	0x7ff80000

000dcbf0 <__ascii_wctomb>:
   dcbf0:	b149      	cbz	r1, dcc06 <__ascii_wctomb+0x16>
   dcbf2:	2aff      	cmp	r2, #255	; 0xff
   dcbf4:	bf85      	ittet	hi
   dcbf6:	238a      	movhi	r3, #138	; 0x8a
   dcbf8:	6003      	strhi	r3, [r0, #0]
   dcbfa:	700a      	strbls	r2, [r1, #0]
   dcbfc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dcc00:	bf98      	it	ls
   dcc02:	2001      	movls	r0, #1
   dcc04:	4770      	bx	lr
   dcc06:	4608      	mov	r0, r1
   dcc08:	4770      	bx	lr
	...

000dcc0c <__aeabi_d2lz>:
   dcc0c:	b538      	push	{r3, r4, r5, lr}
   dcc0e:	2200      	movs	r2, #0
   dcc10:	2300      	movs	r3, #0
   dcc12:	4604      	mov	r4, r0
   dcc14:	460d      	mov	r5, r1
   dcc16:	f7fd fda7 	bl	da768 <__aeabi_dcmplt>
   dcc1a:	b928      	cbnz	r0, dcc28 <__aeabi_d2lz+0x1c>
   dcc1c:	4620      	mov	r0, r4
   dcc1e:	4629      	mov	r1, r5
   dcc20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcc24:	f7fd be8e 	b.w	da944 <__aeabi_d2ulz>
   dcc28:	4620      	mov	r0, r4
   dcc2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dcc2e:	f7fd fe89 	bl	da944 <__aeabi_d2ulz>
   dcc32:	4240      	negs	r0, r0
   dcc34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dcc38:	bd38      	pop	{r3, r4, r5, pc}
   dcc3a:	bf00      	nop

000dcc3c <dynalib_user>:
   dcc3c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dcc4c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   dcc5c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dcc6c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dcc7c:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   dcc8c:	4f4d 4544 7525 003e 2931 4120 746e 6e65     MODE%u>.1) Anten
   dcc9c:	616e 5320 6174 7574 2073 2428 4750 4f54     na Status ($PGTO
   dccac:	2950 3d00 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     P).=============
   dccbc:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dcccc:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   dccdc:	3d3d 3d3d 3d3d 3d3d 003d 6f43 6d6d 6e61     =========.Comman
   dccec:	2064 4449 203a 4100 746e 6e65 616e 5320     d ID: .Antenna S
   dccfc:	6174 7574 3a73 0020 2932 4720 6f6c 6162     tatus: .2) Globa
   dcd0c:	206c 6f50 6973 6974 6e6f 6e69 2067 7953     l Positioning Sy
   dcd1c:	7473 6d65 4620 7869 6465 4420 7461 2061     stem Fixed Data 
   dcd2c:	2428 5047 4747 2941 5500 4354 5420 6d69     ($GPGGA).UTC Tim
   dcd3c:	3a65 0020 614c 6974 7574 6564 203a 4e00     e: .Latitude: .N
   dcd4c:	726f 6874 532f 756f 6874 6e49 6964 6163     orth/SouthIndica
   dcd5c:	6f74 3a72 0020 6f4c 676e 7469 6475 3a65     tor: .Longitude:
   dcd6c:	0020 6145 7473 572f 7365 4974 646e 6369      .East/WestIndic
   dcd7c:	7461 726f 203a 5000 736f 7469 6f69 206e     ator: .Position 
   dcd8c:	6946 2078 6e49 6964 6163 6f74 3a72 0020     Fix Indicator: .
   dcd9c:	6153 6574 6c6c 7469 7365 5520 6573 3a64     Satellites Used:
   dcdac:	0020 6f48 6972 6f7a 746e 6c61 4420 6c69      .Horizontal Dil
   dcdbc:	7475 6f69 206e 666f 5020 6572 6963 6973     ution of Precisi
   dcdcc:	6e6f 203a 4100 746c 7469 6475 3a65 0020     on: .Altitude: .
   dcddc:	6547 696f 6164 206c 6553 6170 6172 6974     Geoidal Separati
   dcdec:	6e6f 203a 4100 6567 6f20 2066 6944 6666     on: .Age of Diff
   dcdfc:	202e 6f43 7272 3a2e 0020 6946 3a78 2000     . Corr.: .Fix:. 
   dce0c:	0020 6543 6c6c 532d 6769 003a 0025 614c      .Cell-Sig:.%.La
   dce1c:	3a74 4c00 6e6f 3a67 5300 2044 6143 6472     t:.Long:.SD Card
   dce2c:	6620 6c69 2065 6564 6976 6563 4449 782d      file deviceID-x
   dce3c:	7878 6f20 6570 206e 6166 6c69 6465 2c00     xx open failed.,
   dce4c:	4900 696e 6974 6c61 7a69 6e69 2e67 2e2e     .Initializing...
   dce5c:	4900 696e 6974 6c61 7a69 6e69 0067 4453     .Initializing.SD
   dce6c:	6143 6472 535f 7465 7075 5300 4344 7261     Card_Setup.SDCar
   dce7c:	2064 6f4c 6767 7265 5300 2044 6143 6472     d Logger.SD Card
   dce8c:	4920 696e 2074 202d 4b4f 5300 4344 7261      Init - OK.SDCar
   dce9c:	5f64 6146 6c69 7275 2165 4100 454c 5452     d_Failure!.ALERT
   dceac:	5300 2044 6143 6472 4920 696e 2074 6146     .SD Card Init Fa
   dcebc:	6c69 6465 2d00 2e00 7363 0076               iled.-..csv.

000dcec8 <_ZTVN8particle11SPISettingsE>:
	...
   dced0:	41f1 000d 40c9 000d 4101 000d               .A...@...A..

000dcedc <_ZTV5Timer>:
	...
   dcee4:	4275 000d 42bd 000d 412f 000d               uB...B../A..

000dcef0 <_ZTV4File>:
	...
   dcef8:	40ff 000d 410f 000d 41bd 000d 4129 000d     .@...A...A..)A..
   dcf08:	40cb 000d 4181 000d 417b 000d 4175 000d     .@...A..{A..uA..

000dcf18 <_ZL4font>:
   dcf18:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   dcf28:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   dcf38:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   dcf48:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   dcf58:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   dcf68:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   dcf78:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   dcf88:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   dcf98:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   dcfa8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   dcfb8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   dcfc8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   dcfd8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   dcfe8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   dcff8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   dd008:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   dd018:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   dd028:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   dd038:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   dd048:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   dd058:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   dd068:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   dd078:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   dd088:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   dd098:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   dd0a8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   dd0b8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   dd0c8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   dd0d8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   dd0e8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   dd0f8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   dd108:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   dd118:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   dd128:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   dd138:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   dd148:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   dd158:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   dd168:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   dd178:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   dd188:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   dd198:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   dd1a8:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   dd1b8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   dd1c8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   dd1d8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   dd1e8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   dd1f8:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   dd208:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   dd218:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   dd228:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   dd238:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   dd248:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   dd258:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   dd268:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   dd278:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   dd288:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   dd298:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   dd2a8:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   dd2b8:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   dd2c8:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   dd2d8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   dd2e8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   dd2f8:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   dd308:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   dd318:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   dd328:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   dd338:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   dd348:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   dd358:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   dd368:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   dd378:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   dd388:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   dd398:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   dd3a8:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   dd3b8:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   dd3c8:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   dd3d8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   dd3e8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   dd3f8:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   dd408:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000dd418 <_ZTV12Adafruit_GFX>:
	...
   dd428:	52b1 000d 8ca9 000d 40a5 000d 4cb9 000d     .R.......@...L..
   dd438:	4cbb 000d 4ced 000d 4cc9 000d 4cdb 000d     .L...L...L...L..
   dd448:	4bfd 000d 4cb9 000d 4ee5 000d 4e5f 000d     .K...L...N.._N..
   dd458:	4d05 000d 4d43 000d 4d7d 000d 4dc3 000d     .M..CM..}M...M..
   dd468:	4e61 000d 4ddf 000d                         aN...M..

000dd470 <_ZL12splash1_data>:
   dd470:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   dd480:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   dd490:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   dd4a0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   dd4b0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   dd4c0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   dd4d8:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   dd4e8:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   dd4f8:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   dd508:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   dd518:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   dd528:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   dd538:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   dd548:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   dd558:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   dd568:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   dd578:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   dd588:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   dd598:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   dd5a8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   dd5b8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   dd5c8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   dd5d8:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   dd5e8:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   dd600:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   dd618:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   dd628:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   dd638:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   dd648:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   dd658:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   dd668:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   dd678:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   dd688:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   dd698:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   dd6a8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   dd6b8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   dd6c8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   dd6d8:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   dd6e8:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   dd6f8:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   dd708:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   dd718:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   dd728:	fdff 5b6b 6adb c0fd                         ..k[.j..

000dd730 <_ZL12splash2_data>:
   dd730:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   dd740:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   dd750:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   dd76c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   dd77c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   dd78c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   dd79c:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   dd7ac:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   dd7bc:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   dd7cc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   dd7dc:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   dd7ec:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   dd7fc:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   dd80c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   dd81c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   dd82c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   dd83c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   dd84c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   dd85c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   dd86c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   dd87c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   dd88c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   dd89c:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   dd8ac:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   dd8c4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   dd8d4:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   dd8e4:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   dd8f4:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   dd904:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000dd910 <_ZTV16Adafruit_SSD1306>:
	...
   dd918:	53c1 000d 53d9 000d 52b1 000d 8ca9 000d     .S...S...R......
   dd928:	53ed 000d 4cb9 000d 4cbb 000d 4ced 000d     .S...L...L...L..
   dd938:	4cc9 000d 4cdb 000d 4bfd 000d 4cb9 000d     .L...L...K...L..
   dd948:	4ee5 000d 55a7 000d 5b3b 000d 5aed 000d     .N...U..;[...Z..
   dd958:	4d7d 000d 4dc3 000d 4e61 000d 4ddf 000d     }M...M..aN...M..

000dd968 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   dd968:	8000 e0c0 f8f0 fefc                         ........

000dd970 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   dd970:	0100 0703 1f0f 7f3f                         ......?.

000dd978 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   dd978:	d5ae a880                                   ....

000dd97c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   dd97c:	00d3 8d40                                   ..@.

000dd980 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   dd980:	0020 c8a1                                    ...

000dd984 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   dd984:	40db a6a4 af2e                              .@....

000dd98a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   dd98a:	02da 8f81                                   ....

000dd98e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   dd98e:	12da                                         ...

000dd991 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   dd991:	02da                                         ...

000dd994 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   dd994:	0022 21ff 2400 4d50 4b54 3532 2c31 3639     "..!.$PMTK251,96
   dd9a4:	3030 312a 0037 5024 544d 324b 3032 352c     00*17.$PMTK220,5
   dd9b4:	3030 2a30 4231 2400 4d50 4b54 3033 2c30     000*1B.$PMTK300,
   dd9c4:	3031 3030 302c 302c 302c 302c 312a 0043     1000,0,0,0,0*1C.
   dd9d4:	5024 544d 334b 3431 302c 312c 302c 312c     $PMTK314,0,1,0,1
   dd9e4:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
   dd9f4:	302c 302c 302c 302c 302c 302c 302c 322a     ,0,0,0,0,0,0,0*2
   dda04:	0038 5024 544d 334b 3130 322c 322a 0045     8.$PMTK301,2*2E.
   dda14:	5024 4347 444d 332c 2c33 2a31 4336 4200     $PGCMD,33,1*6C.B
   dda24:	6675 6566 2072 764f 7265 6e75 203a 0027     uffer Overun: '.
   dda34:	002a 0024                                   *.$.

000dda38 <CSWTCH.24>:
   dda38:	0201 0403 0605 0807 0009 0000 0000 0000     ................
   dda48:	0b0a 0d0c 0f0e 4724 4750 4147 2400 5047     ......$GPGGA.$GP
   dda58:	5347 0041 4724 4750 5653 2400 5047 4d52     GSA.$GPGSV.$GPRM
   dda68:	0043 4724 5650 4754 2400 4750 4f54 0050     C.$GPVTG.$PGTOP.

000dda78 <_ZTV3Gga>:
	...
   dda80:	626d 000d                                   mb..

000dda84 <_ZTV5Pgtop>:
	...
   dda8c:	6241 000d                                   Ab..

000dda90 <_ZTV16OledWingAdafruit>:
	...
   dda98:	79e9 000d 7a09 000d 52b1 000d 8ca9 000d     .y...z...R......
   ddaa8:	53ed 000d 4cb9 000d 4cbb 000d 4ced 000d     .S...L...L...L..
   ddab8:	4cc9 000d 4cdb 000d 4bfd 000d 4cb9 000d     .L...L...K...L..
   ddac8:	4ee5 000d 55a7 000d 5b3b 000d 5aed 000d     .N...U..;[...Z..
   ddad8:	4d7d 000d 4dc3 000d 4e61 000d 4ddf 000d     }M...M..aN...M..

000ddae8 <_ZTVN5spark13CellularClassE>:
	...
   ddaf0:	81bf 000d 81b5 000d 81ab 000d 8161 000d     ............a...
   ddb00:	819f 000d 8193 000d 8b89 000d 8b91 000d     ................
   ddb10:	8187 000d 817f 000d 8175 000d 816b 000d     ........u...k...
   ddb20:	8bc1 000d                                   ....

000ddb24 <_ZTV14CellularSignal>:
	...
   ddb2c:	826d 000d 8295 000d 826f 000d 82a5 000d     m.......o.......
   ddb3c:	82d9 000d 8305 000d 8339 000d 8389 000d     ........9.......
   ddb4c:	8273 000d 828f 000d fffc ffff 0000 0000     s...............
   ddb5c:	83af 000d                                   ....

000ddb60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ddb68:	83cf 000d 83d5 000d 8413 000d 83e3 000d     ................
   ddb78:	83d1 000d                                   ....

000ddb7c <_ZTVN5spark13EthernetClassE>:
	...
   ddb84:	898b 000d 8981 000d 8977 000d 896d 000d     ........w...m...
   ddb94:	8961 000d 8955 000d 8b89 000d 8b91 000d     a...U...........
   ddba4:	8949 000d 8941 000d 8937 000d 892d 000d     I...A...7...-...
   ddbb4:	8bc1 000d                                   ....

000ddbb8 <_ZTV7TwoWire>:
	...
   ddbc0:	89a9 000d 89f3 000d 89cb 000d 89ab 000d     ................
   ddbd0:	89d3 000d 89db 000d 89e3 000d 89eb 000d     ................

000ddbe0 <_ZTV9IPAddress>:
	...
   ddbe8:	8a65 000d 8a55 000d 8a57 000d 7061 0070     e...U...W...app.

000ddbf8 <_ZTVN5spark12NetworkClassE>:
	...
   ddc00:	8b49 000d 8b53 000d 8b5d 000d 8b67 000d     I...S...]...g...
   ddc10:	8b71 000d 8b7d 000d 8b89 000d 8b91 000d     q...}...........
   ddc20:	8b99 000d 8ba5 000d 8bad 000d 8bb7 000d     ................
   ddc30:	8bc1 000d 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000ddc40 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ddc40:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   ddc50:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   ddc60:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   ddc70:	0000 0000                                   ....

000ddc74 <_ZTV11USARTSerial>:
	...
   ddc7c:	9999 000d 9a07 000d 99df 000d 8ca9 000d     ................
   ddc8c:	99af 000d 99cb 000d 99bd 000d 99d9 000d     ................
   ddc9c:	999b 000d 99a1 000d                         ........

000ddca4 <_ZTV9USBSerial>:
	...
   ddcac:	9aa3 000d 9b0b 000d 9ae1 000d 8ca9 000d     ................
   ddcbc:	9ad3 000d 9aa5 000d 9ab5 000d 9b05 000d     ................
   ddccc:	9ac5 000d 9a9d 000d                         ........

000ddcd4 <_ZSt7nothrow>:
   ddcd4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   ddce4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000ddcf5 <day_name.6145>:
   ddcf5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddd05:	6972 6153                                    riSat

000ddd0a <mon_name.6146>:
   ddd0a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddd1a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddd2a:	4476 6365 6e69 7469 0079                    vDecinity.

000ddd34 <fpi.7566>:
   ddd34:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   ddd44:	0000 0000                                   ....

000ddd48 <fpinan.7602>:
   ddd48:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000ddd60 <tinytens>:
   ddd60:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ddd70:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ddd80:	6f43 64ac 0628 1168                         Co.d(.h.

000ddd88 <_ctype_>:
   ddd88:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ddd98:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ddda8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dddb8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dddc8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dddd8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ddde8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dddf8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dde08:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dde8c <_C_numeric_locale>:
   dde8c:	ce5b 000d dcf4 000d dd50 2003 4f50 4953     [.......P.. POSI
   dde9c:	0058 0000                                   X...

000ddea0 <__mprec_bigtens>:
   ddea0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   ddeb0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   ddec0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000ddec8 <__mprec_tens>:
   ddec8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dded8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   ddee8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   ddef8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   ddf08:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   ddf18:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   ddf28:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   ddf38:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   ddf48:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   ddf58:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ddf68:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ddf78:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ddf88:	9db4 79d9 7843 44ea                         ...yCx.D

000ddf90 <p05.7490>:
   ddf90:	0005 0000 0019 0000 007d 0000               ........}...

000ddf9c <link_const_variable_data_end>:
   ddf9c:	000d4a81 	.word	0x000d4a81
   ddfa0:	000d8151 	.word	0x000d8151
   ddfa4:	000d823d 	.word	0x000d823d
   ddfa8:	000d8995 	.word	0x000d8995
   ddfac:	000d8b39 	.word	0x000d8b39
   ddfb0:	000d8c95 	.word	0x000d8c95
   ddfb4:	000d8f91 	.word	0x000d8f91
   ddfb8:	000d962d 	.word	0x000d962d
   ddfbc:	000d9985 	.word	0x000d9985
